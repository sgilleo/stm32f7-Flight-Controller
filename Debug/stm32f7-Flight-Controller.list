
stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080126b8  080126b8  000136b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ae0  08012ae0  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ae0  08012ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ae8  08012ae8  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ae8  08012ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012aec  08012aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08012af0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f8  200002d4  08012dc4  000142d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023cc  08012dc4  000143cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b71  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050af  00000000  00000000  00037e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c7  00000000  00000000  0003eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029510  00000000  00000000  00040367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e93  00000000  00000000  00069877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb99a  00000000  00000000  0009270a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e0a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c7c  00000000  00000000  0017e0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00186d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080126a0 	.word	0x080126a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	080126a0 	.word	0x080126a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <AHRS_Init>:
#include "AHRS.h"

//Quaternion q, q_gyro, q_acc;
Vec3 attitude_gyro, attitude_acc, attitude;

void AHRS_Init(){
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	@ 0x2c
 8001008:	af00      	add	r7, sp, #0

	//q = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};
	//q_gyro = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};
	//q_acc = (Quaternion) {.w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f};

	attitude_gyro = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <AHRS_Init+0x5c>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <AHRS_Init+0x5c>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <AHRS_Init+0x5c>)
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
	attitude_acc = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <AHRS_Init+0x60>)
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <AHRS_Init+0x60>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <AHRS_Init+0x60>)
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
	attitude = (Vec3) {.x = 0.0f, .y = 0.0f, .z = 0.0f};
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <AHRS_Init+0x64>)
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <AHRS_Init+0x64>)
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <AHRS_Init+0x64>)
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
}
 8001052:	bf00      	nop
 8001054:	372c      	adds	r7, #44	@ 0x2c
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200002f0 	.word	0x200002f0
 8001064:	200002fc 	.word	0x200002fc
 8001068:	20000308 	.word	0x20000308
 800106c:	00000000 	.word	0x00000000

08001070 <AHRS_Update_Gyro>:

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	eef0 6a40 	vmov.f32	s13, s0
 800107a:	eeb0 7a60 	vmov.f32	s14, s1
 800107e:	eef0 7a41 	vmov.f32	s15, s2
 8001082:	edc7 1a00 	vstr	s3, [r7]
 8001086:	edc7 6a01 	vstr	s13, [r7, #4]
 800108a:	ed87 7a02 	vstr	s14, [r7, #8]
 800108e:	edc7 7a03 	vstr	s15, [r7, #12]
	q_gyro.y = q.y + qDot.y * dt * DEG_TO_RAD;
	q_gyro.z = q.z + qDot.z * dt * DEG_TO_RAD;

	q_gyro = Quaternion_normalize(q_gyro);*/

	attitude_gyro.x = attitude.x + gyro.x * dt * DEG_TO_RAD;
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa7e 	bl	8000598 <__aeabi_f2d>
 800109c:	4604      	mov	r4, r0
 800109e:	460d      	mov	r5, r1
 80010a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	ee17 0a90 	vmov	r0, s15
 80010b0:	f7ff fa72 	bl	8000598 <__aeabi_f2d>
 80010b4:	a330      	add	r3, pc, #192	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fac5 	bl	8000648 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f909 	bl	80002dc <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fdb1 	bl	8000c38 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 80010da:	6013      	str	r3, [r2, #0]
	attitude_gyro.y = attitude.y + gyro.y * dt * DEG_TO_RAD;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa59 	bl	8000598 <__aeabi_f2d>
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ee:	edd7 7a00 	vldr	s15, [r7]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa4d 	bl	8000598 <__aeabi_f2d>
 80010fe:	a31e      	add	r3, pc, #120	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff faa0 	bl	8000648 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff f8e4 	bl	80002dc <__adddf3>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd8c 	bl	8000c38 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 8001124:	6053      	str	r3, [r2, #4]
	attitude_gyro.z = attitude.z + gyro.z * dt * DEG_TO_RAD;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <AHRS_Update_Gyro+0x110>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa34 	bl	8000598 <__aeabi_f2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	ed97 7a03 	vldr	s14, [r7, #12]
 8001138:	edd7 7a00 	vldr	s15, [r7]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	ee17 0a90 	vmov	r0, s15
 8001144:	f7ff fa28 	bl	8000598 <__aeabi_f2d>
 8001148:	a30b      	add	r3, pc, #44	@ (adr r3, 8001178 <AHRS_Update_Gyro+0x108>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa7b 	bl	8000648 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f8bf 	bl	80002dc <__adddf3>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd67 	bl	8000c38 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <AHRS_Update_Gyro+0x114>)
 800116e:	6093      	str	r3, [r2, #8]

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	a252dd11 	.word	0xa252dd11
 800117c:	3f91df46 	.word	0x3f91df46
 8001180:	20000308 	.word	0x20000308
 8001184:	200002f0 	.word	0x200002f0

08001188 <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 8001188:	b580      	push	{r7, lr}
 800118a:	ed2d 8b02 	vpush	{d8}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	eef0 6a40 	vmov.f32	s13, s0
 8001196:	eeb0 7a60 	vmov.f32	s14, s1
 800119a:	eef0 7a41 	vmov.f32	s15, s2
 800119e:	edc7 6a01 	vstr	s13, [r7, #4]
 80011a2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011a6:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 80011aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80011b2:	eef0 0a47 	vmov.f32	s1, s14
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f011 f81d 	bl	80121f8 <atan2f>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	eeb1 8a67 	vneg.f32	s16, s15
 80011d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	edd7 6a03 	vldr	s13, [r7, #12]
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	ee17 0a90 	vmov	r0, s15
 80011f0:	f7ff f9d2 	bl	8000598 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ec43 2b10 	vmov	d0, r2, r3
 80011fc:	f010 ffd0 	bl	80121a0 <sqrt>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fd16 	bl	8000c38 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	ee00 3a90 	vmov	s1, r3
 8001212:	eeb0 0a48 	vmov.f32	s0, s16
 8001216:	f010 ffef 	bl	80121f8 <atan2f>
 800121a:	eef0 7a40 	vmov.f32	s15, s0
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 8001220:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <AHRS_Update_Acc+0xb4>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <AHRS_Update_Acc+0xb0>)
 800122a:	6093      	str	r3, [r2, #8]

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	ecbd 8b02 	vpop	{d8}
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200002fc 	.word	0x200002fc
 800123c:	200002f0 	.word	0x200002f0

08001240 <AHRS_Update_Complementary_Filter>:

void AHRS_Update_Complementary_Filter(float gain){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	ed87 0a01 	vstr	s0, [r7, #4]

	//q = Quaternion_Slerp(q_acc, q_gyro, 0.80);
	//q = Quaternion_Lerp(q_acc, q_gyro, 0.95);
	//q = Quaternion_normalize(q);

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	edd7 7a01 	vldr	s15, [r7, #4]
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 8001274:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 800127a:	ed93 7a01 	vldr	s14, [r3, #4]
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 8001294:	edd3 7a01 	vldr	s15, [r3, #4]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 80012a2:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <AHRS_Update_Complementary_Filter+0xa0>)
 80012a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <AHRS_Update_Complementary_Filter+0xa4>)
 80012c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <AHRS_Update_Complementary_Filter+0xa8>)
 80012d0:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200002f0 	.word	0x200002f0
 80012e4:	200002fc 	.word	0x200002fc
 80012e8:	20000308 	.word	0x20000308
 80012ec:	00000000 	.word	0x00000000

080012f0 <Stabilized_Mode>:

#include "Flight_Modes.h"

Vec3 ref = {0.0f, 0.0f, 0.0f};

void Stabilized_Mode(Sbus channels){
 80012f0:	b084      	sub	sp, #16
 80012f2:	b5b0      	push	{r4, r5, r7, lr}
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f107 0410 	add.w	r4, r7, #16
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ref.x = (channels.channels[1]-1500) * 0.002f * STABILIZED_MAX_ROLL;
 80012fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001302:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001470 <Stabilized_Mode+0x180>
 8001306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800130a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001474 <Stabilized_Mode+0x184>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	ee17 0a90 	vmov	r0, s15
 8001316:	f7ff f93f 	bl	8000598 <__aeabi_f2d>
 800131a:	a34d      	add	r3, pc, #308	@ (adr r3, 8001450 <Stabilized_Mode+0x160>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f992 	bl	8000648 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc84 	bl	8000c38 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <Stabilized_Mode+0x188>)
 8001334:	6013      	str	r3, [r2, #0]
	ref.y = (channels.channels[2]-1500) * 0.002f * STABILIZED_MAX_PITCH;
 8001336:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800133a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001470 <Stabilized_Mode+0x180>
 800133e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001342:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001474 <Stabilized_Mode+0x184>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	ee17 0a90 	vmov	r0, s15
 800134e:	f7ff f923 	bl	8000598 <__aeabi_f2d>
 8001352:	a33f      	add	r3, pc, #252	@ (adr r3, 8001450 <Stabilized_Mode+0x160>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f976 	bl	8000648 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc68 	bl	8000c38 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	4a43      	ldr	r2, [pc, #268]	@ (8001478 <Stabilized_Mode+0x188>)
 800136c:	6053      	str	r3, [r2, #4]
	ref.z += (channels.channels[3]-1500) * 0.0031415 * STABILIZED_YAW_RATE;
 800136e:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <Stabilized_Mode+0x188>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f910 	bl	8000598 <__aeabi_f2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001380:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001470 <Stabilized_Mode+0x180>
 8001384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f904 	bl	8000598 <__aeabi_f2d>
 8001390:	a331      	add	r3, pc, #196	@ (adr r3, 8001458 <Stabilized_Mode+0x168>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f957 	bl	8000648 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	a32f      	add	r3, pc, #188	@ (adr r3, 8001460 <Stabilized_Mode+0x170>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f94e 	bl	8000648 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff92 	bl	80002dc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc3a 	bl	8000c38 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001478 <Stabilized_Mode+0x188>)
 80013c8:	6093      	str	r3, [r2, #8]
	if(ref.z >= 2*M_PI) ref.z -= 2*M_PI;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <Stabilized_Mode+0x188>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	a324      	add	r3, pc, #144	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff fbbb 	bl	8000b54 <__aeabi_dcmpge>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <Stabilized_Mode+0x11a>
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <Stabilized_Mode+0x188>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8d5 	bl	8000598 <__aeabi_f2d>
 80013ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7fe ff70 	bl	80002d8 <__aeabi_dsub>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fc1a 	bl	8000c38 <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <Stabilized_Mode+0x188>)
 8001408:	6093      	str	r3, [r2, #8]
	if(ref.z < 0) ref.z += 2*M_PI;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <Stabilized_Mode+0x188>)
 800140c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	d400      	bmi.n	800141c <Stabilized_Mode+0x12c>

}
 800141a:	e012      	b.n	8001442 <Stabilized_Mode+0x152>
	if(ref.z < 0) ref.z += 2*M_PI;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <Stabilized_Mode+0x188>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f8b9 	bl	8000598 <__aeabi_f2d>
 8001426:	a310      	add	r3, pc, #64	@ (adr r3, 8001468 <Stabilized_Mode+0x178>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe ff56 	bl	80002dc <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbfe 	bl	8000c38 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <Stabilized_Mode+0x188>)
 8001440:	6093      	str	r3, [r2, #8]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800144a:	b004      	add	sp, #16
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	54442d18 	.word	0x54442d18
 8001454:	3fe921fb 	.word	0x3fe921fb
 8001458:	f85510d4 	.word	0xf85510d4
 800145c:	3f69bc33 	.word	0x3f69bc33
 8001460:	47ae147b 	.word	0x47ae147b
 8001464:	3f847ae1 	.word	0x3f847ae1
 8001468:	54442d18 	.word	0x54442d18
 800146c:	401921fb 	.word	0x401921fb
 8001470:	44bb8000 	.word	0x44bb8000
 8001474:	3b03126f 	.word	0x3b03126f
 8001478:	20000314 	.word	0x20000314
 800147c:	00000000 	.word	0x00000000

08001480 <Acro_Mode>:

void Acro_Mode(Sbus channels){
 8001480:	b084      	sub	sp, #16
 8001482:	b5b0      	push	{r4, r5, r7, lr}
 8001484:	af00      	add	r7, sp, #0
 8001486:	f107 0410 	add.w	r4, r7, #16
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ref.x += (channels.channels[1]-1500) * 0.0031415 * ACRO_ROLL_RATE;
 800148e:	4b6c      	ldr	r3, [pc, #432]	@ (8001640 <Acro_Mode+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f880 	bl	8000598 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
 800149c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014a0:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001644 <Acro_Mode+0x1c4>
 80014a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a8:	ee17 0a90 	vmov	r0, s15
 80014ac:	f7ff f874 	bl	8000598 <__aeabi_f2d>
 80014b0:	a35d      	add	r3, pc, #372	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8c7 	bl	8000648 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a35b      	add	r3, pc, #364	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f8be 	bl	8000648 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe ff02 	bl	80002dc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fbaa 	bl	8000c38 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <Acro_Mode+0x1c0>)
 80014e8:	6013      	str	r3, [r2, #0]
	ref.y += (channels.channels[2]-1500) * 0.0031415 * ACRO_PITCH_RATE;
 80014ea:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <Acro_Mode+0x1c0>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f852 	bl	8000598 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014fc:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001644 <Acro_Mode+0x1c4>
 8001500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001504:	ee17 0a90 	vmov	r0, s15
 8001508:	f7ff f846 	bl	8000598 <__aeabi_f2d>
 800150c:	a346      	add	r3, pc, #280	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f899 	bl	8000648 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	a344      	add	r3, pc, #272	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f890 	bl	8000648 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7fe fed4 	bl	80002dc <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fb7c 	bl	8000c38 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4a3f      	ldr	r2, [pc, #252]	@ (8001640 <Acro_Mode+0x1c0>)
 8001544:	6053      	str	r3, [r2, #4]
	ref.z += (channels.channels[3]-1500) * 0.0031415 * ACRO_YAW_RATE;
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <Acro_Mode+0x1c0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f824 	bl	8000598 <__aeabi_f2d>
 8001550:	4604      	mov	r4, r0
 8001552:	460d      	mov	r5, r1
 8001554:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001558:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001644 <Acro_Mode+0x1c4>
 800155c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001560:	ee17 0a90 	vmov	r0, s15
 8001564:	f7ff f818 	bl	8000598 <__aeabi_f2d>
 8001568:	a32f      	add	r3, pc, #188	@ (adr r3, 8001628 <Acro_Mode+0x1a8>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f86b 	bl	8000648 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001630 <Acro_Mode+0x1b0>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f862 	bl	8000648 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7fe fea6 	bl	80002dc <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb4e 	bl	8000c38 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4a28      	ldr	r2, [pc, #160]	@ (8001640 <Acro_Mode+0x1c0>)
 80015a0:	6093      	str	r3, [r2, #8]
	if(ref.z >= 2*M_PI) ref.z -= 2*M_PI;
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <Acro_Mode+0x1c0>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fff6 	bl	8000598 <__aeabi_f2d>
 80015ac:	a322      	add	r3, pc, #136	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff facf 	bl	8000b54 <__aeabi_dcmpge>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d012      	beq.n	80015e2 <Acro_Mode+0x162>
 80015bc:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <Acro_Mode+0x1c0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffe9 	bl	8000598 <__aeabi_f2d>
 80015c6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe84 	bl	80002d8 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fb2e 	bl	8000c38 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <Acro_Mode+0x1c0>)
 80015e0:	6093      	str	r3, [r2, #8]
	if(ref.z < 0) ref.z += 2*M_PI;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <Acro_Mode+0x1c0>)
 80015e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	d400      	bmi.n	80015f4 <Acro_Mode+0x174>
}
 80015f2:	e012      	b.n	800161a <Acro_Mode+0x19a>
	if(ref.z < 0) ref.z += 2*M_PI;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <Acro_Mode+0x1c0>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffcd 	bl	8000598 <__aeabi_f2d>
 80015fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8001638 <Acro_Mode+0x1b8>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe fe6a 	bl	80002dc <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fb12 	bl	8000c38 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <Acro_Mode+0x1c0>)
 8001618:	6093      	str	r3, [r2, #8]
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001622:	b004      	add	sp, #16
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	f85510d4 	.word	0xf85510d4
 800162c:	3f69bc33 	.word	0x3f69bc33
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fa99999 	.word	0x3fa99999
 8001638:	54442d18 	.word	0x54442d18
 800163c:	401921fb 	.word	0x401921fb
 8001640:	20000314 	.word	0x20000314
 8001644:	44bb8000 	.word	0x44bb8000

08001648 <Manual_Mode>:

void Manual_Mode(Sbus channels, float *outputs){
 8001648:	b084      	sub	sp, #16
 800164a:	b490      	push	{r4, r7}
 800164c:	af00      	add	r7, sp, #0
 800164e:	f107 0408 	add.w	r4, r7, #8
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	outputs[0] = channels.channels[1];
 8001656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800165a:	601a      	str	r2, [r3, #0]
	outputs[1] = channels.channels[2];
 800165c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800165e:	3304      	adds	r3, #4
 8001660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001662:	601a      	str	r2, [r3, #0]
	outputs[2] = channels.channels[3];
 8001664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001666:	3308      	adds	r3, #8
 8001668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc90      	pop	{r4, r7}
 8001672:	b004      	add	sp, #16
 8001674:	4770      	bx	lr

08001676 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f002 fa76 	bl	8003bb8 <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 80016cc:	f107 030e 	add.w	r3, r7, #14
 80016d0:	461a      	mov	r2, r3
 80016d2:	2175      	movs	r1, #117	@ 0x75
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa29 	bl	8001b2c <ICM42688_Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <ICM42688_Begin+0x72>
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	e05d      	b.n	80017a4 <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	2b47      	cmp	r3, #71	@ 0x47
 80016ec:	d001      	beq.n	80016f2 <ICM42688_Begin+0x7c>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e058      	b.n	80017a4 <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 80016f2:	2326      	movs	r3, #38	@ 0x26
 80016f4:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 80016f6:	f107 030e 	add.w	r3, r7, #14
 80016fa:	461a      	mov	r2, r3
 80016fc:	214f      	movs	r1, #79	@ 0x4f
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f9ec 	bl	8001adc <ICM42688_Write>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <ICM42688_Begin+0x9c>
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	e048      	b.n	80017a4 <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2206      	movs	r2, #6
 800171e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 8001722:	2346      	movs	r3, #70	@ 0x46
 8001724:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001726:	f107 030e 	add.w	r3, r7, #14
 800172a:	461a      	mov	r2, r3
 800172c:	2150      	movs	r1, #80	@ 0x50
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f9d4 	bl	8001adc <ICM42688_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <ICM42688_Begin+0xcc>
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	e030      	b.n	80017a4 <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2206      	movs	r2, #6
 800174e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f863 	bl	800181e <ICM42688_Set_Interrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <ICM42688_Begin+0xf0>
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	e01e      	b.n	80017a4 <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f820 	bl	80017ac <ICM42688_Set_Filters>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <ICM42688_Begin+0x104>
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	e014      	b.n	80017a4 <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 800177a:	230f      	movs	r3, #15
 800177c:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 800177e:	f107 030e 	add.w	r3, r7, #14
 8001782:	461a      	mov	r2, r3
 8001784:	214e      	movs	r1, #78	@ 0x4e
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f9a8 	bl	8001adc <ICM42688_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <ICM42688_Begin+0x124>
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	e004      	b.n	80017a4 <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 80017b4:	2300      	movs	r3, #0
 80017b6:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 80017b8:	f107 030e 	add.w	r3, r7, #14
 80017bc:	461a      	mov	r2, r3
 80017be:	2151      	movs	r1, #81	@ 0x51
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f98b 	bl	8001adc <ICM42688_Write>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <ICM42688_Set_Filters+0x28>
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	e020      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 80017d4:	2300      	movs	r3, #0
 80017d6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 80017d8:	f107 030e 	add.w	r3, r7, #14
 80017dc:	461a      	mov	r2, r3
 80017de:	2153      	movs	r1, #83	@ 0x53
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f97b 	bl	8001adc <ICM42688_Write>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <ICM42688_Set_Filters+0x48>
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	e010      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 80017f4:	2333      	movs	r3, #51	@ 0x33
 80017f6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 80017f8:	f107 030e 	add.w	r3, r7, #14
 80017fc:	461a      	mov	r2, r3
 80017fe:	2152      	movs	r1, #82	@ 0x52
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f96b 	bl	8001adc <ICM42688_Write>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <ICM42688_Set_Filters+0x68>
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	e000      	b.n	8001816 <ICM42688_Set_Filters+0x6a>

	return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001826:	2303      	movs	r3, #3
 8001828:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 800182a:	f107 030e 	add.w	r3, r7, #14
 800182e:	461a      	mov	r2, r3
 8001830:	2114      	movs	r1, #20
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f952 	bl	8001adc <ICM42688_Write>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <ICM42688_Set_Interrupts+0x28>
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	e031      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001846:	f107 030e 	add.w	r3, r7, #14
 800184a:	461a      	mov	r2, r3
 800184c:	2164      	movs	r1, #100	@ 0x64
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f96c 	bl	8001b2c <ICM42688_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <ICM42688_Set_Interrupts+0x44>
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e023      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001862:	7bbb      	ldrb	r3, [r7, #14]
 8001864:	f023 0310 	bic.w	r3, r3, #16
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 800186c:	f107 030e 	add.w	r3, r7, #14
 8001870:	461a      	mov	r2, r3
 8001872:	2164      	movs	r1, #100	@ 0x64
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f931 	bl	8001adc <ICM42688_Write>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <ICM42688_Set_Interrupts+0x6a>
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	e010      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001888:	2308      	movs	r3, #8
 800188a:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 800188c:	f107 030e 	add.w	r3, r7, #14
 8001890:	461a      	mov	r2, r3
 8001892:	2165      	movs	r1, #101	@ 0x65
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f921 	bl	8001adc <ICM42688_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <ICM42688_Set_Interrupts+0x8a>
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	e000      	b.n	80018aa <ICM42688_Set_Interrupts+0x8c>

	return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	0000      	movs	r0, r0
 80018b4:	0000      	movs	r0, r0
	...

080018b8 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 80018da:	8afb      	ldrh	r3, [r7, #22]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e4:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001ad0 <ICM42688_Process_Buffer+0x218>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80018f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001900:	b21b      	sxth	r3, r3
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800191a:	b21b      	sxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001934:	b21b      	sxth	r3, r3
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001962:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	eeb1 7a67 	vneg.f32	s14, s15
 8001972:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001980:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001ad4 <ICM42688_Process_Buffer+0x21c>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 80019e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f4:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 80019f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001a02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0e:	eeb1 7a67 	vneg.f32	s14, s15
 8001a12:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 8001a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001ad8 <ICM42688_Process_Buffer+0x220>
 8001a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -0.0396341197; //Calibration
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fdaa 	bl	8000598 <__aeabi_f2d>
 8001a44:	a31c      	add	r3, pc, #112	@ (adr r3, 8001ab8 <ICM42688_Process_Buffer+0x200>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fc47 	bl	80002dc <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f8ef 	bl	8000c38 <__aeabi_d2f>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
	device->gyro.y -= -3.08658361;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd97 	bl	8000598 <__aeabi_f2d>
 8001a6a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ac0 <ICM42688_Process_Buffer+0x208>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc34 	bl	80002dc <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f8dc 	bl	8000c38 <__aeabi_d2f>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.494207352;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd84 	bl	8000598 <__aeabi_f2d>
 8001a90:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ac8 <ICM42688_Process_Buffer+0x210>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fc1f 	bl	80002d8 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f8c9 	bl	8000c38 <__aeabi_d2f>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]

	//device->gyro.x *= DEG_TO_RAD;
	//device->gyro.y *= DEG_TO_RAD;
	//device->gyro.z *= DEG_TO_RAD;

}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	5fd5a1b4 	.word	0x5fd5a1b4
 8001abc:	3fa44aec 	.word	0x3fa44aec
 8001ac0:	bf6a8e94 	.word	0xbf6a8e94
 8001ac4:	4008b152 	.word	0x4008b152
 8001ac8:	df9218be 	.word	0xdf9218be
 8001acc:	3fdfa117 	.word	0x3fdfa117
 8001ad0:	43047ae1 	.word	0x43047ae1
 8001ad4:	46000000 	.word	0x46000000
 8001ad8:	42033333 	.word	0x42033333

08001adc <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	753b      	strb	r3, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2110      	movs	r1, #16
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <ICM42688_Write+0x4c>)
 8001afa:	f003 fbf3 	bl	80052e4 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f107 0114 	add.w	r1, r7, #20
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f006 f8e9 	bl	8007ce2 <HAL_SPI_Transmit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2110      	movs	r1, #16
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <ICM42688_Write+0x4c>)
 8001b1a:	f003 fbe3 	bl	80052e4 <HAL_GPIO_WritePin>

	return status;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000

08001b2c <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	460b      	mov	r3, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2110      	movs	r1, #16
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <ICM42688_Read+0x74>)
 8001b4a:	f003 fbcb 	bl	80052e4 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f107 0116 	add.w	r1, r7, #22
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f006 f8c1 	bl	8007ce2 <HAL_SPI_Transmit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <ICM42688_Read+0x42>
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	e014      	b.n	8001b98 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	2201      	movs	r2, #1
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	f006 fa28 	bl	8007fce <HAL_SPI_Receive>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <ICM42688_Read+0x60>
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	e005      	b.n	8001b98 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <ICM42688_Read+0x74>)
 8001b92:	f003 fba7 	bl	80052e4 <HAL_GPIO_WritePin>

	return status;
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 8001bac:	239d      	movs	r3, #157	@ 0x9d
 8001bae:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <ICM42688_Read_DMA+0x44>)
 8001bb6:	f003 fb95 	bl	80052e4 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	230f      	movs	r3, #15
 8001bca:	f006 fd57 	bl	800867c <HAL_SPI_TransmitReceive_DMA>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <ICM42688_Read_DMA+0x38>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	e000      	b.n	8001bde <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020000 	.word	0x40020000
 8001bec:	00000000 	.word	0x00000000

08001bf0 <PID_Update>:

extern float outputs[8];

Vec3 ref_prev, error_prev, integral = {0.0f, 0.0f, 0.0f};

void PID_Update(Vec3 ref, Vec3 attitude, float dt){
 8001bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bf4:	b08e      	sub	sp, #56	@ 0x38
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	eeb0 5a40 	vmov.f32	s10, s0
 8001bfc:	eef0 5a60 	vmov.f32	s11, s1
 8001c00:	eeb0 6a41 	vmov.f32	s12, s2
 8001c04:	eef0 6a61 	vmov.f32	s13, s3
 8001c08:	eeb0 7a42 	vmov.f32	s14, s4
 8001c0c:	eef0 7a62 	vmov.f32	s15, s5
 8001c10:	ed87 3a01 	vstr	s6, [r7, #4]
 8001c14:	ed87 5a05 	vstr	s10, [r7, #20]
 8001c18:	edc7 5a06 	vstr	s11, [r7, #24]
 8001c1c:	ed87 6a07 	vstr	s12, [r7, #28]
 8001c20:	edc7 6a02 	vstr	s13, [r7, #8]
 8001c24:	ed87 7a03 	vstr	s14, [r7, #12]
 8001c28:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 8001c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	integral.x += error.x * dt;
 8001c5c:	4bca      	ldr	r3, [pc, #808]	@ (8001f88 <PID_Update+0x398>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	4bc5      	ldr	r3, [pc, #788]	@ (8001f88 <PID_Update+0x398>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 8001c78:	4bc3      	ldr	r3, [pc, #780]	@ (8001f88 <PID_Update+0x398>)
 8001c7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c7e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f88 <PID_Update+0x398>)
 8001c90:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 8001c94:	4bbc      	ldr	r3, [pc, #752]	@ (8001f88 <PID_Update+0x398>)
 8001c96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c9a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	4bb7      	ldr	r3, [pc, #732]	@ (8001f88 <PID_Update+0x398>)
 8001cac:	edc3 7a02 	vstr	s15, [r3, #8]


	outputs[0] = ROLL_KP*error.x + ROLL_KD*(error.x-error_prev.x)/dt + ROLL_KI*integral.x;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc70 	bl	8000598 <__aeabi_f2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4bb3      	ldr	r3, [pc, #716]	@ (8001f8c <PID_Update+0x39c>)
 8001cbe:	f7fe fcc3 	bl	8000648 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cce:	4bb0      	ldr	r3, [pc, #704]	@ (8001f90 <PID_Update+0x3a0>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	ee17 0a90 	vmov	r0, s15
 8001cdc:	f7fe fc5c 	bl	8000598 <__aeabi_f2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f7fe fcae 	bl	8000648 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fc4f 	bl	8000598 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4640      	mov	r0, r8
 8001d00:	4649      	mov	r1, r9
 8001d02:	f7fe fdcb 	bl	800089c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fae5 	bl	80002dc <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4614      	mov	r4, r2
 8001d18:	461d      	mov	r5, r3
 8001d1a:	4b9b      	ldr	r3, [pc, #620]	@ (8001f88 <PID_Update+0x398>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc3a 	bl	8000598 <__aeabi_f2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f7fe fc8c 	bl	8000648 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fad0 	bl	80002dc <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe ff78 	bl	8000c38 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a92      	ldr	r2, [pc, #584]	@ (8001f94 <PID_Update+0x3a4>)
 8001d4c:	6013      	str	r3, [r2, #0]
	outputs[1] = PITCH_KP*error.y + PITCH_KD*(error.y-error_prev.y)/dt + PITCH_KI*integral.y;
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc21 	bl	8000598 <__aeabi_f2d>
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f8c <PID_Update+0x39c>)
 8001d5c:	f7fe fc74 	bl	8000648 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d6c:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <PID_Update+0x3a0>)
 8001d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d76:	ee17 0a90 	vmov	r0, s15
 8001d7a:	f7fe fc0d 	bl	8000598 <__aeabi_f2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f7fe fc5f 	bl	8000648 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fc00 	bl	8000598 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	f7fe fd7c 	bl	800089c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fa96 	bl	80002dc <__adddf3>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <PID_Update+0x398>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbeb 	bl	8000598 <__aeabi_f2d>
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f7fe fc3d 	bl	8000648 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa81 	bl	80002dc <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff29 	bl	8000c38 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <PID_Update+0x3a4>)
 8001dea:	6053      	str	r3, [r2, #4]
	outputs[2] = YAW_KP*error.z + YAW_KD*(error.z-error_prev.z)/dt + YAW_KI*integral.z;
 8001dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbd2 	bl	8000598 <__aeabi_f2d>
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b64      	ldr	r3, [pc, #400]	@ (8001f8c <PID_Update+0x39c>)
 8001dfa:	f7fe fc25 	bl	8000648 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4614      	mov	r4, r2
 8001e04:	461d      	mov	r5, r3
 8001e06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001e0a:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <PID_Update+0x3a0>)
 8001e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	ee17 0a90 	vmov	r0, s15
 8001e18:	f7fe fbbe 	bl	8000598 <__aeabi_f2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f7fe fc10 	bl	8000648 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4690      	mov	r8, r2
 8001e2e:	4699      	mov	r9, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fbb1 	bl	8000598 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f7fe fd2d 	bl	800089c <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fa47 	bl	80002dc <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4614      	mov	r4, r2
 8001e54:	461d      	mov	r5, r3
 8001e56:	4b4c      	ldr	r3, [pc, #304]	@ (8001f88 <PID_Update+0x398>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb9c 	bl	8000598 <__aeabi_f2d>
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	f7fe fbee 	bl	8000648 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa32 	bl	80002dc <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe feda 	bl	8000c38 <__aeabi_d2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a43      	ldr	r2, [pc, #268]	@ (8001f94 <PID_Update+0x3a4>)
 8001e88:	6093      	str	r3, [r2, #8]

	outputs[0] = outputs[0]* 500/M_PI_2 + 1500;
 8001e8a:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <PID_Update+0x3a4>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001f98 <PID_Update+0x3a8>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	ee17 0a90 	vmov	r0, s15
 8001e9c:	f7fe fb7c 	bl	8000598 <__aeabi_f2d>
 8001ea0:	a335      	add	r3, pc, #212	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fcf9 	bl	800089c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	a333      	add	r3, pc, #204	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fa10 	bl	80002dc <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe feb8 	bl	8000c38 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a32      	ldr	r2, [pc, #200]	@ (8001f94 <PID_Update+0x3a4>)
 8001ecc:	6013      	str	r3, [r2, #0]
	outputs[1] = outputs[1]* 500/M_PI_2 + 1500;
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <PID_Update+0x3a4>)
 8001ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ed4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f98 <PID_Update+0x3a8>
 8001ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001edc:	ee17 0a90 	vmov	r0, s15
 8001ee0:	f7fe fb5a 	bl	8000598 <__aeabi_f2d>
 8001ee4:	a324      	add	r3, pc, #144	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fcd7 	bl	800089c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a322      	add	r3, pc, #136	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe f9ee 	bl	80002dc <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe96 	bl	8000c38 <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <PID_Update+0x3a4>)
 8001f10:	6053      	str	r3, [r2, #4]
	outputs[2] = outputs[2]* 500/M_PI_2 + 1500;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <PID_Update+0x3a4>)
 8001f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f18:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001f98 <PID_Update+0x3a8>
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	ee17 0a90 	vmov	r0, s15
 8001f24:	f7fe fb38 	bl	8000598 <__aeabi_f2d>
 8001f28:	a313      	add	r3, pc, #76	@ (adr r3, 8001f78 <PID_Update+0x388>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fcb5 	bl	800089c <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	a311      	add	r3, pc, #68	@ (adr r3, 8001f80 <PID_Update+0x390>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe f9cc 	bl	80002dc <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fe74 	bl	8000c38 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <PID_Update+0x3a4>)
 8001f54:	6093      	str	r3, [r2, #8]

	error_prev = (Vec3) {.x = error.x, .y = error.y, .z = error.z};
 8001f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <PID_Update+0x3a0>)
 8001f5e:	6001      	str	r1, [r0, #0]
 8001f60:	490b      	ldr	r1, [pc, #44]	@ (8001f90 <PID_Update+0x3a0>)
 8001f62:	604a      	str	r2, [r1, #4]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <PID_Update+0x3a0>)
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	@ 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	54442d18 	.word	0x54442d18
 8001f7c:	3ff921fb 	.word	0x3ff921fb
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40977000 	.word	0x40977000
 8001f88:	2000032c 	.word	0x2000032c
 8001f8c:	3ff80000 	.word	0x3ff80000
 8001f90:	20000320 	.word	0x20000320
 8001f94:	20000894 	.word	0x20000894
 8001f98:	43fa0000 	.word	0x43fa0000

08001f9c <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	HAL_UART_AbortReceive(huart); //Sbus is already sending before initialising, cancel reception to avoid HAL_ERROR
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f008 f93a 	bl	800a220 <HAL_UART_AbortReceive>

	status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2219      	movs	r2, #25
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f009 fb4f 	bl	800b656 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <Sbus_Begin+0x2a>
		return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	e000      	b.n	8001fc8 <Sbus_Begin+0x2c>
	}

	return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	3bc0      	subs	r3, #192	@ 0xc0
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002048 <sbus_raw_to_us+0x78>
 8001fea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800204c <sbus_raw_to_us+0x7c>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002048 <sbus_raw_to_us+0x78>
 8001ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ffe:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002002:	edd7 7a03 	vldr	s15, [r7, #12]
 8002006:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002048 <sbus_raw_to_us+0x78>
 800200a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	d501      	bpl.n	8002018 <sbus_raw_to_us+0x48>
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <sbus_raw_to_us+0x80>)
 8002016:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 8002018:	edd7 7a03 	vldr	s15, [r7, #12]
 800201c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002054 <sbus_raw_to_us+0x84>
 8002020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002028:	dd01      	ble.n	800202e <sbus_raw_to_us+0x5e>
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <sbus_raw_to_us+0x88>)
 800202c:	60fb      	str	r3, [r7, #12]
	return us;
 800202e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	447a0000 	.word	0x447a0000
 800204c:	44c80000 	.word	0x44c80000
 8002050:	447a0000 	.word	0x447a0000
 8002054:	44fa0000 	.word	0x44fa0000
 8002058:	44fa0000 	.word	0x44fa0000

0800205c <Sbus_decode>:

void Sbus_decode(uint8_t *buffer, float *channels){
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((buffer[1]    |buffer[2]<<8)                 & 0x07FF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b21a      	sxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3302      	adds	r3, #2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b21b      	sxth	r3, r3
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21b      	sxth	r3, r3
 800207e:	b29b      	uxth	r3, r3
 8002080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002084:	b29b      	uxth	r3, r3
 8002086:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((buffer[2]>>3 |buffer[3]<<5)                 & 0x07FF);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3302      	adds	r3, #2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	b21a      	sxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3303      	adds	r3, #3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b21b      	sxth	r3, r3
 800209c:	015b      	lsls	r3, r3, #5
 800209e:	b21b      	sxth	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((buffer[3]>>6 |buffer[4]<<2 |buffer[5]<<10)  & 0x07FF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3303      	adds	r3, #3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3305      	adds	r3, #5
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((buffer[5]>>1 |buffer[6]<<7)                 & 0x07FF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3305      	adds	r3, #5
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3306      	adds	r3, #6
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	01db      	lsls	r3, r3, #7
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21b      	sxth	r3, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002106:	b29b      	uxth	r3, r3
 8002108:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((buffer[6]>>4 |buffer[7]<<4)                 & 0x07FF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3306      	adds	r3, #6
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	b2db      	uxtb	r3, r3
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3307      	adds	r3, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29b      	uxth	r3, r3
 8002128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800212c:	b29b      	uxth	r3, r3
 800212e:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((buffer[7]>>7 |buffer[8]<<1 |buffer[9]<<9)   & 0x07FF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3307      	adds	r3, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	09db      	lsrs	r3, r3, #7
 8002138:	b2db      	uxtb	r3, r3
 800213a:	b21a      	sxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3308      	adds	r3, #8
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b21b      	sxth	r3, r3
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b21a      	sxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3309      	adds	r3, #9
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b21b      	sxth	r3, r3
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21b      	sxth	r3, r3
 800215c:	b29b      	uxth	r3, r3
 800215e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002162:	b29b      	uxth	r3, r3
 8002164:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((buffer[9]>>2 |buffer[10]<<6)                & 0x07FF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3309      	adds	r3, #9
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	b21a      	sxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	330a      	adds	r3, #10
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b21b      	sxth	r3, r3
 800217a:	019b      	lsls	r3, r3, #6
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002188:	b29b      	uxth	r3, r3
 800218a:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((buffer[10]>>5|buffer[11]<<3)                & 0x07FF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	330a      	adds	r3, #10
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	b2db      	uxtb	r3, r3
 8002196:	b21a      	sxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	330b      	adds	r3, #11
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((buffer[12]   |buffer[13]<<8)                & 0x07FF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	330c      	adds	r3, #12
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330d      	adds	r3, #13
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((buffer[13]>>3|buffer[14]<<5)                & 0x07FF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330d      	adds	r3, #13
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	b21a      	sxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	330e      	adds	r3, #14
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((buffer[14]>>6|buffer[15]<<2|buffer[16]<<10) & 0x07FF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	330e      	adds	r3, #14
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	b2db      	uxtb	r3, r3
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	330f      	adds	r3, #15
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b21b      	sxth	r3, r3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3310      	adds	r3, #16
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21b      	sxth	r3, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222c:	b29b      	uxth	r3, r3
 800222e:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((buffer[16]>>1|buffer[17]<<7)                & 0x07FF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3310      	adds	r3, #16
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3311      	adds	r3, #17
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	01db      	lsls	r3, r3, #7
 8002246:	b21b      	sxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b21b      	sxth	r3, r3
 800224c:	b29b      	uxth	r3, r3
 800224e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002252:	b29b      	uxth	r3, r3
 8002254:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((buffer[17]>>4|buffer[18]<<4)                & 0x07FF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3311      	adds	r3, #17
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	b2db      	uxtb	r3, r3
 8002260:	b21a      	sxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3312      	adds	r3, #18
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b21b      	sxth	r3, r3
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	b21b      	sxth	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b21b      	sxth	r3, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002278:	b29b      	uxth	r3, r3
 800227a:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((buffer[18]>>7|buffer[19]<<1|buffer[20]<<9)  & 0x07FF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3312      	adds	r3, #18
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	09db      	lsrs	r3, r3, #7
 8002284:	b2db      	uxtb	r3, r3
 8002286:	b21a      	sxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3313      	adds	r3, #19
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3314      	adds	r3, #20
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((buffer[20]>>2|buffer[21]<<6)                & 0x07FF);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3314      	adds	r3, #20
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3315      	adds	r3, #21
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((buffer[21]>>5|buffer[22]<<3)                & 0x07FF);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3315      	adds	r3, #21
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3316      	adds	r3, #22
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (buffer[23] & (1 << 0)) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3317      	adds	r3, #23
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <Sbus_decode+0x2b6>
    	raw_channels[16] = 1;
 800230c:	2301      	movs	r3, #1
 800230e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002310:	e001      	b.n	8002316 <Sbus_decode+0x2ba>
    }
    else {
    	raw_channels[16] = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (buffer[23] & (1 << 1)) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3317      	adds	r3, #23
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <Sbus_decode+0x2ce>
    	raw_channels[17] = 1;
 8002324:	2301      	movs	r3, #1
 8002326:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002328:	e001      	b.n	800232e <Sbus_decode+0x2d2>
    }
    else {
    	raw_channels[17] = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    for(int i = 0; i < 18; i++){
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002332:	e015      	b.n	8002360 <Sbus_decode+0x304>
    	channels[i] = sbus_raw_to_us(raw_channels[i]);
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	3330      	adds	r3, #48	@ 0x30
 800233a:	443b      	add	r3, r7
 800233c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fe45 	bl	8001fd0 <sbus_raw_to_us>
 8002346:	ee07 0a90 	vmov	s15, r0
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4413      	add	r3, r2
 8002352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002356:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 18; i++){
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	3301      	adds	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002362:	2b11      	cmp	r3, #17
 8002364:	dde6      	ble.n	8002334 <Sbus_decode+0x2d8>
    }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	@ 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <Servo_Begin>:
 *      Author: sergi
 */

#include "Servo.h"

void Servo_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 800237a:	2100      	movs	r1, #0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f006 ffd7 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8002382:	2104      	movs	r1, #4
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f006 ffd3 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 800238a:	2108      	movs	r1, #8
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f006 ffcf 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 8002392:	210c      	movs	r1, #12
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 ffcb 	bl	8009330 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 800239a:	2100      	movs	r1, #0
 800239c:	6838      	ldr	r0, [r7, #0]
 800239e:	f006 ffc7 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 80023a2:	2104      	movs	r1, #4
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f006 ffc3 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80023aa:	2108      	movs	r1, #8
 80023ac:	6838      	ldr	r0, [r7, #0]
 80023ae:	f006 ffbf 	bl	8009330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80023b2:	210c      	movs	r1, #12
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f006 ffbb 	bl	8009330 <HAL_TIM_PWM_Start>

}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	0000      	movs	r0, r0
 80023c4:	0000      	movs	r0, r0
	...

080023c8 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(pulse_width_us > 2000.0f) pulse_width_us = 2000.0f;
 80023d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023da:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002490 <Servo_Move+0xc8>
 80023de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	dd01      	ble.n	80023ec <Servo_Move+0x24>
 80023e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <Servo_Move+0xcc>)
 80023ea:	607b      	str	r3, [r7, #4]
	if(pulse_width_us < 1000.0f) pulse_width_us = 1000.0f;
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002498 <Servo_Move+0xd0>
 80023f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	d501      	bpl.n	8002402 <Servo_Move+0x3a>
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <Servo_Move+0xd4>)
 8002400:	607b      	str	r3, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8;
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f8c8 	bl	8000598 <__aeabi_f2d>
 8002408:	a31f      	add	r3, pc, #124	@ (adr r3, 8002488 <Servo_Move+0xc0>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f91b 	bl	8000648 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbed 	bl	8000bf8 <__aeabi_d2uiz>
 800241e:	4603      	mov	r3, r0
 8002420:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <Servo_Move+0x6a>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	8afa      	ldrh	r2, [r7, #22]
 800242e:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002430:	e023      	b.n	800247a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d104      	bne.n	8002442 <Servo_Move+0x7a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002440:	e01b      	b.n	800247a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d104      	bne.n	8002452 <Servo_Move+0x8a>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	8afb      	ldrh	r3, [r7, #22]
 800244e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002450:	e013      	b.n	800247a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d104      	bne.n	8002462 <Servo_Move+0x9a>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	8afb      	ldrh	r3, [r7, #22]
 800245e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002460:	e00b      	b.n	800247a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d104      	bne.n	8002472 <Servo_Move+0xaa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	8afb      	ldrh	r3, [r7, #22]
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002470:	e003      	b.n	800247a <Servo_Move+0xb2>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	8afb      	ldrh	r3, [r7, #22]
 8002478:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	f3af 8000 	nop.w
 8002488:	cccccccd 	.word	0xcccccccd
 800248c:	3ffccccc 	.word	0x3ffccccc
 8002490:	44fa0000 	.word	0x44fa0000
 8002494:	44fa0000 	.word	0x44fa0000
 8002498:	447a0000 	.word	0x447a0000
 800249c:	447a0000 	.word	0x447a0000

080024a0 <Servo_Update>:

void Servo_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, float *outputs){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	2100      	movs	r1, #0
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff ff85 	bl	80023c8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	2104      	movs	r1, #4
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff ff7b 	bl	80023c8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3308      	adds	r3, #8
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	2108      	movs	r1, #8
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff ff71 	bl	80023c8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	330c      	adds	r3, #12
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	210c      	movs	r1, #12
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff ff67 	bl	80023c8 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3310      	adds	r3, #16
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	2100      	movs	r1, #0
 8002508:	68b8      	ldr	r0, [r7, #8]
 800250a:	f7ff ff5d 	bl	80023c8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3314      	adds	r3, #20
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb0 0a67 	vmov.f32	s0, s15
 800251a:	2104      	movs	r1, #4
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f7ff ff53 	bl	80023c8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3318      	adds	r3, #24
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	2108      	movs	r1, #8
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f7ff ff49 	bl	80023c8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	331c      	adds	r3, #28
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	eeb0 0a67 	vmov.f32	s0, s15
 8002542:	210c      	movs	r1, #12
 8002544:	68b8      	ldr	r0, [r7, #8]
 8002546:	f7ff ff3f 	bl	80023c8 <Servo_Move>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_UARTEx_RxEventCallback>:
float outputs[8];

Flight_Mode flight_mode;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart4.Instance){
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_UARTEx_RxEventCallback+0x54>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d118      	bne.n	800259e <HAL_UARTEx_RxEventCallback+0x4a>

		if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_UARTEx_RxEventCallback+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b0f      	cmp	r3, #15
 8002572:	d10c      	bne.n	800258e <HAL_UARTEx_RxEventCallback+0x3a>
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_UARTEx_RxEventCallback+0x58>)
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_UARTEx_RxEventCallback+0x3a>
			Sbus_decode(receiver.buffer, receiver.channels);
 800257c:	490c      	ldr	r1, [pc, #48]	@ (80025b0 <HAL_UARTEx_RxEventCallback+0x5c>)
 800257e:	480b      	ldr	r0, [pc, #44]	@ (80025ac <HAL_UARTEx_RxEventCallback+0x58>)
 8002580:	f7ff fd6c 	bl	800205c <Sbus_decode>
			receiver.dataRdy = 1;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_UARTEx_RxEventCallback+0x58>)
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		else{
			HAL_UART_AbortReceive(&huart4);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
		}
	}
}
 800258c:	e007      	b.n	800259e <HAL_UARTEx_RxEventCallback+0x4a>
			HAL_UART_AbortReceive(&huart4);
 800258e:	4806      	ldr	r0, [pc, #24]	@ (80025a8 <HAL_UARTEx_RxEventCallback+0x54>)
 8002590:	f007 fe46 	bl	800a220 <HAL_UART_AbortReceive>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
 8002594:	2219      	movs	r2, #25
 8002596:	4905      	ldr	r1, [pc, #20]	@ (80025ac <HAL_UARTEx_RxEventCallback+0x58>)
 8002598:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <HAL_UARTEx_RxEventCallback+0x54>)
 800259a:	f009 f85c 	bl	800b656 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200005f0 	.word	0x200005f0
 80025ac:	200007ec 	.word	0x200007ec
 80025b0:	20000808 	.word	0x20000808

080025b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d107      	bne.n	80025d4 <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x28>)
 80025c6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 80025ce:	4803      	ldr	r0, [pc, #12]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x28>)
 80025d0:	f7ff fae8 	bl	8001ba4 <ICM42688_Read_DMA>
		}

	}

}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000854 	.word	0x20000854

080025e0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_SPI_TxRxCpltCallback+0x34>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10b      	bne.n	800260c <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2110      	movs	r1, #16
 80025f8:	4807      	ldr	r0, [pc, #28]	@ (8002618 <HAL_SPI_TxRxCpltCallback+0x38>)
 80025fa:	f002 fe73 	bl	80052e4 <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 80025fe:	4807      	ldr	r0, [pc, #28]	@ (800261c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002600:	f7ff f95a 	bl	80018b8 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000434 	.word	0x20000434
 8002618:	40020000 	.word	0x40020000
 800261c:	20000854 	.word	0x20000854

08002620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b099      	sub	sp, #100	@ 0x64
 8002624:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002626:	f000 fd01 	bl	800302c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800262a:	f001 fa68 	bl	8003afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262e:	f000 f92b 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002632:	f000 fc6f 	bl	8002f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8002636:	f000 fc2b 	bl	8002e90 <MX_DMA_Init>
  MX_ADC1_Init();
 800263a:	f000 f991 	bl	8002960 <MX_ADC1_Init>
  MX_I2C1_Init();
 800263e:	f000 f9e1 	bl	8002a04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002642:	f000 fa1f 	bl	8002a84 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002646:	f000 fa5b 	bl	8002b00 <MX_TIM2_Init>
  MX_TIM3_Init();
 800264a:	f000 faf1 	bl	8002c30 <MX_TIM3_Init>
  MX_UART4_Init();
 800264e:	f000 fb87 	bl	8002d60 <MX_UART4_Init>
  MX_UART5_Init();
 8002652:	f000 fbbd 	bl	8002dd0 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8002656:	f000 fbeb 	bl	8002e30 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 800265a:	f00c fbb5 	bl	800edc8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  status = Sbus_Begin(&huart4, &receiver); //Init Sbus Reception
 800265e:	4977      	ldr	r1, [pc, #476]	@ (800283c <main+0x21c>)
 8002660:	4877      	ldr	r0, [pc, #476]	@ (8002840 <main+0x220>)
 8002662:	f7ff fc9b 	bl	8001f9c <Sbus_Begin>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <main+0x224>)
 800266c:	701a      	strb	r2, [r3, #0]
  if(status != HAL_OK) {
 800266e:	4b75      	ldr	r3, [pc, #468]	@ (8002844 <main+0x224>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <main+0x5a>
	  Error_Handler();
 8002676:	f000 fd05 	bl	8003084 <Error_Handler>
  }

  if(ICM42688_Begin(&imu, &hspi1) != HAL_OK) {
 800267a:	4973      	ldr	r1, [pc, #460]	@ (8002848 <main+0x228>)
 800267c:	4873      	ldr	r0, [pc, #460]	@ (800284c <main+0x22c>)
 800267e:	f7fe fffa 	bl	8001676 <ICM42688_Begin>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <main+0x6c>
	  Error_Handler();
 8002688:	f000 fcfc 	bl	8003084 <Error_Handler>
  }

  if(HAL_ADC_Start_DMA(&hadc1, &battery, 1) != HAL_OK) { //Start DMA Read for Vbat ADC
 800268c:	2201      	movs	r2, #1
 800268e:	4970      	ldr	r1, [pc, #448]	@ (8002850 <main+0x230>)
 8002690:	4870      	ldr	r0, [pc, #448]	@ (8002854 <main+0x234>)
 8002692:	f001 faf9 	bl	8003c88 <HAL_ADC_Start_DMA>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <main+0x80>
	  Error_Handler();
 800269c:	f000 fcf2 	bl	8003084 <Error_Handler>
  }

  AHRS_Init();
 80026a0:	f7fe fcb0 	bl	8001004 <AHRS_Init>

  Servo_Begin(&htim2, &htim3);
 80026a4:	496c      	ldr	r1, [pc, #432]	@ (8002858 <main+0x238>)
 80026a6:	486d      	ldr	r0, [pc, #436]	@ (800285c <main+0x23c>)
 80026a8:	f7ff fe62 	bl	8002370 <Servo_Begin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  vbat = 0.00886230468f * battery; // 3.3/4096*11
 80026ac:	4b68      	ldr	r3, [pc, #416]	@ (8002850 <main+0x230>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b8:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002860 <main+0x240>
 80026bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c0:	4b68      	ldr	r3, [pc, #416]	@ (8002864 <main+0x244>)
 80026c2:	edc3 7a00 	vstr	s15, [r3]

	  if(imu.dataRdy){
 80026c6:	4b61      	ldr	r3, [pc, #388]	@ (800284c <main+0x22c>)
 80026c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <main+0xf8>


		  AHRS_Update_Gyro(imu.gyro, DELTA_T);
 80026d0:	4b5e      	ldr	r3, [pc, #376]	@ (800284c <main+0x22c>)
 80026d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80026d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80026da:	edd3 7a06 	vldr	s15, [r3, #24]
 80026de:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8002868 <main+0x248>
 80026e2:	eeb0 0a66 	vmov.f32	s0, s13
 80026e6:	eef0 0a47 	vmov.f32	s1, s14
 80026ea:	eeb0 1a67 	vmov.f32	s2, s15
 80026ee:	f7fe fcbf 	bl	8001070 <AHRS_Update_Gyro>

		  AHRS_Update_Acc(imu.accel);
 80026f2:	4b56      	ldr	r3, [pc, #344]	@ (800284c <main+0x22c>)
 80026f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80026f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80026fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002700:	eeb0 0a66 	vmov.f32	s0, s13
 8002704:	eef0 0a47 	vmov.f32	s1, s14
 8002708:	eeb0 1a67 	vmov.f32	s2, s15
 800270c:	f7fe fd3c 	bl	8001188 <AHRS_Update_Acc>

		  AHRS_Update_Complementary_Filter(0.95);
 8002710:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 800286c <main+0x24c>
 8002714:	f7fe fd94 	bl	8001240 <AHRS_Update_Complementary_Filter>


	  }

	  if(receiver.dataRdy){
 8002718:	4b48      	ldr	r3, [pc, #288]	@ (800283c <main+0x21c>)
 800271a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800271e:	2b00      	cmp	r3, #0
 8002720:	d05c      	beq.n	80027dc <main+0x1bc>
		  if(receiver.channels[FLIGHT_MODE_CHANNEL] < 1200){
 8002722:	4b46      	ldr	r3, [pc, #280]	@ (800283c <main+0x21c>)
 8002724:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002728:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002870 <main+0x250>
 800272c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002734:	d503      	bpl.n	800273e <main+0x11e>
			  flight_mode = MANUAL_MODE;
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <main+0x254>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e01a      	b.n	8002774 <main+0x154>
		  }
		  else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 800273e:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <main+0x21c>)
 8002740:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002744:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002870 <main+0x250>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	db0d      	blt.n	800276e <main+0x14e>
				  receiver.channels[FLIGHT_MODE_CHANNEL] < 1800){
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <main+0x21c>)
 8002754:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
		  else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 8002758:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002878 <main+0x258>
 800275c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	d503      	bpl.n	800276e <main+0x14e>
			  flight_mode = STABILIZED_MODE;
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <main+0x254>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e002      	b.n	8002774 <main+0x154>
		  }
		  else{
			  flight_mode = ACRO_MODE;
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <main+0x254>)
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
		  }

		  if(flight_mode == ACRO_MODE) Acro_Mode(receiver);
 8002774:	4b3f      	ldr	r3, [pc, #252]	@ (8002874 <main+0x254>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d10c      	bne.n	8002796 <main+0x176>
 800277c:	4c2f      	ldr	r4, [pc, #188]	@ (800283c <main+0x21c>)
 800277e:	4668      	mov	r0, sp
 8002780:	f104 0310 	add.w	r3, r4, #16
 8002784:	2258      	movs	r2, #88	@ 0x58
 8002786:	4619      	mov	r1, r3
 8002788:	f00d ff2b 	bl	80105e2 <memcpy>
 800278c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002790:	f7fe fe76 	bl	8001480 <Acro_Mode>
 8002794:	e022      	b.n	80027dc <main+0x1bc>
		  else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver);
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <main+0x254>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10c      	bne.n	80027b8 <main+0x198>
 800279e:	4c27      	ldr	r4, [pc, #156]	@ (800283c <main+0x21c>)
 80027a0:	4668      	mov	r0, sp
 80027a2:	f104 0310 	add.w	r3, r4, #16
 80027a6:	2258      	movs	r2, #88	@ 0x58
 80027a8:	4619      	mov	r1, r3
 80027aa:	f00d ff1a 	bl	80105e2 <memcpy>
 80027ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027b2:	f7fe fd9d 	bl	80012f0 <Stabilized_Mode>
 80027b6:	e011      	b.n	80027dc <main+0x1bc>
		  else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver, outputs);
 80027b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002874 <main+0x254>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <main+0x1bc>
 80027c0:	4c1e      	ldr	r4, [pc, #120]	@ (800283c <main+0x21c>)
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <main+0x25c>)
 80027c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80027c6:	4668      	mov	r0, sp
 80027c8:	f104 0310 	add.w	r3, r4, #16
 80027cc:	2258      	movs	r2, #88	@ 0x58
 80027ce:	4619      	mov	r1, r3
 80027d0:	f00d ff07 	bl	80105e2 <memcpy>
 80027d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027d8:	f7fe ff36 	bl	8001648 <Manual_Mode>

	  }

	  //if(imu.dataRdy && receiver.dataRdy){
		  if(flight_mode == ACRO_MODE || flight_mode == STABILIZED_MODE){
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <main+0x254>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d003      	beq.n	80027ec <main+0x1cc>
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <main+0x254>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d11d      	bne.n	8002828 <main+0x208>
			  PID_Update(ref, attitude, DELTA_T);
 80027ec:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <main+0x260>)
 80027ee:	ed93 5a00 	vldr	s10, [r3]
 80027f2:	edd3 5a01 	vldr	s11, [r3, #4]
 80027f6:	ed93 6a02 	vldr	s12, [r3, #8]
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <main+0x264>)
 80027fc:	edd3 6a00 	vldr	s13, [r3]
 8002800:	ed93 7a01 	vldr	s14, [r3, #4]
 8002804:	edd3 7a02 	vldr	s15, [r3, #8]
 8002808:	ed9f 3a17 	vldr	s6, [pc, #92]	@ 8002868 <main+0x248>
 800280c:	eef0 1a45 	vmov.f32	s3, s10
 8002810:	eeb0 2a65 	vmov.f32	s4, s11
 8002814:	eef0 2a46 	vmov.f32	s5, s12
 8002818:	eeb0 0a66 	vmov.f32	s0, s13
 800281c:	eef0 0a47 	vmov.f32	s1, s14
 8002820:	eeb0 1a67 	vmov.f32	s2, s15
 8002824:	f7ff f9e4 	bl	8001bf0 <PID_Update>
		  }
		  Servo_Update(&htim2, &htim3, outputs);
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <main+0x25c>)
 800282a:	490b      	ldr	r1, [pc, #44]	@ (8002858 <main+0x238>)
 800282c:	480b      	ldr	r0, [pc, #44]	@ (800285c <main+0x23c>)
 800282e:	f7ff fe37 	bl	80024a0 <Servo_Update>

	  //sprintf(usbBuffer, "w%fwa%fab%fbc%fc\r\n", q.w, q.x, q.y, q.z);
	  //sprintf(usbBuffer, "%f, %f\r\n", roll, pitch);
	  //CDC_Transmit_FS((uint8_t *) usbBuffer, strlen(usbBuffer));

	  HAL_Delay(DELTA_T*1000);
 8002832:	200a      	movs	r0, #10
 8002834:	f001 f9c0 	bl	8003bb8 <HAL_Delay>
	  vbat = 0.00886230468f * battery; // 3.3/4096*11
 8002838:	e738      	b.n	80026ac <main+0x8c>
 800283a:	bf00      	nop
 800283c:	200007ec 	.word	0x200007ec
 8002840:	200005f0 	.word	0x200005f0
 8002844:	200007e8 	.word	0x200007e8
 8002848:	20000434 	.word	0x20000434
 800284c:	20000854 	.word	0x20000854
 8002850:	2000088c 	.word	0x2000088c
 8002854:	20000338 	.word	0x20000338
 8002858:	200005a4 	.word	0x200005a4
 800285c:	20000558 	.word	0x20000558
 8002860:	3c113333 	.word	0x3c113333
 8002864:	20000890 	.word	0x20000890
 8002868:	3c23d70a 	.word	0x3c23d70a
 800286c:	3f733333 	.word	0x3f733333
 8002870:	44960000 	.word	0x44960000
 8002874:	200008b4 	.word	0x200008b4
 8002878:	44e10000 	.word	0x44e10000
 800287c:	20000894 	.word	0x20000894
 8002880:	20000308 	.word	0x20000308
 8002884:	20000314 	.word	0x20000314

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b094      	sub	sp, #80	@ 0x50
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2230      	movs	r2, #48	@ 0x30
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f00d fe13 	bl	80104c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <SystemClock_Config+0xd0>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <SystemClock_Config+0xd0>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <SystemClock_Config+0xd0>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <SystemClock_Config+0xd4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a24      	ldr	r2, [pc, #144]	@ (800295c <SystemClock_Config+0xd4>)
 80028ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b22      	ldr	r3, [pc, #136]	@ (800295c <SystemClock_Config+0xd4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028dc:	2301      	movs	r3, #1
 80028de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	2302      	movs	r3, #2
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028f0:	2304      	movs	r3, #4
 80028f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80028f4:	23d8      	movs	r3, #216	@ 0xd8
 80028f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80028fc:	2309      	movs	r3, #9
 80028fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002900:	f107 0320 	add.w	r3, r7, #32
 8002904:	4618      	mov	r0, r3
 8002906:	f004 f92d 	bl	8006b64 <HAL_RCC_OscConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002910:	f000 fbb8 	bl	8003084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002914:	f004 f8d6 	bl	8006ac4 <HAL_PWREx_EnableOverDrive>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800291e:	f000 fbb1 	bl	8003084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002922:	230f      	movs	r3, #15
 8002924:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800292e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	2107      	movs	r1, #7
 8002940:	4618      	mov	r0, r3
 8002942:	f004 fbb3 	bl	80070ac <HAL_RCC_ClockConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800294c:	f000 fb9a 	bl	8003084 <Error_Handler>
  }
}
 8002950:	bf00      	nop
 8002952:	3750      	adds	r7, #80	@ 0x50
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40007000 	.word	0x40007000

08002960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002966:	463b      	mov	r3, r7
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002972:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <MX_ADC1_Init+0x98>)
 8002974:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <MX_ADC1_Init+0x9c>)
 8002976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002978:	4b1f      	ldr	r3, [pc, #124]	@ (80029f8 <MX_ADC1_Init+0x98>)
 800297a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800297e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <MX_ADC1_Init+0x98>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002986:	4b1c      	ldr	r3, [pc, #112]	@ (80029f8 <MX_ADC1_Init+0x98>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800298c:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <MX_ADC1_Init+0x98>)
 800298e:	2201      	movs	r2, #1
 8002990:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002992:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <MX_ADC1_Init+0x98>)
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <MX_ADC1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029a0:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <MX_ADC1_Init+0xa0>)
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029a6:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ba:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029bc:	2201      	movs	r2, #1
 80029be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029c0:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029c2:	f001 f91d 	bl	8003c00 <HAL_ADC_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029cc:	f000 fb5a 	bl	8003084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029d0:	230a      	movs	r3, #10
 80029d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80029d8:	2307      	movs	r3, #7
 80029da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	@ (80029f8 <MX_ADC1_Init+0x98>)
 80029e2:	f001 fa6d 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029ec:	f000 fb4a 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000338 	.word	0x20000338
 80029fc:	40012000 	.word	0x40012000
 8002a00:	0f000001 	.word	0x0f000001

08002a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <MX_I2C1_Init+0x78>)
 8002a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a10:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <MX_I2C1_Init+0x7c>)
 8002a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a14:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a1a:	4b17      	ldr	r3, [pc, #92]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a3e:	480e      	ldr	r0, [pc, #56]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a40:	f002 fc82 	bl	8005348 <HAL_I2C_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a4a:	f000 fb1b 	bl	8003084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a52:	f002 fd15 	bl	8005480 <HAL_I2CEx_ConfigAnalogFilter>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a5c:	f000 fb12 	bl	8003084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a60:	2100      	movs	r1, #0
 8002a62:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <MX_I2C1_Init+0x74>)
 8002a64:	f002 fd57 	bl	8005516 <HAL_I2CEx_ConfigDigitalFilter>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a6e:	f000 fb09 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200003e0 	.word	0x200003e0
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	20404768 	.word	0x20404768

08002a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <MX_SPI1_Init+0x78>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002a9e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002aa2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002aba:	2210      	movs	r2, #16
 8002abc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ade:	2208      	movs	r2, #8
 8002ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <MX_SPI1_Init+0x74>)
 8002ae4:	f005 f852 	bl	8007b8c <HAL_SPI_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002aee:	f000 fac9 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000434 	.word	0x20000434
 8002afc:	40013000 	.word	0x40013000

08002b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	@ 0x38
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b20:	463b      	mov	r3, r7
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b32:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b3c:	223b      	movs	r2, #59	@ 0x3b
 8002b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b3a      	ldr	r3, [pc, #232]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8002b46:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b48:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b5a:	4834      	ldr	r0, [pc, #208]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b5c:	f006 fb30 	bl	80091c0 <HAL_TIM_Base_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002b66:	f000 fa8d 	bl	8003084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b74:	4619      	mov	r1, r3
 8002b76:	482d      	ldr	r0, [pc, #180]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b78:	f006 fde8 	bl	800974c <HAL_TIM_ConfigClockSource>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002b82:	f000 fa7f 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b86:	4829      	ldr	r0, [pc, #164]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002b88:	f006 fb71 	bl	800926e <HAL_TIM_PWM_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002b92:	f000 fa77 	bl	8003084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4821      	ldr	r0, [pc, #132]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002ba6:	f007 fa5f 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002bb0:	f000 fa68 	bl	8003084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb4:	2360      	movs	r3, #96	@ 0x60
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4818      	ldr	r0, [pc, #96]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002bcc:	f006 fcaa 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002bd6:	f000 fa55 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4812      	ldr	r0, [pc, #72]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002be2:	f006 fc9f 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002bec:	f000 fa4a 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480d      	ldr	r0, [pc, #52]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002bf8:	f006 fc94 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002c02:	f000 fa3f 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c06:	463b      	mov	r3, r7
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4807      	ldr	r0, [pc, #28]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002c0e:	f006 fc89 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002c18:	f000 fa34 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c1c:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <MX_TIM2_Init+0x12c>)
 8002c1e:	f000 fc0f 	bl	8003440 <HAL_TIM_MspPostInit>

}
 8002c22:	bf00      	nop
 8002c24:	3738      	adds	r7, #56	@ 0x38
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000558 	.word	0x20000558

08002c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	@ 0x38
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c50:	463b      	mov	r3, r7
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c62:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c64:	4a3d      	ldr	r2, [pc, #244]	@ (8002d5c <MX_TIM3_Init+0x12c>)
 8002c66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c6a:	223b      	movs	r2, #59	@ 0x3b
 8002c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8002c74:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c76:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b35      	ldr	r3, [pc, #212]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c88:	4833      	ldr	r0, [pc, #204]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002c8a:	f006 fa99 	bl	80091c0 <HAL_TIM_Base_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c94:	f000 f9f6 	bl	8003084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	482c      	ldr	r0, [pc, #176]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002ca6:	f006 fd51 	bl	800974c <HAL_TIM_ConfigClockSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002cb0:	f000 f9e8 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cb4:	4828      	ldr	r0, [pc, #160]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002cb6:	f006 fada 	bl	800926e <HAL_TIM_PWM_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cc0:	f000 f9e0 	bl	8003084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4821      	ldr	r0, [pc, #132]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002cd4:	f007 f9c8 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cde:	f000 f9d1 	bl	8003084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce2:	2360      	movs	r3, #96	@ 0x60
 8002ce4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002cfa:	f006 fc13 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d04:	f000 f9be 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d08:	463b      	mov	r3, r7
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4812      	ldr	r0, [pc, #72]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002d10:	f006 fc08 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d1a:	f000 f9b3 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d1e:	463b      	mov	r3, r7
 8002d20:	2208      	movs	r2, #8
 8002d22:	4619      	mov	r1, r3
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002d26:	f006 fbfd 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002d30:	f000 f9a8 	bl	8003084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d34:	463b      	mov	r3, r7
 8002d36:	220c      	movs	r2, #12
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4807      	ldr	r0, [pc, #28]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002d3c:	f006 fbf2 	bl	8009524 <HAL_TIM_PWM_ConfigChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002d46:	f000 f99d 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d4a:	4803      	ldr	r0, [pc, #12]	@ (8002d58 <MX_TIM3_Init+0x128>)
 8002d4c:	f000 fb78 	bl	8003440 <HAL_TIM_MspPostInit>

}
 8002d50:	bf00      	nop
 8002d52:	3738      	adds	r7, #56	@ 0x38
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200005a4 	.word	0x200005a4
 8002d5c:	40000400 	.word	0x40000400

08002d60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d66:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <MX_UART4_Init+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d6c:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <MX_UART4_Init+0x6c>)
 8002d6e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8002d70:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d7e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002da0:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002da2:	2202      	movs	r2, #2
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002da8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <MX_UART4_Init+0x64>)
 8002db0:	f007 f9e8 	bl	800a184 <HAL_UART_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8002dba:	f000 f963 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200005f0 	.word	0x200005f0
 8002dc8:	40004c00 	.word	0x40004c00
 8002dcc:	000186a0 	.word	0x000186a0

08002dd0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002dd6:	4a15      	ldr	r2, [pc, #84]	@ (8002e2c <MX_UART5_Init+0x5c>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002dda:	4b13      	ldr	r3, [pc, #76]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002de0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e12:	4805      	ldr	r0, [pc, #20]	@ (8002e28 <MX_UART5_Init+0x58>)
 8002e14:	f007 f9b6 	bl	800a184 <HAL_UART_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002e1e:	f000 f931 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000678 	.word	0x20000678
 8002e2c:	40005000 	.word	0x40005000

08002e30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e36:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <MX_USART6_UART_Init+0x5c>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e56:	220c      	movs	r2, #12
 8002e58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	@ (8002e88 <MX_USART6_UART_Init+0x58>)
 8002e74:	f007 f986 	bl	800a184 <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002e7e:	f000 f901 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000700 	.word	0x20000700
 8002e8c:	40011400 	.word	0x40011400

08002e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e96:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002e9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eae:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002eb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <MX_DMA_Init+0x80>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	200d      	movs	r0, #13
 8002ecc:	f001 fba9 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ed0:	200d      	movs	r0, #13
 8002ed2:	f001 fbc2 	bl	800465a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	2038      	movs	r0, #56	@ 0x38
 8002edc:	f001 fba1 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ee0:	2038      	movs	r0, #56	@ 0x38
 8002ee2:	f001 fbba 	bl	800465a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	203b      	movs	r0, #59	@ 0x3b
 8002eec:	f001 fb99 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002ef0:	203b      	movs	r0, #59	@ 0x3b
 8002ef2:	f001 fbb2 	bl	800465a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	203c      	movs	r0, #60	@ 0x3c
 8002efc:	f001 fb91 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002f00:	203c      	movs	r0, #60	@ 0x3c
 8002f02:	f001 fbaa 	bl	800465a <HAL_NVIC_EnableIRQ>

}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f36:	4b3a      	ldr	r3, [pc, #232]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a36      	ldr	r2, [pc, #216]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b34      	ldr	r3, [pc, #208]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b31      	ldr	r3, [pc, #196]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a30      	ldr	r2, [pc, #192]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b2e      	ldr	r3, [pc, #184]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b28      	ldr	r3, [pc, #160]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8a:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a24      	ldr	r2, [pc, #144]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <MX_GPIO_Init+0x10c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	481f      	ldr	r0, [pc, #124]	@ (8003024 <MX_GPIO_Init+0x110>)
 8002fa8:	f002 f99c 	bl	80052e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2110      	movs	r1, #16
 8002fb0:	481d      	ldr	r0, [pc, #116]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002fb2:	f002 f997 	bl	80052e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4815      	ldr	r0, [pc, #84]	@ (8003024 <MX_GPIO_Init+0x110>)
 8002fce:	f001 ffed 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480f      	ldr	r0, [pc, #60]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002fea:	f001 ffdf 	bl	8004fac <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002fee:	2310      	movs	r3, #16
 8002ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4808      	ldr	r0, [pc, #32]	@ (8003024 <MX_GPIO_Init+0x110>)
 8003004:	f001 ffd2 	bl	8004fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	200a      	movs	r0, #10
 800300e:	f001 fb08 	bl	8004622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003012:	200a      	movs	r0, #10
 8003014:	f001 fb21 	bl	800465a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003018:	bf00      	nop
 800301a:	3728      	adds	r7, #40	@ 0x28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	40020800 	.word	0x40020800
 8003028:	40020000 	.word	0x40020000

0800302c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003032:	463b      	mov	r3, r7
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800303e:	f001 fb27 	bl	8004690 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003042:	2301      	movs	r3, #1
 8003044:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003046:	2300      	movs	r3, #0
 8003048:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800304e:	231f      	movs	r3, #31
 8003050:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003052:	2387      	movs	r3, #135	@ 0x87
 8003054:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003056:	2300      	movs	r3, #0
 8003058:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800305a:	2300      	movs	r3, #0
 800305c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003062:	2301      	movs	r3, #1
 8003064:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800306e:	463b      	mov	r3, r7
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fb45 	bl	8004700 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003076:	2004      	movs	r0, #4
 8003078:	f001 fb22 	bl	80046c0 <HAL_MPU_Enable>

}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003088:	b672      	cpsid	i
}
 800308a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <Error_Handler+0x8>

08003090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_MspInit+0x44>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_MspInit+0x44>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_MspInit+0x44>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_MspInit+0x44>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_ADC_MspInit+0xd4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d153      	bne.n	80031a2 <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030fa:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a26      	ldr	r2, [pc, #152]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312e:	2303      	movs	r3, #3
 8003130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	481d      	ldr	r0, [pc, #116]	@ (80031b4 <HAL_ADC_MspInit+0xdc>)
 800313e:	f001 ff35 	bl	8004fac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003144:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <HAL_ADC_MspInit+0xe4>)
 8003146:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800315a:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800315c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003160:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003168:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800316c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003172:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003178:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800317a:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800317c:	2200      	movs	r2, #0
 800317e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003180:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003182:	2200      	movs	r2, #0
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003186:	480c      	ldr	r0, [pc, #48]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003188:	f001 fafa 	bl	8004780 <HAL_DMA_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003192:	f7ff ff77 	bl	8003084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800319a:	639a      	str	r2, [r3, #56]	@ 0x38
 800319c:	4a06      	ldr	r2, [pc, #24]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031a2:	bf00      	nop
 80031a4:	3728      	adds	r7, #40	@ 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40012000 	.word	0x40012000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020800 	.word	0x40020800
 80031b8:	20000380 	.word	0x20000380
 80031bc:	40026470 	.word	0x40026470

080031c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0aa      	sub	sp, #168	@ 0xa8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2280      	movs	r2, #128	@ 0x80
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00d f96e 	bl	80104c2 <memset>
  if(hi2c->Instance==I2C1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_I2C_MspInit+0xb0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d13b      	bne.n	8003268 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031f6:	2300      	movs	r3, #0
 80031f8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4618      	mov	r0, r3
 8003200:	f004 f97a 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800320a:	f7ff ff3b 	bl	8003084 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6313      	str	r3, [r2, #48]	@ 0x30
 800321a:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003226:	23c0      	movs	r3, #192	@ 0xc0
 8003228:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800322c:	2312      	movs	r3, #18
 800322e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800323e:	2304      	movs	r3, #4
 8003240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003248:	4619      	mov	r1, r3
 800324a:	480b      	ldr	r0, [pc, #44]	@ (8003278 <HAL_I2C_MspInit+0xb8>)
 800324c:	f001 feae 	bl	8004fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a07      	ldr	r2, [pc, #28]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 8003256:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_I2C_MspInit+0xb4>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003268:	bf00      	nop
 800326a:	37a8      	adds	r7, #168	@ 0xa8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40005400 	.word	0x40005400
 8003274:	40023800 	.word	0x40023800
 8003278:	40020400 	.word	0x40020400

0800327c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a49      	ldr	r2, [pc, #292]	@ (80033c0 <HAL_SPI_MspInit+0x144>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f040 808c 	bne.w	80033b8 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032a0:	4b48      	ldr	r3, [pc, #288]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	4a47      	ldr	r2, [pc, #284]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ac:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b8:	4b42      	ldr	r3, [pc, #264]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4a41      	ldr	r2, [pc, #260]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c4:	4b3f      	ldr	r3, [pc, #252]	@ (80033c4 <HAL_SPI_MspInit+0x148>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032d0:	23e0      	movs	r3, #224	@ 0xe0
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e0:	2305      	movs	r3, #5
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4837      	ldr	r0, [pc, #220]	@ (80033c8 <HAL_SPI_MspInit+0x14c>)
 80032ec:	f001 fe5e 	bl	8004fac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80032f0:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 80032f2:	4a37      	ldr	r2, [pc, #220]	@ (80033d0 <HAL_SPI_MspInit+0x154>)
 80032f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80032f6:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 80032f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80032fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fe:	4b33      	ldr	r3, [pc, #204]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003304:	4b31      	ldr	r3, [pc, #196]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800330a:	4b30      	ldr	r3, [pc, #192]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 800330c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003310:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003312:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003318:	4b2c      	ldr	r3, [pc, #176]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 800331a:	2200      	movs	r2, #0
 800331c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800331e:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003320:	2200      	movs	r2, #0
 8003322:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003326:	2200      	movs	r2, #0
 8003328:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800332a:	4b28      	ldr	r3, [pc, #160]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003330:	4826      	ldr	r0, [pc, #152]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003332:	f001 fa25 	bl	8004780 <HAL_DMA_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800333c:	f7ff fea2 	bl	8003084 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a22      	ldr	r2, [pc, #136]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58
 8003346:	4a21      	ldr	r2, [pc, #132]	@ (80033cc <HAL_SPI_MspInit+0x150>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 800334e:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_SPI_MspInit+0x15c>)
 8003350:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003354:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003358:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800335a:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 800335c:	2240      	movs	r2, #64	@ 0x40
 800335e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003360:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003366:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800336c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003374:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003382:	2200      	movs	r2, #0
 8003384:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800338c:	4811      	ldr	r0, [pc, #68]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 800338e:	f001 f9f7 	bl	8004780 <HAL_DMA_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8003398:	f7ff fe74 	bl	8003084 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0d      	ldr	r2, [pc, #52]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80033a2:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <HAL_SPI_MspInit+0x158>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	2023      	movs	r0, #35	@ 0x23
 80033ae:	f001 f938 	bl	8004622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033b2:	2023      	movs	r0, #35	@ 0x23
 80033b4:	f001 f951 	bl	800465a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80033b8:	bf00      	nop
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40013000 	.word	0x40013000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	20000498 	.word	0x20000498
 80033d0:	40026410 	.word	0x40026410
 80033d4:	200004f8 	.word	0x200004f8
 80033d8:	40026458 	.word	0x40026458

080033dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d10c      	bne.n	8003408 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ee:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003406:	e010      	b.n	800342a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_TIM_Base_MspInit+0x60>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10b      	bne.n	800342a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6413      	str	r3, [r2, #64]	@ 0x40
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_TIM_Base_MspInit+0x5c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40000400 	.word	0x40000400

08003440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003460:	d139      	bne.n	80034d6 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	4b2f      	ldr	r3, [pc, #188]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4a2e      	ldr	r2, [pc, #184]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	@ 0x30
 800346e:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	4a28      	ldr	r2, [pc, #160]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	@ 0x30
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003492:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	481d      	ldr	r0, [pc, #116]	@ (8003524 <HAL_TIM_MspPostInit+0xe4>)
 80034b0:	f001 fd7c 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034b4:	2308      	movs	r3, #8
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2300      	movs	r3, #0
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4816      	ldr	r0, [pc, #88]	@ (8003528 <HAL_TIM_MspPostInit+0xe8>)
 80034d0:	f001 fd6c 	bl	8004fac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034d4:	e020      	b.n	8003518 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_TIM_MspPostInit+0xec>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <HAL_TIM_MspPostInit+0xe0>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80034f8:	2333      	movs	r3, #51	@ 0x33
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003508:	2302      	movs	r3, #2
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	4805      	ldr	r0, [pc, #20]	@ (8003528 <HAL_TIM_MspPostInit+0xe8>)
 8003514:	f001 fd4a 	bl	8004fac <HAL_GPIO_Init>
}
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	@ 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40000400 	.word	0x40000400

08003530 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0b0      	sub	sp, #192	@ 0xc0
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003548:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f00c ffb6 	bl	80104c2 <memset>
  if(huart->Instance==UART4)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4aa1      	ldr	r2, [pc, #644]	@ (80037e0 <HAL_UART_MspInit+0x2b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f040 8096 	bne.w	800368e <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003568:	2300      	movs	r3, #0
 800356a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800356c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003570:	4618      	mov	r0, r3
 8003572:	f003 ffc1 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800357c:	f7ff fd82 	bl	8003084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003580:	4b98      	ldr	r3, [pc, #608]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	4a97      	ldr	r2, [pc, #604]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 8003586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800358a:	6413      	str	r3, [r2, #64]	@ 0x40
 800358c:	4b95      	ldr	r3, [pc, #596]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	4b92      	ldr	r3, [pc, #584]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	4a91      	ldr	r2, [pc, #580]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a4:	4b8f      	ldr	r3, [pc, #572]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b0:	4b8c      	ldr	r3, [pc, #560]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	4a8b      	ldr	r2, [pc, #556]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80035bc:	4b89      	ldr	r3, [pc, #548]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035e0:	2308      	movs	r3, #8
 80035e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035ea:	4619      	mov	r1, r3
 80035ec:	487e      	ldr	r0, [pc, #504]	@ (80037e8 <HAL_UART_MspInit+0x2b8>)
 80035ee:	f001 fcdd 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800360c:	2308      	movs	r3, #8
 800360e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003616:	4619      	mov	r1, r3
 8003618:	4874      	ldr	r0, [pc, #464]	@ (80037ec <HAL_UART_MspInit+0x2bc>)
 800361a:	f001 fcc7 	bl	8004fac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800361e:	4b74      	ldr	r3, [pc, #464]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003620:	4a74      	ldr	r2, [pc, #464]	@ (80037f4 <HAL_UART_MspInit+0x2c4>)
 8003622:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003624:	4b72      	ldr	r3, [pc, #456]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003626:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800362a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362c:	4b70      	ldr	r3, [pc, #448]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003632:	4b6f      	ldr	r3, [pc, #444]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003634:	2200      	movs	r2, #0
 8003636:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003638:	4b6d      	ldr	r3, [pc, #436]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 800363a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800363e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003640:	4b6b      	ldr	r3, [pc, #428]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003646:	4b6a      	ldr	r3, [pc, #424]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 800364e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003652:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003654:	4b66      	ldr	r3, [pc, #408]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003656:	2200      	movs	r2, #0
 8003658:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800365a:	4b65      	ldr	r3, [pc, #404]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 800365c:	2200      	movs	r2, #0
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003660:	4863      	ldr	r0, [pc, #396]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003662:	f001 f88d 	bl	8004780 <HAL_DMA_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 800366c:	f7ff fd0a 	bl	8003084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a5f      	ldr	r2, [pc, #380]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003674:	675a      	str	r2, [r3, #116]	@ 0x74
 8003676:	4a5e      	ldr	r2, [pc, #376]	@ (80037f0 <HAL_UART_MspInit+0x2c0>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2034      	movs	r0, #52	@ 0x34
 8003682:	f000 ffce 	bl	8004622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003686:	2034      	movs	r0, #52	@ 0x34
 8003688:	f000 ffe7 	bl	800465a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800368c:	e0a4      	b.n	80037d8 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==UART5)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a59      	ldr	r2, [pc, #356]	@ (80037f8 <HAL_UART_MspInit+0x2c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d15e      	bne.n	8003756 <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800369e:	2300      	movs	r3, #0
 80036a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 ff26 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_UART_MspInit+0x186>
      Error_Handler();
 80036b2:	f7ff fce7 	bl	8003084 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80036b6:	4b4b      	ldr	r3, [pc, #300]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a4a      	ldr	r2, [pc, #296]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b48      	ldr	r3, [pc, #288]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ce:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	4a44      	ldr	r2, [pc, #272]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036da:	4b42      	ldr	r3, [pc, #264]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e6:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	4a3e      	ldr	r2, [pc, #248]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036ec:	f043 0308 	orr.w	r3, r3, #8
 80036f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f2:	4b3c      	ldr	r3, [pc, #240]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003712:	2303      	movs	r3, #3
 8003714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003718:	2308      	movs	r3, #8
 800371a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003722:	4619      	mov	r1, r3
 8003724:	4831      	ldr	r0, [pc, #196]	@ (80037ec <HAL_UART_MspInit+0x2bc>)
 8003726:	f001 fc41 	bl	8004fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800372a:	2304      	movs	r3, #4
 800372c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003742:	2308      	movs	r3, #8
 8003744:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003748:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800374c:	4619      	mov	r1, r3
 800374e:	482b      	ldr	r0, [pc, #172]	@ (80037fc <HAL_UART_MspInit+0x2cc>)
 8003750:	f001 fc2c 	bl	8004fac <HAL_GPIO_Init>
}
 8003754:	e040      	b.n	80037d8 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a29      	ldr	r2, [pc, #164]	@ (8003800 <HAL_UART_MspInit+0x2d0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d13b      	bne.n	80037d8 <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003760:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003766:	2300      	movs	r3, #0
 8003768:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800376a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376e:	4618      	mov	r0, r3
 8003770:	f003 fec2 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800377a:	f7ff fc83 	bl	8003084 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800377e:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44
 800378a:	4b16      	ldr	r3, [pc, #88]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_UART_MspInit+0x2b4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ae:	23c0      	movs	r3, #192	@ 0xc0
 80037b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037c6:	2308      	movs	r3, #8
 80037c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80037d0:	4619      	mov	r1, r3
 80037d2:	4806      	ldr	r0, [pc, #24]	@ (80037ec <HAL_UART_MspInit+0x2bc>)
 80037d4:	f001 fbea 	bl	8004fac <HAL_GPIO_Init>
}
 80037d8:	bf00      	nop
 80037da:	37c0      	adds	r7, #192	@ 0xc0
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40004c00 	.word	0x40004c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020800 	.word	0x40020800
 80037f0:	20000788 	.word	0x20000788
 80037f4:	40026040 	.word	0x40026040
 80037f8:	40005000 	.word	0x40005000
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	40011400 	.word	0x40011400

08003804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <NMI_Handler+0x4>

0800380c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <MemManage_Handler+0x4>

0800381c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <BusFault_Handler+0x4>

08003824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <UsageFault_Handler+0x4>

0800382c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800385a:	f000 f98d 	bl	8003b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}

08003862 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003866:	2010      	movs	r0, #16
 8003868:	f001 fd56 	bl	8005318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <DMA1_Stream2_IRQHandler+0x10>)
 8003876:	f001 f923 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000788 	.word	0x20000788

08003884 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003888:	4802      	ldr	r0, [pc, #8]	@ (8003894 <SPI1_IRQHandler+0x10>)
 800388a:	f005 f87d 	bl	8008988 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000434 	.word	0x20000434

08003898 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800389c:	4802      	ldr	r0, [pc, #8]	@ (80038a8 <UART4_IRQHandler+0x10>)
 800389e:	f006 fd6f 	bl	800a380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200005f0 	.word	0x200005f0

080038ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80038b0:	4802      	ldr	r0, [pc, #8]	@ (80038bc <DMA2_Stream0_IRQHandler+0x10>)
 80038b2:	f001 f905 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000498 	.word	0x20000498

080038c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <DMA2_Stream3_IRQHandler+0x10>)
 80038c6:	f001 f8fb 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200004f8 	.word	0x200004f8

080038d4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <DMA2_Stream4_IRQHandler+0x10>)
 80038da:	f001 f8f1 	bl	8004ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000380 	.word	0x20000380

080038e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038ec:	4802      	ldr	r0, [pc, #8]	@ (80038f8 <OTG_FS_IRQHandler+0x10>)
 80038ee:	f001 ff96 	bl	800581e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20001da0 	.word	0x20001da0

080038fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return 1;
 8003900:	2301      	movs	r3, #1
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <_kill>:

int _kill(int pid, int sig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003916:	f00c fe37 	bl	8010588 <__errno>
 800391a:	4603      	mov	r3, r0
 800391c:	2216      	movs	r2, #22
 800391e:	601a      	str	r2, [r3, #0]
  return -1;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_exit>:

void _exit (int status)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ffe7 	bl	800390c <_kill>
  while (1) {}    /* Make sure we hang here */
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <_exit+0x12>

08003942 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e00a      	b.n	800396a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003954:	f3af 8000 	nop.w
 8003958:	4601      	mov	r1, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	60ba      	str	r2, [r7, #8]
 8003960:	b2ca      	uxtb	r2, r1
 8003962:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3301      	adds	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	dbf0      	blt.n	8003954 <_read+0x12>
  }

  return len;
 8003972:	687b      	ldr	r3, [r7, #4]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e009      	b.n	80039a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	60ba      	str	r2, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3301      	adds	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	dbf1      	blt.n	800398e <_write+0x12>
  }
  return len;
 80039aa:	687b      	ldr	r3, [r7, #4]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_close>:

int _close(int file)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039dc:	605a      	str	r2, [r3, #4]
  return 0;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_isatty>:

int _isatty(int file)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039f4:	2301      	movs	r3, #1
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a24:	4a14      	ldr	r2, [pc, #80]	@ (8003a78 <_sbrk+0x5c>)
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <_sbrk+0x60>)
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a38:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <_sbrk+0x64>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	@ (8003a84 <_sbrk+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <_sbrk+0x64>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d207      	bcs.n	8003a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a4c:	f00c fd9c 	bl	8010588 <__errno>
 8003a50:	4603      	mov	r3, r0
 8003a52:	220c      	movs	r2, #12
 8003a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e009      	b.n	8003a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <_sbrk+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a05      	ldr	r2, [pc, #20]	@ (8003a80 <_sbrk+0x64>)
 8003a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 }
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20040000 	.word	0x20040000
 8003a7c:	00000400 	.word	0x00000400
 8003a80:	200008b8 	.word	0x200008b8
 8003a84:	200023d0 	.word	0x200023d0

08003a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a8c:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <SystemInit+0x20>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a92:	4a05      	ldr	r2, [pc, #20]	@ (8003aa8 <SystemInit+0x20>)
 8003a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ae4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003ab0:	f7ff ffea 	bl	8003a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab4:	480c      	ldr	r0, [pc, #48]	@ (8003ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ab6:	490d      	ldr	r1, [pc, #52]	@ (8003aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003acc:	4c0a      	ldr	r4, [pc, #40]	@ (8003af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ada:	f00c fd5b 	bl	8010594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ade:	f7fe fd9f 	bl	8002620 <main>
  bx  lr    
 8003ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ae4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aec:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003af0:	08012af0 	.word	0x08012af0
  ldr r2, =_sbss
 8003af4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003af8:	200023cc 	.word	0x200023cc

08003afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003afc:	e7fe      	b.n	8003afc <ADC_IRQHandler>

08003afe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b02:	2003      	movs	r0, #3
 8003b04:	f000 fd82 	bl	800460c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b08:	200f      	movs	r0, #15
 8003b0a:	f000 f805 	bl	8003b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b0e:	f7ff fabf 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b20:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_InitTick+0x54>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_InitTick+0x58>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fd9d 	bl	8004676 <HAL_SYSTICK_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00e      	b.n	8003b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d80a      	bhi.n	8003b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f000 fd65 	bl	8004622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b58:	4a06      	ldr	r2, [pc, #24]	@ (8003b74 <HAL_InitTick+0x5c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000008 	.word	0x20000008
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_IncTick+0x20>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_IncTick+0x24>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <HAL_IncTick+0x24>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	200008bc 	.word	0x200008bc

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_GetTick+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	200008bc 	.word	0x200008bc

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff ffee 	bl	8003ba0 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d005      	beq.n	8003bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <HAL_Delay+0x44>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bde:	bf00      	nop
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d8f7      	bhi.n	8003be0 <HAL_Delay+0x28>
  {
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000008 	.word	0x20000008

08003c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e031      	b.n	8003c7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fa5a 	bl	80030d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_ADC_Init+0x84>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa90 	bl	8004174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c6a:	e001      	b.n	8003c70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	ffffeefd 	.word	0xffffeefd

08003c88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_Start_DMA+0x22>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0d6      	b.n	8003e58 <HAL_ADC_Start_DMA+0x1d0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d018      	beq.n	8003cf2 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003cd0:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_ADC_Start_DMA+0x1d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a63      	ldr	r2, [pc, #396]	@ (8003e64 <HAL_ADC_Start_DMA+0x1dc>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9a      	lsrs	r2, r3, #18
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8003ce4:	e002      	b.n	8003cec <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f9      	bne.n	8003ce6 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f040 809e 	bne.w	8003e3e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d06:	4b58      	ldr	r3, [pc, #352]	@ (8003e68 <HAL_ADC_Start_DMA+0x1e0>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3c:	d106      	bne.n	8003d4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	f023 0206 	bic.w	r2, r3, #6
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d4a:	e002      	b.n	8003d52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	4a43      	ldr	r2, [pc, #268]	@ (8003e6c <HAL_ADC_Start_DMA+0x1e4>)
 8003d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	4a42      	ldr	r2, [pc, #264]	@ (8003e70 <HAL_ADC_Start_DMA+0x1e8>)
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6e:	4a41      	ldr	r2, [pc, #260]	@ (8003e74 <HAL_ADC_Start_DMA+0x1ec>)
 8003d70:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	334c      	adds	r3, #76	@ 0x4c
 8003da6:	4619      	mov	r1, r3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f000 fd96 	bl	80048dc <HAL_DMA_Start_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003db4:	4b30      	ldr	r3, [pc, #192]	@ (8003e78 <HAL_ADC_Start_DMA+0x1f0>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10f      	bne.n	8003de0 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d143      	bne.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	e03a      	b.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a25      	ldr	r2, [pc, #148]	@ (8003e7c <HAL_ADC_Start_DMA+0x1f4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_ADC_Start_DMA+0x180>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e06:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e08:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <HAL_ADC_Start_DMA+0x1f0>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d120      	bne.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	@ (8003e80 <HAL_ADC_Start_DMA+0x1f8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d11b      	bne.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d114      	bne.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e00b      	b.n	8003e56 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000000 	.word	0x20000000
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	fffff8fe 	.word	0xfffff8fe
 8003e6c:	08004369 	.word	0x08004369
 8003e70:	08004423 	.word	0x08004423
 8003e74:	0800443f 	.word	0x0800443f
 8003e78:	40012300 	.word	0x40012300
 8003e7c:	40012000 	.word	0x40012000
 8003e80:	40012200 	.word	0x40012200

08003e84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e13a      	b.n	8004152 <HAL_ADC_ConfigChannel+0x292>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b09      	cmp	r3, #9
 8003eea:	d93a      	bls.n	8003f62 <HAL_ADC_ConfigChannel+0xa2>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ef4:	d035      	beq.n	8003f62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68d9      	ldr	r1, [r3, #12]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b1e      	subs	r3, #30
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a8f      	ldr	r2, [pc, #572]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10a      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68d9      	ldr	r1, [r3, #12]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	061a      	lsls	r2, r3, #24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f3a:	e039      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4403      	add	r3, r0
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f60:	e026      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6919      	ldr	r1, [r3, #16]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43da      	mvns	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	400a      	ands	r2, r1
 8003f88:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6919      	ldr	r1, [r3, #16]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4403      	add	r3, r0
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d824      	bhi.n	8004002 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b05      	subs	r3, #5
 8003fca:	221f      	movs	r2, #31
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3b05      	subs	r3, #5
 8003ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34
 8004000:	e04c      	b.n	800409c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d824      	bhi.n	8004054 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	3b23      	subs	r3, #35	@ 0x23
 800401c:	221f      	movs	r2, #31
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	400a      	ands	r2, r1
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	4618      	mov	r0, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	3b23      	subs	r3, #35	@ 0x23
 8004046:	fa00 f203 	lsl.w	r2, r0, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
 8004052:	e023      	b.n	800409c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	3b41      	subs	r3, #65	@ 0x41
 8004066:	221f      	movs	r2, #31
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43da      	mvns	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	400a      	ands	r2, r1
 8004074:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	4618      	mov	r0, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	3b41      	subs	r3, #65	@ 0x41
 8004090:	fa00 f203 	lsl.w	r2, r0, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <HAL_ADC_ConfigChannel+0x2a4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10a      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1fc>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80040b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80040ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <HAL_ADC_ConfigChannel+0x2a4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10f      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x226>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b12      	cmp	r3, #18
 80040cc:	d10b      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80040d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040da:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 80040e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_ADC_ConfigChannel+0x2a4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d12b      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x288>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <HAL_ADC_ConfigChannel+0x242>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b11      	cmp	r3, #17
 8004100:	d122      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004102:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 8004108:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800410c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800410e:	4b16      	ldr	r3, [pc, #88]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a15      	ldr	r2, [pc, #84]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 8004114:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004118:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a10      	ldr	r2, [pc, #64]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_ADC_ConfigChannel+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_ADC_ConfigChannel+0x2b0>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0c9a      	lsrs	r2, r3, #18
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800413a:	e002      	b.n	8004142 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3b01      	subs	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f9      	bne.n	800413c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	10000012 	.word	0x10000012
 8004164:	40012000 	.word	0x40012000
 8004168:	40012300 	.word	0x40012300
 800416c:	20000000 	.word	0x20000000
 8004170:	431bde83 	.word	0x431bde83

08004174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800417c:	4b78      	ldr	r3, [pc, #480]	@ (8004360 <ADC_Init+0x1ec>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a77      	ldr	r2, [pc, #476]	@ (8004360 <ADC_Init+0x1ec>)
 8004182:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004186:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004188:	4b75      	ldr	r3, [pc, #468]	@ (8004360 <ADC_Init+0x1ec>)
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4973      	ldr	r1, [pc, #460]	@ (8004360 <ADC_Init+0x1ec>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6899      	ldr	r1, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <ADC_Init+0x1f0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004216:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	e00f      	b.n	800426e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800425c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800426c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0202 	bic.w	r2, r2, #2
 800427c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	3b01      	subs	r3, #1
 80042c8:	035a      	lsls	r2, r3, #13
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	e007      	b.n	80042e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	3b01      	subs	r3, #1
 8004300:	051a      	lsls	r2, r3, #20
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004326:	025a      	lsls	r2, r3, #9
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800433e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	029a      	lsls	r2, r3, #10
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012300 	.word	0x40012300
 8004364:	0f000001 	.word	0x0f000001

08004368 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d13c      	bne.n	80043fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d12b      	bne.n	80043f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d127      	bne.n	80043f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d119      	bne.n	80043f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0220 	bic.w	r2, r2, #32
 80043ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	f043 0201 	orr.w	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fd45 	bl	8003e84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043fa:	e00e      	b.n	800441a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff fd4f 	bl	8003eac <HAL_ADC_ErrorCallback>
}
 800440e:	e004      	b.n	800441a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fd31 	bl	8003e98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2240      	movs	r2, #64	@ 0x40
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fd24 	bl	8003eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <__NVIC_SetPriorityGrouping+0x40>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004488:	4013      	ands	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004494:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449a:	4a04      	ldr	r2, [pc, #16]	@ (80044ac <__NVIC_SetPriorityGrouping+0x40>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	60d3      	str	r3, [r2, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00
 80044b0:	05fa0000 	.word	0x05fa0000

080044b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <__NVIC_GetPriorityGrouping+0x18>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 0307 	and.w	r3, r3, #7
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	db0b      	blt.n	80044fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	f003 021f 	and.w	r2, r3, #31
 80044e8:	4907      	ldr	r1, [pc, #28]	@ (8004508 <__NVIC_EnableIRQ+0x38>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2001      	movs	r0, #1
 80044f2:	fa00 f202 	lsl.w	r2, r0, r2
 80044f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	e000e100 	.word	0xe000e100

0800450c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	db0a      	blt.n	8004536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	490c      	ldr	r1, [pc, #48]	@ (8004558 <__NVIC_SetPriority+0x4c>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	440b      	add	r3, r1
 8004530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004534:	e00a      	b.n	800454c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4908      	ldr	r1, [pc, #32]	@ (800455c <__NVIC_SetPriority+0x50>)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	3b04      	subs	r3, #4
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	440b      	add	r3, r1
 800454a:	761a      	strb	r2, [r3, #24]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000e100 	.word	0xe000e100
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	@ 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f1c3 0307 	rsb	r3, r3, #7
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf28      	it	cs
 800457e:	2304      	movcs	r3, #4
 8004580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3304      	adds	r3, #4
 8004586:	2b06      	cmp	r3, #6
 8004588:	d902      	bls.n	8004590 <NVIC_EncodePriority+0x30>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3b03      	subs	r3, #3
 800458e:	e000      	b.n	8004592 <NVIC_EncodePriority+0x32>
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	f04f 32ff 	mov.w	r2, #4294967295
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	401a      	ands	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	43d9      	mvns	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b8:	4313      	orrs	r3, r2
         );
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	@ 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045d8:	d301      	bcc.n	80045de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045da:	2301      	movs	r3, #1
 80045dc:	e00f      	b.n	80045fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045de:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <SysTick_Config+0x40>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e6:	210f      	movs	r1, #15
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	f7ff ff8e 	bl	800450c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <SysTick_Config+0x40>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045f6:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <SysTick_Config+0x40>)
 80045f8:	2207      	movs	r2, #7
 80045fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000e010 	.word	0xe000e010

0800460c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff29 	bl	800446c <__NVIC_SetPriorityGrouping>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	4603      	mov	r3, r0
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004634:	f7ff ff3e 	bl	80044b4 <__NVIC_GetPriorityGrouping>
 8004638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	6978      	ldr	r0, [r7, #20]
 8004640:	f7ff ff8e 	bl	8004560 <NVIC_EncodePriority>
 8004644:	4602      	mov	r2, r0
 8004646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff5d 	bl	800450c <__NVIC_SetPriority>
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff31 	bl	80044d0 <__NVIC_EnableIRQ>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ffa2 	bl	80045c8 <SysTick_Config>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004694:	f3bf 8f5f 	dmb	sy
}
 8004698:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800469a:	4b07      	ldr	r3, [pc, #28]	@ (80046b8 <HAL_MPU_Disable+0x28>)
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	4a06      	ldr	r2, [pc, #24]	@ (80046b8 <HAL_MPU_Disable+0x28>)
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80046a6:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_MPU_Disable+0x2c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00
 80046bc:	e000ed90 	.word	0xe000ed90

080046c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80046c8:	4a0b      	ldr	r2, [pc, #44]	@ (80046f8 <HAL_MPU_Enable+0x38>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <HAL_MPU_Enable+0x3c>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	4a09      	ldr	r2, [pc, #36]	@ (80046fc <HAL_MPU_Enable+0x3c>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80046de:	f3bf 8f4f 	dsb	sy
}
 80046e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046e4:	f3bf 8f6f 	isb	sy
}
 80046e8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000ed90 	.word	0xe000ed90
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	785a      	ldrb	r2, [r3, #1]
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_MPU_ConfigRegion+0x7c>)
 800470e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <HAL_MPU_ConfigRegion+0x7c>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <HAL_MPU_ConfigRegion+0x7c>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <HAL_MPU_ConfigRegion+0x7c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7b1b      	ldrb	r3, [r3, #12]
 8004728:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7adb      	ldrb	r3, [r3, #11]
 800472e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7a9b      	ldrb	r3, [r3, #10]
 8004736:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7b5b      	ldrb	r3, [r3, #13]
 800473e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7b9b      	ldrb	r3, [r3, #14]
 8004746:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7bdb      	ldrb	r3, [r3, #15]
 800474e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7a5b      	ldrb	r3, [r3, #9]
 8004756:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7a1b      	ldrb	r3, [r3, #8]
 800475e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004760:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	7812      	ldrb	r2, [r2, #0]
 8004766:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004768:	4a04      	ldr	r2, [pc, #16]	@ (800477c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800476a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800476c:	6113      	str	r3, [r2, #16]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000ed90 	.word	0xe000ed90

08004780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7ff fa08 	bl	8003ba0 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e099      	b.n	80048d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047bc:	e00f      	b.n	80047de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047be:	f7ff f9ef 	bl	8003ba0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d908      	bls.n	80047de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e078      	b.n	80048d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e8      	bne.n	80047be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4b38      	ldr	r3, [pc, #224]	@ (80048d8 <HAL_DMA_Init+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800480a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	2b04      	cmp	r3, #4
 8004836:	d107      	bne.n	8004848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	4313      	orrs	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	2b04      	cmp	r3, #4
 8004870:	d117      	bne.n	80048a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fb15 	bl	8004eb4 <DMA_CheckFifoParam>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2240      	movs	r2, #64	@ 0x40
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800489e:	2301      	movs	r3, #1
 80048a0:	e016      	b.n	80048d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 facc 	bl	8004e48 <DMA_CalcBaseAndBitshift>
 80048b0:	4603      	mov	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	223f      	movs	r2, #63	@ 0x3f
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e010803f 	.word	0xe010803f

080048dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_DMA_Start_IT+0x26>
 80048fe:	2302      	movs	r3, #2
 8004900:	e048      	b.n	8004994 <HAL_DMA_Start_IT+0xb8>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d137      	bne.n	8004986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa5e 	bl	8004dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	223f      	movs	r2, #63	@ 0x3f
 8004936:	409a      	lsls	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0216 	orr.w	r2, r2, #22
 800494a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800495a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0208 	orr.w	r2, r2, #8
 8004972:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049aa:	f7ff f8f9 	bl	8003ba0 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d008      	beq.n	80049ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e052      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0216 	bic.w	r2, r2, #22
 80049dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_DMA_Abort+0x62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a1e:	e013      	b.n	8004a48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a20:	f7ff f8be 	bl	8003ba0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d90c      	bls.n	8004a48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e015      	b.n	8004a74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e4      	bne.n	8004a20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	223f      	movs	r2, #63	@ 0x3f
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00c      	b.n	8004ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004acc:	4b8e      	ldr	r3, [pc, #568]	@ (8004d08 <HAL_DMA_IRQHandler+0x248>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8004d0c <HAL_DMA_IRQHandler+0x24c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aea:	2208      	movs	r2, #8
 8004aec:	409a      	lsls	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01a      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	2208      	movs	r2, #8
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	2201      	movs	r2, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	f043 0202 	orr.w	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	2204      	movs	r2, #4
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d043      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03c      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	2210      	movs	r2, #16
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d024      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
 8004bee:	e01f      	b.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	e016      	b.n	8004c30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0208 	bic.w	r2, r2, #8
 8004c1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	2220      	movs	r2, #32
 8004c36:	409a      	lsls	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 808f 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8087 	beq.w	8004d60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c56:	2220      	movs	r2, #32
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d136      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0216 	bic.w	r2, r2, #22
 8004c78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_DMA_IRQHandler+0x1da>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cae:	223f      	movs	r2, #63	@ 0x3f
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d07e      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
        }
        return;
 8004cd6:	e079      	b.n	8004dcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01d      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d031      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
 8004d04:	e02c      	b.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d023      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	e01e      	b.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0210 	bic.w	r2, r2, #16
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d032      	beq.n	8004dce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2205      	movs	r2, #5
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d307      	bcc.n	8004da8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f2      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x2cc>
 8004da6:	e000      	b.n	8004daa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004da8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
 8004dca:	e000      	b.n	8004dce <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dcc:	bf00      	nop
    }
  }
}
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d108      	bne.n	8004e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e2a:	e007      	b.n	8004e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3b10      	subs	r3, #16
 8004e58:	4a13      	ldr	r2, [pc, #76]	@ (8004ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e62:	4a12      	ldr	r2, [pc, #72]	@ (8004eac <DMA_CalcBaseAndBitshift+0x64>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d908      	bls.n	8004e88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e86:	e006      	b.n	8004e96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	aaaaaaab 	.word	0xaaaaaaab
 8004eac:	08012718 	.word	0x08012718
 8004eb0:	fffffc00 	.word	0xfffffc00

08004eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11f      	bne.n	8004f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d856      	bhi.n	8004f82 <DMA_CheckFifoParam+0xce>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <DMA_CheckFifoParam+0x28>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eff 	.word	0x08004eff
 8004ee4:	08004eed 	.word	0x08004eed
 8004ee8:	08004f83 	.word	0x08004f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d046      	beq.n	8004f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e043      	b.n	8004f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f06:	d140      	bne.n	8004f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e03d      	b.n	8004f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f16:	d121      	bne.n	8004f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d837      	bhi.n	8004f8e <DMA_CheckFifoParam+0xda>
 8004f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <DMA_CheckFifoParam+0x70>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f3b 	.word	0x08004f3b
 8004f2c:	08004f35 	.word	0x08004f35
 8004f30:	08004f4d 	.word	0x08004f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      break;
 8004f38:	e030      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d025      	beq.n	8004f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4a:	e022      	b.n	8004f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f54:	d11f      	bne.n	8004f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f5a:	e01c      	b.n	8004f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d903      	bls.n	8004f6a <DMA_CheckFifoParam+0xb6>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f68:	e018      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6e:	e015      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e00b      	b.n	8004f9a <DMA_CheckFifoParam+0xe6>
      break;
 8004f82:	bf00      	nop
 8004f84:	e00a      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f86:	bf00      	nop
 8004f88:	e008      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e006      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	@ 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e169      	b.n	80052a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fcc:	2201      	movs	r2, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	f040 8158 	bne.w	800529a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d005      	beq.n	8005002 <HAL_GPIO_Init+0x56>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d130      	bne.n	8005064 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0201 	and.w	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d017      	beq.n	80050a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	2203      	movs	r2, #3
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d123      	bne.n	80050f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	08da      	lsrs	r2, r3, #3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3208      	adds	r2, #8
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	220f      	movs	r2, #15
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	08da      	lsrs	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3208      	adds	r2, #8
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80b2 	beq.w	800529a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	4b60      	ldr	r3, [pc, #384]	@ (80052b8 <HAL_GPIO_Init+0x30c>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	4a5f      	ldr	r2, [pc, #380]	@ (80052b8 <HAL_GPIO_Init+0x30c>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005140:	6453      	str	r3, [r2, #68]	@ 0x44
 8005142:	4b5d      	ldr	r3, [pc, #372]	@ (80052b8 <HAL_GPIO_Init+0x30c>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800514e:	4a5b      	ldr	r2, [pc, #364]	@ (80052bc <HAL_GPIO_Init+0x310>)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3302      	adds	r3, #2
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	220f      	movs	r2, #15
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a52      	ldr	r2, [pc, #328]	@ (80052c0 <HAL_GPIO_Init+0x314>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02b      	beq.n	80051d2 <HAL_GPIO_Init+0x226>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a51      	ldr	r2, [pc, #324]	@ (80052c4 <HAL_GPIO_Init+0x318>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d025      	beq.n	80051ce <HAL_GPIO_Init+0x222>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a50      	ldr	r2, [pc, #320]	@ (80052c8 <HAL_GPIO_Init+0x31c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01f      	beq.n	80051ca <HAL_GPIO_Init+0x21e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4f      	ldr	r2, [pc, #316]	@ (80052cc <HAL_GPIO_Init+0x320>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d019      	beq.n	80051c6 <HAL_GPIO_Init+0x21a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4e      	ldr	r2, [pc, #312]	@ (80052d0 <HAL_GPIO_Init+0x324>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_GPIO_Init+0x216>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4d      	ldr	r2, [pc, #308]	@ (80052d4 <HAL_GPIO_Init+0x328>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00d      	beq.n	80051be <HAL_GPIO_Init+0x212>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4c      	ldr	r2, [pc, #304]	@ (80052d8 <HAL_GPIO_Init+0x32c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_Init+0x20e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4b      	ldr	r2, [pc, #300]	@ (80052dc <HAL_GPIO_Init+0x330>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_GPIO_Init+0x20a>
 80051b2:	2307      	movs	r3, #7
 80051b4:	e00e      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051b6:	2308      	movs	r3, #8
 80051b8:	e00c      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051ba:	2306      	movs	r3, #6
 80051bc:	e00a      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051be:	2305      	movs	r3, #5
 80051c0:	e008      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051c2:	2304      	movs	r3, #4
 80051c4:	e006      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051c6:	2303      	movs	r3, #3
 80051c8:	e004      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e002      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_GPIO_Init+0x228>
 80051d2:	2300      	movs	r3, #0
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	f002 0203 	and.w	r2, r2, #3
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	4093      	lsls	r3, r2
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051e4:	4935      	ldr	r1, [pc, #212]	@ (80052bc <HAL_GPIO_Init+0x310>)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f2:	4b3b      	ldr	r3, [pc, #236]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005216:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800521c:	4b30      	ldr	r3, [pc, #192]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	43db      	mvns	r3, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4013      	ands	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005240:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005246:	4b26      	ldr	r3, [pc, #152]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800526a:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005270:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <HAL_GPIO_Init+0x334>)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b0f      	cmp	r3, #15
 80052a4:	f67f ae92 	bls.w	8004fcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	@ 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40013800 	.word	0x40013800
 80052c0:	40020000 	.word	0x40020000
 80052c4:	40020400 	.word	0x40020400
 80052c8:	40020800 	.word	0x40020800
 80052cc:	40020c00 	.word	0x40020c00
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40021400 	.word	0x40021400
 80052d8:	40021800 	.word	0x40021800
 80052dc:	40021c00 	.word	0x40021c00
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
 80052f0:	4613      	mov	r3, r2
 80052f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052f4:	787b      	ldrb	r3, [r7, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005300:	e003      	b.n	800530a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005302:	887b      	ldrh	r3, [r7, #2]
 8005304:	041a      	lsls	r2, r3, #16
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	619a      	str	r2, [r3, #24]
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005322:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d006      	beq.n	800533c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800532e:	4a05      	ldr	r2, [pc, #20]	@ (8005344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fd f93c 	bl	80025b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800533c:	bf00      	nop
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40013c00 	.word	0x40013c00

08005348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e08b      	b.n	8005472 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fd ff26 	bl	80031c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2224      	movs	r2, #36	@ 0x24
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d107      	bne.n	80053c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	e006      	b.n	80053d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d108      	bne.n	80053ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	e007      	b.n	80053fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <HAL_I2C_Init+0x134>)
 8005406:	430b      	orrs	r3, r1
 8005408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	02008000 	.word	0x02008000

08005480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d138      	bne.n	8005508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e032      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2224      	movs	r2, #36	@ 0x24
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6819      	ldr	r1, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b20      	cmp	r3, #32
 800552a:	d139      	bne.n	80055a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005536:	2302      	movs	r3, #2
 8005538:	e033      	b.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2224      	movs	r2, #36	@ 0x24
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af02      	add	r7, sp, #8
 80055b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e108      	b.n	80057d2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f009 fde6 	bl	800f1ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2203      	movs	r2, #3
 80055e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ee:	d102      	bne.n	80055f6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f006 f9bf 	bl	800b97e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7c1a      	ldrb	r2, [r3, #16]
 8005608:	f88d 2000 	strb.w	r2, [sp]
 800560c:	3304      	adds	r3, #4
 800560e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005610:	f006 f876 	bl	800b700 <USB_CoreInit>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0d5      	b.n	80057d2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f006 f9b7 	bl	800b9a0 <USB_SetCurrentMode>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0c6      	b.n	80057d2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	e04a      	b.n	80056e0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800564a:	7bfa      	ldrb	r2, [r7, #15]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	3315      	adds	r3, #21
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3314      	adds	r3, #20
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005672:	7bfa      	ldrb	r2, [r7, #15]
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	b298      	uxth	r0, r3
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	332e      	adds	r3, #46	@ 0x2e
 8005686:	4602      	mov	r2, r0
 8005688:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3318      	adds	r3, #24
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800569e:	7bfa      	ldrb	r2, [r7, #15]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	331c      	adds	r3, #28
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056b2:	7bfa      	ldrb	r2, [r7, #15]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	3320      	adds	r3, #32
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056c6:	7bfa      	ldrb	r2, [r7, #15]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3324      	adds	r3, #36	@ 0x24
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	3301      	adds	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d3af      	bcc.n	800564a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	e044      	b.n	800577a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800575e:	7bfa      	ldrb	r2, [r7, #15]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	3301      	adds	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	791b      	ldrb	r3, [r3, #4]
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	429a      	cmp	r2, r3
 8005782:	d3b5      	bcc.n	80056f0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7c1a      	ldrb	r2, [r3, #16]
 800578c:	f88d 2000 	strb.w	r2, [sp]
 8005790:	3304      	adds	r3, #4
 8005792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005794:	f006 f950 	bl	800ba38 <USB_DevInit>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e013      	b.n	80057d2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7b1b      	ldrb	r3, [r3, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d102      	bne.n	80057c6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 f95b 	bl	8006a7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f007 f9a5 	bl	800cb1a <USB_DevDisconnect>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_Start+0x16>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e012      	b.n	8005816 <HAL_PCD_Start+0x3c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f006 f8ad 	bl	800b95c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f007 f966 	bl	800cad8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800581e:	b590      	push	{r4, r7, lr}
 8005820:	b08d      	sub	sp, #52	@ 0x34
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f007 fa24 	bl	800cc82 <USB_GetMode>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f040 84b9 	bne.w	80061b4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f007 f988 	bl	800cb5c <USB_ReadInterrupts>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 84af 	beq.w	80061b2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f007 f975 	bl	800cb5c <USB_ReadInterrupts>
 8005872:	4603      	mov	r3, r0
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d107      	bne.n	800588c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f002 0202 	and.w	r2, r2, #2
 800588a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f007 f963 	bl	800cb5c <USB_ReadInterrupts>
 8005896:	4603      	mov	r3, r0
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d161      	bne.n	8005964 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0210 	bic.w	r2, r2, #16
 80058ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80058d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058da:	d124      	bne.n	8005926 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d035      	beq.n	8005954 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	091b      	lsrs	r3, r3, #4
 80058f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6a38      	ldr	r0, [r7, #32]
 80058fc:	f006 ff9a 	bl	800c834 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800590c:	441a      	add	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800591e:	441a      	add	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	e016      	b.n	8005954 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800592c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005930:	d110      	bne.n	8005954 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005938:	2208      	movs	r2, #8
 800593a:	4619      	mov	r1, r3
 800593c:	6a38      	ldr	r0, [r7, #32]
 800593e:	f006 ff79 	bl	800c834 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800594e:	441a      	add	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0210 	orr.w	r2, r2, #16
 8005962:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f007 f8f7 	bl	800cb5c <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005974:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005978:	f040 80a7 	bne.w	8005aca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f007 f8fc 	bl	800cb82 <USB_ReadDevAllOutEpInterrupt>
 800598a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800598c:	e099      	b.n	8005ac2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 808e 	beq.w	8005ab6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f007 f920 	bl	800cbea <USB_ReadDevOutEPInterrupt>
 80059aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	461a      	mov	r2, r3
 80059c4:	2301      	movs	r3, #1
 80059c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fed0 	bl	8006770 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	461a      	mov	r2, r3
 80059e8:	2308      	movs	r3, #8
 80059ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 ffa6 	bl	8006940 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d030      	beq.n	8005a7c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a22:	2b80      	cmp	r3, #128	@ 0x80
 8005a24:	d109      	bne.n	8005a3a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a38:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d108      	bne.n	8005a6a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f009 fcc5 	bl	800f3f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2302      	movs	r3, #2
 8005a7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a92:	461a      	mov	r2, r3
 8005a94:	2320      	movs	r3, #32
 8005a96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ab4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	3301      	adds	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f47f af62 	bne.w	800598e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f007 f844 	bl	800cb5c <USB_ReadInterrupts>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ade:	f040 80db 	bne.w	8005c98 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f007 f865 	bl	800cbb6 <USB_ReadDevAllInEpInterrupt>
 8005aec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005af2:	e0cd      	b.n	8005c90 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80c2 	beq.w	8005c84 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f007 f88b 	bl	800cc26 <USB_ReadDevInEPInterrupt>
 8005b10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d057      	beq.n	8005bcc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	2201      	movs	r2, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69f9      	ldr	r1, [r7, #28]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2301      	movs	r3, #1
 8005b50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	799b      	ldrb	r3, [r3, #6]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d132      	bne.n	8005bc0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3320      	adds	r3, #32
 8005b6a:	6819      	ldr	r1, [r3, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4403      	add	r3, r0
 8005b7a:	331c      	adds	r3, #28
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4419      	add	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4403      	add	r3, r0
 8005b8e:	3320      	adds	r3, #32
 8005b90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d113      	bne.n	8005bc0 <HAL_PCD_IRQHandler+0x3a2>
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3324      	adds	r3, #36	@ 0x24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2101      	movs	r1, #1
 8005bbc:	f007 f894 	bl	800cce8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f009 fb8f 	bl	800f2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	2308      	movs	r3, #8
 8005be6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2310      	movs	r3, #16
 8005c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2340      	movs	r3, #64	@ 0x40
 8005c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d023      	beq.n	8005c72 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c2c:	6a38      	ldr	r0, [r7, #32]
 8005c2e:	f006 f873 	bl	800bd18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	3304      	adds	r3, #4
 8005c44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d108      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2200      	movs	r2, #0
 8005c52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f009 fbdc 	bl	800f418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2302      	movs	r3, #2
 8005c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fcea 	bl	8006658 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	3301      	adds	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f af2e 	bne.w	8005af4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f006 ff5d 	bl	800cb5c <USB_ReadInterrupts>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cac:	d122      	bne.n	8005cf4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d108      	bne.n	8005cde <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f009 fd5a 	bl	800f790 <HAL_PCDEx_LPM_Callback>
 8005cdc:	e002      	b.n	8005ce4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f009 fb7a 	bl	800f3d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f006 ff2f 	bl	800cb5c <USB_ReadInterrupts>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d08:	d112      	bne.n	8005d30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d102      	bne.n	8005d20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f009 fb36 	bl	800f38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f006 ff11 	bl	800cb5c <USB_ReadInterrupts>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d44:	d121      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005d54:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d111      	bne.n	8005d84 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f009 fd07 	bl	800f790 <HAL_PCDEx_LPM_Callback>
 8005d82:	e002      	b.n	8005d8a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f009 fb01 	bl	800f38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f006 fee4 	bl	800cb5c <USB_ReadInterrupts>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9e:	f040 80b7 	bne.w	8005f10 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2110      	movs	r1, #16
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f005 ffab 	bl	800bd18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc6:	e046      	b.n	8005e56 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005dda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	3301      	adds	r3, #1
 8005e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d3b2      	bcc.n	8005dc8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7bdb      	ldrb	r3, [r3, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e8e:	f043 030b 	orr.w	r3, r3, #11
 8005e92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ea4:	f043 030b 	orr.w	r3, r3, #11
 8005ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eaa:	e015      	b.n	8005ed8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed2:	f043 030b 	orr.w	r3, r3, #11
 8005ed6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ee6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005eea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005efa:	461a      	mov	r2, r3
 8005efc:	f006 fef4 	bl	800cce8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f006 fe21 	bl	800cb5c <USB_ReadInterrupts>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f24:	d123      	bne.n	8005f6e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f006 feb8 	bl	800cca0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f005 ff68 	bl	800be0a <USB_GetDevSpeed>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681c      	ldr	r4, [r3, #0]
 8005f46:	f001 faa3 	bl	8007490 <HAL_RCC_GetHCLKFreq>
 8005f4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f50:	461a      	mov	r2, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f005 fc60 	bl	800b818 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f009 f9ee 	bl	800f33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f006 fdf2 	bl	800cb5c <USB_ReadInterrupts>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d10a      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f009 f9cb 	bl	800f31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f002 0208 	and.w	r2, r2, #8
 8005f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f006 fddd 	bl	800cb5c <USB_ReadInterrupts>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa8:	2b80      	cmp	r3, #128	@ 0x80
 8005faa:	d123      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fb8:	2301      	movs	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbc:	e014      	b.n	8005fe8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb0a 	bl	80065f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	791b      	ldrb	r3, [r3, #4]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d3e4      	bcc.n	8005fbe <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f006 fdaf 	bl	800cb5c <USB_ReadInterrupts>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006008:	d13c      	bne.n	8006084 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800600a:	2301      	movs	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	e02b      	b.n	8006068 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3318      	adds	r3, #24
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d115      	bne.n	8006062 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006036:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006038:	2b00      	cmp	r3, #0
 800603a:	da12      	bge.n	8006062 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3317      	adds	r3, #23
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 faca 	bl	80065f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	3301      	adds	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	461a      	mov	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	4293      	cmp	r3, r2
 8006072:	d3cd      	bcc.n	8006010 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f006 fd67 	bl	800cb5c <USB_ReadInterrupts>
 800608e:	4603      	mov	r3, r0
 8006090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006098:	d156      	bne.n	8006148 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800609a:	2301      	movs	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
 800609e:	e045      	b.n	800612c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d12e      	bne.n	8006126 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da2b      	bge.n	8006126 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	0c1a      	lsrs	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060d8:	4053      	eors	r3, r2
 80060da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d121      	bne.n	8006126 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800611e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006122:	6053      	str	r3, [r2, #4]
            break;
 8006124:	e008      	b.n	8006138 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	3301      	adds	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	461a      	mov	r2, r3
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	4293      	cmp	r3, r2
 8006136:	d3b3      	bcc.n	80060a0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f006 fd05 	bl	800cb5c <USB_ReadInterrupts>
 8006152:	4603      	mov	r3, r0
 8006154:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615c:	d10a      	bne.n	8006174 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f009 f96c 	bl	800f43c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f006 fcef 	bl	800cb5c <USB_ReadInterrupts>
 800617e:	4603      	mov	r3, r0
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b04      	cmp	r3, #4
 8006186:	d115      	bne.n	80061b4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f009 f95c 	bl	800f458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6859      	ldr	r1, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	e000      	b.n	80061b4 <HAL_PCD_IRQHandler+0x996>
      return;
 80061b2:	bf00      	nop
    }
  }
}
 80061b4:	3734      	adds	r7, #52	@ 0x34
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd90      	pop	{r4, r7, pc}

080061ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_PCD_SetAddress+0x1a>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e012      	b.n	80061fa <HAL_PCD_SetAddress+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f006 fc4e 	bl	800ca8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	461a      	mov	r2, r3
 8006210:	4603      	mov	r3, r0
 8006212:	70fb      	strb	r3, [r7, #3]
 8006214:	460b      	mov	r3, r1
 8006216:	803b      	strh	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	da0f      	bge.n	8006248 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3310      	adds	r3, #16
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	705a      	strb	r2, [r3, #1]
 8006246:	e00f      	b.n	8006268 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006274:	883b      	ldrh	r3, [r7, #0]
 8006276:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	78ba      	ldrb	r2, [r7, #2]
 8006282:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006296:	78bb      	ldrb	r3, [r7, #2]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d102      	bne.n	80062a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_PCD_EP_Open+0xae>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e00e      	b.n	80062ce <HAL_PCD_EP_Open+0xcc>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	4618      	mov	r0, r3
 80062c0:	f005 fdc8 	bl	800be54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da0f      	bge.n	800630a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	3310      	adds	r3, #16
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	705a      	strb	r2, [r3, #1]
 8006308:	e00f      	b.n	800632a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 020f 	and.w	r2, r3, #15
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_PCD_EP_Close+0x6e>
 8006340:	2302      	movs	r3, #2
 8006342:	e00e      	b.n	8006362 <HAL_PCD_EP_Close+0x8c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	4618      	mov	r0, r3
 8006354:	f005 fe06 	bl	800bf64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	460b      	mov	r3, r1
 8006378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	f003 020f 	and.w	r2, r3, #15
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	3304      	adds	r3, #4
 8006392:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	799b      	ldrb	r3, [r3, #6]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d102      	bne.n	80063c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	799b      	ldrb	r3, [r3, #6]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	f005 fea3 	bl	800c11c <USB_EPStartXfer>

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	f003 020f 	and.w	r2, r3, #15
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	460b      	mov	r3, r1
 800641e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	f003 020f 	and.w	r2, r3, #15
 8006426:	4613      	mov	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	3310      	adds	r3, #16
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2201      	movs	r2, #1
 800644e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	b2da      	uxtb	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	799b      	ldrb	r3, [r3, #6]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	799b      	ldrb	r3, [r3, #6]
 8006472:	461a      	mov	r2, r3
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	f005 fe51 	bl	800c11c <USB_EPStartXfer>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	7912      	ldrb	r2, [r2, #4]
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e04f      	b.n	8006542 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da0f      	bge.n	80064ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	3310      	adds	r3, #16
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	3304      	adds	r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	705a      	strb	r2, [r3, #1]
 80064c8:	e00d      	b.n	80064e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_PCD_EP_SetStall+0x82>
 8006502:	2302      	movs	r3, #2
 8006504:	e01d      	b.n	8006542 <HAL_PCD_EP_SetStall+0xbe>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	4618      	mov	r0, r3
 8006516:	f006 f9e5 	bl	800c8e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	7999      	ldrb	r1, [r3, #6]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006532:	461a      	mov	r2, r3
 8006534:	f006 fbd8 	bl	800cce8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	7912      	ldrb	r2, [r2, #4]
 8006560:	4293      	cmp	r3, r2
 8006562:	d901      	bls.n	8006568 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e042      	b.n	80065ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0f      	bge.n	8006590 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3310      	adds	r3, #16
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	705a      	strb	r2, [r3, #1]
 800658e:	e00f      	b.n	80065b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	4613      	mov	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_PCD_EP_ClrStall+0x86>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e00e      	b.n	80065ee <HAL_PCD_EP_ClrStall+0xa4>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68f9      	ldr	r1, [r7, #12]
 80065de:	4618      	mov	r0, r3
 80065e0:	f006 f9ee 	bl	800c9c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006606:	2b00      	cmp	r3, #0
 8006608:	da0c      	bge.n	8006624 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 020f 	and.w	r2, r3, #15
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	3310      	adds	r3, #16
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	3304      	adds	r3, #4
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e00c      	b.n	800663e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	4613      	mov	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4413      	add	r3, r2
 800663a:	3304      	adds	r3, #4
 800663c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	4618      	mov	r0, r3
 8006646:	f006 f80d 	bl	800c664 <USB_EPStopXfer>
 800664a:	4603      	mov	r3, r0
 800664c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800664e:	7afb      	ldrb	r3, [r7, #11]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	@ 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	3310      	adds	r3, #16
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	429a      	cmp	r2, r3
 800668a:	d901      	bls.n	8006690 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e06b      	b.n	8006768 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d902      	bls.n	80066ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3303      	adds	r3, #3
 80066b0:	089b      	lsrs	r3, r3, #2
 80066b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066b4:	e02a      	b.n	800670c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d902      	bls.n	80066d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3303      	adds	r3, #3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68d9      	ldr	r1, [r3, #12]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	4603      	mov	r3, r0
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f006 f862 	bl	800c7b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	441a      	add	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	429a      	cmp	r2, r3
 8006720:	d809      	bhi.n	8006736 <PCD_WriteEmptyTxFifo+0xde>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672a:	429a      	cmp	r2, r3
 800672c:	d203      	bcs.n	8006736 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1bf      	bne.n	80066b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	429a      	cmp	r2, r3
 8006740:	d811      	bhi.n	8006766 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	2201      	movs	r2, #1
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	43db      	mvns	r3, r3
 800675c:	6939      	ldr	r1, [r7, #16]
 800675e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006762:	4013      	ands	r3, r2
 8006764:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	333c      	adds	r3, #60	@ 0x3c
 8006788:	3304      	adds	r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	799b      	ldrb	r3, [r3, #6]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d17b      	bne.n	800689e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d015      	beq.n	80067dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4a61      	ldr	r2, [pc, #388]	@ (8006938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	f240 80b9 	bls.w	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80b3 	beq.w	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d2:	461a      	mov	r2, r3
 80067d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d8:	6093      	str	r3, [r2, #8]
 80067da:	e0a7      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	461a      	mov	r2, r3
 80067f4:	2320      	movs	r3, #32
 80067f6:	6093      	str	r3, [r2, #8]
 80067f8:	e098      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 8093 	bne.w	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4a4b      	ldr	r2, [pc, #300]	@ (8006938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d90f      	bls.n	800682e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006824:	461a      	mov	r2, r3
 8006826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682a:	6093      	str	r3, [r2, #8]
 800682c:	e07e      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	0159      	lsls	r1, r3, #5
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	440b      	add	r3, r1
 8006850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685a:	1ad2      	subs	r2, r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d114      	bne.n	8006890 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006878:	461a      	mov	r2, r3
 800687a:	2101      	movs	r1, #1
 800687c:	f006 fa34 	bl	800cce8 <USB_EP0_OutStart>
 8006880:	e006      	b.n	8006890 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f008 fd0c 	bl	800f2b4 <HAL_PCD_DataOutStageCallback>
 800689c:	e046      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4a26      	ldr	r2, [pc, #152]	@ (800693c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d124      	bne.n	80068f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068bc:	461a      	mov	r2, r3
 80068be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c2:	6093      	str	r3, [r2, #8]
 80068c4:	e032      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	2320      	movs	r3, #32
 80068e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f008 fce3 	bl	800f2b4 <HAL_PCD_DataOutStageCallback>
 80068ee:	e01d      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d114      	bne.n	8006920 <PCD_EP_OutXfrComplete_int+0x1b0>
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006918:	461a      	mov	r2, r3
 800691a:	2100      	movs	r1, #0
 800691c:	f006 f9e4 	bl	800cce8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f008 fcc4 	bl	800f2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	4f54300a 	.word	0x4f54300a
 800693c:	4f54310a 	.word	0x4f54310a

08006940 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	333c      	adds	r3, #60	@ 0x3c
 8006958:	3304      	adds	r3, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d90e      	bls.n	8006994 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698c:	461a      	mov	r2, r3
 800698e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006992:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f008 fc7b 	bl	800f290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d90c      	bls.n	80069bc <PCD_EP_OutSetupPacket_int+0x7c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	799b      	ldrb	r3, [r3, #6]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d108      	bne.n	80069bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069b4:	461a      	mov	r2, r3
 80069b6:	2101      	movs	r1, #1
 80069b8:	f006 f996 	bl	800cce8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	4f54300a 	.word	0x4f54300a

080069cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
 80069d8:	4613      	mov	r3, r2
 80069da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d107      	bne.n	80069fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069ea:	883b      	ldrh	r3, [r7, #0]
 80069ec:	0419      	lsls	r1, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80069f8:	e028      	b.n	8006a4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	0c1b      	lsrs	r3, r3, #16
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4413      	add	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	e00d      	b.n	8006a2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	3340      	adds	r3, #64	@ 0x40
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	3301      	adds	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	7bfa      	ldrb	r2, [r7, #15]
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d3ec      	bcc.n	8006a0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a34:	883b      	ldrh	r3, [r7, #0]
 8006a36:	0418      	lsls	r0, r3, #16
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	4302      	orrs	r2, r0
 8006a44:	3340      	adds	r3, #64	@ 0x40
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	10000003 	.word	0x10000003

08006ac4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4b23      	ldr	r3, [pc, #140]	@ (8006b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad2:	4a22      	ldr	r2, [pc, #136]	@ (8006b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ada:	4b20      	ldr	r3, [pc, #128]	@ (8006b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1d      	ldr	r2, [pc, #116]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006af2:	f7fd f855 	bl	8003ba0 <HAL_GetTick>
 8006af6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006af8:	e009      	b.n	8006b0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006afa:	f7fd f851 	bl	8003ba0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b08:	d901      	bls.n	8006b0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e022      	b.n	8006b54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b0e:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1a:	d1ee      	bne.n	8006afa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b1c:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0f      	ldr	r2, [pc, #60]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b28:	f7fd f83a 	bl	8003ba0 <HAL_GetTick>
 8006b2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b2e:	e009      	b.n	8006b44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b30:	f7fd f836 	bl	8003ba0 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b3e:	d901      	bls.n	8006b44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e007      	b.n	8006b54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b44:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b50:	d1ee      	bne.n	8006b30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40007000 	.word	0x40007000

08006b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e291      	b.n	800709e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8087 	beq.w	8006c96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b88:	4b96      	ldr	r3, [pc, #600]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d00c      	beq.n	8006bae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b94:	4b93      	ldr	r3, [pc, #588]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d112      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x62>
 8006ba0:	4b90      	ldr	r3, [pc, #576]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bae:	4b8d      	ldr	r3, [pc, #564]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06c      	beq.n	8006c94 <HAL_RCC_OscConfig+0x130>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d168      	bne.n	8006c94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e26b      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x7a>
 8006bd0:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a83      	ldr	r2, [pc, #524]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e02e      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x9c>
 8006be6:	4b7f      	ldr	r3, [pc, #508]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7e      	ldr	r2, [pc, #504]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a7b      	ldr	r2, [pc, #492]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e01d      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCC_OscConfig+0xc0>
 8006c0a:	4b76      	ldr	r3, [pc, #472]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a75      	ldr	r2, [pc, #468]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a72      	ldr	r2, [pc, #456]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006c24:	4b6f      	ldr	r3, [pc, #444]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4b6c      	ldr	r3, [pc, #432]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6b      	ldr	r2, [pc, #428]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d013      	beq.n	8006c6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fc ffac 	bl	8003ba0 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c4c:	f7fc ffa8 	bl	8003ba0 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b64      	cmp	r3, #100	@ 0x64
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e21f      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b61      	ldr	r3, [pc, #388]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0xe8>
 8006c6a:	e014      	b.n	8006c96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fc ff98 	bl	8003ba0 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c74:	f7fc ff94 	bl	8003ba0 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b64      	cmp	r3, #100	@ 0x64
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e20b      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x110>
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d069      	beq.n	8006d76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ca2:	4b50      	ldr	r3, [pc, #320]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 030c 	and.w	r3, r3, #12
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cae:	4b4d      	ldr	r3, [pc, #308]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x190>
 8006cba:	4b4a      	ldr	r3, [pc, #296]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e1df      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	493d      	ldr	r1, [pc, #244]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf2:	e040      	b.n	8006d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d023      	beq.n	8006d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cfc:	4b39      	ldr	r3, [pc, #228]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a38      	ldr	r2, [pc, #224]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fc ff4a 	bl	8003ba0 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d10:	f7fc ff46 	bl	8003ba0 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e1bd      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d22:	4b30      	ldr	r3, [pc, #192]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4929      	ldr	r1, [pc, #164]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	600b      	str	r3, [r1, #0]
 8006d42:	e018      	b.n	8006d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d44:	4b27      	ldr	r3, [pc, #156]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a26      	ldr	r2, [pc, #152]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fc ff26 	bl	8003ba0 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d58:	f7fc ff22 	bl	8003ba0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e199      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d038      	beq.n	8006df4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d019      	beq.n	8006dbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d8a:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fc ff03 	bl	8003ba0 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7fc feff 	bl	8003ba0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e176      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <HAL_RCC_OscConfig+0x23a>
 8006dbc:	e01a      	b.n	8006df4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbe:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc2:	4a08      	ldr	r2, [pc, #32]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dca:	f7fc fee9 	bl	8003ba0 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	e00a      	b.n	8006de8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7fc fee5 	bl	8003ba0 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d903      	bls.n	8006de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e15c      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
 8006de4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de8:	4b91      	ldr	r3, [pc, #580]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ee      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a4 	beq.w	8006f4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e02:	4b8b      	ldr	r3, [pc, #556]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	4b88      	ldr	r3, [pc, #544]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	4a87      	ldr	r2, [pc, #540]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e1a:	4b85      	ldr	r3, [pc, #532]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2a:	4b82      	ldr	r3, [pc, #520]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d118      	bne.n	8006e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e36:	4b7f      	ldr	r3, [pc, #508]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e42:	f7fc fead 	bl	8003ba0 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4a:	f7fc fea9 	bl	8003ba0 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b64      	cmp	r3, #100	@ 0x64
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e120      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e5c:	4b75      	ldr	r3, [pc, #468]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCC_OscConfig+0x31a>
 8006e70:	4b6f      	ldr	r3, [pc, #444]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	4a6e      	ldr	r2, [pc, #440]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e7c:	e02d      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x33c>
 8006e86:	4b6a      	ldr	r3, [pc, #424]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	4a69      	ldr	r2, [pc, #420]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e92:	4b67      	ldr	r3, [pc, #412]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a66      	ldr	r2, [pc, #408]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	e01c      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b05      	cmp	r3, #5
 8006ea6:	d10c      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x35e>
 8006ea8:	4b61      	ldr	r3, [pc, #388]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eac:	4a60      	ldr	r2, [pc, #384]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ec0:	e00b      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ece:	4b58      	ldr	r3, [pc, #352]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed2:	4a57      	ldr	r2, [pc, #348]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ed4:	f023 0304 	bic.w	r3, r3, #4
 8006ed8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d015      	beq.n	8006f0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee2:	f7fc fe5d 	bl	8003ba0 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee8:	e00a      	b.n	8006f00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eea:	f7fc fe59 	bl	8003ba0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e0ce      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f00:	4b4b      	ldr	r3, [pc, #300]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0ee      	beq.n	8006eea <HAL_RCC_OscConfig+0x386>
 8006f0c:	e014      	b.n	8006f38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0e:	f7fc fe47 	bl	8003ba0 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f16:	f7fc fe43 	bl	8003ba0 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e0b8      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2c:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ee      	bne.n	8006f16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d105      	bne.n	8006f4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f42:	4a3b      	ldr	r2, [pc, #236]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80a4 	beq.w	800709c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f54:	4b36      	ldr	r3, [pc, #216]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 030c 	and.w	r3, r3, #12
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d06b      	beq.n	8007038 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d149      	bne.n	8006ffc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f68:	4b31      	ldr	r3, [pc, #196]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a30      	ldr	r2, [pc, #192]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fc fe14 	bl	8003ba0 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fc fe10 	bl	8003ba0 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e087      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b28      	ldr	r3, [pc, #160]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	019b      	lsls	r3, r3, #6
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	061b      	lsls	r3, r3, #24
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fc8:	4b19      	ldr	r3, [pc, #100]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a18      	ldr	r2, [pc, #96]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fc fde4 	bl	8003ba0 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fdc:	f7fc fde0 	bl	8003ba0 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e057      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fee:	4b10      	ldr	r3, [pc, #64]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0x478>
 8006ffa:	e04f      	b.n	800709c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0b      	ldr	r2, [pc, #44]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8007002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fc fdca 	bl	8003ba0 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007010:	f7fc fdc6 	bl	8003ba0 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e03d      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0x4ac>
 800702e:	e035      	b.n	800709c <HAL_RCC_OscConfig+0x538>
 8007030:	40023800 	.word	0x40023800
 8007034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007038:	4b1b      	ldr	r3, [pc, #108]	@ (80070a8 <HAL_RCC_OscConfig+0x544>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d028      	beq.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007050:	429a      	cmp	r2, r3
 8007052:	d121      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705e:	429a      	cmp	r2, r3
 8007060:	d11a      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007068:	4013      	ands	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800706e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007070:	4293      	cmp	r3, r2
 8007072:	d111      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	3b01      	subs	r3, #1
 8007082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d107      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40023800 	.word	0x40023800

080070ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0d0      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d910      	bls.n	80070f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d2:	4b67      	ldr	r3, [pc, #412]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 020f 	bic.w	r2, r3, #15
 80070da:	4965      	ldr	r1, [pc, #404]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b63      	ldr	r3, [pc, #396]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0b8      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d020      	beq.n	8007142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800710c:	4b59      	ldr	r3, [pc, #356]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4a58      	ldr	r2, [pc, #352]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4a52      	ldr	r2, [pc, #328]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800712a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800712e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007130:	4b50      	ldr	r3, [pc, #320]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	494d      	ldr	r1, [pc, #308]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d040      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d107      	bne.n	8007166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e07f      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d107      	bne.n	800717e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800716e:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e073      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717e:	4b3d      	ldr	r3, [pc, #244]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e06b      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800718e:	4b39      	ldr	r3, [pc, #228]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f023 0203 	bic.w	r2, r3, #3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	4936      	ldr	r1, [pc, #216]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800719c:	4313      	orrs	r3, r2
 800719e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a0:	f7fc fcfe 	bl	8003ba0 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a6:	e00a      	b.n	80071be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a8:	f7fc fcfa 	bl	8003ba0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e053      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071be:	4b2d      	ldr	r3, [pc, #180]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 020c 	and.w	r2, r3, #12
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d1eb      	bne.n	80071a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071d0:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d210      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 020f 	bic.w	r2, r3, #15
 80071e6:	4922      	ldr	r1, [pc, #136]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e032      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800720c:	4b19      	ldr	r3, [pc, #100]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4916      	ldr	r1, [pc, #88]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800721a:	4313      	orrs	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800722a:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	490e      	ldr	r1, [pc, #56]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800723e:	f000 f821 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 8007242:	4602      	mov	r2, r0
 8007244:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	490a      	ldr	r1, [pc, #40]	@ (8007278 <HAL_RCC_ClockConfig+0x1cc>)
 8007250:	5ccb      	ldrb	r3, [r1, r3]
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	4a09      	ldr	r2, [pc, #36]	@ (800727c <HAL_RCC_ClockConfig+0x1d0>)
 8007258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800725a:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <HAL_RCC_ClockConfig+0x1d4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f7fc fc5a 	bl	8003b18 <HAL_InitTick>

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	40023c00 	.word	0x40023c00
 8007274:	40023800 	.word	0x40023800
 8007278:	08012700 	.word	0x08012700
 800727c:	20000000 	.word	0x20000000
 8007280:	20000004 	.word	0x20000004

08007284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b094      	sub	sp, #80	@ 0x50
 800728a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007290:	2300      	movs	r3, #0
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007294:	2300      	movs	r3, #0
 8007296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800729c:	4b79      	ldr	r3, [pc, #484]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d00d      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x40>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	f200 80e1 	bhi.w	8007470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x34>
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d003      	beq.n	80072be <HAL_RCC_GetSysClockFreq+0x3a>
 80072b6:	e0db      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072b8:	4b73      	ldr	r3, [pc, #460]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072bc:	e0db      	b.n	8007476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072be:	4b73      	ldr	r3, [pc, #460]	@ (800748c <HAL_RCC_GetSysClockFreq+0x208>)
 80072c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072c2:	e0d8      	b.n	8007476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80072ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d063      	beq.n	80073a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072da:	4b6a      	ldr	r3, [pc, #424]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	099b      	lsrs	r3, r3, #6
 80072e0:	2200      	movs	r2, #0
 80072e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072f6:	4622      	mov	r2, r4
 80072f8:	462b      	mov	r3, r5
 80072fa:	f04f 0000 	mov.w	r0, #0
 80072fe:	f04f 0100 	mov.w	r1, #0
 8007302:	0159      	lsls	r1, r3, #5
 8007304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007308:	0150      	lsls	r0, r2, #5
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4621      	mov	r1, r4
 8007310:	1a51      	subs	r1, r2, r1
 8007312:	6139      	str	r1, [r7, #16]
 8007314:	4629      	mov	r1, r5
 8007316:	eb63 0301 	sbc.w	r3, r3, r1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007328:	4659      	mov	r1, fp
 800732a:	018b      	lsls	r3, r1, #6
 800732c:	4651      	mov	r1, sl
 800732e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007332:	4651      	mov	r1, sl
 8007334:	018a      	lsls	r2, r1, #6
 8007336:	4651      	mov	r1, sl
 8007338:	ebb2 0801 	subs.w	r8, r2, r1
 800733c:	4659      	mov	r1, fp
 800733e:	eb63 0901 	sbc.w	r9, r3, r1
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800734e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007356:	4690      	mov	r8, r2
 8007358:	4699      	mov	r9, r3
 800735a:	4623      	mov	r3, r4
 800735c:	eb18 0303 	adds.w	r3, r8, r3
 8007360:	60bb      	str	r3, [r7, #8]
 8007362:	462b      	mov	r3, r5
 8007364:	eb49 0303 	adc.w	r3, r9, r3
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	f04f 0300 	mov.w	r3, #0
 8007372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007376:	4629      	mov	r1, r5
 8007378:	024b      	lsls	r3, r1, #9
 800737a:	4621      	mov	r1, r4
 800737c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007380:	4621      	mov	r1, r4
 8007382:	024a      	lsls	r2, r1, #9
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738a:	2200      	movs	r2, #0
 800738c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800738e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007394:	f7f9 fca0 	bl	8000cd8 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4613      	mov	r3, r2
 800739e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a0:	e058      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073a2:	4b38      	ldr	r3, [pc, #224]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	2200      	movs	r2, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	4611      	mov	r1, r2
 80073ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073b2:	623b      	str	r3, [r7, #32]
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	f04f 0000 	mov.w	r0, #0
 80073c4:	f04f 0100 	mov.w	r1, #0
 80073c8:	0159      	lsls	r1, r3, #5
 80073ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ce:	0150      	lsls	r0, r2, #5
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4641      	mov	r1, r8
 80073d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80073da:	4649      	mov	r1, r9
 80073dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073f4:	ebb2 040a 	subs.w	r4, r2, sl
 80073f8:	eb63 050b 	sbc.w	r5, r3, fp
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	00eb      	lsls	r3, r5, #3
 8007406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740a:	00e2      	lsls	r2, r4, #3
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	4643      	mov	r3, r8
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	464b      	mov	r3, r9
 8007418:	eb45 0303 	adc.w	r3, r5, r3
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800742a:	4629      	mov	r1, r5
 800742c:	028b      	lsls	r3, r1, #10
 800742e:	4621      	mov	r1, r4
 8007430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007434:	4621      	mov	r1, r4
 8007436:	028a      	lsls	r2, r1, #10
 8007438:	4610      	mov	r0, r2
 800743a:	4619      	mov	r1, r3
 800743c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800743e:	2200      	movs	r2, #0
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	61fa      	str	r2, [r7, #28]
 8007444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007448:	f7f9 fc46 	bl	8000cd8 <__aeabi_uldivmod>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4613      	mov	r3, r2
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007454:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x200>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	3301      	adds	r3, #1
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007468:	fbb2 f3f3 	udiv	r3, r2, r3
 800746c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800746e:	e002      	b.n	8007476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <HAL_RCC_GetSysClockFreq+0x204>)
 8007472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007478:	4618      	mov	r0, r3
 800747a:	3750      	adds	r7, #80	@ 0x50
 800747c:	46bd      	mov	sp, r7
 800747e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007482:	bf00      	nop
 8007484:	40023800 	.word	0x40023800
 8007488:	00f42400 	.word	0x00f42400
 800748c:	007a1200 	.word	0x007a1200

08007490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007494:	4b03      	ldr	r3, [pc, #12]	@ (80074a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000000 	.word	0x20000000

080074a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074ac:	f7ff fff0 	bl	8007490 <HAL_RCC_GetHCLKFreq>
 80074b0:	4602      	mov	r2, r0
 80074b2:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	0a9b      	lsrs	r3, r3, #10
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	4903      	ldr	r1, [pc, #12]	@ (80074cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074be:	5ccb      	ldrb	r3, [r1, r3]
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40023800 	.word	0x40023800
 80074cc:	08012710 	.word	0x08012710

080074d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074d4:	f7ff ffdc 	bl	8007490 <HAL_RCC_GetHCLKFreq>
 80074d8:	4602      	mov	r2, r0
 80074da:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	0b5b      	lsrs	r3, r3, #13
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	4903      	ldr	r1, [pc, #12]	@ (80074f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074e6:	5ccb      	ldrb	r3, [r1, r3]
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40023800 	.word	0x40023800
 80074f4:	08012710 	.word	0x08012710

080074f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800751c:	4b65      	ldr	r3, [pc, #404]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a64      	ldr	r2, [pc, #400]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007522:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007526:	6093      	str	r3, [r2, #8]
 8007528:	4b62      	ldr	r3, [pc, #392]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	4960      	ldr	r1, [pc, #384]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007532:	4313      	orrs	r3, r2
 8007534:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800753e:	2301      	movs	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d017      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800754e:	4b59      	ldr	r3, [pc, #356]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007554:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755c:	4955      	ldr	r1, [pc, #340]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756c:	d101      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800756e:	2301      	movs	r3, #1
 8007570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d017      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800758a:	4b4a      	ldr	r3, [pc, #296]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800758c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007590:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007598:	4946      	ldr	r1, [pc, #280]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075a8:	d101      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80075aa:	2301      	movs	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 808b 	beq.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c8:	4b3a      	ldr	r3, [pc, #232]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	4a39      	ldr	r2, [pc, #228]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80075d4:	4b37      	ldr	r3, [pc, #220]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075e0:	4b35      	ldr	r3, [pc, #212]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a34      	ldr	r2, [pc, #208]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ec:	f7fc fad8 	bl	8003ba0 <HAL_GetTick>
 80075f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f4:	f7fc fad4 	bl	8003ba0 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	@ 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e2bc      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007606:	4b2c      	ldr	r3, [pc, #176]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007612:	4b28      	ldr	r3, [pc, #160]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800761a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d035      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d02e      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007630:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007638:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800763a:	4b1e      	ldr	r3, [pc, #120]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800763c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763e:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007644:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007646:	4b1b      	ldr	r3, [pc, #108]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764a:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800764c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007650:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007652:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007658:	4b16      	ldr	r3, [pc, #88]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b01      	cmp	r3, #1
 8007662:	d114      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fc fa9c 	bl	8003ba0 <HAL_GetTick>
 8007668:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766a:	e00a      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800766c:	f7fc fa98 	bl	8003ba0 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e27e      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0ee      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800769a:	d111      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80076a8:	4b04      	ldr	r3, [pc, #16]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80076aa:	400b      	ands	r3, r1
 80076ac:	4901      	ldr	r1, [pc, #4]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	608b      	str	r3, [r1, #8]
 80076b2:	e00b      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80076b4:	40023800 	.word	0x40023800
 80076b8:	40007000 	.word	0x40007000
 80076bc:	0ffffcff 	.word	0x0ffffcff
 80076c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4aa3      	ldr	r2, [pc, #652]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076ca:	6093      	str	r3, [r2, #8]
 80076cc:	4ba1      	ldr	r3, [pc, #644]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d8:	499e      	ldr	r1, [pc, #632]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d010      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076ea:	4b9a      	ldr	r3, [pc, #616]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f0:	4a98      	ldr	r2, [pc, #608]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80076fa:	4b96      	ldr	r3, [pc, #600]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	4993      	ldr	r1, [pc, #588]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007718:	4b8e      	ldr	r3, [pc, #568]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007726:	498b      	ldr	r1, [pc, #556]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800773a:	4b86      	ldr	r3, [pc, #536]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007740:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007748:	4982      	ldr	r1, [pc, #520]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800775c:	4b7d      	ldr	r3, [pc, #500]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007762:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776a:	497a      	ldr	r1, [pc, #488]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800777e:	4b75      	ldr	r3, [pc, #468]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007784:	f023 0203 	bic.w	r2, r3, #3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778c:	4971      	ldr	r1, [pc, #452]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077a0:	4b6c      	ldr	r3, [pc, #432]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a6:	f023 020c 	bic.w	r2, r3, #12
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ae:	4969      	ldr	r1, [pc, #420]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077c2:	4b64      	ldr	r3, [pc, #400]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d0:	4960      	ldr	r1, [pc, #384]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f2:	4958      	ldr	r1, [pc, #352]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007806:	4b53      	ldr	r3, [pc, #332]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007814:	494f      	ldr	r1, [pc, #316]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007828:	4b4a      	ldr	r3, [pc, #296]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007836:	4947      	ldr	r1, [pc, #284]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800784a:	4b42      	ldr	r3, [pc, #264]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007850:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007858:	493e      	ldr	r1, [pc, #248]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800786c:	4b39      	ldr	r3, [pc, #228]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007872:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787a:	4936      	ldr	r1, [pc, #216]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d011      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800788e:	4b31      	ldr	r3, [pc, #196]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007894:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789c:	492d      	ldr	r1, [pc, #180]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ac:	d101      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078be:	4b25      	ldr	r3, [pc, #148]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078cc:	4921      	ldr	r1, [pc, #132]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ee:	4919      	ldr	r1, [pc, #100]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007902:	4b14      	ldr	r3, [pc, #80]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007908:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007910:	4910      	ldr	r1, [pc, #64]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d006      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 809d 	beq.w	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800792c:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a08      	ldr	r2, [pc, #32]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007932:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007938:	f7fc f932 	bl	8003ba0 <HAL_GetTick>
 800793c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800793e:	e00b      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007940:	f7fc f92e 	bl	8003ba0 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b64      	cmp	r3, #100	@ 0x64
 800794c:	d904      	bls.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e116      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007958:	4b8b      	ldr	r3, [pc, #556]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1ed      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d017      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d113      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007978:	4b83      	ldr	r3, [pc, #524]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797e:	0e1b      	lsrs	r3, r3, #24
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	019a      	lsls	r2, r3, #6
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	061b      	lsls	r3, r3, #24
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	071b      	lsls	r3, r3, #28
 8007998:	497b      	ldr	r1, [pc, #492]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079b4:	d00a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d024      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079ca:	d11f      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079cc:	4b6e      	ldr	r3, [pc, #440]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d2:	0f1b      	lsrs	r3, r3, #28
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	019a      	lsls	r2, r3, #6
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	431a      	orrs	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	071b      	lsls	r3, r3, #28
 80079ec:	4966      	ldr	r1, [pc, #408]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079f4:	4b64      	ldr	r3, [pc, #400]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80079f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079fa:	f023 021f 	bic.w	r2, r3, #31
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4960      	ldr	r1, [pc, #384]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	019a      	lsls	r2, r3, #6
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	061b      	lsls	r3, r3, #24
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	071b      	lsls	r3, r3, #28
 8007a2c:	4956      	ldr	r1, [pc, #344]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a34:	4b54      	ldr	r3, [pc, #336]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a53      	ldr	r2, [pc, #332]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a40:	f7fc f8ae 	bl	8003ba0 <HAL_GetTick>
 8007a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a48:	f7fc f8aa 	bl	8003ba0 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e092      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 8088 	bne.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a6e:	4b46      	ldr	r3, [pc, #280]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a45      	ldr	r2, [pc, #276]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7a:	f7fc f891 	bl	8003ba0 <HAL_GetTick>
 8007a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a80:	e008      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a82:	f7fc f88d 	bl	8003ba0 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b64      	cmp	r3, #100	@ 0x64
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e075      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a94:	4b3c      	ldr	r3, [pc, #240]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aa0:	d0ef      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d024      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d120      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007aca:	4b2f      	ldr	r3, [pc, #188]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	019a      	lsls	r2, r3, #6
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	041b      	lsls	r3, r3, #16
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	4927      	ldr	r1, [pc, #156]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	4920      	ldr	r1, [pc, #128]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d018      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b20:	d113      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b22:	4b19      	ldr	r3, [pc, #100]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b28:	0e1b      	lsrs	r3, r3, #24
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	019a      	lsls	r2, r3, #6
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	061b      	lsls	r3, r3, #24
 8007b42:	4911      	ldr	r1, [pc, #68]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b56:	f7fc f823 	bl	8003ba0 <HAL_GetTick>
 8007b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b5c:	e008      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b5e:	f7fc f81f 	bl	8003ba0 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b64      	cmp	r3, #100	@ 0x64
 8007b6a:	d901      	bls.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e007      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b70:	4b05      	ldr	r3, [pc, #20]	@ (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b7c:	d1ef      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3720      	adds	r7, #32
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40023800 	.word	0x40023800

08007b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e09d      	b.n	8007cda <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d108      	bne.n	8007bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bae:	d009      	beq.n	8007bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	61da      	str	r2, [r3, #28]
 8007bb6:	e005      	b.n	8007bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fb fb4c 	bl	800327c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c04:	d902      	bls.n	8007c0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e002      	b.n	8007c12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c1a:	d007      	beq.n	8007c2c <HAL_SPI_Init+0xa0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	ea42 0103 	orr.w	r1, r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	0c1b      	lsrs	r3, r3, #16
 8007c88:	f003 0204 	and.w	r2, r3, #4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	431a      	orrs	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ca8:	ea42 0103 	orr.w	r1, r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b088      	sub	sp, #32
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf2:	f7fb ff55 	bl	8003ba0 <HAL_GetTick>
 8007cf6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e15c      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SPI_Transmit+0x36>
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e154      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_SPI_Transmit+0x48>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e14d      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2203      	movs	r2, #3
 8007d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d7c:	d10f      	bne.n	8007d9e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da8:	2b40      	cmp	r3, #64	@ 0x40
 8007daa:	d007      	beq.n	8007dbc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dc4:	d952      	bls.n	8007e6c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_SPI_Transmit+0xf2>
 8007dce:	8b7b      	ldrh	r3, [r7, #26]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d145      	bne.n	8007e60 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	881a      	ldrh	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007df8:	e032      	b.n	8007e60 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d112      	bne.n	8007e2e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e18:	1c9a      	adds	r2, r3, #2
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e2c:	e018      	b.n	8007e60 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2e:	f7fb feb7 	bl	8003ba0 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d803      	bhi.n	8007e46 <HAL_SPI_Transmit+0x164>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d102      	bne.n	8007e4c <HAL_SPI_Transmit+0x16a>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e0b2      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1c7      	bne.n	8007dfa <HAL_SPI_Transmit+0x118>
 8007e6a:	e083      	b.n	8007f74 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_SPI_Transmit+0x198>
 8007e74:	8b7b      	ldrh	r3, [r7, #26]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d177      	bne.n	8007f6a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d912      	bls.n	8007eaa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e88:	881a      	ldrh	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e94:	1c9a      	adds	r2, r3, #2
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b02      	subs	r3, #2
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ea8:	e05f      	b.n	8007f6a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	330c      	adds	r3, #12
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007ed0:	e04b      	b.n	8007f6a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d12b      	bne.n	8007f38 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d912      	bls.n	8007f10 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b02      	subs	r3, #2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f0e:	e02c      	b.n	8007f6a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	7812      	ldrb	r2, [r2, #0]
 8007f1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f36:	e018      	b.n	8007f6a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f38:	f7fb fe32 	bl	8003ba0 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d803      	bhi.n	8007f50 <HAL_SPI_Transmit+0x26e>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d102      	bne.n	8007f56 <HAL_SPI_Transmit+0x274>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e02d      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1ae      	bne.n	8007ed2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f001 f8b7 	bl	80090ec <SPI_EndRxTxTransaction>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b088      	sub	sp, #32
 8007fd2:	af02      	add	r7, sp, #8
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
 8007fec:	e123      	b.n	8008236 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_Receive+0x2c>
 8007ff4:	88fb      	ldrh	r3, [r7, #6]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e11b      	b.n	8008236 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008006:	d112      	bne.n	800802e <HAL_SPI_Receive+0x60>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10e      	bne.n	800802e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2204      	movs	r2, #4
 8008014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f90a 	bl	800823e <HAL_SPI_TransmitReceive>
 800802a:	4603      	mov	r3, r0
 800802c:	e103      	b.n	8008236 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800802e:	f7fb fdb7 	bl	8003ba0 <HAL_GetTick>
 8008032:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_SPI_Receive+0x74>
 800803e:	2302      	movs	r3, #2
 8008040:	e0f9      	b.n	8008236 <HAL_SPI_Receive+0x268>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2204      	movs	r2, #4
 800804e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	88fa      	ldrh	r2, [r7, #6]
 8008062:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008094:	d908      	bls.n	80080a8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	e007      	b.n	80080b8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c0:	d10f      	bne.n	80080e2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ec:	2b40      	cmp	r3, #64	@ 0x40
 80080ee:	d007      	beq.n	8008100 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008108:	d875      	bhi.n	80081f6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800810a:	e037      	b.n	800817c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d117      	bne.n	800814a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f103 020c 	add.w	r2, r3, #12
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	7812      	ldrb	r2, [r2, #0]
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008148:	e018      	b.n	800817c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800814a:	f7fb fd29 	bl	8003ba0 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d803      	bhi.n	8008162 <HAL_SPI_Receive+0x194>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d102      	bne.n	8008168 <HAL_SPI_Receive+0x19a>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d109      	bne.n	800817c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e05c      	b.n	8008236 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1c1      	bne.n	800810c <HAL_SPI_Receive+0x13e>
 8008188:	e03b      	b.n	8008202 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d115      	bne.n	80081c4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	b292      	uxth	r2, r2
 80081a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	1c9a      	adds	r2, r3, #2
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80081c2:	e018      	b.n	80081f6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c4:	f7fb fcec 	bl	8003ba0 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d803      	bhi.n	80081dc <HAL_SPI_Receive+0x20e>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d102      	bne.n	80081e2 <HAL_SPI_Receive+0x214>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e01f      	b.n	8008236 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1c3      	bne.n	800818a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fef4 	bl	8008ff4 <SPI_EndRxTransaction>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8008234:	2300      	movs	r3, #0
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b08a      	sub	sp, #40	@ 0x28
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800824c:	2301      	movs	r3, #1
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008250:	f7fb fca6 	bl	8003ba0 <HAL_GetTick>
 8008254:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800825c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008264:	887b      	ldrh	r3, [r7, #2]
 8008266:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008268:	887b      	ldrh	r3, [r7, #2]
 800826a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800826c:	7ffb      	ldrb	r3, [r7, #31]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d00c      	beq.n	800828c <HAL_SPI_TransmitReceive+0x4e>
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008278:	d106      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x4a>
 8008282:	7ffb      	ldrb	r3, [r7, #31]
 8008284:	2b04      	cmp	r3, #4
 8008286:	d001      	beq.n	800828c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	e1f3      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_SPI_TransmitReceive+0x60>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_SPI_TransmitReceive+0x60>
 8008298:	887b      	ldrh	r3, [r7, #2]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e1e8      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_SPI_TransmitReceive+0x72>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e1e1      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d003      	beq.n	80082cc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2205      	movs	r2, #5
 80082c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	887a      	ldrh	r2, [r7, #2]
 80082dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	887a      	ldrh	r2, [r7, #2]
 80082e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	887a      	ldrh	r2, [r7, #2]
 80082f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	887a      	ldrh	r2, [r7, #2]
 80082f8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800830e:	d802      	bhi.n	8008316 <HAL_SPI_TransmitReceive+0xd8>
 8008310:	8abb      	ldrh	r3, [r7, #20]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d908      	bls.n	8008328 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	e007      	b.n	8008338 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008342:	2b40      	cmp	r3, #64	@ 0x40
 8008344:	d007      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008354:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800835e:	f240 8083 	bls.w	8008468 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x132>
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d16f      	bne.n	8008450 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	881a      	ldrh	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	1c9a      	adds	r2, r3, #2
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008394:	e05c      	b.n	8008450 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d11b      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x19e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <HAL_SPI_TransmitReceive+0x19e>
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d113      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b8:	881a      	ldrh	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	1c9a      	adds	r2, r3, #2
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d11c      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x1e6>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	b292      	uxth	r2, r2
 8008402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008408:	1c9a      	adds	r2, r3, #2
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008420:	2301      	movs	r3, #1
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008424:	f7fb fbbc 	bl	8003ba0 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008430:	429a      	cmp	r2, r3
 8008432:	d80d      	bhi.n	8008450 <HAL_SPI_TransmitReceive+0x212>
 8008434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d009      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e111      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d19d      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x158>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d197      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x158>
 8008466:	e0e5      	b.n	8008634 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x23a>
 8008470:	8afb      	ldrh	r3, [r7, #22]
 8008472:	2b01      	cmp	r3, #1
 8008474:	f040 80d1 	bne.w	800861a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b01      	cmp	r3, #1
 8008480:	d912      	bls.n	80084a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008492:	1c9a      	adds	r2, r3, #2
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b02      	subs	r3, #2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084a6:	e0b8      	b.n	800861a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ce:	e0a4      	b.n	800861a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d134      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x30a>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d02f      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x30a>
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d12c      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d912      	bls.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	881a      	ldrh	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008508:	1c9a      	adds	r2, r3, #2
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b02      	subs	r3, #2
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800851c:	e012      	b.n	8008544 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	7812      	ldrb	r2, [r2, #0]
 800852a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d148      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x3aa>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d042      	beq.n	80085e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b01      	cmp	r3, #1
 800856c:	d923      	bls.n	80085b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008578:	b292      	uxth	r2, r2
 800857a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008580:	1c9a      	adds	r2, r3, #2
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b02      	subs	r3, #2
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d81f      	bhi.n	80085e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	e016      	b.n	80085e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f103 020c 	add.w	r2, r3, #12
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c2:	7812      	ldrb	r2, [r2, #0]
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085e4:	2301      	movs	r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085e8:	f7fb fada 	bl	8003ba0 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d803      	bhi.n	8008600 <HAL_SPI_TransmitReceive+0x3c2>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d102      	bne.n	8008606 <HAL_SPI_TransmitReceive+0x3c8>
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e02c      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f af55 	bne.w	80084d0 <HAL_SPI_TransmitReceive+0x292>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	f47f af4e 	bne.w	80084d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fd57 	bl	80090ec <SPI_EndRxTxTransaction>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e00e      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008672:	2300      	movs	r3, #0
  }
}
 8008674:	4618      	mov	r0, r3
 8008676:	3728      	adds	r7, #40	@ 0x28
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008690:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d00c      	beq.n	80086b8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a4:	d106      	bne.n	80086b4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <HAL_SPI_TransmitReceive_DMA+0x38>
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d001      	beq.n	80086b8 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e158      	b.n	800896a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_SPI_TransmitReceive_DMA+0x4e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_SPI_TransmitReceive_DMA+0x4e>
 80086c4:	887b      	ldrh	r3, [r7, #2]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e14d      	b.n	800896a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_SPI_TransmitReceive_DMA+0x60>
 80086d8:	2302      	movs	r3, #2
 80086da:	e146      	b.n	800896a <HAL_SPI_TransmitReceive_DMA+0x2ee>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d003      	beq.n	80086f8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2205      	movs	r2, #5
 80086f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	887a      	ldrh	r2, [r7, #2]
 8008708:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	887a      	ldrh	r2, [r7, #2]
 800870e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	887a      	ldrh	r2, [r7, #2]
 800871a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	887a      	ldrh	r2, [r7, #2]
 8008722:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008740:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800874a:	d908      	bls.n	800875e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	e06f      	b.n	800883e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800876c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008778:	d126      	bne.n	80087c8 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008794:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879a:	b29b      	uxth	r3, r3
 800879c:	085b      	lsrs	r3, r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087a4:	e010      	b.n	80087c8 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087b4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	085b      	lsrs	r3, r3, #1
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3301      	adds	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087d2:	d134      	bne.n	800883e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80087e2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d111      	bne.n	8008818 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008802:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800880a:	b29b      	uxth	r3, r3
 800880c:	085b      	lsrs	r3, r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008816:	e012      	b.n	800883e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008826:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800882e:	b29b      	uxth	r3, r3
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	3301      	adds	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b04      	cmp	r3, #4
 8008848:	d108      	bne.n	800885c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	4a49      	ldr	r2, [pc, #292]	@ (8008974 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008850:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008856:	4a48      	ldr	r2, [pc, #288]	@ (8008978 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800885a:	e007      	b.n	800886c <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008860:	4a46      	ldr	r2, [pc, #280]	@ (800897c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008862:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008868:	4a45      	ldr	r2, [pc, #276]	@ (8008980 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800886a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008870:	4a44      	ldr	r2, [pc, #272]	@ (8008984 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008872:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008878:	2200      	movs	r2, #0
 800887a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	4619      	mov	r1, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008894:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008896:	f7fc f821 	bl	80048dc <HAL_DMA_Start_IT>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a4:	f043 0210 	orr.w	r2, r3, #16
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e058      	b.n	800896a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088cc:	2200      	movs	r2, #0
 80088ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	2200      	movs	r2, #0
 80088d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088dc:	2200      	movs	r2, #0
 80088de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e4:	2200      	movs	r2, #0
 80088e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	4619      	mov	r1, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	330c      	adds	r3, #12
 80088f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008900:	f7fb ffec 	bl	80048dc <HAL_DMA_Start_IT>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890e:	f043 0210 	orr.w	r2, r3, #16
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e023      	b.n	800896a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	d007      	beq.n	8008940 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800893e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0220 	orr.w	r2, r2, #32
 8008956:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0202 	orr.w	r2, r2, #2
 8008966:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	08008d15 	.word	0x08008d15
 8008978:	08008bd9 	.word	0x08008bd9
 800897c:	08008d31 	.word	0x08008d31
 8008980:	08008c83 	.word	0x08008c83
 8008984:	08008d4d 	.word	0x08008d4d

08008988 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	099b      	lsrs	r3, r3, #6
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10f      	bne.n	80089cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	099b      	lsrs	r3, r3, #6
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
    return;
 80089ca:	e0d7      	b.n	8008b7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <HAL_SPI_IRQHandler+0x66>
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	09db      	lsrs	r3, r3, #7
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
    return;
 80089ec:	e0c6      	b.n	8008b7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	095b      	lsrs	r3, r3, #5
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10c      	bne.n	8008a14 <HAL_SPI_IRQHandler+0x8c>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	099b      	lsrs	r3, r3, #6
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80b4 	beq.w	8008b7c <HAL_SPI_IRQHandler+0x1f4>
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80ad 	beq.w	8008b7c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	099b      	lsrs	r3, r3, #6
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d023      	beq.n	8008a76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d011      	beq.n	8008a5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a3e:	f043 0204 	orr.w	r2, r3, #4
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	e00b      	b.n	8008a76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	613b      	str	r3, [r7, #16]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	693b      	ldr	r3, [r7, #16]
        return;
 8008a74:	e082      	b.n	8008b7c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d014      	beq.n	8008aac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a86:	f043 0201 	orr.w	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00c      	beq.n	8008ad2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008abc:	f043 0208 	orr.w	r2, r3, #8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60bb      	str	r3, [r7, #8]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04f      	beq.n	8008b7a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ae8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_SPI_IRQHandler+0x17e>
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d034      	beq.n	8008b70 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f022 0203 	bic.w	r2, r2, #3
 8008b14:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b22:	4a18      	ldr	r2, [pc, #96]	@ (8008b84 <HAL_SPI_IRQHandler+0x1fc>)
 8008b24:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fb ffa6 	bl	8004a7c <HAL_DMA_Abort_IT>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d016      	beq.n	8008b78 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b84 <HAL_SPI_IRQHandler+0x1fc>)
 8008b50:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fb ff90 	bl	8004a7c <HAL_DMA_Abort_IT>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008b6e:	e003      	b.n	8008b78 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f827 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008b76:	e000      	b.n	8008b7a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008b78:	bf00      	nop
    return;
 8008b7a:	bf00      	nop
  }
}
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	08008d8d 	.word	0x08008d8d

08008b88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be6:	f7fa ffdb 	bl	8003ba0 <HAL_GetTick>
 8008bea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfa:	d03c      	beq.n	8008c76 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0220 	bic.w	r2, r2, #32
 8008c0a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10d      	bne.n	8008c30 <SPI_DMAReceiveCplt+0x58>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c1c:	d108      	bne.n	8008c30 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f022 0203 	bic.w	r2, r2, #3
 8008c2c:	605a      	str	r2, [r3, #4]
 8008c2e:	e007      	b.n	8008c40 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	2164      	movs	r1, #100	@ 0x64
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f9d5 	bl	8008ff4 <SPI_EndRxTransaction>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff ffa8 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c74:	e002      	b.n	8008c7c <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff ff86 	bl	8008b88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c90:	f7fa ff86 	bl	8003ba0 <HAL_GetTick>
 8008c94:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ca4:	d030      	beq.n	8008d08 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0220 	bic.w	r2, r2, #32
 8008cb4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	2164      	movs	r1, #100	@ 0x64
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fa16 	bl	80090ec <SPI_EndRxTxTransaction>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cca:	f043 0220 	orr.w	r2, r3, #32
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0203 	bic.w	r2, r2, #3
 8008ce0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff ff5f 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d06:	e002      	b.n	8008d0e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7f9 fc69 	bl	80025e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff ff3a 	bl	8008b9c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7ff ff36 	bl	8008bb0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0203 	bic.w	r2, r2, #3
 8008d68:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d6e:	f043 0210 	orr.w	r2, r3, #16
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff ff20 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff ff0b 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008dc8:	f7fa feea 	bl	8003ba0 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dd8:	f7fa fee2 	bl	8003ba0 <HAL_GetTick>
 8008ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dde:	4b39      	ldr	r3, [pc, #228]	@ (8008ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	015b      	lsls	r3, r3, #5
 8008de4:	0d1b      	lsrs	r3, r3, #20
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	fb02 f303 	mul.w	r3, r2, r3
 8008dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dee:	e055      	b.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d051      	beq.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008df8:	f7fa fed2 	bl	8003ba0 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d902      	bls.n	8008e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d13d      	bne.n	8008e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e26:	d111      	bne.n	8008e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e30:	d004      	beq.n	8008e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e3a:	d107      	bne.n	8008e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e54:	d10f      	bne.n	8008e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e018      	b.n	8008ebc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	e002      	b.n	8008e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d19a      	bne.n	8008df0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000000 	.word	0x20000000

08008ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08a      	sub	sp, #40	@ 0x28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008eda:	f7fa fe61 	bl	8003ba0 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008eea:	f7fa fe59 	bl	8003ba0 <HAL_GetTick>
 8008eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8008ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	00da      	lsls	r2, r3, #3
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	0d1b      	lsrs	r3, r3, #20
 8008f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f0a:	fb02 f303 	mul.w	r3, r2, r3
 8008f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f10:	e061      	b.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f18:	d107      	bne.n	8008f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d051      	beq.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f32:	f7fa fe35 	bl	8003ba0 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d902      	bls.n	8008f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d13d      	bne.n	8008fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f60:	d111      	bne.n	8008f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f6a:	d004      	beq.n	8008f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f74:	d107      	bne.n	8008f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f8e:	d10f      	bne.n	8008fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e011      	b.n	8008fe8 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fce:	e002      	b.n	8008fd6 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d195      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3728      	adds	r7, #40	@ 0x28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20000000 	.word	0x20000000

08008ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009008:	d111      	bne.n	800902e <SPI_EndRxTransaction+0x3a>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009012:	d004      	beq.n	800901e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800901c:	d107      	bne.n	800902e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800902c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009036:	d112      	bne.n	800905e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	2180      	movs	r1, #128	@ 0x80
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff feb8 	bl	8008db8 <SPI_WaitFlagStateUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d021      	beq.n	8009092 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009052:	f043 0220 	orr.w	r2, r3, #32
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e03d      	b.n	80090da <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800905e:	4b21      	ldr	r3, [pc, #132]	@ (80090e4 <SPI_EndRxTransaction+0xf0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a21      	ldr	r2, [pc, #132]	@ (80090e8 <SPI_EndRxTransaction+0xf4>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	0d5b      	lsrs	r3, r3, #21
 800906a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	3b01      	subs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908a:	2b80      	cmp	r3, #128	@ 0x80
 800908c:	d0f2      	beq.n	8009074 <SPI_EndRxTransaction+0x80>
 800908e:	e000      	b.n	8009092 <SPI_EndRxTransaction+0x9e>
        break;
 8009090:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800909a:	d11d      	bne.n	80090d8 <SPI_EndRxTransaction+0xe4>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a4:	d004      	beq.n	80090b0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ae:	d113      	bne.n	80090d8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7ff ff03 	bl	8008ec8 <SPI_WaitFifoStateUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090cc:	f043 0220 	orr.w	r2, r3, #32
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e000      	b.n	80090da <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000000 	.word	0x20000000
 80090e8:	165e9f81 	.word	0x165e9f81

080090ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2200      	movs	r2, #0
 8009100:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fedf 	bl	8008ec8 <SPI_WaitFifoStateUntilTimeout>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009114:	f043 0220 	orr.w	r2, r3, #32
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e046      	b.n	80091ae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009120:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <SPI_EndRxTxTransaction+0xcc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a25      	ldr	r2, [pc, #148]	@ (80091bc <SPI_EndRxTxTransaction+0xd0>)
 8009126:	fba2 2303 	umull	r2, r3, r2, r3
 800912a:	0d5b      	lsrs	r3, r3, #21
 800912c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009130:	fb02 f303 	mul.w	r3, r2, r3
 8009134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800913e:	d112      	bne.n	8009166 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	2180      	movs	r1, #128	@ 0x80
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fe34 	bl	8008db8 <SPI_WaitFlagStateUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e023      	b.n	80091ae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3b01      	subs	r3, #1
 8009170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917c:	2b80      	cmp	r3, #128	@ 0x80
 800917e:	d0f2      	beq.n	8009166 <SPI_EndRxTxTransaction+0x7a>
 8009180:	e000      	b.n	8009184 <SPI_EndRxTxTransaction+0x98>
        break;
 8009182:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7ff fe99 	bl	8008ec8 <SPI_WaitFifoStateUntilTimeout>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a0:	f043 0220 	orr.w	r2, r3, #32
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e000      	b.n	80091ae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000000 	.word	0x20000000
 80091bc:	165e9f81 	.word	0x165e9f81

080091c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e049      	b.n	8009266 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d106      	bne.n	80091ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7fa f8f8 	bl	80033dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f000 fb6e 	bl	80098e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e049      	b.n	8009314 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f841 	bl	800931c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f000 fb17 	bl	80098e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_TIM_PWM_Start+0x24>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	e03c      	b.n	80093ce <HAL_TIM_PWM_Start+0x9e>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b04      	cmp	r3, #4
 8009358:	d109      	bne.n	800936e <HAL_TIM_PWM_Start+0x3e>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b01      	cmp	r3, #1
 8009364:	bf14      	ite	ne
 8009366:	2301      	movne	r3, #1
 8009368:	2300      	moveq	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	e02f      	b.n	80093ce <HAL_TIM_PWM_Start+0x9e>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b08      	cmp	r3, #8
 8009372:	d109      	bne.n	8009388 <HAL_TIM_PWM_Start+0x58>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b01      	cmp	r3, #1
 800937e:	bf14      	ite	ne
 8009380:	2301      	movne	r3, #1
 8009382:	2300      	moveq	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	e022      	b.n	80093ce <HAL_TIM_PWM_Start+0x9e>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b0c      	cmp	r3, #12
 800938c:	d109      	bne.n	80093a2 <HAL_TIM_PWM_Start+0x72>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b01      	cmp	r3, #1
 8009398:	bf14      	ite	ne
 800939a:	2301      	movne	r3, #1
 800939c:	2300      	moveq	r3, #0
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	e015      	b.n	80093ce <HAL_TIM_PWM_Start+0x9e>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d109      	bne.n	80093bc <HAL_TIM_PWM_Start+0x8c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	e008      	b.n	80093ce <HAL_TIM_PWM_Start+0x9e>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	bf14      	ite	ne
 80093c8:	2301      	movne	r3, #1
 80093ca:	2300      	moveq	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e092      	b.n	80094fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_PWM_Start+0xb6>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093e4:	e023      	b.n	800942e <HAL_TIM_PWM_Start+0xfe>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_PWM_Start+0xc6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093f4:	e01b      	b.n	800942e <HAL_TIM_PWM_Start+0xfe>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_PWM_Start+0xd6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009404:	e013      	b.n	800942e <HAL_TIM_PWM_Start+0xfe>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b0c      	cmp	r3, #12
 800940a:	d104      	bne.n	8009416 <HAL_TIM_PWM_Start+0xe6>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009414:	e00b      	b.n	800942e <HAL_TIM_PWM_Start+0xfe>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b10      	cmp	r3, #16
 800941a:	d104      	bne.n	8009426 <HAL_TIM_PWM_Start+0xf6>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009424:	e003      	b.n	800942e <HAL_TIM_PWM_Start+0xfe>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2201      	movs	r2, #1
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fdf0 	bl	800a01c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a30      	ldr	r2, [pc, #192]	@ (8009504 <HAL_TIM_PWM_Start+0x1d4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d004      	beq.n	8009450 <HAL_TIM_PWM_Start+0x120>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a2f      	ldr	r2, [pc, #188]	@ (8009508 <HAL_TIM_PWM_Start+0x1d8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d101      	bne.n	8009454 <HAL_TIM_PWM_Start+0x124>
 8009450:	2301      	movs	r3, #1
 8009452:	e000      	b.n	8009456 <HAL_TIM_PWM_Start+0x126>
 8009454:	2300      	movs	r3, #0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009468:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a25      	ldr	r2, [pc, #148]	@ (8009504 <HAL_TIM_PWM_Start+0x1d4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d022      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800947c:	d01d      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a22      	ldr	r2, [pc, #136]	@ (800950c <HAL_TIM_PWM_Start+0x1dc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d018      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a20      	ldr	r2, [pc, #128]	@ (8009510 <HAL_TIM_PWM_Start+0x1e0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d013      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a1f      	ldr	r2, [pc, #124]	@ (8009514 <HAL_TIM_PWM_Start+0x1e4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00e      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a19      	ldr	r2, [pc, #100]	@ (8009508 <HAL_TIM_PWM_Start+0x1d8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d009      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009518 <HAL_TIM_PWM_Start+0x1e8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d004      	beq.n	80094ba <HAL_TIM_PWM_Start+0x18a>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a19      	ldr	r2, [pc, #100]	@ (800951c <HAL_TIM_PWM_Start+0x1ec>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d115      	bne.n	80094e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	4b17      	ldr	r3, [pc, #92]	@ (8009520 <HAL_TIM_PWM_Start+0x1f0>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b06      	cmp	r3, #6
 80094ca:	d015      	beq.n	80094f8 <HAL_TIM_PWM_Start+0x1c8>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094d2:	d011      	beq.n	80094f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e4:	e008      	b.n	80094f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0201 	orr.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	e000      	b.n	80094fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	40000400 	.word	0x40000400
 8009510:	40000800 	.word	0x40000800
 8009514:	40000c00 	.word	0x40000c00
 8009518:	40014000 	.word	0x40014000
 800951c:	40001800 	.word	0x40001800
 8009520:	00010007 	.word	0x00010007

08009524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800953e:	2302      	movs	r3, #2
 8009540:	e0ff      	b.n	8009742 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b14      	cmp	r3, #20
 800954e:	f200 80f0 	bhi.w	8009732 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	080095ad 	.word	0x080095ad
 800955c:	08009733 	.word	0x08009733
 8009560:	08009733 	.word	0x08009733
 8009564:	08009733 	.word	0x08009733
 8009568:	080095ed 	.word	0x080095ed
 800956c:	08009733 	.word	0x08009733
 8009570:	08009733 	.word	0x08009733
 8009574:	08009733 	.word	0x08009733
 8009578:	0800962f 	.word	0x0800962f
 800957c:	08009733 	.word	0x08009733
 8009580:	08009733 	.word	0x08009733
 8009584:	08009733 	.word	0x08009733
 8009588:	0800966f 	.word	0x0800966f
 800958c:	08009733 	.word	0x08009733
 8009590:	08009733 	.word	0x08009733
 8009594:	08009733 	.word	0x08009733
 8009598:	080096b1 	.word	0x080096b1
 800959c:	08009733 	.word	0x08009733
 80095a0:	08009733 	.word	0x08009733
 80095a4:	08009733 	.word	0x08009733
 80095a8:	080096f1 	.word	0x080096f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fa3a 	bl	8009a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0208 	orr.w	r2, r2, #8
 80095c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0204 	bic.w	r2, r2, #4
 80095d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6999      	ldr	r1, [r3, #24]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	619a      	str	r2, [r3, #24]
      break;
 80095ea:	e0a5      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fa8c 	bl	8009b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699a      	ldr	r2, [r3, #24]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6999      	ldr	r1, [r3, #24]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	021a      	lsls	r2, r3, #8
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	619a      	str	r2, [r3, #24]
      break;
 800962c:	e084      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fae3 	bl	8009c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0208 	orr.w	r2, r2, #8
 8009648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0204 	bic.w	r2, r2, #4
 8009658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69d9      	ldr	r1, [r3, #28]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	61da      	str	r2, [r3, #28]
      break;
 800966c:	e064      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fb39 	bl	8009cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69da      	ldr	r2, [r3, #28]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69d9      	ldr	r1, [r3, #28]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	021a      	lsls	r2, r3, #8
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	61da      	str	r2, [r3, #28]
      break;
 80096ae:	e043      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fb70 	bl	8009d9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0208 	orr.w	r2, r2, #8
 80096ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0204 	bic.w	r2, r2, #4
 80096da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80096ee:	e023      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fba2 	bl	8009e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800970a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800971a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	021a      	lsls	r2, r3, #8
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009730:	e002      	b.n	8009738 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	75fb      	strb	r3, [r7, #23]
      break;
 8009736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop

0800974c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009760:	2b01      	cmp	r3, #1
 8009762:	d101      	bne.n	8009768 <HAL_TIM_ConfigClockSource+0x1c>
 8009764:	2302      	movs	r3, #2
 8009766:	e0b4      	b.n	80098d2 <HAL_TIM_ConfigClockSource+0x186>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	4b56      	ldr	r3, [pc, #344]	@ (80098dc <HAL_TIM_ConfigClockSource+0x190>)
 8009784:	4013      	ands	r3, r2
 8009786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800978e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a0:	d03e      	beq.n	8009820 <HAL_TIM_ConfigClockSource+0xd4>
 80097a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a6:	f200 8087 	bhi.w	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ae:	f000 8086 	beq.w	80098be <HAL_TIM_ConfigClockSource+0x172>
 80097b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097b6:	d87f      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097b8:	2b70      	cmp	r3, #112	@ 0x70
 80097ba:	d01a      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0xa6>
 80097bc:	2b70      	cmp	r3, #112	@ 0x70
 80097be:	d87b      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097c0:	2b60      	cmp	r3, #96	@ 0x60
 80097c2:	d050      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x11a>
 80097c4:	2b60      	cmp	r3, #96	@ 0x60
 80097c6:	d877      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097c8:	2b50      	cmp	r3, #80	@ 0x50
 80097ca:	d03c      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0xfa>
 80097cc:	2b50      	cmp	r3, #80	@ 0x50
 80097ce:	d873      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097d0:	2b40      	cmp	r3, #64	@ 0x40
 80097d2:	d058      	beq.n	8009886 <HAL_TIM_ConfigClockSource+0x13a>
 80097d4:	2b40      	cmp	r3, #64	@ 0x40
 80097d6:	d86f      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097d8:	2b30      	cmp	r3, #48	@ 0x30
 80097da:	d064      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x15a>
 80097dc:	2b30      	cmp	r3, #48	@ 0x30
 80097de:	d86b      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d060      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x15a>
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d867      	bhi.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d05c      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x15a>
 80097ec:	2b10      	cmp	r3, #16
 80097ee:	d05a      	beq.n	80098a6 <HAL_TIM_ConfigClockSource+0x15a>
 80097f0:	e062      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009802:	f000 fbeb 	bl	8009fdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	609a      	str	r2, [r3, #8]
      break;
 800981e:	e04f      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009830:	f000 fbd4 	bl	8009fdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009842:	609a      	str	r2, [r3, #8]
      break;
 8009844:	e03c      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009852:	461a      	mov	r2, r3
 8009854:	f000 fb48 	bl	8009ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2150      	movs	r1, #80	@ 0x50
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fba1 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009864:	e02c      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009872:	461a      	mov	r2, r3
 8009874:	f000 fb67 	bl	8009f46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2160      	movs	r1, #96	@ 0x60
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fb91 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009884:	e01c      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009892:	461a      	mov	r2, r3
 8009894:	f000 fb28 	bl	8009ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2140      	movs	r1, #64	@ 0x40
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fb81 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 80098a4:	e00c      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4619      	mov	r1, r3
 80098b0:	4610      	mov	r0, r2
 80098b2:	f000 fb78 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 80098b6:	e003      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	73fb      	strb	r3, [r7, #15]
      break;
 80098bc:	e000      	b.n	80098c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	fffeff88 	.word	0xfffeff88

080098e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a43      	ldr	r2, [pc, #268]	@ (8009a00 <TIM_Base_SetConfig+0x120>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d013      	beq.n	8009920 <TIM_Base_SetConfig+0x40>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098fe:	d00f      	beq.n	8009920 <TIM_Base_SetConfig+0x40>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a40      	ldr	r2, [pc, #256]	@ (8009a04 <TIM_Base_SetConfig+0x124>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d00b      	beq.n	8009920 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a3f      	ldr	r2, [pc, #252]	@ (8009a08 <TIM_Base_SetConfig+0x128>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d007      	beq.n	8009920 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a3e      	ldr	r2, [pc, #248]	@ (8009a0c <TIM_Base_SetConfig+0x12c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d003      	beq.n	8009920 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3d      	ldr	r2, [pc, #244]	@ (8009a10 <TIM_Base_SetConfig+0x130>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d108      	bne.n	8009932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a32      	ldr	r2, [pc, #200]	@ (8009a00 <TIM_Base_SetConfig+0x120>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d02b      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009940:	d027      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a2f      	ldr	r2, [pc, #188]	@ (8009a04 <TIM_Base_SetConfig+0x124>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d023      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a2e      	ldr	r2, [pc, #184]	@ (8009a08 <TIM_Base_SetConfig+0x128>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d01f      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2d      	ldr	r2, [pc, #180]	@ (8009a0c <TIM_Base_SetConfig+0x12c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d01b      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2c      	ldr	r2, [pc, #176]	@ (8009a10 <TIM_Base_SetConfig+0x130>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d017      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2b      	ldr	r2, [pc, #172]	@ (8009a14 <TIM_Base_SetConfig+0x134>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d013      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2a      	ldr	r2, [pc, #168]	@ (8009a18 <TIM_Base_SetConfig+0x138>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00f      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a29      	ldr	r2, [pc, #164]	@ (8009a1c <TIM_Base_SetConfig+0x13c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00b      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a28      	ldr	r2, [pc, #160]	@ (8009a20 <TIM_Base_SetConfig+0x140>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d007      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a27      	ldr	r2, [pc, #156]	@ (8009a24 <TIM_Base_SetConfig+0x144>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d003      	beq.n	8009992 <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a26      	ldr	r2, [pc, #152]	@ (8009a28 <TIM_Base_SetConfig+0x148>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d108      	bne.n	80099a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	689a      	ldr	r2, [r3, #8]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009a00 <TIM_Base_SetConfig+0x120>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d003      	beq.n	80099d2 <TIM_Base_SetConfig+0xf2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a10      	ldr	r2, [pc, #64]	@ (8009a10 <TIM_Base_SetConfig+0x130>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d103      	bne.n	80099da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	691a      	ldr	r2, [r3, #16]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f043 0204 	orr.w	r2, r3, #4
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40010000 	.word	0x40010000
 8009a04:	40000400 	.word	0x40000400
 8009a08:	40000800 	.word	0x40000800
 8009a0c:	40000c00 	.word	0x40000c00
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800
 8009a20:	40001800 	.word	0x40001800
 8009a24:	40001c00 	.word	0x40001c00
 8009a28:	40002000 	.word	0x40002000

08009a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	f023 0201 	bic.w	r2, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4b2b      	ldr	r3, [pc, #172]	@ (8009b04 <TIM_OC1_SetConfig+0xd8>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0302 	bic.w	r3, r3, #2
 8009a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a21      	ldr	r2, [pc, #132]	@ (8009b08 <TIM_OC1_SetConfig+0xdc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_OC1_SetConfig+0x64>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a20      	ldr	r2, [pc, #128]	@ (8009b0c <TIM_OC1_SetConfig+0xe0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10c      	bne.n	8009aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f023 0308 	bic.w	r3, r3, #8
 8009a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f023 0304 	bic.w	r3, r3, #4
 8009aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a16      	ldr	r2, [pc, #88]	@ (8009b08 <TIM_OC1_SetConfig+0xdc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_OC1_SetConfig+0x8e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a15      	ldr	r2, [pc, #84]	@ (8009b0c <TIM_OC1_SetConfig+0xe0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d111      	bne.n	8009ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	621a      	str	r2, [r3, #32]
}
 8009af8:	bf00      	nop
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	fffeff8f 	.word	0xfffeff8f
 8009b08:	40010000 	.word	0x40010000
 8009b0c:	40010400 	.word	0x40010400

08009b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	f023 0210 	bic.w	r2, r3, #16
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8009bf4 <TIM_OC2_SetConfig+0xe4>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0320 	bic.w	r3, r3, #32
 8009b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a23      	ldr	r2, [pc, #140]	@ (8009bf8 <TIM_OC2_SetConfig+0xe8>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d003      	beq.n	8009b78 <TIM_OC2_SetConfig+0x68>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a22      	ldr	r2, [pc, #136]	@ (8009bfc <TIM_OC2_SetConfig+0xec>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d10d      	bne.n	8009b94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a18      	ldr	r2, [pc, #96]	@ (8009bf8 <TIM_OC2_SetConfig+0xe8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d003      	beq.n	8009ba4 <TIM_OC2_SetConfig+0x94>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a17      	ldr	r2, [pc, #92]	@ (8009bfc <TIM_OC2_SetConfig+0xec>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d113      	bne.n	8009bcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	621a      	str	r2, [r3, #32]
}
 8009be6:	bf00      	nop
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	feff8fff 	.word	0xfeff8fff
 8009bf8:	40010000 	.word	0x40010000
 8009bfc:	40010400 	.word	0x40010400

08009c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce0 <TIM_OC3_SetConfig+0xe0>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0303 	bic.w	r3, r3, #3
 8009c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a22      	ldr	r2, [pc, #136]	@ (8009ce4 <TIM_OC3_SetConfig+0xe4>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d003      	beq.n	8009c66 <TIM_OC3_SetConfig+0x66>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a21      	ldr	r2, [pc, #132]	@ (8009ce8 <TIM_OC3_SetConfig+0xe8>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d10d      	bne.n	8009c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a17      	ldr	r2, [pc, #92]	@ (8009ce4 <TIM_OC3_SetConfig+0xe4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d003      	beq.n	8009c92 <TIM_OC3_SetConfig+0x92>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a16      	ldr	r2, [pc, #88]	@ (8009ce8 <TIM_OC3_SetConfig+0xe8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d113      	bne.n	8009cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	621a      	str	r2, [r3, #32]
}
 8009cd4:	bf00      	nop
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	fffeff8f 	.word	0xfffeff8f
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40010400 	.word	0x40010400

08009cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4b1e      	ldr	r3, [pc, #120]	@ (8009d90 <TIM_OC4_SetConfig+0xa4>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	021b      	lsls	r3, r3, #8
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	031b      	lsls	r3, r3, #12
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a13      	ldr	r2, [pc, #76]	@ (8009d94 <TIM_OC4_SetConfig+0xa8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_OC4_SetConfig+0x68>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a12      	ldr	r2, [pc, #72]	@ (8009d98 <TIM_OC4_SetConfig+0xac>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d109      	bne.n	8009d68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	019b      	lsls	r3, r3, #6
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	621a      	str	r2, [r3, #32]
}
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	feff8fff 	.word	0xfeff8fff
 8009d94:	40010000 	.word	0x40010000
 8009d98:	40010400 	.word	0x40010400

08009d9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009e34 <TIM_OC5_SetConfig+0x98>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	041b      	lsls	r3, r3, #16
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a12      	ldr	r2, [pc, #72]	@ (8009e38 <TIM_OC5_SetConfig+0x9c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d003      	beq.n	8009dfa <TIM_OC5_SetConfig+0x5e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a11      	ldr	r2, [pc, #68]	@ (8009e3c <TIM_OC5_SetConfig+0xa0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d109      	bne.n	8009e0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	621a      	str	r2, [r3, #32]
}
 8009e28:	bf00      	nop
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	fffeff8f 	.word	0xfffeff8f
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40010400 	.word	0x40010400

08009e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8009edc <TIM_OC6_SetConfig+0x9c>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a13      	ldr	r2, [pc, #76]	@ (8009ee0 <TIM_OC6_SetConfig+0xa0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <TIM_OC6_SetConfig+0x60>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ee4 <TIM_OC6_SetConfig+0xa4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d109      	bne.n	8009eb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	621a      	str	r2, [r3, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	feff8fff 	.word	0xfeff8fff
 8009ee0:	40010000 	.word	0x40010000
 8009ee4:	40010400 	.word	0x40010400

08009ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0201 	bic.w	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f023 030a 	bic.w	r3, r3, #10
 8009f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	f023 0210 	bic.w	r2, r3, #16
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	031b      	lsls	r3, r3, #12
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	621a      	str	r2, [r3, #32]
}
 8009f9a:	bf00      	nop
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	f043 0307 	orr.w	r3, r3, #7
 8009fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	609a      	str	r2, [r3, #8]
}
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	021a      	lsls	r2, r3, #8
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	4313      	orrs	r3, r2
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4313      	orrs	r3, r2
 800a008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	609a      	str	r2, [r3, #8]
}
 800a010:	bf00      	nop
 800a012:	371c      	adds	r7, #28
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	f003 031f 	and.w	r3, r3, #31
 800a02e:	2201      	movs	r2, #1
 800a030:	fa02 f303 	lsl.w	r3, r2, r3
 800a034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1a      	ldr	r2, [r3, #32]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	43db      	mvns	r3, r3
 800a03e:	401a      	ands	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a1a      	ldr	r2, [r3, #32]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f003 031f 	and.w	r3, r3, #31
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	fa01 f303 	lsl.w	r3, r1, r3
 800a054:	431a      	orrs	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	621a      	str	r2, [r3, #32]
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
	...

0800a068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e06d      	b.n	800a15c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a30      	ldr	r2, [pc, #192]	@ (800a168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d004      	beq.n	800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a2f      	ldr	r2, [pc, #188]	@ (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d108      	bne.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a20      	ldr	r2, [pc, #128]	@ (800a168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d022      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0f2:	d01d      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d018      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a1c      	ldr	r2, [pc, #112]	@ (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d013      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1a      	ldr	r2, [pc, #104]	@ (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d00e      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a15      	ldr	r2, [pc, #84]	@ (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d009      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a16      	ldr	r2, [pc, #88]	@ (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d004      	beq.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a15      	ldr	r2, [pc, #84]	@ (800a180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10c      	bne.n	800a14a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010400 	.word	0x40010400
 800a170:	40000400 	.word	0x40000400
 800a174:	40000800 	.word	0x40000800
 800a178:	40000c00 	.word	0x40000c00
 800a17c:	40014000 	.word	0x40014000
 800a180:	40001800 	.word	0x40001800

0800a184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e040      	b.n	800a218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d106      	bne.n	800a1ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7f9 f9c2 	bl	8003530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2224      	movs	r2, #36	@ 0x24
 800a1b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fe50 	bl	800ae70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fbe9 	bl	800a9a8 <UART_SetConfig>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e01b      	b.n	800a218 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fecf 	bl	800afb4 <UART_CheckIdleState>
 800a216:	4603      	mov	r3, r0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b09a      	sub	sp, #104	@ 0x68
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a23c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a246:	657b      	str	r3, [r7, #84]	@ 0x54
 800a248:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a24c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	663b      	str	r3, [r7, #96]	@ 0x60
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a27a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e5      	bne.n	800a25a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a292:	2b01      	cmp	r3, #1
 800a294:	d118      	bne.n	800a2c8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f023 0310 	bic.w	r3, r3, #16
 800a2aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d2:	2b40      	cmp	r3, #64	@ 0x40
 800a2d4:	d137      	bne.n	800a346 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2f6:	61ba      	str	r2, [r7, #24]
 800a2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6979      	ldr	r1, [r7, #20]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	613b      	str	r3, [r7, #16]
   return(result);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e5      	bne.n	800a2d6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d019      	beq.n	800a346 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a316:	2200      	movs	r2, #0
 800a318:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fa fb3c 	bl	800499c <HAL_DMA_Abort>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00d      	beq.n	800a346 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fa fd50 	bl	8004dd4 <HAL_DMA_GetError>
 800a334:	4603      	mov	r3, r0
 800a336:	2b20      	cmp	r3, #32
 800a338:	d105      	bne.n	800a346 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2210      	movs	r2, #16
 800a33e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e017      	b.n	800a376 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	220f      	movs	r2, #15
 800a354:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0208 	orr.w	r2, r2, #8
 800a364:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3768      	adds	r7, #104	@ 0x68
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b0ba      	sub	sp, #232	@ 0xe8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a3aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a3b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d115      	bne.n	800a3e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00f      	beq.n	800a3e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3cc:	f003 0320 	and.w	r3, r3, #32
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d009      	beq.n	800a3e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 82b1 	beq.w	800a940 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
      }
      return;
 800a3e6:	e2ab      	b.n	800a940 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a3e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 8117 	beq.w	800a620 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a3f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a3fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a402:	4b85      	ldr	r3, [pc, #532]	@ (800a618 <HAL_UART_IRQHandler+0x298>)
 800a404:	4013      	ands	r3, r2
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 810a 	beq.w	800a620 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d011      	beq.n	800a43c <HAL_UART_IRQHandler+0xbc>
 800a418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2201      	movs	r2, #1
 800a42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a432:	f043 0201 	orr.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	d011      	beq.n	800a46c <HAL_UART_IRQHandler+0xec>
 800a448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2202      	movs	r2, #2
 800a45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a462:	f043 0204 	orr.w	r2, r3, #4
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d011      	beq.n	800a49c <HAL_UART_IRQHandler+0x11c>
 800a478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00b      	beq.n	800a49c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2204      	movs	r2, #4
 800a48a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a492:	f043 0202 	orr.w	r2, r3, #2
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d017      	beq.n	800a4d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ac:	f003 0320 	and.w	r3, r3, #32
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ce:	f043 0208 	orr.w	r2, r3, #8
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d012      	beq.n	800a50a <HAL_UART_IRQHandler+0x18a>
 800a4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00c      	beq.n	800a50a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a500:	f043 0220 	orr.w	r2, r3, #32
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8217 	beq.w	800a944 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00d      	beq.n	800a53e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d007      	beq.n	800a53e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a544:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a552:	2b40      	cmp	r3, #64	@ 0x40
 800a554:	d005      	beq.n	800a562 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a55a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04f      	beq.n	800a602 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 feb0 	bl	800b2c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a572:	2b40      	cmp	r3, #64	@ 0x40
 800a574:	d141      	bne.n	800a5fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a58c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3308      	adds	r3, #8
 800a59e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1d9      	bne.n	800a576 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d013      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ce:	4a13      	ldr	r2, [pc, #76]	@ (800a61c <HAL_UART_IRQHandler+0x29c>)
 800a5d0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fa fa50 	bl	8004a7c <HAL_DMA_Abort_IT>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d017      	beq.n	800a612 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f0:	e00f      	b.n	800a612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9ce 	bl	800a994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f8:	e00b      	b.n	800a612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9ca 	bl	800a994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a600:	e007      	b.n	800a612 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9c6 	bl	800a994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a610:	e198      	b.n	800a944 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a612:	bf00      	nop
    return;
 800a614:	e196      	b.n	800a944 <HAL_UART_IRQHandler+0x5c4>
 800a616:	bf00      	nop
 800a618:	04000120 	.word	0x04000120
 800a61c:	0800b5df 	.word	0x0800b5df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a624:	2b01      	cmp	r3, #1
 800a626:	f040 8166 	bne.w	800a8f6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 815f 	beq.w	800a8f6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a63c:	f003 0310 	and.w	r3, r3, #16
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8158 	beq.w	800a8f6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2210      	movs	r2, #16
 800a64c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a658:	2b40      	cmp	r3, #64	@ 0x40
 800a65a:	f040 80d0 	bne.w	800a7fe <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a66a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80ab 	beq.w	800a7ca <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a67a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a67e:	429a      	cmp	r2, r3
 800a680:	f080 80a3 	bcs.w	800a7ca <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a68a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a698:	f000 8086 	beq.w	800a7a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a6b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a6c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1da      	bne.n	800a69c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6f8:	f023 0301 	bic.w	r3, r3, #1
 800a6fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3308      	adds	r3, #8
 800a706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a70a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a70e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a71c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e1      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3308      	adds	r3, #8
 800a728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3308      	adds	r3, #8
 800a742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a74c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e3      	bne.n	800a722 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a778:	f023 0310 	bic.w	r3, r3, #16
 800a77c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a78a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a78c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e4      	bne.n	800a768 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fa f8fa 	bl	800499c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7f7 fec6 	bl	8002554 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a7c8:	e0be      	b.n	800a948 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a7d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	f040 80b7 	bne.w	800a948 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e4:	f040 80b0 	bne.w	800a948 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7f7 feac 	bl	8002554 <HAL_UARTEx_RxEventCallback>
      return;
 800a7fc:	e0a4      	b.n	800a948 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 8096 	beq.w	800a94c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 8091 	beq.w	800a94c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a83e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a84c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a84e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e4      	bne.n	800a82a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3308      	adds	r3, #8
 800a866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	623b      	str	r3, [r7, #32]
   return(result);
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3308      	adds	r3, #8
 800a880:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a884:	633a      	str	r2, [r7, #48]	@ 0x30
 800a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a88a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e3      	bne.n	800a860 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f023 0310 	bic.w	r3, r3, #16
 800a8c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	69b9      	ldr	r1, [r7, #24]
 800a8d4:	69fa      	ldr	r2, [r7, #28]
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	617b      	str	r3, [r7, #20]
   return(result);
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e4      	bne.n	800a8ac <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7f7 fe30 	bl	8002554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8f4:	e02a      	b.n	800a94c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00e      	beq.n	800a920 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01c      	beq.n	800a950 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
    }
    return;
 800a91e:	e017      	b.n	800a950 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d012      	beq.n	800a952 <HAL_UART_IRQHandler+0x5d2>
 800a92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00c      	beq.n	800a952 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fe62 	bl	800b602 <UART_EndTransmit_IT>
    return;
 800a93e:	e008      	b.n	800a952 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a940:	bf00      	nop
 800a942:	e006      	b.n	800a952 <HAL_UART_IRQHandler+0x5d2>
    return;
 800a944:	bf00      	nop
 800a946:	e004      	b.n	800a952 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a948:	bf00      	nop
 800a94a:	e002      	b.n	800a952 <HAL_UART_IRQHandler+0x5d2>
      return;
 800a94c:	bf00      	nop
 800a94e:	e000      	b.n	800a952 <HAL_UART_IRQHandler+0x5d2>
    return;
 800a950:	bf00      	nop
  }

}
 800a952:	37e8      	adds	r7, #232	@ 0xe8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4ba6      	ldr	r3, [pc, #664]	@ (800ac6c <UART_SetConfig+0x2c4>)
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	6812      	ldr	r2, [r2, #0]
 800a9da:	6979      	ldr	r1, [r7, #20]
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	430a      	orrs	r2, r1
 800aa18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a94      	ldr	r2, [pc, #592]	@ (800ac70 <UART_SetConfig+0x2c8>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d120      	bne.n	800aa66 <UART_SetConfig+0xbe>
 800aa24:	4b93      	ldr	r3, [pc, #588]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800aa26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d816      	bhi.n	800aa60 <UART_SetConfig+0xb8>
 800aa32:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0x90>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa49 	.word	0x0800aa49
 800aa3c:	0800aa55 	.word	0x0800aa55
 800aa40:	0800aa4f 	.word	0x0800aa4f
 800aa44:	0800aa5b 	.word	0x0800aa5b
 800aa48:	2301      	movs	r3, #1
 800aa4a:	77fb      	strb	r3, [r7, #31]
 800aa4c:	e150      	b.n	800acf0 <UART_SetConfig+0x348>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	77fb      	strb	r3, [r7, #31]
 800aa52:	e14d      	b.n	800acf0 <UART_SetConfig+0x348>
 800aa54:	2304      	movs	r3, #4
 800aa56:	77fb      	strb	r3, [r7, #31]
 800aa58:	e14a      	b.n	800acf0 <UART_SetConfig+0x348>
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	77fb      	strb	r3, [r7, #31]
 800aa5e:	e147      	b.n	800acf0 <UART_SetConfig+0x348>
 800aa60:	2310      	movs	r3, #16
 800aa62:	77fb      	strb	r3, [r7, #31]
 800aa64:	e144      	b.n	800acf0 <UART_SetConfig+0x348>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a83      	ldr	r2, [pc, #524]	@ (800ac78 <UART_SetConfig+0x2d0>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d132      	bne.n	800aad6 <UART_SetConfig+0x12e>
 800aa70:	4b80      	ldr	r3, [pc, #512]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800aa72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa76:	f003 030c 	and.w	r3, r3, #12
 800aa7a:	2b0c      	cmp	r3, #12
 800aa7c:	d828      	bhi.n	800aad0 <UART_SetConfig+0x128>
 800aa7e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <UART_SetConfig+0xdc>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aab9 	.word	0x0800aab9
 800aa88:	0800aad1 	.word	0x0800aad1
 800aa8c:	0800aad1 	.word	0x0800aad1
 800aa90:	0800aad1 	.word	0x0800aad1
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800aad1 	.word	0x0800aad1
 800aa9c:	0800aad1 	.word	0x0800aad1
 800aaa0:	0800aad1 	.word	0x0800aad1
 800aaa4:	0800aabf 	.word	0x0800aabf
 800aaa8:	0800aad1 	.word	0x0800aad1
 800aaac:	0800aad1 	.word	0x0800aad1
 800aab0:	0800aad1 	.word	0x0800aad1
 800aab4:	0800aacb 	.word	0x0800aacb
 800aab8:	2300      	movs	r3, #0
 800aaba:	77fb      	strb	r3, [r7, #31]
 800aabc:	e118      	b.n	800acf0 <UART_SetConfig+0x348>
 800aabe:	2302      	movs	r3, #2
 800aac0:	77fb      	strb	r3, [r7, #31]
 800aac2:	e115      	b.n	800acf0 <UART_SetConfig+0x348>
 800aac4:	2304      	movs	r3, #4
 800aac6:	77fb      	strb	r3, [r7, #31]
 800aac8:	e112      	b.n	800acf0 <UART_SetConfig+0x348>
 800aaca:	2308      	movs	r3, #8
 800aacc:	77fb      	strb	r3, [r7, #31]
 800aace:	e10f      	b.n	800acf0 <UART_SetConfig+0x348>
 800aad0:	2310      	movs	r3, #16
 800aad2:	77fb      	strb	r3, [r7, #31]
 800aad4:	e10c      	b.n	800acf0 <UART_SetConfig+0x348>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a68      	ldr	r2, [pc, #416]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d120      	bne.n	800ab22 <UART_SetConfig+0x17a>
 800aae0:	4b64      	ldr	r3, [pc, #400]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800aae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aaea:	2b30      	cmp	r3, #48	@ 0x30
 800aaec:	d013      	beq.n	800ab16 <UART_SetConfig+0x16e>
 800aaee:	2b30      	cmp	r3, #48	@ 0x30
 800aaf0:	d814      	bhi.n	800ab1c <UART_SetConfig+0x174>
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d009      	beq.n	800ab0a <UART_SetConfig+0x162>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d810      	bhi.n	800ab1c <UART_SetConfig+0x174>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <UART_SetConfig+0x15c>
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d006      	beq.n	800ab10 <UART_SetConfig+0x168>
 800ab02:	e00b      	b.n	800ab1c <UART_SetConfig+0x174>
 800ab04:	2300      	movs	r3, #0
 800ab06:	77fb      	strb	r3, [r7, #31]
 800ab08:	e0f2      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	77fb      	strb	r3, [r7, #31]
 800ab0e:	e0ef      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab10:	2304      	movs	r3, #4
 800ab12:	77fb      	strb	r3, [r7, #31]
 800ab14:	e0ec      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab16:	2308      	movs	r3, #8
 800ab18:	77fb      	strb	r3, [r7, #31]
 800ab1a:	e0e9      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e0e6      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a56      	ldr	r2, [pc, #344]	@ (800ac80 <UART_SetConfig+0x2d8>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d120      	bne.n	800ab6e <UART_SetConfig+0x1c6>
 800ab2c:	4b51      	ldr	r3, [pc, #324]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab36:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab38:	d013      	beq.n	800ab62 <UART_SetConfig+0x1ba>
 800ab3a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab3c:	d814      	bhi.n	800ab68 <UART_SetConfig+0x1c0>
 800ab3e:	2b80      	cmp	r3, #128	@ 0x80
 800ab40:	d009      	beq.n	800ab56 <UART_SetConfig+0x1ae>
 800ab42:	2b80      	cmp	r3, #128	@ 0x80
 800ab44:	d810      	bhi.n	800ab68 <UART_SetConfig+0x1c0>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <UART_SetConfig+0x1a8>
 800ab4a:	2b40      	cmp	r3, #64	@ 0x40
 800ab4c:	d006      	beq.n	800ab5c <UART_SetConfig+0x1b4>
 800ab4e:	e00b      	b.n	800ab68 <UART_SetConfig+0x1c0>
 800ab50:	2300      	movs	r3, #0
 800ab52:	77fb      	strb	r3, [r7, #31]
 800ab54:	e0cc      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab56:	2302      	movs	r3, #2
 800ab58:	77fb      	strb	r3, [r7, #31]
 800ab5a:	e0c9      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	77fb      	strb	r3, [r7, #31]
 800ab60:	e0c6      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab62:	2308      	movs	r3, #8
 800ab64:	77fb      	strb	r3, [r7, #31]
 800ab66:	e0c3      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab68:	2310      	movs	r3, #16
 800ab6a:	77fb      	strb	r3, [r7, #31]
 800ab6c:	e0c0      	b.n	800acf0 <UART_SetConfig+0x348>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a44      	ldr	r2, [pc, #272]	@ (800ac84 <UART_SetConfig+0x2dc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d125      	bne.n	800abc4 <UART_SetConfig+0x21c>
 800ab78:	4b3e      	ldr	r3, [pc, #248]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800ab7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab86:	d017      	beq.n	800abb8 <UART_SetConfig+0x210>
 800ab88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab8c:	d817      	bhi.n	800abbe <UART_SetConfig+0x216>
 800ab8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab92:	d00b      	beq.n	800abac <UART_SetConfig+0x204>
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab98:	d811      	bhi.n	800abbe <UART_SetConfig+0x216>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <UART_SetConfig+0x1fe>
 800ab9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aba2:	d006      	beq.n	800abb2 <UART_SetConfig+0x20a>
 800aba4:	e00b      	b.n	800abbe <UART_SetConfig+0x216>
 800aba6:	2300      	movs	r3, #0
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e0a1      	b.n	800acf0 <UART_SetConfig+0x348>
 800abac:	2302      	movs	r3, #2
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	e09e      	b.n	800acf0 <UART_SetConfig+0x348>
 800abb2:	2304      	movs	r3, #4
 800abb4:	77fb      	strb	r3, [r7, #31]
 800abb6:	e09b      	b.n	800acf0 <UART_SetConfig+0x348>
 800abb8:	2308      	movs	r3, #8
 800abba:	77fb      	strb	r3, [r7, #31]
 800abbc:	e098      	b.n	800acf0 <UART_SetConfig+0x348>
 800abbe:	2310      	movs	r3, #16
 800abc0:	77fb      	strb	r3, [r7, #31]
 800abc2:	e095      	b.n	800acf0 <UART_SetConfig+0x348>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac88 <UART_SetConfig+0x2e0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d125      	bne.n	800ac1a <UART_SetConfig+0x272>
 800abce:	4b29      	ldr	r3, [pc, #164]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800abd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800abd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abdc:	d017      	beq.n	800ac0e <UART_SetConfig+0x266>
 800abde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abe2:	d817      	bhi.n	800ac14 <UART_SetConfig+0x26c>
 800abe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abe8:	d00b      	beq.n	800ac02 <UART_SetConfig+0x25a>
 800abea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abee:	d811      	bhi.n	800ac14 <UART_SetConfig+0x26c>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <UART_SetConfig+0x254>
 800abf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf8:	d006      	beq.n	800ac08 <UART_SetConfig+0x260>
 800abfa:	e00b      	b.n	800ac14 <UART_SetConfig+0x26c>
 800abfc:	2301      	movs	r3, #1
 800abfe:	77fb      	strb	r3, [r7, #31]
 800ac00:	e076      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac02:	2302      	movs	r3, #2
 800ac04:	77fb      	strb	r3, [r7, #31]
 800ac06:	e073      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	77fb      	strb	r3, [r7, #31]
 800ac0c:	e070      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac0e:	2308      	movs	r3, #8
 800ac10:	77fb      	strb	r3, [r7, #31]
 800ac12:	e06d      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac14:	2310      	movs	r3, #16
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e06a      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac8c <UART_SetConfig+0x2e4>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d138      	bne.n	800ac96 <UART_SetConfig+0x2ee>
 800ac24:	4b13      	ldr	r3, [pc, #76]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800ac26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ac2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac32:	d017      	beq.n	800ac64 <UART_SetConfig+0x2bc>
 800ac34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac38:	d82a      	bhi.n	800ac90 <UART_SetConfig+0x2e8>
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac3e:	d00b      	beq.n	800ac58 <UART_SetConfig+0x2b0>
 800ac40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac44:	d824      	bhi.n	800ac90 <UART_SetConfig+0x2e8>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <UART_SetConfig+0x2aa>
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac4e:	d006      	beq.n	800ac5e <UART_SetConfig+0x2b6>
 800ac50:	e01e      	b.n	800ac90 <UART_SetConfig+0x2e8>
 800ac52:	2300      	movs	r3, #0
 800ac54:	77fb      	strb	r3, [r7, #31]
 800ac56:	e04b      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e048      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac5e:	2304      	movs	r3, #4
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e045      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac64:	2308      	movs	r3, #8
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e042      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac6a:	bf00      	nop
 800ac6c:	efff69f3 	.word	0xefff69f3
 800ac70:	40011000 	.word	0x40011000
 800ac74:	40023800 	.word	0x40023800
 800ac78:	40004400 	.word	0x40004400
 800ac7c:	40004800 	.word	0x40004800
 800ac80:	40004c00 	.word	0x40004c00
 800ac84:	40005000 	.word	0x40005000
 800ac88:	40011400 	.word	0x40011400
 800ac8c:	40007800 	.word	0x40007800
 800ac90:	2310      	movs	r3, #16
 800ac92:	77fb      	strb	r3, [r7, #31]
 800ac94:	e02c      	b.n	800acf0 <UART_SetConfig+0x348>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a72      	ldr	r2, [pc, #456]	@ (800ae64 <UART_SetConfig+0x4bc>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d125      	bne.n	800acec <UART_SetConfig+0x344>
 800aca0:	4b71      	ldr	r3, [pc, #452]	@ (800ae68 <UART_SetConfig+0x4c0>)
 800aca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800acaa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800acae:	d017      	beq.n	800ace0 <UART_SetConfig+0x338>
 800acb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800acb4:	d817      	bhi.n	800ace6 <UART_SetConfig+0x33e>
 800acb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acba:	d00b      	beq.n	800acd4 <UART_SetConfig+0x32c>
 800acbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acc0:	d811      	bhi.n	800ace6 <UART_SetConfig+0x33e>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <UART_SetConfig+0x326>
 800acc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acca:	d006      	beq.n	800acda <UART_SetConfig+0x332>
 800accc:	e00b      	b.n	800ace6 <UART_SetConfig+0x33e>
 800acce:	2300      	movs	r3, #0
 800acd0:	77fb      	strb	r3, [r7, #31]
 800acd2:	e00d      	b.n	800acf0 <UART_SetConfig+0x348>
 800acd4:	2302      	movs	r3, #2
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e00a      	b.n	800acf0 <UART_SetConfig+0x348>
 800acda:	2304      	movs	r3, #4
 800acdc:	77fb      	strb	r3, [r7, #31]
 800acde:	e007      	b.n	800acf0 <UART_SetConfig+0x348>
 800ace0:	2308      	movs	r3, #8
 800ace2:	77fb      	strb	r3, [r7, #31]
 800ace4:	e004      	b.n	800acf0 <UART_SetConfig+0x348>
 800ace6:	2310      	movs	r3, #16
 800ace8:	77fb      	strb	r3, [r7, #31]
 800acea:	e001      	b.n	800acf0 <UART_SetConfig+0x348>
 800acec:	2310      	movs	r3, #16
 800acee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acf8:	d15b      	bne.n	800adb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800acfa:	7ffb      	ldrb	r3, [r7, #31]
 800acfc:	2b08      	cmp	r3, #8
 800acfe:	d828      	bhi.n	800ad52 <UART_SetConfig+0x3aa>
 800ad00:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <UART_SetConfig+0x360>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	0800ad53 	.word	0x0800ad53
 800ad18:	0800ad43 	.word	0x0800ad43
 800ad1c:	0800ad53 	.word	0x0800ad53
 800ad20:	0800ad53 	.word	0x0800ad53
 800ad24:	0800ad53 	.word	0x0800ad53
 800ad28:	0800ad4b 	.word	0x0800ad4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad2c:	f7fc fbbc 	bl	80074a8 <HAL_RCC_GetPCLK1Freq>
 800ad30:	61b8      	str	r0, [r7, #24]
        break;
 800ad32:	e013      	b.n	800ad5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad34:	f7fc fbcc 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 800ad38:	61b8      	str	r0, [r7, #24]
        break;
 800ad3a:	e00f      	b.n	800ad5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad3c:	4b4b      	ldr	r3, [pc, #300]	@ (800ae6c <UART_SetConfig+0x4c4>)
 800ad3e:	61bb      	str	r3, [r7, #24]
        break;
 800ad40:	e00c      	b.n	800ad5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad42:	f7fc fa9f 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 800ad46:	61b8      	str	r0, [r7, #24]
        break;
 800ad48:	e008      	b.n	800ad5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad4e:	61bb      	str	r3, [r7, #24]
        break;
 800ad50:	e004      	b.n	800ad5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	77bb      	strb	r3, [r7, #30]
        break;
 800ad5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d074      	beq.n	800ae4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	005a      	lsls	r2, r3, #1
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	441a      	add	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b0f      	cmp	r3, #15
 800ad7c:	d916      	bls.n	800adac <UART_SetConfig+0x404>
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad84:	d212      	bcs.n	800adac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	f023 030f 	bic.w	r3, r3, #15
 800ad8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	89fb      	ldrh	r3, [r7, #14]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	89fa      	ldrh	r2, [r7, #14]
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	e04f      	b.n	800ae4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	77bb      	strb	r3, [r7, #30]
 800adb0:	e04c      	b.n	800ae4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	2b08      	cmp	r3, #8
 800adb6:	d828      	bhi.n	800ae0a <UART_SetConfig+0x462>
 800adb8:	a201      	add	r2, pc, #4	@ (adr r2, 800adc0 <UART_SetConfig+0x418>)
 800adba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbe:	bf00      	nop
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800adf5 	.word	0x0800adf5
 800adcc:	0800ae0b 	.word	0x0800ae0b
 800add0:	0800adfb 	.word	0x0800adfb
 800add4:	0800ae0b 	.word	0x0800ae0b
 800add8:	0800ae0b 	.word	0x0800ae0b
 800addc:	0800ae0b 	.word	0x0800ae0b
 800ade0:	0800ae03 	.word	0x0800ae03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ade4:	f7fc fb60 	bl	80074a8 <HAL_RCC_GetPCLK1Freq>
 800ade8:	61b8      	str	r0, [r7, #24]
        break;
 800adea:	e013      	b.n	800ae14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adec:	f7fc fb70 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 800adf0:	61b8      	str	r0, [r7, #24]
        break;
 800adf2:	e00f      	b.n	800ae14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adf4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae6c <UART_SetConfig+0x4c4>)
 800adf6:	61bb      	str	r3, [r7, #24]
        break;
 800adf8:	e00c      	b.n	800ae14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adfa:	f7fc fa43 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 800adfe:	61b8      	str	r0, [r7, #24]
        break;
 800ae00:	e008      	b.n	800ae14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae06:	61bb      	str	r3, [r7, #24]
        break;
 800ae08:	e004      	b.n	800ae14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	77bb      	strb	r3, [r7, #30]
        break;
 800ae12:	bf00      	nop
    }

    if (pclk != 0U)
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d018      	beq.n	800ae4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	085a      	lsrs	r2, r3, #1
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	441a      	add	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b0f      	cmp	r3, #15
 800ae32:	d909      	bls.n	800ae48 <UART_SetConfig+0x4a0>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae3a:	d205      	bcs.n	800ae48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	60da      	str	r2, [r3, #12]
 800ae46:	e001      	b.n	800ae4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ae58:	7fbb      	ldrb	r3, [r7, #30]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	40007c00 	.word	0x40007c00
 800ae68:	40023800 	.word	0x40023800
 800ae6c:	00f42400 	.word	0x00f42400

0800ae70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00a      	beq.n	800ae9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af04:	f003 0310 	and.w	r3, r3, #16
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00a      	beq.n	800af22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01a      	beq.n	800af86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af6e:	d10a      	bne.n	800af86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	430a      	orrs	r2, r1
 800af84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	605a      	str	r2, [r3, #4]
  }
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08c      	sub	sp, #48	@ 0x30
 800afb8:	af02      	add	r7, sp, #8
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc4:	f7f8 fdec 	bl	8003ba0 <HAL_GetTick>
 800afc8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0308 	and.w	r3, r3, #8
 800afd4:	2b08      	cmp	r3, #8
 800afd6:	d12e      	bne.n	800b036 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	2200      	movs	r2, #0
 800afe2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f83b 	bl	800b062 <UART_WaitOnFlagUntilTimeout>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d021      	beq.n	800b036 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b006:	623b      	str	r3, [r7, #32]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	69b9      	ldr	r1, [r7, #24]
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	617b      	str	r3, [r7, #20]
   return(result);
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e6      	bne.n	800aff2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e011      	b.n	800b05a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2220      	movs	r2, #32
 800b03a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3728      	adds	r7, #40	@ 0x28
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	603b      	str	r3, [r7, #0]
 800b06e:	4613      	mov	r3, r2
 800b070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b072:	e04f      	b.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07a:	d04b      	beq.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b07c:	f7f8 fd90 	bl	8003ba0 <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d302      	bcc.n	800b092 <UART_WaitOnFlagUntilTimeout+0x30>
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e04e      	b.n	800b134 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d037      	beq.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b80      	cmp	r3, #128	@ 0x80
 800b0a8:	d034      	beq.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b40      	cmp	r3, #64	@ 0x40
 800b0ae:	d031      	beq.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f003 0308 	and.w	r3, r3, #8
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d110      	bne.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f8fe 	bl	800b2c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2208      	movs	r2, #8
 800b0d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e029      	b.n	800b134 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ee:	d111      	bne.n	800b114 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f000 f8e4 	bl	800b2c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2220      	movs	r2, #32
 800b104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e00f      	b.n	800b134 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69da      	ldr	r2, [r3, #28]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	4013      	ands	r3, r2
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	429a      	cmp	r2, r3
 800b122:	bf0c      	ite	eq
 800b124:	2301      	moveq	r3, #1
 800b126:	2300      	movne	r3, #0
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d0a0      	beq.n	800b074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b096      	sub	sp, #88	@ 0x58
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2222      	movs	r2, #34	@ 0x22
 800b164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d028      	beq.n	800b1c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b174:	4a3e      	ldr	r2, [pc, #248]	@ (800b270 <UART_Start_Receive_DMA+0x134>)
 800b176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b17c:	4a3d      	ldr	r2, [pc, #244]	@ (800b274 <UART_Start_Receive_DMA+0x138>)
 800b17e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b184:	4a3c      	ldr	r2, [pc, #240]	@ (800b278 <UART_Start_Receive_DMA+0x13c>)
 800b186:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b18c:	2200      	movs	r2, #0
 800b18e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3324      	adds	r3, #36	@ 0x24
 800b19a:	4619      	mov	r1, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	88fb      	ldrh	r3, [r7, #6]
 800b1a4:	f7f9 fb9a 	bl	80048dc <HAL_DMA_Start_IT>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d009      	beq.n	800b1c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2210      	movs	r2, #16
 800b1b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e051      	b.n	800b266 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d018      	beq.n	800b1fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d2:	e853 3f00 	ldrex	r3, [r3]
 800b1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e6      	bne.n	800b1ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3308      	adds	r3, #8
 800b202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	653b      	str	r3, [r7, #80]	@ 0x50
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3308      	adds	r3, #8
 800b21a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b21c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b21e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e5      	bne.n	800b1fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3308      	adds	r3, #8
 800b236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	e853 3f00 	ldrex	r3, [r3]
 800b23e:	613b      	str	r3, [r7, #16]
   return(result);
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3308      	adds	r3, #8
 800b24e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b250:	623a      	str	r2, [r7, #32]
 800b252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b254:	69f9      	ldr	r1, [r7, #28]
 800b256:	6a3a      	ldr	r2, [r7, #32]
 800b258:	e841 2300 	strex	r3, r2, [r1]
 800b25c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1e5      	bne.n	800b230 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3758      	adds	r7, #88	@ 0x58
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	0800b391 	.word	0x0800b391
 800b274:	0800b4ef 	.word	0x0800b4ef
 800b278:	0800b561 	.word	0x0800b561

0800b27c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b089      	sub	sp, #36	@ 0x24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	60bb      	str	r3, [r7, #8]
   return(result);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b298:	61fb      	str	r3, [r7, #28]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6979      	ldr	r1, [r7, #20]
 800b2a8:	69ba      	ldr	r2, [r7, #24]
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e6      	bne.n	800b284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b2bc:	bf00      	nop
 800b2be:	3724      	adds	r7, #36	@ 0x24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b095      	sub	sp, #84	@ 0x54
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e6      	bne.n	800b2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3308      	adds	r3, #8
 800b308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	61fb      	str	r3, [r7, #28]
   return(result);
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	f023 0301 	bic.w	r3, r3, #1
 800b318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3308      	adds	r3, #8
 800b320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e5      	bne.n	800b302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d118      	bne.n	800b370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f023 0310 	bic.w	r3, r3, #16
 800b352:	647b      	str	r3, [r7, #68]	@ 0x44
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b35c:	61bb      	str	r3, [r7, #24]
 800b35e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6979      	ldr	r1, [r7, #20]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	613b      	str	r3, [r7, #16]
   return(result);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e6      	bne.n	800b33e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b384:	bf00      	nop
 800b386:	3754      	adds	r7, #84	@ 0x54
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b09c      	sub	sp, #112	@ 0x70
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3a6:	d071      	beq.n	800b48c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b8:	e853 3f00 	ldrex	r3, [r3]
 800b3bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b3dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e6      	bne.n	800b3b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ec:	e853 3f00 	ldrex	r3, [r3]
 800b3f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	f023 0301 	bic.w	r3, r3, #1
 800b3f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b3fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b402:	643a      	str	r2, [r7, #64]	@ 0x40
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e5      	bne.n	800b3e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3308      	adds	r3, #8
 800b41c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	61fb      	str	r3, [r7, #28]
   return(result);
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b42c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b42e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b438:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b43c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e5      	bne.n	800b416 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b44a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b456:	2b01      	cmp	r3, #1
 800b458:	d118      	bne.n	800b48c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	60bb      	str	r3, [r7, #8]
   return(result);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f023 0310 	bic.w	r3, r3, #16
 800b46e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b478:	61bb      	str	r3, [r7, #24]
 800b47a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6979      	ldr	r1, [r7, #20]
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	613b      	str	r3, [r7, #16]
   return(result);
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e6      	bne.n	800b45a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b48e:	2200      	movs	r2, #0
 800b490:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b496:	2b01      	cmp	r3, #1
 800b498:	d122      	bne.n	800b4e0 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b49c:	2200      	movs	r2, #0
 800b49e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b4ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b4b2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d204      	bcs.n	800b4c4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b4ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4bc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b4c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b4ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4da:	f7f7 f83b 	bl	8002554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4de:	e002      	b.n	800b4e6 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b4e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4e2:	f7ff fa43 	bl	800a96c <HAL_UART_RxCpltCallback>
}
 800b4e6:	bf00      	nop
 800b4e8:	3770      	adds	r7, #112	@ 0x70
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2201      	movs	r2, #1
 800b500:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b506:	2b01      	cmp	r3, #1
 800b508:	d123      	bne.n	800b552 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b510:	085b      	lsrs	r3, r3, #1
 800b512:	b29a      	uxth	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b528:	897a      	ldrh	r2, [r7, #10]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d803      	bhi.n	800b536 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	897a      	ldrh	r2, [r7, #10]
 800b532:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b542:	b29b      	uxth	r3, r3
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	4619      	mov	r1, r3
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7f7 f802 	bl	8002554 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b550:	e002      	b.n	800b558 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff fa14 	bl	800a980 <HAL_UART_RxHalfCpltCallback>
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b572:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b586:	2b80      	cmp	r3, #128	@ 0x80
 800b588:	d109      	bne.n	800b59e <UART_DMAError+0x3e>
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	2b21      	cmp	r3, #33	@ 0x21
 800b58e:	d106      	bne.n	800b59e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2200      	movs	r2, #0
 800b594:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b598:	6978      	ldr	r0, [r7, #20]
 800b59a:	f7ff fe6f 	bl	800b27c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a8:	2b40      	cmp	r3, #64	@ 0x40
 800b5aa:	d109      	bne.n	800b5c0 <UART_DMAError+0x60>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b22      	cmp	r3, #34	@ 0x22
 800b5b0:	d106      	bne.n	800b5c0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b5ba:	6978      	ldr	r0, [r7, #20]
 800b5bc:	f7ff fe84 	bl	800b2c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5c6:	f043 0210 	orr.w	r2, r3, #16
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5d0:	6978      	ldr	r0, [r7, #20]
 800b5d2:	f7ff f9df 	bl	800a994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5d6:	bf00      	nop
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff f9cd 	bl	800a994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b088      	sub	sp, #32
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	60bb      	str	r3, [r7, #8]
   return(result);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b61e:	61fb      	str	r3, [r7, #28]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	61bb      	str	r3, [r7, #24]
 800b62a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6979      	ldr	r1, [r7, #20]
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	613b      	str	r3, [r7, #16]
   return(result);
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e6      	bne.n	800b60a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2220      	movs	r2, #32
 800b640:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff f985 	bl	800a958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b64e:	bf00      	nop
 800b650:	3720      	adds	r7, #32
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b08c      	sub	sp, #48	@ 0x30
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	4613      	mov	r3, r2
 800b662:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b66a:	2b20      	cmp	r3, #32
 800b66c:	d142      	bne.n	800b6f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b674:	88fb      	ldrh	r3, [r7, #6]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e03b      	b.n	800b6f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b68a:	88fb      	ldrh	r3, [r7, #6]
 800b68c:	461a      	mov	r2, r3
 800b68e:	68b9      	ldr	r1, [r7, #8]
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fd53 	bl	800b13c <UART_Start_Receive_DMA>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b69c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d124      	bne.n	800b6ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d11d      	bne.n	800b6e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f043 0310 	orr.w	r3, r3, #16
 800b6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6a39      	ldr	r1, [r7, #32]
 800b6d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e6      	bne.n	800b6b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b6e6:	e002      	b.n	800b6ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6f2:	e000      	b.n	800b6f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b6f4:	2302      	movs	r3, #2
  }
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3730      	adds	r7, #48	@ 0x30
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b700:	b084      	sub	sp, #16
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	f107 001c 	add.w	r0, r7, #28
 800b70e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b712:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b716:	2b01      	cmp	r3, #1
 800b718:	d127      	bne.n	800b76a <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68da      	ldr	r2, [r3, #12]
 800b72a:	4b3a      	ldr	r3, [pc, #232]	@ (800b814 <USB_CoreInit+0x114>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	f043 0210 	orr.w	r2, r3, #16
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b74a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d105      	bne.n	800b75e <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 fb20 	bl	800cda4 <USB_CoreReset>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
 800b768:	e03c      	b.n	800b7e4 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b76a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d127      	bne.n	800b7c2 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	4b24      	ldr	r3, [pc, #144]	@ (800b814 <USB_CoreInit+0x114>)
 800b784:	4013      	ands	r3, r2
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f023 0210 	bic.w	r2, r3, #16
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800b7a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d105      	bne.n	800b7b6 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f001 faf4 	bl	800cda4 <USB_CoreReset>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	e010      	b.n	800b7e4 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f001 fae8 	bl	800cda4 <USB_CoreReset>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800b7e4:	7fbb      	ldrb	r3, [r7, #30]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d10b      	bne.n	800b802 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	f043 0206 	orr.w	r2, r3, #6
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f043 0220 	orr.w	r2, r3, #32
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b802:	7bfb      	ldrb	r3, [r7, #15]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b80e:	b004      	add	sp, #16
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	ffbdffbf 	.word	0xffbdffbf

0800b818 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d165      	bne.n	800b8f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	4a41      	ldr	r2, [pc, #260]	@ (800b934 <USB_SetTurnaroundTime+0x11c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d906      	bls.n	800b842 <USB_SetTurnaroundTime+0x2a>
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4a40      	ldr	r2, [pc, #256]	@ (800b938 <USB_SetTurnaroundTime+0x120>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d202      	bcs.n	800b842 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b83c:	230f      	movs	r3, #15
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	e062      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	4a3c      	ldr	r2, [pc, #240]	@ (800b938 <USB_SetTurnaroundTime+0x120>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d306      	bcc.n	800b858 <USB_SetTurnaroundTime+0x40>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	4a3b      	ldr	r2, [pc, #236]	@ (800b93c <USB_SetTurnaroundTime+0x124>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d202      	bcs.n	800b858 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b852:	230e      	movs	r3, #14
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	e057      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4a38      	ldr	r2, [pc, #224]	@ (800b93c <USB_SetTurnaroundTime+0x124>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d306      	bcc.n	800b86e <USB_SetTurnaroundTime+0x56>
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4a37      	ldr	r2, [pc, #220]	@ (800b940 <USB_SetTurnaroundTime+0x128>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d202      	bcs.n	800b86e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b868:	230d      	movs	r3, #13
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	e04c      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4a33      	ldr	r2, [pc, #204]	@ (800b940 <USB_SetTurnaroundTime+0x128>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d306      	bcc.n	800b884 <USB_SetTurnaroundTime+0x6c>
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4a32      	ldr	r2, [pc, #200]	@ (800b944 <USB_SetTurnaroundTime+0x12c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d802      	bhi.n	800b884 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b87e:	230c      	movs	r3, #12
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e041      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	4a2f      	ldr	r2, [pc, #188]	@ (800b944 <USB_SetTurnaroundTime+0x12c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d906      	bls.n	800b89a <USB_SetTurnaroundTime+0x82>
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4a2e      	ldr	r2, [pc, #184]	@ (800b948 <USB_SetTurnaroundTime+0x130>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d802      	bhi.n	800b89a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b894:	230b      	movs	r3, #11
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	e036      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	4a2a      	ldr	r2, [pc, #168]	@ (800b948 <USB_SetTurnaroundTime+0x130>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d906      	bls.n	800b8b0 <USB_SetTurnaroundTime+0x98>
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	4a29      	ldr	r2, [pc, #164]	@ (800b94c <USB_SetTurnaroundTime+0x134>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d802      	bhi.n	800b8b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b8aa:	230a      	movs	r3, #10
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e02b      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	4a26      	ldr	r2, [pc, #152]	@ (800b94c <USB_SetTurnaroundTime+0x134>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d906      	bls.n	800b8c6 <USB_SetTurnaroundTime+0xae>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4a25      	ldr	r2, [pc, #148]	@ (800b950 <USB_SetTurnaroundTime+0x138>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d202      	bcs.n	800b8c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b8c0:	2309      	movs	r3, #9
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	e020      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4a21      	ldr	r2, [pc, #132]	@ (800b950 <USB_SetTurnaroundTime+0x138>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d306      	bcc.n	800b8dc <USB_SetTurnaroundTime+0xc4>
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	4a20      	ldr	r2, [pc, #128]	@ (800b954 <USB_SetTurnaroundTime+0x13c>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d802      	bhi.n	800b8dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e015      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	4a1d      	ldr	r2, [pc, #116]	@ (800b954 <USB_SetTurnaroundTime+0x13c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d906      	bls.n	800b8f2 <USB_SetTurnaroundTime+0xda>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b958 <USB_SetTurnaroundTime+0x140>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d202      	bcs.n	800b8f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b8ec:	2307      	movs	r3, #7
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e00a      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b8f2:	2306      	movs	r3, #6
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	e007      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b8fe:	2309      	movs	r3, #9
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e001      	b.n	800b908 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b904:	2309      	movs	r3, #9
 800b906:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	029b      	lsls	r3, r3, #10
 800b91c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b920:	431a      	orrs	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	371c      	adds	r7, #28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	00d8acbf 	.word	0x00d8acbf
 800b938:	00e4e1c0 	.word	0x00e4e1c0
 800b93c:	00f42400 	.word	0x00f42400
 800b940:	01067380 	.word	0x01067380
 800b944:	011a499f 	.word	0x011a499f
 800b948:	01312cff 	.word	0x01312cff
 800b94c:	014ca43f 	.word	0x014ca43f
 800b950:	016e3600 	.word	0x016e3600
 800b954:	01a6ab1f 	.word	0x01a6ab1f
 800b958:	01e84800 	.word	0x01e84800

0800b95c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	f043 0201 	orr.w	r2, r3, #1
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f023 0201 	bic.w	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d115      	bne.n	800b9ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9ce:	200a      	movs	r0, #10
 800b9d0:	f7f8 f8f2 	bl	8003bb8 <HAL_Delay>
      ms += 10U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	330a      	adds	r3, #10
 800b9d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f001 f951 	bl	800cc82 <USB_GetMode>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d01e      	beq.n	800ba24 <USB_SetCurrentMode+0x84>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2bc7      	cmp	r3, #199	@ 0xc7
 800b9ea:	d9f0      	bls.n	800b9ce <USB_SetCurrentMode+0x2e>
 800b9ec:	e01a      	b.n	800ba24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d115      	bne.n	800ba20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba00:	200a      	movs	r0, #10
 800ba02:	f7f8 f8d9 	bl	8003bb8 <HAL_Delay>
      ms += 10U;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	330a      	adds	r3, #10
 800ba0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 f938 	bl	800cc82 <USB_GetMode>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <USB_SetCurrentMode+0x84>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba1c:	d9f0      	bls.n	800ba00 <USB_SetCurrentMode+0x60>
 800ba1e:	e001      	b.n	800ba24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e005      	b.n	800ba30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba28:	d101      	bne.n	800ba2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba38:	b084      	sub	sp, #16
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b086      	sub	sp, #24
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba52:	2300      	movs	r3, #0
 800ba54:	613b      	str	r3, [r7, #16]
 800ba56:	e009      	b.n	800ba6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	3340      	adds	r3, #64	@ 0x40
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	613b      	str	r3, [r7, #16]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	2b0e      	cmp	r3, #14
 800ba70:	d9f2      	bls.n	800ba58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d11c      	bne.n	800bab4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba88:	f043 0302 	orr.w	r3, r3, #2
 800ba8c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e005      	b.n	800bac0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bac6:	461a      	mov	r2, r3
 800bac8:	2300      	movs	r3, #0
 800baca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bacc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d10d      	bne.n	800baf0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d104      	bne.n	800bae6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800badc:	2100      	movs	r1, #0
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f97a 	bl	800bdd8 <USB_SetDevSpeed>
 800bae4:	e01a      	b.n	800bb1c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bae6:	2101      	movs	r1, #1
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f975 	bl	800bdd8 <USB_SetDevSpeed>
 800baee:	e015      	b.n	800bb1c <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800baf0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d10d      	bne.n	800bb14 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800baf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f968 	bl	800bdd8 <USB_SetDevSpeed>
 800bb08:	e008      	b.n	800bb1c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f963 	bl	800bdd8 <USB_SetDevSpeed>
 800bb12:	e003      	b.n	800bb1c <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb14:	2103      	movs	r1, #3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f95e 	bl	800bdd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb1c:	2110      	movs	r1, #16
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f8fa 	bl	800bd18 <USB_FlushTxFifo>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f924 	bl	800bd7c <USB_FlushRxFifo>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb44:	461a      	mov	r2, r3
 800bb46:	2300      	movs	r3, #0
 800bb48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb50:	461a      	mov	r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb62:	2300      	movs	r3, #0
 800bb64:	613b      	str	r3, [r7, #16]
 800bb66:	e043      	b.n	800bbf0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb7e:	d118      	bne.n	800bbb2 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10a      	bne.n	800bb9c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb92:	461a      	mov	r2, r3
 800bb94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb98:	6013      	str	r3, [r2, #0]
 800bb9a:	e013      	b.n	800bbc4 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	e008      	b.n	800bbc4 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	015a      	lsls	r2, r3, #5
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	3301      	adds	r3, #1
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d3b5      	bcc.n	800bb68 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	613b      	str	r3, [r7, #16]
 800bc00:	e043      	b.n	800bc8a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc18:	d118      	bne.n	800bc4c <USB_DevInit+0x214>
    {
      if (i == 0U)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10a      	bne.n	800bc36 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	e013      	b.n	800bc5e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc42:	461a      	mov	r2, r3
 800bc44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	e008      	b.n	800bc5e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc58:	461a      	mov	r2, r3
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	3301      	adds	r3, #1
 800bc88:	613b      	str	r3, [r7, #16]
 800bc8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc8e:	461a      	mov	r2, r3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d3b5      	bcc.n	800bc02 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bca8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bcb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bcb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d105      	bne.n	800bccc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	f043 0210 	orr.w	r2, r3, #16
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	699a      	ldr	r2, [r3, #24]
 800bcd0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd10 <USB_DevInit+0x2d8>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bcd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	f043 0208 	orr.w	r2, r3, #8
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d105      	bne.n	800bd00 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	699a      	ldr	r2, [r3, #24]
 800bcf8:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <USB_DevInit+0x2dc>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd0c:	b004      	add	sp, #16
 800bd0e:	4770      	bx	lr
 800bd10:	803c3800 	.word	0x803c3800
 800bd14:	40000004 	.word	0x40000004

0800bd18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd32:	d901      	bls.n	800bd38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e01b      	b.n	800bd70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	daf2      	bge.n	800bd26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	019b      	lsls	r3, r3, #6
 800bd48:	f043 0220 	orr.w	r2, r3, #32
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd5c:	d901      	bls.n	800bd62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e006      	b.n	800bd70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d0f0      	beq.n	800bd50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd94:	d901      	bls.n	800bd9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e018      	b.n	800bdcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	daf2      	bge.n	800bd88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2210      	movs	r2, #16
 800bdaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdb8:	d901      	bls.n	800bdbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e006      	b.n	800bdcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	f003 0310 	and.w	r3, r3, #16
 800bdc6:	2b10      	cmp	r3, #16
 800bdc8:	d0f0      	beq.n	800bdac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	68f9      	ldr	r1, [r7, #12]
 800bdf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b087      	sub	sp, #28
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f003 0306 	and.w	r3, r3, #6
 800be22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]
 800be2e:	e00a      	b.n	800be46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d002      	beq.n	800be3c <USB_GetDevSpeed+0x32>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b06      	cmp	r3, #6
 800be3a:	d102      	bne.n	800be42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be3c:	2302      	movs	r3, #2
 800be3e:	75fb      	strb	r3, [r7, #23]
 800be40:	e001      	b.n	800be46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800be42:	230f      	movs	r3, #15
 800be44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	785b      	ldrb	r3, [r3, #1]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d139      	bne.n	800bee4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be76:	69da      	ldr	r2, [r3, #28]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	f003 030f 	and.w	r3, r3, #15
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f303 	lsl.w	r3, r1, r3
 800be86:	b29b      	uxth	r3, r3
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be8e:	4313      	orrs	r3, r2
 800be90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d153      	bne.n	800bf50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	791b      	ldrb	r3, [r3, #4]
 800bec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	059b      	lsls	r3, r3, #22
 800beca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800becc:	431a      	orrs	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	0159      	lsls	r1, r3, #5
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	440b      	add	r3, r1
 800bed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beda:	4619      	mov	r1, r3
 800bedc:	4b20      	ldr	r3, [pc, #128]	@ (800bf60 <USB_ActivateEndpoint+0x10c>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	600b      	str	r3, [r1, #0]
 800bee2:	e035      	b.n	800bf50 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beea:	69da      	ldr	r2, [r3, #28]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f003 030f 	and.w	r3, r3, #15
 800bef4:	2101      	movs	r1, #1
 800bef6:	fa01 f303 	lsl.w	r3, r1, r3
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	68f9      	ldr	r1, [r7, #12]
 800befe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf02:	4313      	orrs	r3, r2
 800bf04:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d119      	bne.n	800bf50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	015a      	lsls	r2, r3, #5
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4413      	add	r3, r2
 800bf24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	791b      	ldrb	r3, [r3, #4]
 800bf36:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf38:	430b      	orrs	r3, r1
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	0159      	lsls	r1, r3, #5
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	440b      	add	r3, r1
 800bf44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <USB_ActivateEndpoint+0x10c>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	10008000 	.word	0x10008000

0800bf64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	785b      	ldrb	r3, [r3, #1]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d161      	bne.n	800c044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf96:	d11f      	bne.n	800bfd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	0151      	lsls	r1, r2, #5
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	440a      	add	r2, r1
 800bfae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	015a      	lsls	r2, r3, #5
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	0151      	lsls	r1, r2, #5
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	440a      	add	r2, r1
 800bfce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	2101      	movs	r1, #1
 800bfea:	fa01 f303 	lsl.w	r3, r1, r3
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	43db      	mvns	r3, r3
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bff8:	4013      	ands	r3, r2
 800bffa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	f003 030f 	and.w	r3, r3, #15
 800c00c:	2101      	movs	r1, #1
 800c00e:	fa01 f303 	lsl.w	r3, r1, r3
 800c012:	b29b      	uxth	r3, r3
 800c014:	43db      	mvns	r3, r3
 800c016:	68f9      	ldr	r1, [r7, #12]
 800c018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c01c:	4013      	ands	r3, r2
 800c01e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	0159      	lsls	r1, r3, #5
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	440b      	add	r3, r1
 800c036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c03a:	4619      	mov	r1, r3
 800c03c:	4b35      	ldr	r3, [pc, #212]	@ (800c114 <USB_DeactivateEndpoint+0x1b0>)
 800c03e:	4013      	ands	r3, r2
 800c040:	600b      	str	r3, [r1, #0]
 800c042:	e060      	b.n	800c106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c05a:	d11f      	bne.n	800c09c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	015a      	lsls	r2, r3, #5
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	0151      	lsls	r1, r2, #5
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	440a      	add	r2, r1
 800c072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c076:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c07a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	0151      	lsls	r1, r2, #5
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	440a      	add	r2, r1
 800c092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c096:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c09a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	f003 030f 	and.w	r3, r3, #15
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c0b2:	041b      	lsls	r3, r3, #16
 800c0b4:	43db      	mvns	r3, r3
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0bc:	4013      	ands	r3, r2
 800c0be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c6:	69da      	ldr	r2, [r3, #28]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f003 030f 	and.w	r3, r3, #15
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0d6:	041b      	lsls	r3, r3, #16
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	0159      	lsls	r1, r3, #5
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	440b      	add	r3, r1
 800c0fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0fe:	4619      	mov	r1, r3
 800c100:	4b05      	ldr	r3, [pc, #20]	@ (800c118 <USB_DeactivateEndpoint+0x1b4>)
 800c102:	4013      	ands	r3, r2
 800c104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	ec337800 	.word	0xec337800
 800c118:	eff37800 	.word	0xeff37800

0800c11c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08a      	sub	sp, #40	@ 0x28
 800c120:	af02      	add	r7, sp, #8
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4613      	mov	r3, r2
 800c128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	785b      	ldrb	r3, [r3, #1]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	f040 8185 	bne.w	800c448 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d132      	bne.n	800c1ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	015a      	lsls	r2, r3, #5
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	4413      	add	r3, r2
 800c14e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c152:	691a      	ldr	r2, [r3, #16]
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	0159      	lsls	r1, r3, #5
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	440b      	add	r3, r1
 800c15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c160:	4619      	mov	r1, r3
 800c162:	4ba7      	ldr	r3, [pc, #668]	@ (800c400 <USB_EPStartXfer+0x2e4>)
 800c164:	4013      	ands	r3, r2
 800c166:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	0151      	lsls	r1, r2, #5
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	440a      	add	r2, r1
 800c17e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	015a      	lsls	r2, r3, #5
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	4413      	add	r3, r2
 800c190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c194:	691a      	ldr	r2, [r3, #16]
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	0159      	lsls	r1, r3, #5
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	440b      	add	r3, r1
 800c19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4b97      	ldr	r3, [pc, #604]	@ (800c404 <USB_EPStartXfer+0x2e8>)
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	610b      	str	r3, [r1, #16]
 800c1aa:	e097      	b.n	800c2dc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b8:	691a      	ldr	r2, [r3, #16]
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	0159      	lsls	r1, r3, #5
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	440b      	add	r3, r1
 800c1c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4b8e      	ldr	r3, [pc, #568]	@ (800c404 <USB_EPStartXfer+0x2e8>)
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	015a      	lsls	r2, r3, #5
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1da:	691a      	ldr	r2, [r3, #16]
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	0159      	lsls	r1, r3, #5
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	440b      	add	r3, r1
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4b85      	ldr	r3, [pc, #532]	@ (800c400 <USB_EPStartXfer+0x2e4>)
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d11a      	bne.n	800c22c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d903      	bls.n	800c20a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	015a      	lsls	r2, r3, #5
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	4413      	add	r3, r2
 800c212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	0151      	lsls	r1, r2, #5
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	440a      	add	r2, r1
 800c220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c228:	6113      	str	r3, [r2, #16]
 800c22a:	e044      	b.n	800c2b6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	4413      	add	r3, r2
 800c236:	1e5a      	subs	r2, r3, #1
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c240:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c24e:	691a      	ldr	r2, [r3, #16]
 800c250:	8afb      	ldrh	r3, [r7, #22]
 800c252:	04d9      	lsls	r1, r3, #19
 800c254:	4b6c      	ldr	r3, [pc, #432]	@ (800c408 <USB_EPStartXfer+0x2ec>)
 800c256:	400b      	ands	r3, r1
 800c258:	69b9      	ldr	r1, [r7, #24]
 800c25a:	0148      	lsls	r0, r1, #5
 800c25c:	69f9      	ldr	r1, [r7, #28]
 800c25e:	4401      	add	r1, r0
 800c260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c264:	4313      	orrs	r3, r2
 800c266:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	791b      	ldrb	r3, [r3, #4]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d122      	bne.n	800c2b6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	0151      	lsls	r1, r2, #5
 800c282:	69fa      	ldr	r2, [r7, #28]
 800c284:	440a      	add	r2, r1
 800c286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c28a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c28e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c29c:	691a      	ldr	r2, [r3, #16]
 800c29e:	8afb      	ldrh	r3, [r7, #22]
 800c2a0:	075b      	lsls	r3, r3, #29
 800c2a2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c2a6:	69b9      	ldr	r1, [r7, #24]
 800c2a8:	0148      	lsls	r0, r1, #5
 800c2aa:	69f9      	ldr	r1, [r7, #28]
 800c2ac:	4401      	add	r1, r0
 800c2ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	015a      	lsls	r2, r3, #5
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	4413      	add	r3, r2
 800c2be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c2:	691a      	ldr	r2, [r3, #16]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2cc:	69b9      	ldr	r1, [r7, #24]
 800c2ce:	0148      	lsls	r0, r1, #5
 800c2d0:	69f9      	ldr	r1, [r7, #28]
 800c2d2:	4401      	add	r1, r0
 800c2d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d14b      	bne.n	800c37a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d009      	beq.n	800c2fe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	791b      	ldrb	r3, [r3, #4]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d128      	bne.n	800c358 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c312:	2b00      	cmp	r3, #0
 800c314:	d110      	bne.n	800c338 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	69ba      	ldr	r2, [r7, #24]
 800c326:	0151      	lsls	r1, r2, #5
 800c328:	69fa      	ldr	r2, [r7, #28]
 800c32a:	440a      	add	r2, r1
 800c32c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c330:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	e00f      	b.n	800c358 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	0151      	lsls	r1, r2, #5
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	440a      	add	r2, r1
 800c34e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c356:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69ba      	ldr	r2, [r7, #24]
 800c368:	0151      	lsls	r1, r2, #5
 800c36a:	69fa      	ldr	r2, [r7, #28]
 800c36c:	440a      	add	r2, r1
 800c36e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c372:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	e169      	b.n	800c64e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	0151      	lsls	r1, r2, #5
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	440a      	add	r2, r1
 800c390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c394:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c398:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	791b      	ldrb	r3, [r3, #4]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d015      	beq.n	800c3ce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 8151 	beq.w	800c64e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 030f 	and.w	r3, r3, #15
 800c3bc:	2101      	movs	r1, #1
 800c3be:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c2:	69f9      	ldr	r1, [r7, #28]
 800c3c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	634b      	str	r3, [r1, #52]	@ 0x34
 800c3cc:	e13f      	b.n	800c64e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d116      	bne.n	800c40c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	0151      	lsls	r1, r2, #5
 800c3f0:	69fa      	ldr	r2, [r7, #28]
 800c3f2:	440a      	add	r2, r1
 800c3f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	e015      	b.n	800c42c <USB_EPStartXfer+0x310>
 800c400:	e007ffff 	.word	0xe007ffff
 800c404:	fff80000 	.word	0xfff80000
 800c408:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69ba      	ldr	r2, [r7, #24]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c42a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	68d9      	ldr	r1, [r3, #12]
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	b298      	uxth	r0, r3
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	4603      	mov	r3, r0
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f9b9 	bl	800c7b8 <USB_WritePacket>
 800c446:	e102      	b.n	800c64e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c454:	691a      	ldr	r2, [r3, #16]
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	0159      	lsls	r1, r3, #5
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	440b      	add	r3, r1
 800c45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c462:	4619      	mov	r1, r3
 800c464:	4b7c      	ldr	r3, [pc, #496]	@ (800c658 <USB_EPStartXfer+0x53c>)
 800c466:	4013      	ands	r3, r2
 800c468:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c476:	691a      	ldr	r2, [r3, #16]
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	0159      	lsls	r1, r3, #5
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	440b      	add	r3, r1
 800c480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c484:	4619      	mov	r1, r3
 800c486:	4b75      	ldr	r3, [pc, #468]	@ (800c65c <USB_EPStartXfer+0x540>)
 800c488:	4013      	ands	r3, r2
 800c48a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d12f      	bne.n	800c4f2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	689a      	ldr	r2, [r3, #8]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4c0:	69b9      	ldr	r1, [r7, #24]
 800c4c2:	0148      	lsls	r0, r1, #5
 800c4c4:	69f9      	ldr	r1, [r7, #28]
 800c4c6:	4401      	add	r1, r0
 800c4c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4ee:	6113      	str	r3, [r2, #16]
 800c4f0:	e05f      	b.n	800c5b2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d123      	bne.n	800c542 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c506:	691a      	ldr	r2, [r3, #16]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c510:	69b9      	ldr	r1, [r7, #24]
 800c512:	0148      	lsls	r0, r1, #5
 800c514:	69f9      	ldr	r1, [r7, #28]
 800c516:	4401      	add	r1, r0
 800c518:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c51c:	4313      	orrs	r3, r2
 800c51e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	4413      	add	r3, r2
 800c528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	0151      	lsls	r1, r2, #5
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	440a      	add	r2, r1
 800c536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c53a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c53e:	6113      	str	r3, [r2, #16]
 800c540:	e037      	b.n	800c5b2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	691a      	ldr	r2, [r3, #16]
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	4413      	add	r3, r2
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	fbb2 f3f3 	udiv	r3, r2, r3
 800c556:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	8afa      	ldrh	r2, [r7, #22]
 800c55e:	fb03 f202 	mul.w	r2, r3, r2
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c572:	691a      	ldr	r2, [r3, #16]
 800c574:	8afb      	ldrh	r3, [r7, #22]
 800c576:	04d9      	lsls	r1, r3, #19
 800c578:	4b39      	ldr	r3, [pc, #228]	@ (800c660 <USB_EPStartXfer+0x544>)
 800c57a:	400b      	ands	r3, r1
 800c57c:	69b9      	ldr	r1, [r7, #24]
 800c57e:	0148      	lsls	r0, r1, #5
 800c580:	69f9      	ldr	r1, [r7, #28]
 800c582:	4401      	add	r1, r0
 800c584:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c588:	4313      	orrs	r3, r2
 800c58a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5a2:	69b9      	ldr	r1, [r7, #24]
 800c5a4:	0148      	lsls	r0, r1, #5
 800c5a6:	69f9      	ldr	r1, [r7, #28]
 800c5a8:	4401      	add	r1, r0
 800c5aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d10d      	bne.n	800c5d4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d009      	beq.n	800c5d4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	68d9      	ldr	r1, [r3, #12]
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	791b      	ldrb	r3, [r3, #4]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d128      	bne.n	800c62e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d110      	bne.n	800c60e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	69ba      	ldr	r2, [r7, #24]
 800c5fc:	0151      	lsls	r1, r2, #5
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	440a      	add	r2, r1
 800c602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c606:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c60a:	6013      	str	r3, [r2, #0]
 800c60c:	e00f      	b.n	800c62e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	015a      	lsls	r2, r3, #5
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	4413      	add	r3, r2
 800c616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	69ba      	ldr	r2, [r7, #24]
 800c61e:	0151      	lsls	r1, r2, #5
 800c620:	69fa      	ldr	r2, [r7, #28]
 800c622:	440a      	add	r2, r1
 800c624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c62c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	69ba      	ldr	r2, [r7, #24]
 800c63e:	0151      	lsls	r1, r2, #5
 800c640:	69fa      	ldr	r2, [r7, #28]
 800c642:	440a      	add	r2, r1
 800c644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c648:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c64c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	fff80000 	.word	0xfff80000
 800c65c:	e007ffff 	.word	0xe007ffff
 800c660:	1ff80000 	.word	0x1ff80000

0800c664 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c664:	b480      	push	{r7}
 800c666:	b087      	sub	sp, #28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d14a      	bne.n	800c718 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c69a:	f040 8086 	bne.w	800c7aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	7812      	ldrb	r2, [r2, #0]
 800c6b2:	0151      	lsls	r1, r2, #5
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	440a      	add	r2, r1
 800c6b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	7812      	ldrb	r2, [r2, #0]
 800c6d6:	0151      	lsls	r1, r2, #5
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	440a      	add	r2, r1
 800c6dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d902      	bls.n	800c6fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	75fb      	strb	r3, [r7, #23]
          break;
 800c6fa:	e056      	b.n	800c7aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c714:	d0e7      	beq.n	800c6e6 <USB_EPStopXfer+0x82>
 800c716:	e048      	b.n	800c7aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c72c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c730:	d13b      	bne.n	800c7aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	7812      	ldrb	r2, [r2, #0]
 800c746:	0151      	lsls	r1, r2, #5
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	440a      	add	r2, r1
 800c74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c754:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	7812      	ldrb	r2, [r2, #0]
 800c76a:	0151      	lsls	r1, r2, #5
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	440a      	add	r2, r1
 800c770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3301      	adds	r3, #1
 800c77e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c786:	4293      	cmp	r3, r2
 800c788:	d902      	bls.n	800c790 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	75fb      	strb	r3, [r7, #23]
          break;
 800c78e:	e00c      	b.n	800c7aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	015a      	lsls	r2, r3, #5
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	4413      	add	r3, r2
 800c79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7a8:	d0e7      	beq.n	800c77a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b089      	sub	sp, #36	@ 0x24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	71fb      	strb	r3, [r7, #7]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c7d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d123      	bne.n	800c826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c7de:	88bb      	ldrh	r3, [r7, #4]
 800c7e0:	3303      	adds	r3, #3
 800c7e2:	089b      	lsrs	r3, r3, #2
 800c7e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
 800c7ea:	e018      	b.n	800c81e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	031a      	lsls	r2, r3, #12
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	3301      	adds	r3, #1
 800c804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	3301      	adds	r3, #1
 800c80a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	3301      	adds	r3, #1
 800c810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	3301      	adds	r3, #1
 800c816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61bb      	str	r3, [r7, #24]
 800c81e:	69ba      	ldr	r2, [r7, #24]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	429a      	cmp	r2, r3
 800c824:	d3e2      	bcc.n	800c7ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3724      	adds	r7, #36	@ 0x24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c834:	b480      	push	{r7}
 800c836:	b08b      	sub	sp, #44	@ 0x2c
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	4613      	mov	r3, r2
 800c840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c84a:	88fb      	ldrh	r3, [r7, #6]
 800c84c:	089b      	lsrs	r3, r3, #2
 800c84e:	b29b      	uxth	r3, r3
 800c850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c852:	88fb      	ldrh	r3, [r7, #6]
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c85a:	2300      	movs	r3, #0
 800c85c:	623b      	str	r3, [r7, #32]
 800c85e:	e014      	b.n	800c88a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	3301      	adds	r3, #1
 800c870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	3301      	adds	r3, #1
 800c876:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87a:	3301      	adds	r3, #1
 800c87c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	3301      	adds	r3, #1
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	3301      	adds	r3, #1
 800c888:	623b      	str	r3, [r7, #32]
 800c88a:	6a3a      	ldr	r2, [r7, #32]
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d3e6      	bcc.n	800c860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c892:	8bfb      	ldrh	r3, [r7, #30]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01e      	beq.n	800c8d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f107 0310 	add.w	r3, r7, #16
 800c8a8:	6812      	ldr	r2, [r2, #0]
 800c8aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8bc:	701a      	strb	r2, [r3, #0]
      i++;
 800c8be:	6a3b      	ldr	r3, [r7, #32]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c8ca:	8bfb      	ldrh	r3, [r7, #30]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c8d0:	8bfb      	ldrh	r3, [r7, #30]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1ea      	bne.n	800c8ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	372c      	adds	r7, #44	@ 0x2c
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	785b      	ldrb	r3, [r3, #1]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d12c      	bne.n	800c95a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	db12      	blt.n	800c938 <USB_EPSetStall+0x54>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00f      	beq.n	800c938 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c936:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	0151      	lsls	r1, r2, #5
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	440a      	add	r2, r1
 800c94e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	e02b      	b.n	800c9b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	db12      	blt.n	800c992 <USB_EPSetStall+0xae>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00f      	beq.n	800c992 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	0151      	lsls	r1, r2, #5
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	440a      	add	r2, r1
 800c988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c98c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c990:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	015a      	lsls	r2, r3, #5
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	0151      	lsls	r1, r2, #5
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	440a      	add	r2, r1
 800c9a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c9b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	785b      	ldrb	r3, [r3, #1]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d128      	bne.n	800ca2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	015a      	lsls	r2, r3, #5
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	0151      	lsls	r1, r2, #5
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	440a      	add	r2, r1
 800c9f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c9fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	791b      	ldrb	r3, [r3, #4]
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d003      	beq.n	800ca0c <USB_EPClearStall+0x4c>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	791b      	ldrb	r3, [r3, #4]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d138      	bne.n	800ca7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	0151      	lsls	r1, r2, #5
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	440a      	add	r2, r1
 800ca22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca2a:	6013      	str	r3, [r2, #0]
 800ca2c:	e027      	b.n	800ca7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	0151      	lsls	r1, r2, #5
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	440a      	add	r2, r1
 800ca44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	791b      	ldrb	r3, [r3, #4]
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d003      	beq.n	800ca5e <USB_EPClearStall+0x9e>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	791b      	ldrb	r3, [r3, #4]
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d10f      	bne.n	800ca7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	015a      	lsls	r2, r3, #5
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	4413      	add	r3, r2
 800ca66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	0151      	lsls	r1, r2, #5
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	440a      	add	r2, r1
 800ca74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800caaa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800caae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	78fb      	ldrb	r3, [r7, #3]
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cac0:	68f9      	ldr	r1, [r7, #12]
 800cac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cac6:	4313      	orrs	r3, r2
 800cac8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb06:	f023 0302 	bic.w	r3, r3, #2
 800cb0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b085      	sub	sp, #20
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb34:	f023 0303 	bic.w	r3, r3, #3
 800cb38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb48:	f043 0302 	orr.w	r3, r3, #2
 800cb4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	4013      	ands	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cb74:	68fb      	ldr	r3, [r7, #12]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b085      	sub	sp, #20
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	4013      	ands	r3, r2
 800cba4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	0c1b      	lsrs	r3, r3, #16
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b085      	sub	sp, #20
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	4013      	ands	r3, r2
 800cbd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	b29b      	uxth	r3, r3
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cbfa:	78fb      	ldrb	r3, [r7, #3]
 800cbfc:	015a      	lsls	r2, r3, #5
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4413      	add	r3, r2
 800cc02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	4013      	ands	r3, r2
 800cc16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc18:	68bb      	ldr	r3, [r7, #8]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc26:	b480      	push	{r7}
 800cc28:	b087      	sub	sp, #28
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	f003 030f 	and.w	r3, r3, #15
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	fa22 f303 	lsr.w	r3, r2, r3
 800cc56:	01db      	lsls	r3, r3, #7
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	693a      	ldr	r2, [r7, #16]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	4013      	ands	r3, r2
 800cc72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc74:	68bb      	ldr	r3, [r7, #8]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	f003 0301 	and.w	r3, r3, #1
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	370c      	adds	r7, #12
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
	...

0800cca0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4b09      	ldr	r3, [pc, #36]	@ (800cce4 <USB_ActivateSetup+0x44>)
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	fffff800 	.word	0xfffff800

0800cce8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	333c      	adds	r3, #60	@ 0x3c
 800ccfe:	3304      	adds	r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	4a26      	ldr	r2, [pc, #152]	@ (800cda0 <USB_EP0_OutStart+0xb8>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d90a      	bls.n	800cd22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd1c:	d101      	bne.n	800cd22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e037      	b.n	800cd92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd28:	461a      	mov	r2, r3
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd50:	f043 0318 	orr.w	r3, r3, #24
 800cd54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cd68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cd6a:	7afb      	ldrb	r3, [r7, #11]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cd8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	4f54300a 	.word	0x4f54300a

0800cda4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdbc:	d901      	bls.n	800cdc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	e022      	b.n	800ce08 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	daf2      	bge.n	800cdb0 <USB_CoreReset+0xc>

  count = 10U;
 800cdca:	230a      	movs	r3, #10
 800cdcc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800cdce:	e002      	b.n	800cdd6 <USB_CoreReset+0x32>
  {
    count--;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1f9      	bne.n	800cdd0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	f043 0201 	orr.w	r2, r3, #1
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3301      	adds	r3, #1
 800cdec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdf4:	d901      	bls.n	800cdfa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e006      	b.n	800ce08 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d0f0      	beq.n	800cde8 <USB_CoreReset+0x44>

  return HAL_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce20:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ce24:	f002 fd34 	bl	800f890 <malloc>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d109      	bne.n	800ce46 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	32b0      	adds	r2, #176	@ 0xb0
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ce42:	2302      	movs	r3, #2
 800ce44:	e0d4      	b.n	800cff0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ce46:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f003 fb38 	bl	80104c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	32b0      	adds	r2, #176	@ 0xb0
 800ce5c:	68f9      	ldr	r1, [r7, #12]
 800ce5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	32b0      	adds	r2, #176	@ 0xb0
 800ce6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7c1b      	ldrb	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d138      	bne.n	800cef0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce7e:	4b5e      	ldr	r3, [pc, #376]	@ (800cff8 <USBD_CDC_Init+0x1e4>)
 800ce80:	7819      	ldrb	r1, [r3, #0]
 800ce82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce86:	2202      	movs	r2, #2
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f002 fb5e 	bl	800f54a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce8e:	4b5a      	ldr	r3, [pc, #360]	@ (800cff8 <USBD_CDC_Init+0x1e4>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 020f 	and.w	r2, r3, #15
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	3323      	adds	r3, #35	@ 0x23
 800cea4:	2201      	movs	r2, #1
 800cea6:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cea8:	4b54      	ldr	r3, [pc, #336]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800ceaa:	7819      	ldrb	r1, [r3, #0]
 800ceac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f002 fb49 	bl	800f54a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ceb8:	4b50      	ldr	r3, [pc, #320]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	f003 020f 	and.w	r2, r3, #15
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	440b      	add	r3, r1
 800cecc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ced0:	2201      	movs	r2, #1
 800ced2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ced4:	4b4a      	ldr	r3, [pc, #296]	@ (800d000 <USBD_CDC_Init+0x1ec>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 020f 	and.w	r2, r3, #15
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	331c      	adds	r3, #28
 800ceea:	2210      	movs	r2, #16
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	e035      	b.n	800cf5c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cef0:	4b41      	ldr	r3, [pc, #260]	@ (800cff8 <USBD_CDC_Init+0x1e4>)
 800cef2:	7819      	ldrb	r1, [r3, #0]
 800cef4:	2340      	movs	r3, #64	@ 0x40
 800cef6:	2202      	movs	r2, #2
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f002 fb26 	bl	800f54a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cefe:	4b3e      	ldr	r3, [pc, #248]	@ (800cff8 <USBD_CDC_Init+0x1e4>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	f003 020f 	and.w	r2, r3, #15
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	440b      	add	r3, r1
 800cf12:	3323      	adds	r3, #35	@ 0x23
 800cf14:	2201      	movs	r2, #1
 800cf16:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf18:	4b38      	ldr	r3, [pc, #224]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800cf1a:	7819      	ldrb	r1, [r3, #0]
 800cf1c:	2340      	movs	r3, #64	@ 0x40
 800cf1e:	2202      	movs	r2, #2
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f002 fb12 	bl	800f54a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf26:	4b35      	ldr	r3, [pc, #212]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	f003 020f 	and.w	r2, r3, #15
 800cf2e:	6879      	ldr	r1, [r7, #4]
 800cf30:	4613      	mov	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	4413      	add	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	440b      	add	r3, r1
 800cf3a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cf3e:	2201      	movs	r2, #1
 800cf40:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf42:	4b2f      	ldr	r3, [pc, #188]	@ (800d000 <USBD_CDC_Init+0x1ec>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	f003 020f 	and.w	r2, r3, #15
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	440b      	add	r3, r1
 800cf56:	331c      	adds	r3, #28
 800cf58:	2210      	movs	r2, #16
 800cf5a:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf5c:	4b28      	ldr	r3, [pc, #160]	@ (800d000 <USBD_CDC_Init+0x1ec>)
 800cf5e:	7819      	ldrb	r1, [r3, #0]
 800cf60:	2308      	movs	r3, #8
 800cf62:	2203      	movs	r2, #3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f002 faf0 	bl	800f54a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cf6a:	4b25      	ldr	r3, [pc, #148]	@ (800d000 <USBD_CDC_Init+0x1ec>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	f003 020f 	and.w	r2, r3, #15
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	4613      	mov	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	440b      	add	r3, r1
 800cf7e:	3323      	adds	r3, #35	@ 0x23
 800cf80:	2201      	movs	r2, #1
 800cf82:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	33b0      	adds	r3, #176	@ 0xb0
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	e018      	b.n	800cff0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7c1b      	ldrb	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800cfc8:	7819      	ldrb	r1, [r3, #0]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f002 fba7 	bl	800f728 <USBD_LL_PrepareReceive>
 800cfda:	e008      	b.n	800cfee <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfdc:	4b07      	ldr	r3, [pc, #28]	@ (800cffc <USBD_CDC_Init+0x1e8>)
 800cfde:	7819      	ldrb	r1, [r3, #0]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfe6:	2340      	movs	r3, #64	@ 0x40
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f002 fb9d 	bl	800f728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20000093 	.word	0x20000093
 800cffc:	20000094 	.word	0x20000094
 800d000:	20000095 	.word	0x20000095

0800d004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d010:	4b3a      	ldr	r3, [pc, #232]	@ (800d0fc <USBD_CDC_DeInit+0xf8>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f002 fabd 	bl	800f596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d01c:	4b37      	ldr	r3, [pc, #220]	@ (800d0fc <USBD_CDC_DeInit+0xf8>)
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	f003 020f 	and.w	r2, r3, #15
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	4613      	mov	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	440b      	add	r3, r1
 800d030:	3323      	adds	r3, #35	@ 0x23
 800d032:	2200      	movs	r2, #0
 800d034:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d036:	4b32      	ldr	r3, [pc, #200]	@ (800d100 <USBD_CDC_DeInit+0xfc>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f002 faaa 	bl	800f596 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d042:	4b2f      	ldr	r3, [pc, #188]	@ (800d100 <USBD_CDC_DeInit+0xfc>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	f003 020f 	and.w	r2, r3, #15
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	4613      	mov	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	4413      	add	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	440b      	add	r3, r1
 800d056:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d05e:	4b29      	ldr	r3, [pc, #164]	@ (800d104 <USBD_CDC_DeInit+0x100>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f002 fa96 	bl	800f596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d06a:	4b26      	ldr	r3, [pc, #152]	@ (800d104 <USBD_CDC_DeInit+0x100>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 020f 	and.w	r2, r3, #15
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	440b      	add	r3, r1
 800d07e:	3323      	adds	r3, #35	@ 0x23
 800d080:	2200      	movs	r2, #0
 800d082:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d084:	4b1f      	ldr	r3, [pc, #124]	@ (800d104 <USBD_CDC_DeInit+0x100>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 020f 	and.w	r2, r3, #15
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	4613      	mov	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4413      	add	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	440b      	add	r3, r1
 800d098:	331c      	adds	r3, #28
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	32b0      	adds	r2, #176	@ 0xb0
 800d0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d01f      	beq.n	800d0f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	33b0      	adds	r3, #176	@ 0xb0
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	32b0      	adds	r2, #176	@ 0xb0
 800d0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f002 fbe4 	bl	800f8a0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	32b0      	adds	r2, #176	@ 0xb0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20000093 	.word	0x20000093
 800d100:	20000094 	.word	0x20000094
 800d104:	20000095 	.word	0x20000095

0800d108 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	32b0      	adds	r2, #176	@ 0xb0
 800d11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d120:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d134:	2303      	movs	r3, #3
 800d136:	e0bf      	b.n	800d2b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d140:	2b00      	cmp	r3, #0
 800d142:	d050      	beq.n	800d1e6 <USBD_CDC_Setup+0xde>
 800d144:	2b20      	cmp	r3, #32
 800d146:	f040 80af 	bne.w	800d2a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	88db      	ldrh	r3, [r3, #6]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d03a      	beq.n	800d1c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	b25b      	sxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da1b      	bge.n	800d194 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	33b0      	adds	r3, #176	@ 0xb0
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d172:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	88d2      	ldrh	r2, [r2, #6]
 800d178:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	88db      	ldrh	r3, [r3, #6]
 800d17e:	2b07      	cmp	r3, #7
 800d180:	bf28      	it	cs
 800d182:	2307      	movcs	r3, #7
 800d184:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	89fa      	ldrh	r2, [r7, #14]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 fd93 	bl	800ecb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d192:	e090      	b.n	800d2b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	785a      	ldrb	r2, [r3, #1]
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	88db      	ldrh	r3, [r3, #6]
 800d1a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d1a4:	d803      	bhi.n	800d1ae <USBD_CDC_Setup+0xa6>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	e000      	b.n	800d1b0 <USBD_CDC_Setup+0xa8>
 800d1ae:	2240      	movs	r2, #64	@ 0x40
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d1b6:	6939      	ldr	r1, [r7, #16]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d1be:	461a      	mov	r2, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 fda8 	bl	800ed16 <USBD_CtlPrepareRx>
      break;
 800d1c6:	e076      	b.n	800d2b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	33b0      	adds	r3, #176	@ 0xb0
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	7850      	ldrb	r0, [r2, #1]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	4798      	blx	r3
      break;
 800d1e4:	e067      	b.n	800d2b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	2b0b      	cmp	r3, #11
 800d1ec:	d851      	bhi.n	800d292 <USBD_CDC_Setup+0x18a>
 800d1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f4 <USBD_CDC_Setup+0xec>)
 800d1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f4:	0800d225 	.word	0x0800d225
 800d1f8:	0800d2a1 	.word	0x0800d2a1
 800d1fc:	0800d293 	.word	0x0800d293
 800d200:	0800d293 	.word	0x0800d293
 800d204:	0800d293 	.word	0x0800d293
 800d208:	0800d293 	.word	0x0800d293
 800d20c:	0800d293 	.word	0x0800d293
 800d210:	0800d293 	.word	0x0800d293
 800d214:	0800d293 	.word	0x0800d293
 800d218:	0800d293 	.word	0x0800d293
 800d21c:	0800d24f 	.word	0x0800d24f
 800d220:	0800d279 	.word	0x0800d279
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d107      	bne.n	800d240 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d230:	f107 030a 	add.w	r3, r7, #10
 800d234:	2202      	movs	r2, #2
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 fd3d 	bl	800ecb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d23e:	e032      	b.n	800d2a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 fcbb 	bl	800ebbe <USBD_CtlError>
            ret = USBD_FAIL;
 800d248:	2303      	movs	r3, #3
 800d24a:	75fb      	strb	r3, [r7, #23]
          break;
 800d24c:	e02b      	b.n	800d2a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b03      	cmp	r3, #3
 800d258:	d107      	bne.n	800d26a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d25a:	f107 030d 	add.w	r3, r7, #13
 800d25e:	2201      	movs	r2, #1
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f001 fd28 	bl	800ecb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d268:	e01d      	b.n	800d2a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f001 fca6 	bl	800ebbe <USBD_CtlError>
            ret = USBD_FAIL;
 800d272:	2303      	movs	r3, #3
 800d274:	75fb      	strb	r3, [r7, #23]
          break;
 800d276:	e016      	b.n	800d2a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b03      	cmp	r3, #3
 800d282:	d00f      	beq.n	800d2a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 fc99 	bl	800ebbe <USBD_CtlError>
            ret = USBD_FAIL;
 800d28c:	2303      	movs	r3, #3
 800d28e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d290:	e008      	b.n	800d2a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f001 fc92 	bl	800ebbe <USBD_CtlError>
          ret = USBD_FAIL;
 800d29a:	2303      	movs	r3, #3
 800d29c:	75fb      	strb	r3, [r7, #23]
          break;
 800d29e:	e002      	b.n	800d2a6 <USBD_CDC_Setup+0x19e>
          break;
 800d2a0:	bf00      	nop
 800d2a2:	e008      	b.n	800d2b6 <USBD_CDC_Setup+0x1ae>
          break;
 800d2a4:	bf00      	nop
      }
      break;
 800d2a6:	e006      	b.n	800d2b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 fc87 	bl	800ebbe <USBD_CtlError>
      ret = USBD_FAIL;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3718      	adds	r7, #24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	32b0      	adds	r2, #176	@ 0xb0
 800d2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e065      	b.n	800d3b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	32b0      	adds	r2, #176	@ 0xb0
 800d2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	f003 020f 	and.w	r2, r3, #15
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	4613      	mov	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4413      	add	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	440b      	add	r3, r1
 800d30c:	3314      	adds	r3, #20
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d02f      	beq.n	800d374 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	f003 020f 	and.w	r2, r3, #15
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	3314      	adds	r3, #20
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	f003 010f 	and.w	r1, r3, #15
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	460b      	mov	r3, r1
 800d334:	00db      	lsls	r3, r3, #3
 800d336:	440b      	add	r3, r1
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4403      	add	r3, r0
 800d33c:	331c      	adds	r3, #28
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	fbb2 f1f3 	udiv	r1, r2, r3
 800d344:	fb01 f303 	mul.w	r3, r1, r3
 800d348:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d112      	bne.n	800d374 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d34e:	78fb      	ldrb	r3, [r7, #3]
 800d350:	f003 020f 	and.w	r2, r3, #15
 800d354:	6879      	ldr	r1, [r7, #4]
 800d356:	4613      	mov	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	440b      	add	r3, r1
 800d360:	3314      	adds	r3, #20
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d366:	78f9      	ldrb	r1, [r7, #3]
 800d368:	2300      	movs	r3, #0
 800d36a:	2200      	movs	r2, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f002 f9ba 	bl	800f6e6 <USBD_LL_Transmit>
 800d372:	e01f      	b.n	800d3b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2200      	movs	r2, #0
 800d378:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	33b0      	adds	r3, #176	@ 0xb0
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d010      	beq.n	800d3b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	33b0      	adds	r3, #176	@ 0xb0
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d3b0:	78fa      	ldrb	r2, [r7, #3]
 800d3b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b084      	sub	sp, #16
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	32b0      	adds	r2, #176	@ 0xb0
 800d3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	32b0      	adds	r2, #176	@ 0xb0
 800d3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e01a      	b.n	800d426 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f002 f9b8 	bl	800f76a <USBD_LL_GetRxDataSize>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	33b0      	adds	r3, #176	@ 0xb0
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d420:	4611      	mov	r1, r2
 800d422:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b084      	sub	sp, #16
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	32b0      	adds	r2, #176	@ 0xb0
 800d440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e024      	b.n	800d49a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	33b0      	adds	r3, #176	@ 0xb0
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d019      	beq.n	800d498 <USBD_CDC_EP0_RxReady+0x6a>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d46a:	2bff      	cmp	r3, #255	@ 0xff
 800d46c:	d014      	beq.n	800d498 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	33b0      	adds	r3, #176	@ 0xb0
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d486:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d48e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	22ff      	movs	r2, #255	@ 0xff
 800d494:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4ac:	2182      	movs	r1, #130	@ 0x82
 800d4ae:	4818      	ldr	r0, [pc, #96]	@ (800d510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4b0:	f000 fd22 	bl	800def8 <USBD_GetEpDesc>
 800d4b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	4815      	ldr	r0, [pc, #84]	@ (800d510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4ba:	f000 fd1d 	bl	800def8 <USBD_GetEpDesc>
 800d4be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4c0:	2181      	movs	r1, #129	@ 0x81
 800d4c2:	4813      	ldr	r0, [pc, #76]	@ (800d510 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4c4:	f000 fd18 	bl	800def8 <USBD_GetEpDesc>
 800d4c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2210      	movs	r2, #16
 800d4d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d006      	beq.n	800d4ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4e4:	711a      	strb	r2, [r3, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d006      	beq.n	800d4fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4f8:	711a      	strb	r2, [r3, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2243      	movs	r2, #67	@ 0x43
 800d502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d504:	4b02      	ldr	r3, [pc, #8]	@ (800d510 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20000050 	.word	0x20000050

0800d514 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d51c:	2182      	movs	r1, #130	@ 0x82
 800d51e:	4818      	ldr	r0, [pc, #96]	@ (800d580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d520:	f000 fcea 	bl	800def8 <USBD_GetEpDesc>
 800d524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d526:	2101      	movs	r1, #1
 800d528:	4815      	ldr	r0, [pc, #84]	@ (800d580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d52a:	f000 fce5 	bl	800def8 <USBD_GetEpDesc>
 800d52e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d530:	2181      	movs	r1, #129	@ 0x81
 800d532:	4813      	ldr	r0, [pc, #76]	@ (800d580 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d534:	f000 fce0 	bl	800def8 <USBD_GetEpDesc>
 800d538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2210      	movs	r2, #16
 800d544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d006      	beq.n	800d55a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	2200      	movs	r2, #0
 800d550:	711a      	strb	r2, [r3, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f042 0202 	orr.w	r2, r2, #2
 800d558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	711a      	strb	r2, [r3, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f042 0202 	orr.w	r2, r2, #2
 800d56c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2243      	movs	r2, #67	@ 0x43
 800d572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d574:	4b02      	ldr	r3, [pc, #8]	@ (800d580 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20000050 	.word	0x20000050

0800d584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d58c:	2182      	movs	r1, #130	@ 0x82
 800d58e:	4818      	ldr	r0, [pc, #96]	@ (800d5f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d590:	f000 fcb2 	bl	800def8 <USBD_GetEpDesc>
 800d594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d596:	2101      	movs	r1, #1
 800d598:	4815      	ldr	r0, [pc, #84]	@ (800d5f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d59a:	f000 fcad 	bl	800def8 <USBD_GetEpDesc>
 800d59e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5a0:	2181      	movs	r1, #129	@ 0x81
 800d5a2:	4813      	ldr	r0, [pc, #76]	@ (800d5f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5a4:	f000 fca8 	bl	800def8 <USBD_GetEpDesc>
 800d5a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2210      	movs	r2, #16
 800d5b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5c4:	711a      	strb	r2, [r3, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d006      	beq.n	800d5de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5d8:	711a      	strb	r2, [r3, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2243      	movs	r2, #67	@ 0x43
 800d5e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5e4:	4b02      	ldr	r3, [pc, #8]	@ (800d5f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20000050 	.word	0x20000050

0800d5f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	220a      	movs	r2, #10
 800d600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d602:	4b03      	ldr	r3, [pc, #12]	@ (800d610 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d604:	4618      	mov	r0, r3
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr
 800d610:	2000000c 	.word	0x2000000c

0800d614 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	e009      	b.n	800d63c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	33b0      	adds	r3, #176	@ 0xb0
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	683a      	ldr	r2, [r7, #0]
 800d638:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d648:	b480      	push	{r7}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	32b0      	adds	r2, #176	@ 0xb0
 800d65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d662:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e008      	b.n	800d680 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	371c      	adds	r7, #28
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	32b0      	adds	r2, #176	@ 0xb0
 800d6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d6ac:	2303      	movs	r3, #3
 800d6ae:	e004      	b.n	800d6ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3714      	adds	r7, #20
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	32b0      	adds	r2, #176	@ 0xb0
 800d6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	32b0      	adds	r2, #176	@ 0xb0
 800d6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	e018      	b.n	800d728 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7c1b      	ldrb	r3, [r3, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10a      	bne.n	800d714 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d730 <USBD_CDC_ReceivePacket+0x68>)
 800d700:	7819      	ldrb	r1, [r3, #0]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f002 f80b 	bl	800f728 <USBD_LL_PrepareReceive>
 800d712:	e008      	b.n	800d726 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d714:	4b06      	ldr	r3, [pc, #24]	@ (800d730 <USBD_CDC_ReceivePacket+0x68>)
 800d716:	7819      	ldrb	r1, [r3, #0]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d71e:	2340      	movs	r3, #64	@ 0x40
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f002 f801 	bl	800f728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20000094 	.word	0x20000094

0800d734 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	4613      	mov	r3, r2
 800d740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d748:	2303      	movs	r3, #3
 800d74a:	e01f      	b.n	800d78c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d003      	beq.n	800d772 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	79fa      	ldrb	r2, [r7, #7]
 800d77e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f001 fe77 	bl	800f474 <USBD_LL_Init>
 800d786:	4603      	mov	r3, r0
 800d788:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d101      	bne.n	800d7ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e025      	b.n	800d7f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	32ae      	adds	r2, #174	@ 0xae
 800d7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00f      	beq.n	800d7e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	32ae      	adds	r2, #174	@ 0xae
 800d7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	f107 020e 	add.w	r2, r7, #14
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4798      	blx	r3
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f001 fe83 	bl	800f514 <USBD_LL_Start>
 800d80e:	4603      	mov	r3, r0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d820:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	460b      	mov	r3, r1
 800d838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d009      	beq.n	800d85c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	4611      	mov	r1, r2
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	4798      	blx	r3
 800d858:	4603      	mov	r3, r0
 800d85a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	460b      	mov	r3, r1
 800d870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	78fa      	ldrb	r2, [r7, #3]
 800d880:	4611      	mov	r1, r2
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4798      	blx	r3
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8aa:	6839      	ldr	r1, [r7, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f001 f94c 	bl	800eb4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8ce:	f003 031f 	and.w	r3, r3, #31
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d01a      	beq.n	800d90c <USBD_LL_SetupStage+0x72>
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d822      	bhi.n	800d920 <USBD_LL_SetupStage+0x86>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <USBD_LL_SetupStage+0x4a>
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d00a      	beq.n	800d8f8 <USBD_LL_SetupStage+0x5e>
 800d8e2:	e01d      	b.n	800d920 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fb77 	bl	800dfe0 <USBD_StdDevReq>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8f6:	e020      	b.n	800d93a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fbdf 	bl	800e0c4 <USBD_StdItfReq>
 800d906:	4603      	mov	r3, r0
 800d908:	73fb      	strb	r3, [r7, #15]
      break;
 800d90a:	e016      	b.n	800d93a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fc41 	bl	800e19c <USBD_StdEPReq>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]
      break;
 800d91e:	e00c      	b.n	800d93a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d926:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 fe50 	bl	800f5d4 <USBD_LL_StallEP>
 800d934:	4603      	mov	r3, r0
 800d936:	73fb      	strb	r3, [r7, #15]
      break;
 800d938:	bf00      	nop
  }

  return ret;
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	460b      	mov	r3, r1
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d956:	7afb      	ldrb	r3, [r7, #11]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d177      	bne.n	800da4c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d962:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	f040 80a1 	bne.w	800dab2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	8992      	ldrh	r2, [r2, #12]
 800d978:	4293      	cmp	r3, r2
 800d97a:	d91c      	bls.n	800d9b6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	8992      	ldrh	r2, [r2, #12]
 800d984:	1a9a      	subs	r2, r3, r2
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	8992      	ldrh	r2, [r2, #12]
 800d992:	441a      	add	r2, r3
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6919      	ldr	r1, [r3, #16]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	899b      	ldrh	r3, [r3, #12]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	bf38      	it	cc
 800d9aa:	4613      	movcc	r3, r2
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f001 f9d2 	bl	800ed58 <USBD_CtlContinueRx>
 800d9b4:	e07d      	b.n	800dab2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d9bc:	f003 031f 	and.w	r3, r3, #31
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d014      	beq.n	800d9ee <USBD_LL_DataOutStage+0xaa>
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d81d      	bhi.n	800da04 <USBD_LL_DataOutStage+0xc0>
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <USBD_LL_DataOutStage+0x8e>
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d003      	beq.n	800d9d8 <USBD_LL_DataOutStage+0x94>
 800d9d0:	e018      	b.n	800da04 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75bb      	strb	r3, [r7, #22]
            break;
 800d9d6:	e018      	b.n	800da0a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f000 fa6e 	bl	800dec4 <USBD_CoreFindIF>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	75bb      	strb	r3, [r7, #22]
            break;
 800d9ec:	e00d      	b.n	800da0a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f000 fa70 	bl	800dede <USBD_CoreFindEP>
 800d9fe:	4603      	mov	r3, r0
 800da00:	75bb      	strb	r3, [r7, #22]
            break;
 800da02:	e002      	b.n	800da0a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800da04:	2300      	movs	r3, #0
 800da06:	75bb      	strb	r3, [r7, #22]
            break;
 800da08:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800da0a:	7dbb      	ldrb	r3, [r7, #22]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d119      	bne.n	800da44 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da16:	b2db      	uxtb	r3, r3
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d113      	bne.n	800da44 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800da1c:	7dba      	ldrb	r2, [r7, #22]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	32ae      	adds	r2, #174	@ 0xae
 800da22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00b      	beq.n	800da44 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800da2c:	7dba      	ldrb	r2, [r7, #22]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800da34:	7dba      	ldrb	r2, [r7, #22]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	32ae      	adds	r2, #174	@ 0xae
 800da3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f001 f998 	bl	800ed7a <USBD_CtlSendStatus>
 800da4a:	e032      	b.n	800dab2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da52:	b2db      	uxtb	r3, r3
 800da54:	4619      	mov	r1, r3
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 fa41 	bl	800dede <USBD_CoreFindEP>
 800da5c:	4603      	mov	r3, r0
 800da5e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da60:	7dbb      	ldrb	r3, [r7, #22]
 800da62:	2bff      	cmp	r3, #255	@ 0xff
 800da64:	d025      	beq.n	800dab2 <USBD_LL_DataOutStage+0x16e>
 800da66:	7dbb      	ldrb	r3, [r7, #22]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d122      	bne.n	800dab2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b03      	cmp	r3, #3
 800da76:	d117      	bne.n	800daa8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800da78:	7dba      	ldrb	r2, [r7, #22]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	32ae      	adds	r2, #174	@ 0xae
 800da7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00f      	beq.n	800daa8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800da88:	7dba      	ldrb	r2, [r7, #22]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da90:	7dba      	ldrb	r2, [r7, #22]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	32ae      	adds	r2, #174	@ 0xae
 800da96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	7afa      	ldrb	r2, [r7, #11]
 800da9e:	4611      	mov	r1, r2
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	4798      	blx	r3
 800daa4:	4603      	mov	r3, r0
 800daa6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	e000      	b.n	800dab4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	460b      	mov	r3, r1
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800daca:	7afb      	ldrb	r3, [r7, #11]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d178      	bne.n	800dbc2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3314      	adds	r3, #20
 800dad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d163      	bne.n	800dba8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	8992      	ldrh	r2, [r2, #12]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d91c      	bls.n	800db26 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	8992      	ldrh	r2, [r2, #12]
 800daf4:	1a9a      	subs	r2, r3, r2
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	8992      	ldrh	r2, [r2, #12]
 800db02:	441a      	add	r2, r3
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	6919      	ldr	r1, [r3, #16]
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	461a      	mov	r2, r3
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f001 f8ee 	bl	800ecf4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db18:	2300      	movs	r3, #0
 800db1a:	2200      	movs	r2, #0
 800db1c:	2100      	movs	r1, #0
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f001 fe02 	bl	800f728 <USBD_LL_PrepareReceive>
 800db24:	e040      	b.n	800dba8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	899b      	ldrh	r3, [r3, #12]
 800db2a:	461a      	mov	r2, r3
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	429a      	cmp	r2, r3
 800db32:	d11c      	bne.n	800db6e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d316      	bcc.n	800db6e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d20f      	bcs.n	800db6e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800db4e:	2200      	movs	r2, #0
 800db50:	2100      	movs	r1, #0
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f001 f8ce 	bl	800ecf4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db60:	2300      	movs	r3, #0
 800db62:	2200      	movs	r2, #0
 800db64:	2100      	movs	r1, #0
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f001 fdde 	bl	800f728 <USBD_LL_PrepareReceive>
 800db6c:	e01c      	b.n	800dba8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b03      	cmp	r3, #3
 800db78:	d10f      	bne.n	800db9a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db9a:	2180      	movs	r1, #128	@ 0x80
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f001 fd19 	bl	800f5d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f001 f8fc 	bl	800eda0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d03a      	beq.n	800dc28 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fe30 	bl	800d818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dbc0:	e032      	b.n	800dc28 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dbc2:	7afb      	ldrb	r3, [r7, #11]
 800dbc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	4619      	mov	r1, r3
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f986 	bl	800dede <USBD_CoreFindEP>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	2bff      	cmp	r3, #255	@ 0xff
 800dbda:	d025      	beq.n	800dc28 <USBD_LL_DataInStage+0x16c>
 800dbdc:	7dfb      	ldrb	r3, [r7, #23]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d122      	bne.n	800dc28 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d11c      	bne.n	800dc28 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dbee:	7dfa      	ldrb	r2, [r7, #23]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	32ae      	adds	r2, #174	@ 0xae
 800dbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d014      	beq.n	800dc28 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800dbfe:	7dfa      	ldrb	r2, [r7, #23]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dc06:	7dfa      	ldrb	r2, [r7, #23]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	32ae      	adds	r2, #174	@ 0xae
 800dc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	7afa      	ldrb	r2, [r7, #11]
 800dc14:	4611      	mov	r1, r2
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	4798      	blx	r3
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dc1e:	7dbb      	ldrb	r3, [r7, #22]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800dc24:	7dbb      	ldrb	r3, [r7, #22]
 800dc26:	e000      	b.n	800dc2a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d014      	beq.n	800dc98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00e      	beq.n	800dc98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	6852      	ldr	r2, [r2, #4]
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	4611      	mov	r1, r2
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	4798      	blx	r3
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc94:	2303      	movs	r3, #3
 800dc96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc98:	2340      	movs	r3, #64	@ 0x40
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f001 fc53 	bl	800f54a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2240      	movs	r2, #64	@ 0x40
 800dcb0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcb4:	2340      	movs	r3, #64	@ 0x40
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	2180      	movs	r1, #128	@ 0x80
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f001 fc45 	bl	800f54a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2240      	movs	r2, #64	@ 0x40
 800dccc:	841a      	strh	r2, [r3, #32]

  return ret;
 800dcce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	78fa      	ldrb	r2, [r7, #3]
 800dce8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	d006      	beq.n	800dd1a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2204      	movs	r2, #4
 800dd1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b04      	cmp	r3, #4
 800dd42:	d106      	bne.n	800dd52 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dd4a:	b2da      	uxtb	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d110      	bne.n	800dd96 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00b      	beq.n	800dd96 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd84:	69db      	ldr	r3, [r3, #28]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d005      	beq.n	800dd96 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd90:	69db      	ldr	r3, [r3, #28]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	32ae      	adds	r2, #174	@ 0xae
 800ddb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e01c      	b.n	800ddfc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b03      	cmp	r3, #3
 800ddcc:	d115      	bne.n	800ddfa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	32ae      	adds	r2, #174	@ 0xae
 800ddd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00b      	beq.n	800ddfa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	32ae      	adds	r2, #174	@ 0xae
 800ddec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	78fa      	ldrb	r2, [r7, #3]
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	32ae      	adds	r2, #174	@ 0xae
 800de1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d101      	bne.n	800de26 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800de22:	2303      	movs	r3, #3
 800de24:	e01c      	b.n	800de60 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d115      	bne.n	800de5e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	32ae      	adds	r2, #174	@ 0xae
 800de3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00b      	beq.n	800de5e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	32ae      	adds	r2, #174	@ 0xae
 800de50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b084      	sub	sp, #16
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00e      	beq.n	800deba <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	6852      	ldr	r2, [r2, #4]
 800dea8:	b2d2      	uxtb	r2, r2
 800deaa:	4611      	mov	r1, r2
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	4798      	blx	r3
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800deb6:	2303      	movs	r3, #3
 800deb8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800deba:	7bfb      	ldrb	r3, [r7, #15]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ded0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dede:	b480      	push	{r7}
 800dee0:	b083      	sub	sp, #12
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800deea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	885b      	ldrh	r3, [r3, #2]
 800df14:	b29b      	uxth	r3, r3
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	7812      	ldrb	r2, [r2, #0]
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d91f      	bls.n	800df5e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df24:	e013      	b.n	800df4e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df26:	f107 030a 	add.w	r3, r7, #10
 800df2a:	4619      	mov	r1, r3
 800df2c:	6978      	ldr	r0, [r7, #20]
 800df2e:	f000 f81b 	bl	800df68 <USBD_GetNextDesc>
 800df32:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	785b      	ldrb	r3, [r3, #1]
 800df38:	2b05      	cmp	r3, #5
 800df3a:	d108      	bne.n	800df4e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	789b      	ldrb	r3, [r3, #2]
 800df44:	78fa      	ldrb	r2, [r7, #3]
 800df46:	429a      	cmp	r2, r3
 800df48:	d008      	beq.n	800df5c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df4a:	2300      	movs	r3, #0
 800df4c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	885b      	ldrh	r3, [r3, #2]
 800df52:	b29a      	uxth	r2, r3
 800df54:	897b      	ldrh	r3, [r7, #10]
 800df56:	429a      	cmp	r2, r3
 800df58:	d8e5      	bhi.n	800df26 <USBD_GetEpDesc+0x2e>
 800df5a:	e000      	b.n	800df5e <USBD_GetEpDesc+0x66>
          break;
 800df5c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df5e:	693b      	ldr	r3, [r7, #16]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	7812      	ldrb	r2, [r2, #0]
 800df7e:	4413      	add	r3, r2
 800df80:	b29a      	uxth	r2, r3
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	461a      	mov	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4413      	add	r3, r2
 800df90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df92:	68fb      	ldr	r3, [r7, #12]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b087      	sub	sp, #28
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfc2:	021b      	lsls	r3, r3, #8
 800dfc4:	b21a      	sxth	r2, r3
 800dfc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfd0:	89fb      	ldrh	r3, [r7, #14]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
	...

0800dfe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dff6:	2b40      	cmp	r3, #64	@ 0x40
 800dff8:	d005      	beq.n	800e006 <USBD_StdDevReq+0x26>
 800dffa:	2b40      	cmp	r3, #64	@ 0x40
 800dffc:	d857      	bhi.n	800e0ae <USBD_StdDevReq+0xce>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00f      	beq.n	800e022 <USBD_StdDevReq+0x42>
 800e002:	2b20      	cmp	r3, #32
 800e004:	d153      	bne.n	800e0ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	32ae      	adds	r2, #174	@ 0xae
 800e010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	4798      	blx	r3
 800e01c:	4603      	mov	r3, r0
 800e01e:	73fb      	strb	r3, [r7, #15]
      break;
 800e020:	e04a      	b.n	800e0b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	785b      	ldrb	r3, [r3, #1]
 800e026:	2b09      	cmp	r3, #9
 800e028:	d83b      	bhi.n	800e0a2 <USBD_StdDevReq+0xc2>
 800e02a:	a201      	add	r2, pc, #4	@ (adr r2, 800e030 <USBD_StdDevReq+0x50>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e085 	.word	0x0800e085
 800e034:	0800e099 	.word	0x0800e099
 800e038:	0800e0a3 	.word	0x0800e0a3
 800e03c:	0800e08f 	.word	0x0800e08f
 800e040:	0800e0a3 	.word	0x0800e0a3
 800e044:	0800e063 	.word	0x0800e063
 800e048:	0800e059 	.word	0x0800e059
 800e04c:	0800e0a3 	.word	0x0800e0a3
 800e050:	0800e07b 	.word	0x0800e07b
 800e054:	0800e06d 	.word	0x0800e06d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa3e 	bl	800e4dc <USBD_GetDescriptor>
          break;
 800e060:	e024      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fbcd 	bl	800e804 <USBD_SetAddress>
          break;
 800e06a:	e01f      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fc0c 	bl	800e88c <USBD_SetConfig>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]
          break;
 800e078:	e018      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fcaf 	bl	800e9e0 <USBD_GetConfig>
          break;
 800e082:	e013      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fce0 	bl	800ea4c <USBD_GetStatus>
          break;
 800e08c:	e00e      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fd0f 	bl	800eab4 <USBD_SetFeature>
          break;
 800e096:	e009      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fd33 	bl	800eb06 <USBD_ClrFeature>
          break;
 800e0a0:	e004      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fd8a 	bl	800ebbe <USBD_CtlError>
          break;
 800e0aa:	bf00      	nop
      }
      break;
 800e0ac:	e004      	b.n	800e0b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fd84 	bl	800ebbe <USBD_CtlError>
      break;
 800e0b6:	bf00      	nop
  }

  return ret;
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop

0800e0c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0da:	2b40      	cmp	r3, #64	@ 0x40
 800e0dc:	d005      	beq.n	800e0ea <USBD_StdItfReq+0x26>
 800e0de:	2b40      	cmp	r3, #64	@ 0x40
 800e0e0:	d852      	bhi.n	800e188 <USBD_StdItfReq+0xc4>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <USBD_StdItfReq+0x26>
 800e0e6:	2b20      	cmp	r3, #32
 800e0e8:	d14e      	bne.n	800e188 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d840      	bhi.n	800e17a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	889b      	ldrh	r3, [r3, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d836      	bhi.n	800e170 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	889b      	ldrh	r3, [r3, #4]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff feda 	bl	800dec4 <USBD_CoreFindIF>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	2bff      	cmp	r3, #255	@ 0xff
 800e118:	d01d      	beq.n	800e156 <USBD_StdItfReq+0x92>
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d11a      	bne.n	800e156 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e120:	7bba      	ldrb	r2, [r7, #14]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	32ae      	adds	r2, #174	@ 0xae
 800e126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00f      	beq.n	800e150 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e130:	7bba      	ldrb	r2, [r7, #14]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e138:	7bba      	ldrb	r2, [r7, #14]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	32ae      	adds	r2, #174	@ 0xae
 800e13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	4798      	blx	r3
 800e14a:	4603      	mov	r3, r0
 800e14c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e14e:	e004      	b.n	800e15a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e150:	2303      	movs	r3, #3
 800e152:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e154:	e001      	b.n	800e15a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e156:	2303      	movs	r3, #3
 800e158:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	88db      	ldrh	r3, [r3, #6]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d110      	bne.n	800e184 <USBD_StdItfReq+0xc0>
 800e162:	7bfb      	ldrb	r3, [r7, #15]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10d      	bne.n	800e184 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fe06 	bl	800ed7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e16e:	e009      	b.n	800e184 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fd23 	bl	800ebbe <USBD_CtlError>
          break;
 800e178:	e004      	b.n	800e184 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e17a:	6839      	ldr	r1, [r7, #0]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 fd1e 	bl	800ebbe <USBD_CtlError>
          break;
 800e182:	e000      	b.n	800e186 <USBD_StdItfReq+0xc2>
          break;
 800e184:	bf00      	nop
      }
      break;
 800e186:	e004      	b.n	800e192 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fd17 	bl	800ebbe <USBD_CtlError>
      break;
 800e190:	bf00      	nop
  }

  return ret;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	889b      	ldrh	r3, [r3, #4]
 800e1ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1b8:	2b40      	cmp	r3, #64	@ 0x40
 800e1ba:	d007      	beq.n	800e1cc <USBD_StdEPReq+0x30>
 800e1bc:	2b40      	cmp	r3, #64	@ 0x40
 800e1be:	f200 8181 	bhi.w	800e4c4 <USBD_StdEPReq+0x328>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02a      	beq.n	800e21c <USBD_StdEPReq+0x80>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	f040 817c 	bne.w	800e4c4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff fe84 	bl	800dede <USBD_CoreFindEP>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1da:	7b7b      	ldrb	r3, [r7, #13]
 800e1dc:	2bff      	cmp	r3, #255	@ 0xff
 800e1de:	f000 8176 	beq.w	800e4ce <USBD_StdEPReq+0x332>
 800e1e2:	7b7b      	ldrb	r3, [r7, #13]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f040 8172 	bne.w	800e4ce <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e1ea:	7b7a      	ldrb	r2, [r7, #13]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e1f2:	7b7a      	ldrb	r2, [r7, #13]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	32ae      	adds	r2, #174	@ 0xae
 800e1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 8165 	beq.w	800e4ce <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e204:	7b7a      	ldrb	r2, [r7, #13]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	32ae      	adds	r2, #174	@ 0xae
 800e20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e21a:	e158      	b.n	800e4ce <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	2b03      	cmp	r3, #3
 800e222:	d008      	beq.n	800e236 <USBD_StdEPReq+0x9a>
 800e224:	2b03      	cmp	r3, #3
 800e226:	f300 8147 	bgt.w	800e4b8 <USBD_StdEPReq+0x31c>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 809b 	beq.w	800e366 <USBD_StdEPReq+0x1ca>
 800e230:	2b01      	cmp	r3, #1
 800e232:	d03c      	beq.n	800e2ae <USBD_StdEPReq+0x112>
 800e234:	e140      	b.n	800e4b8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d002      	beq.n	800e248 <USBD_StdEPReq+0xac>
 800e242:	2b03      	cmp	r3, #3
 800e244:	d016      	beq.n	800e274 <USBD_StdEPReq+0xd8>
 800e246:	e02c      	b.n	800e2a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00d      	beq.n	800e26a <USBD_StdEPReq+0xce>
 800e24e:	7bbb      	ldrb	r3, [r7, #14]
 800e250:	2b80      	cmp	r3, #128	@ 0x80
 800e252:	d00a      	beq.n	800e26a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 f9bb 	bl	800f5d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e25e:	2180      	movs	r1, #128	@ 0x80
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f001 f9b7 	bl	800f5d4 <USBD_LL_StallEP>
 800e266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e268:	e020      	b.n	800e2ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e26a:	6839      	ldr	r1, [r7, #0]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fca6 	bl	800ebbe <USBD_CtlError>
              break;
 800e272:	e01b      	b.n	800e2ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	885b      	ldrh	r3, [r3, #2]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10e      	bne.n	800e29a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e27c:	7bbb      	ldrb	r3, [r7, #14]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <USBD_StdEPReq+0xfe>
 800e282:	7bbb      	ldrb	r3, [r7, #14]
 800e284:	2b80      	cmp	r3, #128	@ 0x80
 800e286:	d008      	beq.n	800e29a <USBD_StdEPReq+0xfe>
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	88db      	ldrh	r3, [r3, #6]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d104      	bne.n	800e29a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e290:	7bbb      	ldrb	r3, [r7, #14]
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f001 f99d 	bl	800f5d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fd6d 	bl	800ed7a <USBD_CtlSendStatus>

              break;
 800e2a0:	e004      	b.n	800e2ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fc8a 	bl	800ebbe <USBD_CtlError>
              break;
 800e2aa:	bf00      	nop
          }
          break;
 800e2ac:	e109      	b.n	800e4c2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d002      	beq.n	800e2c0 <USBD_StdEPReq+0x124>
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d016      	beq.n	800e2ec <USBD_StdEPReq+0x150>
 800e2be:	e04b      	b.n	800e358 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <USBD_StdEPReq+0x146>
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b80      	cmp	r3, #128	@ 0x80
 800e2ca:	d00a      	beq.n	800e2e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f001 f97f 	bl	800f5d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2d6:	2180      	movs	r1, #128	@ 0x80
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 f97b 	bl	800f5d4 <USBD_LL_StallEP>
 800e2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2e0:	e040      	b.n	800e364 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e2e2:	6839      	ldr	r1, [r7, #0]
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fc6a 	bl	800ebbe <USBD_CtlError>
              break;
 800e2ea:	e03b      	b.n	800e364 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	885b      	ldrh	r3, [r3, #2]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d136      	bne.n	800e362 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e2f4:	7bbb      	ldrb	r3, [r7, #14]
 800e2f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d004      	beq.n	800e308 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f001 f985 	bl	800f612 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fd36 	bl	800ed7a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	4619      	mov	r1, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff fde3 	bl	800dede <USBD_CoreFindEP>
 800e318:	4603      	mov	r3, r0
 800e31a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e31c:	7b7b      	ldrb	r3, [r7, #13]
 800e31e:	2bff      	cmp	r3, #255	@ 0xff
 800e320:	d01f      	beq.n	800e362 <USBD_StdEPReq+0x1c6>
 800e322:	7b7b      	ldrb	r3, [r7, #13]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d11c      	bne.n	800e362 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e328:	7b7a      	ldrb	r2, [r7, #13]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e330:	7b7a      	ldrb	r2, [r7, #13]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	32ae      	adds	r2, #174	@ 0xae
 800e336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d010      	beq.n	800e362 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e340:	7b7a      	ldrb	r2, [r7, #13]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	32ae      	adds	r2, #174	@ 0xae
 800e346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	4798      	blx	r3
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e356:	e004      	b.n	800e362 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fc2f 	bl	800ebbe <USBD_CtlError>
              break;
 800e360:	e000      	b.n	800e364 <USBD_StdEPReq+0x1c8>
              break;
 800e362:	bf00      	nop
          }
          break;
 800e364:	e0ad      	b.n	800e4c2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d002      	beq.n	800e378 <USBD_StdEPReq+0x1dc>
 800e372:	2b03      	cmp	r3, #3
 800e374:	d033      	beq.n	800e3de <USBD_StdEPReq+0x242>
 800e376:	e099      	b.n	800e4ac <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e378:	7bbb      	ldrb	r3, [r7, #14]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <USBD_StdEPReq+0x1f2>
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	2b80      	cmp	r3, #128	@ 0x80
 800e382:	d004      	beq.n	800e38e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fc19 	bl	800ebbe <USBD_CtlError>
                break;
 800e38c:	e093      	b.n	800e4b6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da0b      	bge.n	800e3ae <USBD_StdEPReq+0x212>
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e39c:	4613      	mov	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	3310      	adds	r3, #16
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	e00b      	b.n	800e3c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	330e      	adds	r3, #14
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fc6e 	bl	800ecb8 <USBD_CtlSendData>
              break;
 800e3dc:	e06b      	b.n	800e4b6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e3de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da11      	bge.n	800e40a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	f003 020f 	and.w	r2, r3, #15
 800e3ec:	6879      	ldr	r1, [r7, #4]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3323      	adds	r3, #35	@ 0x23
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d117      	bne.n	800e430 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 fbdb 	bl	800ebbe <USBD_CtlError>
                  break;
 800e408:	e055      	b.n	800e4b6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	f003 020f 	and.w	r2, r3, #15
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	440b      	add	r3, r1
 800e41c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d104      	bne.n	800e430 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fbc8 	bl	800ebbe <USBD_CtlError>
                  break;
 800e42e:	e042      	b.n	800e4b6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e434:	2b00      	cmp	r3, #0
 800e436:	da0b      	bge.n	800e450 <USBD_StdEPReq+0x2b4>
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e43e:	4613      	mov	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	3310      	adds	r3, #16
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	4413      	add	r3, r2
 800e44c:	3304      	adds	r3, #4
 800e44e:	e00b      	b.n	800e468 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e450:	7bbb      	ldrb	r3, [r7, #14]
 800e452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4413      	add	r3, r2
 800e466:	3304      	adds	r3, #4
 800e468:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e46a:	7bbb      	ldrb	r3, [r7, #14]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <USBD_StdEPReq+0x2da>
 800e470:	7bbb      	ldrb	r3, [r7, #14]
 800e472:	2b80      	cmp	r3, #128	@ 0x80
 800e474:	d103      	bne.n	800e47e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2200      	movs	r2, #0
 800e47a:	739a      	strb	r2, [r3, #14]
 800e47c:	e00e      	b.n	800e49c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f001 f8e4 	bl	800f650 <USBD_LL_IsStallEP>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	2201      	movs	r2, #1
 800e492:	739a      	strb	r2, [r3, #14]
 800e494:	e002      	b.n	800e49c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2200      	movs	r2, #0
 800e49a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	330e      	adds	r3, #14
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fc07 	bl	800ecb8 <USBD_CtlSendData>
              break;
 800e4aa:	e004      	b.n	800e4b6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e4ac:	6839      	ldr	r1, [r7, #0]
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fb85 	bl	800ebbe <USBD_CtlError>
              break;
 800e4b4:	bf00      	nop
          }
          break;
 800e4b6:	e004      	b.n	800e4c2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fb7f 	bl	800ebbe <USBD_CtlError>
          break;
 800e4c0:	bf00      	nop
      }
      break;
 800e4c2:	e005      	b.n	800e4d0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fb79 	bl	800ebbe <USBD_CtlError>
      break;
 800e4cc:	e000      	b.n	800e4d0 <USBD_StdEPReq+0x334>
      break;
 800e4ce:	bf00      	nop
  }

  return ret;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	885b      	ldrh	r3, [r3, #2]
 800e4f6:	0a1b      	lsrs	r3, r3, #8
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	2b0e      	cmp	r3, #14
 800e4fe:	f200 8152 	bhi.w	800e7a6 <USBD_GetDescriptor+0x2ca>
 800e502:	a201      	add	r2, pc, #4	@ (adr r2, 800e508 <USBD_GetDescriptor+0x2c>)
 800e504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e508:	0800e579 	.word	0x0800e579
 800e50c:	0800e591 	.word	0x0800e591
 800e510:	0800e5d1 	.word	0x0800e5d1
 800e514:	0800e7a7 	.word	0x0800e7a7
 800e518:	0800e7a7 	.word	0x0800e7a7
 800e51c:	0800e747 	.word	0x0800e747
 800e520:	0800e773 	.word	0x0800e773
 800e524:	0800e7a7 	.word	0x0800e7a7
 800e528:	0800e7a7 	.word	0x0800e7a7
 800e52c:	0800e7a7 	.word	0x0800e7a7
 800e530:	0800e7a7 	.word	0x0800e7a7
 800e534:	0800e7a7 	.word	0x0800e7a7
 800e538:	0800e7a7 	.word	0x0800e7a7
 800e53c:	0800e7a7 	.word	0x0800e7a7
 800e540:	0800e545 	.word	0x0800e545
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00b      	beq.n	800e568 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	7c12      	ldrb	r2, [r2, #16]
 800e55c:	f107 0108 	add.w	r1, r7, #8
 800e560:	4610      	mov	r0, r2
 800e562:	4798      	blx	r3
 800e564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e566:	e126      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fb27 	bl	800ebbe <USBD_CtlError>
        err++;
 800e570:	7afb      	ldrb	r3, [r7, #11]
 800e572:	3301      	adds	r3, #1
 800e574:	72fb      	strb	r3, [r7, #11]
      break;
 800e576:	e11e      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	7c12      	ldrb	r2, [r2, #16]
 800e584:	f107 0108 	add.w	r1, r7, #8
 800e588:	4610      	mov	r0, r2
 800e58a:	4798      	blx	r3
 800e58c:	60f8      	str	r0, [r7, #12]
      break;
 800e58e:	e112      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7c1b      	ldrb	r3, [r3, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10d      	bne.n	800e5b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a0:	f107 0208 	add.w	r2, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e5b2:	e100      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5bc:	f107 0208 	add.w	r2, r7, #8
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
 800e5c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	701a      	strb	r2, [r3, #0]
      break;
 800e5ce:	e0f2      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	885b      	ldrh	r3, [r3, #2]
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b05      	cmp	r3, #5
 800e5d8:	f200 80ac 	bhi.w	800e734 <USBD_GetDescriptor+0x258>
 800e5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e5e4 <USBD_GetDescriptor+0x108>)
 800e5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e2:	bf00      	nop
 800e5e4:	0800e5fd 	.word	0x0800e5fd
 800e5e8:	0800e631 	.word	0x0800e631
 800e5ec:	0800e665 	.word	0x0800e665
 800e5f0:	0800e699 	.word	0x0800e699
 800e5f4:	0800e6cd 	.word	0x0800e6cd
 800e5f8:	0800e701 	.word	0x0800e701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00b      	beq.n	800e620 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	7c12      	ldrb	r2, [r2, #16]
 800e614:	f107 0108 	add.w	r1, r7, #8
 800e618:	4610      	mov	r0, r2
 800e61a:	4798      	blx	r3
 800e61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e61e:	e091      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 facb 	bl	800ebbe <USBD_CtlError>
            err++;
 800e628:	7afb      	ldrb	r3, [r7, #11]
 800e62a:	3301      	adds	r3, #1
 800e62c:	72fb      	strb	r3, [r7, #11]
          break;
 800e62e:	e089      	b.n	800e744 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00b      	beq.n	800e654 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	7c12      	ldrb	r2, [r2, #16]
 800e648:	f107 0108 	add.w	r1, r7, #8
 800e64c:	4610      	mov	r0, r2
 800e64e:	4798      	blx	r3
 800e650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e652:	e077      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 fab1 	bl	800ebbe <USBD_CtlError>
            err++;
 800e65c:	7afb      	ldrb	r3, [r7, #11]
 800e65e:	3301      	adds	r3, #1
 800e660:	72fb      	strb	r3, [r7, #11]
          break;
 800e662:	e06f      	b.n	800e744 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	7c12      	ldrb	r2, [r2, #16]
 800e67c:	f107 0108 	add.w	r1, r7, #8
 800e680:	4610      	mov	r0, r2
 800e682:	4798      	blx	r3
 800e684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e686:	e05d      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fa97 	bl	800ebbe <USBD_CtlError>
            err++;
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	3301      	adds	r3, #1
 800e694:	72fb      	strb	r3, [r7, #11]
          break;
 800e696:	e055      	b.n	800e744 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7c12      	ldrb	r2, [r2, #16]
 800e6b0:	f107 0108 	add.w	r1, r7, #8
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4798      	blx	r3
 800e6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ba:	e043      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa7d 	bl	800ebbe <USBD_CtlError>
            err++;
 800e6c4:	7afb      	ldrb	r3, [r7, #11]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ca:	e03b      	b.n	800e744 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6d2:	695b      	ldr	r3, [r3, #20]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	7c12      	ldrb	r2, [r2, #16]
 800e6e4:	f107 0108 	add.w	r1, r7, #8
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ee:	e029      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa63 	bl	800ebbe <USBD_CtlError>
            err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fe:	e021      	b.n	800e744 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e706:	699b      	ldr	r3, [r3, #24]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	7c12      	ldrb	r2, [r2, #16]
 800e718:	f107 0108 	add.w	r1, r7, #8
 800e71c:	4610      	mov	r0, r2
 800e71e:	4798      	blx	r3
 800e720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e722:	e00f      	b.n	800e744 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e724:	6839      	ldr	r1, [r7, #0]
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa49 	bl	800ebbe <USBD_CtlError>
            err++;
 800e72c:	7afb      	ldrb	r3, [r7, #11]
 800e72e:	3301      	adds	r3, #1
 800e730:	72fb      	strb	r3, [r7, #11]
          break;
 800e732:	e007      	b.n	800e744 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fa41 	bl	800ebbe <USBD_CtlError>
          err++;
 800e73c:	7afb      	ldrb	r3, [r7, #11]
 800e73e:	3301      	adds	r3, #1
 800e740:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e742:	bf00      	nop
      }
      break;
 800e744:	e037      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7c1b      	ldrb	r3, [r3, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d109      	bne.n	800e762 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e756:	f107 0208 	add.w	r2, r7, #8
 800e75a:	4610      	mov	r0, r2
 800e75c:	4798      	blx	r3
 800e75e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e760:	e029      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fa2a 	bl	800ebbe <USBD_CtlError>
        err++;
 800e76a:	7afb      	ldrb	r3, [r7, #11]
 800e76c:	3301      	adds	r3, #1
 800e76e:	72fb      	strb	r3, [r7, #11]
      break;
 800e770:	e021      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7c1b      	ldrb	r3, [r3, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10d      	bne.n	800e796 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e782:	f107 0208 	add.w	r2, r7, #8
 800e786:	4610      	mov	r0, r2
 800e788:	4798      	blx	r3
 800e78a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3301      	adds	r3, #1
 800e790:	2207      	movs	r2, #7
 800e792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e794:	e00f      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fa10 	bl	800ebbe <USBD_CtlError>
        err++;
 800e79e:	7afb      	ldrb	r3, [r7, #11]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	72fb      	strb	r3, [r7, #11]
      break;
 800e7a4:	e007      	b.n	800e7b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fa08 	bl	800ebbe <USBD_CtlError>
      err++;
 800e7ae:	7afb      	ldrb	r3, [r7, #11]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	72fb      	strb	r3, [r7, #11]
      break;
 800e7b4:	bf00      	nop
  }

  if (err != 0U)
 800e7b6:	7afb      	ldrb	r3, [r7, #11]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d11e      	bne.n	800e7fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	88db      	ldrh	r3, [r3, #6]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d016      	beq.n	800e7f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e7c4:	893b      	ldrh	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00e      	beq.n	800e7e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	88da      	ldrh	r2, [r3, #6]
 800e7ce:	893b      	ldrh	r3, [r7, #8]
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	bf28      	it	cs
 800e7d4:	4613      	movcs	r3, r2
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e7da:	893b      	ldrh	r3, [r7, #8]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fa69 	bl	800ecb8 <USBD_CtlSendData>
 800e7e6:	e009      	b.n	800e7fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7e8:	6839      	ldr	r1, [r7, #0]
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f9e7 	bl	800ebbe <USBD_CtlError>
 800e7f0:	e004      	b.n	800e7fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fac1 	bl	800ed7a <USBD_CtlSendStatus>
 800e7f8:	e000      	b.n	800e7fc <USBD_GetDescriptor+0x320>
    return;
 800e7fa:	bf00      	nop
  }
}
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop

0800e804 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	889b      	ldrh	r3, [r3, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d131      	bne.n	800e87a <USBD_SetAddress+0x76>
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	88db      	ldrh	r3, [r3, #6]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d12d      	bne.n	800e87a <USBD_SetAddress+0x76>
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	885b      	ldrh	r3, [r3, #2]
 800e822:	2b7f      	cmp	r3, #127	@ 0x7f
 800e824:	d829      	bhi.n	800e87a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	885b      	ldrh	r3, [r3, #2]
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	d104      	bne.n	800e848 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f9bc 	bl	800ebbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e846:	e01d      	b.n	800e884 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7bfa      	ldrb	r2, [r7, #15]
 800e84c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e850:	7bfb      	ldrb	r3, [r7, #15]
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 ff27 	bl	800f6a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fa8d 	bl	800ed7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e860:	7bfb      	ldrb	r3, [r7, #15]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2202      	movs	r2, #2
 800e86a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86e:	e009      	b.n	800e884 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e878:	e004      	b.n	800e884 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e87a:	6839      	ldr	r1, [r7, #0]
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f99e 	bl	800ebbe <USBD_CtlError>
  }
}
 800e882:	bf00      	nop
 800e884:	bf00      	nop
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	885b      	ldrh	r3, [r3, #2]
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	4b4e      	ldr	r3, [pc, #312]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e8a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8a4:	4b4d      	ldr	r3, [pc, #308]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d905      	bls.n	800e8b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e8ac:	6839      	ldr	r1, [r7, #0]
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 f985 	bl	800ebbe <USBD_CtlError>
    return USBD_FAIL;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e08c      	b.n	800e9d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d002      	beq.n	800e8ca <USBD_SetConfig+0x3e>
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d029      	beq.n	800e91c <USBD_SetConfig+0x90>
 800e8c8:	e075      	b.n	800e9b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e8ca:	4b44      	ldr	r3, [pc, #272]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d020      	beq.n	800e914 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e8d2:	4b42      	ldr	r3, [pc, #264]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8dc:	4b3f      	ldr	r3, [pc, #252]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7fe ffa3 	bl	800d82e <USBD_SetClassConfig>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d008      	beq.n	800e904 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f962 	bl	800ebbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2202      	movs	r2, #2
 800e8fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e902:	e065      	b.n	800e9d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fa38 	bl	800ed7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2203      	movs	r2, #3
 800e90e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e912:	e05d      	b.n	800e9d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fa30 	bl	800ed7a <USBD_CtlSendStatus>
      break;
 800e91a:	e059      	b.n	800e9d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e91c:	4b2f      	ldr	r3, [pc, #188]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d112      	bne.n	800e94a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2202      	movs	r2, #2
 800e928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e92c:	4b2b      	ldr	r3, [pc, #172]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e936:	4b29      	ldr	r3, [pc, #164]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7fe ff92 	bl	800d866 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fa19 	bl	800ed7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e948:	e042      	b.n	800e9d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e94a:	4b24      	ldr	r3, [pc, #144]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	461a      	mov	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	429a      	cmp	r2, r3
 800e956:	d02a      	beq.n	800e9ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7fe ff80 	bl	800d866 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e966:	4b1d      	ldr	r3, [pc, #116]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e970:	4b1a      	ldr	r3, [pc, #104]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	4619      	mov	r1, r3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7fe ff59 	bl	800d82e <USBD_SetClassConfig>
 800e97c:	4603      	mov	r3, r0
 800e97e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00f      	beq.n	800e9a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e986:	6839      	ldr	r1, [r7, #0]
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f918 	bl	800ebbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7fe ff65 	bl	800d866 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2202      	movs	r2, #2
 800e9a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e9a4:	e014      	b.n	800e9d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f9e7 	bl	800ed7a <USBD_CtlSendStatus>
      break;
 800e9ac:	e010      	b.n	800e9d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f9e3 	bl	800ed7a <USBD_CtlSendStatus>
      break;
 800e9b4:	e00c      	b.n	800e9d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f900 	bl	800ebbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9be:	4b07      	ldr	r3, [pc, #28]	@ (800e9dc <USBD_SetConfig+0x150>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7fe ff4e 	bl	800d866 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ce:	bf00      	nop
  }

  return ret;
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	200008c0 	.word	0x200008c0

0800e9e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	88db      	ldrh	r3, [r3, #6]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d004      	beq.n	800e9fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f8e2 	bl	800ebbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9fa:	e023      	b.n	800ea44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	dc02      	bgt.n	800ea0e <USBD_GetConfig+0x2e>
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	dc03      	bgt.n	800ea14 <USBD_GetConfig+0x34>
 800ea0c:	e015      	b.n	800ea3a <USBD_GetConfig+0x5a>
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	d00b      	beq.n	800ea2a <USBD_GetConfig+0x4a>
 800ea12:	e012      	b.n	800ea3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	2201      	movs	r2, #1
 800ea20:	4619      	mov	r1, r3
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f948 	bl	800ecb8 <USBD_CtlSendData>
        break;
 800ea28:	e00c      	b.n	800ea44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	2201      	movs	r2, #1
 800ea30:	4619      	mov	r1, r3
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f940 	bl	800ecb8 <USBD_CtlSendData>
        break;
 800ea38:	e004      	b.n	800ea44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 f8be 	bl	800ebbe <USBD_CtlError>
        break;
 800ea42:	bf00      	nop
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d81e      	bhi.n	800eaa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	88db      	ldrh	r3, [r3, #6]
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d004      	beq.n	800ea76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f8a5 	bl	800ebbe <USBD_CtlError>
        break;
 800ea74:	e01a      	b.n	800eaac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	f043 0202 	orr.w	r2, r3, #2
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	330c      	adds	r3, #12
 800ea96:	2202      	movs	r2, #2
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f90c 	bl	800ecb8 <USBD_CtlSendData>
      break;
 800eaa0:	e004      	b.n	800eaac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f88a 	bl	800ebbe <USBD_CtlError>
      break;
 800eaaa:	bf00      	nop
  }
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	885b      	ldrh	r3, [r3, #2]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d107      	bne.n	800ead6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f953 	bl	800ed7a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ead4:	e013      	b.n	800eafe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d10b      	bne.n	800eaf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	889b      	ldrh	r3, [r3, #4]
 800eae2:	0a1b      	lsrs	r3, r3, #8
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f943 	bl	800ed7a <USBD_CtlSendStatus>
}
 800eaf4:	e003      	b.n	800eafe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f860 	bl	800ebbe <USBD_CtlError>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d80b      	bhi.n	800eb36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	885b      	ldrh	r3, [r3, #2]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d10c      	bne.n	800eb40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f923 	bl	800ed7a <USBD_CtlSendStatus>
      }
      break;
 800eb34:	e004      	b.n	800eb40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f840 	bl	800ebbe <USBD_CtlError>
      break;
 800eb3e:	e000      	b.n	800eb42 <USBD_ClrFeature+0x3c>
      break;
 800eb40:	bf00      	nop
  }
}
 800eb42:	bf00      	nop
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	781a      	ldrb	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3301      	adds	r3, #1
 800eb64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3301      	adds	r3, #1
 800eb72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f7ff fa13 	bl	800dfa0 <SWAPBYTE>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	3301      	adds	r3, #1
 800eb86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff fa06 	bl	800dfa0 <SWAPBYTE>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3301      	adds	r3, #1
 800eba6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff f9f9 	bl	800dfa0 <SWAPBYTE>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	80da      	strh	r2, [r3, #6]
}
 800ebb6:	bf00      	nop
 800ebb8:	3710      	adds	r7, #16
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebc8:	2180      	movs	r1, #128	@ 0x80
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fd02 	bl	800f5d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fcfe 	bl	800f5d4 <USBD_LL_StallEP>
}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ebec:	2300      	movs	r3, #0
 800ebee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d042      	beq.n	800ec7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ebfa:	6938      	ldr	r0, [r7, #16]
 800ebfc:	f000 f842 	bl	800ec84 <USBD_GetLen>
 800ec00:	4603      	mov	r3, r0
 800ec02:	3301      	adds	r3, #1
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec0a:	d808      	bhi.n	800ec1e <USBD_GetString+0x3e>
 800ec0c:	6938      	ldr	r0, [r7, #16]
 800ec0e:	f000 f839 	bl	800ec84 <USBD_GetLen>
 800ec12:	4603      	mov	r3, r0
 800ec14:	3301      	adds	r3, #1
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	e001      	b.n	800ec22 <USBD_GetString+0x42>
 800ec1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	7812      	ldrb	r2, [r2, #0]
 800ec30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	3301      	adds	r3, #1
 800ec36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec38:	7dfb      	ldrb	r3, [r7, #23]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	2203      	movs	r2, #3
 800ec40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec42:	7dfb      	ldrb	r3, [r7, #23]
 800ec44:	3301      	adds	r3, #1
 800ec46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec48:	e013      	b.n	800ec72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	4413      	add	r3, r2
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	7812      	ldrb	r2, [r2, #0]
 800ec54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	613b      	str	r3, [r7, #16]
    idx++;
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	4413      	add	r3, r2
 800ec68:	2200      	movs	r2, #0
 800ec6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1e7      	bne.n	800ec4a <USBD_GetString+0x6a>
 800ec7a:	e000      	b.n	800ec7e <USBD_GetString+0x9e>
    return;
 800ec7c:	bf00      	nop
  }
}
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ec94:	e005      	b.n	800eca2 <USBD_GetLen+0x1e>
  {
    len++;
 800ec96:	7bfb      	ldrb	r3, [r7, #15]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1f5      	bne.n	800ec96 <USBD_GetLen+0x12>
  }

  return len;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	2100      	movs	r1, #0
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f000 fcfe 	bl	800f6e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3710      	adds	r7, #16
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	2100      	movs	r1, #0
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f000 fced 	bl	800f6e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b084      	sub	sp, #16
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	60f8      	str	r0, [r7, #12]
 800ed1e:	60b9      	str	r1, [r7, #8]
 800ed20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2203      	movs	r2, #3
 800ed26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	2100      	movs	r1, #0
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f000 fced 	bl	800f728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed4e:	2300      	movs	r3, #0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	2100      	movs	r1, #0
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f000 fcdc 	bl	800f728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2204      	movs	r2, #4
 800ed86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2100      	movs	r1, #0
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fca8 	bl	800f6e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2205      	movs	r2, #5
 800edac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edb0:	2300      	movs	r3, #0
 800edb2:	2200      	movs	r2, #0
 800edb4:	2100      	movs	r1, #0
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fcb6 	bl	800f728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
	...

0800edc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800edcc:	2200      	movs	r2, #0
 800edce:	4912      	ldr	r1, [pc, #72]	@ (800ee18 <MX_USB_DEVICE_Init+0x50>)
 800edd0:	4812      	ldr	r0, [pc, #72]	@ (800ee1c <MX_USB_DEVICE_Init+0x54>)
 800edd2:	f7fe fcaf 	bl	800d734 <USBD_Init>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eddc:	f7f4 f952 	bl	8003084 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ede0:	490f      	ldr	r1, [pc, #60]	@ (800ee20 <MX_USB_DEVICE_Init+0x58>)
 800ede2:	480e      	ldr	r0, [pc, #56]	@ (800ee1c <MX_USB_DEVICE_Init+0x54>)
 800ede4:	f7fe fcd6 	bl	800d794 <USBD_RegisterClass>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d001      	beq.n	800edf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800edee:	f7f4 f949 	bl	8003084 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800edf2:	490c      	ldr	r1, [pc, #48]	@ (800ee24 <MX_USB_DEVICE_Init+0x5c>)
 800edf4:	4809      	ldr	r0, [pc, #36]	@ (800ee1c <MX_USB_DEVICE_Init+0x54>)
 800edf6:	f7fe fc0d 	bl	800d614 <USBD_CDC_RegisterInterface>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d001      	beq.n	800ee04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee00:	f7f4 f940 	bl	8003084 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee04:	4805      	ldr	r0, [pc, #20]	@ (800ee1c <MX_USB_DEVICE_Init+0x54>)
 800ee06:	f7fe fcfb 	bl	800d800 <USBD_Start>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee10:	f7f4 f938 	bl	8003084 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee14:	bf00      	nop
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	200000ac 	.word	0x200000ac
 800ee1c:	200008c4 	.word	0x200008c4
 800ee20:	20000018 	.word	0x20000018
 800ee24:	20000098 	.word	0x20000098

0800ee28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	4905      	ldr	r1, [pc, #20]	@ (800ee44 <CDC_Init_FS+0x1c>)
 800ee30:	4805      	ldr	r0, [pc, #20]	@ (800ee48 <CDC_Init_FS+0x20>)
 800ee32:	f7fe fc09 	bl	800d648 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee36:	4905      	ldr	r1, [pc, #20]	@ (800ee4c <CDC_Init_FS+0x24>)
 800ee38:	4803      	ldr	r0, [pc, #12]	@ (800ee48 <CDC_Init_FS+0x20>)
 800ee3a:	f7fe fc27 	bl	800d68c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	200013a0 	.word	0x200013a0
 800ee48:	200008c4 	.word	0x200008c4
 800ee4c:	20000ba0 	.word	0x20000ba0

0800ee50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	6039      	str	r1, [r7, #0]
 800ee6a:	71fb      	strb	r3, [r7, #7]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee70:	79fb      	ldrb	r3, [r7, #7]
 800ee72:	2b23      	cmp	r3, #35	@ 0x23
 800ee74:	d84a      	bhi.n	800ef0c <CDC_Control_FS+0xac>
 800ee76:	a201      	add	r2, pc, #4	@ (adr r2, 800ee7c <CDC_Control_FS+0x1c>)
 800ee78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7c:	0800ef0d 	.word	0x0800ef0d
 800ee80:	0800ef0d 	.word	0x0800ef0d
 800ee84:	0800ef0d 	.word	0x0800ef0d
 800ee88:	0800ef0d 	.word	0x0800ef0d
 800ee8c:	0800ef0d 	.word	0x0800ef0d
 800ee90:	0800ef0d 	.word	0x0800ef0d
 800ee94:	0800ef0d 	.word	0x0800ef0d
 800ee98:	0800ef0d 	.word	0x0800ef0d
 800ee9c:	0800ef0d 	.word	0x0800ef0d
 800eea0:	0800ef0d 	.word	0x0800ef0d
 800eea4:	0800ef0d 	.word	0x0800ef0d
 800eea8:	0800ef0d 	.word	0x0800ef0d
 800eeac:	0800ef0d 	.word	0x0800ef0d
 800eeb0:	0800ef0d 	.word	0x0800ef0d
 800eeb4:	0800ef0d 	.word	0x0800ef0d
 800eeb8:	0800ef0d 	.word	0x0800ef0d
 800eebc:	0800ef0d 	.word	0x0800ef0d
 800eec0:	0800ef0d 	.word	0x0800ef0d
 800eec4:	0800ef0d 	.word	0x0800ef0d
 800eec8:	0800ef0d 	.word	0x0800ef0d
 800eecc:	0800ef0d 	.word	0x0800ef0d
 800eed0:	0800ef0d 	.word	0x0800ef0d
 800eed4:	0800ef0d 	.word	0x0800ef0d
 800eed8:	0800ef0d 	.word	0x0800ef0d
 800eedc:	0800ef0d 	.word	0x0800ef0d
 800eee0:	0800ef0d 	.word	0x0800ef0d
 800eee4:	0800ef0d 	.word	0x0800ef0d
 800eee8:	0800ef0d 	.word	0x0800ef0d
 800eeec:	0800ef0d 	.word	0x0800ef0d
 800eef0:	0800ef0d 	.word	0x0800ef0d
 800eef4:	0800ef0d 	.word	0x0800ef0d
 800eef8:	0800ef0d 	.word	0x0800ef0d
 800eefc:	0800ef0d 	.word	0x0800ef0d
 800ef00:	0800ef0d 	.word	0x0800ef0d
 800ef04:	0800ef0d 	.word	0x0800ef0d
 800ef08:	0800ef0d 	.word	0x0800ef0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef0c:	bf00      	nop
  }

  return (USBD_OK);
 800ef0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef26:	6879      	ldr	r1, [r7, #4]
 800ef28:	4805      	ldr	r0, [pc, #20]	@ (800ef40 <CDC_Receive_FS+0x24>)
 800ef2a:	f7fe fbaf 	bl	800d68c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef2e:	4804      	ldr	r0, [pc, #16]	@ (800ef40 <CDC_Receive_FS+0x24>)
 800ef30:	f7fe fbca 	bl	800d6c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ef34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	200008c4 	.word	0x200008c4

0800ef44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b087      	sub	sp, #28
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ef56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	371c      	adds	r7, #28
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
	...

0800ef68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	6039      	str	r1, [r7, #0]
 800ef72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2212      	movs	r2, #18
 800ef78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ef7a:	4b03      	ldr	r3, [pc, #12]	@ (800ef88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	200000cc 	.word	0x200000cc

0800ef8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	2204      	movs	r2, #4
 800ef9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef9e:	4b03      	ldr	r3, [pc, #12]	@ (800efac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	200000ec 	.word	0x200000ec

0800efb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	4603      	mov	r3, r0
 800efb8:	6039      	str	r1, [r7, #0]
 800efba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efbc:	79fb      	ldrb	r3, [r7, #7]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d105      	bne.n	800efce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	4907      	ldr	r1, [pc, #28]	@ (800efe4 <USBD_FS_ProductStrDescriptor+0x34>)
 800efc6:	4808      	ldr	r0, [pc, #32]	@ (800efe8 <USBD_FS_ProductStrDescriptor+0x38>)
 800efc8:	f7ff fe0a 	bl	800ebe0 <USBD_GetString>
 800efcc:	e004      	b.n	800efd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	4904      	ldr	r1, [pc, #16]	@ (800efe4 <USBD_FS_ProductStrDescriptor+0x34>)
 800efd2:	4805      	ldr	r0, [pc, #20]	@ (800efe8 <USBD_FS_ProductStrDescriptor+0x38>)
 800efd4:	f7ff fe04 	bl	800ebe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd8:	4b02      	ldr	r3, [pc, #8]	@ (800efe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20001ba0 	.word	0x20001ba0
 800efe8:	080126b8 	.word	0x080126b8

0800efec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	4603      	mov	r3, r0
 800eff4:	6039      	str	r1, [r7, #0]
 800eff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eff8:	683a      	ldr	r2, [r7, #0]
 800effa:	4904      	ldr	r1, [pc, #16]	@ (800f00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800effc:	4804      	ldr	r0, [pc, #16]	@ (800f010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800effe:	f7ff fdef 	bl	800ebe0 <USBD_GetString>
  return USBD_StrDesc;
 800f002:	4b02      	ldr	r3, [pc, #8]	@ (800f00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f004:	4618      	mov	r0, r3
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20001ba0 	.word	0x20001ba0
 800f010:	080126d0 	.word	0x080126d0

0800f014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	221a      	movs	r2, #26
 800f024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f026:	f000 f855 	bl	800f0d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f02a:	4b02      	ldr	r3, [pc, #8]	@ (800f034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	200000f0 	.word	0x200000f0

0800f038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	6039      	str	r1, [r7, #0]
 800f042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f044:	79fb      	ldrb	r3, [r7, #7]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d105      	bne.n	800f056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	4907      	ldr	r1, [pc, #28]	@ (800f06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f04e:	4808      	ldr	r0, [pc, #32]	@ (800f070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f050:	f7ff fdc6 	bl	800ebe0 <USBD_GetString>
 800f054:	e004      	b.n	800f060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	4904      	ldr	r1, [pc, #16]	@ (800f06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f05a:	4805      	ldr	r0, [pc, #20]	@ (800f070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f05c:	f7ff fdc0 	bl	800ebe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f060:	4b02      	ldr	r3, [pc, #8]	@ (800f06c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20001ba0 	.word	0x20001ba0
 800f070:	080126e4 	.word	0x080126e4

0800f074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	6039      	str	r1, [r7, #0]
 800f07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d105      	bne.n	800f092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	4907      	ldr	r1, [pc, #28]	@ (800f0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f08a:	4808      	ldr	r0, [pc, #32]	@ (800f0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f08c:	f7ff fda8 	bl	800ebe0 <USBD_GetString>
 800f090:	e004      	b.n	800f09c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4904      	ldr	r1, [pc, #16]	@ (800f0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f096:	4805      	ldr	r0, [pc, #20]	@ (800f0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f098:	f7ff fda2 	bl	800ebe0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f09c:	4b02      	ldr	r3, [pc, #8]	@ (800f0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20001ba0 	.word	0x20001ba0
 800f0ac:	080126f0 	.word	0x080126f0

0800f0b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	6039      	str	r1, [r7, #0]
 800f0ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	220c      	movs	r2, #12
 800f0c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f0c2:	4b03      	ldr	r3, [pc, #12]	@ (800f0d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	200000e0 	.word	0x200000e0

0800f0d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f0da:	4b0f      	ldr	r3, [pc, #60]	@ (800f118 <Get_SerialNum+0x44>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <Get_SerialNum+0x48>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f120 <Get_SerialNum+0x4c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d009      	beq.n	800f10e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	4909      	ldr	r1, [pc, #36]	@ (800f124 <Get_SerialNum+0x50>)
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f000 f814 	bl	800f12c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f104:	2204      	movs	r2, #4
 800f106:	4908      	ldr	r1, [pc, #32]	@ (800f128 <Get_SerialNum+0x54>)
 800f108:	68b8      	ldr	r0, [r7, #8]
 800f10a:	f000 f80f 	bl	800f12c <IntToUnicode>
  }
}
 800f10e:	bf00      	nop
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	1ff07a10 	.word	0x1ff07a10
 800f11c:	1ff07a14 	.word	0x1ff07a14
 800f120:	1ff07a18 	.word	0x1ff07a18
 800f124:	200000f2 	.word	0x200000f2
 800f128:	20000102 	.word	0x20000102

0800f12c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	4613      	mov	r3, r2
 800f138:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f13e:	2300      	movs	r3, #0
 800f140:	75fb      	strb	r3, [r7, #23]
 800f142:	e027      	b.n	800f194 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	0f1b      	lsrs	r3, r3, #28
 800f148:	2b09      	cmp	r3, #9
 800f14a:	d80b      	bhi.n	800f164 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	0f1b      	lsrs	r3, r3, #28
 800f150:	b2da      	uxtb	r2, r3
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	4619      	mov	r1, r3
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	440b      	add	r3, r1
 800f15c:	3230      	adds	r2, #48	@ 0x30
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	701a      	strb	r2, [r3, #0]
 800f162:	e00a      	b.n	800f17a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	0f1b      	lsrs	r3, r3, #28
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	005b      	lsls	r3, r3, #1
 800f16e:	4619      	mov	r1, r3
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	440b      	add	r3, r1
 800f174:	3237      	adds	r2, #55	@ 0x37
 800f176:	b2d2      	uxtb	r2, r2
 800f178:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	011b      	lsls	r3, r3, #4
 800f17e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f180:	7dfb      	ldrb	r3, [r7, #23]
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	3301      	adds	r3, #1
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	4413      	add	r3, r2
 800f18a:	2200      	movs	r2, #0
 800f18c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f18e:	7dfb      	ldrb	r3, [r7, #23]
 800f190:	3301      	adds	r3, #1
 800f192:	75fb      	strb	r3, [r7, #23]
 800f194:	7dfa      	ldrb	r2, [r7, #23]
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d3d3      	bcc.n	800f144 <IntToUnicode+0x18>
  }
}
 800f19c:	bf00      	nop
 800f19e:	bf00      	nop
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
	...

0800f1ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b0aa      	sub	sp, #168	@ 0xa8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	601a      	str	r2, [r3, #0]
 800f1bc:	605a      	str	r2, [r3, #4]
 800f1be:	609a      	str	r2, [r3, #8]
 800f1c0:	60da      	str	r2, [r3, #12]
 800f1c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f1c4:	f107 0314 	add.w	r3, r7, #20
 800f1c8:	2280      	movs	r2, #128	@ 0x80
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f001 f978 	bl	80104c2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f1da:	d151      	bne.n	800f280 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f1dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f1e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f1e8:	f107 0314 	add.w	r3, r7, #20
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f8 f983 	bl	80074f8 <HAL_RCCEx_PeriphCLKConfig>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f1f8:	f7f3 ff44 	bl	8003084 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1fc:	4b22      	ldr	r3, [pc, #136]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f200:	4a21      	ldr	r2, [pc, #132]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f202:	f043 0301 	orr.w	r3, r3, #1
 800f206:	6313      	str	r3, [r2, #48]	@ 0x30
 800f208:	4b1f      	ldr	r3, [pc, #124]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	613b      	str	r3, [r7, #16]
 800f212:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f214:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f21c:	2302      	movs	r3, #2
 800f21e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f222:	2300      	movs	r3, #0
 800f224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f228:	2303      	movs	r3, #3
 800f22a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f22e:	230a      	movs	r3, #10
 800f230:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f234:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f238:	4619      	mov	r1, r3
 800f23a:	4814      	ldr	r0, [pc, #80]	@ (800f28c <HAL_PCD_MspInit+0xe0>)
 800f23c:	f7f5 feb6 	bl	8004fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f240:	4b11      	ldr	r3, [pc, #68]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f244:	4a10      	ldr	r2, [pc, #64]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f24a:	6353      	str	r3, [r2, #52]	@ 0x34
 800f24c:	4b0e      	ldr	r3, [pc, #56]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f254:	60fb      	str	r3, [r7, #12]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	4b0b      	ldr	r3, [pc, #44]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f25c:	4a0a      	ldr	r2, [pc, #40]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f25e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f262:	6453      	str	r3, [r2, #68]	@ 0x44
 800f264:	4b08      	ldr	r3, [pc, #32]	@ (800f288 <HAL_PCD_MspInit+0xdc>)
 800f266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f26c:	60bb      	str	r3, [r7, #8]
 800f26e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f270:	2200      	movs	r2, #0
 800f272:	2100      	movs	r1, #0
 800f274:	2043      	movs	r0, #67	@ 0x43
 800f276:	f7f5 f9d4 	bl	8004622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f27a:	2043      	movs	r0, #67	@ 0x43
 800f27c:	f7f5 f9ed 	bl	800465a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f280:	bf00      	nop
 800f282:	37a8      	adds	r7, #168	@ 0xa8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	40023800 	.word	0x40023800
 800f28c:	40020000 	.word	0x40020000

0800f290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	f7fe faf7 	bl	800d89a <USBD_LL_SetupStage>
}
 800f2ac:	bf00      	nop
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f2c6:	78fa      	ldrb	r2, [r7, #3]
 800f2c8:	6879      	ldr	r1, [r7, #4]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	4413      	add	r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	440b      	add	r3, r1
 800f2d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	78fb      	ldrb	r3, [r7, #3]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f7fe fb31 	bl	800d944 <USBD_LL_DataOutStage>
}
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f2fc:	78fa      	ldrb	r2, [r7, #3]
 800f2fe:	6879      	ldr	r1, [r7, #4]
 800f300:	4613      	mov	r3, r2
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	4413      	add	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	440b      	add	r3, r1
 800f30a:	3320      	adds	r3, #32
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	78fb      	ldrb	r3, [r7, #3]
 800f310:	4619      	mov	r1, r3
 800f312:	f7fe fbd3 	bl	800dabc <USBD_LL_DataInStage>
}
 800f316:	bf00      	nop
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fd17 	bl	800dd60 <USBD_LL_SOF>
}
 800f332:	bf00      	nop
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b084      	sub	sp, #16
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f342:	2301      	movs	r3, #1
 800f344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	79db      	ldrb	r3, [r3, #7]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f34e:	2300      	movs	r3, #0
 800f350:	73fb      	strb	r3, [r7, #15]
 800f352:	e008      	b.n	800f366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	79db      	ldrb	r3, [r3, #7]
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d102      	bne.n	800f362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f35c:	2301      	movs	r3, #1
 800f35e:	73fb      	strb	r3, [r7, #15]
 800f360:	e001      	b.n	800f366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f362:	f7f3 fe8f 	bl	8003084 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f36c:	7bfa      	ldrb	r2, [r7, #15]
 800f36e:	4611      	mov	r1, r2
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe fcb1 	bl	800dcd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fe fc58 	bl	800dc32 <USBD_LL_Reset>
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
	...

0800f38c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fcac 	bl	800dcf8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	6812      	ldr	r2, [r2, #0]
 800f3ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f3b2:	f043 0301 	orr.w	r3, r3, #1
 800f3b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	7adb      	ldrb	r3, [r3, #11]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d005      	beq.n	800f3cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f3c0:	4b04      	ldr	r3, [pc, #16]	@ (800f3d4 <HAL_PCD_SuspendCallback+0x48>)
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	4a03      	ldr	r2, [pc, #12]	@ (800f3d4 <HAL_PCD_SuspendCallback+0x48>)
 800f3c6:	f043 0306 	orr.w	r3, r3, #6
 800f3ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	e000ed00 	.word	0xe000ed00

0800f3d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fe fca2 	bl	800dd30 <USBD_LL_Resume>
}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f406:	78fa      	ldrb	r2, [r7, #3]
 800f408:	4611      	mov	r1, r2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe fcfa 	bl	800de04 <USBD_LL_IsoOUTIncomplete>
}
 800f410:	bf00      	nop
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	460b      	mov	r3, r1
 800f422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f42a:	78fa      	ldrb	r2, [r7, #3]
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fe fcb6 	bl	800dda0 <USBD_LL_IsoINIncomplete>
}
 800f434:	bf00      	nop
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fe fd0c 	bl	800de68 <USBD_LL_DevConnected>
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe fd09 	bl	800de7e <USBD_LL_DevDisconnected>
}
 800f46c:	bf00      	nop
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d13f      	bne.n	800f504 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f484:	4a22      	ldr	r2, [pc, #136]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a20      	ldr	r2, [pc, #128]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f490:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f494:	4b1e      	ldr	r3, [pc, #120]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f496:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f49a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f49c:	4b1c      	ldr	r3, [pc, #112]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f49e:	2206      	movs	r2, #6
 800f4a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4a4:	2202      	movs	r2, #2
 800f4a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f4a8:	4b19      	ldr	r3, [pc, #100]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f4ae:	4b18      	ldr	r3, [pc, #96]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4b0:	2202      	movs	r2, #2
 800f4b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f4b4:	4b16      	ldr	r3, [pc, #88]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f4ba:	4b15      	ldr	r3, [pc, #84]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f4c0:	4b13      	ldr	r3, [pc, #76]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f4c6:	4b12      	ldr	r3, [pc, #72]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f4cc:	4b10      	ldr	r3, [pc, #64]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f4d8:	480d      	ldr	r0, [pc, #52]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4da:	f7f6 f868 	bl	80055ae <HAL_PCD_Init>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d001      	beq.n	800f4e8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800f4e4:	f7f3 fdce 	bl	8003084 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f4e8:	2180      	movs	r1, #128	@ 0x80
 800f4ea:	4809      	ldr	r0, [pc, #36]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4ec:	f7f7 fab5 	bl	8006a5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f4f0:	2240      	movs	r2, #64	@ 0x40
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	4806      	ldr	r0, [pc, #24]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f4f6:	f7f7 fa69 	bl	80069cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f4fa:	2280      	movs	r2, #128	@ 0x80
 800f4fc:	2101      	movs	r1, #1
 800f4fe:	4804      	ldr	r0, [pc, #16]	@ (800f510 <USBD_LL_Init+0x9c>)
 800f500:	f7f7 fa64 	bl	80069cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f504:	2300      	movs	r3, #0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	20001da0 	.word	0x20001da0

0800f514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f51c:	2300      	movs	r3, #0
 800f51e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7f6 f955 	bl	80057da <HAL_PCD_Start>
 800f530:	4603      	mov	r3, r0
 800f532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	4618      	mov	r0, r3
 800f538:	f000 f97e 	bl	800f838 <USBD_Get_USB_Status>
 800f53c:	4603      	mov	r3, r0
 800f53e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f540:	7bbb      	ldrb	r3, [r7, #14]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b084      	sub	sp, #16
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
 800f552:	4608      	mov	r0, r1
 800f554:	4611      	mov	r1, r2
 800f556:	461a      	mov	r2, r3
 800f558:	4603      	mov	r3, r0
 800f55a:	70fb      	strb	r3, [r7, #3]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70bb      	strb	r3, [r7, #2]
 800f560:	4613      	mov	r3, r2
 800f562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f572:	78bb      	ldrb	r3, [r7, #2]
 800f574:	883a      	ldrh	r2, [r7, #0]
 800f576:	78f9      	ldrb	r1, [r7, #3]
 800f578:	f7f6 fe43 	bl	8006202 <HAL_PCD_EP_Open>
 800f57c:	4603      	mov	r3, r0
 800f57e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	4618      	mov	r0, r3
 800f584:	f000 f958 	bl	800f838 <USBD_Get_USB_Status>
 800f588:	4603      	mov	r3, r0
 800f58a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f58c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3710      	adds	r7, #16
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b084      	sub	sp, #16
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5b0:	78fa      	ldrb	r2, [r7, #3]
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7f6 fe8e 	bl	80062d6 <HAL_PCD_EP_Close>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f000 f939 	bl	800f838 <USBD_Get_USB_Status>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5ee:	78fa      	ldrb	r2, [r7, #3]
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f6 ff46 	bl	8006484 <HAL_PCD_EP_SetStall>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 f91a 	bl	800f838 <USBD_Get_USB_Status>
 800f604:	4603      	mov	r3, r0
 800f606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f608:	7bbb      	ldrb	r3, [r7, #14]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	460b      	mov	r3, r1
 800f61c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f62c:	78fa      	ldrb	r2, [r7, #3]
 800f62e:	4611      	mov	r1, r2
 800f630:	4618      	mov	r0, r3
 800f632:	f7f6 ff8a 	bl	800654a <HAL_PCD_EP_ClrStall>
 800f636:	4603      	mov	r3, r0
 800f638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f63a:	7bfb      	ldrb	r3, [r7, #15]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f000 f8fb 	bl	800f838 <USBD_Get_USB_Status>
 800f642:	4603      	mov	r3, r0
 800f644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f646:	7bbb      	ldrb	r3, [r7, #14]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3710      	adds	r7, #16
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	460b      	mov	r3, r1
 800f65a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	da0b      	bge.n	800f684 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f672:	68f9      	ldr	r1, [r7, #12]
 800f674:	4613      	mov	r3, r2
 800f676:	00db      	lsls	r3, r3, #3
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
 800f67e:	3316      	adds	r3, #22
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	e00b      	b.n	800f69c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	4613      	mov	r3, r2
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	4413      	add	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	440b      	add	r3, r1
 800f696:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f69a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6c2:	78fa      	ldrb	r2, [r7, #3]
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f6 fd77 	bl	80061ba <HAL_PCD_SetAddress>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 f8b0 	bl	800f838 <USBD_Get_USB_Status>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b086      	sub	sp, #24
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	607a      	str	r2, [r7, #4]
 800f6f0:	603b      	str	r3, [r7, #0]
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f704:	7af9      	ldrb	r1, [r7, #11]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	f7f6 fe81 	bl	8006410 <HAL_PCD_EP_Transmit>
 800f70e:	4603      	mov	r3, r0
 800f710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f712:	7dfb      	ldrb	r3, [r7, #23]
 800f714:	4618      	mov	r0, r3
 800f716:	f000 f88f 	bl	800f838 <USBD_Get_USB_Status>
 800f71a:	4603      	mov	r3, r0
 800f71c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f71e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b086      	sub	sp, #24
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	607a      	str	r2, [r7, #4]
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	460b      	mov	r3, r1
 800f736:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f738:	2300      	movs	r3, #0
 800f73a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f73c:	2300      	movs	r3, #0
 800f73e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f746:	7af9      	ldrb	r1, [r7, #11]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	f7f6 fe0d 	bl	800636a <HAL_PCD_EP_Receive>
 800f750:	4603      	mov	r3, r0
 800f752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f754:	7dfb      	ldrb	r3, [r7, #23]
 800f756:	4618      	mov	r0, r3
 800f758:	f000 f86e 	bl	800f838 <USBD_Get_USB_Status>
 800f75c:	4603      	mov	r3, r0
 800f75e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f760:	7dbb      	ldrb	r3, [r7, #22]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	460b      	mov	r3, r1
 800f774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f77c:	78fa      	ldrb	r2, [r7, #3]
 800f77e:	4611      	mov	r1, r2
 800f780:	4618      	mov	r0, r3
 800f782:	f7f6 fe2d 	bl	80063e0 <HAL_PCD_EP_GetRxCount>
 800f786:	4603      	mov	r3, r0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	460b      	mov	r3, r1
 800f79a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f79c:	78fb      	ldrb	r3, [r7, #3]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d002      	beq.n	800f7a8 <HAL_PCDEx_LPM_Callback+0x18>
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d01f      	beq.n	800f7e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f7a6:	e03b      	b.n	800f820 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	7adb      	ldrb	r3, [r3, #11]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d007      	beq.n	800f7c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f7b0:	f000 f83c 	bl	800f82c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7b4:	4b1c      	ldr	r3, [pc, #112]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x98>)
 800f7b6:	691b      	ldr	r3, [r3, #16]
 800f7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x98>)
 800f7ba:	f023 0306 	bic.w	r3, r3, #6
 800f7be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	6812      	ldr	r2, [r2, #0]
 800f7ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f7d2:	f023 0301 	bic.w	r3, r3, #1
 800f7d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe faa6 	bl	800dd30 <USBD_LL_Resume>
    break;
 800f7e4:	e01c      	b.n	800f820 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	6812      	ldr	r2, [r2, #0]
 800f7f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f7f8:	f043 0301 	orr.w	r3, r3, #1
 800f7fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe fa77 	bl	800dcf8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7adb      	ldrb	r3, [r3, #11]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d005      	beq.n	800f81e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f812:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x98>)
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	4a04      	ldr	r2, [pc, #16]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x98>)
 800f818:	f043 0306 	orr.w	r3, r3, #6
 800f81c:	6113      	str	r3, [r2, #16]
    break;
 800f81e:	bf00      	nop
}
 800f820:	bf00      	nop
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	e000ed00 	.word	0xe000ed00

0800f82c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f830:	f7f3 f82a 	bl	8002888 <SystemClock_Config>
}
 800f834:	bf00      	nop
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d817      	bhi.n	800f87c <USBD_Get_USB_Status+0x44>
 800f84c:	a201      	add	r2, pc, #4	@ (adr r2, 800f854 <USBD_Get_USB_Status+0x1c>)
 800f84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f852:	bf00      	nop
 800f854:	0800f865 	.word	0x0800f865
 800f858:	0800f86b 	.word	0x0800f86b
 800f85c:	0800f871 	.word	0x0800f871
 800f860:	0800f877 	.word	0x0800f877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f864:	2300      	movs	r3, #0
 800f866:	73fb      	strb	r3, [r7, #15]
    break;
 800f868:	e00b      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f86a:	2303      	movs	r3, #3
 800f86c:	73fb      	strb	r3, [r7, #15]
    break;
 800f86e:	e008      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f870:	2301      	movs	r3, #1
 800f872:	73fb      	strb	r3, [r7, #15]
    break;
 800f874:	e005      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f876:	2303      	movs	r3, #3
 800f878:	73fb      	strb	r3, [r7, #15]
    break;
 800f87a:	e002      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f87c:	2303      	movs	r3, #3
 800f87e:	73fb      	strb	r3, [r7, #15]
    break;
 800f880:	bf00      	nop
  }
  return usb_status;
 800f882:	7bfb      	ldrb	r3, [r7, #15]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3714      	adds	r7, #20
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <malloc>:
 800f890:	4b02      	ldr	r3, [pc, #8]	@ (800f89c <malloc+0xc>)
 800f892:	4601      	mov	r1, r0
 800f894:	6818      	ldr	r0, [r3, #0]
 800f896:	f000 b82d 	b.w	800f8f4 <_malloc_r>
 800f89a:	bf00      	nop
 800f89c:	20000118 	.word	0x20000118

0800f8a0 <free>:
 800f8a0:	4b02      	ldr	r3, [pc, #8]	@ (800f8ac <free+0xc>)
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	f001 bd03 	b.w	80112b0 <_free_r>
 800f8aa:	bf00      	nop
 800f8ac:	20000118 	.word	0x20000118

0800f8b0 <sbrk_aligned>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	4e0f      	ldr	r6, [pc, #60]	@ (800f8f0 <sbrk_aligned+0x40>)
 800f8b4:	460c      	mov	r4, r1
 800f8b6:	6831      	ldr	r1, [r6, #0]
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	b911      	cbnz	r1, 800f8c2 <sbrk_aligned+0x12>
 800f8bc:	f000 fe42 	bl	8010544 <_sbrk_r>
 800f8c0:	6030      	str	r0, [r6, #0]
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 fe3d 	bl	8010544 <_sbrk_r>
 800f8ca:	1c43      	adds	r3, r0, #1
 800f8cc:	d103      	bne.n	800f8d6 <sbrk_aligned+0x26>
 800f8ce:	f04f 34ff 	mov.w	r4, #4294967295
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	bd70      	pop	{r4, r5, r6, pc}
 800f8d6:	1cc4      	adds	r4, r0, #3
 800f8d8:	f024 0403 	bic.w	r4, r4, #3
 800f8dc:	42a0      	cmp	r0, r4
 800f8de:	d0f8      	beq.n	800f8d2 <sbrk_aligned+0x22>
 800f8e0:	1a21      	subs	r1, r4, r0
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f000 fe2e 	bl	8010544 <_sbrk_r>
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d1f2      	bne.n	800f8d2 <sbrk_aligned+0x22>
 800f8ec:	e7ef      	b.n	800f8ce <sbrk_aligned+0x1e>
 800f8ee:	bf00      	nop
 800f8f0:	20002280 	.word	0x20002280

0800f8f4 <_malloc_r>:
 800f8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f8:	1ccd      	adds	r5, r1, #3
 800f8fa:	f025 0503 	bic.w	r5, r5, #3
 800f8fe:	3508      	adds	r5, #8
 800f900:	2d0c      	cmp	r5, #12
 800f902:	bf38      	it	cc
 800f904:	250c      	movcc	r5, #12
 800f906:	2d00      	cmp	r5, #0
 800f908:	4606      	mov	r6, r0
 800f90a:	db01      	blt.n	800f910 <_malloc_r+0x1c>
 800f90c:	42a9      	cmp	r1, r5
 800f90e:	d904      	bls.n	800f91a <_malloc_r+0x26>
 800f910:	230c      	movs	r3, #12
 800f912:	6033      	str	r3, [r6, #0]
 800f914:	2000      	movs	r0, #0
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9f0 <_malloc_r+0xfc>
 800f91e:	f000 f869 	bl	800f9f4 <__malloc_lock>
 800f922:	f8d8 3000 	ldr.w	r3, [r8]
 800f926:	461c      	mov	r4, r3
 800f928:	bb44      	cbnz	r4, 800f97c <_malloc_r+0x88>
 800f92a:	4629      	mov	r1, r5
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff ffbf 	bl	800f8b0 <sbrk_aligned>
 800f932:	1c43      	adds	r3, r0, #1
 800f934:	4604      	mov	r4, r0
 800f936:	d158      	bne.n	800f9ea <_malloc_r+0xf6>
 800f938:	f8d8 4000 	ldr.w	r4, [r8]
 800f93c:	4627      	mov	r7, r4
 800f93e:	2f00      	cmp	r7, #0
 800f940:	d143      	bne.n	800f9ca <_malloc_r+0xd6>
 800f942:	2c00      	cmp	r4, #0
 800f944:	d04b      	beq.n	800f9de <_malloc_r+0xea>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	4639      	mov	r1, r7
 800f94a:	4630      	mov	r0, r6
 800f94c:	eb04 0903 	add.w	r9, r4, r3
 800f950:	f000 fdf8 	bl	8010544 <_sbrk_r>
 800f954:	4581      	cmp	r9, r0
 800f956:	d142      	bne.n	800f9de <_malloc_r+0xea>
 800f958:	6821      	ldr	r1, [r4, #0]
 800f95a:	1a6d      	subs	r5, r5, r1
 800f95c:	4629      	mov	r1, r5
 800f95e:	4630      	mov	r0, r6
 800f960:	f7ff ffa6 	bl	800f8b0 <sbrk_aligned>
 800f964:	3001      	adds	r0, #1
 800f966:	d03a      	beq.n	800f9de <_malloc_r+0xea>
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	442b      	add	r3, r5
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	f8d8 3000 	ldr.w	r3, [r8]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	bb62      	cbnz	r2, 800f9d0 <_malloc_r+0xdc>
 800f976:	f8c8 7000 	str.w	r7, [r8]
 800f97a:	e00f      	b.n	800f99c <_malloc_r+0xa8>
 800f97c:	6822      	ldr	r2, [r4, #0]
 800f97e:	1b52      	subs	r2, r2, r5
 800f980:	d420      	bmi.n	800f9c4 <_malloc_r+0xd0>
 800f982:	2a0b      	cmp	r2, #11
 800f984:	d917      	bls.n	800f9b6 <_malloc_r+0xc2>
 800f986:	1961      	adds	r1, r4, r5
 800f988:	42a3      	cmp	r3, r4
 800f98a:	6025      	str	r5, [r4, #0]
 800f98c:	bf18      	it	ne
 800f98e:	6059      	strne	r1, [r3, #4]
 800f990:	6863      	ldr	r3, [r4, #4]
 800f992:	bf08      	it	eq
 800f994:	f8c8 1000 	streq.w	r1, [r8]
 800f998:	5162      	str	r2, [r4, r5]
 800f99a:	604b      	str	r3, [r1, #4]
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 f82f 	bl	800fa00 <__malloc_unlock>
 800f9a2:	f104 000b 	add.w	r0, r4, #11
 800f9a6:	1d23      	adds	r3, r4, #4
 800f9a8:	f020 0007 	bic.w	r0, r0, #7
 800f9ac:	1ac2      	subs	r2, r0, r3
 800f9ae:	bf1c      	itt	ne
 800f9b0:	1a1b      	subne	r3, r3, r0
 800f9b2:	50a3      	strne	r3, [r4, r2]
 800f9b4:	e7af      	b.n	800f916 <_malloc_r+0x22>
 800f9b6:	6862      	ldr	r2, [r4, #4]
 800f9b8:	42a3      	cmp	r3, r4
 800f9ba:	bf0c      	ite	eq
 800f9bc:	f8c8 2000 	streq.w	r2, [r8]
 800f9c0:	605a      	strne	r2, [r3, #4]
 800f9c2:	e7eb      	b.n	800f99c <_malloc_r+0xa8>
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	6864      	ldr	r4, [r4, #4]
 800f9c8:	e7ae      	b.n	800f928 <_malloc_r+0x34>
 800f9ca:	463c      	mov	r4, r7
 800f9cc:	687f      	ldr	r7, [r7, #4]
 800f9ce:	e7b6      	b.n	800f93e <_malloc_r+0x4a>
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	42a3      	cmp	r3, r4
 800f9d6:	d1fb      	bne.n	800f9d0 <_malloc_r+0xdc>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	6053      	str	r3, [r2, #4]
 800f9dc:	e7de      	b.n	800f99c <_malloc_r+0xa8>
 800f9de:	230c      	movs	r3, #12
 800f9e0:	6033      	str	r3, [r6, #0]
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f000 f80c 	bl	800fa00 <__malloc_unlock>
 800f9e8:	e794      	b.n	800f914 <_malloc_r+0x20>
 800f9ea:	6005      	str	r5, [r0, #0]
 800f9ec:	e7d6      	b.n	800f99c <_malloc_r+0xa8>
 800f9ee:	bf00      	nop
 800f9f0:	20002284 	.word	0x20002284

0800f9f4 <__malloc_lock>:
 800f9f4:	4801      	ldr	r0, [pc, #4]	@ (800f9fc <__malloc_lock+0x8>)
 800f9f6:	f000 bdf2 	b.w	80105de <__retarget_lock_acquire_recursive>
 800f9fa:	bf00      	nop
 800f9fc:	200023c8 	.word	0x200023c8

0800fa00 <__malloc_unlock>:
 800fa00:	4801      	ldr	r0, [pc, #4]	@ (800fa08 <__malloc_unlock+0x8>)
 800fa02:	f000 bded 	b.w	80105e0 <__retarget_lock_release_recursive>
 800fa06:	bf00      	nop
 800fa08:	200023c8 	.word	0x200023c8

0800fa0c <__cvt>:
 800fa0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa10:	ec57 6b10 	vmov	r6, r7, d0
 800fa14:	2f00      	cmp	r7, #0
 800fa16:	460c      	mov	r4, r1
 800fa18:	4619      	mov	r1, r3
 800fa1a:	463b      	mov	r3, r7
 800fa1c:	bfbb      	ittet	lt
 800fa1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa22:	461f      	movlt	r7, r3
 800fa24:	2300      	movge	r3, #0
 800fa26:	232d      	movlt	r3, #45	@ 0x2d
 800fa28:	700b      	strb	r3, [r1, #0]
 800fa2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa30:	4691      	mov	r9, r2
 800fa32:	f023 0820 	bic.w	r8, r3, #32
 800fa36:	bfbc      	itt	lt
 800fa38:	4632      	movlt	r2, r6
 800fa3a:	4616      	movlt	r6, r2
 800fa3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa40:	d005      	beq.n	800fa4e <__cvt+0x42>
 800fa42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fa46:	d100      	bne.n	800fa4a <__cvt+0x3e>
 800fa48:	3401      	adds	r4, #1
 800fa4a:	2102      	movs	r1, #2
 800fa4c:	e000      	b.n	800fa50 <__cvt+0x44>
 800fa4e:	2103      	movs	r1, #3
 800fa50:	ab03      	add	r3, sp, #12
 800fa52:	9301      	str	r3, [sp, #4]
 800fa54:	ab02      	add	r3, sp, #8
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	ec47 6b10 	vmov	d0, r6, r7
 800fa5c:	4653      	mov	r3, sl
 800fa5e:	4622      	mov	r2, r4
 800fa60:	f000 fe56 	bl	8010710 <_dtoa_r>
 800fa64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fa68:	4605      	mov	r5, r0
 800fa6a:	d119      	bne.n	800faa0 <__cvt+0x94>
 800fa6c:	f019 0f01 	tst.w	r9, #1
 800fa70:	d00e      	beq.n	800fa90 <__cvt+0x84>
 800fa72:	eb00 0904 	add.w	r9, r0, r4
 800fa76:	2200      	movs	r2, #0
 800fa78:	2300      	movs	r3, #0
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f1 f84b 	bl	8000b18 <__aeabi_dcmpeq>
 800fa82:	b108      	cbz	r0, 800fa88 <__cvt+0x7c>
 800fa84:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa88:	2230      	movs	r2, #48	@ 0x30
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	454b      	cmp	r3, r9
 800fa8e:	d31e      	bcc.n	800face <__cvt+0xc2>
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa94:	1b5b      	subs	r3, r3, r5
 800fa96:	4628      	mov	r0, r5
 800fa98:	6013      	str	r3, [r2, #0]
 800fa9a:	b004      	add	sp, #16
 800fa9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800faa4:	eb00 0904 	add.w	r9, r0, r4
 800faa8:	d1e5      	bne.n	800fa76 <__cvt+0x6a>
 800faaa:	7803      	ldrb	r3, [r0, #0]
 800faac:	2b30      	cmp	r3, #48	@ 0x30
 800faae:	d10a      	bne.n	800fac6 <__cvt+0xba>
 800fab0:	2200      	movs	r2, #0
 800fab2:	2300      	movs	r3, #0
 800fab4:	4630      	mov	r0, r6
 800fab6:	4639      	mov	r1, r7
 800fab8:	f7f1 f82e 	bl	8000b18 <__aeabi_dcmpeq>
 800fabc:	b918      	cbnz	r0, 800fac6 <__cvt+0xba>
 800fabe:	f1c4 0401 	rsb	r4, r4, #1
 800fac2:	f8ca 4000 	str.w	r4, [sl]
 800fac6:	f8da 3000 	ldr.w	r3, [sl]
 800faca:	4499      	add	r9, r3
 800facc:	e7d3      	b.n	800fa76 <__cvt+0x6a>
 800face:	1c59      	adds	r1, r3, #1
 800fad0:	9103      	str	r1, [sp, #12]
 800fad2:	701a      	strb	r2, [r3, #0]
 800fad4:	e7d9      	b.n	800fa8a <__cvt+0x7e>

0800fad6 <__exponent>:
 800fad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fad8:	2900      	cmp	r1, #0
 800fada:	bfba      	itte	lt
 800fadc:	4249      	neglt	r1, r1
 800fade:	232d      	movlt	r3, #45	@ 0x2d
 800fae0:	232b      	movge	r3, #43	@ 0x2b
 800fae2:	2909      	cmp	r1, #9
 800fae4:	7002      	strb	r2, [r0, #0]
 800fae6:	7043      	strb	r3, [r0, #1]
 800fae8:	dd29      	ble.n	800fb3e <__exponent+0x68>
 800faea:	f10d 0307 	add.w	r3, sp, #7
 800faee:	461d      	mov	r5, r3
 800faf0:	270a      	movs	r7, #10
 800faf2:	461a      	mov	r2, r3
 800faf4:	fbb1 f6f7 	udiv	r6, r1, r7
 800faf8:	fb07 1416 	mls	r4, r7, r6, r1
 800fafc:	3430      	adds	r4, #48	@ 0x30
 800fafe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb02:	460c      	mov	r4, r1
 800fb04:	2c63      	cmp	r4, #99	@ 0x63
 800fb06:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	dcf1      	bgt.n	800faf2 <__exponent+0x1c>
 800fb0e:	3130      	adds	r1, #48	@ 0x30
 800fb10:	1e94      	subs	r4, r2, #2
 800fb12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb16:	1c41      	adds	r1, r0, #1
 800fb18:	4623      	mov	r3, r4
 800fb1a:	42ab      	cmp	r3, r5
 800fb1c:	d30a      	bcc.n	800fb34 <__exponent+0x5e>
 800fb1e:	f10d 0309 	add.w	r3, sp, #9
 800fb22:	1a9b      	subs	r3, r3, r2
 800fb24:	42ac      	cmp	r4, r5
 800fb26:	bf88      	it	hi
 800fb28:	2300      	movhi	r3, #0
 800fb2a:	3302      	adds	r3, #2
 800fb2c:	4403      	add	r3, r0
 800fb2e:	1a18      	subs	r0, r3, r0
 800fb30:	b003      	add	sp, #12
 800fb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb3c:	e7ed      	b.n	800fb1a <__exponent+0x44>
 800fb3e:	2330      	movs	r3, #48	@ 0x30
 800fb40:	3130      	adds	r1, #48	@ 0x30
 800fb42:	7083      	strb	r3, [r0, #2]
 800fb44:	70c1      	strb	r1, [r0, #3]
 800fb46:	1d03      	adds	r3, r0, #4
 800fb48:	e7f1      	b.n	800fb2e <__exponent+0x58>
	...

0800fb4c <_printf_float>:
 800fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb50:	b08d      	sub	sp, #52	@ 0x34
 800fb52:	460c      	mov	r4, r1
 800fb54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fb58:	4616      	mov	r6, r2
 800fb5a:	461f      	mov	r7, r3
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	f000 fcb9 	bl	80104d4 <_localeconv_r>
 800fb62:	6803      	ldr	r3, [r0, #0]
 800fb64:	9304      	str	r3, [sp, #16]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7f0 fbaa 	bl	80002c0 <strlen>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb70:	f8d8 3000 	ldr.w	r3, [r8]
 800fb74:	9005      	str	r0, [sp, #20]
 800fb76:	3307      	adds	r3, #7
 800fb78:	f023 0307 	bic.w	r3, r3, #7
 800fb7c:	f103 0208 	add.w	r2, r3, #8
 800fb80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fb84:	f8d4 b000 	ldr.w	fp, [r4]
 800fb88:	f8c8 2000 	str.w	r2, [r8]
 800fb8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fb94:	9307      	str	r3, [sp, #28]
 800fb96:	f8cd 8018 	str.w	r8, [sp, #24]
 800fb9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fb9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fba2:	4b9c      	ldr	r3, [pc, #624]	@ (800fe14 <_printf_float+0x2c8>)
 800fba4:	f04f 32ff 	mov.w	r2, #4294967295
 800fba8:	f7f0 ffe8 	bl	8000b7c <__aeabi_dcmpun>
 800fbac:	bb70      	cbnz	r0, 800fc0c <_printf_float+0xc0>
 800fbae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbb2:	4b98      	ldr	r3, [pc, #608]	@ (800fe14 <_printf_float+0x2c8>)
 800fbb4:	f04f 32ff 	mov.w	r2, #4294967295
 800fbb8:	f7f0 ffc2 	bl	8000b40 <__aeabi_dcmple>
 800fbbc:	bb30      	cbnz	r0, 800fc0c <_printf_float+0xc0>
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	4640      	mov	r0, r8
 800fbc4:	4649      	mov	r1, r9
 800fbc6:	f7f0 ffb1 	bl	8000b2c <__aeabi_dcmplt>
 800fbca:	b110      	cbz	r0, 800fbd2 <_printf_float+0x86>
 800fbcc:	232d      	movs	r3, #45	@ 0x2d
 800fbce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbd2:	4a91      	ldr	r2, [pc, #580]	@ (800fe18 <_printf_float+0x2cc>)
 800fbd4:	4b91      	ldr	r3, [pc, #580]	@ (800fe1c <_printf_float+0x2d0>)
 800fbd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fbda:	bf8c      	ite	hi
 800fbdc:	4690      	movhi	r8, r2
 800fbde:	4698      	movls	r8, r3
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	6123      	str	r3, [r4, #16]
 800fbe4:	f02b 0304 	bic.w	r3, fp, #4
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	f04f 0900 	mov.w	r9, #0
 800fbee:	9700      	str	r7, [sp, #0]
 800fbf0:	4633      	mov	r3, r6
 800fbf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 f9d2 	bl	800ffa0 <_printf_common>
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	f040 808d 	bne.w	800fd1c <_printf_float+0x1d0>
 800fc02:	f04f 30ff 	mov.w	r0, #4294967295
 800fc06:	b00d      	add	sp, #52	@ 0x34
 800fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0c:	4642      	mov	r2, r8
 800fc0e:	464b      	mov	r3, r9
 800fc10:	4640      	mov	r0, r8
 800fc12:	4649      	mov	r1, r9
 800fc14:	f7f0 ffb2 	bl	8000b7c <__aeabi_dcmpun>
 800fc18:	b140      	cbz	r0, 800fc2c <_printf_float+0xe0>
 800fc1a:	464b      	mov	r3, r9
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	bfbc      	itt	lt
 800fc20:	232d      	movlt	r3, #45	@ 0x2d
 800fc22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc26:	4a7e      	ldr	r2, [pc, #504]	@ (800fe20 <_printf_float+0x2d4>)
 800fc28:	4b7e      	ldr	r3, [pc, #504]	@ (800fe24 <_printf_float+0x2d8>)
 800fc2a:	e7d4      	b.n	800fbd6 <_printf_float+0x8a>
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc32:	9206      	str	r2, [sp, #24]
 800fc34:	1c5a      	adds	r2, r3, #1
 800fc36:	d13b      	bne.n	800fcb0 <_printf_float+0x164>
 800fc38:	2306      	movs	r3, #6
 800fc3a:	6063      	str	r3, [r4, #4]
 800fc3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fc40:	2300      	movs	r3, #0
 800fc42:	6022      	str	r2, [r4, #0]
 800fc44:	9303      	str	r3, [sp, #12]
 800fc46:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fc4c:	ab09      	add	r3, sp, #36	@ 0x24
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	6861      	ldr	r1, [r4, #4]
 800fc52:	ec49 8b10 	vmov	d0, r8, r9
 800fc56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f7ff fed6 	bl	800fa0c <__cvt>
 800fc60:	9b06      	ldr	r3, [sp, #24]
 800fc62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc64:	2b47      	cmp	r3, #71	@ 0x47
 800fc66:	4680      	mov	r8, r0
 800fc68:	d129      	bne.n	800fcbe <_printf_float+0x172>
 800fc6a:	1cc8      	adds	r0, r1, #3
 800fc6c:	db02      	blt.n	800fc74 <_printf_float+0x128>
 800fc6e:	6863      	ldr	r3, [r4, #4]
 800fc70:	4299      	cmp	r1, r3
 800fc72:	dd41      	ble.n	800fcf8 <_printf_float+0x1ac>
 800fc74:	f1aa 0a02 	sub.w	sl, sl, #2
 800fc78:	fa5f fa8a 	uxtb.w	sl, sl
 800fc7c:	3901      	subs	r1, #1
 800fc7e:	4652      	mov	r2, sl
 800fc80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fc84:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc86:	f7ff ff26 	bl	800fad6 <__exponent>
 800fc8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc8c:	1813      	adds	r3, r2, r0
 800fc8e:	2a01      	cmp	r2, #1
 800fc90:	4681      	mov	r9, r0
 800fc92:	6123      	str	r3, [r4, #16]
 800fc94:	dc02      	bgt.n	800fc9c <_printf_float+0x150>
 800fc96:	6822      	ldr	r2, [r4, #0]
 800fc98:	07d2      	lsls	r2, r2, #31
 800fc9a:	d501      	bpl.n	800fca0 <_printf_float+0x154>
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	6123      	str	r3, [r4, #16]
 800fca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d0a2      	beq.n	800fbee <_printf_float+0xa2>
 800fca8:	232d      	movs	r3, #45	@ 0x2d
 800fcaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcae:	e79e      	b.n	800fbee <_printf_float+0xa2>
 800fcb0:	9a06      	ldr	r2, [sp, #24]
 800fcb2:	2a47      	cmp	r2, #71	@ 0x47
 800fcb4:	d1c2      	bne.n	800fc3c <_printf_float+0xf0>
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1c0      	bne.n	800fc3c <_printf_float+0xf0>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e7bd      	b.n	800fc3a <_printf_float+0xee>
 800fcbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fcc2:	d9db      	bls.n	800fc7c <_printf_float+0x130>
 800fcc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fcc8:	d118      	bne.n	800fcfc <_printf_float+0x1b0>
 800fcca:	2900      	cmp	r1, #0
 800fccc:	6863      	ldr	r3, [r4, #4]
 800fcce:	dd0b      	ble.n	800fce8 <_printf_float+0x19c>
 800fcd0:	6121      	str	r1, [r4, #16]
 800fcd2:	b913      	cbnz	r3, 800fcda <_printf_float+0x18e>
 800fcd4:	6822      	ldr	r2, [r4, #0]
 800fcd6:	07d0      	lsls	r0, r2, #31
 800fcd8:	d502      	bpl.n	800fce0 <_printf_float+0x194>
 800fcda:	3301      	adds	r3, #1
 800fcdc:	440b      	add	r3, r1
 800fcde:	6123      	str	r3, [r4, #16]
 800fce0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fce2:	f04f 0900 	mov.w	r9, #0
 800fce6:	e7db      	b.n	800fca0 <_printf_float+0x154>
 800fce8:	b913      	cbnz	r3, 800fcf0 <_printf_float+0x1a4>
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	07d2      	lsls	r2, r2, #31
 800fcee:	d501      	bpl.n	800fcf4 <_printf_float+0x1a8>
 800fcf0:	3302      	adds	r3, #2
 800fcf2:	e7f4      	b.n	800fcde <_printf_float+0x192>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e7f2      	b.n	800fcde <_printf_float+0x192>
 800fcf8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fcfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcfe:	4299      	cmp	r1, r3
 800fd00:	db05      	blt.n	800fd0e <_printf_float+0x1c2>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	6121      	str	r1, [r4, #16]
 800fd06:	07d8      	lsls	r0, r3, #31
 800fd08:	d5ea      	bpl.n	800fce0 <_printf_float+0x194>
 800fd0a:	1c4b      	adds	r3, r1, #1
 800fd0c:	e7e7      	b.n	800fcde <_printf_float+0x192>
 800fd0e:	2900      	cmp	r1, #0
 800fd10:	bfd4      	ite	le
 800fd12:	f1c1 0202 	rsble	r2, r1, #2
 800fd16:	2201      	movgt	r2, #1
 800fd18:	4413      	add	r3, r2
 800fd1a:	e7e0      	b.n	800fcde <_printf_float+0x192>
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	055a      	lsls	r2, r3, #21
 800fd20:	d407      	bmi.n	800fd32 <_printf_float+0x1e6>
 800fd22:	6923      	ldr	r3, [r4, #16]
 800fd24:	4642      	mov	r2, r8
 800fd26:	4631      	mov	r1, r6
 800fd28:	4628      	mov	r0, r5
 800fd2a:	47b8      	blx	r7
 800fd2c:	3001      	adds	r0, #1
 800fd2e:	d12b      	bne.n	800fd88 <_printf_float+0x23c>
 800fd30:	e767      	b.n	800fc02 <_printf_float+0xb6>
 800fd32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd36:	f240 80dd 	bls.w	800fef4 <_printf_float+0x3a8>
 800fd3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd3e:	2200      	movs	r2, #0
 800fd40:	2300      	movs	r3, #0
 800fd42:	f7f0 fee9 	bl	8000b18 <__aeabi_dcmpeq>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d033      	beq.n	800fdb2 <_printf_float+0x266>
 800fd4a:	4a37      	ldr	r2, [pc, #220]	@ (800fe28 <_printf_float+0x2dc>)
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4631      	mov	r1, r6
 800fd50:	4628      	mov	r0, r5
 800fd52:	47b8      	blx	r7
 800fd54:	3001      	adds	r0, #1
 800fd56:	f43f af54 	beq.w	800fc02 <_printf_float+0xb6>
 800fd5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fd5e:	4543      	cmp	r3, r8
 800fd60:	db02      	blt.n	800fd68 <_printf_float+0x21c>
 800fd62:	6823      	ldr	r3, [r4, #0]
 800fd64:	07d8      	lsls	r0, r3, #31
 800fd66:	d50f      	bpl.n	800fd88 <_printf_float+0x23c>
 800fd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd6c:	4631      	mov	r1, r6
 800fd6e:	4628      	mov	r0, r5
 800fd70:	47b8      	blx	r7
 800fd72:	3001      	adds	r0, #1
 800fd74:	f43f af45 	beq.w	800fc02 <_printf_float+0xb6>
 800fd78:	f04f 0900 	mov.w	r9, #0
 800fd7c:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd80:	f104 0a1a 	add.w	sl, r4, #26
 800fd84:	45c8      	cmp	r8, r9
 800fd86:	dc09      	bgt.n	800fd9c <_printf_float+0x250>
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	079b      	lsls	r3, r3, #30
 800fd8c:	f100 8103 	bmi.w	800ff96 <_printf_float+0x44a>
 800fd90:	68e0      	ldr	r0, [r4, #12]
 800fd92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd94:	4298      	cmp	r0, r3
 800fd96:	bfb8      	it	lt
 800fd98:	4618      	movlt	r0, r3
 800fd9a:	e734      	b.n	800fc06 <_printf_float+0xba>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	4652      	mov	r2, sl
 800fda0:	4631      	mov	r1, r6
 800fda2:	4628      	mov	r0, r5
 800fda4:	47b8      	blx	r7
 800fda6:	3001      	adds	r0, #1
 800fda8:	f43f af2b 	beq.w	800fc02 <_printf_float+0xb6>
 800fdac:	f109 0901 	add.w	r9, r9, #1
 800fdb0:	e7e8      	b.n	800fd84 <_printf_float+0x238>
 800fdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dc39      	bgt.n	800fe2c <_printf_float+0x2e0>
 800fdb8:	4a1b      	ldr	r2, [pc, #108]	@ (800fe28 <_printf_float+0x2dc>)
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	47b8      	blx	r7
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	f43f af1d 	beq.w	800fc02 <_printf_float+0xb6>
 800fdc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fdcc:	ea59 0303 	orrs.w	r3, r9, r3
 800fdd0:	d102      	bne.n	800fdd8 <_printf_float+0x28c>
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	07d9      	lsls	r1, r3, #31
 800fdd6:	d5d7      	bpl.n	800fd88 <_printf_float+0x23c>
 800fdd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fddc:	4631      	mov	r1, r6
 800fdde:	4628      	mov	r0, r5
 800fde0:	47b8      	blx	r7
 800fde2:	3001      	adds	r0, #1
 800fde4:	f43f af0d 	beq.w	800fc02 <_printf_float+0xb6>
 800fde8:	f04f 0a00 	mov.w	sl, #0
 800fdec:	f104 0b1a 	add.w	fp, r4, #26
 800fdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdf2:	425b      	negs	r3, r3
 800fdf4:	4553      	cmp	r3, sl
 800fdf6:	dc01      	bgt.n	800fdfc <_printf_float+0x2b0>
 800fdf8:	464b      	mov	r3, r9
 800fdfa:	e793      	b.n	800fd24 <_printf_float+0x1d8>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	465a      	mov	r2, fp
 800fe00:	4631      	mov	r1, r6
 800fe02:	4628      	mov	r0, r5
 800fe04:	47b8      	blx	r7
 800fe06:	3001      	adds	r0, #1
 800fe08:	f43f aefb 	beq.w	800fc02 <_printf_float+0xb6>
 800fe0c:	f10a 0a01 	add.w	sl, sl, #1
 800fe10:	e7ee      	b.n	800fdf0 <_printf_float+0x2a4>
 800fe12:	bf00      	nop
 800fe14:	7fefffff 	.word	0x7fefffff
 800fe18:	08012724 	.word	0x08012724
 800fe1c:	08012720 	.word	0x08012720
 800fe20:	0801272c 	.word	0x0801272c
 800fe24:	08012728 	.word	0x08012728
 800fe28:	08012730 	.word	0x08012730
 800fe2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe32:	4553      	cmp	r3, sl
 800fe34:	bfa8      	it	ge
 800fe36:	4653      	movge	r3, sl
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	4699      	mov	r9, r3
 800fe3c:	dc36      	bgt.n	800feac <_printf_float+0x360>
 800fe3e:	f04f 0b00 	mov.w	fp, #0
 800fe42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe46:	f104 021a 	add.w	r2, r4, #26
 800fe4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe4c:	9306      	str	r3, [sp, #24]
 800fe4e:	eba3 0309 	sub.w	r3, r3, r9
 800fe52:	455b      	cmp	r3, fp
 800fe54:	dc31      	bgt.n	800feba <_printf_float+0x36e>
 800fe56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe58:	459a      	cmp	sl, r3
 800fe5a:	dc3a      	bgt.n	800fed2 <_printf_float+0x386>
 800fe5c:	6823      	ldr	r3, [r4, #0]
 800fe5e:	07da      	lsls	r2, r3, #31
 800fe60:	d437      	bmi.n	800fed2 <_printf_float+0x386>
 800fe62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe64:	ebaa 0903 	sub.w	r9, sl, r3
 800fe68:	9b06      	ldr	r3, [sp, #24]
 800fe6a:	ebaa 0303 	sub.w	r3, sl, r3
 800fe6e:	4599      	cmp	r9, r3
 800fe70:	bfa8      	it	ge
 800fe72:	4699      	movge	r9, r3
 800fe74:	f1b9 0f00 	cmp.w	r9, #0
 800fe78:	dc33      	bgt.n	800fee2 <_printf_float+0x396>
 800fe7a:	f04f 0800 	mov.w	r8, #0
 800fe7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe82:	f104 0b1a 	add.w	fp, r4, #26
 800fe86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe88:	ebaa 0303 	sub.w	r3, sl, r3
 800fe8c:	eba3 0309 	sub.w	r3, r3, r9
 800fe90:	4543      	cmp	r3, r8
 800fe92:	f77f af79 	ble.w	800fd88 <_printf_float+0x23c>
 800fe96:	2301      	movs	r3, #1
 800fe98:	465a      	mov	r2, fp
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	47b8      	blx	r7
 800fea0:	3001      	adds	r0, #1
 800fea2:	f43f aeae 	beq.w	800fc02 <_printf_float+0xb6>
 800fea6:	f108 0801 	add.w	r8, r8, #1
 800feaa:	e7ec      	b.n	800fe86 <_printf_float+0x33a>
 800feac:	4642      	mov	r2, r8
 800feae:	4631      	mov	r1, r6
 800feb0:	4628      	mov	r0, r5
 800feb2:	47b8      	blx	r7
 800feb4:	3001      	adds	r0, #1
 800feb6:	d1c2      	bne.n	800fe3e <_printf_float+0x2f2>
 800feb8:	e6a3      	b.n	800fc02 <_printf_float+0xb6>
 800feba:	2301      	movs	r3, #1
 800febc:	4631      	mov	r1, r6
 800febe:	4628      	mov	r0, r5
 800fec0:	9206      	str	r2, [sp, #24]
 800fec2:	47b8      	blx	r7
 800fec4:	3001      	adds	r0, #1
 800fec6:	f43f ae9c 	beq.w	800fc02 <_printf_float+0xb6>
 800feca:	9a06      	ldr	r2, [sp, #24]
 800fecc:	f10b 0b01 	add.w	fp, fp, #1
 800fed0:	e7bb      	b.n	800fe4a <_printf_float+0x2fe>
 800fed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fed6:	4631      	mov	r1, r6
 800fed8:	4628      	mov	r0, r5
 800feda:	47b8      	blx	r7
 800fedc:	3001      	adds	r0, #1
 800fede:	d1c0      	bne.n	800fe62 <_printf_float+0x316>
 800fee0:	e68f      	b.n	800fc02 <_printf_float+0xb6>
 800fee2:	9a06      	ldr	r2, [sp, #24]
 800fee4:	464b      	mov	r3, r9
 800fee6:	4442      	add	r2, r8
 800fee8:	4631      	mov	r1, r6
 800feea:	4628      	mov	r0, r5
 800feec:	47b8      	blx	r7
 800feee:	3001      	adds	r0, #1
 800fef0:	d1c3      	bne.n	800fe7a <_printf_float+0x32e>
 800fef2:	e686      	b.n	800fc02 <_printf_float+0xb6>
 800fef4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fef8:	f1ba 0f01 	cmp.w	sl, #1
 800fefc:	dc01      	bgt.n	800ff02 <_printf_float+0x3b6>
 800fefe:	07db      	lsls	r3, r3, #31
 800ff00:	d536      	bpl.n	800ff70 <_printf_float+0x424>
 800ff02:	2301      	movs	r3, #1
 800ff04:	4642      	mov	r2, r8
 800ff06:	4631      	mov	r1, r6
 800ff08:	4628      	mov	r0, r5
 800ff0a:	47b8      	blx	r7
 800ff0c:	3001      	adds	r0, #1
 800ff0e:	f43f ae78 	beq.w	800fc02 <_printf_float+0xb6>
 800ff12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff16:	4631      	mov	r1, r6
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b8      	blx	r7
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	f43f ae70 	beq.w	800fc02 <_printf_float+0xb6>
 800ff22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff26:	2200      	movs	r2, #0
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff2e:	f7f0 fdf3 	bl	8000b18 <__aeabi_dcmpeq>
 800ff32:	b9c0      	cbnz	r0, 800ff66 <_printf_float+0x41a>
 800ff34:	4653      	mov	r3, sl
 800ff36:	f108 0201 	add.w	r2, r8, #1
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	47b8      	blx	r7
 800ff40:	3001      	adds	r0, #1
 800ff42:	d10c      	bne.n	800ff5e <_printf_float+0x412>
 800ff44:	e65d      	b.n	800fc02 <_printf_float+0xb6>
 800ff46:	2301      	movs	r3, #1
 800ff48:	465a      	mov	r2, fp
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	47b8      	blx	r7
 800ff50:	3001      	adds	r0, #1
 800ff52:	f43f ae56 	beq.w	800fc02 <_printf_float+0xb6>
 800ff56:	f108 0801 	add.w	r8, r8, #1
 800ff5a:	45d0      	cmp	r8, sl
 800ff5c:	dbf3      	blt.n	800ff46 <_printf_float+0x3fa>
 800ff5e:	464b      	mov	r3, r9
 800ff60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ff64:	e6df      	b.n	800fd26 <_printf_float+0x1da>
 800ff66:	f04f 0800 	mov.w	r8, #0
 800ff6a:	f104 0b1a 	add.w	fp, r4, #26
 800ff6e:	e7f4      	b.n	800ff5a <_printf_float+0x40e>
 800ff70:	2301      	movs	r3, #1
 800ff72:	4642      	mov	r2, r8
 800ff74:	e7e1      	b.n	800ff3a <_printf_float+0x3ee>
 800ff76:	2301      	movs	r3, #1
 800ff78:	464a      	mov	r2, r9
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	47b8      	blx	r7
 800ff80:	3001      	adds	r0, #1
 800ff82:	f43f ae3e 	beq.w	800fc02 <_printf_float+0xb6>
 800ff86:	f108 0801 	add.w	r8, r8, #1
 800ff8a:	68e3      	ldr	r3, [r4, #12]
 800ff8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff8e:	1a5b      	subs	r3, r3, r1
 800ff90:	4543      	cmp	r3, r8
 800ff92:	dcf0      	bgt.n	800ff76 <_printf_float+0x42a>
 800ff94:	e6fc      	b.n	800fd90 <_printf_float+0x244>
 800ff96:	f04f 0800 	mov.w	r8, #0
 800ff9a:	f104 0919 	add.w	r9, r4, #25
 800ff9e:	e7f4      	b.n	800ff8a <_printf_float+0x43e>

0800ffa0 <_printf_common>:
 800ffa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	4698      	mov	r8, r3
 800ffa8:	688a      	ldr	r2, [r1, #8]
 800ffaa:	690b      	ldr	r3, [r1, #16]
 800ffac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	bfb8      	it	lt
 800ffb4:	4613      	movlt	r3, r2
 800ffb6:	6033      	str	r3, [r6, #0]
 800ffb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	b10a      	cbz	r2, 800ffc6 <_printf_common+0x26>
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	6033      	str	r3, [r6, #0]
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	0699      	lsls	r1, r3, #26
 800ffca:	bf42      	ittt	mi
 800ffcc:	6833      	ldrmi	r3, [r6, #0]
 800ffce:	3302      	addmi	r3, #2
 800ffd0:	6033      	strmi	r3, [r6, #0]
 800ffd2:	6825      	ldr	r5, [r4, #0]
 800ffd4:	f015 0506 	ands.w	r5, r5, #6
 800ffd8:	d106      	bne.n	800ffe8 <_printf_common+0x48>
 800ffda:	f104 0a19 	add.w	sl, r4, #25
 800ffde:	68e3      	ldr	r3, [r4, #12]
 800ffe0:	6832      	ldr	r2, [r6, #0]
 800ffe2:	1a9b      	subs	r3, r3, r2
 800ffe4:	42ab      	cmp	r3, r5
 800ffe6:	dc26      	bgt.n	8010036 <_printf_common+0x96>
 800ffe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ffec:	6822      	ldr	r2, [r4, #0]
 800ffee:	3b00      	subs	r3, #0
 800fff0:	bf18      	it	ne
 800fff2:	2301      	movne	r3, #1
 800fff4:	0692      	lsls	r2, r2, #26
 800fff6:	d42b      	bmi.n	8010050 <_printf_common+0xb0>
 800fff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fffc:	4641      	mov	r1, r8
 800fffe:	4638      	mov	r0, r7
 8010000:	47c8      	blx	r9
 8010002:	3001      	adds	r0, #1
 8010004:	d01e      	beq.n	8010044 <_printf_common+0xa4>
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	6922      	ldr	r2, [r4, #16]
 801000a:	f003 0306 	and.w	r3, r3, #6
 801000e:	2b04      	cmp	r3, #4
 8010010:	bf02      	ittt	eq
 8010012:	68e5      	ldreq	r5, [r4, #12]
 8010014:	6833      	ldreq	r3, [r6, #0]
 8010016:	1aed      	subeq	r5, r5, r3
 8010018:	68a3      	ldr	r3, [r4, #8]
 801001a:	bf0c      	ite	eq
 801001c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010020:	2500      	movne	r5, #0
 8010022:	4293      	cmp	r3, r2
 8010024:	bfc4      	itt	gt
 8010026:	1a9b      	subgt	r3, r3, r2
 8010028:	18ed      	addgt	r5, r5, r3
 801002a:	2600      	movs	r6, #0
 801002c:	341a      	adds	r4, #26
 801002e:	42b5      	cmp	r5, r6
 8010030:	d11a      	bne.n	8010068 <_printf_common+0xc8>
 8010032:	2000      	movs	r0, #0
 8010034:	e008      	b.n	8010048 <_printf_common+0xa8>
 8010036:	2301      	movs	r3, #1
 8010038:	4652      	mov	r2, sl
 801003a:	4641      	mov	r1, r8
 801003c:	4638      	mov	r0, r7
 801003e:	47c8      	blx	r9
 8010040:	3001      	adds	r0, #1
 8010042:	d103      	bne.n	801004c <_printf_common+0xac>
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004c:	3501      	adds	r5, #1
 801004e:	e7c6      	b.n	800ffde <_printf_common+0x3e>
 8010050:	18e1      	adds	r1, r4, r3
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	2030      	movs	r0, #48	@ 0x30
 8010056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801005a:	4422      	add	r2, r4
 801005c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010064:	3302      	adds	r3, #2
 8010066:	e7c7      	b.n	800fff8 <_printf_common+0x58>
 8010068:	2301      	movs	r3, #1
 801006a:	4622      	mov	r2, r4
 801006c:	4641      	mov	r1, r8
 801006e:	4638      	mov	r0, r7
 8010070:	47c8      	blx	r9
 8010072:	3001      	adds	r0, #1
 8010074:	d0e6      	beq.n	8010044 <_printf_common+0xa4>
 8010076:	3601      	adds	r6, #1
 8010078:	e7d9      	b.n	801002e <_printf_common+0x8e>
	...

0801007c <_printf_i>:
 801007c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	7e0f      	ldrb	r7, [r1, #24]
 8010082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010084:	2f78      	cmp	r7, #120	@ 0x78
 8010086:	4691      	mov	r9, r2
 8010088:	4680      	mov	r8, r0
 801008a:	460c      	mov	r4, r1
 801008c:	469a      	mov	sl, r3
 801008e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010092:	d807      	bhi.n	80100a4 <_printf_i+0x28>
 8010094:	2f62      	cmp	r7, #98	@ 0x62
 8010096:	d80a      	bhi.n	80100ae <_printf_i+0x32>
 8010098:	2f00      	cmp	r7, #0
 801009a:	f000 80d1 	beq.w	8010240 <_printf_i+0x1c4>
 801009e:	2f58      	cmp	r7, #88	@ 0x58
 80100a0:	f000 80b8 	beq.w	8010214 <_printf_i+0x198>
 80100a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80100ac:	e03a      	b.n	8010124 <_printf_i+0xa8>
 80100ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80100b2:	2b15      	cmp	r3, #21
 80100b4:	d8f6      	bhi.n	80100a4 <_printf_i+0x28>
 80100b6:	a101      	add	r1, pc, #4	@ (adr r1, 80100bc <_printf_i+0x40>)
 80100b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100bc:	08010115 	.word	0x08010115
 80100c0:	08010129 	.word	0x08010129
 80100c4:	080100a5 	.word	0x080100a5
 80100c8:	080100a5 	.word	0x080100a5
 80100cc:	080100a5 	.word	0x080100a5
 80100d0:	080100a5 	.word	0x080100a5
 80100d4:	08010129 	.word	0x08010129
 80100d8:	080100a5 	.word	0x080100a5
 80100dc:	080100a5 	.word	0x080100a5
 80100e0:	080100a5 	.word	0x080100a5
 80100e4:	080100a5 	.word	0x080100a5
 80100e8:	08010227 	.word	0x08010227
 80100ec:	08010153 	.word	0x08010153
 80100f0:	080101e1 	.word	0x080101e1
 80100f4:	080100a5 	.word	0x080100a5
 80100f8:	080100a5 	.word	0x080100a5
 80100fc:	08010249 	.word	0x08010249
 8010100:	080100a5 	.word	0x080100a5
 8010104:	08010153 	.word	0x08010153
 8010108:	080100a5 	.word	0x080100a5
 801010c:	080100a5 	.word	0x080100a5
 8010110:	080101e9 	.word	0x080101e9
 8010114:	6833      	ldr	r3, [r6, #0]
 8010116:	1d1a      	adds	r2, r3, #4
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	6032      	str	r2, [r6, #0]
 801011c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010124:	2301      	movs	r3, #1
 8010126:	e09c      	b.n	8010262 <_printf_i+0x1e6>
 8010128:	6833      	ldr	r3, [r6, #0]
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	1d19      	adds	r1, r3, #4
 801012e:	6031      	str	r1, [r6, #0]
 8010130:	0606      	lsls	r6, r0, #24
 8010132:	d501      	bpl.n	8010138 <_printf_i+0xbc>
 8010134:	681d      	ldr	r5, [r3, #0]
 8010136:	e003      	b.n	8010140 <_printf_i+0xc4>
 8010138:	0645      	lsls	r5, r0, #25
 801013a:	d5fb      	bpl.n	8010134 <_printf_i+0xb8>
 801013c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010140:	2d00      	cmp	r5, #0
 8010142:	da03      	bge.n	801014c <_printf_i+0xd0>
 8010144:	232d      	movs	r3, #45	@ 0x2d
 8010146:	426d      	negs	r5, r5
 8010148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801014c:	4858      	ldr	r0, [pc, #352]	@ (80102b0 <_printf_i+0x234>)
 801014e:	230a      	movs	r3, #10
 8010150:	e011      	b.n	8010176 <_printf_i+0xfa>
 8010152:	6821      	ldr	r1, [r4, #0]
 8010154:	6833      	ldr	r3, [r6, #0]
 8010156:	0608      	lsls	r0, r1, #24
 8010158:	f853 5b04 	ldr.w	r5, [r3], #4
 801015c:	d402      	bmi.n	8010164 <_printf_i+0xe8>
 801015e:	0649      	lsls	r1, r1, #25
 8010160:	bf48      	it	mi
 8010162:	b2ad      	uxthmi	r5, r5
 8010164:	2f6f      	cmp	r7, #111	@ 0x6f
 8010166:	4852      	ldr	r0, [pc, #328]	@ (80102b0 <_printf_i+0x234>)
 8010168:	6033      	str	r3, [r6, #0]
 801016a:	bf14      	ite	ne
 801016c:	230a      	movne	r3, #10
 801016e:	2308      	moveq	r3, #8
 8010170:	2100      	movs	r1, #0
 8010172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010176:	6866      	ldr	r6, [r4, #4]
 8010178:	60a6      	str	r6, [r4, #8]
 801017a:	2e00      	cmp	r6, #0
 801017c:	db05      	blt.n	801018a <_printf_i+0x10e>
 801017e:	6821      	ldr	r1, [r4, #0]
 8010180:	432e      	orrs	r6, r5
 8010182:	f021 0104 	bic.w	r1, r1, #4
 8010186:	6021      	str	r1, [r4, #0]
 8010188:	d04b      	beq.n	8010222 <_printf_i+0x1a6>
 801018a:	4616      	mov	r6, r2
 801018c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010190:	fb03 5711 	mls	r7, r3, r1, r5
 8010194:	5dc7      	ldrb	r7, [r0, r7]
 8010196:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801019a:	462f      	mov	r7, r5
 801019c:	42bb      	cmp	r3, r7
 801019e:	460d      	mov	r5, r1
 80101a0:	d9f4      	bls.n	801018c <_printf_i+0x110>
 80101a2:	2b08      	cmp	r3, #8
 80101a4:	d10b      	bne.n	80101be <_printf_i+0x142>
 80101a6:	6823      	ldr	r3, [r4, #0]
 80101a8:	07df      	lsls	r7, r3, #31
 80101aa:	d508      	bpl.n	80101be <_printf_i+0x142>
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	6861      	ldr	r1, [r4, #4]
 80101b0:	4299      	cmp	r1, r3
 80101b2:	bfde      	ittt	le
 80101b4:	2330      	movle	r3, #48	@ 0x30
 80101b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80101be:	1b92      	subs	r2, r2, r6
 80101c0:	6122      	str	r2, [r4, #16]
 80101c2:	f8cd a000 	str.w	sl, [sp]
 80101c6:	464b      	mov	r3, r9
 80101c8:	aa03      	add	r2, sp, #12
 80101ca:	4621      	mov	r1, r4
 80101cc:	4640      	mov	r0, r8
 80101ce:	f7ff fee7 	bl	800ffa0 <_printf_common>
 80101d2:	3001      	adds	r0, #1
 80101d4:	d14a      	bne.n	801026c <_printf_i+0x1f0>
 80101d6:	f04f 30ff 	mov.w	r0, #4294967295
 80101da:	b004      	add	sp, #16
 80101dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	f043 0320 	orr.w	r3, r3, #32
 80101e6:	6023      	str	r3, [r4, #0]
 80101e8:	4832      	ldr	r0, [pc, #200]	@ (80102b4 <_printf_i+0x238>)
 80101ea:	2778      	movs	r7, #120	@ 0x78
 80101ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	6831      	ldr	r1, [r6, #0]
 80101f4:	061f      	lsls	r7, r3, #24
 80101f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80101fa:	d402      	bmi.n	8010202 <_printf_i+0x186>
 80101fc:	065f      	lsls	r7, r3, #25
 80101fe:	bf48      	it	mi
 8010200:	b2ad      	uxthmi	r5, r5
 8010202:	6031      	str	r1, [r6, #0]
 8010204:	07d9      	lsls	r1, r3, #31
 8010206:	bf44      	itt	mi
 8010208:	f043 0320 	orrmi.w	r3, r3, #32
 801020c:	6023      	strmi	r3, [r4, #0]
 801020e:	b11d      	cbz	r5, 8010218 <_printf_i+0x19c>
 8010210:	2310      	movs	r3, #16
 8010212:	e7ad      	b.n	8010170 <_printf_i+0xf4>
 8010214:	4826      	ldr	r0, [pc, #152]	@ (80102b0 <_printf_i+0x234>)
 8010216:	e7e9      	b.n	80101ec <_printf_i+0x170>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	f023 0320 	bic.w	r3, r3, #32
 801021e:	6023      	str	r3, [r4, #0]
 8010220:	e7f6      	b.n	8010210 <_printf_i+0x194>
 8010222:	4616      	mov	r6, r2
 8010224:	e7bd      	b.n	80101a2 <_printf_i+0x126>
 8010226:	6833      	ldr	r3, [r6, #0]
 8010228:	6825      	ldr	r5, [r4, #0]
 801022a:	6961      	ldr	r1, [r4, #20]
 801022c:	1d18      	adds	r0, r3, #4
 801022e:	6030      	str	r0, [r6, #0]
 8010230:	062e      	lsls	r6, r5, #24
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	d501      	bpl.n	801023a <_printf_i+0x1be>
 8010236:	6019      	str	r1, [r3, #0]
 8010238:	e002      	b.n	8010240 <_printf_i+0x1c4>
 801023a:	0668      	lsls	r0, r5, #25
 801023c:	d5fb      	bpl.n	8010236 <_printf_i+0x1ba>
 801023e:	8019      	strh	r1, [r3, #0]
 8010240:	2300      	movs	r3, #0
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	4616      	mov	r6, r2
 8010246:	e7bc      	b.n	80101c2 <_printf_i+0x146>
 8010248:	6833      	ldr	r3, [r6, #0]
 801024a:	1d1a      	adds	r2, r3, #4
 801024c:	6032      	str	r2, [r6, #0]
 801024e:	681e      	ldr	r6, [r3, #0]
 8010250:	6862      	ldr	r2, [r4, #4]
 8010252:	2100      	movs	r1, #0
 8010254:	4630      	mov	r0, r6
 8010256:	f7ef ffe3 	bl	8000220 <memchr>
 801025a:	b108      	cbz	r0, 8010260 <_printf_i+0x1e4>
 801025c:	1b80      	subs	r0, r0, r6
 801025e:	6060      	str	r0, [r4, #4]
 8010260:	6863      	ldr	r3, [r4, #4]
 8010262:	6123      	str	r3, [r4, #16]
 8010264:	2300      	movs	r3, #0
 8010266:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801026a:	e7aa      	b.n	80101c2 <_printf_i+0x146>
 801026c:	6923      	ldr	r3, [r4, #16]
 801026e:	4632      	mov	r2, r6
 8010270:	4649      	mov	r1, r9
 8010272:	4640      	mov	r0, r8
 8010274:	47d0      	blx	sl
 8010276:	3001      	adds	r0, #1
 8010278:	d0ad      	beq.n	80101d6 <_printf_i+0x15a>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	079b      	lsls	r3, r3, #30
 801027e:	d413      	bmi.n	80102a8 <_printf_i+0x22c>
 8010280:	68e0      	ldr	r0, [r4, #12]
 8010282:	9b03      	ldr	r3, [sp, #12]
 8010284:	4298      	cmp	r0, r3
 8010286:	bfb8      	it	lt
 8010288:	4618      	movlt	r0, r3
 801028a:	e7a6      	b.n	80101da <_printf_i+0x15e>
 801028c:	2301      	movs	r3, #1
 801028e:	4632      	mov	r2, r6
 8010290:	4649      	mov	r1, r9
 8010292:	4640      	mov	r0, r8
 8010294:	47d0      	blx	sl
 8010296:	3001      	adds	r0, #1
 8010298:	d09d      	beq.n	80101d6 <_printf_i+0x15a>
 801029a:	3501      	adds	r5, #1
 801029c:	68e3      	ldr	r3, [r4, #12]
 801029e:	9903      	ldr	r1, [sp, #12]
 80102a0:	1a5b      	subs	r3, r3, r1
 80102a2:	42ab      	cmp	r3, r5
 80102a4:	dcf2      	bgt.n	801028c <_printf_i+0x210>
 80102a6:	e7eb      	b.n	8010280 <_printf_i+0x204>
 80102a8:	2500      	movs	r5, #0
 80102aa:	f104 0619 	add.w	r6, r4, #25
 80102ae:	e7f5      	b.n	801029c <_printf_i+0x220>
 80102b0:	08012732 	.word	0x08012732
 80102b4:	08012743 	.word	0x08012743

080102b8 <std>:
 80102b8:	2300      	movs	r3, #0
 80102ba:	b510      	push	{r4, lr}
 80102bc:	4604      	mov	r4, r0
 80102be:	e9c0 3300 	strd	r3, r3, [r0]
 80102c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102c6:	6083      	str	r3, [r0, #8]
 80102c8:	8181      	strh	r1, [r0, #12]
 80102ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80102cc:	81c2      	strh	r2, [r0, #14]
 80102ce:	6183      	str	r3, [r0, #24]
 80102d0:	4619      	mov	r1, r3
 80102d2:	2208      	movs	r2, #8
 80102d4:	305c      	adds	r0, #92	@ 0x5c
 80102d6:	f000 f8f4 	bl	80104c2 <memset>
 80102da:	4b0d      	ldr	r3, [pc, #52]	@ (8010310 <std+0x58>)
 80102dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80102de:	4b0d      	ldr	r3, [pc, #52]	@ (8010314 <std+0x5c>)
 80102e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80102e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010318 <std+0x60>)
 80102e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80102e6:	4b0d      	ldr	r3, [pc, #52]	@ (801031c <std+0x64>)
 80102e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80102ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010320 <std+0x68>)
 80102ec:	6224      	str	r4, [r4, #32]
 80102ee:	429c      	cmp	r4, r3
 80102f0:	d006      	beq.n	8010300 <std+0x48>
 80102f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80102f6:	4294      	cmp	r4, r2
 80102f8:	d002      	beq.n	8010300 <std+0x48>
 80102fa:	33d0      	adds	r3, #208	@ 0xd0
 80102fc:	429c      	cmp	r4, r3
 80102fe:	d105      	bne.n	801030c <std+0x54>
 8010300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010308:	f000 b968 	b.w	80105dc <__retarget_lock_init_recursive>
 801030c:	bd10      	pop	{r4, pc}
 801030e:	bf00      	nop
 8010310:	0801043d 	.word	0x0801043d
 8010314:	0801045f 	.word	0x0801045f
 8010318:	08010497 	.word	0x08010497
 801031c:	080104bb 	.word	0x080104bb
 8010320:	20002288 	.word	0x20002288

08010324 <stdio_exit_handler>:
 8010324:	4a02      	ldr	r2, [pc, #8]	@ (8010330 <stdio_exit_handler+0xc>)
 8010326:	4903      	ldr	r1, [pc, #12]	@ (8010334 <stdio_exit_handler+0x10>)
 8010328:	4803      	ldr	r0, [pc, #12]	@ (8010338 <stdio_exit_handler+0x14>)
 801032a:	f000 b869 	b.w	8010400 <_fwalk_sglue>
 801032e:	bf00      	nop
 8010330:	2000010c 	.word	0x2000010c
 8010334:	08011b41 	.word	0x08011b41
 8010338:	2000011c 	.word	0x2000011c

0801033c <cleanup_stdio>:
 801033c:	6841      	ldr	r1, [r0, #4]
 801033e:	4b0c      	ldr	r3, [pc, #48]	@ (8010370 <cleanup_stdio+0x34>)
 8010340:	4299      	cmp	r1, r3
 8010342:	b510      	push	{r4, lr}
 8010344:	4604      	mov	r4, r0
 8010346:	d001      	beq.n	801034c <cleanup_stdio+0x10>
 8010348:	f001 fbfa 	bl	8011b40 <_fflush_r>
 801034c:	68a1      	ldr	r1, [r4, #8]
 801034e:	4b09      	ldr	r3, [pc, #36]	@ (8010374 <cleanup_stdio+0x38>)
 8010350:	4299      	cmp	r1, r3
 8010352:	d002      	beq.n	801035a <cleanup_stdio+0x1e>
 8010354:	4620      	mov	r0, r4
 8010356:	f001 fbf3 	bl	8011b40 <_fflush_r>
 801035a:	68e1      	ldr	r1, [r4, #12]
 801035c:	4b06      	ldr	r3, [pc, #24]	@ (8010378 <cleanup_stdio+0x3c>)
 801035e:	4299      	cmp	r1, r3
 8010360:	d004      	beq.n	801036c <cleanup_stdio+0x30>
 8010362:	4620      	mov	r0, r4
 8010364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010368:	f001 bbea 	b.w	8011b40 <_fflush_r>
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	20002288 	.word	0x20002288
 8010374:	200022f0 	.word	0x200022f0
 8010378:	20002358 	.word	0x20002358

0801037c <global_stdio_init.part.0>:
 801037c:	b510      	push	{r4, lr}
 801037e:	4b0b      	ldr	r3, [pc, #44]	@ (80103ac <global_stdio_init.part.0+0x30>)
 8010380:	4c0b      	ldr	r4, [pc, #44]	@ (80103b0 <global_stdio_init.part.0+0x34>)
 8010382:	4a0c      	ldr	r2, [pc, #48]	@ (80103b4 <global_stdio_init.part.0+0x38>)
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	4620      	mov	r0, r4
 8010388:	2200      	movs	r2, #0
 801038a:	2104      	movs	r1, #4
 801038c:	f7ff ff94 	bl	80102b8 <std>
 8010390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010394:	2201      	movs	r2, #1
 8010396:	2109      	movs	r1, #9
 8010398:	f7ff ff8e 	bl	80102b8 <std>
 801039c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80103a0:	2202      	movs	r2, #2
 80103a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103a6:	2112      	movs	r1, #18
 80103a8:	f7ff bf86 	b.w	80102b8 <std>
 80103ac:	200023c0 	.word	0x200023c0
 80103b0:	20002288 	.word	0x20002288
 80103b4:	08010325 	.word	0x08010325

080103b8 <__sfp_lock_acquire>:
 80103b8:	4801      	ldr	r0, [pc, #4]	@ (80103c0 <__sfp_lock_acquire+0x8>)
 80103ba:	f000 b910 	b.w	80105de <__retarget_lock_acquire_recursive>
 80103be:	bf00      	nop
 80103c0:	200023c9 	.word	0x200023c9

080103c4 <__sfp_lock_release>:
 80103c4:	4801      	ldr	r0, [pc, #4]	@ (80103cc <__sfp_lock_release+0x8>)
 80103c6:	f000 b90b 	b.w	80105e0 <__retarget_lock_release_recursive>
 80103ca:	bf00      	nop
 80103cc:	200023c9 	.word	0x200023c9

080103d0 <__sinit>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	4604      	mov	r4, r0
 80103d4:	f7ff fff0 	bl	80103b8 <__sfp_lock_acquire>
 80103d8:	6a23      	ldr	r3, [r4, #32]
 80103da:	b11b      	cbz	r3, 80103e4 <__sinit+0x14>
 80103dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e0:	f7ff bff0 	b.w	80103c4 <__sfp_lock_release>
 80103e4:	4b04      	ldr	r3, [pc, #16]	@ (80103f8 <__sinit+0x28>)
 80103e6:	6223      	str	r3, [r4, #32]
 80103e8:	4b04      	ldr	r3, [pc, #16]	@ (80103fc <__sinit+0x2c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1f5      	bne.n	80103dc <__sinit+0xc>
 80103f0:	f7ff ffc4 	bl	801037c <global_stdio_init.part.0>
 80103f4:	e7f2      	b.n	80103dc <__sinit+0xc>
 80103f6:	bf00      	nop
 80103f8:	0801033d 	.word	0x0801033d
 80103fc:	200023c0 	.word	0x200023c0

08010400 <_fwalk_sglue>:
 8010400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010404:	4607      	mov	r7, r0
 8010406:	4688      	mov	r8, r1
 8010408:	4614      	mov	r4, r2
 801040a:	2600      	movs	r6, #0
 801040c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010410:	f1b9 0901 	subs.w	r9, r9, #1
 8010414:	d505      	bpl.n	8010422 <_fwalk_sglue+0x22>
 8010416:	6824      	ldr	r4, [r4, #0]
 8010418:	2c00      	cmp	r4, #0
 801041a:	d1f7      	bne.n	801040c <_fwalk_sglue+0xc>
 801041c:	4630      	mov	r0, r6
 801041e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d907      	bls.n	8010438 <_fwalk_sglue+0x38>
 8010428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801042c:	3301      	adds	r3, #1
 801042e:	d003      	beq.n	8010438 <_fwalk_sglue+0x38>
 8010430:	4629      	mov	r1, r5
 8010432:	4638      	mov	r0, r7
 8010434:	47c0      	blx	r8
 8010436:	4306      	orrs	r6, r0
 8010438:	3568      	adds	r5, #104	@ 0x68
 801043a:	e7e9      	b.n	8010410 <_fwalk_sglue+0x10>

0801043c <__sread>:
 801043c:	b510      	push	{r4, lr}
 801043e:	460c      	mov	r4, r1
 8010440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010444:	f000 f86c 	bl	8010520 <_read_r>
 8010448:	2800      	cmp	r0, #0
 801044a:	bfab      	itete	ge
 801044c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801044e:	89a3      	ldrhlt	r3, [r4, #12]
 8010450:	181b      	addge	r3, r3, r0
 8010452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010456:	bfac      	ite	ge
 8010458:	6563      	strge	r3, [r4, #84]	@ 0x54
 801045a:	81a3      	strhlt	r3, [r4, #12]
 801045c:	bd10      	pop	{r4, pc}

0801045e <__swrite>:
 801045e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	461f      	mov	r7, r3
 8010464:	898b      	ldrh	r3, [r1, #12]
 8010466:	05db      	lsls	r3, r3, #23
 8010468:	4605      	mov	r5, r0
 801046a:	460c      	mov	r4, r1
 801046c:	4616      	mov	r6, r2
 801046e:	d505      	bpl.n	801047c <__swrite+0x1e>
 8010470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010474:	2302      	movs	r3, #2
 8010476:	2200      	movs	r2, #0
 8010478:	f000 f840 	bl	80104fc <_lseek_r>
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010486:	81a3      	strh	r3, [r4, #12]
 8010488:	4632      	mov	r2, r6
 801048a:	463b      	mov	r3, r7
 801048c:	4628      	mov	r0, r5
 801048e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010492:	f000 b867 	b.w	8010564 <_write_r>

08010496 <__sseek>:
 8010496:	b510      	push	{r4, lr}
 8010498:	460c      	mov	r4, r1
 801049a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801049e:	f000 f82d 	bl	80104fc <_lseek_r>
 80104a2:	1c43      	adds	r3, r0, #1
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	bf15      	itete	ne
 80104a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80104aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80104ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80104b2:	81a3      	strheq	r3, [r4, #12]
 80104b4:	bf18      	it	ne
 80104b6:	81a3      	strhne	r3, [r4, #12]
 80104b8:	bd10      	pop	{r4, pc}

080104ba <__sclose>:
 80104ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104be:	f000 b80d 	b.w	80104dc <_close_r>

080104c2 <memset>:
 80104c2:	4402      	add	r2, r0
 80104c4:	4603      	mov	r3, r0
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d100      	bne.n	80104cc <memset+0xa>
 80104ca:	4770      	bx	lr
 80104cc:	f803 1b01 	strb.w	r1, [r3], #1
 80104d0:	e7f9      	b.n	80104c6 <memset+0x4>
	...

080104d4 <_localeconv_r>:
 80104d4:	4800      	ldr	r0, [pc, #0]	@ (80104d8 <_localeconv_r+0x4>)
 80104d6:	4770      	bx	lr
 80104d8:	20000258 	.word	0x20000258

080104dc <_close_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d06      	ldr	r5, [pc, #24]	@ (80104f8 <_close_r+0x1c>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	f7f3 fa64 	bl	80039b4 <_close>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_close_r+0x1a>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_close_r+0x1a>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	200023c4 	.word	0x200023c4

080104fc <_lseek_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d07      	ldr	r5, [pc, #28]	@ (801051c <_lseek_r+0x20>)
 8010500:	4604      	mov	r4, r0
 8010502:	4608      	mov	r0, r1
 8010504:	4611      	mov	r1, r2
 8010506:	2200      	movs	r2, #0
 8010508:	602a      	str	r2, [r5, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	f7f3 fa79 	bl	8003a02 <_lseek>
 8010510:	1c43      	adds	r3, r0, #1
 8010512:	d102      	bne.n	801051a <_lseek_r+0x1e>
 8010514:	682b      	ldr	r3, [r5, #0]
 8010516:	b103      	cbz	r3, 801051a <_lseek_r+0x1e>
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	bd38      	pop	{r3, r4, r5, pc}
 801051c:	200023c4 	.word	0x200023c4

08010520 <_read_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	@ (8010540 <_read_r+0x20>)
 8010524:	4604      	mov	r4, r0
 8010526:	4608      	mov	r0, r1
 8010528:	4611      	mov	r1, r2
 801052a:	2200      	movs	r2, #0
 801052c:	602a      	str	r2, [r5, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	f7f3 fa07 	bl	8003942 <_read>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_read_r+0x1e>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_read_r+0x1e>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	200023c4 	.word	0x200023c4

08010544 <_sbrk_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d06      	ldr	r5, [pc, #24]	@ (8010560 <_sbrk_r+0x1c>)
 8010548:	2300      	movs	r3, #0
 801054a:	4604      	mov	r4, r0
 801054c:	4608      	mov	r0, r1
 801054e:	602b      	str	r3, [r5, #0]
 8010550:	f7f3 fa64 	bl	8003a1c <_sbrk>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d102      	bne.n	801055e <_sbrk_r+0x1a>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b103      	cbz	r3, 801055e <_sbrk_r+0x1a>
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	bd38      	pop	{r3, r4, r5, pc}
 8010560:	200023c4 	.word	0x200023c4

08010564 <_write_r>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	4d07      	ldr	r5, [pc, #28]	@ (8010584 <_write_r+0x20>)
 8010568:	4604      	mov	r4, r0
 801056a:	4608      	mov	r0, r1
 801056c:	4611      	mov	r1, r2
 801056e:	2200      	movs	r2, #0
 8010570:	602a      	str	r2, [r5, #0]
 8010572:	461a      	mov	r2, r3
 8010574:	f7f3 fa02 	bl	800397c <_write>
 8010578:	1c43      	adds	r3, r0, #1
 801057a:	d102      	bne.n	8010582 <_write_r+0x1e>
 801057c:	682b      	ldr	r3, [r5, #0]
 801057e:	b103      	cbz	r3, 8010582 <_write_r+0x1e>
 8010580:	6023      	str	r3, [r4, #0]
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	200023c4 	.word	0x200023c4

08010588 <__errno>:
 8010588:	4b01      	ldr	r3, [pc, #4]	@ (8010590 <__errno+0x8>)
 801058a:	6818      	ldr	r0, [r3, #0]
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop
 8010590:	20000118 	.word	0x20000118

08010594 <__libc_init_array>:
 8010594:	b570      	push	{r4, r5, r6, lr}
 8010596:	4d0d      	ldr	r5, [pc, #52]	@ (80105cc <__libc_init_array+0x38>)
 8010598:	4c0d      	ldr	r4, [pc, #52]	@ (80105d0 <__libc_init_array+0x3c>)
 801059a:	1b64      	subs	r4, r4, r5
 801059c:	10a4      	asrs	r4, r4, #2
 801059e:	2600      	movs	r6, #0
 80105a0:	42a6      	cmp	r6, r4
 80105a2:	d109      	bne.n	80105b8 <__libc_init_array+0x24>
 80105a4:	4d0b      	ldr	r5, [pc, #44]	@ (80105d4 <__libc_init_array+0x40>)
 80105a6:	4c0c      	ldr	r4, [pc, #48]	@ (80105d8 <__libc_init_array+0x44>)
 80105a8:	f002 f87a 	bl	80126a0 <_init>
 80105ac:	1b64      	subs	r4, r4, r5
 80105ae:	10a4      	asrs	r4, r4, #2
 80105b0:	2600      	movs	r6, #0
 80105b2:	42a6      	cmp	r6, r4
 80105b4:	d105      	bne.n	80105c2 <__libc_init_array+0x2e>
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80105bc:	4798      	blx	r3
 80105be:	3601      	adds	r6, #1
 80105c0:	e7ee      	b.n	80105a0 <__libc_init_array+0xc>
 80105c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80105c6:	4798      	blx	r3
 80105c8:	3601      	adds	r6, #1
 80105ca:	e7f2      	b.n	80105b2 <__libc_init_array+0x1e>
 80105cc:	08012ae8 	.word	0x08012ae8
 80105d0:	08012ae8 	.word	0x08012ae8
 80105d4:	08012ae8 	.word	0x08012ae8
 80105d8:	08012aec 	.word	0x08012aec

080105dc <__retarget_lock_init_recursive>:
 80105dc:	4770      	bx	lr

080105de <__retarget_lock_acquire_recursive>:
 80105de:	4770      	bx	lr

080105e0 <__retarget_lock_release_recursive>:
 80105e0:	4770      	bx	lr

080105e2 <memcpy>:
 80105e2:	440a      	add	r2, r1
 80105e4:	4291      	cmp	r1, r2
 80105e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80105ea:	d100      	bne.n	80105ee <memcpy+0xc>
 80105ec:	4770      	bx	lr
 80105ee:	b510      	push	{r4, lr}
 80105f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105f8:	4291      	cmp	r1, r2
 80105fa:	d1f9      	bne.n	80105f0 <memcpy+0xe>
 80105fc:	bd10      	pop	{r4, pc}

080105fe <quorem>:
 80105fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010602:	6903      	ldr	r3, [r0, #16]
 8010604:	690c      	ldr	r4, [r1, #16]
 8010606:	42a3      	cmp	r3, r4
 8010608:	4607      	mov	r7, r0
 801060a:	db7e      	blt.n	801070a <quorem+0x10c>
 801060c:	3c01      	subs	r4, #1
 801060e:	f101 0814 	add.w	r8, r1, #20
 8010612:	00a3      	lsls	r3, r4, #2
 8010614:	f100 0514 	add.w	r5, r0, #20
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801061e:	9301      	str	r3, [sp, #4]
 8010620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010628:	3301      	adds	r3, #1
 801062a:	429a      	cmp	r2, r3
 801062c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010630:	fbb2 f6f3 	udiv	r6, r2, r3
 8010634:	d32e      	bcc.n	8010694 <quorem+0x96>
 8010636:	f04f 0a00 	mov.w	sl, #0
 801063a:	46c4      	mov	ip, r8
 801063c:	46ae      	mov	lr, r5
 801063e:	46d3      	mov	fp, sl
 8010640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010644:	b298      	uxth	r0, r3
 8010646:	fb06 a000 	mla	r0, r6, r0, sl
 801064a:	0c02      	lsrs	r2, r0, #16
 801064c:	0c1b      	lsrs	r3, r3, #16
 801064e:	fb06 2303 	mla	r3, r6, r3, r2
 8010652:	f8de 2000 	ldr.w	r2, [lr]
 8010656:	b280      	uxth	r0, r0
 8010658:	b292      	uxth	r2, r2
 801065a:	1a12      	subs	r2, r2, r0
 801065c:	445a      	add	r2, fp
 801065e:	f8de 0000 	ldr.w	r0, [lr]
 8010662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010666:	b29b      	uxth	r3, r3
 8010668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801066c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010670:	b292      	uxth	r2, r2
 8010672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010676:	45e1      	cmp	r9, ip
 8010678:	f84e 2b04 	str.w	r2, [lr], #4
 801067c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010680:	d2de      	bcs.n	8010640 <quorem+0x42>
 8010682:	9b00      	ldr	r3, [sp, #0]
 8010684:	58eb      	ldr	r3, [r5, r3]
 8010686:	b92b      	cbnz	r3, 8010694 <quorem+0x96>
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	3b04      	subs	r3, #4
 801068c:	429d      	cmp	r5, r3
 801068e:	461a      	mov	r2, r3
 8010690:	d32f      	bcc.n	80106f2 <quorem+0xf4>
 8010692:	613c      	str	r4, [r7, #16]
 8010694:	4638      	mov	r0, r7
 8010696:	f001 f8c7 	bl	8011828 <__mcmp>
 801069a:	2800      	cmp	r0, #0
 801069c:	db25      	blt.n	80106ea <quorem+0xec>
 801069e:	4629      	mov	r1, r5
 80106a0:	2000      	movs	r0, #0
 80106a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80106a6:	f8d1 c000 	ldr.w	ip, [r1]
 80106aa:	fa1f fe82 	uxth.w	lr, r2
 80106ae:	fa1f f38c 	uxth.w	r3, ip
 80106b2:	eba3 030e 	sub.w	r3, r3, lr
 80106b6:	4403      	add	r3, r0
 80106b8:	0c12      	lsrs	r2, r2, #16
 80106ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80106be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106c8:	45c1      	cmp	r9, r8
 80106ca:	f841 3b04 	str.w	r3, [r1], #4
 80106ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106d2:	d2e6      	bcs.n	80106a2 <quorem+0xa4>
 80106d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106dc:	b922      	cbnz	r2, 80106e8 <quorem+0xea>
 80106de:	3b04      	subs	r3, #4
 80106e0:	429d      	cmp	r5, r3
 80106e2:	461a      	mov	r2, r3
 80106e4:	d30b      	bcc.n	80106fe <quorem+0x100>
 80106e6:	613c      	str	r4, [r7, #16]
 80106e8:	3601      	adds	r6, #1
 80106ea:	4630      	mov	r0, r6
 80106ec:	b003      	add	sp, #12
 80106ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f2:	6812      	ldr	r2, [r2, #0]
 80106f4:	3b04      	subs	r3, #4
 80106f6:	2a00      	cmp	r2, #0
 80106f8:	d1cb      	bne.n	8010692 <quorem+0x94>
 80106fa:	3c01      	subs	r4, #1
 80106fc:	e7c6      	b.n	801068c <quorem+0x8e>
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	3b04      	subs	r3, #4
 8010702:	2a00      	cmp	r2, #0
 8010704:	d1ef      	bne.n	80106e6 <quorem+0xe8>
 8010706:	3c01      	subs	r4, #1
 8010708:	e7ea      	b.n	80106e0 <quorem+0xe2>
 801070a:	2000      	movs	r0, #0
 801070c:	e7ee      	b.n	80106ec <quorem+0xee>
	...

08010710 <_dtoa_r>:
 8010710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010714:	69c7      	ldr	r7, [r0, #28]
 8010716:	b097      	sub	sp, #92	@ 0x5c
 8010718:	ed8d 0b04 	vstr	d0, [sp, #16]
 801071c:	ec55 4b10 	vmov	r4, r5, d0
 8010720:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010722:	9107      	str	r1, [sp, #28]
 8010724:	4681      	mov	r9, r0
 8010726:	920c      	str	r2, [sp, #48]	@ 0x30
 8010728:	9311      	str	r3, [sp, #68]	@ 0x44
 801072a:	b97f      	cbnz	r7, 801074c <_dtoa_r+0x3c>
 801072c:	2010      	movs	r0, #16
 801072e:	f7ff f8af 	bl	800f890 <malloc>
 8010732:	4602      	mov	r2, r0
 8010734:	f8c9 001c 	str.w	r0, [r9, #28]
 8010738:	b920      	cbnz	r0, 8010744 <_dtoa_r+0x34>
 801073a:	4ba9      	ldr	r3, [pc, #676]	@ (80109e0 <_dtoa_r+0x2d0>)
 801073c:	21ef      	movs	r1, #239	@ 0xef
 801073e:	48a9      	ldr	r0, [pc, #676]	@ (80109e4 <_dtoa_r+0x2d4>)
 8010740:	f001 fa26 	bl	8011b90 <__assert_func>
 8010744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010748:	6007      	str	r7, [r0, #0]
 801074a:	60c7      	str	r7, [r0, #12]
 801074c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010750:	6819      	ldr	r1, [r3, #0]
 8010752:	b159      	cbz	r1, 801076c <_dtoa_r+0x5c>
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	604a      	str	r2, [r1, #4]
 8010758:	2301      	movs	r3, #1
 801075a:	4093      	lsls	r3, r2
 801075c:	608b      	str	r3, [r1, #8]
 801075e:	4648      	mov	r0, r9
 8010760:	f000 fe30 	bl	80113c4 <_Bfree>
 8010764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	1e2b      	subs	r3, r5, #0
 801076e:	bfb9      	ittee	lt
 8010770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010774:	9305      	strlt	r3, [sp, #20]
 8010776:	2300      	movge	r3, #0
 8010778:	6033      	strge	r3, [r6, #0]
 801077a:	9f05      	ldr	r7, [sp, #20]
 801077c:	4b9a      	ldr	r3, [pc, #616]	@ (80109e8 <_dtoa_r+0x2d8>)
 801077e:	bfbc      	itt	lt
 8010780:	2201      	movlt	r2, #1
 8010782:	6032      	strlt	r2, [r6, #0]
 8010784:	43bb      	bics	r3, r7
 8010786:	d112      	bne.n	80107ae <_dtoa_r+0x9e>
 8010788:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801078a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010794:	4323      	orrs	r3, r4
 8010796:	f000 855a 	beq.w	801124e <_dtoa_r+0xb3e>
 801079a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801079c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80109fc <_dtoa_r+0x2ec>
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f000 855c 	beq.w	801125e <_dtoa_r+0xb4e>
 80107a6:	f10a 0303 	add.w	r3, sl, #3
 80107aa:	f000 bd56 	b.w	801125a <_dtoa_r+0xb4a>
 80107ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80107b2:	2200      	movs	r2, #0
 80107b4:	ec51 0b17 	vmov	r0, r1, d7
 80107b8:	2300      	movs	r3, #0
 80107ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80107be:	f7f0 f9ab 	bl	8000b18 <__aeabi_dcmpeq>
 80107c2:	4680      	mov	r8, r0
 80107c4:	b158      	cbz	r0, 80107de <_dtoa_r+0xce>
 80107c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107c8:	2301      	movs	r3, #1
 80107ca:	6013      	str	r3, [r2, #0]
 80107cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107ce:	b113      	cbz	r3, 80107d6 <_dtoa_r+0xc6>
 80107d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80107d2:	4b86      	ldr	r3, [pc, #536]	@ (80109ec <_dtoa_r+0x2dc>)
 80107d4:	6013      	str	r3, [r2, #0]
 80107d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010a00 <_dtoa_r+0x2f0>
 80107da:	f000 bd40 	b.w	801125e <_dtoa_r+0xb4e>
 80107de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80107e2:	aa14      	add	r2, sp, #80	@ 0x50
 80107e4:	a915      	add	r1, sp, #84	@ 0x54
 80107e6:	4648      	mov	r0, r9
 80107e8:	f001 f8ce 	bl	8011988 <__d2b>
 80107ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80107f0:	9002      	str	r0, [sp, #8]
 80107f2:	2e00      	cmp	r6, #0
 80107f4:	d078      	beq.n	80108e8 <_dtoa_r+0x1d8>
 80107f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80107fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801080c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010810:	4619      	mov	r1, r3
 8010812:	2200      	movs	r2, #0
 8010814:	4b76      	ldr	r3, [pc, #472]	@ (80109f0 <_dtoa_r+0x2e0>)
 8010816:	f7ef fd5f 	bl	80002d8 <__aeabi_dsub>
 801081a:	a36b      	add	r3, pc, #428	@ (adr r3, 80109c8 <_dtoa_r+0x2b8>)
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	f7ef ff12 	bl	8000648 <__aeabi_dmul>
 8010824:	a36a      	add	r3, pc, #424	@ (adr r3, 80109d0 <_dtoa_r+0x2c0>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f7ef fd57 	bl	80002dc <__adddf3>
 801082e:	4604      	mov	r4, r0
 8010830:	4630      	mov	r0, r6
 8010832:	460d      	mov	r5, r1
 8010834:	f7ef fe9e 	bl	8000574 <__aeabi_i2d>
 8010838:	a367      	add	r3, pc, #412	@ (adr r3, 80109d8 <_dtoa_r+0x2c8>)
 801083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083e:	f7ef ff03 	bl	8000648 <__aeabi_dmul>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4620      	mov	r0, r4
 8010848:	4629      	mov	r1, r5
 801084a:	f7ef fd47 	bl	80002dc <__adddf3>
 801084e:	4604      	mov	r4, r0
 8010850:	460d      	mov	r5, r1
 8010852:	f7f0 f9a9 	bl	8000ba8 <__aeabi_d2iz>
 8010856:	2200      	movs	r2, #0
 8010858:	4607      	mov	r7, r0
 801085a:	2300      	movs	r3, #0
 801085c:	4620      	mov	r0, r4
 801085e:	4629      	mov	r1, r5
 8010860:	f7f0 f964 	bl	8000b2c <__aeabi_dcmplt>
 8010864:	b140      	cbz	r0, 8010878 <_dtoa_r+0x168>
 8010866:	4638      	mov	r0, r7
 8010868:	f7ef fe84 	bl	8000574 <__aeabi_i2d>
 801086c:	4622      	mov	r2, r4
 801086e:	462b      	mov	r3, r5
 8010870:	f7f0 f952 	bl	8000b18 <__aeabi_dcmpeq>
 8010874:	b900      	cbnz	r0, 8010878 <_dtoa_r+0x168>
 8010876:	3f01      	subs	r7, #1
 8010878:	2f16      	cmp	r7, #22
 801087a:	d852      	bhi.n	8010922 <_dtoa_r+0x212>
 801087c:	4b5d      	ldr	r3, [pc, #372]	@ (80109f4 <_dtoa_r+0x2e4>)
 801087e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801088a:	f7f0 f94f 	bl	8000b2c <__aeabi_dcmplt>
 801088e:	2800      	cmp	r0, #0
 8010890:	d049      	beq.n	8010926 <_dtoa_r+0x216>
 8010892:	3f01      	subs	r7, #1
 8010894:	2300      	movs	r3, #0
 8010896:	9310      	str	r3, [sp, #64]	@ 0x40
 8010898:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801089a:	1b9b      	subs	r3, r3, r6
 801089c:	1e5a      	subs	r2, r3, #1
 801089e:	bf45      	ittet	mi
 80108a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80108a4:	9300      	strmi	r3, [sp, #0]
 80108a6:	2300      	movpl	r3, #0
 80108a8:	2300      	movmi	r3, #0
 80108aa:	9206      	str	r2, [sp, #24]
 80108ac:	bf54      	ite	pl
 80108ae:	9300      	strpl	r3, [sp, #0]
 80108b0:	9306      	strmi	r3, [sp, #24]
 80108b2:	2f00      	cmp	r7, #0
 80108b4:	db39      	blt.n	801092a <_dtoa_r+0x21a>
 80108b6:	9b06      	ldr	r3, [sp, #24]
 80108b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80108ba:	443b      	add	r3, r7
 80108bc:	9306      	str	r3, [sp, #24]
 80108be:	2300      	movs	r3, #0
 80108c0:	9308      	str	r3, [sp, #32]
 80108c2:	9b07      	ldr	r3, [sp, #28]
 80108c4:	2b09      	cmp	r3, #9
 80108c6:	d863      	bhi.n	8010990 <_dtoa_r+0x280>
 80108c8:	2b05      	cmp	r3, #5
 80108ca:	bfc4      	itt	gt
 80108cc:	3b04      	subgt	r3, #4
 80108ce:	9307      	strgt	r3, [sp, #28]
 80108d0:	9b07      	ldr	r3, [sp, #28]
 80108d2:	f1a3 0302 	sub.w	r3, r3, #2
 80108d6:	bfcc      	ite	gt
 80108d8:	2400      	movgt	r4, #0
 80108da:	2401      	movle	r4, #1
 80108dc:	2b03      	cmp	r3, #3
 80108de:	d863      	bhi.n	80109a8 <_dtoa_r+0x298>
 80108e0:	e8df f003 	tbb	[pc, r3]
 80108e4:	2b375452 	.word	0x2b375452
 80108e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80108ec:	441e      	add	r6, r3
 80108ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80108f2:	2b20      	cmp	r3, #32
 80108f4:	bfc1      	itttt	gt
 80108f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80108fa:	409f      	lslgt	r7, r3
 80108fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010900:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010904:	bfd6      	itet	le
 8010906:	f1c3 0320 	rsble	r3, r3, #32
 801090a:	ea47 0003 	orrgt.w	r0, r7, r3
 801090e:	fa04 f003 	lslle.w	r0, r4, r3
 8010912:	f7ef fe1f 	bl	8000554 <__aeabi_ui2d>
 8010916:	2201      	movs	r2, #1
 8010918:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801091c:	3e01      	subs	r6, #1
 801091e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010920:	e776      	b.n	8010810 <_dtoa_r+0x100>
 8010922:	2301      	movs	r3, #1
 8010924:	e7b7      	b.n	8010896 <_dtoa_r+0x186>
 8010926:	9010      	str	r0, [sp, #64]	@ 0x40
 8010928:	e7b6      	b.n	8010898 <_dtoa_r+0x188>
 801092a:	9b00      	ldr	r3, [sp, #0]
 801092c:	1bdb      	subs	r3, r3, r7
 801092e:	9300      	str	r3, [sp, #0]
 8010930:	427b      	negs	r3, r7
 8010932:	9308      	str	r3, [sp, #32]
 8010934:	2300      	movs	r3, #0
 8010936:	930d      	str	r3, [sp, #52]	@ 0x34
 8010938:	e7c3      	b.n	80108c2 <_dtoa_r+0x1b2>
 801093a:	2301      	movs	r3, #1
 801093c:	9309      	str	r3, [sp, #36]	@ 0x24
 801093e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010940:	eb07 0b03 	add.w	fp, r7, r3
 8010944:	f10b 0301 	add.w	r3, fp, #1
 8010948:	2b01      	cmp	r3, #1
 801094a:	9303      	str	r3, [sp, #12]
 801094c:	bfb8      	it	lt
 801094e:	2301      	movlt	r3, #1
 8010950:	e006      	b.n	8010960 <_dtoa_r+0x250>
 8010952:	2301      	movs	r3, #1
 8010954:	9309      	str	r3, [sp, #36]	@ 0x24
 8010956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010958:	2b00      	cmp	r3, #0
 801095a:	dd28      	ble.n	80109ae <_dtoa_r+0x29e>
 801095c:	469b      	mov	fp, r3
 801095e:	9303      	str	r3, [sp, #12]
 8010960:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010964:	2100      	movs	r1, #0
 8010966:	2204      	movs	r2, #4
 8010968:	f102 0514 	add.w	r5, r2, #20
 801096c:	429d      	cmp	r5, r3
 801096e:	d926      	bls.n	80109be <_dtoa_r+0x2ae>
 8010970:	6041      	str	r1, [r0, #4]
 8010972:	4648      	mov	r0, r9
 8010974:	f000 fce6 	bl	8011344 <_Balloc>
 8010978:	4682      	mov	sl, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d142      	bne.n	8010a04 <_dtoa_r+0x2f4>
 801097e:	4b1e      	ldr	r3, [pc, #120]	@ (80109f8 <_dtoa_r+0x2e8>)
 8010980:	4602      	mov	r2, r0
 8010982:	f240 11af 	movw	r1, #431	@ 0x1af
 8010986:	e6da      	b.n	801073e <_dtoa_r+0x2e>
 8010988:	2300      	movs	r3, #0
 801098a:	e7e3      	b.n	8010954 <_dtoa_r+0x244>
 801098c:	2300      	movs	r3, #0
 801098e:	e7d5      	b.n	801093c <_dtoa_r+0x22c>
 8010990:	2401      	movs	r4, #1
 8010992:	2300      	movs	r3, #0
 8010994:	9307      	str	r3, [sp, #28]
 8010996:	9409      	str	r4, [sp, #36]	@ 0x24
 8010998:	f04f 3bff 	mov.w	fp, #4294967295
 801099c:	2200      	movs	r2, #0
 801099e:	f8cd b00c 	str.w	fp, [sp, #12]
 80109a2:	2312      	movs	r3, #18
 80109a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80109a6:	e7db      	b.n	8010960 <_dtoa_r+0x250>
 80109a8:	2301      	movs	r3, #1
 80109aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80109ac:	e7f4      	b.n	8010998 <_dtoa_r+0x288>
 80109ae:	f04f 0b01 	mov.w	fp, #1
 80109b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80109b6:	465b      	mov	r3, fp
 80109b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80109bc:	e7d0      	b.n	8010960 <_dtoa_r+0x250>
 80109be:	3101      	adds	r1, #1
 80109c0:	0052      	lsls	r2, r2, #1
 80109c2:	e7d1      	b.n	8010968 <_dtoa_r+0x258>
 80109c4:	f3af 8000 	nop.w
 80109c8:	636f4361 	.word	0x636f4361
 80109cc:	3fd287a7 	.word	0x3fd287a7
 80109d0:	8b60c8b3 	.word	0x8b60c8b3
 80109d4:	3fc68a28 	.word	0x3fc68a28
 80109d8:	509f79fb 	.word	0x509f79fb
 80109dc:	3fd34413 	.word	0x3fd34413
 80109e0:	08012761 	.word	0x08012761
 80109e4:	08012778 	.word	0x08012778
 80109e8:	7ff00000 	.word	0x7ff00000
 80109ec:	08012731 	.word	0x08012731
 80109f0:	3ff80000 	.word	0x3ff80000
 80109f4:	080128c8 	.word	0x080128c8
 80109f8:	080127d0 	.word	0x080127d0
 80109fc:	0801275d 	.word	0x0801275d
 8010a00:	08012730 	.word	0x08012730
 8010a04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a08:	6018      	str	r0, [r3, #0]
 8010a0a:	9b03      	ldr	r3, [sp, #12]
 8010a0c:	2b0e      	cmp	r3, #14
 8010a0e:	f200 80a1 	bhi.w	8010b54 <_dtoa_r+0x444>
 8010a12:	2c00      	cmp	r4, #0
 8010a14:	f000 809e 	beq.w	8010b54 <_dtoa_r+0x444>
 8010a18:	2f00      	cmp	r7, #0
 8010a1a:	dd33      	ble.n	8010a84 <_dtoa_r+0x374>
 8010a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8010c90 <_dtoa_r+0x580>)
 8010a1e:	f007 020f 	and.w	r2, r7, #15
 8010a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a26:	ed93 7b00 	vldr	d7, [r3]
 8010a2a:	05f8      	lsls	r0, r7, #23
 8010a2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010a30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010a34:	d516      	bpl.n	8010a64 <_dtoa_r+0x354>
 8010a36:	4b97      	ldr	r3, [pc, #604]	@ (8010c94 <_dtoa_r+0x584>)
 8010a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a40:	f7ef ff2c 	bl	800089c <__aeabi_ddiv>
 8010a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a48:	f004 040f 	and.w	r4, r4, #15
 8010a4c:	2603      	movs	r6, #3
 8010a4e:	4d91      	ldr	r5, [pc, #580]	@ (8010c94 <_dtoa_r+0x584>)
 8010a50:	b954      	cbnz	r4, 8010a68 <_dtoa_r+0x358>
 8010a52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a5a:	f7ef ff1f 	bl	800089c <__aeabi_ddiv>
 8010a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a62:	e028      	b.n	8010ab6 <_dtoa_r+0x3a6>
 8010a64:	2602      	movs	r6, #2
 8010a66:	e7f2      	b.n	8010a4e <_dtoa_r+0x33e>
 8010a68:	07e1      	lsls	r1, r4, #31
 8010a6a:	d508      	bpl.n	8010a7e <_dtoa_r+0x36e>
 8010a6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a74:	f7ef fde8 	bl	8000648 <__aeabi_dmul>
 8010a78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010a7c:	3601      	adds	r6, #1
 8010a7e:	1064      	asrs	r4, r4, #1
 8010a80:	3508      	adds	r5, #8
 8010a82:	e7e5      	b.n	8010a50 <_dtoa_r+0x340>
 8010a84:	f000 80af 	beq.w	8010be6 <_dtoa_r+0x4d6>
 8010a88:	427c      	negs	r4, r7
 8010a8a:	4b81      	ldr	r3, [pc, #516]	@ (8010c90 <_dtoa_r+0x580>)
 8010a8c:	4d81      	ldr	r5, [pc, #516]	@ (8010c94 <_dtoa_r+0x584>)
 8010a8e:	f004 020f 	and.w	r2, r4, #15
 8010a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a9e:	f7ef fdd3 	bl	8000648 <__aeabi_dmul>
 8010aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010aa6:	1124      	asrs	r4, r4, #4
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	2602      	movs	r6, #2
 8010aac:	2c00      	cmp	r4, #0
 8010aae:	f040 808f 	bne.w	8010bd0 <_dtoa_r+0x4c0>
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1d3      	bne.n	8010a5e <_dtoa_r+0x34e>
 8010ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ab8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 8094 	beq.w	8010bea <_dtoa_r+0x4da>
 8010ac2:	4b75      	ldr	r3, [pc, #468]	@ (8010c98 <_dtoa_r+0x588>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	f7f0 f82f 	bl	8000b2c <__aeabi_dcmplt>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	f000 808b 	beq.w	8010bea <_dtoa_r+0x4da>
 8010ad4:	9b03      	ldr	r3, [sp, #12]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f000 8087 	beq.w	8010bea <_dtoa_r+0x4da>
 8010adc:	f1bb 0f00 	cmp.w	fp, #0
 8010ae0:	dd34      	ble.n	8010b4c <_dtoa_r+0x43c>
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8010c9c <_dtoa_r+0x58c>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	4629      	mov	r1, r5
 8010aea:	f7ef fdad 	bl	8000648 <__aeabi_dmul>
 8010aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010af2:	f107 38ff 	add.w	r8, r7, #4294967295
 8010af6:	3601      	adds	r6, #1
 8010af8:	465c      	mov	r4, fp
 8010afa:	4630      	mov	r0, r6
 8010afc:	f7ef fd3a 	bl	8000574 <__aeabi_i2d>
 8010b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b04:	f7ef fda0 	bl	8000648 <__aeabi_dmul>
 8010b08:	4b65      	ldr	r3, [pc, #404]	@ (8010ca0 <_dtoa_r+0x590>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f7ef fbe6 	bl	80002dc <__adddf3>
 8010b10:	4605      	mov	r5, r0
 8010b12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010b16:	2c00      	cmp	r4, #0
 8010b18:	d16a      	bne.n	8010bf0 <_dtoa_r+0x4e0>
 8010b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b1e:	4b61      	ldr	r3, [pc, #388]	@ (8010ca4 <_dtoa_r+0x594>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	f7ef fbd9 	bl	80002d8 <__aeabi_dsub>
 8010b26:	4602      	mov	r2, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b2e:	462a      	mov	r2, r5
 8010b30:	4633      	mov	r3, r6
 8010b32:	f7f0 f819 	bl	8000b68 <__aeabi_dcmpgt>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	f040 8298 	bne.w	801106c <_dtoa_r+0x95c>
 8010b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b40:	462a      	mov	r2, r5
 8010b42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010b46:	f7ef fff1 	bl	8000b2c <__aeabi_dcmplt>
 8010b4a:	bb38      	cbnz	r0, 8010b9c <_dtoa_r+0x48c>
 8010b4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010b50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f2c0 8157 	blt.w	8010e0a <_dtoa_r+0x6fa>
 8010b5c:	2f0e      	cmp	r7, #14
 8010b5e:	f300 8154 	bgt.w	8010e0a <_dtoa_r+0x6fa>
 8010b62:	4b4b      	ldr	r3, [pc, #300]	@ (8010c90 <_dtoa_r+0x580>)
 8010b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010b68:	ed93 7b00 	vldr	d7, [r3]
 8010b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	ed8d 7b00 	vstr	d7, [sp]
 8010b74:	f280 80e5 	bge.w	8010d42 <_dtoa_r+0x632>
 8010b78:	9b03      	ldr	r3, [sp, #12]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f300 80e1 	bgt.w	8010d42 <_dtoa_r+0x632>
 8010b80:	d10c      	bne.n	8010b9c <_dtoa_r+0x48c>
 8010b82:	4b48      	ldr	r3, [pc, #288]	@ (8010ca4 <_dtoa_r+0x594>)
 8010b84:	2200      	movs	r2, #0
 8010b86:	ec51 0b17 	vmov	r0, r1, d7
 8010b8a:	f7ef fd5d 	bl	8000648 <__aeabi_dmul>
 8010b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b92:	f7ef ffdf 	bl	8000b54 <__aeabi_dcmpge>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	f000 8266 	beq.w	8011068 <_dtoa_r+0x958>
 8010b9c:	2400      	movs	r4, #0
 8010b9e:	4625      	mov	r5, r4
 8010ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ba2:	4656      	mov	r6, sl
 8010ba4:	ea6f 0803 	mvn.w	r8, r3
 8010ba8:	2700      	movs	r7, #0
 8010baa:	4621      	mov	r1, r4
 8010bac:	4648      	mov	r0, r9
 8010bae:	f000 fc09 	bl	80113c4 <_Bfree>
 8010bb2:	2d00      	cmp	r5, #0
 8010bb4:	f000 80bd 	beq.w	8010d32 <_dtoa_r+0x622>
 8010bb8:	b12f      	cbz	r7, 8010bc6 <_dtoa_r+0x4b6>
 8010bba:	42af      	cmp	r7, r5
 8010bbc:	d003      	beq.n	8010bc6 <_dtoa_r+0x4b6>
 8010bbe:	4639      	mov	r1, r7
 8010bc0:	4648      	mov	r0, r9
 8010bc2:	f000 fbff 	bl	80113c4 <_Bfree>
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	4648      	mov	r0, r9
 8010bca:	f000 fbfb 	bl	80113c4 <_Bfree>
 8010bce:	e0b0      	b.n	8010d32 <_dtoa_r+0x622>
 8010bd0:	07e2      	lsls	r2, r4, #31
 8010bd2:	d505      	bpl.n	8010be0 <_dtoa_r+0x4d0>
 8010bd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010bd8:	f7ef fd36 	bl	8000648 <__aeabi_dmul>
 8010bdc:	3601      	adds	r6, #1
 8010bde:	2301      	movs	r3, #1
 8010be0:	1064      	asrs	r4, r4, #1
 8010be2:	3508      	adds	r5, #8
 8010be4:	e762      	b.n	8010aac <_dtoa_r+0x39c>
 8010be6:	2602      	movs	r6, #2
 8010be8:	e765      	b.n	8010ab6 <_dtoa_r+0x3a6>
 8010bea:	9c03      	ldr	r4, [sp, #12]
 8010bec:	46b8      	mov	r8, r7
 8010bee:	e784      	b.n	8010afa <_dtoa_r+0x3ea>
 8010bf0:	4b27      	ldr	r3, [pc, #156]	@ (8010c90 <_dtoa_r+0x580>)
 8010bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bfc:	4454      	add	r4, sl
 8010bfe:	2900      	cmp	r1, #0
 8010c00:	d054      	beq.n	8010cac <_dtoa_r+0x59c>
 8010c02:	4929      	ldr	r1, [pc, #164]	@ (8010ca8 <_dtoa_r+0x598>)
 8010c04:	2000      	movs	r0, #0
 8010c06:	f7ef fe49 	bl	800089c <__aeabi_ddiv>
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	462a      	mov	r2, r5
 8010c0e:	f7ef fb63 	bl	80002d8 <__aeabi_dsub>
 8010c12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c16:	4656      	mov	r6, sl
 8010c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c1c:	f7ef ffc4 	bl	8000ba8 <__aeabi_d2iz>
 8010c20:	4605      	mov	r5, r0
 8010c22:	f7ef fca7 	bl	8000574 <__aeabi_i2d>
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c2e:	f7ef fb53 	bl	80002d8 <__aeabi_dsub>
 8010c32:	3530      	adds	r5, #48	@ 0x30
 8010c34:	4602      	mov	r2, r0
 8010c36:	460b      	mov	r3, r1
 8010c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8010c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c44:	f7ef ff72 	bl	8000b2c <__aeabi_dcmplt>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	d172      	bne.n	8010d32 <_dtoa_r+0x622>
 8010c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c50:	4911      	ldr	r1, [pc, #68]	@ (8010c98 <_dtoa_r+0x588>)
 8010c52:	2000      	movs	r0, #0
 8010c54:	f7ef fb40 	bl	80002d8 <__aeabi_dsub>
 8010c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c5c:	f7ef ff66 	bl	8000b2c <__aeabi_dcmplt>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	f040 80b4 	bne.w	8010dce <_dtoa_r+0x6be>
 8010c66:	42a6      	cmp	r6, r4
 8010c68:	f43f af70 	beq.w	8010b4c <_dtoa_r+0x43c>
 8010c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010c70:	4b0a      	ldr	r3, [pc, #40]	@ (8010c9c <_dtoa_r+0x58c>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	f7ef fce8 	bl	8000648 <__aeabi_dmul>
 8010c78:	4b08      	ldr	r3, [pc, #32]	@ (8010c9c <_dtoa_r+0x58c>)
 8010c7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010c7e:	2200      	movs	r2, #0
 8010c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c84:	f7ef fce0 	bl	8000648 <__aeabi_dmul>
 8010c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c8c:	e7c4      	b.n	8010c18 <_dtoa_r+0x508>
 8010c8e:	bf00      	nop
 8010c90:	080128c8 	.word	0x080128c8
 8010c94:	080128a0 	.word	0x080128a0
 8010c98:	3ff00000 	.word	0x3ff00000
 8010c9c:	40240000 	.word	0x40240000
 8010ca0:	401c0000 	.word	0x401c0000
 8010ca4:	40140000 	.word	0x40140000
 8010ca8:	3fe00000 	.word	0x3fe00000
 8010cac:	4631      	mov	r1, r6
 8010cae:	4628      	mov	r0, r5
 8010cb0:	f7ef fcca 	bl	8000648 <__aeabi_dmul>
 8010cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010cb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010cba:	4656      	mov	r6, sl
 8010cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cc0:	f7ef ff72 	bl	8000ba8 <__aeabi_d2iz>
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	f7ef fc55 	bl	8000574 <__aeabi_i2d>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	460b      	mov	r3, r1
 8010cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cd2:	f7ef fb01 	bl	80002d8 <__aeabi_dsub>
 8010cd6:	3530      	adds	r5, #48	@ 0x30
 8010cd8:	f806 5b01 	strb.w	r5, [r6], #1
 8010cdc:	4602      	mov	r2, r0
 8010cde:	460b      	mov	r3, r1
 8010ce0:	42a6      	cmp	r6, r4
 8010ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ce6:	f04f 0200 	mov.w	r2, #0
 8010cea:	d124      	bne.n	8010d36 <_dtoa_r+0x626>
 8010cec:	4baf      	ldr	r3, [pc, #700]	@ (8010fac <_dtoa_r+0x89c>)
 8010cee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010cf2:	f7ef faf3 	bl	80002dc <__adddf3>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cfe:	f7ef ff33 	bl	8000b68 <__aeabi_dcmpgt>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d163      	bne.n	8010dce <_dtoa_r+0x6be>
 8010d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010d0a:	49a8      	ldr	r1, [pc, #672]	@ (8010fac <_dtoa_r+0x89c>)
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	f7ef fae3 	bl	80002d8 <__aeabi_dsub>
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d1a:	f7ef ff07 	bl	8000b2c <__aeabi_dcmplt>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	f43f af14 	beq.w	8010b4c <_dtoa_r+0x43c>
 8010d24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010d26:	1e73      	subs	r3, r6, #1
 8010d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d2e:	2b30      	cmp	r3, #48	@ 0x30
 8010d30:	d0f8      	beq.n	8010d24 <_dtoa_r+0x614>
 8010d32:	4647      	mov	r7, r8
 8010d34:	e03b      	b.n	8010dae <_dtoa_r+0x69e>
 8010d36:	4b9e      	ldr	r3, [pc, #632]	@ (8010fb0 <_dtoa_r+0x8a0>)
 8010d38:	f7ef fc86 	bl	8000648 <__aeabi_dmul>
 8010d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d40:	e7bc      	b.n	8010cbc <_dtoa_r+0x5ac>
 8010d42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010d46:	4656      	mov	r6, sl
 8010d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f7ef fda4 	bl	800089c <__aeabi_ddiv>
 8010d54:	f7ef ff28 	bl	8000ba8 <__aeabi_d2iz>
 8010d58:	4680      	mov	r8, r0
 8010d5a:	f7ef fc0b 	bl	8000574 <__aeabi_i2d>
 8010d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d62:	f7ef fc71 	bl	8000648 <__aeabi_dmul>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010d72:	f7ef fab1 	bl	80002d8 <__aeabi_dsub>
 8010d76:	f806 4b01 	strb.w	r4, [r6], #1
 8010d7a:	9d03      	ldr	r5, [sp, #12]
 8010d7c:	eba6 040a 	sub.w	r4, r6, sl
 8010d80:	42a5      	cmp	r5, r4
 8010d82:	4602      	mov	r2, r0
 8010d84:	460b      	mov	r3, r1
 8010d86:	d133      	bne.n	8010df0 <_dtoa_r+0x6e0>
 8010d88:	f7ef faa8 	bl	80002dc <__adddf3>
 8010d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d90:	4604      	mov	r4, r0
 8010d92:	460d      	mov	r5, r1
 8010d94:	f7ef fee8 	bl	8000b68 <__aeabi_dcmpgt>
 8010d98:	b9c0      	cbnz	r0, 8010dcc <_dtoa_r+0x6bc>
 8010d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d9e:	4620      	mov	r0, r4
 8010da0:	4629      	mov	r1, r5
 8010da2:	f7ef feb9 	bl	8000b18 <__aeabi_dcmpeq>
 8010da6:	b110      	cbz	r0, 8010dae <_dtoa_r+0x69e>
 8010da8:	f018 0f01 	tst.w	r8, #1
 8010dac:	d10e      	bne.n	8010dcc <_dtoa_r+0x6bc>
 8010dae:	9902      	ldr	r1, [sp, #8]
 8010db0:	4648      	mov	r0, r9
 8010db2:	f000 fb07 	bl	80113c4 <_Bfree>
 8010db6:	2300      	movs	r3, #0
 8010db8:	7033      	strb	r3, [r6, #0]
 8010dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010dbc:	3701      	adds	r7, #1
 8010dbe:	601f      	str	r7, [r3, #0]
 8010dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 824b 	beq.w	801125e <_dtoa_r+0xb4e>
 8010dc8:	601e      	str	r6, [r3, #0]
 8010dca:	e248      	b.n	801125e <_dtoa_r+0xb4e>
 8010dcc:	46b8      	mov	r8, r7
 8010dce:	4633      	mov	r3, r6
 8010dd0:	461e      	mov	r6, r3
 8010dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dd6:	2a39      	cmp	r2, #57	@ 0x39
 8010dd8:	d106      	bne.n	8010de8 <_dtoa_r+0x6d8>
 8010dda:	459a      	cmp	sl, r3
 8010ddc:	d1f8      	bne.n	8010dd0 <_dtoa_r+0x6c0>
 8010dde:	2230      	movs	r2, #48	@ 0x30
 8010de0:	f108 0801 	add.w	r8, r8, #1
 8010de4:	f88a 2000 	strb.w	r2, [sl]
 8010de8:	781a      	ldrb	r2, [r3, #0]
 8010dea:	3201      	adds	r2, #1
 8010dec:	701a      	strb	r2, [r3, #0]
 8010dee:	e7a0      	b.n	8010d32 <_dtoa_r+0x622>
 8010df0:	4b6f      	ldr	r3, [pc, #444]	@ (8010fb0 <_dtoa_r+0x8a0>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	f7ef fc28 	bl	8000648 <__aeabi_dmul>
 8010df8:	2200      	movs	r2, #0
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	f7ef fe8a 	bl	8000b18 <__aeabi_dcmpeq>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d09f      	beq.n	8010d48 <_dtoa_r+0x638>
 8010e08:	e7d1      	b.n	8010dae <_dtoa_r+0x69e>
 8010e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e0c:	2a00      	cmp	r2, #0
 8010e0e:	f000 80ea 	beq.w	8010fe6 <_dtoa_r+0x8d6>
 8010e12:	9a07      	ldr	r2, [sp, #28]
 8010e14:	2a01      	cmp	r2, #1
 8010e16:	f300 80cd 	bgt.w	8010fb4 <_dtoa_r+0x8a4>
 8010e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010e1c:	2a00      	cmp	r2, #0
 8010e1e:	f000 80c1 	beq.w	8010fa4 <_dtoa_r+0x894>
 8010e22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010e26:	9c08      	ldr	r4, [sp, #32]
 8010e28:	9e00      	ldr	r6, [sp, #0]
 8010e2a:	9a00      	ldr	r2, [sp, #0]
 8010e2c:	441a      	add	r2, r3
 8010e2e:	9200      	str	r2, [sp, #0]
 8010e30:	9a06      	ldr	r2, [sp, #24]
 8010e32:	2101      	movs	r1, #1
 8010e34:	441a      	add	r2, r3
 8010e36:	4648      	mov	r0, r9
 8010e38:	9206      	str	r2, [sp, #24]
 8010e3a:	f000 fb77 	bl	801152c <__i2b>
 8010e3e:	4605      	mov	r5, r0
 8010e40:	b166      	cbz	r6, 8010e5c <_dtoa_r+0x74c>
 8010e42:	9b06      	ldr	r3, [sp, #24]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dd09      	ble.n	8010e5c <_dtoa_r+0x74c>
 8010e48:	42b3      	cmp	r3, r6
 8010e4a:	9a00      	ldr	r2, [sp, #0]
 8010e4c:	bfa8      	it	ge
 8010e4e:	4633      	movge	r3, r6
 8010e50:	1ad2      	subs	r2, r2, r3
 8010e52:	9200      	str	r2, [sp, #0]
 8010e54:	9a06      	ldr	r2, [sp, #24]
 8010e56:	1af6      	subs	r6, r6, r3
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	9306      	str	r3, [sp, #24]
 8010e5c:	9b08      	ldr	r3, [sp, #32]
 8010e5e:	b30b      	cbz	r3, 8010ea4 <_dtoa_r+0x794>
 8010e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 80c6 	beq.w	8010ff4 <_dtoa_r+0x8e4>
 8010e68:	2c00      	cmp	r4, #0
 8010e6a:	f000 80c0 	beq.w	8010fee <_dtoa_r+0x8de>
 8010e6e:	4629      	mov	r1, r5
 8010e70:	4622      	mov	r2, r4
 8010e72:	4648      	mov	r0, r9
 8010e74:	f000 fc12 	bl	801169c <__pow5mult>
 8010e78:	9a02      	ldr	r2, [sp, #8]
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	4648      	mov	r0, r9
 8010e80:	f000 fb6a 	bl	8011558 <__multiply>
 8010e84:	9902      	ldr	r1, [sp, #8]
 8010e86:	4680      	mov	r8, r0
 8010e88:	4648      	mov	r0, r9
 8010e8a:	f000 fa9b 	bl	80113c4 <_Bfree>
 8010e8e:	9b08      	ldr	r3, [sp, #32]
 8010e90:	1b1b      	subs	r3, r3, r4
 8010e92:	9308      	str	r3, [sp, #32]
 8010e94:	f000 80b1 	beq.w	8010ffa <_dtoa_r+0x8ea>
 8010e98:	9a08      	ldr	r2, [sp, #32]
 8010e9a:	4641      	mov	r1, r8
 8010e9c:	4648      	mov	r0, r9
 8010e9e:	f000 fbfd 	bl	801169c <__pow5mult>
 8010ea2:	9002      	str	r0, [sp, #8]
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	4648      	mov	r0, r9
 8010ea8:	f000 fb40 	bl	801152c <__i2b>
 8010eac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eae:	4604      	mov	r4, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 81d8 	beq.w	8011266 <_dtoa_r+0xb56>
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4601      	mov	r1, r0
 8010eba:	4648      	mov	r0, r9
 8010ebc:	f000 fbee 	bl	801169c <__pow5mult>
 8010ec0:	9b07      	ldr	r3, [sp, #28]
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	f300 809f 	bgt.w	8011008 <_dtoa_r+0x8f8>
 8010eca:	9b04      	ldr	r3, [sp, #16]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f040 8097 	bne.w	8011000 <_dtoa_r+0x8f0>
 8010ed2:	9b05      	ldr	r3, [sp, #20]
 8010ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f040 8093 	bne.w	8011004 <_dtoa_r+0x8f4>
 8010ede:	9b05      	ldr	r3, [sp, #20]
 8010ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ee4:	0d1b      	lsrs	r3, r3, #20
 8010ee6:	051b      	lsls	r3, r3, #20
 8010ee8:	b133      	cbz	r3, 8010ef8 <_dtoa_r+0x7e8>
 8010eea:	9b00      	ldr	r3, [sp, #0]
 8010eec:	3301      	adds	r3, #1
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	9b06      	ldr	r3, [sp, #24]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	9306      	str	r3, [sp, #24]
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	9308      	str	r3, [sp, #32]
 8010efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 81b8 	beq.w	8011272 <_dtoa_r+0xb62>
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f08:	6918      	ldr	r0, [r3, #16]
 8010f0a:	f000 fac3 	bl	8011494 <__hi0bits>
 8010f0e:	f1c0 0020 	rsb	r0, r0, #32
 8010f12:	9b06      	ldr	r3, [sp, #24]
 8010f14:	4418      	add	r0, r3
 8010f16:	f010 001f 	ands.w	r0, r0, #31
 8010f1a:	f000 8082 	beq.w	8011022 <_dtoa_r+0x912>
 8010f1e:	f1c0 0320 	rsb	r3, r0, #32
 8010f22:	2b04      	cmp	r3, #4
 8010f24:	dd73      	ble.n	801100e <_dtoa_r+0x8fe>
 8010f26:	9b00      	ldr	r3, [sp, #0]
 8010f28:	f1c0 001c 	rsb	r0, r0, #28
 8010f2c:	4403      	add	r3, r0
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	9b06      	ldr	r3, [sp, #24]
 8010f32:	4403      	add	r3, r0
 8010f34:	4406      	add	r6, r0
 8010f36:	9306      	str	r3, [sp, #24]
 8010f38:	9b00      	ldr	r3, [sp, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	dd05      	ble.n	8010f4a <_dtoa_r+0x83a>
 8010f3e:	9902      	ldr	r1, [sp, #8]
 8010f40:	461a      	mov	r2, r3
 8010f42:	4648      	mov	r0, r9
 8010f44:	f000 fc04 	bl	8011750 <__lshift>
 8010f48:	9002      	str	r0, [sp, #8]
 8010f4a:	9b06      	ldr	r3, [sp, #24]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	dd05      	ble.n	8010f5c <_dtoa_r+0x84c>
 8010f50:	4621      	mov	r1, r4
 8010f52:	461a      	mov	r2, r3
 8010f54:	4648      	mov	r0, r9
 8010f56:	f000 fbfb 	bl	8011750 <__lshift>
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d061      	beq.n	8011026 <_dtoa_r+0x916>
 8010f62:	9802      	ldr	r0, [sp, #8]
 8010f64:	4621      	mov	r1, r4
 8010f66:	f000 fc5f 	bl	8011828 <__mcmp>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	da5b      	bge.n	8011026 <_dtoa_r+0x916>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	9902      	ldr	r1, [sp, #8]
 8010f72:	220a      	movs	r2, #10
 8010f74:	4648      	mov	r0, r9
 8010f76:	f000 fa47 	bl	8011408 <__multadd>
 8010f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f7c:	9002      	str	r0, [sp, #8]
 8010f7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 8177 	beq.w	8011276 <_dtoa_r+0xb66>
 8010f88:	4629      	mov	r1, r5
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	220a      	movs	r2, #10
 8010f8e:	4648      	mov	r0, r9
 8010f90:	f000 fa3a 	bl	8011408 <__multadd>
 8010f94:	f1bb 0f00 	cmp.w	fp, #0
 8010f98:	4605      	mov	r5, r0
 8010f9a:	dc6f      	bgt.n	801107c <_dtoa_r+0x96c>
 8010f9c:	9b07      	ldr	r3, [sp, #28]
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	dc49      	bgt.n	8011036 <_dtoa_r+0x926>
 8010fa2:	e06b      	b.n	801107c <_dtoa_r+0x96c>
 8010fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010faa:	e73c      	b.n	8010e26 <_dtoa_r+0x716>
 8010fac:	3fe00000 	.word	0x3fe00000
 8010fb0:	40240000 	.word	0x40240000
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	1e5c      	subs	r4, r3, #1
 8010fb8:	9b08      	ldr	r3, [sp, #32]
 8010fba:	42a3      	cmp	r3, r4
 8010fbc:	db09      	blt.n	8010fd2 <_dtoa_r+0x8c2>
 8010fbe:	1b1c      	subs	r4, r3, r4
 8010fc0:	9b03      	ldr	r3, [sp, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f6bf af30 	bge.w	8010e28 <_dtoa_r+0x718>
 8010fc8:	9b00      	ldr	r3, [sp, #0]
 8010fca:	9a03      	ldr	r2, [sp, #12]
 8010fcc:	1a9e      	subs	r6, r3, r2
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e72b      	b.n	8010e2a <_dtoa_r+0x71a>
 8010fd2:	9b08      	ldr	r3, [sp, #32]
 8010fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010fd6:	9408      	str	r4, [sp, #32]
 8010fd8:	1ae3      	subs	r3, r4, r3
 8010fda:	441a      	add	r2, r3
 8010fdc:	9e00      	ldr	r6, [sp, #0]
 8010fde:	9b03      	ldr	r3, [sp, #12]
 8010fe0:	920d      	str	r2, [sp, #52]	@ 0x34
 8010fe2:	2400      	movs	r4, #0
 8010fe4:	e721      	b.n	8010e2a <_dtoa_r+0x71a>
 8010fe6:	9c08      	ldr	r4, [sp, #32]
 8010fe8:	9e00      	ldr	r6, [sp, #0]
 8010fea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010fec:	e728      	b.n	8010e40 <_dtoa_r+0x730>
 8010fee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010ff2:	e751      	b.n	8010e98 <_dtoa_r+0x788>
 8010ff4:	9a08      	ldr	r2, [sp, #32]
 8010ff6:	9902      	ldr	r1, [sp, #8]
 8010ff8:	e750      	b.n	8010e9c <_dtoa_r+0x78c>
 8010ffa:	f8cd 8008 	str.w	r8, [sp, #8]
 8010ffe:	e751      	b.n	8010ea4 <_dtoa_r+0x794>
 8011000:	2300      	movs	r3, #0
 8011002:	e779      	b.n	8010ef8 <_dtoa_r+0x7e8>
 8011004:	9b04      	ldr	r3, [sp, #16]
 8011006:	e777      	b.n	8010ef8 <_dtoa_r+0x7e8>
 8011008:	2300      	movs	r3, #0
 801100a:	9308      	str	r3, [sp, #32]
 801100c:	e779      	b.n	8010f02 <_dtoa_r+0x7f2>
 801100e:	d093      	beq.n	8010f38 <_dtoa_r+0x828>
 8011010:	9a00      	ldr	r2, [sp, #0]
 8011012:	331c      	adds	r3, #28
 8011014:	441a      	add	r2, r3
 8011016:	9200      	str	r2, [sp, #0]
 8011018:	9a06      	ldr	r2, [sp, #24]
 801101a:	441a      	add	r2, r3
 801101c:	441e      	add	r6, r3
 801101e:	9206      	str	r2, [sp, #24]
 8011020:	e78a      	b.n	8010f38 <_dtoa_r+0x828>
 8011022:	4603      	mov	r3, r0
 8011024:	e7f4      	b.n	8011010 <_dtoa_r+0x900>
 8011026:	9b03      	ldr	r3, [sp, #12]
 8011028:	2b00      	cmp	r3, #0
 801102a:	46b8      	mov	r8, r7
 801102c:	dc20      	bgt.n	8011070 <_dtoa_r+0x960>
 801102e:	469b      	mov	fp, r3
 8011030:	9b07      	ldr	r3, [sp, #28]
 8011032:	2b02      	cmp	r3, #2
 8011034:	dd1e      	ble.n	8011074 <_dtoa_r+0x964>
 8011036:	f1bb 0f00 	cmp.w	fp, #0
 801103a:	f47f adb1 	bne.w	8010ba0 <_dtoa_r+0x490>
 801103e:	4621      	mov	r1, r4
 8011040:	465b      	mov	r3, fp
 8011042:	2205      	movs	r2, #5
 8011044:	4648      	mov	r0, r9
 8011046:	f000 f9df 	bl	8011408 <__multadd>
 801104a:	4601      	mov	r1, r0
 801104c:	4604      	mov	r4, r0
 801104e:	9802      	ldr	r0, [sp, #8]
 8011050:	f000 fbea 	bl	8011828 <__mcmp>
 8011054:	2800      	cmp	r0, #0
 8011056:	f77f ada3 	ble.w	8010ba0 <_dtoa_r+0x490>
 801105a:	4656      	mov	r6, sl
 801105c:	2331      	movs	r3, #49	@ 0x31
 801105e:	f806 3b01 	strb.w	r3, [r6], #1
 8011062:	f108 0801 	add.w	r8, r8, #1
 8011066:	e59f      	b.n	8010ba8 <_dtoa_r+0x498>
 8011068:	9c03      	ldr	r4, [sp, #12]
 801106a:	46b8      	mov	r8, r7
 801106c:	4625      	mov	r5, r4
 801106e:	e7f4      	b.n	801105a <_dtoa_r+0x94a>
 8011070:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 8101 	beq.w	801127e <_dtoa_r+0xb6e>
 801107c:	2e00      	cmp	r6, #0
 801107e:	dd05      	ble.n	801108c <_dtoa_r+0x97c>
 8011080:	4629      	mov	r1, r5
 8011082:	4632      	mov	r2, r6
 8011084:	4648      	mov	r0, r9
 8011086:	f000 fb63 	bl	8011750 <__lshift>
 801108a:	4605      	mov	r5, r0
 801108c:	9b08      	ldr	r3, [sp, #32]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d05c      	beq.n	801114c <_dtoa_r+0xa3c>
 8011092:	6869      	ldr	r1, [r5, #4]
 8011094:	4648      	mov	r0, r9
 8011096:	f000 f955 	bl	8011344 <_Balloc>
 801109a:	4606      	mov	r6, r0
 801109c:	b928      	cbnz	r0, 80110aa <_dtoa_r+0x99a>
 801109e:	4b82      	ldr	r3, [pc, #520]	@ (80112a8 <_dtoa_r+0xb98>)
 80110a0:	4602      	mov	r2, r0
 80110a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80110a6:	f7ff bb4a 	b.w	801073e <_dtoa_r+0x2e>
 80110aa:	692a      	ldr	r2, [r5, #16]
 80110ac:	3202      	adds	r2, #2
 80110ae:	0092      	lsls	r2, r2, #2
 80110b0:	f105 010c 	add.w	r1, r5, #12
 80110b4:	300c      	adds	r0, #12
 80110b6:	f7ff fa94 	bl	80105e2 <memcpy>
 80110ba:	2201      	movs	r2, #1
 80110bc:	4631      	mov	r1, r6
 80110be:	4648      	mov	r0, r9
 80110c0:	f000 fb46 	bl	8011750 <__lshift>
 80110c4:	f10a 0301 	add.w	r3, sl, #1
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	eb0a 030b 	add.w	r3, sl, fp
 80110ce:	9308      	str	r3, [sp, #32]
 80110d0:	9b04      	ldr	r3, [sp, #16]
 80110d2:	f003 0301 	and.w	r3, r3, #1
 80110d6:	462f      	mov	r7, r5
 80110d8:	9306      	str	r3, [sp, #24]
 80110da:	4605      	mov	r5, r0
 80110dc:	9b00      	ldr	r3, [sp, #0]
 80110de:	9802      	ldr	r0, [sp, #8]
 80110e0:	4621      	mov	r1, r4
 80110e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80110e6:	f7ff fa8a 	bl	80105fe <quorem>
 80110ea:	4603      	mov	r3, r0
 80110ec:	3330      	adds	r3, #48	@ 0x30
 80110ee:	9003      	str	r0, [sp, #12]
 80110f0:	4639      	mov	r1, r7
 80110f2:	9802      	ldr	r0, [sp, #8]
 80110f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80110f6:	f000 fb97 	bl	8011828 <__mcmp>
 80110fa:	462a      	mov	r2, r5
 80110fc:	9004      	str	r0, [sp, #16]
 80110fe:	4621      	mov	r1, r4
 8011100:	4648      	mov	r0, r9
 8011102:	f000 fbad 	bl	8011860 <__mdiff>
 8011106:	68c2      	ldr	r2, [r0, #12]
 8011108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801110a:	4606      	mov	r6, r0
 801110c:	bb02      	cbnz	r2, 8011150 <_dtoa_r+0xa40>
 801110e:	4601      	mov	r1, r0
 8011110:	9802      	ldr	r0, [sp, #8]
 8011112:	f000 fb89 	bl	8011828 <__mcmp>
 8011116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011118:	4602      	mov	r2, r0
 801111a:	4631      	mov	r1, r6
 801111c:	4648      	mov	r0, r9
 801111e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011120:	9309      	str	r3, [sp, #36]	@ 0x24
 8011122:	f000 f94f 	bl	80113c4 <_Bfree>
 8011126:	9b07      	ldr	r3, [sp, #28]
 8011128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801112a:	9e00      	ldr	r6, [sp, #0]
 801112c:	ea42 0103 	orr.w	r1, r2, r3
 8011130:	9b06      	ldr	r3, [sp, #24]
 8011132:	4319      	orrs	r1, r3
 8011134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011136:	d10d      	bne.n	8011154 <_dtoa_r+0xa44>
 8011138:	2b39      	cmp	r3, #57	@ 0x39
 801113a:	d027      	beq.n	801118c <_dtoa_r+0xa7c>
 801113c:	9a04      	ldr	r2, [sp, #16]
 801113e:	2a00      	cmp	r2, #0
 8011140:	dd01      	ble.n	8011146 <_dtoa_r+0xa36>
 8011142:	9b03      	ldr	r3, [sp, #12]
 8011144:	3331      	adds	r3, #49	@ 0x31
 8011146:	f88b 3000 	strb.w	r3, [fp]
 801114a:	e52e      	b.n	8010baa <_dtoa_r+0x49a>
 801114c:	4628      	mov	r0, r5
 801114e:	e7b9      	b.n	80110c4 <_dtoa_r+0x9b4>
 8011150:	2201      	movs	r2, #1
 8011152:	e7e2      	b.n	801111a <_dtoa_r+0xa0a>
 8011154:	9904      	ldr	r1, [sp, #16]
 8011156:	2900      	cmp	r1, #0
 8011158:	db04      	blt.n	8011164 <_dtoa_r+0xa54>
 801115a:	9807      	ldr	r0, [sp, #28]
 801115c:	4301      	orrs	r1, r0
 801115e:	9806      	ldr	r0, [sp, #24]
 8011160:	4301      	orrs	r1, r0
 8011162:	d120      	bne.n	80111a6 <_dtoa_r+0xa96>
 8011164:	2a00      	cmp	r2, #0
 8011166:	ddee      	ble.n	8011146 <_dtoa_r+0xa36>
 8011168:	9902      	ldr	r1, [sp, #8]
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	2201      	movs	r2, #1
 801116e:	4648      	mov	r0, r9
 8011170:	f000 faee 	bl	8011750 <__lshift>
 8011174:	4621      	mov	r1, r4
 8011176:	9002      	str	r0, [sp, #8]
 8011178:	f000 fb56 	bl	8011828 <__mcmp>
 801117c:	2800      	cmp	r0, #0
 801117e:	9b00      	ldr	r3, [sp, #0]
 8011180:	dc02      	bgt.n	8011188 <_dtoa_r+0xa78>
 8011182:	d1e0      	bne.n	8011146 <_dtoa_r+0xa36>
 8011184:	07da      	lsls	r2, r3, #31
 8011186:	d5de      	bpl.n	8011146 <_dtoa_r+0xa36>
 8011188:	2b39      	cmp	r3, #57	@ 0x39
 801118a:	d1da      	bne.n	8011142 <_dtoa_r+0xa32>
 801118c:	2339      	movs	r3, #57	@ 0x39
 801118e:	f88b 3000 	strb.w	r3, [fp]
 8011192:	4633      	mov	r3, r6
 8011194:	461e      	mov	r6, r3
 8011196:	3b01      	subs	r3, #1
 8011198:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801119c:	2a39      	cmp	r2, #57	@ 0x39
 801119e:	d04e      	beq.n	801123e <_dtoa_r+0xb2e>
 80111a0:	3201      	adds	r2, #1
 80111a2:	701a      	strb	r2, [r3, #0]
 80111a4:	e501      	b.n	8010baa <_dtoa_r+0x49a>
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	dd03      	ble.n	80111b2 <_dtoa_r+0xaa2>
 80111aa:	2b39      	cmp	r3, #57	@ 0x39
 80111ac:	d0ee      	beq.n	801118c <_dtoa_r+0xa7c>
 80111ae:	3301      	adds	r3, #1
 80111b0:	e7c9      	b.n	8011146 <_dtoa_r+0xa36>
 80111b2:	9a00      	ldr	r2, [sp, #0]
 80111b4:	9908      	ldr	r1, [sp, #32]
 80111b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111ba:	428a      	cmp	r2, r1
 80111bc:	d028      	beq.n	8011210 <_dtoa_r+0xb00>
 80111be:	9902      	ldr	r1, [sp, #8]
 80111c0:	2300      	movs	r3, #0
 80111c2:	220a      	movs	r2, #10
 80111c4:	4648      	mov	r0, r9
 80111c6:	f000 f91f 	bl	8011408 <__multadd>
 80111ca:	42af      	cmp	r7, r5
 80111cc:	9002      	str	r0, [sp, #8]
 80111ce:	f04f 0300 	mov.w	r3, #0
 80111d2:	f04f 020a 	mov.w	r2, #10
 80111d6:	4639      	mov	r1, r7
 80111d8:	4648      	mov	r0, r9
 80111da:	d107      	bne.n	80111ec <_dtoa_r+0xadc>
 80111dc:	f000 f914 	bl	8011408 <__multadd>
 80111e0:	4607      	mov	r7, r0
 80111e2:	4605      	mov	r5, r0
 80111e4:	9b00      	ldr	r3, [sp, #0]
 80111e6:	3301      	adds	r3, #1
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	e777      	b.n	80110dc <_dtoa_r+0x9cc>
 80111ec:	f000 f90c 	bl	8011408 <__multadd>
 80111f0:	4629      	mov	r1, r5
 80111f2:	4607      	mov	r7, r0
 80111f4:	2300      	movs	r3, #0
 80111f6:	220a      	movs	r2, #10
 80111f8:	4648      	mov	r0, r9
 80111fa:	f000 f905 	bl	8011408 <__multadd>
 80111fe:	4605      	mov	r5, r0
 8011200:	e7f0      	b.n	80111e4 <_dtoa_r+0xad4>
 8011202:	f1bb 0f00 	cmp.w	fp, #0
 8011206:	bfcc      	ite	gt
 8011208:	465e      	movgt	r6, fp
 801120a:	2601      	movle	r6, #1
 801120c:	4456      	add	r6, sl
 801120e:	2700      	movs	r7, #0
 8011210:	9902      	ldr	r1, [sp, #8]
 8011212:	9300      	str	r3, [sp, #0]
 8011214:	2201      	movs	r2, #1
 8011216:	4648      	mov	r0, r9
 8011218:	f000 fa9a 	bl	8011750 <__lshift>
 801121c:	4621      	mov	r1, r4
 801121e:	9002      	str	r0, [sp, #8]
 8011220:	f000 fb02 	bl	8011828 <__mcmp>
 8011224:	2800      	cmp	r0, #0
 8011226:	dcb4      	bgt.n	8011192 <_dtoa_r+0xa82>
 8011228:	d102      	bne.n	8011230 <_dtoa_r+0xb20>
 801122a:	9b00      	ldr	r3, [sp, #0]
 801122c:	07db      	lsls	r3, r3, #31
 801122e:	d4b0      	bmi.n	8011192 <_dtoa_r+0xa82>
 8011230:	4633      	mov	r3, r6
 8011232:	461e      	mov	r6, r3
 8011234:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011238:	2a30      	cmp	r2, #48	@ 0x30
 801123a:	d0fa      	beq.n	8011232 <_dtoa_r+0xb22>
 801123c:	e4b5      	b.n	8010baa <_dtoa_r+0x49a>
 801123e:	459a      	cmp	sl, r3
 8011240:	d1a8      	bne.n	8011194 <_dtoa_r+0xa84>
 8011242:	2331      	movs	r3, #49	@ 0x31
 8011244:	f108 0801 	add.w	r8, r8, #1
 8011248:	f88a 3000 	strb.w	r3, [sl]
 801124c:	e4ad      	b.n	8010baa <_dtoa_r+0x49a>
 801124e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011250:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80112ac <_dtoa_r+0xb9c>
 8011254:	b11b      	cbz	r3, 801125e <_dtoa_r+0xb4e>
 8011256:	f10a 0308 	add.w	r3, sl, #8
 801125a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801125c:	6013      	str	r3, [r2, #0]
 801125e:	4650      	mov	r0, sl
 8011260:	b017      	add	sp, #92	@ 0x5c
 8011262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011266:	9b07      	ldr	r3, [sp, #28]
 8011268:	2b01      	cmp	r3, #1
 801126a:	f77f ae2e 	ble.w	8010eca <_dtoa_r+0x7ba>
 801126e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011270:	9308      	str	r3, [sp, #32]
 8011272:	2001      	movs	r0, #1
 8011274:	e64d      	b.n	8010f12 <_dtoa_r+0x802>
 8011276:	f1bb 0f00 	cmp.w	fp, #0
 801127a:	f77f aed9 	ble.w	8011030 <_dtoa_r+0x920>
 801127e:	4656      	mov	r6, sl
 8011280:	9802      	ldr	r0, [sp, #8]
 8011282:	4621      	mov	r1, r4
 8011284:	f7ff f9bb 	bl	80105fe <quorem>
 8011288:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801128c:	f806 3b01 	strb.w	r3, [r6], #1
 8011290:	eba6 020a 	sub.w	r2, r6, sl
 8011294:	4593      	cmp	fp, r2
 8011296:	ddb4      	ble.n	8011202 <_dtoa_r+0xaf2>
 8011298:	9902      	ldr	r1, [sp, #8]
 801129a:	2300      	movs	r3, #0
 801129c:	220a      	movs	r2, #10
 801129e:	4648      	mov	r0, r9
 80112a0:	f000 f8b2 	bl	8011408 <__multadd>
 80112a4:	9002      	str	r0, [sp, #8]
 80112a6:	e7eb      	b.n	8011280 <_dtoa_r+0xb70>
 80112a8:	080127d0 	.word	0x080127d0
 80112ac:	08012754 	.word	0x08012754

080112b0 <_free_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4605      	mov	r5, r0
 80112b4:	2900      	cmp	r1, #0
 80112b6:	d041      	beq.n	801133c <_free_r+0x8c>
 80112b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112bc:	1f0c      	subs	r4, r1, #4
 80112be:	2b00      	cmp	r3, #0
 80112c0:	bfb8      	it	lt
 80112c2:	18e4      	addlt	r4, r4, r3
 80112c4:	f7fe fb96 	bl	800f9f4 <__malloc_lock>
 80112c8:	4a1d      	ldr	r2, [pc, #116]	@ (8011340 <_free_r+0x90>)
 80112ca:	6813      	ldr	r3, [r2, #0]
 80112cc:	b933      	cbnz	r3, 80112dc <_free_r+0x2c>
 80112ce:	6063      	str	r3, [r4, #4]
 80112d0:	6014      	str	r4, [r2, #0]
 80112d2:	4628      	mov	r0, r5
 80112d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d8:	f7fe bb92 	b.w	800fa00 <__malloc_unlock>
 80112dc:	42a3      	cmp	r3, r4
 80112de:	d908      	bls.n	80112f2 <_free_r+0x42>
 80112e0:	6820      	ldr	r0, [r4, #0]
 80112e2:	1821      	adds	r1, r4, r0
 80112e4:	428b      	cmp	r3, r1
 80112e6:	bf01      	itttt	eq
 80112e8:	6819      	ldreq	r1, [r3, #0]
 80112ea:	685b      	ldreq	r3, [r3, #4]
 80112ec:	1809      	addeq	r1, r1, r0
 80112ee:	6021      	streq	r1, [r4, #0]
 80112f0:	e7ed      	b.n	80112ce <_free_r+0x1e>
 80112f2:	461a      	mov	r2, r3
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	b10b      	cbz	r3, 80112fc <_free_r+0x4c>
 80112f8:	42a3      	cmp	r3, r4
 80112fa:	d9fa      	bls.n	80112f2 <_free_r+0x42>
 80112fc:	6811      	ldr	r1, [r2, #0]
 80112fe:	1850      	adds	r0, r2, r1
 8011300:	42a0      	cmp	r0, r4
 8011302:	d10b      	bne.n	801131c <_free_r+0x6c>
 8011304:	6820      	ldr	r0, [r4, #0]
 8011306:	4401      	add	r1, r0
 8011308:	1850      	adds	r0, r2, r1
 801130a:	4283      	cmp	r3, r0
 801130c:	6011      	str	r1, [r2, #0]
 801130e:	d1e0      	bne.n	80112d2 <_free_r+0x22>
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	6053      	str	r3, [r2, #4]
 8011316:	4408      	add	r0, r1
 8011318:	6010      	str	r0, [r2, #0]
 801131a:	e7da      	b.n	80112d2 <_free_r+0x22>
 801131c:	d902      	bls.n	8011324 <_free_r+0x74>
 801131e:	230c      	movs	r3, #12
 8011320:	602b      	str	r3, [r5, #0]
 8011322:	e7d6      	b.n	80112d2 <_free_r+0x22>
 8011324:	6820      	ldr	r0, [r4, #0]
 8011326:	1821      	adds	r1, r4, r0
 8011328:	428b      	cmp	r3, r1
 801132a:	bf04      	itt	eq
 801132c:	6819      	ldreq	r1, [r3, #0]
 801132e:	685b      	ldreq	r3, [r3, #4]
 8011330:	6063      	str	r3, [r4, #4]
 8011332:	bf04      	itt	eq
 8011334:	1809      	addeq	r1, r1, r0
 8011336:	6021      	streq	r1, [r4, #0]
 8011338:	6054      	str	r4, [r2, #4]
 801133a:	e7ca      	b.n	80112d2 <_free_r+0x22>
 801133c:	bd38      	pop	{r3, r4, r5, pc}
 801133e:	bf00      	nop
 8011340:	20002284 	.word	0x20002284

08011344 <_Balloc>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	69c6      	ldr	r6, [r0, #28]
 8011348:	4604      	mov	r4, r0
 801134a:	460d      	mov	r5, r1
 801134c:	b976      	cbnz	r6, 801136c <_Balloc+0x28>
 801134e:	2010      	movs	r0, #16
 8011350:	f7fe fa9e 	bl	800f890 <malloc>
 8011354:	4602      	mov	r2, r0
 8011356:	61e0      	str	r0, [r4, #28]
 8011358:	b920      	cbnz	r0, 8011364 <_Balloc+0x20>
 801135a:	4b18      	ldr	r3, [pc, #96]	@ (80113bc <_Balloc+0x78>)
 801135c:	4818      	ldr	r0, [pc, #96]	@ (80113c0 <_Balloc+0x7c>)
 801135e:	216b      	movs	r1, #107	@ 0x6b
 8011360:	f000 fc16 	bl	8011b90 <__assert_func>
 8011364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011368:	6006      	str	r6, [r0, #0]
 801136a:	60c6      	str	r6, [r0, #12]
 801136c:	69e6      	ldr	r6, [r4, #28]
 801136e:	68f3      	ldr	r3, [r6, #12]
 8011370:	b183      	cbz	r3, 8011394 <_Balloc+0x50>
 8011372:	69e3      	ldr	r3, [r4, #28]
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801137a:	b9b8      	cbnz	r0, 80113ac <_Balloc+0x68>
 801137c:	2101      	movs	r1, #1
 801137e:	fa01 f605 	lsl.w	r6, r1, r5
 8011382:	1d72      	adds	r2, r6, #5
 8011384:	0092      	lsls	r2, r2, #2
 8011386:	4620      	mov	r0, r4
 8011388:	f000 fc20 	bl	8011bcc <_calloc_r>
 801138c:	b160      	cbz	r0, 80113a8 <_Balloc+0x64>
 801138e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011392:	e00e      	b.n	80113b2 <_Balloc+0x6e>
 8011394:	2221      	movs	r2, #33	@ 0x21
 8011396:	2104      	movs	r1, #4
 8011398:	4620      	mov	r0, r4
 801139a:	f000 fc17 	bl	8011bcc <_calloc_r>
 801139e:	69e3      	ldr	r3, [r4, #28]
 80113a0:	60f0      	str	r0, [r6, #12]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1e4      	bne.n	8011372 <_Balloc+0x2e>
 80113a8:	2000      	movs	r0, #0
 80113aa:	bd70      	pop	{r4, r5, r6, pc}
 80113ac:	6802      	ldr	r2, [r0, #0]
 80113ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113b2:	2300      	movs	r3, #0
 80113b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113b8:	e7f7      	b.n	80113aa <_Balloc+0x66>
 80113ba:	bf00      	nop
 80113bc:	08012761 	.word	0x08012761
 80113c0:	080127e1 	.word	0x080127e1

080113c4 <_Bfree>:
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	69c6      	ldr	r6, [r0, #28]
 80113c8:	4605      	mov	r5, r0
 80113ca:	460c      	mov	r4, r1
 80113cc:	b976      	cbnz	r6, 80113ec <_Bfree+0x28>
 80113ce:	2010      	movs	r0, #16
 80113d0:	f7fe fa5e 	bl	800f890 <malloc>
 80113d4:	4602      	mov	r2, r0
 80113d6:	61e8      	str	r0, [r5, #28]
 80113d8:	b920      	cbnz	r0, 80113e4 <_Bfree+0x20>
 80113da:	4b09      	ldr	r3, [pc, #36]	@ (8011400 <_Bfree+0x3c>)
 80113dc:	4809      	ldr	r0, [pc, #36]	@ (8011404 <_Bfree+0x40>)
 80113de:	218f      	movs	r1, #143	@ 0x8f
 80113e0:	f000 fbd6 	bl	8011b90 <__assert_func>
 80113e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113e8:	6006      	str	r6, [r0, #0]
 80113ea:	60c6      	str	r6, [r0, #12]
 80113ec:	b13c      	cbz	r4, 80113fe <_Bfree+0x3a>
 80113ee:	69eb      	ldr	r3, [r5, #28]
 80113f0:	6862      	ldr	r2, [r4, #4]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113f8:	6021      	str	r1, [r4, #0]
 80113fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	08012761 	.word	0x08012761
 8011404:	080127e1 	.word	0x080127e1

08011408 <__multadd>:
 8011408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801140c:	690d      	ldr	r5, [r1, #16]
 801140e:	4607      	mov	r7, r0
 8011410:	460c      	mov	r4, r1
 8011412:	461e      	mov	r6, r3
 8011414:	f101 0c14 	add.w	ip, r1, #20
 8011418:	2000      	movs	r0, #0
 801141a:	f8dc 3000 	ldr.w	r3, [ip]
 801141e:	b299      	uxth	r1, r3
 8011420:	fb02 6101 	mla	r1, r2, r1, r6
 8011424:	0c1e      	lsrs	r6, r3, #16
 8011426:	0c0b      	lsrs	r3, r1, #16
 8011428:	fb02 3306 	mla	r3, r2, r6, r3
 801142c:	b289      	uxth	r1, r1
 801142e:	3001      	adds	r0, #1
 8011430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011434:	4285      	cmp	r5, r0
 8011436:	f84c 1b04 	str.w	r1, [ip], #4
 801143a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801143e:	dcec      	bgt.n	801141a <__multadd+0x12>
 8011440:	b30e      	cbz	r6, 8011486 <__multadd+0x7e>
 8011442:	68a3      	ldr	r3, [r4, #8]
 8011444:	42ab      	cmp	r3, r5
 8011446:	dc19      	bgt.n	801147c <__multadd+0x74>
 8011448:	6861      	ldr	r1, [r4, #4]
 801144a:	4638      	mov	r0, r7
 801144c:	3101      	adds	r1, #1
 801144e:	f7ff ff79 	bl	8011344 <_Balloc>
 8011452:	4680      	mov	r8, r0
 8011454:	b928      	cbnz	r0, 8011462 <__multadd+0x5a>
 8011456:	4602      	mov	r2, r0
 8011458:	4b0c      	ldr	r3, [pc, #48]	@ (801148c <__multadd+0x84>)
 801145a:	480d      	ldr	r0, [pc, #52]	@ (8011490 <__multadd+0x88>)
 801145c:	21ba      	movs	r1, #186	@ 0xba
 801145e:	f000 fb97 	bl	8011b90 <__assert_func>
 8011462:	6922      	ldr	r2, [r4, #16]
 8011464:	3202      	adds	r2, #2
 8011466:	f104 010c 	add.w	r1, r4, #12
 801146a:	0092      	lsls	r2, r2, #2
 801146c:	300c      	adds	r0, #12
 801146e:	f7ff f8b8 	bl	80105e2 <memcpy>
 8011472:	4621      	mov	r1, r4
 8011474:	4638      	mov	r0, r7
 8011476:	f7ff ffa5 	bl	80113c4 <_Bfree>
 801147a:	4644      	mov	r4, r8
 801147c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011480:	3501      	adds	r5, #1
 8011482:	615e      	str	r6, [r3, #20]
 8011484:	6125      	str	r5, [r4, #16]
 8011486:	4620      	mov	r0, r4
 8011488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801148c:	080127d0 	.word	0x080127d0
 8011490:	080127e1 	.word	0x080127e1

08011494 <__hi0bits>:
 8011494:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011498:	4603      	mov	r3, r0
 801149a:	bf36      	itet	cc
 801149c:	0403      	lslcc	r3, r0, #16
 801149e:	2000      	movcs	r0, #0
 80114a0:	2010      	movcc	r0, #16
 80114a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80114a6:	bf3c      	itt	cc
 80114a8:	021b      	lslcc	r3, r3, #8
 80114aa:	3008      	addcc	r0, #8
 80114ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80114b0:	bf3c      	itt	cc
 80114b2:	011b      	lslcc	r3, r3, #4
 80114b4:	3004      	addcc	r0, #4
 80114b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114ba:	bf3c      	itt	cc
 80114bc:	009b      	lslcc	r3, r3, #2
 80114be:	3002      	addcc	r0, #2
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	db05      	blt.n	80114d0 <__hi0bits+0x3c>
 80114c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80114c8:	f100 0001 	add.w	r0, r0, #1
 80114cc:	bf08      	it	eq
 80114ce:	2020      	moveq	r0, #32
 80114d0:	4770      	bx	lr

080114d2 <__lo0bits>:
 80114d2:	6803      	ldr	r3, [r0, #0]
 80114d4:	4602      	mov	r2, r0
 80114d6:	f013 0007 	ands.w	r0, r3, #7
 80114da:	d00b      	beq.n	80114f4 <__lo0bits+0x22>
 80114dc:	07d9      	lsls	r1, r3, #31
 80114de:	d421      	bmi.n	8011524 <__lo0bits+0x52>
 80114e0:	0798      	lsls	r0, r3, #30
 80114e2:	bf49      	itett	mi
 80114e4:	085b      	lsrmi	r3, r3, #1
 80114e6:	089b      	lsrpl	r3, r3, #2
 80114e8:	2001      	movmi	r0, #1
 80114ea:	6013      	strmi	r3, [r2, #0]
 80114ec:	bf5c      	itt	pl
 80114ee:	6013      	strpl	r3, [r2, #0]
 80114f0:	2002      	movpl	r0, #2
 80114f2:	4770      	bx	lr
 80114f4:	b299      	uxth	r1, r3
 80114f6:	b909      	cbnz	r1, 80114fc <__lo0bits+0x2a>
 80114f8:	0c1b      	lsrs	r3, r3, #16
 80114fa:	2010      	movs	r0, #16
 80114fc:	b2d9      	uxtb	r1, r3
 80114fe:	b909      	cbnz	r1, 8011504 <__lo0bits+0x32>
 8011500:	3008      	adds	r0, #8
 8011502:	0a1b      	lsrs	r3, r3, #8
 8011504:	0719      	lsls	r1, r3, #28
 8011506:	bf04      	itt	eq
 8011508:	091b      	lsreq	r3, r3, #4
 801150a:	3004      	addeq	r0, #4
 801150c:	0799      	lsls	r1, r3, #30
 801150e:	bf04      	itt	eq
 8011510:	089b      	lsreq	r3, r3, #2
 8011512:	3002      	addeq	r0, #2
 8011514:	07d9      	lsls	r1, r3, #31
 8011516:	d403      	bmi.n	8011520 <__lo0bits+0x4e>
 8011518:	085b      	lsrs	r3, r3, #1
 801151a:	f100 0001 	add.w	r0, r0, #1
 801151e:	d003      	beq.n	8011528 <__lo0bits+0x56>
 8011520:	6013      	str	r3, [r2, #0]
 8011522:	4770      	bx	lr
 8011524:	2000      	movs	r0, #0
 8011526:	4770      	bx	lr
 8011528:	2020      	movs	r0, #32
 801152a:	4770      	bx	lr

0801152c <__i2b>:
 801152c:	b510      	push	{r4, lr}
 801152e:	460c      	mov	r4, r1
 8011530:	2101      	movs	r1, #1
 8011532:	f7ff ff07 	bl	8011344 <_Balloc>
 8011536:	4602      	mov	r2, r0
 8011538:	b928      	cbnz	r0, 8011546 <__i2b+0x1a>
 801153a:	4b05      	ldr	r3, [pc, #20]	@ (8011550 <__i2b+0x24>)
 801153c:	4805      	ldr	r0, [pc, #20]	@ (8011554 <__i2b+0x28>)
 801153e:	f240 1145 	movw	r1, #325	@ 0x145
 8011542:	f000 fb25 	bl	8011b90 <__assert_func>
 8011546:	2301      	movs	r3, #1
 8011548:	6144      	str	r4, [r0, #20]
 801154a:	6103      	str	r3, [r0, #16]
 801154c:	bd10      	pop	{r4, pc}
 801154e:	bf00      	nop
 8011550:	080127d0 	.word	0x080127d0
 8011554:	080127e1 	.word	0x080127e1

08011558 <__multiply>:
 8011558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801155c:	4617      	mov	r7, r2
 801155e:	690a      	ldr	r2, [r1, #16]
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	429a      	cmp	r2, r3
 8011564:	bfa8      	it	ge
 8011566:	463b      	movge	r3, r7
 8011568:	4689      	mov	r9, r1
 801156a:	bfa4      	itt	ge
 801156c:	460f      	movge	r7, r1
 801156e:	4699      	movge	r9, r3
 8011570:	693d      	ldr	r5, [r7, #16]
 8011572:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	eb05 060a 	add.w	r6, r5, sl
 801157e:	42b3      	cmp	r3, r6
 8011580:	b085      	sub	sp, #20
 8011582:	bfb8      	it	lt
 8011584:	3101      	addlt	r1, #1
 8011586:	f7ff fedd 	bl	8011344 <_Balloc>
 801158a:	b930      	cbnz	r0, 801159a <__multiply+0x42>
 801158c:	4602      	mov	r2, r0
 801158e:	4b41      	ldr	r3, [pc, #260]	@ (8011694 <__multiply+0x13c>)
 8011590:	4841      	ldr	r0, [pc, #260]	@ (8011698 <__multiply+0x140>)
 8011592:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011596:	f000 fafb 	bl	8011b90 <__assert_func>
 801159a:	f100 0414 	add.w	r4, r0, #20
 801159e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80115a2:	4623      	mov	r3, r4
 80115a4:	2200      	movs	r2, #0
 80115a6:	4573      	cmp	r3, lr
 80115a8:	d320      	bcc.n	80115ec <__multiply+0x94>
 80115aa:	f107 0814 	add.w	r8, r7, #20
 80115ae:	f109 0114 	add.w	r1, r9, #20
 80115b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80115b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80115ba:	9302      	str	r3, [sp, #8]
 80115bc:	1beb      	subs	r3, r5, r7
 80115be:	3b15      	subs	r3, #21
 80115c0:	f023 0303 	bic.w	r3, r3, #3
 80115c4:	3304      	adds	r3, #4
 80115c6:	3715      	adds	r7, #21
 80115c8:	42bd      	cmp	r5, r7
 80115ca:	bf38      	it	cc
 80115cc:	2304      	movcc	r3, #4
 80115ce:	9301      	str	r3, [sp, #4]
 80115d0:	9b02      	ldr	r3, [sp, #8]
 80115d2:	9103      	str	r1, [sp, #12]
 80115d4:	428b      	cmp	r3, r1
 80115d6:	d80c      	bhi.n	80115f2 <__multiply+0x9a>
 80115d8:	2e00      	cmp	r6, #0
 80115da:	dd03      	ble.n	80115e4 <__multiply+0x8c>
 80115dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d055      	beq.n	8011690 <__multiply+0x138>
 80115e4:	6106      	str	r6, [r0, #16]
 80115e6:	b005      	add	sp, #20
 80115e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ec:	f843 2b04 	str.w	r2, [r3], #4
 80115f0:	e7d9      	b.n	80115a6 <__multiply+0x4e>
 80115f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80115f6:	f1ba 0f00 	cmp.w	sl, #0
 80115fa:	d01f      	beq.n	801163c <__multiply+0xe4>
 80115fc:	46c4      	mov	ip, r8
 80115fe:	46a1      	mov	r9, r4
 8011600:	2700      	movs	r7, #0
 8011602:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011606:	f8d9 3000 	ldr.w	r3, [r9]
 801160a:	fa1f fb82 	uxth.w	fp, r2
 801160e:	b29b      	uxth	r3, r3
 8011610:	fb0a 330b 	mla	r3, sl, fp, r3
 8011614:	443b      	add	r3, r7
 8011616:	f8d9 7000 	ldr.w	r7, [r9]
 801161a:	0c12      	lsrs	r2, r2, #16
 801161c:	0c3f      	lsrs	r7, r7, #16
 801161e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011622:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011626:	b29b      	uxth	r3, r3
 8011628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801162c:	4565      	cmp	r5, ip
 801162e:	f849 3b04 	str.w	r3, [r9], #4
 8011632:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011636:	d8e4      	bhi.n	8011602 <__multiply+0xaa>
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	50e7      	str	r7, [r4, r3]
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011642:	3104      	adds	r1, #4
 8011644:	f1b9 0f00 	cmp.w	r9, #0
 8011648:	d020      	beq.n	801168c <__multiply+0x134>
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	4647      	mov	r7, r8
 801164e:	46a4      	mov	ip, r4
 8011650:	f04f 0a00 	mov.w	sl, #0
 8011654:	f8b7 b000 	ldrh.w	fp, [r7]
 8011658:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801165c:	fb09 220b 	mla	r2, r9, fp, r2
 8011660:	4452      	add	r2, sl
 8011662:	b29b      	uxth	r3, r3
 8011664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011668:	f84c 3b04 	str.w	r3, [ip], #4
 801166c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011674:	f8bc 3000 	ldrh.w	r3, [ip]
 8011678:	fb09 330a 	mla	r3, r9, sl, r3
 801167c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011680:	42bd      	cmp	r5, r7
 8011682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011686:	d8e5      	bhi.n	8011654 <__multiply+0xfc>
 8011688:	9a01      	ldr	r2, [sp, #4]
 801168a:	50a3      	str	r3, [r4, r2]
 801168c:	3404      	adds	r4, #4
 801168e:	e79f      	b.n	80115d0 <__multiply+0x78>
 8011690:	3e01      	subs	r6, #1
 8011692:	e7a1      	b.n	80115d8 <__multiply+0x80>
 8011694:	080127d0 	.word	0x080127d0
 8011698:	080127e1 	.word	0x080127e1

0801169c <__pow5mult>:
 801169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116a0:	4615      	mov	r5, r2
 80116a2:	f012 0203 	ands.w	r2, r2, #3
 80116a6:	4607      	mov	r7, r0
 80116a8:	460e      	mov	r6, r1
 80116aa:	d007      	beq.n	80116bc <__pow5mult+0x20>
 80116ac:	4c25      	ldr	r4, [pc, #148]	@ (8011744 <__pow5mult+0xa8>)
 80116ae:	3a01      	subs	r2, #1
 80116b0:	2300      	movs	r3, #0
 80116b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116b6:	f7ff fea7 	bl	8011408 <__multadd>
 80116ba:	4606      	mov	r6, r0
 80116bc:	10ad      	asrs	r5, r5, #2
 80116be:	d03d      	beq.n	801173c <__pow5mult+0xa0>
 80116c0:	69fc      	ldr	r4, [r7, #28]
 80116c2:	b97c      	cbnz	r4, 80116e4 <__pow5mult+0x48>
 80116c4:	2010      	movs	r0, #16
 80116c6:	f7fe f8e3 	bl	800f890 <malloc>
 80116ca:	4602      	mov	r2, r0
 80116cc:	61f8      	str	r0, [r7, #28]
 80116ce:	b928      	cbnz	r0, 80116dc <__pow5mult+0x40>
 80116d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011748 <__pow5mult+0xac>)
 80116d2:	481e      	ldr	r0, [pc, #120]	@ (801174c <__pow5mult+0xb0>)
 80116d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80116d8:	f000 fa5a 	bl	8011b90 <__assert_func>
 80116dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80116e0:	6004      	str	r4, [r0, #0]
 80116e2:	60c4      	str	r4, [r0, #12]
 80116e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80116e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80116ec:	b94c      	cbnz	r4, 8011702 <__pow5mult+0x66>
 80116ee:	f240 2171 	movw	r1, #625	@ 0x271
 80116f2:	4638      	mov	r0, r7
 80116f4:	f7ff ff1a 	bl	801152c <__i2b>
 80116f8:	2300      	movs	r3, #0
 80116fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80116fe:	4604      	mov	r4, r0
 8011700:	6003      	str	r3, [r0, #0]
 8011702:	f04f 0900 	mov.w	r9, #0
 8011706:	07eb      	lsls	r3, r5, #31
 8011708:	d50a      	bpl.n	8011720 <__pow5mult+0x84>
 801170a:	4631      	mov	r1, r6
 801170c:	4622      	mov	r2, r4
 801170e:	4638      	mov	r0, r7
 8011710:	f7ff ff22 	bl	8011558 <__multiply>
 8011714:	4631      	mov	r1, r6
 8011716:	4680      	mov	r8, r0
 8011718:	4638      	mov	r0, r7
 801171a:	f7ff fe53 	bl	80113c4 <_Bfree>
 801171e:	4646      	mov	r6, r8
 8011720:	106d      	asrs	r5, r5, #1
 8011722:	d00b      	beq.n	801173c <__pow5mult+0xa0>
 8011724:	6820      	ldr	r0, [r4, #0]
 8011726:	b938      	cbnz	r0, 8011738 <__pow5mult+0x9c>
 8011728:	4622      	mov	r2, r4
 801172a:	4621      	mov	r1, r4
 801172c:	4638      	mov	r0, r7
 801172e:	f7ff ff13 	bl	8011558 <__multiply>
 8011732:	6020      	str	r0, [r4, #0]
 8011734:	f8c0 9000 	str.w	r9, [r0]
 8011738:	4604      	mov	r4, r0
 801173a:	e7e4      	b.n	8011706 <__pow5mult+0x6a>
 801173c:	4630      	mov	r0, r6
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	bf00      	nop
 8011744:	08012894 	.word	0x08012894
 8011748:	08012761 	.word	0x08012761
 801174c:	080127e1 	.word	0x080127e1

08011750 <__lshift>:
 8011750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011754:	460c      	mov	r4, r1
 8011756:	6849      	ldr	r1, [r1, #4]
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801175e:	68a3      	ldr	r3, [r4, #8]
 8011760:	4607      	mov	r7, r0
 8011762:	4691      	mov	r9, r2
 8011764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011768:	f108 0601 	add.w	r6, r8, #1
 801176c:	42b3      	cmp	r3, r6
 801176e:	db0b      	blt.n	8011788 <__lshift+0x38>
 8011770:	4638      	mov	r0, r7
 8011772:	f7ff fde7 	bl	8011344 <_Balloc>
 8011776:	4605      	mov	r5, r0
 8011778:	b948      	cbnz	r0, 801178e <__lshift+0x3e>
 801177a:	4602      	mov	r2, r0
 801177c:	4b28      	ldr	r3, [pc, #160]	@ (8011820 <__lshift+0xd0>)
 801177e:	4829      	ldr	r0, [pc, #164]	@ (8011824 <__lshift+0xd4>)
 8011780:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011784:	f000 fa04 	bl	8011b90 <__assert_func>
 8011788:	3101      	adds	r1, #1
 801178a:	005b      	lsls	r3, r3, #1
 801178c:	e7ee      	b.n	801176c <__lshift+0x1c>
 801178e:	2300      	movs	r3, #0
 8011790:	f100 0114 	add.w	r1, r0, #20
 8011794:	f100 0210 	add.w	r2, r0, #16
 8011798:	4618      	mov	r0, r3
 801179a:	4553      	cmp	r3, sl
 801179c:	db33      	blt.n	8011806 <__lshift+0xb6>
 801179e:	6920      	ldr	r0, [r4, #16]
 80117a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117a4:	f104 0314 	add.w	r3, r4, #20
 80117a8:	f019 091f 	ands.w	r9, r9, #31
 80117ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117b4:	d02b      	beq.n	801180e <__lshift+0xbe>
 80117b6:	f1c9 0e20 	rsb	lr, r9, #32
 80117ba:	468a      	mov	sl, r1
 80117bc:	2200      	movs	r2, #0
 80117be:	6818      	ldr	r0, [r3, #0]
 80117c0:	fa00 f009 	lsl.w	r0, r0, r9
 80117c4:	4310      	orrs	r0, r2
 80117c6:	f84a 0b04 	str.w	r0, [sl], #4
 80117ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ce:	459c      	cmp	ip, r3
 80117d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80117d4:	d8f3      	bhi.n	80117be <__lshift+0x6e>
 80117d6:	ebac 0304 	sub.w	r3, ip, r4
 80117da:	3b15      	subs	r3, #21
 80117dc:	f023 0303 	bic.w	r3, r3, #3
 80117e0:	3304      	adds	r3, #4
 80117e2:	f104 0015 	add.w	r0, r4, #21
 80117e6:	4560      	cmp	r0, ip
 80117e8:	bf88      	it	hi
 80117ea:	2304      	movhi	r3, #4
 80117ec:	50ca      	str	r2, [r1, r3]
 80117ee:	b10a      	cbz	r2, 80117f4 <__lshift+0xa4>
 80117f0:	f108 0602 	add.w	r6, r8, #2
 80117f4:	3e01      	subs	r6, #1
 80117f6:	4638      	mov	r0, r7
 80117f8:	612e      	str	r6, [r5, #16]
 80117fa:	4621      	mov	r1, r4
 80117fc:	f7ff fde2 	bl	80113c4 <_Bfree>
 8011800:	4628      	mov	r0, r5
 8011802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011806:	f842 0f04 	str.w	r0, [r2, #4]!
 801180a:	3301      	adds	r3, #1
 801180c:	e7c5      	b.n	801179a <__lshift+0x4a>
 801180e:	3904      	subs	r1, #4
 8011810:	f853 2b04 	ldr.w	r2, [r3], #4
 8011814:	f841 2f04 	str.w	r2, [r1, #4]!
 8011818:	459c      	cmp	ip, r3
 801181a:	d8f9      	bhi.n	8011810 <__lshift+0xc0>
 801181c:	e7ea      	b.n	80117f4 <__lshift+0xa4>
 801181e:	bf00      	nop
 8011820:	080127d0 	.word	0x080127d0
 8011824:	080127e1 	.word	0x080127e1

08011828 <__mcmp>:
 8011828:	690a      	ldr	r2, [r1, #16]
 801182a:	4603      	mov	r3, r0
 801182c:	6900      	ldr	r0, [r0, #16]
 801182e:	1a80      	subs	r0, r0, r2
 8011830:	b530      	push	{r4, r5, lr}
 8011832:	d10e      	bne.n	8011852 <__mcmp+0x2a>
 8011834:	3314      	adds	r3, #20
 8011836:	3114      	adds	r1, #20
 8011838:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801183c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011848:	4295      	cmp	r5, r2
 801184a:	d003      	beq.n	8011854 <__mcmp+0x2c>
 801184c:	d205      	bcs.n	801185a <__mcmp+0x32>
 801184e:	f04f 30ff 	mov.w	r0, #4294967295
 8011852:	bd30      	pop	{r4, r5, pc}
 8011854:	42a3      	cmp	r3, r4
 8011856:	d3f3      	bcc.n	8011840 <__mcmp+0x18>
 8011858:	e7fb      	b.n	8011852 <__mcmp+0x2a>
 801185a:	2001      	movs	r0, #1
 801185c:	e7f9      	b.n	8011852 <__mcmp+0x2a>
	...

08011860 <__mdiff>:
 8011860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	4689      	mov	r9, r1
 8011866:	4606      	mov	r6, r0
 8011868:	4611      	mov	r1, r2
 801186a:	4648      	mov	r0, r9
 801186c:	4614      	mov	r4, r2
 801186e:	f7ff ffdb 	bl	8011828 <__mcmp>
 8011872:	1e05      	subs	r5, r0, #0
 8011874:	d112      	bne.n	801189c <__mdiff+0x3c>
 8011876:	4629      	mov	r1, r5
 8011878:	4630      	mov	r0, r6
 801187a:	f7ff fd63 	bl	8011344 <_Balloc>
 801187e:	4602      	mov	r2, r0
 8011880:	b928      	cbnz	r0, 801188e <__mdiff+0x2e>
 8011882:	4b3f      	ldr	r3, [pc, #252]	@ (8011980 <__mdiff+0x120>)
 8011884:	f240 2137 	movw	r1, #567	@ 0x237
 8011888:	483e      	ldr	r0, [pc, #248]	@ (8011984 <__mdiff+0x124>)
 801188a:	f000 f981 	bl	8011b90 <__assert_func>
 801188e:	2301      	movs	r3, #1
 8011890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011894:	4610      	mov	r0, r2
 8011896:	b003      	add	sp, #12
 8011898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801189c:	bfbc      	itt	lt
 801189e:	464b      	movlt	r3, r9
 80118a0:	46a1      	movlt	r9, r4
 80118a2:	4630      	mov	r0, r6
 80118a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80118a8:	bfba      	itte	lt
 80118aa:	461c      	movlt	r4, r3
 80118ac:	2501      	movlt	r5, #1
 80118ae:	2500      	movge	r5, #0
 80118b0:	f7ff fd48 	bl	8011344 <_Balloc>
 80118b4:	4602      	mov	r2, r0
 80118b6:	b918      	cbnz	r0, 80118c0 <__mdiff+0x60>
 80118b8:	4b31      	ldr	r3, [pc, #196]	@ (8011980 <__mdiff+0x120>)
 80118ba:	f240 2145 	movw	r1, #581	@ 0x245
 80118be:	e7e3      	b.n	8011888 <__mdiff+0x28>
 80118c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80118c4:	6926      	ldr	r6, [r4, #16]
 80118c6:	60c5      	str	r5, [r0, #12]
 80118c8:	f109 0310 	add.w	r3, r9, #16
 80118cc:	f109 0514 	add.w	r5, r9, #20
 80118d0:	f104 0e14 	add.w	lr, r4, #20
 80118d4:	f100 0b14 	add.w	fp, r0, #20
 80118d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80118dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	46d9      	mov	r9, fp
 80118e4:	f04f 0c00 	mov.w	ip, #0
 80118e8:	9b01      	ldr	r3, [sp, #4]
 80118ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80118ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80118f2:	9301      	str	r3, [sp, #4]
 80118f4:	fa1f f38a 	uxth.w	r3, sl
 80118f8:	4619      	mov	r1, r3
 80118fa:	b283      	uxth	r3, r0
 80118fc:	1acb      	subs	r3, r1, r3
 80118fe:	0c00      	lsrs	r0, r0, #16
 8011900:	4463      	add	r3, ip
 8011902:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011906:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801190a:	b29b      	uxth	r3, r3
 801190c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011910:	4576      	cmp	r6, lr
 8011912:	f849 3b04 	str.w	r3, [r9], #4
 8011916:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801191a:	d8e5      	bhi.n	80118e8 <__mdiff+0x88>
 801191c:	1b33      	subs	r3, r6, r4
 801191e:	3b15      	subs	r3, #21
 8011920:	f023 0303 	bic.w	r3, r3, #3
 8011924:	3415      	adds	r4, #21
 8011926:	3304      	adds	r3, #4
 8011928:	42a6      	cmp	r6, r4
 801192a:	bf38      	it	cc
 801192c:	2304      	movcc	r3, #4
 801192e:	441d      	add	r5, r3
 8011930:	445b      	add	r3, fp
 8011932:	461e      	mov	r6, r3
 8011934:	462c      	mov	r4, r5
 8011936:	4544      	cmp	r4, r8
 8011938:	d30e      	bcc.n	8011958 <__mdiff+0xf8>
 801193a:	f108 0103 	add.w	r1, r8, #3
 801193e:	1b49      	subs	r1, r1, r5
 8011940:	f021 0103 	bic.w	r1, r1, #3
 8011944:	3d03      	subs	r5, #3
 8011946:	45a8      	cmp	r8, r5
 8011948:	bf38      	it	cc
 801194a:	2100      	movcc	r1, #0
 801194c:	440b      	add	r3, r1
 801194e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011952:	b191      	cbz	r1, 801197a <__mdiff+0x11a>
 8011954:	6117      	str	r7, [r2, #16]
 8011956:	e79d      	b.n	8011894 <__mdiff+0x34>
 8011958:	f854 1b04 	ldr.w	r1, [r4], #4
 801195c:	46e6      	mov	lr, ip
 801195e:	0c08      	lsrs	r0, r1, #16
 8011960:	fa1c fc81 	uxtah	ip, ip, r1
 8011964:	4471      	add	r1, lr
 8011966:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801196a:	b289      	uxth	r1, r1
 801196c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011970:	f846 1b04 	str.w	r1, [r6], #4
 8011974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011978:	e7dd      	b.n	8011936 <__mdiff+0xd6>
 801197a:	3f01      	subs	r7, #1
 801197c:	e7e7      	b.n	801194e <__mdiff+0xee>
 801197e:	bf00      	nop
 8011980:	080127d0 	.word	0x080127d0
 8011984:	080127e1 	.word	0x080127e1

08011988 <__d2b>:
 8011988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801198c:	460f      	mov	r7, r1
 801198e:	2101      	movs	r1, #1
 8011990:	ec59 8b10 	vmov	r8, r9, d0
 8011994:	4616      	mov	r6, r2
 8011996:	f7ff fcd5 	bl	8011344 <_Balloc>
 801199a:	4604      	mov	r4, r0
 801199c:	b930      	cbnz	r0, 80119ac <__d2b+0x24>
 801199e:	4602      	mov	r2, r0
 80119a0:	4b23      	ldr	r3, [pc, #140]	@ (8011a30 <__d2b+0xa8>)
 80119a2:	4824      	ldr	r0, [pc, #144]	@ (8011a34 <__d2b+0xac>)
 80119a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80119a8:	f000 f8f2 	bl	8011b90 <__assert_func>
 80119ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80119b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80119b4:	b10d      	cbz	r5, 80119ba <__d2b+0x32>
 80119b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	f1b8 0300 	subs.w	r3, r8, #0
 80119c0:	d023      	beq.n	8011a0a <__d2b+0x82>
 80119c2:	4668      	mov	r0, sp
 80119c4:	9300      	str	r3, [sp, #0]
 80119c6:	f7ff fd84 	bl	80114d2 <__lo0bits>
 80119ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80119ce:	b1d0      	cbz	r0, 8011a06 <__d2b+0x7e>
 80119d0:	f1c0 0320 	rsb	r3, r0, #32
 80119d4:	fa02 f303 	lsl.w	r3, r2, r3
 80119d8:	430b      	orrs	r3, r1
 80119da:	40c2      	lsrs	r2, r0
 80119dc:	6163      	str	r3, [r4, #20]
 80119de:	9201      	str	r2, [sp, #4]
 80119e0:	9b01      	ldr	r3, [sp, #4]
 80119e2:	61a3      	str	r3, [r4, #24]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	bf0c      	ite	eq
 80119e8:	2201      	moveq	r2, #1
 80119ea:	2202      	movne	r2, #2
 80119ec:	6122      	str	r2, [r4, #16]
 80119ee:	b1a5      	cbz	r5, 8011a1a <__d2b+0x92>
 80119f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80119f4:	4405      	add	r5, r0
 80119f6:	603d      	str	r5, [r7, #0]
 80119f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80119fc:	6030      	str	r0, [r6, #0]
 80119fe:	4620      	mov	r0, r4
 8011a00:	b003      	add	sp, #12
 8011a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a06:	6161      	str	r1, [r4, #20]
 8011a08:	e7ea      	b.n	80119e0 <__d2b+0x58>
 8011a0a:	a801      	add	r0, sp, #4
 8011a0c:	f7ff fd61 	bl	80114d2 <__lo0bits>
 8011a10:	9b01      	ldr	r3, [sp, #4]
 8011a12:	6163      	str	r3, [r4, #20]
 8011a14:	3020      	adds	r0, #32
 8011a16:	2201      	movs	r2, #1
 8011a18:	e7e8      	b.n	80119ec <__d2b+0x64>
 8011a1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011a22:	6038      	str	r0, [r7, #0]
 8011a24:	6918      	ldr	r0, [r3, #16]
 8011a26:	f7ff fd35 	bl	8011494 <__hi0bits>
 8011a2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a2e:	e7e5      	b.n	80119fc <__d2b+0x74>
 8011a30:	080127d0 	.word	0x080127d0
 8011a34:	080127e1 	.word	0x080127e1

08011a38 <__sflush_r>:
 8011a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a40:	0716      	lsls	r6, r2, #28
 8011a42:	4605      	mov	r5, r0
 8011a44:	460c      	mov	r4, r1
 8011a46:	d454      	bmi.n	8011af2 <__sflush_r+0xba>
 8011a48:	684b      	ldr	r3, [r1, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dc02      	bgt.n	8011a54 <__sflush_r+0x1c>
 8011a4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dd48      	ble.n	8011ae6 <__sflush_r+0xae>
 8011a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a56:	2e00      	cmp	r6, #0
 8011a58:	d045      	beq.n	8011ae6 <__sflush_r+0xae>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a60:	682f      	ldr	r7, [r5, #0]
 8011a62:	6a21      	ldr	r1, [r4, #32]
 8011a64:	602b      	str	r3, [r5, #0]
 8011a66:	d030      	beq.n	8011aca <__sflush_r+0x92>
 8011a68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	0759      	lsls	r1, r3, #29
 8011a6e:	d505      	bpl.n	8011a7c <__sflush_r+0x44>
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	1ad2      	subs	r2, r2, r3
 8011a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a76:	b10b      	cbz	r3, 8011a7c <__sflush_r+0x44>
 8011a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a7a:	1ad2      	subs	r2, r2, r3
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a80:	6a21      	ldr	r1, [r4, #32]
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b0      	blx	r6
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	d106      	bne.n	8011a9a <__sflush_r+0x62>
 8011a8c:	6829      	ldr	r1, [r5, #0]
 8011a8e:	291d      	cmp	r1, #29
 8011a90:	d82b      	bhi.n	8011aea <__sflush_r+0xb2>
 8011a92:	4a2a      	ldr	r2, [pc, #168]	@ (8011b3c <__sflush_r+0x104>)
 8011a94:	40ca      	lsrs	r2, r1
 8011a96:	07d6      	lsls	r6, r2, #31
 8011a98:	d527      	bpl.n	8011aea <__sflush_r+0xb2>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	6062      	str	r2, [r4, #4]
 8011a9e:	04d9      	lsls	r1, r3, #19
 8011aa0:	6922      	ldr	r2, [r4, #16]
 8011aa2:	6022      	str	r2, [r4, #0]
 8011aa4:	d504      	bpl.n	8011ab0 <__sflush_r+0x78>
 8011aa6:	1c42      	adds	r2, r0, #1
 8011aa8:	d101      	bne.n	8011aae <__sflush_r+0x76>
 8011aaa:	682b      	ldr	r3, [r5, #0]
 8011aac:	b903      	cbnz	r3, 8011ab0 <__sflush_r+0x78>
 8011aae:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ab2:	602f      	str	r7, [r5, #0]
 8011ab4:	b1b9      	cbz	r1, 8011ae6 <__sflush_r+0xae>
 8011ab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aba:	4299      	cmp	r1, r3
 8011abc:	d002      	beq.n	8011ac4 <__sflush_r+0x8c>
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7ff fbf6 	bl	80112b0 <_free_r>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ac8:	e00d      	b.n	8011ae6 <__sflush_r+0xae>
 8011aca:	2301      	movs	r3, #1
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	1c50      	adds	r0, r2, #1
 8011ad4:	d1c9      	bne.n	8011a6a <__sflush_r+0x32>
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d0c6      	beq.n	8011a6a <__sflush_r+0x32>
 8011adc:	2b1d      	cmp	r3, #29
 8011ade:	d001      	beq.n	8011ae4 <__sflush_r+0xac>
 8011ae0:	2b16      	cmp	r3, #22
 8011ae2:	d11e      	bne.n	8011b22 <__sflush_r+0xea>
 8011ae4:	602f      	str	r7, [r5, #0]
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	e022      	b.n	8011b30 <__sflush_r+0xf8>
 8011aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aee:	b21b      	sxth	r3, r3
 8011af0:	e01b      	b.n	8011b2a <__sflush_r+0xf2>
 8011af2:	690f      	ldr	r7, [r1, #16]
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	d0f6      	beq.n	8011ae6 <__sflush_r+0xae>
 8011af8:	0793      	lsls	r3, r2, #30
 8011afa:	680e      	ldr	r6, [r1, #0]
 8011afc:	bf08      	it	eq
 8011afe:	694b      	ldreq	r3, [r1, #20]
 8011b00:	600f      	str	r7, [r1, #0]
 8011b02:	bf18      	it	ne
 8011b04:	2300      	movne	r3, #0
 8011b06:	eba6 0807 	sub.w	r8, r6, r7
 8011b0a:	608b      	str	r3, [r1, #8]
 8011b0c:	f1b8 0f00 	cmp.w	r8, #0
 8011b10:	dde9      	ble.n	8011ae6 <__sflush_r+0xae>
 8011b12:	6a21      	ldr	r1, [r4, #32]
 8011b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b16:	4643      	mov	r3, r8
 8011b18:	463a      	mov	r2, r7
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	47b0      	blx	r6
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	dc08      	bgt.n	8011b34 <__sflush_r+0xfc>
 8011b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	4407      	add	r7, r0
 8011b36:	eba8 0800 	sub.w	r8, r8, r0
 8011b3a:	e7e7      	b.n	8011b0c <__sflush_r+0xd4>
 8011b3c:	20400001 	.word	0x20400001

08011b40 <_fflush_r>:
 8011b40:	b538      	push	{r3, r4, r5, lr}
 8011b42:	690b      	ldr	r3, [r1, #16]
 8011b44:	4605      	mov	r5, r0
 8011b46:	460c      	mov	r4, r1
 8011b48:	b913      	cbnz	r3, 8011b50 <_fflush_r+0x10>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	b118      	cbz	r0, 8011b5a <_fflush_r+0x1a>
 8011b52:	6a03      	ldr	r3, [r0, #32]
 8011b54:	b90b      	cbnz	r3, 8011b5a <_fflush_r+0x1a>
 8011b56:	f7fe fc3b 	bl	80103d0 <__sinit>
 8011b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0f3      	beq.n	8011b4a <_fflush_r+0xa>
 8011b62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b64:	07d0      	lsls	r0, r2, #31
 8011b66:	d404      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b68:	0599      	lsls	r1, r3, #22
 8011b6a:	d402      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b6e:	f7fe fd36 	bl	80105de <__retarget_lock_acquire_recursive>
 8011b72:	4628      	mov	r0, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7ff ff5f 	bl	8011a38 <__sflush_r>
 8011b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b7c:	07da      	lsls	r2, r3, #31
 8011b7e:	4605      	mov	r5, r0
 8011b80:	d4e4      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d4e1      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f7fe fd29 	bl	80105e0 <__retarget_lock_release_recursive>
 8011b8e:	e7dd      	b.n	8011b4c <_fflush_r+0xc>

08011b90 <__assert_func>:
 8011b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b92:	4614      	mov	r4, r2
 8011b94:	461a      	mov	r2, r3
 8011b96:	4b09      	ldr	r3, [pc, #36]	@ (8011bbc <__assert_func+0x2c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	68d8      	ldr	r0, [r3, #12]
 8011b9e:	b14c      	cbz	r4, 8011bb4 <__assert_func+0x24>
 8011ba0:	4b07      	ldr	r3, [pc, #28]	@ (8011bc0 <__assert_func+0x30>)
 8011ba2:	9100      	str	r1, [sp, #0]
 8011ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ba8:	4906      	ldr	r1, [pc, #24]	@ (8011bc4 <__assert_func+0x34>)
 8011baa:	462b      	mov	r3, r5
 8011bac:	f000 f842 	bl	8011c34 <fiprintf>
 8011bb0:	f000 f852 	bl	8011c58 <abort>
 8011bb4:	4b04      	ldr	r3, [pc, #16]	@ (8011bc8 <__assert_func+0x38>)
 8011bb6:	461c      	mov	r4, r3
 8011bb8:	e7f3      	b.n	8011ba2 <__assert_func+0x12>
 8011bba:	bf00      	nop
 8011bbc:	20000118 	.word	0x20000118
 8011bc0:	08012844 	.word	0x08012844
 8011bc4:	08012851 	.word	0x08012851
 8011bc8:	0801287f 	.word	0x0801287f

08011bcc <_calloc_r>:
 8011bcc:	b570      	push	{r4, r5, r6, lr}
 8011bce:	fba1 5402 	umull	r5, r4, r1, r2
 8011bd2:	b934      	cbnz	r4, 8011be2 <_calloc_r+0x16>
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	f7fd fe8d 	bl	800f8f4 <_malloc_r>
 8011bda:	4606      	mov	r6, r0
 8011bdc:	b928      	cbnz	r0, 8011bea <_calloc_r+0x1e>
 8011bde:	4630      	mov	r0, r6
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	220c      	movs	r2, #12
 8011be4:	6002      	str	r2, [r0, #0]
 8011be6:	2600      	movs	r6, #0
 8011be8:	e7f9      	b.n	8011bde <_calloc_r+0x12>
 8011bea:	462a      	mov	r2, r5
 8011bec:	4621      	mov	r1, r4
 8011bee:	f7fe fc68 	bl	80104c2 <memset>
 8011bf2:	e7f4      	b.n	8011bde <_calloc_r+0x12>

08011bf4 <__ascii_mbtowc>:
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	b901      	cbnz	r1, 8011bfa <__ascii_mbtowc+0x6>
 8011bf8:	a901      	add	r1, sp, #4
 8011bfa:	b142      	cbz	r2, 8011c0e <__ascii_mbtowc+0x1a>
 8011bfc:	b14b      	cbz	r3, 8011c12 <__ascii_mbtowc+0x1e>
 8011bfe:	7813      	ldrb	r3, [r2, #0]
 8011c00:	600b      	str	r3, [r1, #0]
 8011c02:	7812      	ldrb	r2, [r2, #0]
 8011c04:	1e10      	subs	r0, r2, #0
 8011c06:	bf18      	it	ne
 8011c08:	2001      	movne	r0, #1
 8011c0a:	b002      	add	sp, #8
 8011c0c:	4770      	bx	lr
 8011c0e:	4610      	mov	r0, r2
 8011c10:	e7fb      	b.n	8011c0a <__ascii_mbtowc+0x16>
 8011c12:	f06f 0001 	mvn.w	r0, #1
 8011c16:	e7f8      	b.n	8011c0a <__ascii_mbtowc+0x16>

08011c18 <__ascii_wctomb>:
 8011c18:	4603      	mov	r3, r0
 8011c1a:	4608      	mov	r0, r1
 8011c1c:	b141      	cbz	r1, 8011c30 <__ascii_wctomb+0x18>
 8011c1e:	2aff      	cmp	r2, #255	@ 0xff
 8011c20:	d904      	bls.n	8011c2c <__ascii_wctomb+0x14>
 8011c22:	228a      	movs	r2, #138	@ 0x8a
 8011c24:	601a      	str	r2, [r3, #0]
 8011c26:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2a:	4770      	bx	lr
 8011c2c:	700a      	strb	r2, [r1, #0]
 8011c2e:	2001      	movs	r0, #1
 8011c30:	4770      	bx	lr
	...

08011c34 <fiprintf>:
 8011c34:	b40e      	push	{r1, r2, r3}
 8011c36:	b503      	push	{r0, r1, lr}
 8011c38:	4601      	mov	r1, r0
 8011c3a:	ab03      	add	r3, sp, #12
 8011c3c:	4805      	ldr	r0, [pc, #20]	@ (8011c54 <fiprintf+0x20>)
 8011c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c42:	6800      	ldr	r0, [r0, #0]
 8011c44:	9301      	str	r3, [sp, #4]
 8011c46:	f000 f837 	bl	8011cb8 <_vfiprintf_r>
 8011c4a:	b002      	add	sp, #8
 8011c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c50:	b003      	add	sp, #12
 8011c52:	4770      	bx	lr
 8011c54:	20000118 	.word	0x20000118

08011c58 <abort>:
 8011c58:	b508      	push	{r3, lr}
 8011c5a:	2006      	movs	r0, #6
 8011c5c:	f000 fa00 	bl	8012060 <raise>
 8011c60:	2001      	movs	r0, #1
 8011c62:	f7f1 fe63 	bl	800392c <_exit>

08011c66 <__sfputc_r>:
 8011c66:	6893      	ldr	r3, [r2, #8]
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	b410      	push	{r4}
 8011c6e:	6093      	str	r3, [r2, #8]
 8011c70:	da08      	bge.n	8011c84 <__sfputc_r+0x1e>
 8011c72:	6994      	ldr	r4, [r2, #24]
 8011c74:	42a3      	cmp	r3, r4
 8011c76:	db01      	blt.n	8011c7c <__sfputc_r+0x16>
 8011c78:	290a      	cmp	r1, #10
 8011c7a:	d103      	bne.n	8011c84 <__sfputc_r+0x1e>
 8011c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c80:	f000 b932 	b.w	8011ee8 <__swbuf_r>
 8011c84:	6813      	ldr	r3, [r2, #0]
 8011c86:	1c58      	adds	r0, r3, #1
 8011c88:	6010      	str	r0, [r2, #0]
 8011c8a:	7019      	strb	r1, [r3, #0]
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <__sfputs_r>:
 8011c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c96:	4606      	mov	r6, r0
 8011c98:	460f      	mov	r7, r1
 8011c9a:	4614      	mov	r4, r2
 8011c9c:	18d5      	adds	r5, r2, r3
 8011c9e:	42ac      	cmp	r4, r5
 8011ca0:	d101      	bne.n	8011ca6 <__sfputs_r+0x12>
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	e007      	b.n	8011cb6 <__sfputs_r+0x22>
 8011ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011caa:	463a      	mov	r2, r7
 8011cac:	4630      	mov	r0, r6
 8011cae:	f7ff ffda 	bl	8011c66 <__sfputc_r>
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	d1f3      	bne.n	8011c9e <__sfputs_r+0xa>
 8011cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cb8 <_vfiprintf_r>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	b09d      	sub	sp, #116	@ 0x74
 8011cc0:	4614      	mov	r4, r2
 8011cc2:	4698      	mov	r8, r3
 8011cc4:	4606      	mov	r6, r0
 8011cc6:	b118      	cbz	r0, 8011cd0 <_vfiprintf_r+0x18>
 8011cc8:	6a03      	ldr	r3, [r0, #32]
 8011cca:	b90b      	cbnz	r3, 8011cd0 <_vfiprintf_r+0x18>
 8011ccc:	f7fe fb80 	bl	80103d0 <__sinit>
 8011cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cd2:	07d9      	lsls	r1, r3, #31
 8011cd4:	d405      	bmi.n	8011ce2 <_vfiprintf_r+0x2a>
 8011cd6:	89ab      	ldrh	r3, [r5, #12]
 8011cd8:	059a      	lsls	r2, r3, #22
 8011cda:	d402      	bmi.n	8011ce2 <_vfiprintf_r+0x2a>
 8011cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cde:	f7fe fc7e 	bl	80105de <__retarget_lock_acquire_recursive>
 8011ce2:	89ab      	ldrh	r3, [r5, #12]
 8011ce4:	071b      	lsls	r3, r3, #28
 8011ce6:	d501      	bpl.n	8011cec <_vfiprintf_r+0x34>
 8011ce8:	692b      	ldr	r3, [r5, #16]
 8011cea:	b99b      	cbnz	r3, 8011d14 <_vfiprintf_r+0x5c>
 8011cec:	4629      	mov	r1, r5
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f000 f938 	bl	8011f64 <__swsetup_r>
 8011cf4:	b170      	cbz	r0, 8011d14 <_vfiprintf_r+0x5c>
 8011cf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cf8:	07dc      	lsls	r4, r3, #31
 8011cfa:	d504      	bpl.n	8011d06 <_vfiprintf_r+0x4e>
 8011cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011d00:	b01d      	add	sp, #116	@ 0x74
 8011d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d06:	89ab      	ldrh	r3, [r5, #12]
 8011d08:	0598      	lsls	r0, r3, #22
 8011d0a:	d4f7      	bmi.n	8011cfc <_vfiprintf_r+0x44>
 8011d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d0e:	f7fe fc67 	bl	80105e0 <__retarget_lock_release_recursive>
 8011d12:	e7f3      	b.n	8011cfc <_vfiprintf_r+0x44>
 8011d14:	2300      	movs	r3, #0
 8011d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d18:	2320      	movs	r3, #32
 8011d1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d22:	2330      	movs	r3, #48	@ 0x30
 8011d24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ed4 <_vfiprintf_r+0x21c>
 8011d28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d2c:	f04f 0901 	mov.w	r9, #1
 8011d30:	4623      	mov	r3, r4
 8011d32:	469a      	mov	sl, r3
 8011d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d38:	b10a      	cbz	r2, 8011d3e <_vfiprintf_r+0x86>
 8011d3a:	2a25      	cmp	r2, #37	@ 0x25
 8011d3c:	d1f9      	bne.n	8011d32 <_vfiprintf_r+0x7a>
 8011d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d42:	d00b      	beq.n	8011d5c <_vfiprintf_r+0xa4>
 8011d44:	465b      	mov	r3, fp
 8011d46:	4622      	mov	r2, r4
 8011d48:	4629      	mov	r1, r5
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	f7ff ffa2 	bl	8011c94 <__sfputs_r>
 8011d50:	3001      	adds	r0, #1
 8011d52:	f000 80a7 	beq.w	8011ea4 <_vfiprintf_r+0x1ec>
 8011d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d58:	445a      	add	r2, fp
 8011d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f000 809f 	beq.w	8011ea4 <_vfiprintf_r+0x1ec>
 8011d66:	2300      	movs	r3, #0
 8011d68:	f04f 32ff 	mov.w	r2, #4294967295
 8011d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d70:	f10a 0a01 	add.w	sl, sl, #1
 8011d74:	9304      	str	r3, [sp, #16]
 8011d76:	9307      	str	r3, [sp, #28]
 8011d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d7e:	4654      	mov	r4, sl
 8011d80:	2205      	movs	r2, #5
 8011d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d86:	4853      	ldr	r0, [pc, #332]	@ (8011ed4 <_vfiprintf_r+0x21c>)
 8011d88:	f7ee fa4a 	bl	8000220 <memchr>
 8011d8c:	9a04      	ldr	r2, [sp, #16]
 8011d8e:	b9d8      	cbnz	r0, 8011dc8 <_vfiprintf_r+0x110>
 8011d90:	06d1      	lsls	r1, r2, #27
 8011d92:	bf44      	itt	mi
 8011d94:	2320      	movmi	r3, #32
 8011d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d9a:	0713      	lsls	r3, r2, #28
 8011d9c:	bf44      	itt	mi
 8011d9e:	232b      	movmi	r3, #43	@ 0x2b
 8011da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011da4:	f89a 3000 	ldrb.w	r3, [sl]
 8011da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011daa:	d015      	beq.n	8011dd8 <_vfiprintf_r+0x120>
 8011dac:	9a07      	ldr	r2, [sp, #28]
 8011dae:	4654      	mov	r4, sl
 8011db0:	2000      	movs	r0, #0
 8011db2:	f04f 0c0a 	mov.w	ip, #10
 8011db6:	4621      	mov	r1, r4
 8011db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dbc:	3b30      	subs	r3, #48	@ 0x30
 8011dbe:	2b09      	cmp	r3, #9
 8011dc0:	d94b      	bls.n	8011e5a <_vfiprintf_r+0x1a2>
 8011dc2:	b1b0      	cbz	r0, 8011df2 <_vfiprintf_r+0x13a>
 8011dc4:	9207      	str	r2, [sp, #28]
 8011dc6:	e014      	b.n	8011df2 <_vfiprintf_r+0x13a>
 8011dc8:	eba0 0308 	sub.w	r3, r0, r8
 8011dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	9304      	str	r3, [sp, #16]
 8011dd4:	46a2      	mov	sl, r4
 8011dd6:	e7d2      	b.n	8011d7e <_vfiprintf_r+0xc6>
 8011dd8:	9b03      	ldr	r3, [sp, #12]
 8011dda:	1d19      	adds	r1, r3, #4
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	9103      	str	r1, [sp, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	bfbb      	ittet	lt
 8011de4:	425b      	neglt	r3, r3
 8011de6:	f042 0202 	orrlt.w	r2, r2, #2
 8011dea:	9307      	strge	r3, [sp, #28]
 8011dec:	9307      	strlt	r3, [sp, #28]
 8011dee:	bfb8      	it	lt
 8011df0:	9204      	strlt	r2, [sp, #16]
 8011df2:	7823      	ldrb	r3, [r4, #0]
 8011df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011df6:	d10a      	bne.n	8011e0e <_vfiprintf_r+0x156>
 8011df8:	7863      	ldrb	r3, [r4, #1]
 8011dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dfc:	d132      	bne.n	8011e64 <_vfiprintf_r+0x1ac>
 8011dfe:	9b03      	ldr	r3, [sp, #12]
 8011e00:	1d1a      	adds	r2, r3, #4
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	9203      	str	r2, [sp, #12]
 8011e06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e0a:	3402      	adds	r4, #2
 8011e0c:	9305      	str	r3, [sp, #20]
 8011e0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ee4 <_vfiprintf_r+0x22c>
 8011e12:	7821      	ldrb	r1, [r4, #0]
 8011e14:	2203      	movs	r2, #3
 8011e16:	4650      	mov	r0, sl
 8011e18:	f7ee fa02 	bl	8000220 <memchr>
 8011e1c:	b138      	cbz	r0, 8011e2e <_vfiprintf_r+0x176>
 8011e1e:	9b04      	ldr	r3, [sp, #16]
 8011e20:	eba0 000a 	sub.w	r0, r0, sl
 8011e24:	2240      	movs	r2, #64	@ 0x40
 8011e26:	4082      	lsls	r2, r0
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	3401      	adds	r4, #1
 8011e2c:	9304      	str	r3, [sp, #16]
 8011e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e32:	4829      	ldr	r0, [pc, #164]	@ (8011ed8 <_vfiprintf_r+0x220>)
 8011e34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e38:	2206      	movs	r2, #6
 8011e3a:	f7ee f9f1 	bl	8000220 <memchr>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d03f      	beq.n	8011ec2 <_vfiprintf_r+0x20a>
 8011e42:	4b26      	ldr	r3, [pc, #152]	@ (8011edc <_vfiprintf_r+0x224>)
 8011e44:	bb1b      	cbnz	r3, 8011e8e <_vfiprintf_r+0x1d6>
 8011e46:	9b03      	ldr	r3, [sp, #12]
 8011e48:	3307      	adds	r3, #7
 8011e4a:	f023 0307 	bic.w	r3, r3, #7
 8011e4e:	3308      	adds	r3, #8
 8011e50:	9303      	str	r3, [sp, #12]
 8011e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e54:	443b      	add	r3, r7
 8011e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e58:	e76a      	b.n	8011d30 <_vfiprintf_r+0x78>
 8011e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e5e:	460c      	mov	r4, r1
 8011e60:	2001      	movs	r0, #1
 8011e62:	e7a8      	b.n	8011db6 <_vfiprintf_r+0xfe>
 8011e64:	2300      	movs	r3, #0
 8011e66:	3401      	adds	r4, #1
 8011e68:	9305      	str	r3, [sp, #20]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	f04f 0c0a 	mov.w	ip, #10
 8011e70:	4620      	mov	r0, r4
 8011e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e76:	3a30      	subs	r2, #48	@ 0x30
 8011e78:	2a09      	cmp	r2, #9
 8011e7a:	d903      	bls.n	8011e84 <_vfiprintf_r+0x1cc>
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d0c6      	beq.n	8011e0e <_vfiprintf_r+0x156>
 8011e80:	9105      	str	r1, [sp, #20]
 8011e82:	e7c4      	b.n	8011e0e <_vfiprintf_r+0x156>
 8011e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e88:	4604      	mov	r4, r0
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e7f0      	b.n	8011e70 <_vfiprintf_r+0x1b8>
 8011e8e:	ab03      	add	r3, sp, #12
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	462a      	mov	r2, r5
 8011e94:	4b12      	ldr	r3, [pc, #72]	@ (8011ee0 <_vfiprintf_r+0x228>)
 8011e96:	a904      	add	r1, sp, #16
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f7fd fe57 	bl	800fb4c <_printf_float>
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	1c78      	adds	r0, r7, #1
 8011ea2:	d1d6      	bne.n	8011e52 <_vfiprintf_r+0x19a>
 8011ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ea6:	07d9      	lsls	r1, r3, #31
 8011ea8:	d405      	bmi.n	8011eb6 <_vfiprintf_r+0x1fe>
 8011eaa:	89ab      	ldrh	r3, [r5, #12]
 8011eac:	059a      	lsls	r2, r3, #22
 8011eae:	d402      	bmi.n	8011eb6 <_vfiprintf_r+0x1fe>
 8011eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eb2:	f7fe fb95 	bl	80105e0 <__retarget_lock_release_recursive>
 8011eb6:	89ab      	ldrh	r3, [r5, #12]
 8011eb8:	065b      	lsls	r3, r3, #25
 8011eba:	f53f af1f 	bmi.w	8011cfc <_vfiprintf_r+0x44>
 8011ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ec0:	e71e      	b.n	8011d00 <_vfiprintf_r+0x48>
 8011ec2:	ab03      	add	r3, sp, #12
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	462a      	mov	r2, r5
 8011ec8:	4b05      	ldr	r3, [pc, #20]	@ (8011ee0 <_vfiprintf_r+0x228>)
 8011eca:	a904      	add	r1, sp, #16
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f7fe f8d5 	bl	801007c <_printf_i>
 8011ed2:	e7e4      	b.n	8011e9e <_vfiprintf_r+0x1e6>
 8011ed4:	08012880 	.word	0x08012880
 8011ed8:	0801288a 	.word	0x0801288a
 8011edc:	0800fb4d 	.word	0x0800fb4d
 8011ee0:	08011c95 	.word	0x08011c95
 8011ee4:	08012886 	.word	0x08012886

08011ee8 <__swbuf_r>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	460e      	mov	r6, r1
 8011eec:	4614      	mov	r4, r2
 8011eee:	4605      	mov	r5, r0
 8011ef0:	b118      	cbz	r0, 8011efa <__swbuf_r+0x12>
 8011ef2:	6a03      	ldr	r3, [r0, #32]
 8011ef4:	b90b      	cbnz	r3, 8011efa <__swbuf_r+0x12>
 8011ef6:	f7fe fa6b 	bl	80103d0 <__sinit>
 8011efa:	69a3      	ldr	r3, [r4, #24]
 8011efc:	60a3      	str	r3, [r4, #8]
 8011efe:	89a3      	ldrh	r3, [r4, #12]
 8011f00:	071a      	lsls	r2, r3, #28
 8011f02:	d501      	bpl.n	8011f08 <__swbuf_r+0x20>
 8011f04:	6923      	ldr	r3, [r4, #16]
 8011f06:	b943      	cbnz	r3, 8011f1a <__swbuf_r+0x32>
 8011f08:	4621      	mov	r1, r4
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f000 f82a 	bl	8011f64 <__swsetup_r>
 8011f10:	b118      	cbz	r0, 8011f1a <__swbuf_r+0x32>
 8011f12:	f04f 37ff 	mov.w	r7, #4294967295
 8011f16:	4638      	mov	r0, r7
 8011f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	6922      	ldr	r2, [r4, #16]
 8011f1e:	1a98      	subs	r0, r3, r2
 8011f20:	6963      	ldr	r3, [r4, #20]
 8011f22:	b2f6      	uxtb	r6, r6
 8011f24:	4283      	cmp	r3, r0
 8011f26:	4637      	mov	r7, r6
 8011f28:	dc05      	bgt.n	8011f36 <__swbuf_r+0x4e>
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f7ff fe07 	bl	8011b40 <_fflush_r>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d1ed      	bne.n	8011f12 <__swbuf_r+0x2a>
 8011f36:	68a3      	ldr	r3, [r4, #8]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	60a3      	str	r3, [r4, #8]
 8011f3c:	6823      	ldr	r3, [r4, #0]
 8011f3e:	1c5a      	adds	r2, r3, #1
 8011f40:	6022      	str	r2, [r4, #0]
 8011f42:	701e      	strb	r6, [r3, #0]
 8011f44:	6962      	ldr	r2, [r4, #20]
 8011f46:	1c43      	adds	r3, r0, #1
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d004      	beq.n	8011f56 <__swbuf_r+0x6e>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	07db      	lsls	r3, r3, #31
 8011f50:	d5e1      	bpl.n	8011f16 <__swbuf_r+0x2e>
 8011f52:	2e0a      	cmp	r6, #10
 8011f54:	d1df      	bne.n	8011f16 <__swbuf_r+0x2e>
 8011f56:	4621      	mov	r1, r4
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f7ff fdf1 	bl	8011b40 <_fflush_r>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d0d9      	beq.n	8011f16 <__swbuf_r+0x2e>
 8011f62:	e7d6      	b.n	8011f12 <__swbuf_r+0x2a>

08011f64 <__swsetup_r>:
 8011f64:	b538      	push	{r3, r4, r5, lr}
 8011f66:	4b29      	ldr	r3, [pc, #164]	@ (801200c <__swsetup_r+0xa8>)
 8011f68:	4605      	mov	r5, r0
 8011f6a:	6818      	ldr	r0, [r3, #0]
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	b118      	cbz	r0, 8011f78 <__swsetup_r+0x14>
 8011f70:	6a03      	ldr	r3, [r0, #32]
 8011f72:	b90b      	cbnz	r3, 8011f78 <__swsetup_r+0x14>
 8011f74:	f7fe fa2c 	bl	80103d0 <__sinit>
 8011f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f7c:	0719      	lsls	r1, r3, #28
 8011f7e:	d422      	bmi.n	8011fc6 <__swsetup_r+0x62>
 8011f80:	06da      	lsls	r2, r3, #27
 8011f82:	d407      	bmi.n	8011f94 <__swsetup_r+0x30>
 8011f84:	2209      	movs	r2, #9
 8011f86:	602a      	str	r2, [r5, #0]
 8011f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f8c:	81a3      	strh	r3, [r4, #12]
 8011f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f92:	e033      	b.n	8011ffc <__swsetup_r+0x98>
 8011f94:	0758      	lsls	r0, r3, #29
 8011f96:	d512      	bpl.n	8011fbe <__swsetup_r+0x5a>
 8011f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f9a:	b141      	cbz	r1, 8011fae <__swsetup_r+0x4a>
 8011f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fa0:	4299      	cmp	r1, r3
 8011fa2:	d002      	beq.n	8011faa <__swsetup_r+0x46>
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f7ff f983 	bl	80112b0 <_free_r>
 8011faa:	2300      	movs	r3, #0
 8011fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011fb4:	81a3      	strh	r3, [r4, #12]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	6063      	str	r3, [r4, #4]
 8011fba:	6923      	ldr	r3, [r4, #16]
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	89a3      	ldrh	r3, [r4, #12]
 8011fc0:	f043 0308 	orr.w	r3, r3, #8
 8011fc4:	81a3      	strh	r3, [r4, #12]
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	b94b      	cbnz	r3, 8011fde <__swsetup_r+0x7a>
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fd4:	d003      	beq.n	8011fde <__swsetup_r+0x7a>
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f000 f883 	bl	80120e4 <__smakebuf_r>
 8011fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fe2:	f013 0201 	ands.w	r2, r3, #1
 8011fe6:	d00a      	beq.n	8011ffe <__swsetup_r+0x9a>
 8011fe8:	2200      	movs	r2, #0
 8011fea:	60a2      	str	r2, [r4, #8]
 8011fec:	6962      	ldr	r2, [r4, #20]
 8011fee:	4252      	negs	r2, r2
 8011ff0:	61a2      	str	r2, [r4, #24]
 8011ff2:	6922      	ldr	r2, [r4, #16]
 8011ff4:	b942      	cbnz	r2, 8012008 <__swsetup_r+0xa4>
 8011ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ffa:	d1c5      	bne.n	8011f88 <__swsetup_r+0x24>
 8011ffc:	bd38      	pop	{r3, r4, r5, pc}
 8011ffe:	0799      	lsls	r1, r3, #30
 8012000:	bf58      	it	pl
 8012002:	6962      	ldrpl	r2, [r4, #20]
 8012004:	60a2      	str	r2, [r4, #8]
 8012006:	e7f4      	b.n	8011ff2 <__swsetup_r+0x8e>
 8012008:	2000      	movs	r0, #0
 801200a:	e7f7      	b.n	8011ffc <__swsetup_r+0x98>
 801200c:	20000118 	.word	0x20000118

08012010 <_raise_r>:
 8012010:	291f      	cmp	r1, #31
 8012012:	b538      	push	{r3, r4, r5, lr}
 8012014:	4605      	mov	r5, r0
 8012016:	460c      	mov	r4, r1
 8012018:	d904      	bls.n	8012024 <_raise_r+0x14>
 801201a:	2316      	movs	r3, #22
 801201c:	6003      	str	r3, [r0, #0]
 801201e:	f04f 30ff 	mov.w	r0, #4294967295
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012026:	b112      	cbz	r2, 801202e <_raise_r+0x1e>
 8012028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801202c:	b94b      	cbnz	r3, 8012042 <_raise_r+0x32>
 801202e:	4628      	mov	r0, r5
 8012030:	f000 f830 	bl	8012094 <_getpid_r>
 8012034:	4622      	mov	r2, r4
 8012036:	4601      	mov	r1, r0
 8012038:	4628      	mov	r0, r5
 801203a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801203e:	f000 b817 	b.w	8012070 <_kill_r>
 8012042:	2b01      	cmp	r3, #1
 8012044:	d00a      	beq.n	801205c <_raise_r+0x4c>
 8012046:	1c59      	adds	r1, r3, #1
 8012048:	d103      	bne.n	8012052 <_raise_r+0x42>
 801204a:	2316      	movs	r3, #22
 801204c:	6003      	str	r3, [r0, #0]
 801204e:	2001      	movs	r0, #1
 8012050:	e7e7      	b.n	8012022 <_raise_r+0x12>
 8012052:	2100      	movs	r1, #0
 8012054:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012058:	4620      	mov	r0, r4
 801205a:	4798      	blx	r3
 801205c:	2000      	movs	r0, #0
 801205e:	e7e0      	b.n	8012022 <_raise_r+0x12>

08012060 <raise>:
 8012060:	4b02      	ldr	r3, [pc, #8]	@ (801206c <raise+0xc>)
 8012062:	4601      	mov	r1, r0
 8012064:	6818      	ldr	r0, [r3, #0]
 8012066:	f7ff bfd3 	b.w	8012010 <_raise_r>
 801206a:	bf00      	nop
 801206c:	20000118 	.word	0x20000118

08012070 <_kill_r>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	4d07      	ldr	r5, [pc, #28]	@ (8012090 <_kill_r+0x20>)
 8012074:	2300      	movs	r3, #0
 8012076:	4604      	mov	r4, r0
 8012078:	4608      	mov	r0, r1
 801207a:	4611      	mov	r1, r2
 801207c:	602b      	str	r3, [r5, #0]
 801207e:	f7f1 fc45 	bl	800390c <_kill>
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d102      	bne.n	801208c <_kill_r+0x1c>
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	b103      	cbz	r3, 801208c <_kill_r+0x1c>
 801208a:	6023      	str	r3, [r4, #0]
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	bf00      	nop
 8012090:	200023c4 	.word	0x200023c4

08012094 <_getpid_r>:
 8012094:	f7f1 bc32 	b.w	80038fc <_getpid>

08012098 <__swhatbuf_r>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	460c      	mov	r4, r1
 801209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a0:	2900      	cmp	r1, #0
 80120a2:	b096      	sub	sp, #88	@ 0x58
 80120a4:	4615      	mov	r5, r2
 80120a6:	461e      	mov	r6, r3
 80120a8:	da0d      	bge.n	80120c6 <__swhatbuf_r+0x2e>
 80120aa:	89a3      	ldrh	r3, [r4, #12]
 80120ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120b0:	f04f 0100 	mov.w	r1, #0
 80120b4:	bf14      	ite	ne
 80120b6:	2340      	movne	r3, #64	@ 0x40
 80120b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120bc:	2000      	movs	r0, #0
 80120be:	6031      	str	r1, [r6, #0]
 80120c0:	602b      	str	r3, [r5, #0]
 80120c2:	b016      	add	sp, #88	@ 0x58
 80120c4:	bd70      	pop	{r4, r5, r6, pc}
 80120c6:	466a      	mov	r2, sp
 80120c8:	f000 f848 	bl	801215c <_fstat_r>
 80120cc:	2800      	cmp	r0, #0
 80120ce:	dbec      	blt.n	80120aa <__swhatbuf_r+0x12>
 80120d0:	9901      	ldr	r1, [sp, #4]
 80120d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120da:	4259      	negs	r1, r3
 80120dc:	4159      	adcs	r1, r3
 80120de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120e2:	e7eb      	b.n	80120bc <__swhatbuf_r+0x24>

080120e4 <__smakebuf_r>:
 80120e4:	898b      	ldrh	r3, [r1, #12]
 80120e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120e8:	079d      	lsls	r5, r3, #30
 80120ea:	4606      	mov	r6, r0
 80120ec:	460c      	mov	r4, r1
 80120ee:	d507      	bpl.n	8012100 <__smakebuf_r+0x1c>
 80120f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	6123      	str	r3, [r4, #16]
 80120f8:	2301      	movs	r3, #1
 80120fa:	6163      	str	r3, [r4, #20]
 80120fc:	b003      	add	sp, #12
 80120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012100:	ab01      	add	r3, sp, #4
 8012102:	466a      	mov	r2, sp
 8012104:	f7ff ffc8 	bl	8012098 <__swhatbuf_r>
 8012108:	9f00      	ldr	r7, [sp, #0]
 801210a:	4605      	mov	r5, r0
 801210c:	4639      	mov	r1, r7
 801210e:	4630      	mov	r0, r6
 8012110:	f7fd fbf0 	bl	800f8f4 <_malloc_r>
 8012114:	b948      	cbnz	r0, 801212a <__smakebuf_r+0x46>
 8012116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801211a:	059a      	lsls	r2, r3, #22
 801211c:	d4ee      	bmi.n	80120fc <__smakebuf_r+0x18>
 801211e:	f023 0303 	bic.w	r3, r3, #3
 8012122:	f043 0302 	orr.w	r3, r3, #2
 8012126:	81a3      	strh	r3, [r4, #12]
 8012128:	e7e2      	b.n	80120f0 <__smakebuf_r+0xc>
 801212a:	89a3      	ldrh	r3, [r4, #12]
 801212c:	6020      	str	r0, [r4, #0]
 801212e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012132:	81a3      	strh	r3, [r4, #12]
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801213a:	b15b      	cbz	r3, 8012154 <__smakebuf_r+0x70>
 801213c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012140:	4630      	mov	r0, r6
 8012142:	f000 f81d 	bl	8012180 <_isatty_r>
 8012146:	b128      	cbz	r0, 8012154 <__smakebuf_r+0x70>
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	f023 0303 	bic.w	r3, r3, #3
 801214e:	f043 0301 	orr.w	r3, r3, #1
 8012152:	81a3      	strh	r3, [r4, #12]
 8012154:	89a3      	ldrh	r3, [r4, #12]
 8012156:	431d      	orrs	r5, r3
 8012158:	81a5      	strh	r5, [r4, #12]
 801215a:	e7cf      	b.n	80120fc <__smakebuf_r+0x18>

0801215c <_fstat_r>:
 801215c:	b538      	push	{r3, r4, r5, lr}
 801215e:	4d07      	ldr	r5, [pc, #28]	@ (801217c <_fstat_r+0x20>)
 8012160:	2300      	movs	r3, #0
 8012162:	4604      	mov	r4, r0
 8012164:	4608      	mov	r0, r1
 8012166:	4611      	mov	r1, r2
 8012168:	602b      	str	r3, [r5, #0]
 801216a:	f7f1 fc2f 	bl	80039cc <_fstat>
 801216e:	1c43      	adds	r3, r0, #1
 8012170:	d102      	bne.n	8012178 <_fstat_r+0x1c>
 8012172:	682b      	ldr	r3, [r5, #0]
 8012174:	b103      	cbz	r3, 8012178 <_fstat_r+0x1c>
 8012176:	6023      	str	r3, [r4, #0]
 8012178:	bd38      	pop	{r3, r4, r5, pc}
 801217a:	bf00      	nop
 801217c:	200023c4 	.word	0x200023c4

08012180 <_isatty_r>:
 8012180:	b538      	push	{r3, r4, r5, lr}
 8012182:	4d06      	ldr	r5, [pc, #24]	@ (801219c <_isatty_r+0x1c>)
 8012184:	2300      	movs	r3, #0
 8012186:	4604      	mov	r4, r0
 8012188:	4608      	mov	r0, r1
 801218a:	602b      	str	r3, [r5, #0]
 801218c:	f7f1 fc2e 	bl	80039ec <_isatty>
 8012190:	1c43      	adds	r3, r0, #1
 8012192:	d102      	bne.n	801219a <_isatty_r+0x1a>
 8012194:	682b      	ldr	r3, [r5, #0]
 8012196:	b103      	cbz	r3, 801219a <_isatty_r+0x1a>
 8012198:	6023      	str	r3, [r4, #0]
 801219a:	bd38      	pop	{r3, r4, r5, pc}
 801219c:	200023c4 	.word	0x200023c4

080121a0 <sqrt>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	ed2d 8b02 	vpush	{d8}
 80121a6:	ec55 4b10 	vmov	r4, r5, d0
 80121aa:	f000 f82f 	bl	801220c <__ieee754_sqrt>
 80121ae:	4622      	mov	r2, r4
 80121b0:	462b      	mov	r3, r5
 80121b2:	4620      	mov	r0, r4
 80121b4:	4629      	mov	r1, r5
 80121b6:	eeb0 8a40 	vmov.f32	s16, s0
 80121ba:	eef0 8a60 	vmov.f32	s17, s1
 80121be:	f7ee fcdd 	bl	8000b7c <__aeabi_dcmpun>
 80121c2:	b990      	cbnz	r0, 80121ea <sqrt+0x4a>
 80121c4:	2200      	movs	r2, #0
 80121c6:	2300      	movs	r3, #0
 80121c8:	4620      	mov	r0, r4
 80121ca:	4629      	mov	r1, r5
 80121cc:	f7ee fcae 	bl	8000b2c <__aeabi_dcmplt>
 80121d0:	b158      	cbz	r0, 80121ea <sqrt+0x4a>
 80121d2:	f7fe f9d9 	bl	8010588 <__errno>
 80121d6:	2321      	movs	r3, #33	@ 0x21
 80121d8:	6003      	str	r3, [r0, #0]
 80121da:	2200      	movs	r2, #0
 80121dc:	2300      	movs	r3, #0
 80121de:	4610      	mov	r0, r2
 80121e0:	4619      	mov	r1, r3
 80121e2:	f7ee fb5b 	bl	800089c <__aeabi_ddiv>
 80121e6:	ec41 0b18 	vmov	d8, r0, r1
 80121ea:	eeb0 0a48 	vmov.f32	s0, s16
 80121ee:	eef0 0a68 	vmov.f32	s1, s17
 80121f2:	ecbd 8b02 	vpop	{d8}
 80121f6:	bd38      	pop	{r3, r4, r5, pc}

080121f8 <atan2f>:
 80121f8:	f000 b8de 	b.w	80123b8 <__ieee754_atan2f>

080121fc <fabsf>:
 80121fc:	ee10 3a10 	vmov	r3, s0
 8012200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012204:	ee00 3a10 	vmov	s0, r3
 8012208:	4770      	bx	lr
	...

0801220c <__ieee754_sqrt>:
 801220c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012210:	4a66      	ldr	r2, [pc, #408]	@ (80123ac <__ieee754_sqrt+0x1a0>)
 8012212:	ec55 4b10 	vmov	r4, r5, d0
 8012216:	43aa      	bics	r2, r5
 8012218:	462b      	mov	r3, r5
 801221a:	4621      	mov	r1, r4
 801221c:	d110      	bne.n	8012240 <__ieee754_sqrt+0x34>
 801221e:	4622      	mov	r2, r4
 8012220:	4620      	mov	r0, r4
 8012222:	4629      	mov	r1, r5
 8012224:	f7ee fa10 	bl	8000648 <__aeabi_dmul>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	f7ee f854 	bl	80002dc <__adddf3>
 8012234:	4604      	mov	r4, r0
 8012236:	460d      	mov	r5, r1
 8012238:	ec45 4b10 	vmov	d0, r4, r5
 801223c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	2d00      	cmp	r5, #0
 8012242:	dc0e      	bgt.n	8012262 <__ieee754_sqrt+0x56>
 8012244:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012248:	4322      	orrs	r2, r4
 801224a:	d0f5      	beq.n	8012238 <__ieee754_sqrt+0x2c>
 801224c:	b19d      	cbz	r5, 8012276 <__ieee754_sqrt+0x6a>
 801224e:	4622      	mov	r2, r4
 8012250:	4620      	mov	r0, r4
 8012252:	4629      	mov	r1, r5
 8012254:	f7ee f840 	bl	80002d8 <__aeabi_dsub>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	f7ee fb1e 	bl	800089c <__aeabi_ddiv>
 8012260:	e7e8      	b.n	8012234 <__ieee754_sqrt+0x28>
 8012262:	152a      	asrs	r2, r5, #20
 8012264:	d115      	bne.n	8012292 <__ieee754_sqrt+0x86>
 8012266:	2000      	movs	r0, #0
 8012268:	e009      	b.n	801227e <__ieee754_sqrt+0x72>
 801226a:	0acb      	lsrs	r3, r1, #11
 801226c:	3a15      	subs	r2, #21
 801226e:	0549      	lsls	r1, r1, #21
 8012270:	2b00      	cmp	r3, #0
 8012272:	d0fa      	beq.n	801226a <__ieee754_sqrt+0x5e>
 8012274:	e7f7      	b.n	8012266 <__ieee754_sqrt+0x5a>
 8012276:	462a      	mov	r2, r5
 8012278:	e7fa      	b.n	8012270 <__ieee754_sqrt+0x64>
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	3001      	adds	r0, #1
 801227e:	02dc      	lsls	r4, r3, #11
 8012280:	d5fb      	bpl.n	801227a <__ieee754_sqrt+0x6e>
 8012282:	1e44      	subs	r4, r0, #1
 8012284:	1b12      	subs	r2, r2, r4
 8012286:	f1c0 0420 	rsb	r4, r0, #32
 801228a:	fa21 f404 	lsr.w	r4, r1, r4
 801228e:	4323      	orrs	r3, r4
 8012290:	4081      	lsls	r1, r0
 8012292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012296:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801229a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801229e:	07d2      	lsls	r2, r2, #31
 80122a0:	bf5c      	itt	pl
 80122a2:	005b      	lslpl	r3, r3, #1
 80122a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80122a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80122ac:	bf58      	it	pl
 80122ae:	0049      	lslpl	r1, r1, #1
 80122b0:	2600      	movs	r6, #0
 80122b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80122b6:	107f      	asrs	r7, r7, #1
 80122b8:	0049      	lsls	r1, r1, #1
 80122ba:	2016      	movs	r0, #22
 80122bc:	4632      	mov	r2, r6
 80122be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80122c2:	1915      	adds	r5, r2, r4
 80122c4:	429d      	cmp	r5, r3
 80122c6:	bfde      	ittt	le
 80122c8:	192a      	addle	r2, r5, r4
 80122ca:	1b5b      	suble	r3, r3, r5
 80122cc:	1936      	addle	r6, r6, r4
 80122ce:	0fcd      	lsrs	r5, r1, #31
 80122d0:	3801      	subs	r0, #1
 80122d2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80122d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80122da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80122de:	d1f0      	bne.n	80122c2 <__ieee754_sqrt+0xb6>
 80122e0:	4605      	mov	r5, r0
 80122e2:	2420      	movs	r4, #32
 80122e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80122e8:	4293      	cmp	r3, r2
 80122ea:	eb0c 0e00 	add.w	lr, ip, r0
 80122ee:	dc02      	bgt.n	80122f6 <__ieee754_sqrt+0xea>
 80122f0:	d113      	bne.n	801231a <__ieee754_sqrt+0x10e>
 80122f2:	458e      	cmp	lr, r1
 80122f4:	d811      	bhi.n	801231a <__ieee754_sqrt+0x10e>
 80122f6:	f1be 0f00 	cmp.w	lr, #0
 80122fa:	eb0e 000c 	add.w	r0, lr, ip
 80122fe:	da3f      	bge.n	8012380 <__ieee754_sqrt+0x174>
 8012300:	2800      	cmp	r0, #0
 8012302:	db3d      	blt.n	8012380 <__ieee754_sqrt+0x174>
 8012304:	f102 0801 	add.w	r8, r2, #1
 8012308:	1a9b      	subs	r3, r3, r2
 801230a:	458e      	cmp	lr, r1
 801230c:	bf88      	it	hi
 801230e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012312:	eba1 010e 	sub.w	r1, r1, lr
 8012316:	4465      	add	r5, ip
 8012318:	4642      	mov	r2, r8
 801231a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801231e:	3c01      	subs	r4, #1
 8012320:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012324:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012328:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801232c:	d1dc      	bne.n	80122e8 <__ieee754_sqrt+0xdc>
 801232e:	4319      	orrs	r1, r3
 8012330:	d01b      	beq.n	801236a <__ieee754_sqrt+0x15e>
 8012332:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80123b0 <__ieee754_sqrt+0x1a4>
 8012336:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80123b4 <__ieee754_sqrt+0x1a8>
 801233a:	e9da 0100 	ldrd	r0, r1, [sl]
 801233e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012342:	f7ed ffc9 	bl	80002d8 <__aeabi_dsub>
 8012346:	e9da 8900 	ldrd	r8, r9, [sl]
 801234a:	4602      	mov	r2, r0
 801234c:	460b      	mov	r3, r1
 801234e:	4640      	mov	r0, r8
 8012350:	4649      	mov	r1, r9
 8012352:	f7ee fbf5 	bl	8000b40 <__aeabi_dcmple>
 8012356:	b140      	cbz	r0, 801236a <__ieee754_sqrt+0x15e>
 8012358:	f1b5 3fff 	cmp.w	r5, #4294967295
 801235c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012360:	e9db 2300 	ldrd	r2, r3, [fp]
 8012364:	d10e      	bne.n	8012384 <__ieee754_sqrt+0x178>
 8012366:	3601      	adds	r6, #1
 8012368:	4625      	mov	r5, r4
 801236a:	1073      	asrs	r3, r6, #1
 801236c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012370:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012374:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8012378:	086b      	lsrs	r3, r5, #1
 801237a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801237e:	e759      	b.n	8012234 <__ieee754_sqrt+0x28>
 8012380:	4690      	mov	r8, r2
 8012382:	e7c1      	b.n	8012308 <__ieee754_sqrt+0xfc>
 8012384:	f7ed ffaa 	bl	80002dc <__adddf3>
 8012388:	e9da 8900 	ldrd	r8, r9, [sl]
 801238c:	4602      	mov	r2, r0
 801238e:	460b      	mov	r3, r1
 8012390:	4640      	mov	r0, r8
 8012392:	4649      	mov	r1, r9
 8012394:	f7ee fbca 	bl	8000b2c <__aeabi_dcmplt>
 8012398:	b120      	cbz	r0, 80123a4 <__ieee754_sqrt+0x198>
 801239a:	1cab      	adds	r3, r5, #2
 801239c:	bf08      	it	eq
 801239e:	3601      	addeq	r6, #1
 80123a0:	3502      	adds	r5, #2
 80123a2:	e7e2      	b.n	801236a <__ieee754_sqrt+0x15e>
 80123a4:	1c6b      	adds	r3, r5, #1
 80123a6:	f023 0501 	bic.w	r5, r3, #1
 80123aa:	e7de      	b.n	801236a <__ieee754_sqrt+0x15e>
 80123ac:	7ff00000 	.word	0x7ff00000
 80123b0:	08012aa0 	.word	0x08012aa0
 80123b4:	08012a98 	.word	0x08012a98

080123b8 <__ieee754_atan2f>:
 80123b8:	ee10 2a90 	vmov	r2, s1
 80123bc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80123c0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80123c4:	b510      	push	{r4, lr}
 80123c6:	eef0 7a40 	vmov.f32	s15, s0
 80123ca:	d806      	bhi.n	80123da <__ieee754_atan2f+0x22>
 80123cc:	ee10 0a10 	vmov	r0, s0
 80123d0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80123d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80123d8:	d904      	bls.n	80123e4 <__ieee754_atan2f+0x2c>
 80123da:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80123de:	eeb0 0a67 	vmov.f32	s0, s15
 80123e2:	bd10      	pop	{r4, pc}
 80123e4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80123e8:	d103      	bne.n	80123f2 <__ieee754_atan2f+0x3a>
 80123ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123ee:	f000 b883 	b.w	80124f8 <atanf>
 80123f2:	1794      	asrs	r4, r2, #30
 80123f4:	f004 0402 	and.w	r4, r4, #2
 80123f8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80123fc:	b943      	cbnz	r3, 8012410 <__ieee754_atan2f+0x58>
 80123fe:	2c02      	cmp	r4, #2
 8012400:	d05e      	beq.n	80124c0 <__ieee754_atan2f+0x108>
 8012402:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80124d4 <__ieee754_atan2f+0x11c>
 8012406:	2c03      	cmp	r4, #3
 8012408:	bf08      	it	eq
 801240a:	eef0 7a47 	vmoveq.f32	s15, s14
 801240e:	e7e6      	b.n	80123de <__ieee754_atan2f+0x26>
 8012410:	b941      	cbnz	r1, 8012424 <__ieee754_atan2f+0x6c>
 8012412:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80124d8 <__ieee754_atan2f+0x120>
 8012416:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80124dc <__ieee754_atan2f+0x124>
 801241a:	2800      	cmp	r0, #0
 801241c:	bfa8      	it	ge
 801241e:	eef0 7a47 	vmovge.f32	s15, s14
 8012422:	e7dc      	b.n	80123de <__ieee754_atan2f+0x26>
 8012424:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012428:	d110      	bne.n	801244c <__ieee754_atan2f+0x94>
 801242a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801242e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012432:	d107      	bne.n	8012444 <__ieee754_atan2f+0x8c>
 8012434:	2c02      	cmp	r4, #2
 8012436:	d846      	bhi.n	80124c6 <__ieee754_atan2f+0x10e>
 8012438:	4b29      	ldr	r3, [pc, #164]	@ (80124e0 <__ieee754_atan2f+0x128>)
 801243a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801243e:	edd3 7a00 	vldr	s15, [r3]
 8012442:	e7cc      	b.n	80123de <__ieee754_atan2f+0x26>
 8012444:	2c02      	cmp	r4, #2
 8012446:	d841      	bhi.n	80124cc <__ieee754_atan2f+0x114>
 8012448:	4b26      	ldr	r3, [pc, #152]	@ (80124e4 <__ieee754_atan2f+0x12c>)
 801244a:	e7f6      	b.n	801243a <__ieee754_atan2f+0x82>
 801244c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012450:	d0df      	beq.n	8012412 <__ieee754_atan2f+0x5a>
 8012452:	1a5b      	subs	r3, r3, r1
 8012454:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012458:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801245c:	da1a      	bge.n	8012494 <__ieee754_atan2f+0xdc>
 801245e:	2a00      	cmp	r2, #0
 8012460:	da01      	bge.n	8012466 <__ieee754_atan2f+0xae>
 8012462:	313c      	adds	r1, #60	@ 0x3c
 8012464:	db19      	blt.n	801249a <__ieee754_atan2f+0xe2>
 8012466:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801246a:	f7ff fec7 	bl	80121fc <fabsf>
 801246e:	f000 f843 	bl	80124f8 <atanf>
 8012472:	eef0 7a40 	vmov.f32	s15, s0
 8012476:	2c01      	cmp	r4, #1
 8012478:	d012      	beq.n	80124a0 <__ieee754_atan2f+0xe8>
 801247a:	2c02      	cmp	r4, #2
 801247c:	d017      	beq.n	80124ae <__ieee754_atan2f+0xf6>
 801247e:	2c00      	cmp	r4, #0
 8012480:	d0ad      	beq.n	80123de <__ieee754_atan2f+0x26>
 8012482:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80124e8 <__ieee754_atan2f+0x130>
 8012486:	ee77 7a87 	vadd.f32	s15, s15, s14
 801248a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80124ec <__ieee754_atan2f+0x134>
 801248e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012492:	e7a4      	b.n	80123de <__ieee754_atan2f+0x26>
 8012494:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80124dc <__ieee754_atan2f+0x124>
 8012498:	e7ed      	b.n	8012476 <__ieee754_atan2f+0xbe>
 801249a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80124f0 <__ieee754_atan2f+0x138>
 801249e:	e7ea      	b.n	8012476 <__ieee754_atan2f+0xbe>
 80124a0:	ee17 3a90 	vmov	r3, s15
 80124a4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80124a8:	ee07 3a90 	vmov	s15, r3
 80124ac:	e797      	b.n	80123de <__ieee754_atan2f+0x26>
 80124ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80124e8 <__ieee754_atan2f+0x130>
 80124b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124b6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80124ec <__ieee754_atan2f+0x134>
 80124ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124be:	e78e      	b.n	80123de <__ieee754_atan2f+0x26>
 80124c0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80124ec <__ieee754_atan2f+0x134>
 80124c4:	e78b      	b.n	80123de <__ieee754_atan2f+0x26>
 80124c6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80124f4 <__ieee754_atan2f+0x13c>
 80124ca:	e788      	b.n	80123de <__ieee754_atan2f+0x26>
 80124cc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80124f0 <__ieee754_atan2f+0x138>
 80124d0:	e785      	b.n	80123de <__ieee754_atan2f+0x26>
 80124d2:	bf00      	nop
 80124d4:	c0490fdb 	.word	0xc0490fdb
 80124d8:	bfc90fdb 	.word	0xbfc90fdb
 80124dc:	3fc90fdb 	.word	0x3fc90fdb
 80124e0:	08012ab4 	.word	0x08012ab4
 80124e4:	08012aa8 	.word	0x08012aa8
 80124e8:	33bbbd2e 	.word	0x33bbbd2e
 80124ec:	40490fdb 	.word	0x40490fdb
 80124f0:	00000000 	.word	0x00000000
 80124f4:	3f490fdb 	.word	0x3f490fdb

080124f8 <atanf>:
 80124f8:	b538      	push	{r3, r4, r5, lr}
 80124fa:	ee10 5a10 	vmov	r5, s0
 80124fe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012502:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012506:	eef0 7a40 	vmov.f32	s15, s0
 801250a:	d310      	bcc.n	801252e <atanf+0x36>
 801250c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012510:	d904      	bls.n	801251c <atanf+0x24>
 8012512:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012516:	eeb0 0a67 	vmov.f32	s0, s15
 801251a:	bd38      	pop	{r3, r4, r5, pc}
 801251c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012654 <atanf+0x15c>
 8012520:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012658 <atanf+0x160>
 8012524:	2d00      	cmp	r5, #0
 8012526:	bfc8      	it	gt
 8012528:	eef0 7a47 	vmovgt.f32	s15, s14
 801252c:	e7f3      	b.n	8012516 <atanf+0x1e>
 801252e:	4b4b      	ldr	r3, [pc, #300]	@ (801265c <atanf+0x164>)
 8012530:	429c      	cmp	r4, r3
 8012532:	d810      	bhi.n	8012556 <atanf+0x5e>
 8012534:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012538:	d20a      	bcs.n	8012550 <atanf+0x58>
 801253a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012660 <atanf+0x168>
 801253e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012546:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254e:	dce2      	bgt.n	8012516 <atanf+0x1e>
 8012550:	f04f 33ff 	mov.w	r3, #4294967295
 8012554:	e013      	b.n	801257e <atanf+0x86>
 8012556:	f7ff fe51 	bl	80121fc <fabsf>
 801255a:	4b42      	ldr	r3, [pc, #264]	@ (8012664 <atanf+0x16c>)
 801255c:	429c      	cmp	r4, r3
 801255e:	d84f      	bhi.n	8012600 <atanf+0x108>
 8012560:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012564:	429c      	cmp	r4, r3
 8012566:	d841      	bhi.n	80125ec <atanf+0xf4>
 8012568:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801256c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012570:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012574:	2300      	movs	r3, #0
 8012576:	ee30 0a27 	vadd.f32	s0, s0, s15
 801257a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801257e:	1c5a      	adds	r2, r3, #1
 8012580:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012584:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012668 <atanf+0x170>
 8012588:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801266c <atanf+0x174>
 801258c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012670 <atanf+0x178>
 8012590:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012594:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012598:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012674 <atanf+0x17c>
 801259c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80125a0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012678 <atanf+0x180>
 80125a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80125a8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801267c <atanf+0x184>
 80125ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80125b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012680 <atanf+0x188>
 80125b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80125b8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012684 <atanf+0x18c>
 80125bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80125c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012688 <atanf+0x190>
 80125c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80125c8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801268c <atanf+0x194>
 80125cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80125d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012690 <atanf+0x198>
 80125d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80125d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80125dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80125e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80125e4:	d121      	bne.n	801262a <atanf+0x132>
 80125e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125ea:	e794      	b.n	8012516 <atanf+0x1e>
 80125ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80125f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80125f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80125f8:	2301      	movs	r3, #1
 80125fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80125fe:	e7be      	b.n	801257e <atanf+0x86>
 8012600:	4b24      	ldr	r3, [pc, #144]	@ (8012694 <atanf+0x19c>)
 8012602:	429c      	cmp	r4, r3
 8012604:	d80b      	bhi.n	801261e <atanf+0x126>
 8012606:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801260a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801260e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012612:	2302      	movs	r3, #2
 8012614:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801261c:	e7af      	b.n	801257e <atanf+0x86>
 801261e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012622:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012626:	2303      	movs	r3, #3
 8012628:	e7a9      	b.n	801257e <atanf+0x86>
 801262a:	4a1b      	ldr	r2, [pc, #108]	@ (8012698 <atanf+0x1a0>)
 801262c:	491b      	ldr	r1, [pc, #108]	@ (801269c <atanf+0x1a4>)
 801262e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012632:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012636:	edd3 6a00 	vldr	s13, [r3]
 801263a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801263e:	2d00      	cmp	r5, #0
 8012640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012644:	edd2 7a00 	vldr	s15, [r2]
 8012648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801264c:	bfb8      	it	lt
 801264e:	eef1 7a67 	vneglt.f32	s15, s15
 8012652:	e760      	b.n	8012516 <atanf+0x1e>
 8012654:	bfc90fdb 	.word	0xbfc90fdb
 8012658:	3fc90fdb 	.word	0x3fc90fdb
 801265c:	3edfffff 	.word	0x3edfffff
 8012660:	7149f2ca 	.word	0x7149f2ca
 8012664:	3f97ffff 	.word	0x3f97ffff
 8012668:	3c8569d7 	.word	0x3c8569d7
 801266c:	3d4bda59 	.word	0x3d4bda59
 8012670:	bd6ef16b 	.word	0xbd6ef16b
 8012674:	3d886b35 	.word	0x3d886b35
 8012678:	3dba2e6e 	.word	0x3dba2e6e
 801267c:	3e124925 	.word	0x3e124925
 8012680:	3eaaaaab 	.word	0x3eaaaaab
 8012684:	bd15a221 	.word	0xbd15a221
 8012688:	bd9d8795 	.word	0xbd9d8795
 801268c:	bde38e38 	.word	0xbde38e38
 8012690:	be4ccccd 	.word	0xbe4ccccd
 8012694:	401bffff 	.word	0x401bffff
 8012698:	08012ad0 	.word	0x08012ad0
 801269c:	08012ac0 	.word	0x08012ac0

080126a0 <_init>:
 80126a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a2:	bf00      	nop
 80126a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126a6:	bc08      	pop	{r3}
 80126a8:	469e      	mov	lr, r3
 80126aa:	4770      	bx	lr

080126ac <_fini>:
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ae:	bf00      	nop
 80126b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126b2:	bc08      	pop	{r3}
 80126b4:	469e      	mov	lr, r3
 80126b6:	4770      	bx	lr

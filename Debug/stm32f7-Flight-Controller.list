
stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001740c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  080175f0  080175f0  000185f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080183c8  080183c8  0001a2d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080183c8  080183c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080183d0  080183d0  0001a2d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080183d0  080183d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080183d4  080183d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  080183d8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002228  200002d4  080186ac  0001a2d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024fc  080186ac  0001a4fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a2d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000276c6  00000000  00000000  0001a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005be6  00000000  00000000  000419ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  000475b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001847  00000000  00000000  00049530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4a9  00000000  00000000  0004ad77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc7c  00000000  00000000  00075220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec512  00000000  00000000  000a2e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f3ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b84  00000000  00000000  0018f3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00198f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080175d4 	.word	0x080175d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	080175d4 	.word	0x080175d4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9be 	b.w	800108c <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	468e      	mov	lr, r1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4688      	mov	r8, r1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d14a      	bne.n	8000e3a <__udivmoddi4+0xa6>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d962      	bls.n	8000e70 <__udivmoddi4+0xdc>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	b14e      	cbz	r6, 8000dc4 <__udivmoddi4+0x30>
 8000db0:	f1c6 0320 	rsb	r3, r6, #32
 8000db4:	fa01 f806 	lsl.w	r8, r1, r6
 8000db8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	ea43 0808 	orr.w	r8, r3, r8
 8000dc2:	40b4      	lsls	r4, r6
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dd0:	0c23      	lsrs	r3, r4, #16
 8000dd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dda:	fb01 f20c 	mul.w	r2, r1, ip
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x62>
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000de8:	f080 80ea 	bcs.w	8000fc0 <__udivmoddi4+0x22c>
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f240 80e7 	bls.w	8000fc0 <__udivmoddi4+0x22c>
 8000df2:	3902      	subs	r1, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	1a9a      	subs	r2, r3, r2
 8000df8:	b2a3      	uxth	r3, r4
 8000dfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e0a:	459c      	cmp	ip, r3
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x8e>
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e14:	f080 80d6 	bcs.w	8000fc4 <__udivmoddi4+0x230>
 8000e18:	459c      	cmp	ip, r3
 8000e1a:	f240 80d3 	bls.w	8000fc4 <__udivmoddi4+0x230>
 8000e1e:	443b      	add	r3, r7
 8000e20:	3802      	subs	r0, #2
 8000e22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e26:	eba3 030c 	sub.w	r3, r3, ip
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	b11d      	cbz	r5, 8000e36 <__udivmoddi4+0xa2>
 8000e2e:	40f3      	lsrs	r3, r6
 8000e30:	2200      	movs	r2, #0
 8000e32:	e9c5 3200 	strd	r3, r2, [r5]
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d905      	bls.n	8000e4a <__udivmoddi4+0xb6>
 8000e3e:	b10d      	cbz	r5, 8000e44 <__udivmoddi4+0xb0>
 8000e40:	e9c5 0100 	strd	r0, r1, [r5]
 8000e44:	2100      	movs	r1, #0
 8000e46:	4608      	mov	r0, r1
 8000e48:	e7f5      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e4a:	fab3 f183 	clz	r1, r3
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d146      	bne.n	8000ee0 <__udivmoddi4+0x14c>
 8000e52:	4573      	cmp	r3, lr
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xc8>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	f200 8105 	bhi.w	8001066 <__udivmoddi4+0x2d2>
 8000e5c:	1a84      	subs	r4, r0, r2
 8000e5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	4690      	mov	r8, r2
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d0e5      	beq.n	8000e36 <__udivmoddi4+0xa2>
 8000e6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e6e:	e7e2      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	f000 8090 	beq.w	8000f96 <__udivmoddi4+0x202>
 8000e76:	fab2 f682 	clz	r6, r2
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	f040 80a4 	bne.w	8000fc8 <__udivmoddi4+0x234>
 8000e80:	1a8a      	subs	r2, r1, r2
 8000e82:	0c03      	lsrs	r3, r0, #16
 8000e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e88:	b280      	uxth	r0, r0
 8000e8a:	b2bc      	uxth	r4, r7
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x11e>
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x11c>
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	f200 80e0 	bhi.w	8001070 <__udivmoddi4+0x2dc>
 8000eb0:	46c4      	mov	ip, r8
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000eb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ebc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ec0:	fb02 f404 	mul.w	r4, r2, r4
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x144>
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0x142>
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	f200 80ca 	bhi.w	800106a <__udivmoddi4+0x2d6>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	1b1b      	subs	r3, r3, r4
 8000eda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ede:	e7a5      	b.n	8000e2c <__udivmoddi4+0x98>
 8000ee0:	f1c1 0620 	rsb	r6, r1, #32
 8000ee4:	408b      	lsls	r3, r1
 8000ee6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eea:	431f      	orrs	r7, r3
 8000eec:	fa0e f401 	lsl.w	r4, lr, r1
 8000ef0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ef4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ef8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000efc:	4323      	orrs	r3, r4
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	fa1f fc87 	uxth.w	ip, r7
 8000f06:	fbbe f0f9 	udiv	r0, lr, r9
 8000f0a:	0c1c      	lsrs	r4, r3, #16
 8000f0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1e:	d909      	bls.n	8000f34 <__udivmoddi4+0x1a0>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f26:	f080 809c 	bcs.w	8001062 <__udivmoddi4+0x2ce>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f240 8099 	bls.w	8001062 <__udivmoddi4+0x2ce>
 8000f30:	3802      	subs	r0, #2
 8000f32:	443c      	add	r4, r7
 8000f34:	eba4 040e 	sub.w	r4, r4, lr
 8000f38:	fa1f fe83 	uxth.w	lr, r3
 8000f3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f40:	fb09 4413 	mls	r4, r9, r3, r4
 8000f44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f4c:	45a4      	cmp	ip, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x1ce>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f56:	f080 8082 	bcs.w	800105e <__udivmoddi4+0x2ca>
 8000f5a:	45a4      	cmp	ip, r4
 8000f5c:	d97f      	bls.n	800105e <__udivmoddi4+0x2ca>
 8000f5e:	3b02      	subs	r3, #2
 8000f60:	443c      	add	r4, r7
 8000f62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f66:	eba4 040c 	sub.w	r4, r4, ip
 8000f6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f6e:	4564      	cmp	r4, ip
 8000f70:	4673      	mov	r3, lr
 8000f72:	46e1      	mov	r9, ip
 8000f74:	d362      	bcc.n	800103c <__udivmoddi4+0x2a8>
 8000f76:	d05f      	beq.n	8001038 <__udivmoddi4+0x2a4>
 8000f78:	b15d      	cbz	r5, 8000f92 <__udivmoddi4+0x1fe>
 8000f7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f82:	fa04 f606 	lsl.w	r6, r4, r6
 8000f86:	fa22 f301 	lsr.w	r3, r2, r1
 8000f8a:	431e      	orrs	r6, r3
 8000f8c:	40cc      	lsrs	r4, r1
 8000f8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f92:	2100      	movs	r1, #0
 8000f94:	e74f      	b.n	8000e36 <__udivmoddi4+0xa2>
 8000f96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f9a:	0c01      	lsrs	r1, r0, #16
 8000f9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fa0:	b280      	uxth	r0, r0
 8000fa2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4638      	mov	r0, r7
 8000faa:	463c      	mov	r4, r7
 8000fac:	46b8      	mov	r8, r7
 8000fae:	46be      	mov	lr, r7
 8000fb0:	2620      	movs	r6, #32
 8000fb2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fb6:	eba2 0208 	sub.w	r2, r2, r8
 8000fba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fbe:	e766      	b.n	8000e8e <__udivmoddi4+0xfa>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	e718      	b.n	8000df6 <__udivmoddi4+0x62>
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	e72c      	b.n	8000e22 <__udivmoddi4+0x8e>
 8000fc8:	f1c6 0220 	rsb	r2, r6, #32
 8000fcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fd0:	40b7      	lsls	r7, r6
 8000fd2:	40b1      	lsls	r1, r6
 8000fd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fe2:	b2bc      	uxth	r4, r7
 8000fe4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fe8:	0c11      	lsrs	r1, r2, #16
 8000fea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fee:	fb08 f904 	mul.w	r9, r8, r4
 8000ff2:	40b0      	lsls	r0, r6
 8000ff4:	4589      	cmp	r9, r1
 8000ff6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	d93e      	bls.n	800107c <__udivmoddi4+0x2e8>
 8000ffe:	1879      	adds	r1, r7, r1
 8001000:	f108 3cff 	add.w	ip, r8, #4294967295
 8001004:	d201      	bcs.n	800100a <__udivmoddi4+0x276>
 8001006:	4589      	cmp	r9, r1
 8001008:	d81f      	bhi.n	800104a <__udivmoddi4+0x2b6>
 800100a:	eba1 0109 	sub.w	r1, r1, r9
 800100e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001012:	fb09 f804 	mul.w	r8, r9, r4
 8001016:	fb0e 1119 	mls	r1, lr, r9, r1
 800101a:	b292      	uxth	r2, r2
 800101c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001020:	4542      	cmp	r2, r8
 8001022:	d229      	bcs.n	8001078 <__udivmoddi4+0x2e4>
 8001024:	18ba      	adds	r2, r7, r2
 8001026:	f109 31ff 	add.w	r1, r9, #4294967295
 800102a:	d2c4      	bcs.n	8000fb6 <__udivmoddi4+0x222>
 800102c:	4542      	cmp	r2, r8
 800102e:	d2c2      	bcs.n	8000fb6 <__udivmoddi4+0x222>
 8001030:	f1a9 0102 	sub.w	r1, r9, #2
 8001034:	443a      	add	r2, r7
 8001036:	e7be      	b.n	8000fb6 <__udivmoddi4+0x222>
 8001038:	45f0      	cmp	r8, lr
 800103a:	d29d      	bcs.n	8000f78 <__udivmoddi4+0x1e4>
 800103c:	ebbe 0302 	subs.w	r3, lr, r2
 8001040:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001044:	3801      	subs	r0, #1
 8001046:	46e1      	mov	r9, ip
 8001048:	e796      	b.n	8000f78 <__udivmoddi4+0x1e4>
 800104a:	eba7 0909 	sub.w	r9, r7, r9
 800104e:	4449      	add	r1, r9
 8001050:	f1a8 0c02 	sub.w	ip, r8, #2
 8001054:	fbb1 f9fe 	udiv	r9, r1, lr
 8001058:	fb09 f804 	mul.w	r8, r9, r4
 800105c:	e7db      	b.n	8001016 <__udivmoddi4+0x282>
 800105e:	4673      	mov	r3, lr
 8001060:	e77f      	b.n	8000f62 <__udivmoddi4+0x1ce>
 8001062:	4650      	mov	r0, sl
 8001064:	e766      	b.n	8000f34 <__udivmoddi4+0x1a0>
 8001066:	4608      	mov	r0, r1
 8001068:	e6fd      	b.n	8000e66 <__udivmoddi4+0xd2>
 800106a:	443b      	add	r3, r7
 800106c:	3a02      	subs	r2, #2
 800106e:	e733      	b.n	8000ed8 <__udivmoddi4+0x144>
 8001070:	f1ac 0c02 	sub.w	ip, ip, #2
 8001074:	443b      	add	r3, r7
 8001076:	e71c      	b.n	8000eb2 <__udivmoddi4+0x11e>
 8001078:	4649      	mov	r1, r9
 800107a:	e79c      	b.n	8000fb6 <__udivmoddi4+0x222>
 800107c:	eba1 0109 	sub.w	r1, r1, r9
 8001080:	46c4      	mov	ip, r8
 8001082:	fbb1 f9fe 	udiv	r9, r1, lr
 8001086:	fb09 f804 	mul.w	r8, r9, r4
 800108a:	e7c4      	b.n	8001016 <__udivmoddi4+0x282>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <AHRS_Update_Gyro>:

#include "AHRS.h"

Vec3 attitude_gyro, euler_rates_gyro, attitude_acc, attitude = {0.0f, 0.0f, 0.0f};

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001090:	b580      	push	{r7, lr}
 8001092:	ed2d 8b02 	vpush	{d8}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	eef0 6a40 	vmov.f32	s13, s0
 800109e:	eeb0 7a60 	vmov.f32	s14, s1
 80010a2:	eef0 7a41 	vmov.f32	s15, s2
 80010a6:	edc7 1a00 	vstr	s3, [r7]
 80010aa:	edc7 6a01 	vstr	s13, [r7, #4]
 80010ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80010b2:	edc7 7a03 	vstr	s15, [r7, #12]

	euler_rates_gyro.x = gyro.x + gyro.y*sinf(attitude.x)*tanf(attitude.y) + gyro.z*cosf(attitude.x)*tanf(attitude.y);
 80010b6:	ed97 8a01 	vldr	s16, [r7, #4]
 80010ba:	edd7 8a02 	vldr	s17, [r7, #8]
 80010be:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	f015 fa06 	bl	80164d8 <sinf>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80010d4:	4b90      	ldr	r3, [pc, #576]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80010d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	f015 fa41 	bl	8016564 <tanf>
 80010e2:	eef0 7a40 	vmov.f32	s15, s0
 80010e6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010ea:	ee38 8a27 	vadd.f32	s16, s16, s15
 80010ee:	edd7 8a03 	vldr	s17, [r7, #12]
 80010f2:	4b89      	ldr	r3, [pc, #548]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f015 f9a0 	bl	8016440 <cosf>
 8001100:	eef0 7a40 	vmov.f32	s15, s0
 8001104:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001108:	4b83      	ldr	r3, [pc, #524]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 800110a:	edd3 7a01 	vldr	s15, [r3, #4]
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	f015 fa27 	bl	8016564 <tanf>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800111e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001122:	4b7e      	ldr	r3, [pc, #504]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 8001124:	edc3 7a00 	vstr	s15, [r3]
	euler_rates_gyro.y = gyro.y*cosf(attitude.x) - gyro.z*sinf(attitude.x);
 8001128:	ed97 8a02 	vldr	s16, [r7, #8]
 800112c:	4b7a      	ldr	r3, [pc, #488]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	f015 f983 	bl	8016440 <cosf>
 800113a:	eef0 7a40 	vmov.f32	s15, s0
 800113e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001142:	edd7 8a03 	vldr	s17, [r7, #12]
 8001146:	4b74      	ldr	r3, [pc, #464]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	f015 f9c2 	bl	80164d8 <sinf>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800115c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001160:	4b6e      	ldr	r3, [pc, #440]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 8001162:	edc3 7a01 	vstr	s15, [r3, #4]
	euler_rates_gyro.z = gyro.y*sinf(attitude.x)/cosf(attitude.y) + gyro.z*cosf(attitude.x)/cosf(attitude.y);
 8001166:	ed97 8a02 	vldr	s16, [r7, #8]
 800116a:	4b6b      	ldr	r3, [pc, #428]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	f015 f9b0 	bl	80164d8 <sinf>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	ee68 8a27 	vmul.f32	s17, s16, s15
 8001180:	4b65      	ldr	r3, [pc, #404]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 8001182:	edd3 7a01 	vldr	s15, [r3, #4]
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	f015 f959 	bl	8016440 <cosf>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8001196:	edd7 8a03 	vldr	s17, [r7, #12]
 800119a:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	f015 f94c 	bl	8016440 <cosf>
 80011a8:	eef0 7a40 	vmov.f32	s15, s0
 80011ac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80011b0:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80011b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	f015 f941 	bl	8016440 <cosf>
 80011be:	eeb0 7a40 	vmov.f32	s14, s0
 80011c2:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80011c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011ca:	4b54      	ldr	r3, [pc, #336]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 80011cc:	edc3 7a02 	vstr	s15, [r3, #8]

	attitude_gyro.x = attitude.x + euler_rates_gyro.x * dt;
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	4b51      	ldr	r3, [pc, #324]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]
	attitude_gyro.y = attitude.y + euler_rates_gyro.y * dt;
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 80011f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011f4:	4b49      	ldr	r3, [pc, #292]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 80011f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80011fa:	edd7 7a00 	vldr	s15, [r7]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	4b46      	ldr	r3, [pc, #280]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 8001208:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_gyro.z = attitude.z + euler_rates_gyro.z * dt;
 800120c:	4b42      	ldr	r3, [pc, #264]	@ (8001318 <AHRS_Update_Gyro+0x288>)
 800120e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001212:	4b42      	ldr	r3, [pc, #264]	@ (800131c <AHRS_Update_Gyro+0x28c>)
 8001214:	edd3 6a02 	vldr	s13, [r3, #8]
 8001218:	edd7 7a00 	vldr	s15, [r7]
 800121c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	4b3e      	ldr	r3, [pc, #248]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 8001226:	edc3 7a02 	vstr	s15, [r3, #8]

	if(attitude_gyro.x > M_PI || attitude_gyro.x <= -M_PI) attitude_gyro.x = -attitude_gyro.x;
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9c2 	bl	80005b8 <__aeabi_f2d>
 8001234:	a334      	add	r3, pc, #208	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x278>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff fca5 	bl	8000b88 <__aeabi_dcmpgt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10c      	bne.n	800125e <AHRS_Update_Gyro+0x1ce>
 8001244:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9b5 	bl	80005b8 <__aeabi_f2d>
 800124e:	a330      	add	r3, pc, #192	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x280>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fc84 	bl	8000b60 <__aeabi_dcmple>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <AHRS_Update_Gyro+0x1de>
 800125e:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eef1 7a67 	vneg.f32	s15, s15
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 800126a:	edc3 7a00 	vstr	s15, [r3]
	if(attitude_gyro.y > M_PI || attitude_gyro.y <= -M_PI) attitude_gyro.y = -attitude_gyro.y;
 800126e:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f9a0 	bl	80005b8 <__aeabi_f2d>
 8001278:	a323      	add	r3, pc, #140	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x278>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff fc83 	bl	8000b88 <__aeabi_dcmpgt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <AHRS_Update_Gyro+0x212>
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f993 	bl	80005b8 <__aeabi_f2d>
 8001292:	a31f      	add	r3, pc, #124	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x280>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff fc62 	bl	8000b60 <__aeabi_dcmple>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <AHRS_Update_Gyro+0x222>
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a8:	eef1 7a67 	vneg.f32	s15, s15
 80012ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012ae:	edc3 7a01 	vstr	s15, [r3, #4]
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f97e 	bl	80005b8 <__aeabi_f2d>
 80012bc:	a312      	add	r3, pc, #72	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x278>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fc61 	bl	8000b88 <__aeabi_dcmpgt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <AHRS_Update_Gyro+0x258>
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f971 	bl	80005b8 <__aeabi_f2d>
 80012d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x280>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fc40 	bl	8000b60 <__aeabi_dcmple>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <AHRS_Update_Gyro+0x258>

}
 80012e6:	e007      	b.n	80012f8 <AHRS_Update_Gyro+0x268>
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ee:	eef1 7a67 	vneg.f32	s15, s15
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <AHRS_Update_Gyro+0x290>)
 80012f4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	ecbd 8b02 	vpop	{d8}
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f3af 8000 	nop.w
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	54442d18 	.word	0x54442d18
 8001314:	c00921fb 	.word	0xc00921fb
 8001318:	20000314 	.word	0x20000314
 800131c:	200002fc 	.word	0x200002fc
 8001320:	200002f0 	.word	0x200002f0

08001324 <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 8001324:	b580      	push	{r7, lr}
 8001326:	ed2d 8b02 	vpush	{d8}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	eef0 6a40 	vmov.f32	s13, s0
 8001332:	eeb0 7a60 	vmov.f32	s14, s1
 8001336:	eef0 7a41 	vmov.f32	s15, s2
 800133a:	edc7 6a01 	vstr	s13, [r7, #4]
 800133e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001342:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 8001346:	edd7 7a02 	vldr	s15, [r7, #8]
 800134a:	ed97 7a03 	vldr	s14, [r7, #12]
 800134e:	eef0 0a47 	vmov.f32	s1, s14
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	f015 f871 	bl	801643c <atan2f>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <AHRS_Update_Acc+0xb0>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 8001364:	edd7 7a01 	vldr	s15, [r7, #4]
 8001368:	eeb1 8a67 	vneg.f32	s16, s15
 800136c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001370:	edd7 7a02 	vldr	s15, [r7, #8]
 8001374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001378:	edd7 6a03 	vldr	s13, [r7, #12]
 800137c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f914 	bl	80005b8 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ec43 2b10 	vmov	d0, r2, r3
 8001398:	f015 f824 	bl	80163e4 <sqrt>
 800139c:	ec53 2b10 	vmov	r2, r3, d0
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fc58 	bl	8000c58 <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	ee00 3a90 	vmov	s1, r3
 80013ae:	eeb0 0a48 	vmov.f32	s0, s16
 80013b2:	f015 f843 	bl	801643c <atan2f>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <AHRS_Update_Acc+0xb0>)
 80013bc:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <AHRS_Update_Acc+0xb4>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a03      	ldr	r2, [pc, #12]	@ (80013d4 <AHRS_Update_Acc+0xb0>)
 80013c6:	6093      	str	r3, [r2, #8]

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	ecbd 8b02 	vpop	{d8}
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000308 	.word	0x20000308
 80013d8:	200002f0 	.word	0x200002f0
 80013dc:	00000000 	.word	0x00000000

080013e0 <AHRS_Update_Complementary_Filter>:

//fc: Cutoff frequency for complementary filter (Hz)
void AHRS_Update_Complementary_Filter(Vec3 gyro, Vec3 acc, float fc, float dt){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	eeb0 5a40 	vmov.f32	s10, s0
 80013ea:	eef0 5a60 	vmov.f32	s11, s1
 80013ee:	eeb0 6a41 	vmov.f32	s12, s2
 80013f2:	eef0 6a61 	vmov.f32	s13, s3
 80013f6:	eeb0 7a42 	vmov.f32	s14, s4
 80013fa:	eef0 7a62 	vmov.f32	s15, s5
 80013fe:	ed87 3a01 	vstr	s6, [r7, #4]
 8001402:	edc7 3a00 	vstr	s7, [r7]
 8001406:	ed87 5a05 	vstr	s10, [r7, #20]
 800140a:	edc7 5a06 	vstr	s11, [r7, #24]
 800140e:	ed87 6a07 	vstr	s12, [r7, #28]
 8001412:	edc7 6a02 	vstr	s13, [r7, #8]
 8001416:	ed87 7a03 	vstr	s14, [r7, #12]
 800141a:	edc7 7a04 	vstr	s15, [r7, #16]

	AHRS_Update_Gyro(gyro, dt);
 800141e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001422:	ed97 7a06 	vldr	s14, [r7, #24]
 8001426:	edd7 7a07 	vldr	s15, [r7, #28]
 800142a:	edd7 1a00 	vldr	s3, [r7]
 800142e:	eeb0 0a66 	vmov.f32	s0, s13
 8001432:	eef0 0a47 	vmov.f32	s1, s14
 8001436:	eeb0 1a67 	vmov.f32	s2, s15
 800143a:	f7ff fe29 	bl	8001090 <AHRS_Update_Gyro>
	AHRS_Update_Acc(acc);
 800143e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001442:	ed97 7a03 	vldr	s14, [r7, #12]
 8001446:	edd7 7a04 	vldr	s15, [r7, #16]
 800144a:	eeb0 0a66 	vmov.f32	s0, s13
 800144e:	eef0 0a47 	vmov.f32	s1, s14
 8001452:	eeb0 1a67 	vmov.f32	s2, s15
 8001456:	f7ff ff65 	bl	8001324 <AHRS_Update_Acc>

	float tau = 1/(2*M_PI*fc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f8ac 	bl	80005b8 <__aeabi_f2d>
 8001460:	a339      	add	r3, pc, #228	@ (adr r3, 8001548 <AHRS_Update_Complementary_Filter+0x168>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8ff 	bl	8000668 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	4931      	ldr	r1, [pc, #196]	@ (8001538 <AHRS_Update_Complementary_Filter+0x158>)
 8001474:	f7ff fa22 	bl	80008bc <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fbea 	bl	8000c58 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
	float gain = tau/(tau+dt); //Gain depends on dt
 8001488:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800148c:	edd7 7a00 	vldr	s15, [r7]
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149c:	edc7 7a08 	vstr	s15, [r7, #32]

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <AHRS_Update_Complementary_Filter+0x15c>)
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80014b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <AHRS_Update_Complementary_Filter+0x160>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <AHRS_Update_Complementary_Filter+0x164>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <AHRS_Update_Complementary_Filter+0x15c>)
 80014d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <AHRS_Update_Complementary_Filter+0x160>)
 80014ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <AHRS_Update_Complementary_Filter+0x164>)
 80014f8:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <AHRS_Update_Complementary_Filter+0x15c>)
 80014fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001502:	edd7 7a08 	vldr	s15, [r7, #32]
 8001506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800150e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001512:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <AHRS_Update_Complementary_Filter+0x160>)
 8001518:	edd3 7a02 	vldr	s15, [r3, #8]
 800151c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <AHRS_Update_Complementary_Filter+0x164>)
 8001526:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	3ff00000 	.word	0x3ff00000
 800153c:	200002f0 	.word	0x200002f0
 8001540:	20000308 	.word	0x20000308
 8001544:	20000314 	.word	0x20000314
 8001548:	54442d18 	.word	0x54442d18
 800154c:	401921fb 	.word	0x401921fb

08001550 <Battery_Begin>:

#include "Battery.h"

Battery battery;

HAL_StatusTypeDef Battery_Begin(ADC_HandleTypeDef *hadc){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ADC_Start_DMA(hadc, &battery.battery_raw, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <Battery_Begin+0x2c>)
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f004 fc39 	bl	8005dd4 <HAL_ADC_Start_DMA>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <Battery_Begin+0x20>
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	e000      	b.n	8001572 <Battery_Begin+0x22>

	return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000320 	.word	0x20000320

08001580 <Battery_Update>:

void Battery_Update(){
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
	battery.vbat = 0.00886230468f * battery.battery_raw; // 3.3/4096*11
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <Battery_Update+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001590:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80015ac <Battery_Update+0x2c>
 8001594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <Battery_Update+0x28>)
 800159a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	20000320 	.word	0x20000320
 80015ac:	3c113333 	.word	0x3c113333

080015b0 <Stabilized_Mode>:
extern float functions[10];
extern ICM42688 imu;
extern ParameterTable parameters;


void Stabilized_Mode(Sbus receiver, float dt){
 80015b0:	b084      	sub	sp, #16
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	f107 0c10 	add.w	ip, r7, #16
 80015bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80015c0:	ed87 0a01 	vstr	s0, [r7, #4]
	//In Stabilized Mode Reference is the angle (radians)
	ref.x = (receiver.channels[parameters.ROLL_CHANNEL]-1500) * 0.002f * parameters.STABILIZED_MAX_ROLL * DEG_TO_RAD;
 80015c4:	4b54      	ldr	r3, [pc, #336]	@ (8001718 <Stabilized_Mode+0x168>)
 80015c6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80015ca:	330c      	adds	r3, #12
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	3310      	adds	r3, #16
 80015d0:	443b      	add	r3, r7
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e0:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800171c <Stabilized_Mode+0x16c>
 80015e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001718 <Stabilized_Mode+0x168>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffdf 	bl	80005b8 <__aeabi_f2d>
 80015fa:	a345      	add	r3, pc, #276	@ (adr r3, 8001710 <Stabilized_Mode+0x160>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f832 	bl	8000668 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fb24 	bl	8000c58 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	4a43      	ldr	r2, [pc, #268]	@ (8001720 <Stabilized_Mode+0x170>)
 8001614:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[parameters.PITCH_CHANNEL]-1500) * 0.002f * parameters.STABILIZED_MAX_PITCH * DEG_TO_RAD;
 8001616:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <Stabilized_Mode+0x168>)
 8001618:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800161c:	330c      	adds	r3, #12
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	3310      	adds	r3, #16
 8001622:	443b      	add	r3, r7
 8001624:	885b      	ldrh	r3, [r3, #2]
 8001626:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800171c <Stabilized_Mode+0x16c>
 8001636:	ee27 7a87 	vmul.f32	s14, s15, s14
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <Stabilized_Mode+0x168>)
 800163c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	ee17 0a90 	vmov	r0, s15
 8001648:	f7fe ffb6 	bl	80005b8 <__aeabi_f2d>
 800164c:	a330      	add	r3, pc, #192	@ (adr r3, 8001710 <Stabilized_Mode+0x160>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff f809 	bl	8000668 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fafb 	bl	8000c58 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	4a2e      	ldr	r2, [pc, #184]	@ (8001720 <Stabilized_Mode+0x170>)
 8001666:	6053      	str	r3, [r2, #4]

	PID_Stabilized_Update(ref, attitude, dt);
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <Stabilized_Mode+0x174>)
 800166a:	ed93 5a00 	vldr	s10, [r3]
 800166e:	edd3 5a01 	vldr	s11, [r3, #4]
 8001672:	ed93 6a02 	vldr	s12, [r3, #8]
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <Stabilized_Mode+0x170>)
 8001678:	edd3 6a00 	vldr	s13, [r3]
 800167c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001680:	edd3 7a02 	vldr	s15, [r3, #8]
 8001684:	ed97 3a01 	vldr	s6, [r7, #4]
 8001688:	eef0 1a45 	vmov.f32	s3, s10
 800168c:	eeb0 2a65 	vmov.f32	s4, s11
 8001690:	eef0 2a46 	vmov.f32	s5, s12
 8001694:	eeb0 0a66 	vmov.f32	s0, s13
 8001698:	eef0 0a47 	vmov.f32	s1, s14
 800169c:	eeb0 1a67 	vmov.f32	s2, s15
 80016a0:	f001 f8e2 	bl	8002868 <PID_Stabilized_Update>

	functions[RUDDER] = (receiver.channels[parameters.YAW_CHANNEL]-1500.0f)/500.0f;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <Stabilized_Mode+0x168>)
 80016a6:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 80016aa:	330c      	adds	r3, #12
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	3310      	adds	r3, #16
 80016b0:	443b      	add	r3, r7
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001728 <Stabilized_Mode+0x178>
 80016c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016c4:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800172c <Stabilized_Mode+0x17c>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <Stabilized_Mode+0x180>)
 80016ce:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[parameters.THROTTLE_CHANNEL]-1500.0f)/500.0f;
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <Stabilized_Mode+0x168>)
 80016d4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80016d8:	330c      	adds	r3, #12
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	3310      	adds	r3, #16
 80016de:	443b      	add	r3, r7
 80016e0:	885b      	ldrh	r3, [r3, #2]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001728 <Stabilized_Mode+0x178>
 80016ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016f2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800172c <Stabilized_Mode+0x17c>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <Stabilized_Mode+0x180>)
 80016fc:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170a:	b004      	add	sp, #16
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	a252dd11 	.word	0xa252dd11
 8001714:	3f91df46 	.word	0x3f91df46
 8001718:	20000394 	.word	0x20000394
 800171c:	3b03126f 	.word	0x3b03126f
 8001720:	20000328 	.word	0x20000328
 8001724:	20000314 	.word	0x20000314
 8001728:	44bb8000 	.word	0x44bb8000
 800172c:	43fa0000 	.word	0x43fa0000
 8001730:	20000348 	.word	0x20000348
 8001734:	00000000 	.word	0x00000000

08001738 <Acro_Mode>:

void Acro_Mode(Sbus receiver, float dt){
 8001738:	b084      	sub	sp, #16
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	f107 0c10 	add.w	ip, r7, #16
 8001744:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001748:	ed87 0a01 	vstr	s0, [r7, #4]
	//In Stabilized Mode Reference is the angular velocity (radians/second)
	ref.x = (receiver.channels[parameters.ROLL_CHANNEL]-1500) * 0.002f * parameters.ACRO_ROLL_RATE * DEG_TO_RAD;
 800174c:	4b5e      	ldr	r3, [pc, #376]	@ (80018c8 <Acro_Mode+0x190>)
 800174e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001752:	330c      	adds	r3, #12
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3310      	adds	r3, #16
 8001758:	443b      	add	r3, r7
 800175a:	885b      	ldrh	r3, [r3, #2]
 800175c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80018cc <Acro_Mode+0x194>
 800176c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001770:	4b55      	ldr	r3, [pc, #340]	@ (80018c8 <Acro_Mode+0x190>)
 8001772:	edd3 7a02 	vldr	s15, [r3, #8]
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	ee17 0a90 	vmov	r0, s15
 800177e:	f7fe ff1b 	bl	80005b8 <__aeabi_f2d>
 8001782:	a34f      	add	r3, pc, #316	@ (adr r3, 80018c0 <Acro_Mode+0x188>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff6e 	bl	8000668 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa60 	bl	8000c58 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <Acro_Mode+0x198>)
 800179c:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[parameters.PITCH_CHANNEL]-1500) * 0.002f * parameters.ACRO_PITCH_RATE * DEG_TO_RAD;
 800179e:	4b4a      	ldr	r3, [pc, #296]	@ (80018c8 <Acro_Mode+0x190>)
 80017a0:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80017a4:	330c      	adds	r3, #12
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	3310      	adds	r3, #16
 80017aa:	443b      	add	r3, r7
 80017ac:	885b      	ldrh	r3, [r3, #2]
 80017ae:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ba:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80018cc <Acro_Mode+0x194>
 80017be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c2:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <Acro_Mode+0x190>)
 80017c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	ee17 0a90 	vmov	r0, s15
 80017d0:	f7fe fef2 	bl	80005b8 <__aeabi_f2d>
 80017d4:	a33a      	add	r3, pc, #232	@ (adr r3, 80018c0 <Acro_Mode+0x188>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff45 	bl	8000668 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fa37 	bl	8000c58 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <Acro_Mode+0x198>)
 80017ee:	6053      	str	r3, [r2, #4]
	ref.z = (receiver.channels[parameters.YAW_CHANNEL]-1500) * 0.002f * parameters.ACRO_YAW_RATE * DEG_TO_RAD;
 80017f0:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <Acro_Mode+0x190>)
 80017f2:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 80017f6:	330c      	adds	r3, #12
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	3310      	adds	r3, #16
 80017fc:	443b      	add	r3, r7
 80017fe:	885b      	ldrh	r3, [r3, #2]
 8001800:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80018cc <Acro_Mode+0x194>
 8001810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001814:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <Acro_Mode+0x190>)
 8001816:	edd3 7a04 	vldr	s15, [r3, #16]
 800181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fec9 	bl	80005b8 <__aeabi_f2d>
 8001826:	a326      	add	r3, pc, #152	@ (adr r3, 80018c0 <Acro_Mode+0x188>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe ff1c 	bl	8000668 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fa0e 	bl	8000c58 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <Acro_Mode+0x198>)
 8001840:	6093      	str	r3, [r2, #8]

	PID_Acro_Update(ref, imu.gyro, dt);
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <Acro_Mode+0x19c>)
 8001844:	ed93 5a04 	vldr	s10, [r3, #16]
 8001848:	edd3 5a05 	vldr	s11, [r3, #20]
 800184c:	ed93 6a06 	vldr	s12, [r3, #24]
 8001850:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <Acro_Mode+0x198>)
 8001852:	edd3 6a00 	vldr	s13, [r3]
 8001856:	ed93 7a01 	vldr	s14, [r3, #4]
 800185a:	edd3 7a02 	vldr	s15, [r3, #8]
 800185e:	ed97 3a01 	vldr	s6, [r7, #4]
 8001862:	eef0 1a45 	vmov.f32	s3, s10
 8001866:	eeb0 2a65 	vmov.f32	s4, s11
 800186a:	eef0 2a46 	vmov.f32	s5, s12
 800186e:	eeb0 0a66 	vmov.f32	s0, s13
 8001872:	eef0 0a47 	vmov.f32	s1, s14
 8001876:	eeb0 1a67 	vmov.f32	s2, s15
 800187a:	f001 f939 	bl	8002af0 <PID_Acro_Update>

	functions[THROTTLE] = (receiver.channels[parameters.THROTTLE_CHANNEL]-1500.0f)/500.0f;
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <Acro_Mode+0x190>)
 8001880:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001884:	330c      	adds	r3, #12
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	3310      	adds	r3, #16
 800188a:	443b      	add	r3, r7
 800188c:	885b      	ldrh	r3, [r3, #2]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80018d8 <Acro_Mode+0x1a0>
 800189a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800189e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80018dc <Acro_Mode+0x1a4>
 80018a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <Acro_Mode+0x1a8>)
 80018a8:	edc3 7a03 	vstr	s15, [r3, #12]

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018b6:	b004      	add	sp, #16
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	a252dd11 	.word	0xa252dd11
 80018c4:	3f91df46 	.word	0x3f91df46
 80018c8:	20000394 	.word	0x20000394
 80018cc:	3b03126f 	.word	0x3b03126f
 80018d0:	20000328 	.word	0x20000328
 80018d4:	20000990 	.word	0x20000990
 80018d8:	44bb8000 	.word	0x44bb8000
 80018dc:	43fa0000 	.word	0x43fa0000
 80018e0:	20000348 	.word	0x20000348

080018e4 <Manual_Mode>:

void Manual_Mode(Sbus receiver){
 80018e4:	b084      	sub	sp, #16
 80018e6:	b490      	push	{r4, r7}
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	f107 0408 	add.w	r4, r7, #8
 80018ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	functions[THROTTLE] = (receiver.channels[parameters.THROTTLE_CHANNEL]-1500.0f)/500.0f;
 80018f2:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <Manual_Mode+0xd8>)
 80018f4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80018f8:	330c      	adds	r3, #12
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	3304      	adds	r3, #4
 80018fe:	1d3a      	adds	r2, r7, #4
 8001900:	4413      	add	r3, r2
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80019c0 <Manual_Mode+0xdc>
 8001910:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001914:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80019c4 <Manual_Mode+0xe0>
 8001918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <Manual_Mode+0xe4>)
 800191e:	edc3 7a03 	vstr	s15, [r3, #12]
	functions[AILERONS] = (receiver.channels[parameters.ROLL_CHANNEL]-1500.0f)/500.0f;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <Manual_Mode+0xd8>)
 8001924:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001928:	330c      	adds	r3, #12
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3304      	adds	r3, #4
 800192e:	1d3a      	adds	r2, r7, #4
 8001930:	4413      	add	r3, r2
 8001932:	885b      	ldrh	r3, [r3, #2]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80019c0 <Manual_Mode+0xdc>
 8001940:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001944:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80019c4 <Manual_Mode+0xe0>
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <Manual_Mode+0xe4>)
 800194e:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = (receiver.channels[parameters.PITCH_CHANNEL]-1500.0f)/500.0f;
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <Manual_Mode+0xd8>)
 8001954:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8001958:	330c      	adds	r3, #12
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	3304      	adds	r3, #4
 800195e:	1d3a      	adds	r2, r7, #4
 8001960:	4413      	add	r3, r2
 8001962:	885b      	ldrh	r3, [r3, #2]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019c0 <Manual_Mode+0xdc>
 8001970:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001974:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019c4 <Manual_Mode+0xe0>
 8001978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <Manual_Mode+0xe4>)
 800197e:	edc3 7a02 	vstr	s15, [r3, #8]
	functions[RUDDER] = (receiver.channels[parameters.YAW_CHANNEL]-1500.0f)/500.0f;
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <Manual_Mode+0xd8>)
 8001984:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 8001988:	330c      	adds	r3, #12
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	3304      	adds	r3, #4
 800198e:	1d3a      	adds	r2, r7, #4
 8001990:	4413      	add	r3, r2
 8001992:	885b      	ldrh	r3, [r3, #2]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80019c0 <Manual_Mode+0xdc>
 80019a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019a4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80019c4 <Manual_Mode+0xe0>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <Manual_Mode+0xe4>)
 80019ae:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc90      	pop	{r4, r7}
 80019b8:	b004      	add	sp, #16
 80019ba:	4770      	bx	lr
 80019bc:	20000394 	.word	0x20000394
 80019c0:	44bb8000 	.word	0x44bb8000
 80019c4:	43fa0000 	.word	0x43fa0000
 80019c8:	20000348 	.word	0x20000348

080019cc <Process_Input>:

void Process_Input(Sbus receiver){
 80019cc:	b084      	sub	sp, #16
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f107 0c18 	add.w	ip, r7, #24
 80019d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Configure MODES
	if(receiver.channels[parameters.FLIGHT_MODE_CHANNEL] < 1200){
 80019dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <Process_Input+0x14c>)
 80019de:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80019e2:	330c      	adds	r3, #12
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	3318      	adds	r3, #24
 80019e8:	443b      	add	r3, r7
 80019ea:	885b      	ldrh	r3, [r3, #2]
 80019ec:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80019f0:	d203      	bcs.n	80019fa <Process_Input+0x2e>
		flight_mode = MANUAL_MODE;
 80019f2:	4b4a      	ldr	r3, [pc, #296]	@ (8001b1c <Process_Input+0x150>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e01c      	b.n	8001a34 <Process_Input+0x68>
	}
	else if (receiver.channels[parameters.FLIGHT_MODE_CHANNEL] >= 1200 &&
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <Process_Input+0x14c>)
 80019fc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001a00:	330c      	adds	r3, #12
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	3318      	adds	r3, #24
 8001a06:	443b      	add	r3, r7
 8001a08:	885b      	ldrh	r3, [r3, #2]
 8001a0a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001a0e:	d30e      	bcc.n	8001a2e <Process_Input+0x62>
			receiver.channels[parameters.FLIGHT_MODE_CHANNEL] < 1800){
 8001a10:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <Process_Input+0x14c>)
 8001a12:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001a16:	330c      	adds	r3, #12
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	3318      	adds	r3, #24
 8001a1c:	443b      	add	r3, r7
 8001a1e:	885b      	ldrh	r3, [r3, #2]
	else if (receiver.channels[parameters.FLIGHT_MODE_CHANNEL] >= 1200 &&
 8001a20:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001a24:	d203      	bcs.n	8001a2e <Process_Input+0x62>
		flight_mode = STABILIZED_MODE;
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <Process_Input+0x150>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e002      	b.n	8001a34 <Process_Input+0x68>
	}
	else{
		flight_mode = ACRO_MODE;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <Process_Input+0x150>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
	}

	//DISARM ON FAILSAFE
	if(receiver.failsafe_status == SBUS_SIGNAL_FAILSAFE){
 8001a34:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d108      	bne.n	8001a4e <Process_Input+0x82>
		flight_mode = STABILIZED_MODE;
 8001a3c:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <Process_Input+0x150>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
		arming = DISARMED;
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <Process_Input+0x154>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		functions[THROTTLE] = -1.0f;
 8001a48:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <Process_Input+0x158>)
 8001a4a:	4a37      	ldr	r2, [pc, #220]	@ (8001b28 <Process_Input+0x15c>)
 8001a4c:	60da      	str	r2, [r3, #12]
	}

	if(prev_flight_mode != flight_mode) { //Change in flight mode
 8001a4e:	4b37      	ldr	r3, [pc, #220]	@ (8001b2c <Process_Input+0x160>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <Process_Input+0x150>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d00b      	beq.n	8001a72 <Process_Input+0xa6>
		integral = (Vec3){0.0f, 0.0f, 0.0f}; //Reset integral part of PID
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <Process_Input+0x164>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <Process_Input+0x164>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <Process_Input+0x164>)
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	}


	//Set Arming

	if(arming == DISARMED &&
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <Process_Input+0x154>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11e      	bne.n	8001ab8 <Process_Input+0xec>
		receiver.channels[parameters.ARMING_CHANNEL] > 1500 &&
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <Process_Input+0x14c>)
 8001a7c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8001a80:	330c      	adds	r3, #12
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	3318      	adds	r3, #24
 8001a86:	443b      	add	r3, r7
 8001a88:	885b      	ldrh	r3, [r3, #2]
	if(arming == DISARMED &&
 8001a8a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d912      	bls.n	8001ab8 <Process_Input+0xec>
		arming_edge_detect == 1 &&
 8001a92:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <Process_Input+0x168>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
		receiver.channels[parameters.ARMING_CHANNEL] > 1500 &&
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10e      	bne.n	8001ab8 <Process_Input+0xec>
		receiver.channels[parameters.THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <Process_Input+0x14c>)
 8001a9c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	3318      	adds	r3, #24
 8001aa6:	443b      	add	r3, r7
 8001aa8:	885b      	ldrh	r3, [r3, #2]
		arming_edge_detect == 1 &&
 8001aaa:	f240 4219 	movw	r2, #1049	@ 0x419
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d802      	bhi.n	8001ab8 <Process_Input+0xec>
		receiver.channels[parameters.THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <Process_Input+0x154>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
	if(arming == ARMED && receiver.channels[parameters.ARMING_CHANNEL] <= 1500) arming = DISARMED;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <Process_Input+0x154>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10e      	bne.n	8001ade <Process_Input+0x112>
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <Process_Input+0x14c>)
 8001ac2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8001ac6:	330c      	adds	r3, #12
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	3318      	adds	r3, #24
 8001acc:	443b      	add	r3, r7
 8001ace:	885b      	ldrh	r3, [r3, #2]
 8001ad0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d802      	bhi.n	8001ade <Process_Input+0x112>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <Process_Input+0x154>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]


	arming_edge_detect = (receiver.channels[parameters.ARMING_CHANNEL] <= 1500)? 1:0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <Process_Input+0x14c>)
 8001ae0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	3318      	adds	r3, #24
 8001aea:	443b      	add	r3, r7
 8001aec:	885b      	ldrh	r3, [r3, #2]
 8001aee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001af2:	4293      	cmp	r3, r2
 8001af4:	bf94      	ite	ls
 8001af6:	2301      	movls	r3, #1
 8001af8:	2300      	movhi	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <Process_Input+0x168>)
 8001b00:	701a      	strb	r2, [r3, #0]
	prev_flight_mode = flight_mode;
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <Process_Input+0x150>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <Process_Input+0x160>)
 8001b08:	701a      	strb	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	b004      	add	sp, #16
 8001b16:	4770      	bx	lr
 8001b18:	20000394 	.word	0x20000394
 8001b1c:	20000334 	.word	0x20000334
 8001b20:	20000336 	.word	0x20000336
 8001b24:	20000348 	.word	0x20000348
 8001b28:	bf800000 	.word	0xbf800000
 8001b2c:	20000335 	.word	0x20000335
 8001b30:	20000388 	.word	0x20000388
 8001b34:	20000337 	.word	0x20000337

08001b38 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f004 f8bb 	bl	8005d04 <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 8001b8e:	f107 030e 	add.w	r3, r7, #14
 8001b92:	461a      	mov	r2, r3
 8001b94:	2175      	movs	r1, #117	@ 0x75
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fa64 	bl	8002064 <ICM42688_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <ICM42688_Begin+0x72>
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	e05d      	b.n	8001c66 <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b47      	cmp	r3, #71	@ 0x47
 8001bae:	d001      	beq.n	8001bb4 <ICM42688_Begin+0x7c>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e058      	b.n	8001c66 <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 8001bb4:	2326      	movs	r3, #38	@ 0x26
 8001bb6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 8001bb8:	f107 030e 	add.w	r3, r7, #14
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	214f      	movs	r1, #79	@ 0x4f
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fa27 	bl	8002014 <ICM42688_Write>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <ICM42688_Begin+0x9c>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	e048      	b.n	8001c66 <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2206      	movs	r2, #6
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 8001be4:	2346      	movs	r3, #70	@ 0x46
 8001be6:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001be8:	f107 030e 	add.w	r3, r7, #14
 8001bec:	461a      	mov	r2, r3
 8001bee:	2150      	movs	r1, #80	@ 0x50
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fa0f 	bl	8002014 <ICM42688_Write>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <ICM42688_Begin+0xcc>
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	e030      	b.n	8001c66 <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2206      	movs	r2, #6
 8001c10:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f863 	bl	8001ce0 <ICM42688_Set_Interrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <ICM42688_Begin+0xf0>
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	e01e      	b.n	8001c66 <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f820 	bl	8001c6e <ICM42688_Set_Filters>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <ICM42688_Begin+0x104>
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	e014      	b.n	8001c66 <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 8001c40:	f107 030e 	add.w	r3, r7, #14
 8001c44:	461a      	mov	r2, r3
 8001c46:	214e      	movs	r1, #78	@ 0x4e
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f9e3 	bl	8002014 <ICM42688_Write>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <ICM42688_Begin+0x124>
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	e004      	b.n	8001c66 <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 8001c76:	2300      	movs	r3, #0
 8001c78:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 8001c7a:	f107 030e 	add.w	r3, r7, #14
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2151      	movs	r1, #81	@ 0x51
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f9c6 	bl	8002014 <ICM42688_Write>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <ICM42688_Set_Filters+0x28>
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	e020      	b.n	8001cd8 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 8001c96:	2300      	movs	r3, #0
 8001c98:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 8001c9a:	f107 030e 	add.w	r3, r7, #14
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2153      	movs	r1, #83	@ 0x53
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f9b6 	bl	8002014 <ICM42688_Write>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <ICM42688_Set_Filters+0x48>
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	e010      	b.n	8001cd8 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 8001cb6:	2333      	movs	r3, #51	@ 0x33
 8001cb8:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 8001cba:	f107 030e 	add.w	r3, r7, #14
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2152      	movs	r1, #82	@ 0x52
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f9a6 	bl	8002014 <ICM42688_Write>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <ICM42688_Set_Filters+0x68>
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	e000      	b.n	8001cd8 <ICM42688_Set_Filters+0x6a>

	return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001ce8:	2303      	movs	r3, #3
 8001cea:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 8001cec:	f107 030e 	add.w	r3, r7, #14
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2114      	movs	r1, #20
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f98d 	bl	8002014 <ICM42688_Write>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <ICM42688_Set_Interrupts+0x28>
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	e031      	b.n	8001d6c <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001d08:	f107 030e 	add.w	r3, r7, #14
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2164      	movs	r1, #100	@ 0x64
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f9a7 	bl	8002064 <ICM42688_Read>
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <ICM42688_Set_Interrupts+0x44>
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	e023      	b.n	8001d6c <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	f023 0310 	bic.w	r3, r3, #16
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 8001d2e:	f107 030e 	add.w	r3, r7, #14
 8001d32:	461a      	mov	r2, r3
 8001d34:	2164      	movs	r1, #100	@ 0x64
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f96c 	bl	8002014 <ICM42688_Write>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <ICM42688_Set_Interrupts+0x6a>
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	e010      	b.n	8001d6c <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 8001d4e:	f107 030e 	add.w	r3, r7, #14
 8001d52:	461a      	mov	r2, r3
 8001d54:	2165      	movs	r1, #101	@ 0x65
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f95c 	bl	8002014 <ICM42688_Write>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <ICM42688_Set_Interrupts+0x8a>
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	e000      	b.n	8001d6c <ICM42688_Set_Interrupts+0x8c>

	return status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	0000      	movs	r0, r0
	...

08001d78 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 8001d9a:	8afb      	ldrh	r3, [r7, #22]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da4:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8002008 <ICM42688_Process_Buffer+0x290>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001e08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e14:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 800200c <ICM42688_Process_Buffer+0x294>
 8001e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001e22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	eeb1 7a67 	vneg.f32	s14, s15
 8001e32:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800200c <ICM42688_Process_Buffer+0x294>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001e40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800200c <ICM42688_Process_Buffer+0x294>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 8001ea8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002010 <ICM42688_Process_Buffer+0x298>
 8001eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001ec2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ece:	eeb1 7a67 	vneg.f32	s14, s15
 8001ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002010 <ICM42688_Process_Buffer+0x298>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001ee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eec:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002010 <ICM42688_Process_Buffer+0x298>
 8001ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -3.13812327; //Calibration
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb5a 	bl	80005b8 <__aeabi_f2d>
 8001f04:	a338      	add	r3, pc, #224	@ (adr r3, 8001fe8 <ICM42688_Process_Buffer+0x270>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9f7 	bl	80002fc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe9f 	bl	8000c58 <__aeabi_d2f>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
	device->gyro.y -= 0.0449692011;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb47 	bl	80005b8 <__aeabi_f2d>
 8001f2a:	a331      	add	r3, pc, #196	@ (adr r3, 8001ff0 <ICM42688_Process_Buffer+0x278>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe f9e2 	bl	80002f8 <__aeabi_dsub>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe8c 	bl	8000c58 <__aeabi_d2f>
 8001f40:	4602      	mov	r2, r0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.46484378;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fb34 	bl	80005b8 <__aeabi_f2d>
 8001f50:	a329      	add	r3, pc, #164	@ (adr r3, 8001ff8 <ICM42688_Process_Buffer+0x280>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9cf 	bl	80002f8 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fe79 	bl	8000c58 <__aeabi_d2f>
 8001f66:	4602      	mov	r2, r0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]

	device->gyro.x *= DEG_TO_RAD;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fb21 	bl	80005b8 <__aeabi_f2d>
 8001f76:	a322      	add	r3, pc, #136	@ (adr r3, 8002000 <ICM42688_Process_Buffer+0x288>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb74 	bl	8000668 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe66 	bl	8000c58 <__aeabi_d2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
	device->gyro.y *= DEG_TO_RAD;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fb0e 	bl	80005b8 <__aeabi_f2d>
 8001f9c:	a318      	add	r3, pc, #96	@ (adr r3, 8002000 <ICM42688_Process_Buffer+0x288>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb61 	bl	8000668 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fe53 	bl	8000c58 <__aeabi_d2f>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	615a      	str	r2, [r3, #20]
	device->gyro.z *= DEG_TO_RAD;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fafb 	bl	80005b8 <__aeabi_f2d>
 8001fc2:	a30f      	add	r3, pc, #60	@ (adr r3, 8002000 <ICM42688_Process_Buffer+0x288>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fb4e 	bl	8000668 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fe40 	bl	8000c58 <__aeabi_d2f>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]

}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	5f7bbb8d 	.word	0x5f7bbb8d
 8001fec:	40091ae0 	.word	0x40091ae0
 8001ff0:	001a7e9d 	.word	0x001a7e9d
 8001ff4:	3fa70634 	.word	0x3fa70634
 8001ff8:	20365653 	.word	0x20365653
 8001ffc:	3fddc000 	.word	0x3fddc000
 8002000:	a252dd11 	.word	0xa252dd11
 8002004:	3f91df46 	.word	0x3f91df46
 8002008:	43047ae1 	.word	0x43047ae1
 800200c:	46000000 	.word	0x46000000
 8002010:	42033333 	.word	0x42033333

08002014 <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	460b      	mov	r3, r1
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	753b      	strb	r3, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2110      	movs	r1, #16
 8002030:	480b      	ldr	r0, [pc, #44]	@ (8002060 <ICM42688_Write+0x4c>)
 8002032:	f005 fcaf 	bl	8007994 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	f107 0114 	add.w	r1, r7, #20
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	2202      	movs	r2, #2
 8002044:	f008 f9bf 	bl	800a3c6 <HAL_SPI_Transmit>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2110      	movs	r1, #16
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <ICM42688_Write+0x4c>)
 8002052:	f005 fc9f 	bl	8007994 <HAL_GPIO_WritePin>

	return status;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020000 	.word	0x40020000

08002064 <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	460b      	mov	r3, r1
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8002072:	7afb      	ldrb	r3, [r7, #11]
 8002074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002078:	b2db      	uxtb	r3, r3
 800207a:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	2110      	movs	r1, #16
 8002080:	4815      	ldr	r0, [pc, #84]	@ (80020d8 <ICM42688_Read+0x74>)
 8002082:	f005 fc87 	bl	8007994 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f107 0116 	add.w	r1, r7, #22
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	2201      	movs	r2, #1
 8002094:	f008 f997 	bl	800a3c6 <HAL_SPI_Transmit>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <ICM42688_Read+0x42>
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	e014      	b.n	80020d0 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	2201      	movs	r2, #1
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	f008 fafe 	bl	800a6b2 <HAL_SPI_Receive>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <ICM42688_Read+0x60>
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	e005      	b.n	80020d0 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2110      	movs	r1, #16
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <ICM42688_Read+0x74>)
 80020ca:	f005 fc63 	bl	8007994 <HAL_GPIO_WritePin>

	return status;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40020000 	.word	0x40020000

080020dc <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 80020e4:	239d      	movs	r3, #157	@ 0x9d
 80020e6:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2110      	movs	r1, #16
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <ICM42688_Read_DMA+0x44>)
 80020ee:	f005 fc51 	bl	8007994 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80020fc:	f107 0108 	add.w	r1, r7, #8
 8002100:	230f      	movs	r3, #15
 8002102:	f008 fe2d 	bl	800ad60 <HAL_SPI_TransmitReceive_DMA>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <ICM42688_Read_DMA+0x38>
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	e000      	b.n	8002116 <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 8002114:	7dfb      	ldrb	r3, [r7, #23]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40020000 	.word	0x40020000

08002124 <Output_Begin>:
uint16_t outputs[8];
float functions[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
extern Arming arming;
extern ParameterTable parameters;

HAL_StatusTypeDef Output_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 800212e:	2100      	movs	r1, #0
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f009 fc6f 	bl	800ba14 <HAL_TIM_PWM_Start>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <Output_Begin+0x20>
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	e04d      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8002144:	2104      	movs	r1, #4
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f009 fc64 	bl	800ba14 <HAL_TIM_PWM_Start>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <Output_Begin+0x36>
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	e042      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 800215a:	2108      	movs	r1, #8
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f009 fc59 	bl	800ba14 <HAL_TIM_PWM_Start>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <Output_Begin+0x4c>
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	e037      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 8002170:	210c      	movs	r1, #12
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f009 fc4e 	bl	800ba14 <HAL_TIM_PWM_Start>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <Output_Begin+0x62>
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	e02c      	b.n	80021e0 <Output_Begin+0xbc>

	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8002186:	2100      	movs	r1, #0
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f009 fc43 	bl	800ba14 <HAL_TIM_PWM_Start>
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <Output_Begin+0x78>
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	e021      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 800219c:	2104      	movs	r1, #4
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f009 fc38 	bl	800ba14 <HAL_TIM_PWM_Start>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <Output_Begin+0x8e>
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	e016      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80021b2:	2108      	movs	r1, #8
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f009 fc2d 	bl	800ba14 <HAL_TIM_PWM_Start>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <Output_Begin+0xa4>
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	e00b      	b.n	80021e0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80021c8:	210c      	movs	r1, #12
 80021ca:	6838      	ldr	r0, [r7, #0]
 80021cc:	f009 fc22 	bl	800ba14 <HAL_TIM_PWM_Start>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <Output_Begin+0xba>
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	e000      	b.n	80021e0 <Output_Begin+0xbc>

	return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8f;
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002270 <Servo_Move+0x88>
 80021fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002206:	ee17 3a90 	vmov	r3, s15
 800220a:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <Servo_Move+0x34>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	8afa      	ldrh	r2, [r7, #22]
 8002218:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800221a:	e023      	b.n	8002264 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d104      	bne.n	800222c <Servo_Move+0x44>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	8afb      	ldrh	r3, [r7, #22]
 8002228:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800222a:	e01b      	b.n	8002264 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d104      	bne.n	800223c <Servo_Move+0x54>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	8afb      	ldrh	r3, [r7, #22]
 8002238:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800223a:	e013      	b.n	8002264 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d104      	bne.n	800224c <Servo_Move+0x64>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	8afb      	ldrh	r3, [r7, #22]
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800224a:	e00b      	b.n	8002264 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d104      	bne.n	800225c <Servo_Move+0x74>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	8afb      	ldrh	r3, [r7, #22]
 8002258:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800225a:	e003      	b.n	8002264 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	3fe66666 	.word	0x3fe66666

08002274 <Output_Update>:

void Output_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]

	if(arming == DISARMED) functions[THROTTLE] = -1.0f;
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <Output_Update+0x20>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <Output_Update+0x18>
 8002286:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <Output_Update+0x24>)
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <Output_Update+0x28>)
 800228a:	60da      	str	r2, [r3, #12]

	//Clamp to [-1,1] range
	for(int i = 0; i < 10; i++) {
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e030      	b.n	80022f4 <Output_Update+0x80>
 8002292:	bf00      	nop
 8002294:	20000336 	.word	0x20000336
 8002298:	20000348 	.word	0x20000348
 800229c:	bf800000 	.word	0xbf800000
		if(functions[i]<-1.0f) functions[i] = -1.0f;
 80022a0:	4ad8      	ldr	r2, [pc, #864]	@ (8002604 <Output_Update+0x390>)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80022b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d505      	bpl.n	80022c6 <Output_Update+0x52>
 80022ba:	4ad2      	ldr	r2, [pc, #840]	@ (8002604 <Output_Update+0x390>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	4ad1      	ldr	r2, [pc, #836]	@ (8002608 <Output_Update+0x394>)
 80022c4:	601a      	str	r2, [r3, #0]
		if(functions[i]>1.0f) functions[i] = 1.0f;
 80022c6:	4acf      	ldr	r2, [pc, #828]	@ (8002604 <Output_Update+0x390>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	dd06      	ble.n	80022ee <Output_Update+0x7a>
 80022e0:	4ac8      	ldr	r2, [pc, #800]	@ (8002604 <Output_Update+0x390>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80022ec:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	ddd2      	ble.n	80022a0 <Output_Update+0x2c>
	}

	outputs[0] = functions[parameters.OUT1_FUNCTION] * (parameters.OUT1_MAX - parameters.OUT1_MIN)*(-parameters.OUT1_REVERSE+0.5) + parameters.OUT1_TRIM;
 80022fa:	4bc4      	ldr	r3, [pc, #784]	@ (800260c <Output_Update+0x398>)
 80022fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002300:	4ac0      	ldr	r2, [pc, #768]	@ (8002604 <Output_Update+0x390>)
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	4bc0      	ldr	r3, [pc, #768]	@ (800260c <Output_Update+0x398>)
 800230c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8002310:	461a      	mov	r2, r3
 8002312:	4bbe      	ldr	r3, [pc, #760]	@ (800260c <Output_Update+0x398>)
 8002314:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002326:	ee17 0a90 	vmov	r0, s15
 800232a:	f7fe f945 	bl	80005b8 <__aeabi_f2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	4bb6      	ldr	r3, [pc, #728]	@ (800260c <Output_Update+0x398>)
 8002334:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002338:	425b      	negs	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f92a 	bl	8000594 <__aeabi_i2d>
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	4bb2      	ldr	r3, [pc, #712]	@ (8002610 <Output_Update+0x39c>)
 8002346:	f7fd ffd9 	bl	80002fc <__adddf3>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fe f989 	bl	8000668 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4614      	mov	r4, r2
 800235c:	461d      	mov	r5, r3
 800235e:	4bab      	ldr	r3, [pc, #684]	@ (800260c <Output_Update+0x398>)
 8002360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f915 	bl	8000594 <__aeabi_i2d>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4620      	mov	r0, r4
 8002370:	4629      	mov	r1, r5
 8002372:	f7fd ffc3 	bl	80002fc <__adddf3>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc4b 	bl	8000c18 <__aeabi_d2uiz>
 8002382:	4603      	mov	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	4ba3      	ldr	r3, [pc, #652]	@ (8002614 <Output_Update+0x3a0>)
 8002388:	801a      	strh	r2, [r3, #0]
	outputs[1] = functions[parameters.OUT2_FUNCTION] * (parameters.OUT2_MAX - parameters.OUT2_MIN)*(-parameters.OUT2_REVERSE+0.5) + parameters.OUT2_TRIM;
 800238a:	4ba0      	ldr	r3, [pc, #640]	@ (800260c <Output_Update+0x398>)
 800238c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002390:	4a9c      	ldr	r2, [pc, #624]	@ (8002604 <Output_Update+0x390>)
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4b9c      	ldr	r3, [pc, #624]	@ (800260c <Output_Update+0x398>)
 800239c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b9a      	ldr	r3, [pc, #616]	@ (800260c <Output_Update+0x398>)
 80023a4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	ee17 0a90 	vmov	r0, s15
 80023ba:	f7fe f8fd 	bl	80005b8 <__aeabi_f2d>
 80023be:	4604      	mov	r4, r0
 80023c0:	460d      	mov	r5, r1
 80023c2:	4b92      	ldr	r3, [pc, #584]	@ (800260c <Output_Update+0x398>)
 80023c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80023c8:	425b      	negs	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8e2 	bl	8000594 <__aeabi_i2d>
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002610 <Output_Update+0x39c>)
 80023d6:	f7fd ff91 	bl	80002fc <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	f7fe f941 	bl	8000668 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4614      	mov	r4, r2
 80023ec:	461d      	mov	r5, r3
 80023ee:	4b87      	ldr	r3, [pc, #540]	@ (800260c <Output_Update+0x398>)
 80023f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8cd 	bl	8000594 <__aeabi_i2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fd ff7b 	bl	80002fc <__adddf3>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fc03 	bl	8000c18 <__aeabi_d2uiz>
 8002412:	4603      	mov	r3, r0
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b7f      	ldr	r3, [pc, #508]	@ (8002614 <Output_Update+0x3a0>)
 8002418:	805a      	strh	r2, [r3, #2]
	outputs[2] = functions[parameters.OUT3_FUNCTION] * (parameters.OUT3_MAX - parameters.OUT3_MIN)*(-parameters.OUT3_REVERSE+0.5) + parameters.OUT3_TRIM;
 800241a:	4b7c      	ldr	r3, [pc, #496]	@ (800260c <Output_Update+0x398>)
 800241c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002420:	4a78      	ldr	r2, [pc, #480]	@ (8002604 <Output_Update+0x390>)
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	ed93 7a00 	vldr	s14, [r3]
 800242a:	4b78      	ldr	r3, [pc, #480]	@ (800260c <Output_Update+0x398>)
 800242c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8002430:	461a      	mov	r2, r3
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <Output_Update+0x398>)
 8002434:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	ee17 0a90 	vmov	r0, s15
 800244a:	f7fe f8b5 	bl	80005b8 <__aeabi_f2d>
 800244e:	4604      	mov	r4, r0
 8002450:	460d      	mov	r5, r1
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <Output_Update+0x398>)
 8002454:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002458:	425b      	negs	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f89a 	bl	8000594 <__aeabi_i2d>
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <Output_Update+0x39c>)
 8002466:	f7fd ff49 	bl	80002fc <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fe f8f9 	bl	8000668 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	4b63      	ldr	r3, [pc, #396]	@ (800260c <Output_Update+0x398>)
 8002480:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f885 	bl	8000594 <__aeabi_i2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fd ff33 	bl	80002fc <__adddf3>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe fbbb 	bl	8000c18 <__aeabi_d2uiz>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002614 <Output_Update+0x3a0>)
 80024a8:	809a      	strh	r2, [r3, #4]
	outputs[3] = functions[parameters.OUT4_FUNCTION] * (parameters.OUT4_MAX - parameters.OUT4_MIN)*(-parameters.OUT4_REVERSE+0.5) + parameters.OUT4_TRIM;
 80024aa:	4b58      	ldr	r3, [pc, #352]	@ (800260c <Output_Update+0x398>)
 80024ac:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80024b0:	4a54      	ldr	r2, [pc, #336]	@ (8002604 <Output_Update+0x390>)
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <Output_Update+0x398>)
 80024bc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b52      	ldr	r3, [pc, #328]	@ (800260c <Output_Update+0x398>)
 80024c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	ee17 0a90 	vmov	r0, s15
 80024da:	f7fe f86d 	bl	80005b8 <__aeabi_f2d>
 80024de:	4604      	mov	r4, r0
 80024e0:	460d      	mov	r5, r1
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <Output_Update+0x398>)
 80024e4:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80024e8:	425b      	negs	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f852 	bl	8000594 <__aeabi_i2d>
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <Output_Update+0x39c>)
 80024f6:	f7fd ff01 	bl	80002fc <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f8b1 	bl	8000668 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4614      	mov	r4, r2
 800250c:	461d      	mov	r5, r3
 800250e:	4b3f      	ldr	r3, [pc, #252]	@ (800260c <Output_Update+0x398>)
 8002510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f83d 	bl	8000594 <__aeabi_i2d>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4620      	mov	r0, r4
 8002520:	4629      	mov	r1, r5
 8002522:	f7fd feeb 	bl	80002fc <__adddf3>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fb73 	bl	8000c18 <__aeabi_d2uiz>
 8002532:	4603      	mov	r3, r0
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <Output_Update+0x3a0>)
 8002538:	80da      	strh	r2, [r3, #6]
	outputs[4] = functions[parameters.OUT5_FUNCTION] * (parameters.OUT5_MAX - parameters.OUT5_MIN)*(-parameters.OUT5_REVERSE+0.5) + parameters.OUT5_TRIM;
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <Output_Update+0x398>)
 800253c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002540:	4a30      	ldr	r2, [pc, #192]	@ (8002604 <Output_Update+0x390>)
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	ed93 7a00 	vldr	s14, [r3]
 800254a:	4b30      	ldr	r3, [pc, #192]	@ (800260c <Output_Update+0x398>)
 800254c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002550:	461a      	mov	r2, r3
 8002552:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <Output_Update+0x398>)
 8002554:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	ee17 0a90 	vmov	r0, s15
 800256a:	f7fe f825 	bl	80005b8 <__aeabi_f2d>
 800256e:	4604      	mov	r4, r0
 8002570:	460d      	mov	r5, r1
 8002572:	4b26      	ldr	r3, [pc, #152]	@ (800260c <Output_Update+0x398>)
 8002574:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002578:	425b      	negs	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe f80a 	bl	8000594 <__aeabi_i2d>
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <Output_Update+0x39c>)
 8002586:	f7fd feb9 	bl	80002fc <__adddf3>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fe f869 	bl	8000668 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4614      	mov	r4, r2
 800259c:	461d      	mov	r5, r3
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <Output_Update+0x398>)
 80025a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd fff5 	bl	8000594 <__aeabi_i2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fea3 	bl	80002fc <__adddf3>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fb2b 	bl	8000c18 <__aeabi_d2uiz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <Output_Update+0x3a0>)
 80025c8:	811a      	strh	r2, [r3, #8]
	outputs[5] = functions[parameters.OUT6_FUNCTION] * (parameters.OUT6_MAX - parameters.OUT6_MIN)*(-parameters.OUT6_REVERSE+0.5) + parameters.OUT6_TRIM;
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <Output_Update+0x398>)
 80025cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002604 <Output_Update+0x390>)
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <Output_Update+0x398>)
 80025dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <Output_Update+0x398>)
 80025e4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f6:	ee17 0a90 	vmov	r0, s15
 80025fa:	f7fd ffdd 	bl	80005b8 <__aeabi_f2d>
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	e009      	b.n	8002618 <Output_Update+0x3a4>
 8002604:	20000348 	.word	0x20000348
 8002608:	bf800000 	.word	0xbf800000
 800260c:	20000394 	.word	0x20000394
 8002610:	3fe00000 	.word	0x3fe00000
 8002614:	20000338 	.word	0x20000338
 8002618:	4b8f      	ldr	r3, [pc, #572]	@ (8002858 <Output_Update+0x5e4>)
 800261a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800261e:	425b      	negs	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ffb7 	bl	8000594 <__aeabi_i2d>
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b8c      	ldr	r3, [pc, #560]	@ (800285c <Output_Update+0x5e8>)
 800262c:	f7fd fe66 	bl	80002fc <__adddf3>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fe f816 	bl	8000668 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4b84      	ldr	r3, [pc, #528]	@ (8002858 <Output_Update+0x5e4>)
 8002646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ffa2 	bl	8000594 <__aeabi_i2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7fd fe50 	bl	80002fc <__adddf3>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fad8 	bl	8000c18 <__aeabi_d2uiz>
 8002668:	4603      	mov	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <Output_Update+0x5ec>)
 800266e:	815a      	strh	r2, [r3, #10]
	outputs[6] = functions[parameters.OUT7_FUNCTION] * (parameters.OUT7_MAX - parameters.OUT7_MIN)*(-parameters.OUT7_REVERSE+0.5) + parameters.OUT7_TRIM;
 8002670:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <Output_Update+0x5e4>)
 8002672:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002676:	4a7b      	ldr	r2, [pc, #492]	@ (8002864 <Output_Update+0x5f0>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	ed93 7a00 	vldr	s14, [r3]
 8002680:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <Output_Update+0x5e4>)
 8002682:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8002686:	461a      	mov	r2, r3
 8002688:	4b73      	ldr	r3, [pc, #460]	@ (8002858 <Output_Update+0x5e4>)
 800268a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f7fd ff8a 	bl	80005b8 <__aeabi_f2d>
 80026a4:	4604      	mov	r4, r0
 80026a6:	460d      	mov	r5, r1
 80026a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002858 <Output_Update+0x5e4>)
 80026aa:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80026ae:	425b      	negs	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff6f 	bl	8000594 <__aeabi_i2d>
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b68      	ldr	r3, [pc, #416]	@ (800285c <Output_Update+0x5e8>)
 80026bc:	f7fd fe1e 	bl	80002fc <__adddf3>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fd ffce 	bl	8000668 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <Output_Update+0x5e4>)
 80026d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff5a 	bl	8000594 <__aeabi_i2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4620      	mov	r0, r4
 80026e6:	4629      	mov	r1, r5
 80026e8:	f7fd fe08 	bl	80002fc <__adddf3>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa90 	bl	8000c18 <__aeabi_d2uiz>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <Output_Update+0x5ec>)
 80026fe:	819a      	strh	r2, [r3, #12]
	outputs[7] = functions[parameters.OUT8_FUNCTION] * (parameters.OUT8_MAX - parameters.OUT8_MIN)*(-parameters.OUT8_REVERSE+0.5) + parameters.OUT8_TRIM;
 8002700:	4b55      	ldr	r3, [pc, #340]	@ (8002858 <Output_Update+0x5e4>)
 8002702:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002706:	4a57      	ldr	r2, [pc, #348]	@ (8002864 <Output_Update+0x5f0>)
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <Output_Update+0x5e4>)
 8002712:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8002716:	461a      	mov	r2, r3
 8002718:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <Output_Update+0x5e4>)
 800271a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	ee17 0a90 	vmov	r0, s15
 8002730:	f7fd ff42 	bl	80005b8 <__aeabi_f2d>
 8002734:	4604      	mov	r4, r0
 8002736:	460d      	mov	r5, r1
 8002738:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <Output_Update+0x5e4>)
 800273a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800273e:	425b      	negs	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ff27 	bl	8000594 <__aeabi_i2d>
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b44      	ldr	r3, [pc, #272]	@ (800285c <Output_Update+0x5e8>)
 800274c:	f7fd fdd6 	bl	80002fc <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f7fd ff86 	bl	8000668 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <Output_Update+0x5e4>)
 8002766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd ff12 	bl	8000594 <__aeabi_i2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fd fdc0 	bl	80002fc <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe fa48 	bl	8000c18 <__aeabi_d2uiz>
 8002788:	4603      	mov	r3, r0
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b34      	ldr	r3, [pc, #208]	@ (8002860 <Output_Update+0x5ec>)
 800278e:	81da      	strh	r2, [r3, #14]


	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 8002790:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <Output_Update+0x5ec>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279c:	eeb0 0a67 	vmov.f32	s0, s15
 80027a0:	2100      	movs	r1, #0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fd20 	bl	80021e8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <Output_Update+0x5ec>)
 80027aa:	885b      	ldrh	r3, [r3, #2]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	2104      	movs	r1, #4
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fd14 	bl	80021e8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 80027c0:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <Output_Update+0x5ec>)
 80027c2:	889b      	ldrh	r3, [r3, #4]
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027cc:	eeb0 0a67 	vmov.f32	s0, s15
 80027d0:	2108      	movs	r1, #8
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fd08 	bl	80021e8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <Output_Update+0x5ec>)
 80027da:	88db      	ldrh	r3, [r3, #6]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	210c      	movs	r1, #12
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fcfc 	bl	80021e8 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <Output_Update+0x5ec>)
 80027f2:	891b      	ldrh	r3, [r3, #8]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002800:	2100      	movs	r1, #0
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f7ff fcf0 	bl	80021e8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 8002808:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <Output_Update+0x5ec>)
 800280a:	895b      	ldrh	r3, [r3, #10]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eeb0 0a67 	vmov.f32	s0, s15
 8002818:	2104      	movs	r1, #4
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f7ff fce4 	bl	80021e8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <Output_Update+0x5ec>)
 8002822:	899b      	ldrh	r3, [r3, #12]
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282c:	eeb0 0a67 	vmov.f32	s0, s15
 8002830:	2108      	movs	r1, #8
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	f7ff fcd8 	bl	80021e8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <Output_Update+0x5ec>)
 800283a:	89db      	ldrh	r3, [r3, #14]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	210c      	movs	r1, #12
 800284a:	6838      	ldr	r0, [r7, #0]
 800284c:	f7ff fccc 	bl	80021e8 <Servo_Move>
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bdb0      	pop	{r4, r5, r7, pc}
 8002858:	20000394 	.word	0x20000394
 800285c:	3fe00000 	.word	0x3fe00000
 8002860:	20000338 	.word	0x20000338
 8002864:	20000348 	.word	0x20000348

08002868 <PID_Stabilized_Update>:
extern float functions[10];

Vec3 ref_prev, filtered_error, filtered_error_prev, integral = {0.0f, 0.0f, 0.0f};
extern ParameterTable parameters;

void PID_Stabilized_Update(Vec3 ref, Vec3 attitude, float dt){
 8002868:	b580      	push	{r7, lr}
 800286a:	b090      	sub	sp, #64	@ 0x40
 800286c:	af00      	add	r7, sp, #0
 800286e:	eeb0 5a40 	vmov.f32	s10, s0
 8002872:	eef0 5a60 	vmov.f32	s11, s1
 8002876:	eeb0 6a41 	vmov.f32	s12, s2
 800287a:	eef0 6a61 	vmov.f32	s13, s3
 800287e:	eeb0 7a42 	vmov.f32	s14, s4
 8002882:	eef0 7a62 	vmov.f32	s15, s5
 8002886:	ed87 3a01 	vstr	s6, [r7, #4]
 800288a:	ed87 5a05 	vstr	s10, [r7, #20]
 800288e:	edc7 5a06 	vstr	s11, [r7, #24]
 8002892:	ed87 6a07 	vstr	s12, [r7, #28]
 8002896:	edc7 6a02 	vstr	s13, [r7, #8]
 800289a:	ed87 7a03 	vstr	s14, [r7, #12]
 800289e:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 80028a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80028a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80028b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80028b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80028c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Low Pass Filter for derivative of error (rate)
	float tau = 1/(2*M_PI*2);
 80028d2:	4b81      	ldr	r3, [pc, #516]	@ (8002ad8 <PID_Stabilized_Update+0x270>)
 80028d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float alpha = tau/(tau+dt);
 80028d6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80028e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	filtered_error.x = (1-alpha) * error.x + alpha * filtered_error_prev.x;
 80028ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028f2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80028f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002902:	4b76      	ldr	r3, [pc, #472]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002904:	edd3 6a00 	vldr	s13, [r3]
 8002908:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800290c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002914:	4b72      	ldr	r3, [pc, #456]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002916:	edc3 7a00 	vstr	s15, [r3]
	filtered_error.y = (1-alpha) * error.y + alpha * filtered_error_prev.y;
 800291a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800291e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002922:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002926:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800292a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292e:	4b6b      	ldr	r3, [pc, #428]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002930:	edd3 6a01 	vldr	s13, [r3, #4]
 8002934:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002940:	4b67      	ldr	r3, [pc, #412]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002942:	edc3 7a01 	vstr	s15, [r3, #4]
	filtered_error.z = (1-alpha) * error.z + alpha * filtered_error_prev.z;
 8002946:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800294a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800294e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002952:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295a:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <PID_Stabilized_Update+0x274>)
 800295c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002960:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 800296e:	edc3 7a02 	vstr	s15, [r3, #8]

	integral.x += error.x * dt;
 8002972:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 8002974:	ed93 7a00 	vldr	s14, [r3]
 8002978:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800297c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	4b56      	ldr	r3, [pc, #344]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 800298e:	4b55      	ldr	r3, [pc, #340]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 8002990:	ed93 7a01 	vldr	s14, [r3, #4]
 8002994:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8002998:	edd7 7a01 	vldr	s15, [r7, #4]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 80029a6:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 80029aa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 80029ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80029b0:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80029b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	4b48      	ldr	r3, [pc, #288]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 80029c2:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = parameters.ROLL_KP_STABILIZED*error.x + parameters.ROLL_KD_STABILIZED*(filtered_error.x-filtered_error_prev.x)/dt + parameters.ROLL_KI_STABILIZED*integral.x;
 80029c6:	4b48      	ldr	r3, [pc, #288]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 80029c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80029cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b44      	ldr	r3, [pc, #272]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 80029d6:	edd3 6a05 	vldr	s13, [r3, #20]
 80029da:	4b41      	ldr	r3, [pc, #260]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 80029dc:	ed93 6a00 	vldr	s12, [r3]
 80029e0:	4b3e      	ldr	r3, [pc, #248]	@ (8002adc <PID_Stabilized_Update+0x274>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80029ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80029f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 80029fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a00:	4b38      	ldr	r3, [pc, #224]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002a10:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = parameters.PITCH_KP_STABILIZED*error.y + parameters.PITCH_KD_STABILIZED*(filtered_error.y-filtered_error_prev.y)/dt + parameters.PITCH_KI_STABILIZED*integral.y;
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 8002a16:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002a1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 8002a24:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002a2a:	ed93 6a01 	vldr	s12, [r3, #4]
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002a30:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a38:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002a3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <PID_Stabilized_Update+0x280>)
 8002a4a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002a4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <PID_Stabilized_Update+0x27c>)
 8002a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002a5e:	edc3 7a02 	vstr	s15, [r3, #8]

	functions[AILERONS] /= M_PI_2;
 8002a62:	4b22      	ldr	r3, [pc, #136]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fda6 	bl	80005b8 <__aeabi_f2d>
 8002a6c:	a318      	add	r3, pc, #96	@ (adr r3, 8002ad0 <PID_Stabilized_Update+0x268>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd ff23 	bl	80008bc <__aeabi_ddiv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f8eb 	bl	8000c58 <__aeabi_d2f>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002a86:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 8002a88:	4b18      	ldr	r3, [pc, #96]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd93 	bl	80005b8 <__aeabi_f2d>
 8002a92:	a30f      	add	r3, pc, #60	@ (adr r3, 8002ad0 <PID_Stabilized_Update+0x268>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd ff10 	bl	80008bc <__aeabi_ddiv>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe f8d8 	bl	8000c58 <__aeabi_d2f>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4a10      	ldr	r2, [pc, #64]	@ (8002aec <PID_Stabilized_Update+0x284>)
 8002aac:	6093      	str	r3, [r2, #8]

	filtered_error_prev = (Vec3) {filtered_error.x, filtered_error.y, filtered_error.z};
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <PID_Stabilized_Update+0x278>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4808      	ldr	r0, [pc, #32]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002abc:	6001      	str	r1, [r0, #0]
 8002abe:	4907      	ldr	r1, [pc, #28]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002ac0:	604a      	str	r2, [r1, #4]
 8002ac2:	4a06      	ldr	r2, [pc, #24]	@ (8002adc <PID_Stabilized_Update+0x274>)
 8002ac4:	6093      	str	r3, [r2, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	3740      	adds	r7, #64	@ 0x40
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	54442d18 	.word	0x54442d18
 8002ad4:	3ff921fb 	.word	0x3ff921fb
 8002ad8:	3da2f983 	.word	0x3da2f983
 8002adc:	2000037c 	.word	0x2000037c
 8002ae0:	20000370 	.word	0x20000370
 8002ae4:	20000388 	.word	0x20000388
 8002ae8:	20000394 	.word	0x20000394
 8002aec:	20000348 	.word	0x20000348

08002af0 <PID_Acro_Update>:

void PID_Acro_Update(Vec3 ref, Vec3 rates, float dt){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b090      	sub	sp, #64	@ 0x40
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	eeb0 5a40 	vmov.f32	s10, s0
 8002afa:	eef0 5a60 	vmov.f32	s11, s1
 8002afe:	eeb0 6a41 	vmov.f32	s12, s2
 8002b02:	eef0 6a61 	vmov.f32	s13, s3
 8002b06:	eeb0 7a42 	vmov.f32	s14, s4
 8002b0a:	eef0 7a62 	vmov.f32	s15, s5
 8002b0e:	ed87 3a01 	vstr	s6, [r7, #4]
 8002b12:	ed87 5a05 	vstr	s10, [r7, #20]
 8002b16:	edc7 5a06 	vstr	s11, [r7, #24]
 8002b1a:	ed87 6a07 	vstr	s12, [r7, #28]
 8002b1e:	edc7 6a02 	vstr	s13, [r7, #8]
 8002b22:	ed87 7a03 	vstr	s14, [r7, #12]
 8002b26:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - rates.x), (ref.y - rates.y), (ref.z + rates.z)};
 8002b2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002b3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b46:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8002b4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Low Pass Filter for derivative of error (rate)
	float tau = 1/(2*M_PI*0.4);
 8002b5a:	4b99      	ldr	r3, [pc, #612]	@ (8002dc0 <PID_Acro_Update+0x2d0>)
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float alpha = tau/(tau+dt);
 8002b5e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6a:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b72:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	filtered_error.x = (1-alpha) * error.x + alpha * filtered_error_prev.x;
 8002b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b7a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002b8c:	edd3 6a00 	vldr	s13, [r3]
 8002b90:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
	filtered_error.y = (1-alpha) * error.y + alpha * filtered_error_prev.y;
 8002ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ba6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002baa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb6:	4b83      	ldr	r3, [pc, #524]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002bb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bbc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002bca:	edc3 7a01 	vstr	s15, [r3, #4]
	filtered_error.z = (1-alpha) * error.z + alpha * filtered_error_prev.z;
 8002bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bd2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be2:	4b78      	ldr	r3, [pc, #480]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002be4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002be8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf4:	4b74      	ldr	r3, [pc, #464]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002bf6:	edc3 7a02 	vstr	s15, [r3, #8]

	integral.x += error.x * dt;
 8002bfa:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002bfc:	ed93 7a00 	vldr	s14, [r3]
 8002c00:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c10:	4b6e      	ldr	r3, [pc, #440]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 8002c16:	4b6d      	ldr	r3, [pc, #436]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c1c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8002c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2c:	4b67      	ldr	r3, [pc, #412]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c2e:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c34:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c38:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	4b60      	ldr	r3, [pc, #384]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c4a:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = parameters.ROLL_KP_ACRO*error.x + parameters.ROLL_KD_ACRO*(filtered_error.x-filtered_error_prev.x)/dt + parameters.ROLL_KI_ACRO*integral.x;
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002c50:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002c54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002c5e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8002c62:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002c64:	ed93 6a00 	vldr	s12, [r3]
 8002c68:	4b56      	ldr	r3, [pc, #344]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c72:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002c76:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c7a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c82:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002c84:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	4b4f      	ldr	r3, [pc, #316]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002c98:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = parameters.PITCH_KP_ACRO*error.y + parameters.PITCH_KD_ACRO*(filtered_error.y-filtered_error_prev.y)/dt + parameters.PITCH_KI_ACRO*integral.y;
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002c9e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002ca2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002cac:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002cb2:	ed93 6a01 	vldr	s12, [r3, #4]
 8002cb6:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002cb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cc0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002cc4:	edd7 6a01 	vldr	s13, [r7, #4]
 8002cc8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002cd2:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dcc <PID_Acro_Update+0x2dc>)
 8002cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002ce6:	edc3 7a02 	vstr	s15, [r3, #8]
	functions[RUDDER] = parameters.YAW_KP_ACRO*error.z + parameters.YAW_KD_ACRO*(filtered_error.z-filtered_error_prev.z)/dt;
 8002cea:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002cec:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8002cf0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <PID_Acro_Update+0x2e0>)
 8002cfa:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002cfe:	4b32      	ldr	r3, [pc, #200]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002d00:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d04:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d0e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002d12:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d16:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d20:	edc3 7a04 	vstr	s15, [r3, #16]

	functions[AILERONS] /= M_PI_2;
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc45 	bl	80005b8 <__aeabi_f2d>
 8002d2e:	a322      	add	r3, pc, #136	@ (adr r3, 8002db8 <PID_Acro_Update+0x2c8>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fdc2 	bl	80008bc <__aeabi_ddiv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd ff8a 	bl	8000c58 <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d48:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 8002d4a:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc32 	bl	80005b8 <__aeabi_f2d>
 8002d54:	a318      	add	r3, pc, #96	@ (adr r3, 8002db8 <PID_Acro_Update+0x2c8>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fdaf 	bl	80008bc <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd ff77 	bl	8000c58 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d6e:	6093      	str	r3, [r2, #8]
	functions[RUDDER] /= M_PI_2;
 8002d70:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fc1f 	bl	80005b8 <__aeabi_f2d>
 8002d7a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002db8 <PID_Acro_Update+0x2c8>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fd9c 	bl	80008bc <__aeabi_ddiv>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff64 	bl	8000c58 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <PID_Acro_Update+0x2e4>)
 8002d94:	6113      	str	r3, [r2, #16]

	filtered_error_prev = (Vec3) {filtered_error.x, filtered_error.y, filtered_error.z};
 8002d96:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <PID_Acro_Update+0x2d8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4808      	ldr	r0, [pc, #32]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002da4:	6001      	str	r1, [r0, #0]
 8002da6:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002da8:	604a      	str	r2, [r1, #4]
 8002daa:	4a06      	ldr	r2, [pc, #24]	@ (8002dc4 <PID_Acro_Update+0x2d4>)
 8002dac:	6093      	str	r3, [r2, #8]
}
 8002dae:	bf00      	nop
 8002db0:	3740      	adds	r7, #64	@ 0x40
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	54442d18 	.word	0x54442d18
 8002dbc:	3ff921fb 	.word	0x3ff921fb
 8002dc0:	3ecbb7e4 	.word	0x3ecbb7e4
 8002dc4:	2000037c 	.word	0x2000037c
 8002dc8:	20000370 	.word	0x20000370
 8002dcc:	20000388 	.word	0x20000388
 8002dd0:	20000394 	.word	0x20000394
 8002dd4:	20000348 	.word	0x20000348

08002dd8 <flash_empty>:

ParameterTable parameters;



uint8_t flash_empty(uint32_t addr, size_t size) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
	uint32_t *p = (uint32_t*)addr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60bb      	str	r3, [r7, #8]
	for (size_t i = 0; i < size/4; i++) {
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e00c      	b.n	8002e06 <flash_empty+0x2e>
		if (p[i] != 0xFFFFFFFF) {
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4413      	add	r3, r2
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d001      	beq.n	8002e00 <flash_empty+0x28>
			return 0; // at least one word programmed
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e008      	b.n	8002e12 <flash_empty+0x3a>
	for (size_t i = 0; i < size/4; i++) {
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3ed      	bcc.n	8002dec <flash_empty+0x14>
		}
	}
	return 1; // all erased
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <Load_Parameters>:

//Returns error if memory is empty
HAL_StatusTypeDef Load_Parameters(ParameterTable *parameters){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	ParameterTable *flashParams = (ParameterTable*)PARAMS_FLASH_ADDR;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <Load_Parameters+0x34>)
 8002e2a:	60fb      	str	r3, [r7, #12]

	if(flash_empty((uint32_t)flashParams, sizeof(ParameterTable))){
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2194      	movs	r1, #148	@ 0x94
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ffd1 	bl	8002dd8 <flash_empty>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <Load_Parameters+0x20>
		return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e005      	b.n	8002e4c <Load_Parameters+0x2c>
	}

	memcpy(parameters, flashParams, sizeof(ParameterTable));
 8002e40:	2294      	movs	r2, #148	@ 0x94
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f010 fed2 	bl	8013bee <memcpy>

	return HAL_OK;
 8002e4a:	2300      	movs	r3, #0

}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	08060000 	.word	0x08060000

08002e58 <Save_Parameters>:

HAL_StatusTypeDef Save_Parameters(ParameterTable *parameters){
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef flashErase;
	uint32_t sectorError;

	status = HAL_FLASH_Unlock();
 8002e60:	f004 f9a4 	bl	80071ac <HAL_FLASH_Unlock>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(status != HAL_OK) return status;
 8002e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <Save_Parameters+0x20>
 8002e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e76:	e04a      	b.n	8002f0e <Save_Parameters+0xb6>

	flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
	flashErase.Sector = FLASH_SECTOR_7;
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	617b      	str	r3, [r7, #20]
	flashErase.NbSectors = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
	flashErase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61fb      	str	r3, [r7, #28]

	if(HAL_FLASHEx_Erase(&flashErase, &sectorError) != HAL_OK) return HAL_FLASH_GetError();
 8002e88:	f107 020c 	add.w	r2, r7, #12
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fb06 	bl	80074a4 <HAL_FLASHEx_Erase>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <Save_Parameters+0x50>
 8002e9e:	f004 f9b7 	bl	8007210 <HAL_FLASH_GetError>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e032      	b.n	8002f0e <Save_Parameters+0xb6>


	uint32_t *src = (uint32_t*)parameters;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	623b      	str	r3, [r7, #32]
	uint32_t addr = PARAMS_FLASH_ADDR;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <Save_Parameters+0xc0>)
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < sizeof(ParameterTable)/4; i++){
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb4:	e01a      	b.n	8002eec <Save_Parameters+0x94>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, src[i]);
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	6a3a      	ldr	r2, [r7, #32]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	4615      	mov	r5, r2
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f004 f913 	bl	80070f8 <HAL_FLASH_Program>
		if(status != HAL_OK) return status;
 8002ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <Save_Parameters+0x88>
 8002eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ede:	e016      	b.n	8002f0e <Save_Parameters+0xb6>
		addr += 4;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < sizeof(ParameterTable)/4; i++){
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	3301      	adds	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	2b24      	cmp	r3, #36	@ 0x24
 8002ef0:	d9e1      	bls.n	8002eb6 <Save_Parameters+0x5e>
	}

	status = HAL_FLASH_Lock();
 8002ef2:	f004 f97d 	bl	80071f0 <HAL_FLASH_Lock>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(status != HAL_OK) return status;
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <Save_Parameters+0xb2>
 8002f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f08:	e001      	b.n	8002f0e <Save_Parameters+0xb6>

	return status;
 8002f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3730      	adds	r7, #48	@ 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08060000 	.word	0x08060000

08002f1c <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	HAL_UART_AbortReceive(huart); //Sbus is already sending before initialising, cancel reception to avoid HAL_ERROR
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f009 fcec 	bl	800c904 <HAL_UART_AbortReceive>

	status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2219      	movs	r2, #25
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f00a ff01 	bl	800dd3a <HAL_UARTEx_ReceiveToIdle_DMA>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <Sbus_Begin+0x2a>
		return status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	e000      	b.n	8002f48 <Sbus_Begin+0x2c>
	}

	return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	3bc0      	subs	r3, #192	@ 0xc0
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002fc8 <sbus_raw_to_us+0x78>
 8002f6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f6e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002fcc <sbus_raw_to_us+0x7c>
 8002f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f76:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002fc8 <sbus_raw_to_us+0x78>
 8002f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f86:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002fc8 <sbus_raw_to_us+0x78>
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	d501      	bpl.n	8002f98 <sbus_raw_to_us+0x48>
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <sbus_raw_to_us+0x80>)
 8002f96:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 8002f98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f9c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002fd4 <sbus_raw_to_us+0x84>
 8002fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	dd01      	ble.n	8002fae <sbus_raw_to_us+0x5e>
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <sbus_raw_to_us+0x88>)
 8002fac:	60fb      	str	r3, [r7, #12]
	return us;
 8002fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb6:	ee17 3a90 	vmov	r3, s15
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	447a0000 	.word	0x447a0000
 8002fcc:	44c80000 	.word	0x44c80000
 8002fd0:	447a0000 	.word	0x447a0000
 8002fd4:	44fa0000 	.word	0x44fa0000
 8002fd8:	44fa0000 	.word	0x44fa0000

08002fdc <Sbus_decode>:

void Sbus_decode(Sbus *receiver){
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08c      	sub	sp, #48	@ 0x30
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((receiver->buffer[1]    |receiver->buffer[2]<<8)                           & 0x07FF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	b21b      	sxth	r3, r3
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((receiver->buffer[2]>>3 |receiver->buffer[3]<<5)                           & 0x07FF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	789b      	ldrb	r3, [r3, #2]
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	b21a      	sxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	78db      	ldrb	r3, [r3, #3]
 8003010:	b21b      	sxth	r3, r3
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	b21b      	sxth	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b21b      	sxth	r3, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003020:	b29b      	uxth	r3, r3
 8003022:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((receiver->buffer[3]>>6 |receiver->buffer[4]<<2 |receiver->buffer[5]<<10)  & 0x07FF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	b2db      	uxtb	r3, r3
 800302c:	b21a      	sxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	791b      	ldrb	r3, [r3, #4]
 8003032:	b21b      	sxth	r3, r3
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	b21b      	sxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b21a      	sxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	795b      	ldrb	r3, [r3, #5]
 8003040:	b21b      	sxth	r3, r3
 8003042:	029b      	lsls	r3, r3, #10
 8003044:	b21b      	sxth	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b21b      	sxth	r3, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003050:	b29b      	uxth	r3, r3
 8003052:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((receiver->buffer[5]>>1 |receiver->buffer[6]<<7)                           & 0x07FF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	b21a      	sxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	799b      	ldrb	r3, [r3, #6]
 8003062:	b21b      	sxth	r3, r3
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21b      	sxth	r3, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003072:	b29b      	uxth	r3, r3
 8003074:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((receiver->buffer[6]>>4 |receiver->buffer[7]<<4)                           & 0x07FF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	799b      	ldrb	r3, [r3, #6]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	b2db      	uxtb	r3, r3
 800307e:	b21a      	sxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	79db      	ldrb	r3, [r3, #7]
 8003084:	b21b      	sxth	r3, r3
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	b21b      	sxth	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b21b      	sxth	r3, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003094:	b29b      	uxth	r3, r3
 8003096:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((receiver->buffer[7]>>7 |receiver->buffer[8]<<1 |receiver->buffer[9]<<9)   & 0x07FF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	79db      	ldrb	r3, [r3, #7]
 800309c:	09db      	lsrs	r3, r3, #7
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7a1b      	ldrb	r3, [r3, #8]
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	4313      	orrs	r3, r2
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7a5b      	ldrb	r3, [r3, #9]
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b21b      	sxth	r3, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((receiver->buffer[9]>>2 |receiver->buffer[10]<<6)                          & 0x07FF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7a5b      	ldrb	r3, [r3, #9]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7a9b      	ldrb	r3, [r3, #10]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	b21b      	sxth	r3, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	b21b      	sxth	r3, r3
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((receiver->buffer[10]>>5|receiver->buffer[11]<<3)                          & 0x07FF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7a9b      	ldrb	r3, [r3, #10]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7adb      	ldrb	r3, [r3, #11]
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	4313      	orrs	r3, r2
 8003100:	b21b      	sxth	r3, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003108:	b29b      	uxth	r3, r3
 800310a:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((receiver->buffer[12]   |receiver->buffer[13]<<8)                          & 0x07FF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
 8003110:	b21a      	sxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7b5b      	ldrb	r3, [r3, #13]
 8003116:	b21b      	sxth	r3, r3
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	b21b      	sxth	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b21b      	sxth	r3, r3
 8003120:	b29b      	uxth	r3, r3
 8003122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003126:	b29b      	uxth	r3, r3
 8003128:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((receiver->buffer[13]>>3|receiver->buffer[14]<<5)                          & 0x07FF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7b5b      	ldrb	r3, [r3, #13]
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	b21a      	sxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7b9b      	ldrb	r3, [r3, #14]
 8003138:	b21b      	sxth	r3, r3
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	b21b      	sxth	r3, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	b21b      	sxth	r3, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003148:	b29b      	uxth	r3, r3
 800314a:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((receiver->buffer[14]>>6|receiver->buffer[15]<<2|receiver->buffer[16]<<10) & 0x07FF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7b9b      	ldrb	r3, [r3, #14]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	b2db      	uxtb	r3, r3
 8003154:	b21a      	sxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7bdb      	ldrb	r3, [r3, #15]
 800315a:	b21b      	sxth	r3, r3
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	b21b      	sxth	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b21a      	sxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7c1b      	ldrb	r3, [r3, #16]
 8003168:	b21b      	sxth	r3, r3
 800316a:	029b      	lsls	r3, r3, #10
 800316c:	b21b      	sxth	r3, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	b21b      	sxth	r3, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003178:	b29b      	uxth	r3, r3
 800317a:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((receiver->buffer[16]>>1|receiver->buffer[17]<<7)                          & 0x07FF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7c1b      	ldrb	r3, [r3, #16]
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	b21a      	sxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7c5b      	ldrb	r3, [r3, #17]
 800318a:	b21b      	sxth	r3, r3
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	b21b      	sxth	r3, r3
 8003190:	4313      	orrs	r3, r2
 8003192:	b21b      	sxth	r3, r3
 8003194:	b29b      	uxth	r3, r3
 8003196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319a:	b29b      	uxth	r3, r3
 800319c:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((receiver->buffer[17]>>4|receiver->buffer[18]<<4)                          & 0x07FF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7c5b      	ldrb	r3, [r3, #17]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7c9b      	ldrb	r3, [r3, #18]
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031bc:	b29b      	uxth	r3, r3
 80031be:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((receiver->buffer[18]>>7|receiver->buffer[19]<<1|receiver->buffer[20]<<9)  & 0x07FF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7c9b      	ldrb	r3, [r3, #18]
 80031c4:	09db      	lsrs	r3, r3, #7
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7cdb      	ldrb	r3, [r3, #19]
 80031ce:	b21b      	sxth	r3, r3
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7d1b      	ldrb	r3, [r3, #20]
 80031dc:	b21b      	sxth	r3, r3
 80031de:	025b      	lsls	r3, r3, #9
 80031e0:	b21b      	sxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((receiver->buffer[20]>>2|receiver->buffer[21]<<6)                          & 0x07FF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7d1b      	ldrb	r3, [r3, #20]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7d5b      	ldrb	r3, [r3, #21]
 80031fe:	b21b      	sxth	r3, r3
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	b21b      	sxth	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b21b      	sxth	r3, r3
 8003208:	b29b      	uxth	r3, r3
 800320a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320e:	b29b      	uxth	r3, r3
 8003210:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((receiver->buffer[21]>>5|receiver->buffer[22]<<3)                          & 0x07FF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7d5b      	ldrb	r3, [r3, #21]
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b21a      	sxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7d9b      	ldrb	r3, [r3, #22]
 8003220:	b21b      	sxth	r3, r3
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b21b      	sxth	r3, r3
 800322a:	b29b      	uxth	r3, r3
 800322c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003230:	b29b      	uxth	r3, r3
 8003232:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (receiver->buffer[23] & (1 << 0)) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7ddb      	ldrb	r3, [r3, #23]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <Sbus_decode+0x26a>
    	raw_channels[16] = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003244:	e001      	b.n	800324a <Sbus_decode+0x26e>
    }
    else {
    	raw_channels[16] = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (receiver->buffer[23] & (1 << 1)) {
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7ddb      	ldrb	r3, [r3, #23]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <Sbus_decode+0x280>
    	raw_channels[17] = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800325a:	e001      	b.n	8003260 <Sbus_decode+0x284>
    }
    else {
    	raw_channels[17] = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    // Failsafe
	receiver->failsafe_status = SBUS_SIGNAL_OK;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	if (receiver->buffer[23] & (1 << 2)) {
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7ddb      	ldrb	r3, [r3, #23]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <Sbus_decode+0x2a0>
		receiver->failsafe_status = SBUS_SIGNAL_LOST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

	if (receiver->buffer[23] & (1 << 3)) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7ddb      	ldrb	r3, [r3, #23]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <Sbus_decode+0x2b4>
		receiver->failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2203      	movs	r2, #3
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

    for(int i = 0; i < 18; i++){
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003294:	e014      	b.n	80032c0 <Sbus_decode+0x2e4>
    	receiver->channels[i] = sbus_raw_to_us(raw_channels[i]);
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	3330      	adds	r3, #48	@ 0x30
 800329c:	443b      	add	r3, r7
 800329e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe54 	bl	8002f50 <sbus_raw_to_us>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b299      	uxth	r1, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b0:	330c      	adds	r3, #12
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	460a      	mov	r2, r1
 80032b8:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 18; i++){
 80032ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032bc:	3301      	adds	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	2b11      	cmp	r3, #17
 80032c4:	dde7      	ble.n	8003296 <Sbus_decode+0x2ba>
    }
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3730      	adds	r7, #48	@ 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <atoFunction>:

uint8_t usbRxBuffer[100];
uint8_t usbTxBuffer[20];
extern ParameterTable parameters;

Output_Functions atoFunction(char *str){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	if(strcmp(str, "NONE") == 0) return NONE;
 80032d8:	491d      	ldr	r1, [pc, #116]	@ (8003350 <atoFunction+0x80>)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fc ffa0 	bl	8000220 <strcmp>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <atoFunction+0x1a>
 80032e6:	2300      	movs	r3, #0
 80032e8:	e02d      	b.n	8003346 <atoFunction+0x76>
	else if(strcmp(str, "AILERONS") == 0) return AILERONS;
 80032ea:	491a      	ldr	r1, [pc, #104]	@ (8003354 <atoFunction+0x84>)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fc ff97 	bl	8000220 <strcmp>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <atoFunction+0x2c>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e024      	b.n	8003346 <atoFunction+0x76>
	else if(strcmp(str, "ELEVATOR") == 0) return ELEVATOR;
 80032fc:	4916      	ldr	r1, [pc, #88]	@ (8003358 <atoFunction+0x88>)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fc ff8e 	bl	8000220 <strcmp>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <atoFunction+0x3e>
 800330a:	2302      	movs	r3, #2
 800330c:	e01b      	b.n	8003346 <atoFunction+0x76>
	else if(strcmp(str, "THROTTLE") == 0) return THROTTLE;
 800330e:	4913      	ldr	r1, [pc, #76]	@ (800335c <atoFunction+0x8c>)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fc ff85 	bl	8000220 <strcmp>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <atoFunction+0x50>
 800331c:	2303      	movs	r3, #3
 800331e:	e012      	b.n	8003346 <atoFunction+0x76>
	else if(strcmp(str, "RUDDER") == 0) return RUDDER;
 8003320:	490f      	ldr	r1, [pc, #60]	@ (8003360 <atoFunction+0x90>)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fc ff7c 	bl	8000220 <strcmp>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <atoFunction+0x62>
 800332e:	2304      	movs	r3, #4
 8003330:	e009      	b.n	8003346 <atoFunction+0x76>
	else if(strcmp(str, "FLAP") == 0) return FLAP;
 8003332:	490c      	ldr	r1, [pc, #48]	@ (8003364 <atoFunction+0x94>)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fc ff73 	bl	8000220 <strcmp>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <atoFunction+0x74>
 8003340:	2305      	movs	r3, #5
 8003342:	e000      	b.n	8003346 <atoFunction+0x76>

	return NONE;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	080175f0 	.word	0x080175f0
 8003354:	080175f8 	.word	0x080175f8
 8003358:	08017604 	.word	0x08017604
 800335c:	08017610 	.word	0x08017610
 8003360:	0801761c 	.word	0x0801761c
 8003364:	08017624 	.word	0x08017624

08003368 <Set_Param_By_Name>:

void Set_Param_By_Name(char *name, char *value){
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "STABILIZED_MAX_ROLL") == 0) parameters.STABILIZED_MAX_ROLL = atof(value);
 8003372:	49af      	ldr	r1, [pc, #700]	@ (8003630 <Set_Param_By_Name+0x2c8>)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fc ff53 	bl	8000220 <strcmp>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10d      	bne.n	800339c <Set_Param_By_Name+0x34>
 8003380:	6838      	ldr	r0, [r7, #0]
 8003382:	f00e fe61 	bl	8012048 <atof>
 8003386:	ec53 2b10 	vmov	r2, r3, d0
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f7fd fc63 	bl	8000c58 <__aeabi_d2f>
 8003392:	4603      	mov	r3, r0
 8003394:	4aa7      	ldr	r2, [pc, #668]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003396:	6013      	str	r3, [r2, #0]
	else if(strcmp(name, "PITCH_CHANNEL") == 0) parameters.PITCH_CHANNEL = atoi(value);
	else if(strcmp(name, "YAW_CHANNEL") == 0) parameters.YAW_CHANNEL = atoi(value);
	else if(strcmp(name, "ARMING_CHANNEL") == 0) parameters.ARMING_CHANNEL = atoi(value);
	else if(strcmp(name, "FLIGHT_MODE_CHANNEL") == 0) parameters.FLIGHT_MODE_CHANNEL = atoi(value);

}
 8003398:	f000 bccd 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "STABILIZED_MAX_PITCH") == 0) parameters.STABILIZED_MAX_PITCH = atof(value);
 800339c:	49a6      	ldr	r1, [pc, #664]	@ (8003638 <Set_Param_By_Name+0x2d0>)
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fc ff3e 	bl	8000220 <strcmp>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <Set_Param_By_Name+0x5e>
 80033aa:	6838      	ldr	r0, [r7, #0]
 80033ac:	f00e fe4c 	bl	8012048 <atof>
 80033b0:	ec53 2b10 	vmov	r2, r3, d0
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fc4e 	bl	8000c58 <__aeabi_d2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a9d      	ldr	r2, [pc, #628]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80033c0:	6053      	str	r3, [r2, #4]
}
 80033c2:	f000 bcb8 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ACRO_ROLL_RATE") == 0) parameters.ACRO_ROLL_RATE = atof(value);
 80033c6:	499d      	ldr	r1, [pc, #628]	@ (800363c <Set_Param_By_Name+0x2d4>)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fc ff29 	bl	8000220 <strcmp>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <Set_Param_By_Name+0x88>
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f00e fe37 	bl	8012048 <atof>
 80033da:	ec53 2b10 	vmov	r2, r3, d0
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	f7fd fc39 	bl	8000c58 <__aeabi_d2f>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4a92      	ldr	r2, [pc, #584]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80033ea:	6093      	str	r3, [r2, #8]
}
 80033ec:	f000 bca3 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ACRO_PITCH_RATE") == 0) parameters.ACRO_PITCH_RATE = atof(value);
 80033f0:	4993      	ldr	r1, [pc, #588]	@ (8003640 <Set_Param_By_Name+0x2d8>)
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fc ff14 	bl	8000220 <strcmp>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10d      	bne.n	800341a <Set_Param_By_Name+0xb2>
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f00e fe22 	bl	8012048 <atof>
 8003404:	ec53 2b10 	vmov	r2, r3, d0
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fc24 	bl	8000c58 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
 8003412:	4a88      	ldr	r2, [pc, #544]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003414:	60d3      	str	r3, [r2, #12]
}
 8003416:	f000 bc8e 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ACRO_YAW_RATE") == 0) parameters.ACRO_YAW_RATE = atof(value);
 800341a:	498a      	ldr	r1, [pc, #552]	@ (8003644 <Set_Param_By_Name+0x2dc>)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fc feff 	bl	8000220 <strcmp>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <Set_Param_By_Name+0xdc>
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f00e fe0d 	bl	8012048 <atof>
 800342e:	ec53 2b10 	vmov	r2, r3, d0
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f7fd fc0f 	bl	8000c58 <__aeabi_d2f>
 800343a:	4603      	mov	r3, r0
 800343c:	4a7d      	ldr	r2, [pc, #500]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 800343e:	6113      	str	r3, [r2, #16]
}
 8003440:	f000 bc79 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KD_STABILIZED") == 0) parameters.ROLL_KD_STABILIZED = atof(value);
 8003444:	4980      	ldr	r1, [pc, #512]	@ (8003648 <Set_Param_By_Name+0x2e0>)
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fc feea 	bl	8000220 <strcmp>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10d      	bne.n	800346e <Set_Param_By_Name+0x106>
 8003452:	6838      	ldr	r0, [r7, #0]
 8003454:	f00e fdf8 	bl	8012048 <atof>
 8003458:	ec53 2b10 	vmov	r2, r3, d0
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fbfa 	bl	8000c58 <__aeabi_d2f>
 8003464:	4603      	mov	r3, r0
 8003466:	4a73      	ldr	r2, [pc, #460]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003468:	6153      	str	r3, [r2, #20]
}
 800346a:	f000 bc64 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KP_STABILIZED") == 0) parameters.ROLL_KP_STABILIZED = atof(value);
 800346e:	4977      	ldr	r1, [pc, #476]	@ (800364c <Set_Param_By_Name+0x2e4>)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fc fed5 	bl	8000220 <strcmp>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <Set_Param_By_Name+0x130>
 800347c:	6838      	ldr	r0, [r7, #0]
 800347e:	f00e fde3 	bl	8012048 <atof>
 8003482:	ec53 2b10 	vmov	r2, r3, d0
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fbe5 	bl	8000c58 <__aeabi_d2f>
 800348e:	4603      	mov	r3, r0
 8003490:	4a68      	ldr	r2, [pc, #416]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003492:	6193      	str	r3, [r2, #24]
}
 8003494:	f000 bc4f 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KI_STABILIZED") == 0) parameters.ROLL_KI_STABILIZED = atof(value);
 8003498:	496d      	ldr	r1, [pc, #436]	@ (8003650 <Set_Param_By_Name+0x2e8>)
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fc fec0 	bl	8000220 <strcmp>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <Set_Param_By_Name+0x15a>
 80034a6:	6838      	ldr	r0, [r7, #0]
 80034a8:	f00e fdce 	bl	8012048 <atof>
 80034ac:	ec53 2b10 	vmov	r2, r3, d0
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd fbd0 	bl	8000c58 <__aeabi_d2f>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80034bc:	61d3      	str	r3, [r2, #28]
}
 80034be:	f000 bc3a 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KD_STABILIZED") == 0) parameters.PITCH_KD_STABILIZED = atof(value);
 80034c2:	4964      	ldr	r1, [pc, #400]	@ (8003654 <Set_Param_By_Name+0x2ec>)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fc feab 	bl	8000220 <strcmp>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <Set_Param_By_Name+0x184>
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f00e fdb9 	bl	8012048 <atof>
 80034d6:	ec53 2b10 	vmov	r2, r3, d0
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f7fd fbbb 	bl	8000c58 <__aeabi_d2f>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a53      	ldr	r2, [pc, #332]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80034e6:	6213      	str	r3, [r2, #32]
}
 80034e8:	f000 bc25 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KP_STABILIZED") == 0) parameters.PITCH_KP_STABILIZED = atof(value);
 80034ec:	495a      	ldr	r1, [pc, #360]	@ (8003658 <Set_Param_By_Name+0x2f0>)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fc fe96 	bl	8000220 <strcmp>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <Set_Param_By_Name+0x1ae>
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f00e fda4 	bl	8012048 <atof>
 8003500:	ec53 2b10 	vmov	r2, r3, d0
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fba6 	bl	8000c58 <__aeabi_d2f>
 800350c:	4603      	mov	r3, r0
 800350e:	4a49      	ldr	r2, [pc, #292]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003510:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8003512:	f000 bc10 	b.w	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KI_STABILIZED") == 0) parameters.PITCH_KI_STABILIZED = atof(value);
 8003516:	4951      	ldr	r1, [pc, #324]	@ (800365c <Set_Param_By_Name+0x2f4>)
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fc fe81 	bl	8000220 <strcmp>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10c      	bne.n	800353e <Set_Param_By_Name+0x1d6>
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f00e fd8f 	bl	8012048 <atof>
 800352a:	ec53 2b10 	vmov	r2, r3, d0
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb91 	bl	8000c58 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	4a3e      	ldr	r2, [pc, #248]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 800353a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800353c:	e3fb      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KD_ACRO") == 0) parameters.ROLL_KD_ACRO = atof(value);
 800353e:	4948      	ldr	r1, [pc, #288]	@ (8003660 <Set_Param_By_Name+0x2f8>)
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fc fe6d 	bl	8000220 <strcmp>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10c      	bne.n	8003566 <Set_Param_By_Name+0x1fe>
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	f00e fd7b 	bl	8012048 <atof>
 8003552:	ec53 2b10 	vmov	r2, r3, d0
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fb7d 	bl	8000c58 <__aeabi_d2f>
 800355e:	4603      	mov	r3, r0
 8003560:	4a34      	ldr	r2, [pc, #208]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003562:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003564:	e3e7      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KP_ACRO") == 0) parameters.ROLL_KP_ACRO = atof(value);
 8003566:	493f      	ldr	r1, [pc, #252]	@ (8003664 <Set_Param_By_Name+0x2fc>)
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fc fe59 	bl	8000220 <strcmp>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10c      	bne.n	800358e <Set_Param_By_Name+0x226>
 8003574:	6838      	ldr	r0, [r7, #0]
 8003576:	f00e fd67 	bl	8012048 <atof>
 800357a:	ec53 2b10 	vmov	r2, r3, d0
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f7fd fb69 	bl	8000c58 <__aeabi_d2f>
 8003586:	4603      	mov	r3, r0
 8003588:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 800358a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800358c:	e3d3      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_KI_ACRO") == 0) parameters.ROLL_KI_ACRO = atof(value);
 800358e:	4936      	ldr	r1, [pc, #216]	@ (8003668 <Set_Param_By_Name+0x300>)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fc fe45 	bl	8000220 <strcmp>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10c      	bne.n	80035b6 <Set_Param_By_Name+0x24e>
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f00e fd53 	bl	8012048 <atof>
 80035a2:	ec53 2b10 	vmov	r2, r3, d0
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb55 	bl	8000c58 <__aeabi_d2f>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a20      	ldr	r2, [pc, #128]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80035b2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80035b4:	e3bf      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KD_ACRO") == 0) parameters.PITCH_KD_ACRO = atof(value);
 80035b6:	492d      	ldr	r1, [pc, #180]	@ (800366c <Set_Param_By_Name+0x304>)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7fc fe31 	bl	8000220 <strcmp>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10c      	bne.n	80035de <Set_Param_By_Name+0x276>
 80035c4:	6838      	ldr	r0, [r7, #0]
 80035c6:	f00e fd3f 	bl	8012048 <atof>
 80035ca:	ec53 2b10 	vmov	r2, r3, d0
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7fd fb41 	bl	8000c58 <__aeabi_d2f>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a16      	ldr	r2, [pc, #88]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 80035da:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035dc:	e3ab      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KP_ACRO") == 0) parameters.PITCH_KP_ACRO = atof(value);
 80035de:	4924      	ldr	r1, [pc, #144]	@ (8003670 <Set_Param_By_Name+0x308>)
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fc fe1d 	bl	8000220 <strcmp>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10c      	bne.n	8003606 <Set_Param_By_Name+0x29e>
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f00e fd2b 	bl	8012048 <atof>
 80035f2:	ec53 2b10 	vmov	r2, r3, d0
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f7fd fb2d 	bl	8000c58 <__aeabi_d2f>
 80035fe:	4603      	mov	r3, r0
 8003600:	4a0c      	ldr	r2, [pc, #48]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 8003602:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003604:	e397      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_KI_ACRO") == 0) parameters.PITCH_KI_ACRO = atof(value);
 8003606:	491b      	ldr	r1, [pc, #108]	@ (8003674 <Set_Param_By_Name+0x30c>)
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fc fe09 	bl	8000220 <strcmp>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d131      	bne.n	8003678 <Set_Param_By_Name+0x310>
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f00e fd17 	bl	8012048 <atof>
 800361a:	ec53 2b10 	vmov	r2, r3, d0
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f7fd fb19 	bl	8000c58 <__aeabi_d2f>
 8003626:	4603      	mov	r3, r0
 8003628:	4a02      	ldr	r2, [pc, #8]	@ (8003634 <Set_Param_By_Name+0x2cc>)
 800362a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800362c:	e383      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
 800362e:	bf00      	nop
 8003630:	0801762c 	.word	0x0801762c
 8003634:	20000394 	.word	0x20000394
 8003638:	08017640 	.word	0x08017640
 800363c:	08017658 	.word	0x08017658
 8003640:	08017668 	.word	0x08017668
 8003644:	08017678 	.word	0x08017678
 8003648:	08017688 	.word	0x08017688
 800364c:	0801769c 	.word	0x0801769c
 8003650:	080176b0 	.word	0x080176b0
 8003654:	080176c4 	.word	0x080176c4
 8003658:	080176d8 	.word	0x080176d8
 800365c:	080176ec 	.word	0x080176ec
 8003660:	08017700 	.word	0x08017700
 8003664:	08017710 	.word	0x08017710
 8003668:	08017720 	.word	0x08017720
 800366c:	08017730 	.word	0x08017730
 8003670:	08017740 	.word	0x08017740
 8003674:	08017750 	.word	0x08017750
	else if(strcmp(name, "YAW_KD_ACRO") == 0) parameters.YAW_KD_ACRO = atof(value);
 8003678:	49ab      	ldr	r1, [pc, #684]	@ (8003928 <Set_Param_By_Name+0x5c0>)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fc fdd0 	bl	8000220 <strcmp>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <Set_Param_By_Name+0x338>
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	f00e fcde 	bl	8012048 <atof>
 800368c:	ec53 2b10 	vmov	r2, r3, d0
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	f7fd fae0 	bl	8000c58 <__aeabi_d2f>
 8003698:	4603      	mov	r3, r0
 800369a:	4aa4      	ldr	r2, [pc, #656]	@ (800392c <Set_Param_By_Name+0x5c4>)
 800369c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800369e:	e34a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "YAW_KP_ACRO") == 0) parameters.YAW_KP_ACRO = atof(value);
 80036a0:	49a3      	ldr	r1, [pc, #652]	@ (8003930 <Set_Param_By_Name+0x5c8>)
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fc fdbc 	bl	8000220 <strcmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <Set_Param_By_Name+0x360>
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	f00e fcca 	bl	8012048 <atof>
 80036b4:	ec53 2b10 	vmov	r2, r3, d0
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7fd facc 	bl	8000c58 <__aeabi_d2f>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4a9a      	ldr	r2, [pc, #616]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80036c4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80036c6:	e336      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT1_FUNCTION") == 0) parameters.OUT1_FUNCTION = atoFunction(value);
 80036c8:	499a      	ldr	r1, [pc, #616]	@ (8003934 <Set_Param_By_Name+0x5cc>)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fc fda8 	bl	8000220 <strcmp>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <Set_Param_By_Name+0x380>
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	f7ff fdfa 	bl	80032d0 <atoFunction>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	4b92      	ldr	r3, [pc, #584]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80036e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80036e6:	e326      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT2_FUNCTION") == 0) parameters.OUT2_FUNCTION = atoFunction(value);
 80036e8:	4993      	ldr	r1, [pc, #588]	@ (8003938 <Set_Param_By_Name+0x5d0>)
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fc fd98 	bl	8000220 <strcmp>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <Set_Param_By_Name+0x3a0>
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f7ff fdea 	bl	80032d0 <atoFunction>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b8a      	ldr	r3, [pc, #552]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003702:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
}
 8003706:	e316      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT3_FUNCTION") == 0) parameters.OUT3_FUNCTION = atoFunction(value);
 8003708:	498c      	ldr	r1, [pc, #560]	@ (800393c <Set_Param_By_Name+0x5d4>)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fc fd88 	bl	8000220 <strcmp>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <Set_Param_By_Name+0x3c0>
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	f7ff fdda 	bl	80032d0 <atoFunction>
 800371c:	4603      	mov	r3, r0
 800371e:	461a      	mov	r2, r3
 8003720:	4b82      	ldr	r3, [pc, #520]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003722:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
}
 8003726:	e306      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT4_FUNCTION") == 0) parameters.OUT4_FUNCTION = atoFunction(value);
 8003728:	4985      	ldr	r1, [pc, #532]	@ (8003940 <Set_Param_By_Name+0x5d8>)
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fc fd78 	bl	8000220 <strcmp>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <Set_Param_By_Name+0x3e0>
 8003736:	6838      	ldr	r0, [r7, #0]
 8003738:	f7ff fdca 	bl	80032d0 <atoFunction>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	4b7a      	ldr	r3, [pc, #488]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003742:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
}
 8003746:	e2f6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT5_FUNCTION") == 0) parameters.OUT5_FUNCTION = atoFunction(value);
 8003748:	497e      	ldr	r1, [pc, #504]	@ (8003944 <Set_Param_By_Name+0x5dc>)
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fc fd68 	bl	8000220 <strcmp>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <Set_Param_By_Name+0x400>
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f7ff fdba 	bl	80032d0 <atoFunction>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	4b72      	ldr	r3, [pc, #456]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8003766:	e2e6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT6_FUNCTION") == 0) parameters.OUT6_FUNCTION = atoFunction(value);
 8003768:	4977      	ldr	r1, [pc, #476]	@ (8003948 <Set_Param_By_Name+0x5e0>)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fc fd58 	bl	8000220 <strcmp>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d108      	bne.n	8003788 <Set_Param_By_Name+0x420>
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f7ff fdaa 	bl	80032d0 <atoFunction>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8003786:	e2d6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT7_FUNCTION") == 0) parameters.OUT7_FUNCTION = atoFunction(value);
 8003788:	4970      	ldr	r1, [pc, #448]	@ (800394c <Set_Param_By_Name+0x5e4>)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fc fd48 	bl	8000220 <strcmp>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <Set_Param_By_Name+0x440>
 8003796:	6838      	ldr	r0, [r7, #0]
 8003798:	f7ff fd9a 	bl	80032d0 <atoFunction>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	4b62      	ldr	r3, [pc, #392]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80037a2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
}
 80037a6:	e2c6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT8_FUNCTION") == 0) parameters.OUT8_FUNCTION = atoFunction(value);
 80037a8:	4969      	ldr	r1, [pc, #420]	@ (8003950 <Set_Param_By_Name+0x5e8>)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fc fd38 	bl	8000220 <strcmp>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <Set_Param_By_Name+0x460>
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f7ff fd8a 	bl	80032d0 <atoFunction>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	4b5a      	ldr	r3, [pc, #360]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80037c2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
}
 80037c6:	e2b6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT1_REVERSE") == 0) parameters.OUT1_REVERSE = atoi(value);
 80037c8:	4962      	ldr	r1, [pc, #392]	@ (8003954 <Set_Param_By_Name+0x5ec>)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fc fd28 	bl	8000220 <strcmp>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <Set_Param_By_Name+0x480>
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f00e fc39 	bl	801204e <atoi>
 80037dc:	4603      	mov	r3, r0
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	4b52      	ldr	r3, [pc, #328]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80037e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80037e6:	e2a6      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT2_REVERSE") == 0) parameters.OUT2_REVERSE = atoi(value);
 80037e8:	495b      	ldr	r1, [pc, #364]	@ (8003958 <Set_Param_By_Name+0x5f0>)
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fc fd18 	bl	8000220 <strcmp>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <Set_Param_By_Name+0x4a0>
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f00e fc29 	bl	801204e <atoi>
 80037fc:	4603      	mov	r3, r0
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b4a      	ldr	r3, [pc, #296]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003802:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
}
 8003806:	e296      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT3_REVERSE") == 0) parameters.OUT3_REVERSE = atoi(value);
 8003808:	4954      	ldr	r1, [pc, #336]	@ (800395c <Set_Param_By_Name+0x5f4>)
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc fd08 	bl	8000220 <strcmp>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <Set_Param_By_Name+0x4c0>
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	f00e fc19 	bl	801204e <atoi>
 800381c:	4603      	mov	r3, r0
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b42      	ldr	r3, [pc, #264]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003822:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
}
 8003826:	e286      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT4_REVERSE") == 0) parameters.OUT4_REVERSE = atoi(value);
 8003828:	494d      	ldr	r1, [pc, #308]	@ (8003960 <Set_Param_By_Name+0x5f8>)
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fc fcf8 	bl	8000220 <strcmp>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <Set_Param_By_Name+0x4e0>
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f00e fc09 	bl	801204e <atoi>
 800383c:	4603      	mov	r3, r0
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003842:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
}
 8003846:	e276      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT5_REVERSE") == 0) parameters.OUT5_REVERSE = atoi(value);
 8003848:	4946      	ldr	r1, [pc, #280]	@ (8003964 <Set_Param_By_Name+0x5fc>)
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fc fce8 	bl	8000220 <strcmp>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <Set_Param_By_Name+0x500>
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	f00e fbf9 	bl	801204e <atoi>
 800385c:	4603      	mov	r3, r0
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b32      	ldr	r3, [pc, #200]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8003866:	e266      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT6_REVERSE") == 0) parameters.OUT6_REVERSE = atoi(value);
 8003868:	493f      	ldr	r1, [pc, #252]	@ (8003968 <Set_Param_By_Name+0x600>)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fc fcd8 	bl	8000220 <strcmp>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <Set_Param_By_Name+0x520>
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	f00e fbe9 	bl	801204e <atoi>
 800387c:	4603      	mov	r3, r0
 800387e:	b2da      	uxtb	r2, r3
 8003880:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003882:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
}
 8003886:	e256      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT7_REVERSE") == 0) parameters.OUT7_REVERSE = atoi(value);
 8003888:	4938      	ldr	r1, [pc, #224]	@ (800396c <Set_Param_By_Name+0x604>)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fc fcc8 	bl	8000220 <strcmp>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <Set_Param_By_Name+0x540>
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	f00e fbd9 	bl	801204e <atoi>
 800389c:	4603      	mov	r3, r0
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	4b22      	ldr	r3, [pc, #136]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80038a2:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
}
 80038a6:	e246      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT8_REVERSE") == 0) parameters.OUT8_REVERSE = atoi(value);
 80038a8:	4931      	ldr	r1, [pc, #196]	@ (8003970 <Set_Param_By_Name+0x608>)
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc fcb8 	bl	8000220 <strcmp>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <Set_Param_By_Name+0x560>
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f00e fbc9 	bl	801204e <atoi>
 80038bc:	4603      	mov	r3, r0
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80038c2:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
}
 80038c6:	e236      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT1_TRIM") == 0) parameters.OUT1_TRIM = atoi(value);
 80038c8:	492a      	ldr	r1, [pc, #168]	@ (8003974 <Set_Param_By_Name+0x60c>)
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fc fca8 	bl	8000220 <strcmp>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <Set_Param_By_Name+0x580>
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f00e fbb9 	bl	801204e <atoi>
 80038dc:	4603      	mov	r3, r0
 80038de:	b29a      	uxth	r2, r3
 80038e0:	4b12      	ldr	r3, [pc, #72]	@ (800392c <Set_Param_By_Name+0x5c4>)
 80038e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
}
 80038e6:	e226      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT2_TRIM") == 0) parameters.OUT2_TRIM = atoi(value);
 80038e8:	4923      	ldr	r1, [pc, #140]	@ (8003978 <Set_Param_By_Name+0x610>)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc fc98 	bl	8000220 <strcmp>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <Set_Param_By_Name+0x5a0>
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f00e fba9 	bl	801204e <atoi>
 80038fc:	4603      	mov	r3, r0
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003902:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
}
 8003906:	e216      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT3_TRIM") == 0) parameters.OUT3_TRIM = atoi(value);
 8003908:	491c      	ldr	r1, [pc, #112]	@ (800397c <Set_Param_By_Name+0x614>)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fc fc88 	bl	8000220 <strcmp>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d134      	bne.n	8003980 <Set_Param_By_Name+0x618>
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f00e fb99 	bl	801204e <atoi>
 800391c:	4603      	mov	r3, r0
 800391e:	b29a      	uxth	r2, r3
 8003920:	4b02      	ldr	r3, [pc, #8]	@ (800392c <Set_Param_By_Name+0x5c4>)
 8003922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
}
 8003926:	e206      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
 8003928:	08017760 	.word	0x08017760
 800392c:	20000394 	.word	0x20000394
 8003930:	0801776c 	.word	0x0801776c
 8003934:	08017778 	.word	0x08017778
 8003938:	08017788 	.word	0x08017788
 800393c:	08017798 	.word	0x08017798
 8003940:	080177a8 	.word	0x080177a8
 8003944:	080177b8 	.word	0x080177b8
 8003948:	080177c8 	.word	0x080177c8
 800394c:	080177d8 	.word	0x080177d8
 8003950:	080177e8 	.word	0x080177e8
 8003954:	080177f8 	.word	0x080177f8
 8003958:	08017808 	.word	0x08017808
 800395c:	08017818 	.word	0x08017818
 8003960:	08017828 	.word	0x08017828
 8003964:	08017838 	.word	0x08017838
 8003968:	08017848 	.word	0x08017848
 800396c:	08017858 	.word	0x08017858
 8003970:	08017868 	.word	0x08017868
 8003974:	08017878 	.word	0x08017878
 8003978:	08017884 	.word	0x08017884
 800397c:	08017890 	.word	0x08017890
	else if(strcmp(name, "OUT4_TRIM") == 0) parameters.OUT4_TRIM = atoi(value);
 8003980:	49a7      	ldr	r1, [pc, #668]	@ (8003c20 <Set_Param_By_Name+0x8b8>)
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fc fc4c 	bl	8000220 <strcmp>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <Set_Param_By_Name+0x638>
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	f00e fb5d 	bl	801204e <atoi>
 8003994:	4603      	mov	r3, r0
 8003996:	b29a      	uxth	r2, r3
 8003998:	4ba2      	ldr	r3, [pc, #648]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 800399a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
}
 800399e:	e1ca      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT5_TRIM") == 0) parameters.OUT5_TRIM = atoi(value);
 80039a0:	49a1      	ldr	r1, [pc, #644]	@ (8003c28 <Set_Param_By_Name+0x8c0>)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc fc3c 	bl	8000220 <strcmp>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <Set_Param_By_Name+0x658>
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	f00e fb4d 	bl	801204e <atoi>
 80039b4:	4603      	mov	r3, r0
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 80039ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
}
 80039be:	e1ba      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT6_TRIM") == 0) parameters.OUT6_TRIM = atoi(value);
 80039c0:	499a      	ldr	r1, [pc, #616]	@ (8003c2c <Set_Param_By_Name+0x8c4>)
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fc fc2c 	bl	8000220 <strcmp>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <Set_Param_By_Name+0x678>
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	f00e fb3d 	bl	801204e <atoi>
 80039d4:	4603      	mov	r3, r0
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b92      	ldr	r3, [pc, #584]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 80039da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
}
 80039de:	e1aa      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT7_TRIM") == 0) parameters.OUT7_TRIM = atoi(value);
 80039e0:	4993      	ldr	r1, [pc, #588]	@ (8003c30 <Set_Param_By_Name+0x8c8>)
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc fc1c 	bl	8000220 <strcmp>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <Set_Param_By_Name+0x698>
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f00e fb2d 	bl	801204e <atoi>
 80039f4:	4603      	mov	r3, r0
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 80039fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80039fe:	e19a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT8_TRIM") == 0) parameters.OUT8_TRIM = atoi(value);
 8003a00:	498c      	ldr	r1, [pc, #560]	@ (8003c34 <Set_Param_By_Name+0x8cc>)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fc fc0c 	bl	8000220 <strcmp>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <Set_Param_By_Name+0x6b8>
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f00e fb1d 	bl	801204e <atoi>
 8003a14:	4603      	mov	r3, r0
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	4b82      	ldr	r3, [pc, #520]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8003a1e:	e18a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT1_MIN") == 0) parameters.OUT1_MIN = atoi(value);
 8003a20:	4985      	ldr	r1, [pc, #532]	@ (8003c38 <Set_Param_By_Name+0x8d0>)
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fc fbfc 	bl	8000220 <strcmp>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d108      	bne.n	8003a40 <Set_Param_By_Name+0x6d8>
 8003a2e:	6838      	ldr	r0, [r7, #0]
 8003a30:	f00e fb0d 	bl	801204e <atoi>
 8003a34:	4603      	mov	r3, r0
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b7a      	ldr	r3, [pc, #488]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003a3a:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
}
 8003a3e:	e17a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT2_MIN") == 0) parameters.OUT2_MIN = atoi(value);
 8003a40:	497e      	ldr	r1, [pc, #504]	@ (8003c3c <Set_Param_By_Name+0x8d4>)
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fc fbec 	bl	8000220 <strcmp>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <Set_Param_By_Name+0x6f8>
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f00e fafd 	bl	801204e <atoi>
 8003a54:	4603      	mov	r3, r0
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b72      	ldr	r3, [pc, #456]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003a5a:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
}
 8003a5e:	e16a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT3_MIN") == 0) parameters.OUT3_MIN = atoi(value);
 8003a60:	4977      	ldr	r1, [pc, #476]	@ (8003c40 <Set_Param_By_Name+0x8d8>)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fc fbdc 	bl	8000220 <strcmp>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d108      	bne.n	8003a80 <Set_Param_By_Name+0x718>
 8003a6e:	6838      	ldr	r0, [r7, #0]
 8003a70:	f00e faed 	bl	801204e <atoi>
 8003a74:	4603      	mov	r3, r0
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003a7a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
}
 8003a7e:	e15a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT4_MIN") == 0) parameters.OUT4_MIN = atoi(value);
 8003a80:	4970      	ldr	r1, [pc, #448]	@ (8003c44 <Set_Param_By_Name+0x8dc>)
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fbcc 	bl	8000220 <strcmp>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <Set_Param_By_Name+0x738>
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f00e fadd 	bl	801204e <atoi>
 8003a94:	4603      	mov	r3, r0
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b62      	ldr	r3, [pc, #392]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003a9a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8003a9e:	e14a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT5_MIN") == 0) parameters.OUT5_MIN = atoi(value);
 8003aa0:	4969      	ldr	r1, [pc, #420]	@ (8003c48 <Set_Param_By_Name+0x8e0>)
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc fbbc 	bl	8000220 <strcmp>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <Set_Param_By_Name+0x758>
 8003aae:	6838      	ldr	r0, [r7, #0]
 8003ab0:	f00e facd 	bl	801204e <atoi>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003aba:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
}
 8003abe:	e13a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT6_MIN") == 0) parameters.OUT6_MIN = atoi(value);
 8003ac0:	4962      	ldr	r1, [pc, #392]	@ (8003c4c <Set_Param_By_Name+0x8e4>)
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fc fbac 	bl	8000220 <strcmp>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <Set_Param_By_Name+0x778>
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f00e fabd 	bl	801204e <atoi>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003ada:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
}
 8003ade:	e12a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT7_MIN") == 0) parameters.OUT7_MIN = atoi(value);
 8003ae0:	495b      	ldr	r1, [pc, #364]	@ (8003c50 <Set_Param_By_Name+0x8e8>)
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fc fb9c 	bl	8000220 <strcmp>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <Set_Param_By_Name+0x798>
 8003aee:	6838      	ldr	r0, [r7, #0]
 8003af0:	f00e faad 	bl	801204e <atoi>
 8003af4:	4603      	mov	r3, r0
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003afa:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
}
 8003afe:	e11a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT8_MIN") == 0) parameters.OUT8_MIN = atoi(value);
 8003b00:	4954      	ldr	r1, [pc, #336]	@ (8003c54 <Set_Param_By_Name+0x8ec>)
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fb8c 	bl	8000220 <strcmp>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <Set_Param_By_Name+0x7b8>
 8003b0e:	6838      	ldr	r0, [r7, #0]
 8003b10:	f00e fa9d 	bl	801204e <atoi>
 8003b14:	4603      	mov	r3, r0
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	4b42      	ldr	r3, [pc, #264]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003b1a:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
}
 8003b1e:	e10a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT1_MAX") == 0) parameters.OUT1_MAX = atoi(value);
 8003b20:	494d      	ldr	r1, [pc, #308]	@ (8003c58 <Set_Param_By_Name+0x8f0>)
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fb7c 	bl	8000220 <strcmp>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <Set_Param_By_Name+0x7d8>
 8003b2e:	6838      	ldr	r0, [r7, #0]
 8003b30:	f00e fa8d 	bl	801204e <atoi>
 8003b34:	4603      	mov	r3, r0
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003b3a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
}
 8003b3e:	e0fa      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT2_MAX") == 0) parameters.OUT2_MAX = atoi(value);
 8003b40:	4946      	ldr	r1, [pc, #280]	@ (8003c5c <Set_Param_By_Name+0x8f4>)
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fc fb6c 	bl	8000220 <strcmp>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <Set_Param_By_Name+0x7f8>
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	f00e fa7d 	bl	801204e <atoi>
 8003b54:	4603      	mov	r3, r0
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003b5a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
}
 8003b5e:	e0ea      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT3_MAX") == 0) parameters.OUT3_MAX = atoi(value);
 8003b60:	493f      	ldr	r1, [pc, #252]	@ (8003c60 <Set_Param_By_Name+0x8f8>)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fc fb5c 	bl	8000220 <strcmp>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <Set_Param_By_Name+0x818>
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f00e fa6d 	bl	801204e <atoi>
 8003b74:	4603      	mov	r3, r0
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003b7a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003b7e:	e0da      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT4_MAX") == 0) parameters.OUT4_MAX = atoi(value);
 8003b80:	4938      	ldr	r1, [pc, #224]	@ (8003c64 <Set_Param_By_Name+0x8fc>)
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc fb4c 	bl	8000220 <strcmp>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <Set_Param_By_Name+0x838>
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f00e fa5d 	bl	801204e <atoi>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003b9a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 8003b9e:	e0ca      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT5_MAX") == 0) parameters.OUT5_MAX = atoi(value);
 8003ba0:	4931      	ldr	r1, [pc, #196]	@ (8003c68 <Set_Param_By_Name+0x900>)
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc fb3c 	bl	8000220 <strcmp>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <Set_Param_By_Name+0x858>
 8003bae:	6838      	ldr	r0, [r7, #0]
 8003bb0:	f00e fa4d 	bl	801204e <atoi>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003bba:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
}
 8003bbe:	e0ba      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT6_MAX") == 0) parameters.OUT6_MAX = atoi(value);
 8003bc0:	492a      	ldr	r1, [pc, #168]	@ (8003c6c <Set_Param_By_Name+0x904>)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc fb2c 	bl	8000220 <strcmp>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <Set_Param_By_Name+0x878>
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f00e fa3d 	bl	801204e <atoi>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003bda:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
}
 8003bde:	e0aa      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT7_MAX") == 0) parameters.OUT7_MAX = atoi(value);
 8003be0:	4923      	ldr	r1, [pc, #140]	@ (8003c70 <Set_Param_By_Name+0x908>)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc fb1c 	bl	8000220 <strcmp>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <Set_Param_By_Name+0x898>
 8003bee:	6838      	ldr	r0, [r7, #0]
 8003bf0:	f00e fa2d 	bl	801204e <atoi>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003bfa:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
}
 8003bfe:	e09a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "OUT8_MAX") == 0) parameters.OUT8_MAX = atoi(value);
 8003c00:	491c      	ldr	r1, [pc, #112]	@ (8003c74 <Set_Param_By_Name+0x90c>)
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fc fb0c 	bl	8000220 <strcmp>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d134      	bne.n	8003c78 <Set_Param_By_Name+0x910>
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	f00e fa1d 	bl	801204e <atoi>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b02      	ldr	r3, [pc, #8]	@ (8003c24 <Set_Param_By_Name+0x8bc>)
 8003c1a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
}
 8003c1e:	e08a      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
 8003c20:	0801789c 	.word	0x0801789c
 8003c24:	20000394 	.word	0x20000394
 8003c28:	080178a8 	.word	0x080178a8
 8003c2c:	080178b4 	.word	0x080178b4
 8003c30:	080178c0 	.word	0x080178c0
 8003c34:	080178cc 	.word	0x080178cc
 8003c38:	080178d8 	.word	0x080178d8
 8003c3c:	080178e4 	.word	0x080178e4
 8003c40:	080178f0 	.word	0x080178f0
 8003c44:	080178fc 	.word	0x080178fc
 8003c48:	08017908 	.word	0x08017908
 8003c4c:	08017914 	.word	0x08017914
 8003c50:	08017920 	.word	0x08017920
 8003c54:	0801792c 	.word	0x0801792c
 8003c58:	08017938 	.word	0x08017938
 8003c5c:	08017944 	.word	0x08017944
 8003c60:	08017950 	.word	0x08017950
 8003c64:	0801795c 	.word	0x0801795c
 8003c68:	08017968 	.word	0x08017968
 8003c6c:	08017974 	.word	0x08017974
 8003c70:	08017980 	.word	0x08017980
 8003c74:	0801798c 	.word	0x0801798c
	else if(strcmp(name, "THROTTLE_CHANNEL") == 0) parameters.THROTTLE_CHANNEL = atoi(value);
 8003c78:	4931      	ldr	r1, [pc, #196]	@ (8003d40 <Set_Param_By_Name+0x9d8>)
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fc fad0 	bl	8000220 <strcmp>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <Set_Param_By_Name+0x930>
 8003c86:	6838      	ldr	r0, [r7, #0]
 8003c88:	f00e f9e1 	bl	801204e <atoi>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003c92:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
}
 8003c96:	e04e      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ROLL_CHANNEL") == 0) parameters.ROLL_CHANNEL = atoi(value);
 8003c98:	492b      	ldr	r1, [pc, #172]	@ (8003d48 <Set_Param_By_Name+0x9e0>)
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc fac0 	bl	8000220 <strcmp>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <Set_Param_By_Name+0x950>
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f00e f9d1 	bl	801204e <atoi>
 8003cac:	4603      	mov	r3, r0
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4b24      	ldr	r3, [pc, #144]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003cb2:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
}
 8003cb6:	e03e      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "PITCH_CHANNEL") == 0) parameters.PITCH_CHANNEL = atoi(value);
 8003cb8:	4924      	ldr	r1, [pc, #144]	@ (8003d4c <Set_Param_By_Name+0x9e4>)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fab0 	bl	8000220 <strcmp>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <Set_Param_By_Name+0x970>
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f00e f9c1 	bl	801204e <atoi>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003cd2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
}
 8003cd6:	e02e      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "YAW_CHANNEL") == 0) parameters.YAW_CHANNEL = atoi(value);
 8003cd8:	491d      	ldr	r1, [pc, #116]	@ (8003d50 <Set_Param_By_Name+0x9e8>)
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc faa0 	bl	8000220 <strcmp>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d108      	bne.n	8003cf8 <Set_Param_By_Name+0x990>
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f00e f9b1 	bl	801204e <atoi>
 8003cec:	4603      	mov	r3, r0
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003cf2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
}
 8003cf6:	e01e      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "ARMING_CHANNEL") == 0) parameters.ARMING_CHANNEL = atoi(value);
 8003cf8:	4916      	ldr	r1, [pc, #88]	@ (8003d54 <Set_Param_By_Name+0x9ec>)
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc fa90 	bl	8000220 <strcmp>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <Set_Param_By_Name+0x9b0>
 8003d06:	6838      	ldr	r0, [r7, #0]
 8003d08:	f00e f9a1 	bl	801204e <atoi>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003d12:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
}
 8003d16:	e00e      	b.n	8003d36 <Set_Param_By_Name+0x9ce>
	else if(strcmp(name, "FLIGHT_MODE_CHANNEL") == 0) parameters.FLIGHT_MODE_CHANNEL = atoi(value);
 8003d18:	490f      	ldr	r1, [pc, #60]	@ (8003d58 <Set_Param_By_Name+0x9f0>)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fc fa80 	bl	8000220 <strcmp>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <Set_Param_By_Name+0x9ce>
 8003d26:	6838      	ldr	r0, [r7, #0]
 8003d28:	f00e f991 	bl	801204e <atoi>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <Set_Param_By_Name+0x9dc>)
 8003d32:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	08017998 	.word	0x08017998
 8003d44:	20000394 	.word	0x20000394
 8003d48:	080179ac 	.word	0x080179ac
 8003d4c:	080179bc 	.word	0x080179bc
 8003d50:	080179cc 	.word	0x080179cc
 8003d54:	080179d8 	.word	0x080179d8
 8003d58:	080179e8 	.word	0x080179e8

08003d5c <Get_Param_By_Name>:

float Get_Param_By_Name(char *name){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "STABILIZED_MAX_ROLL") == 0) return parameters.STABILIZED_MAX_ROLL;
 8003d64:	49a4      	ldr	r1, [pc, #656]	@ (8003ff8 <Get_Param_By_Name+0x29c>)
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc fa5a 	bl	8000220 <strcmp>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <Get_Param_By_Name+0x1e>
 8003d72:	4ba2      	ldr	r3, [pc, #648]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	e3e4      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "STABILIZED_MAX_PITCH") == 0) return parameters.STABILIZED_MAX_PITCH;
 8003d7a:	49a1      	ldr	r1, [pc, #644]	@ (8004000 <Get_Param_By_Name+0x2a4>)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fc fa4f 	bl	8000220 <strcmp>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <Get_Param_By_Name+0x34>
 8003d88:	4b9c      	ldr	r3, [pc, #624]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003d8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d8e:	e3d9      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "ACRO_ROLL_RATE") == 0) return parameters.ACRO_ROLL_RATE;
 8003d90:	499c      	ldr	r1, [pc, #624]	@ (8004004 <Get_Param_By_Name+0x2a8>)
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fa44 	bl	8000220 <strcmp>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <Get_Param_By_Name+0x4a>
 8003d9e:	4b97      	ldr	r3, [pc, #604]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003da4:	e3ce      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ACRO_PITCH_RATE") == 0) return parameters.ACRO_PITCH_RATE;
 8003da6:	4998      	ldr	r1, [pc, #608]	@ (8004008 <Get_Param_By_Name+0x2ac>)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc fa39 	bl	8000220 <strcmp>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <Get_Param_By_Name+0x60>
 8003db4:	4b91      	ldr	r3, [pc, #580]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dba:	e3c3      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ACRO_YAW_RATE") == 0) return parameters.ACRO_YAW_RATE;
 8003dbc:	4993      	ldr	r1, [pc, #588]	@ (800400c <Get_Param_By_Name+0x2b0>)
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc fa2e 	bl	8000220 <strcmp>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <Get_Param_By_Name+0x76>
 8003dca:	4b8c      	ldr	r3, [pc, #560]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003dcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dd0:	e3b8      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "ROLL_KD_STABILIZED") == 0) return parameters.ROLL_KD_STABILIZED;
 8003dd2:	498f      	ldr	r1, [pc, #572]	@ (8004010 <Get_Param_By_Name+0x2b4>)
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fc fa23 	bl	8000220 <strcmp>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <Get_Param_By_Name+0x8c>
 8003de0:	4b86      	ldr	r3, [pc, #536]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003de2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003de6:	e3ad      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ROLL_KP_STABILIZED") == 0) return parameters.ROLL_KP_STABILIZED;
 8003de8:	498a      	ldr	r1, [pc, #552]	@ (8004014 <Get_Param_By_Name+0x2b8>)
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fc fa18 	bl	8000220 <strcmp>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <Get_Param_By_Name+0xa2>
 8003df6:	4b81      	ldr	r3, [pc, #516]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003df8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003dfc:	e3a2      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ROLL_KI_STABILIZED") == 0) return parameters.ROLL_KI_STABILIZED;
 8003dfe:	4986      	ldr	r1, [pc, #536]	@ (8004018 <Get_Param_By_Name+0x2bc>)
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fc fa0d 	bl	8000220 <strcmp>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <Get_Param_By_Name+0xb8>
 8003e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e12:	e397      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "PITCH_KD_STABILIZED") == 0) return parameters.PITCH_KD_STABILIZED;
 8003e14:	4981      	ldr	r1, [pc, #516]	@ (800401c <Get_Param_By_Name+0x2c0>)
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fc fa02 	bl	8000220 <strcmp>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <Get_Param_By_Name+0xce>
 8003e22:	4b76      	ldr	r3, [pc, #472]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e24:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e28:	e38c      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "PITCH_KP_STABILIZED") == 0) return parameters.PITCH_KP_STABILIZED;
 8003e2a:	497d      	ldr	r1, [pc, #500]	@ (8004020 <Get_Param_By_Name+0x2c4>)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fc f9f7 	bl	8000220 <strcmp>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <Get_Param_By_Name+0xe4>
 8003e38:	4b70      	ldr	r3, [pc, #448]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e3a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003e3e:	e381      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "PITCH_KI_STABILIZED") == 0) return parameters.PITCH_KI_STABILIZED;
 8003e40:	4978      	ldr	r1, [pc, #480]	@ (8004024 <Get_Param_By_Name+0x2c8>)
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fc f9ec 	bl	8000220 <strcmp>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <Get_Param_By_Name+0xfa>
 8003e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e50:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003e54:	e376      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "ROLL_KD_ACRO") == 0) return parameters.ROLL_KD_ACRO;
 8003e56:	4974      	ldr	r1, [pc, #464]	@ (8004028 <Get_Param_By_Name+0x2cc>)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc f9e1 	bl	8000220 <strcmp>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <Get_Param_By_Name+0x110>
 8003e64:	4b65      	ldr	r3, [pc, #404]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003e6a:	e36b      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ROLL_KP_ACRO") == 0) return parameters.ROLL_KP_ACRO;
 8003e6c:	496f      	ldr	r1, [pc, #444]	@ (800402c <Get_Param_By_Name+0x2d0>)
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fc f9d6 	bl	8000220 <strcmp>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <Get_Param_By_Name+0x126>
 8003e7a:	4b60      	ldr	r3, [pc, #384]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e7c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003e80:	e360      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ROLL_KI_ACRO") == 0) return parameters.ROLL_KI_ACRO;
 8003e82:	496b      	ldr	r1, [pc, #428]	@ (8004030 <Get_Param_By_Name+0x2d4>)
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc f9cb 	bl	8000220 <strcmp>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <Get_Param_By_Name+0x13c>
 8003e90:	4b5a      	ldr	r3, [pc, #360]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003e92:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e96:	e355      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "PITCH_KD_ACRO") == 0) return parameters.PITCH_KD_ACRO;
 8003e98:	4966      	ldr	r1, [pc, #408]	@ (8004034 <Get_Param_By_Name+0x2d8>)
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc f9c0 	bl	8000220 <strcmp>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <Get_Param_By_Name+0x152>
 8003ea6:	4b55      	ldr	r3, [pc, #340]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003ea8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003eac:	e34a      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "PITCH_KP_ACRO") == 0) return parameters.PITCH_KP_ACRO;
 8003eae:	4962      	ldr	r1, [pc, #392]	@ (8004038 <Get_Param_By_Name+0x2dc>)
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fc f9b5 	bl	8000220 <strcmp>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <Get_Param_By_Name+0x168>
 8003ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003ebe:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003ec2:	e33f      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "PITCH_KI_ACRO") == 0) return parameters.PITCH_KI_ACRO;
 8003ec4:	495d      	ldr	r1, [pc, #372]	@ (800403c <Get_Param_By_Name+0x2e0>)
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc f9aa 	bl	8000220 <strcmp>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <Get_Param_By_Name+0x17e>
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003ed4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003ed8:	e334      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "YAW_KD_ACRO") == 0) return parameters.YAW_KD_ACRO;
 8003eda:	4959      	ldr	r1, [pc, #356]	@ (8004040 <Get_Param_By_Name+0x2e4>)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fc f99f 	bl	8000220 <strcmp>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <Get_Param_By_Name+0x194>
 8003ee8:	4b44      	ldr	r3, [pc, #272]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003eea:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003eee:	e329      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "YAW_KP_ACRO") == 0) return parameters.YAW_KP_ACRO;
 8003ef0:	4954      	ldr	r1, [pc, #336]	@ (8004044 <Get_Param_By_Name+0x2e8>)
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc f994 	bl	8000220 <strcmp>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <Get_Param_By_Name+0x1aa>
 8003efe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f00:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003f04:	e31e      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "OUT1_FUNCTION") == 0) return parameters.OUT1_FUNCTION;
 8003f06:	4950      	ldr	r1, [pc, #320]	@ (8004048 <Get_Param_By_Name+0x2ec>)
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fc f989 	bl	8000220 <strcmp>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <Get_Param_By_Name+0x1c8>
 8003f14:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f16:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	e30f      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT2_FUNCTION") == 0) return parameters.OUT2_FUNCTION;
 8003f24:	4949      	ldr	r1, [pc, #292]	@ (800404c <Get_Param_By_Name+0x2f0>)
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fc f97a 	bl	8000220 <strcmp>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d107      	bne.n	8003f42 <Get_Param_By_Name+0x1e6>
 8003f32:	4b32      	ldr	r3, [pc, #200]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f34:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f40:	e300      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT3_FUNCTION") == 0) return parameters.OUT3_FUNCTION;
 8003f42:	4943      	ldr	r1, [pc, #268]	@ (8004050 <Get_Param_By_Name+0x2f4>)
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fc f96b 	bl	8000220 <strcmp>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <Get_Param_By_Name+0x204>
 8003f50:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f52:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	e2f1      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT4_FUNCTION") == 0) return parameters.OUT4_FUNCTION;
 8003f60:	493c      	ldr	r1, [pc, #240]	@ (8004054 <Get_Param_By_Name+0x2f8>)
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc f95c 	bl	8000220 <strcmp>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <Get_Param_By_Name+0x222>
 8003f6e:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f70:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7c:	e2e2      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT5_FUNCTION") == 0) return parameters.OUT5_FUNCTION;
 8003f7e:	4936      	ldr	r1, [pc, #216]	@ (8004058 <Get_Param_By_Name+0x2fc>)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc f94d 	bl	8000220 <strcmp>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <Get_Param_By_Name+0x240>
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	e2d3      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT6_FUNCTION") == 0) return parameters.OUT6_FUNCTION;
 8003f9c:	492f      	ldr	r1, [pc, #188]	@ (800405c <Get_Param_By_Name+0x300>)
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc f93e 	bl	8000220 <strcmp>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d107      	bne.n	8003fba <Get_Param_By_Name+0x25e>
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb8:	e2c4      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT7_FUNCTION") == 0) return parameters.OUT7_FUNCTION;
 8003fba:	4929      	ldr	r1, [pc, #164]	@ (8004060 <Get_Param_By_Name+0x304>)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fc f92f 	bl	8000220 <strcmp>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <Get_Param_By_Name+0x27c>
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003fca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	e2b5      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT8_FUNCTION") == 0) return parameters.OUT8_FUNCTION;
 8003fd8:	4922      	ldr	r1, [pc, #136]	@ (8004064 <Get_Param_By_Name+0x308>)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc f920 	bl	8000220 <strcmp>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d140      	bne.n	8004068 <Get_Param_By_Name+0x30c>
 8003fe6:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <Get_Param_By_Name+0x2a0>)
 8003fe8:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	e2a6      	b.n	8004544 <Get_Param_By_Name+0x7e8>
 8003ff6:	bf00      	nop
 8003ff8:	0801762c 	.word	0x0801762c
 8003ffc:	20000394 	.word	0x20000394
 8004000:	08017640 	.word	0x08017640
 8004004:	08017658 	.word	0x08017658
 8004008:	08017668 	.word	0x08017668
 800400c:	08017678 	.word	0x08017678
 8004010:	08017688 	.word	0x08017688
 8004014:	0801769c 	.word	0x0801769c
 8004018:	080176b0 	.word	0x080176b0
 800401c:	080176c4 	.word	0x080176c4
 8004020:	080176d8 	.word	0x080176d8
 8004024:	080176ec 	.word	0x080176ec
 8004028:	08017700 	.word	0x08017700
 800402c:	08017710 	.word	0x08017710
 8004030:	08017720 	.word	0x08017720
 8004034:	08017730 	.word	0x08017730
 8004038:	08017740 	.word	0x08017740
 800403c:	08017750 	.word	0x08017750
 8004040:	08017760 	.word	0x08017760
 8004044:	0801776c 	.word	0x0801776c
 8004048:	08017778 	.word	0x08017778
 800404c:	08017788 	.word	0x08017788
 8004050:	08017798 	.word	0x08017798
 8004054:	080177a8 	.word	0x080177a8
 8004058:	080177b8 	.word	0x080177b8
 800405c:	080177c8 	.word	0x080177c8
 8004060:	080177d8 	.word	0x080177d8
 8004064:	080177e8 	.word	0x080177e8

	else if(strcmp(name, "OUT1_REVERSE") == 0) return parameters.OUT1_REVERSE;
 8004068:	49b3      	ldr	r1, [pc, #716]	@ (8004338 <Get_Param_By_Name+0x5dc>)
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc f8d8 	bl	8000220 <strcmp>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <Get_Param_By_Name+0x32a>
 8004076:	4bb1      	ldr	r3, [pc, #708]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004078:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004084:	e25e      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT2_REVERSE") == 0) return parameters.OUT2_REVERSE;
 8004086:	49ae      	ldr	r1, [pc, #696]	@ (8004340 <Get_Param_By_Name+0x5e4>)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc f8c9 	bl	8000220 <strcmp>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <Get_Param_By_Name+0x348>
 8004094:	4ba9      	ldr	r3, [pc, #676]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004096:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a2:	e24f      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT3_REVERSE") == 0) return parameters.OUT3_REVERSE;
 80040a4:	49a7      	ldr	r1, [pc, #668]	@ (8004344 <Get_Param_By_Name+0x5e8>)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc f8ba 	bl	8000220 <strcmp>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <Get_Param_By_Name+0x366>
 80040b2:	4ba2      	ldr	r3, [pc, #648]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80040b4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c0:	e240      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT4_REVERSE") == 0) return parameters.OUT4_REVERSE;
 80040c2:	49a1      	ldr	r1, [pc, #644]	@ (8004348 <Get_Param_By_Name+0x5ec>)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc f8ab 	bl	8000220 <strcmp>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <Get_Param_By_Name+0x384>
 80040d0:	4b9a      	ldr	r3, [pc, #616]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80040d2:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	e231      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT5_REVERSE") == 0) return parameters.OUT5_REVERSE;
 80040e0:	499a      	ldr	r1, [pc, #616]	@ (800434c <Get_Param_By_Name+0x5f0>)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc f89c 	bl	8000220 <strcmp>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <Get_Param_By_Name+0x3a2>
 80040ee:	4b93      	ldr	r3, [pc, #588]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80040f0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fc:	e222      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT6_REVERSE") == 0) return parameters.OUT6_REVERSE;
 80040fe:	4994      	ldr	r1, [pc, #592]	@ (8004350 <Get_Param_By_Name+0x5f4>)
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fc f88d 	bl	8000220 <strcmp>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <Get_Param_By_Name+0x3c0>
 800410c:	4b8b      	ldr	r3, [pc, #556]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800410e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	e213      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT7_REVERSE") == 0) return parameters.OUT7_REVERSE;
 800411c:	498d      	ldr	r1, [pc, #564]	@ (8004354 <Get_Param_By_Name+0x5f8>)
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc f87e 	bl	8000220 <strcmp>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <Get_Param_By_Name+0x3de>
 800412a:	4b84      	ldr	r3, [pc, #528]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800412c:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	e204      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT8_REVERSE") == 0) return parameters.OUT8_REVERSE;
 800413a:	4987      	ldr	r1, [pc, #540]	@ (8004358 <Get_Param_By_Name+0x5fc>)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc f86f 	bl	8000220 <strcmp>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <Get_Param_By_Name+0x3fc>
 8004148:	4b7c      	ldr	r3, [pc, #496]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800414a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	e1f5      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "OUT1_TRIM") == 0) return parameters.OUT1_TRIM;
 8004158:	4980      	ldr	r1, [pc, #512]	@ (800435c <Get_Param_By_Name+0x600>)
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc f860 	bl	8000220 <strcmp>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <Get_Param_By_Name+0x41a>
 8004166:	4b75      	ldr	r3, [pc, #468]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004174:	e1e6      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT2_TRIM") == 0) return parameters.OUT2_TRIM;
 8004176:	497a      	ldr	r1, [pc, #488]	@ (8004360 <Get_Param_By_Name+0x604>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fc f851 	bl	8000220 <strcmp>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <Get_Param_By_Name+0x438>
 8004184:	4b6d      	ldr	r3, [pc, #436]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	e1d7      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT3_TRIM") == 0) return parameters.OUT3_TRIM;
 8004194:	4973      	ldr	r1, [pc, #460]	@ (8004364 <Get_Param_By_Name+0x608>)
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc f842 	bl	8000220 <strcmp>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <Get_Param_By_Name+0x456>
 80041a2:	4b66      	ldr	r3, [pc, #408]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80041a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b0:	e1c8      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT4_TRIM") == 0) return parameters.OUT4_TRIM;
 80041b2:	496d      	ldr	r1, [pc, #436]	@ (8004368 <Get_Param_By_Name+0x60c>)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fc f833 	bl	8000220 <strcmp>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <Get_Param_By_Name+0x474>
 80041c0:	4b5e      	ldr	r3, [pc, #376]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80041c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	e1b9      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT5_TRIM") == 0) return parameters.OUT5_TRIM;
 80041d0:	4966      	ldr	r1, [pc, #408]	@ (800436c <Get_Param_By_Name+0x610>)
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc f824 	bl	8000220 <strcmp>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <Get_Param_By_Name+0x492>
 80041de:	4b57      	ldr	r3, [pc, #348]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80041e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ec:	e1aa      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT6_TRIM") == 0) return parameters.OUT6_TRIM;
 80041ee:	4960      	ldr	r1, [pc, #384]	@ (8004370 <Get_Param_By_Name+0x614>)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fc f815 	bl	8000220 <strcmp>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <Get_Param_By_Name+0x4b0>
 80041fc:	4b4f      	ldr	r3, [pc, #316]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80041fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	e19b      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT7_TRIM") == 0) return parameters.OUT7_TRIM;
 800420c:	4959      	ldr	r1, [pc, #356]	@ (8004374 <Get_Param_By_Name+0x618>)
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc f806 	bl	8000220 <strcmp>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <Get_Param_By_Name+0x4ce>
 800421a:	4b48      	ldr	r3, [pc, #288]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800421c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004228:	e18c      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT8_TRIM") == 0) return parameters.OUT8_TRIM;
 800422a:	4953      	ldr	r1, [pc, #332]	@ (8004378 <Get_Param_By_Name+0x61c>)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fb fff7 	bl	8000220 <strcmp>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <Get_Param_By_Name+0x4ec>
 8004238:	4b40      	ldr	r3, [pc, #256]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800423a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004246:	e17d      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "OUT1_MIN") == 0) return parameters.OUT1_MIN;
 8004248:	494c      	ldr	r1, [pc, #304]	@ (800437c <Get_Param_By_Name+0x620>)
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fb ffe8 	bl	8000220 <strcmp>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <Get_Param_By_Name+0x50a>
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004258:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004264:	e16e      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT2_MIN") == 0) return parameters.OUT2_MIN;
 8004266:	4946      	ldr	r1, [pc, #280]	@ (8004380 <Get_Param_By_Name+0x624>)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fb ffd9 	bl	8000220 <strcmp>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <Get_Param_By_Name+0x528>
 8004274:	4b31      	ldr	r3, [pc, #196]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004276:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	e15f      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT3_MIN") == 0) return parameters.OUT3_MIN;
 8004284:	493f      	ldr	r1, [pc, #252]	@ (8004384 <Get_Param_By_Name+0x628>)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fb ffca 	bl	8000220 <strcmp>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <Get_Param_By_Name+0x546>
 8004292:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <Get_Param_By_Name+0x5e0>)
 8004294:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a0:	e150      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT4_MIN") == 0) return parameters.OUT4_MIN;
 80042a2:	4939      	ldr	r1, [pc, #228]	@ (8004388 <Get_Param_By_Name+0x62c>)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fb ffbb 	bl	8000220 <strcmp>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <Get_Param_By_Name+0x564>
 80042b0:	4b22      	ldr	r3, [pc, #136]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80042b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	e141      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT5_MIN") == 0) return parameters.OUT5_MIN;
 80042c0:	4932      	ldr	r1, [pc, #200]	@ (800438c <Get_Param_By_Name+0x630>)
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fb ffac 	bl	8000220 <strcmp>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <Get_Param_By_Name+0x582>
 80042ce:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80042d0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042dc:	e132      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT6_MIN") == 0) return parameters.OUT6_MIN;
 80042de:	492c      	ldr	r1, [pc, #176]	@ (8004390 <Get_Param_By_Name+0x634>)
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fb ff9d 	bl	8000220 <strcmp>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <Get_Param_By_Name+0x5a0>
 80042ec:	4b13      	ldr	r3, [pc, #76]	@ (800433c <Get_Param_By_Name+0x5e0>)
 80042ee:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	e123      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT7_MIN") == 0) return parameters.OUT7_MIN;
 80042fc:	4925      	ldr	r1, [pc, #148]	@ (8004394 <Get_Param_By_Name+0x638>)
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fb ff8e 	bl	8000220 <strcmp>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <Get_Param_By_Name+0x5be>
 800430a:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800430c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8004310:	ee07 3a90 	vmov	s15, r3
 8004314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004318:	e114      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT8_MIN") == 0) return parameters.OUT8_MIN;
 800431a:	491f      	ldr	r1, [pc, #124]	@ (8004398 <Get_Param_By_Name+0x63c>)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fb ff7f 	bl	8000220 <strcmp>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d139      	bne.n	800439c <Get_Param_By_Name+0x640>
 8004328:	4b04      	ldr	r3, [pc, #16]	@ (800433c <Get_Param_By_Name+0x5e0>)
 800432a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	e105      	b.n	8004544 <Get_Param_By_Name+0x7e8>
 8004338:	080177f8 	.word	0x080177f8
 800433c:	20000394 	.word	0x20000394
 8004340:	08017808 	.word	0x08017808
 8004344:	08017818 	.word	0x08017818
 8004348:	08017828 	.word	0x08017828
 800434c:	08017838 	.word	0x08017838
 8004350:	08017848 	.word	0x08017848
 8004354:	08017858 	.word	0x08017858
 8004358:	08017868 	.word	0x08017868
 800435c:	08017878 	.word	0x08017878
 8004360:	08017884 	.word	0x08017884
 8004364:	08017890 	.word	0x08017890
 8004368:	0801789c 	.word	0x0801789c
 800436c:	080178a8 	.word	0x080178a8
 8004370:	080178b4 	.word	0x080178b4
 8004374:	080178c0 	.word	0x080178c0
 8004378:	080178cc 	.word	0x080178cc
 800437c:	080178d8 	.word	0x080178d8
 8004380:	080178e4 	.word	0x080178e4
 8004384:	080178f0 	.word	0x080178f0
 8004388:	080178fc 	.word	0x080178fc
 800438c:	08017908 	.word	0x08017908
 8004390:	08017914 	.word	0x08017914
 8004394:	08017920 	.word	0x08017920
 8004398:	0801792c 	.word	0x0801792c

	else if(strcmp(name, "OUT1_MAX") == 0) return parameters.OUT1_MAX;
 800439c:	496c      	ldr	r1, [pc, #432]	@ (8004550 <Get_Param_By_Name+0x7f4>)
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fb ff3e 	bl	8000220 <strcmp>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <Get_Param_By_Name+0x65e>
 80043aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80043ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b8:	e0c4      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT2_MAX") == 0) return parameters.OUT2_MAX;
 80043ba:	4967      	ldr	r1, [pc, #412]	@ (8004558 <Get_Param_By_Name+0x7fc>)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fb ff2f 	bl	8000220 <strcmp>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d107      	bne.n	80043d8 <Get_Param_By_Name+0x67c>
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80043ca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	e0b5      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT3_MAX") == 0) return parameters.OUT3_MAX;
 80043d8:	4960      	ldr	r1, [pc, #384]	@ (800455c <Get_Param_By_Name+0x800>)
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fb ff20 	bl	8000220 <strcmp>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <Get_Param_By_Name+0x69a>
 80043e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80043e8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80043ec:	ee07 3a90 	vmov	s15, r3
 80043f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f4:	e0a6      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT4_MAX") == 0) return parameters.OUT4_MAX;
 80043f6:	495a      	ldr	r1, [pc, #360]	@ (8004560 <Get_Param_By_Name+0x804>)
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fb ff11 	bl	8000220 <strcmp>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d107      	bne.n	8004414 <Get_Param_By_Name+0x6b8>
 8004404:	4b53      	ldr	r3, [pc, #332]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004406:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	e097      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT5_MAX") == 0) return parameters.OUT5_MAX;
 8004414:	4953      	ldr	r1, [pc, #332]	@ (8004564 <Get_Param_By_Name+0x808>)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fb ff02 	bl	8000220 <strcmp>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <Get_Param_By_Name+0x6d6>
 8004422:	4b4c      	ldr	r3, [pc, #304]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004424:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004430:	e088      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT6_MAX") == 0) return parameters.OUT6_MAX;
 8004432:	494d      	ldr	r1, [pc, #308]	@ (8004568 <Get_Param_By_Name+0x80c>)
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fb fef3 	bl	8000220 <strcmp>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d107      	bne.n	8004450 <Get_Param_By_Name+0x6f4>
 8004440:	4b44      	ldr	r3, [pc, #272]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004442:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	e079      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT7_MAX") == 0) return parameters.OUT7_MAX;
 8004450:	4946      	ldr	r1, [pc, #280]	@ (800456c <Get_Param_By_Name+0x810>)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fb fee4 	bl	8000220 <strcmp>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <Get_Param_By_Name+0x712>
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004460:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446c:	e06a      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "OUT8_MAX") == 0) return parameters.OUT8_MAX;
 800446e:	4940      	ldr	r1, [pc, #256]	@ (8004570 <Get_Param_By_Name+0x814>)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fb fed5 	bl	8000220 <strcmp>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <Get_Param_By_Name+0x730>
 800447c:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 800447e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	e05b      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else if(strcmp(name, "THROTTLE_CHANNEL") == 0) return parameters.THROTTLE_CHANNEL;
 800448c:	4939      	ldr	r1, [pc, #228]	@ (8004574 <Get_Param_By_Name+0x818>)
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fb fec6 	bl	8000220 <strcmp>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <Get_Param_By_Name+0x74e>
 800449a:	4b2e      	ldr	r3, [pc, #184]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 800449c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80044a0:	ee07 3a90 	vmov	s15, r3
 80044a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a8:	e04c      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ROLL_CHANNEL") == 0) return parameters.ROLL_CHANNEL;
 80044aa:	4933      	ldr	r1, [pc, #204]	@ (8004578 <Get_Param_By_Name+0x81c>)
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fb feb7 	bl	8000220 <strcmp>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <Get_Param_By_Name+0x76c>
 80044b8:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80044ba:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	e03d      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "PITCH_CHANNEL") == 0) return parameters.PITCH_CHANNEL;
 80044c8:	492c      	ldr	r1, [pc, #176]	@ (800457c <Get_Param_By_Name+0x820>)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fb fea8 	bl	8000220 <strcmp>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <Get_Param_By_Name+0x78a>
 80044d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80044d8:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e4:	e02e      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "YAW_CHANNEL") == 0) return parameters.YAW_CHANNEL;
 80044e6:	4926      	ldr	r1, [pc, #152]	@ (8004580 <Get_Param_By_Name+0x824>)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7fb fe99 	bl	8000220 <strcmp>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <Get_Param_By_Name+0x7a8>
 80044f4:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 80044f6:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	e01f      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "ARMING_CHANNEL") == 0) return parameters.ARMING_CHANNEL;
 8004504:	491f      	ldr	r1, [pc, #124]	@ (8004584 <Get_Param_By_Name+0x828>)
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fb fe8a 	bl	8000220 <strcmp>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <Get_Param_By_Name+0x7c6>
 8004512:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004514:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004520:	e010      	b.n	8004544 <Get_Param_By_Name+0x7e8>
	else if(strcmp(name, "FLIGHT_MODE_CHANNEL") == 0) return parameters.FLIGHT_MODE_CHANNEL;
 8004522:	4919      	ldr	r1, [pc, #100]	@ (8004588 <Get_Param_By_Name+0x82c>)
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fb fe7b 	bl	8000220 <strcmp>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <Get_Param_By_Name+0x7e4>
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <Get_Param_By_Name+0x7f8>)
 8004532:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	e001      	b.n	8004544 <Get_Param_By_Name+0x7e8>

	else return 0;
 8004540:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800458c <Get_Param_By_Name+0x830>
}
 8004544:	eeb0 0a67 	vmov.f32	s0, s15
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	08017938 	.word	0x08017938
 8004554:	20000394 	.word	0x20000394
 8004558:	08017944 	.word	0x08017944
 800455c:	08017950 	.word	0x08017950
 8004560:	0801795c 	.word	0x0801795c
 8004564:	08017968 	.word	0x08017968
 8004568:	08017974 	.word	0x08017974
 800456c:	08017980 	.word	0x08017980
 8004570:	0801798c 	.word	0x0801798c
 8004574:	08017998 	.word	0x08017998
 8004578:	080179ac 	.word	0x080179ac
 800457c:	080179bc 	.word	0x080179bc
 8004580:	080179cc 	.word	0x080179cc
 8004584:	080179d8 	.word	0x080179d8
 8004588:	080179e8 	.word	0x080179e8
 800458c:	00000000 	.word	0x00000000

08004590 <Process_Command>:

void Process_Command(char *data){
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af02      	add	r7, sp, #8
 8004596:	6078      	str	r0, [r7, #4]
	char *token = strtok(data, " \r\n");
 8004598:	4933      	ldr	r1, [pc, #204]	@ (8004668 <Process_Command+0xd8>)
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f00f fa44 	bl	8013a28 <strtok>
 80045a0:	61f8      	str	r0, [r7, #28]

	if(strcmp(token, "set") == 0){
 80045a2:	4932      	ldr	r1, [pc, #200]	@ (800466c <Process_Command+0xdc>)
 80045a4:	69f8      	ldr	r0, [r7, #28]
 80045a6:	f7fb fe3b 	bl	8000220 <strcmp>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d114      	bne.n	80045da <Process_Command+0x4a>
		char *param = strtok(NULL, " \r\n");
 80045b0:	492d      	ldr	r1, [pc, #180]	@ (8004668 <Process_Command+0xd8>)
 80045b2:	2000      	movs	r0, #0
 80045b4:	f00f fa38 	bl	8013a28 <strtok>
 80045b8:	6138      	str	r0, [r7, #16]
		char *value = strtok(NULL, " \r\n");
 80045ba:	492b      	ldr	r1, [pc, #172]	@ (8004668 <Process_Command+0xd8>)
 80045bc:	2000      	movs	r0, #0
 80045be:	f00f fa33 	bl	8013a28 <strtok>
 80045c2:	60f8      	str	r0, [r7, #12]

		if (param && value) {
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04a      	beq.n	8004660 <Process_Command+0xd0>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d047      	beq.n	8004660 <Process_Command+0xd0>
			Set_Param_By_Name(param, value);
 80045d0:	68f9      	ldr	r1, [r7, #12]
 80045d2:	6938      	ldr	r0, [r7, #16]
 80045d4:	f7fe fec8 	bl	8003368 <Set_Param_By_Name>

	else{
		sprintf((char*) usbTxBuffer, "Unknown command\r\n");
		CDC_Transmit_FS(usbTxBuffer, sizeof(usbTxBuffer));
	}
}
 80045d8:	e042      	b.n	8004660 <Process_Command+0xd0>
	else if(strcmp(token, "get") == 0) {
 80045da:	4925      	ldr	r1, [pc, #148]	@ (8004670 <Process_Command+0xe0>)
 80045dc:	69f8      	ldr	r0, [r7, #28]
 80045de:	f7fb fe1f 	bl	8000220 <strcmp>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11d      	bne.n	8004624 <Process_Command+0x94>
		char *param = strtok(NULL, " \r\n");
 80045e8:	491f      	ldr	r1, [pc, #124]	@ (8004668 <Process_Command+0xd8>)
 80045ea:	2000      	movs	r0, #0
 80045ec:	f00f fa1c 	bl	8013a28 <strtok>
 80045f0:	61b8      	str	r0, [r7, #24]
		if(param) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d033      	beq.n	8004660 <Process_Command+0xd0>
			float value = Get_Param_By_Name(param);
 80045f8:	69b8      	ldr	r0, [r7, #24]
 80045fa:	f7ff fbaf 	bl	8003d5c <Get_Param_By_Name>
 80045fe:	ed87 0a05 	vstr	s0, [r7, #20]
			sprintf((char*) usbTxBuffer, "%s = %f\r\n", param, value);
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7fb ffd8 	bl	80005b8 <__aeabi_f2d>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	e9cd 2300 	strd	r2, r3, [sp]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4918      	ldr	r1, [pc, #96]	@ (8004674 <Process_Command+0xe4>)
 8004614:	4818      	ldr	r0, [pc, #96]	@ (8004678 <Process_Command+0xe8>)
 8004616:	f00f f987 	bl	8013928 <siprintf>
			CDC_Transmit_FS(usbTxBuffer, sizeof(usbTxBuffer));
 800461a:	2114      	movs	r1, #20
 800461c:	4816      	ldr	r0, [pc, #88]	@ (8004678 <Process_Command+0xe8>)
 800461e:	f00d f847 	bl	80116b0 <CDC_Transmit_FS>
}
 8004622:	e01d      	b.n	8004660 <Process_Command+0xd0>
	else if(strcmp(token, "save") == 0) {
 8004624:	4915      	ldr	r1, [pc, #84]	@ (800467c <Process_Command+0xec>)
 8004626:	69f8      	ldr	r0, [r7, #28]
 8004628:	f7fb fdfa 	bl	8000220 <strcmp>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <Process_Command+0xaa>
		Save_Parameters(&parameters);
 8004632:	4813      	ldr	r0, [pc, #76]	@ (8004680 <Process_Command+0xf0>)
 8004634:	f7fe fc10 	bl	8002e58 <Save_Parameters>
}
 8004638:	e012      	b.n	8004660 <Process_Command+0xd0>
	else if(strcmp(token, "load") == 0) {
 800463a:	4912      	ldr	r1, [pc, #72]	@ (8004684 <Process_Command+0xf4>)
 800463c:	69f8      	ldr	r0, [r7, #28]
 800463e:	f7fb fdef 	bl	8000220 <strcmp>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <Process_Command+0xc0>
		Load_Parameters(&parameters);
 8004648:	480d      	ldr	r0, [pc, #52]	@ (8004680 <Process_Command+0xf0>)
 800464a:	f7fe fbe9 	bl	8002e20 <Load_Parameters>
}
 800464e:	e007      	b.n	8004660 <Process_Command+0xd0>
		sprintf((char*) usbTxBuffer, "Unknown command\r\n");
 8004650:	490d      	ldr	r1, [pc, #52]	@ (8004688 <Process_Command+0xf8>)
 8004652:	4809      	ldr	r0, [pc, #36]	@ (8004678 <Process_Command+0xe8>)
 8004654:	f00f f968 	bl	8013928 <siprintf>
		CDC_Transmit_FS(usbTxBuffer, sizeof(usbTxBuffer));
 8004658:	2114      	movs	r1, #20
 800465a:	4807      	ldr	r0, [pc, #28]	@ (8004678 <Process_Command+0xe8>)
 800465c:	f00d f828 	bl	80116b0 <CDC_Transmit_FS>
}
 8004660:	bf00      	nop
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	080179fc 	.word	0x080179fc
 800466c:	08017a00 	.word	0x08017a00
 8004670:	08017a04 	.word	0x08017a04
 8004674:	08017a08 	.word	0x08017a08
 8004678:	2000048c 	.word	0x2000048c
 800467c:	08017a14 	.word	0x08017a14
 8004680:	20000394 	.word	0x20000394
 8004684:	08017a1c 	.word	0x08017a1c
 8004688:	08017a24 	.word	0x08017a24

0800468c <USB_RXCallback>:

void USB_RXCallback(uint8_t *Buf, uint32_t *Len){
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuffer, Buf, *Len);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4808      	ldr	r0, [pc, #32]	@ (80046c0 <USB_RXCallback+0x34>)
 80046a0:	f00f faa5 	bl	8013bee <memcpy>

	Process_Command((char*) usbRxBuffer);
 80046a4:	4806      	ldr	r0, [pc, #24]	@ (80046c0 <USB_RXCallback+0x34>)
 80046a6:	f7ff ff73 	bl	8004590 <Process_Command>

	memset(usbRxBuffer, '\0', *Len);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	2100      	movs	r1, #0
 80046b2:	4803      	ldr	r0, [pc, #12]	@ (80046c0 <USB_RXCallback+0x34>)
 80046b4:	f00f f99d 	bl	80139f2 <memset>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000428 	.word	0x20000428

080046c4 <HAL_UARTEx_RxEventCallback>:
uint32_t timer = 0;
extern Arming arming;
extern ParameterTable parameters, default_parameters;
extern uint8_t usbRxBuffer[20];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart4.Instance){
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <HAL_UARTEx_RxEventCallback+0x58>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d11b      	bne.n	8004714 <HAL_UARTEx_RxEventCallback+0x50>

		if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 80046dc:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b0f      	cmp	r3, #15
 80046e2:	d10b      	bne.n	80046fc <HAL_UARTEx_RxEventCallback+0x38>
 80046e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 80046e6:	7e1b      	ldrb	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <HAL_UARTEx_RxEventCallback+0x38>
			Sbus_decode(&receiver);
 80046ec:	480c      	ldr	r0, [pc, #48]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 80046ee:	f7fe fc75 	bl	8002fdc <Sbus_decode>
			receiver.dataRdy = 1;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			receiver.dataRdy = 0;
			HAL_UART_AbortReceive(&huart4);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
		}
	}
}
 80046fa:	e00b      	b.n	8004714 <HAL_UARTEx_RxEventCallback+0x50>
			receiver.dataRdy = 0;
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			HAL_UART_AbortReceive(&huart4);
 8004704:	4805      	ldr	r0, [pc, #20]	@ (800471c <HAL_UARTEx_RxEventCallback+0x58>)
 8004706:	f008 f8fd 	bl	800c904 <HAL_UART_AbortReceive>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
 800470a:	2219      	movs	r2, #25
 800470c:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_UARTEx_RxEventCallback+0x5c>)
 800470e:	4803      	ldr	r0, [pc, #12]	@ (800471c <HAL_UARTEx_RxEventCallback+0x58>)
 8004710:	f009 fb13 	bl	800dd3a <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000758 	.word	0x20000758
 8004720:	20000950 	.word	0x20000950

08004724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b10      	cmp	r3, #16
 8004732:	d107      	bne.n	8004744 <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_GPIO_EXTI_Callback+0x28>)
 8004736:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 800473e:	4803      	ldr	r0, [pc, #12]	@ (800474c <HAL_GPIO_EXTI_Callback+0x28>)
 8004740:	f7fd fccc 	bl	80020dc <ICM42688_Read_DMA>
		}

	}

}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000990 	.word	0x20000990

08004750 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_SPI_TxRxCpltCallback+0x34>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d10b      	bne.n	800477c <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004764:	2201      	movs	r2, #1
 8004766:	2110      	movs	r1, #16
 8004768:	4807      	ldr	r0, [pc, #28]	@ (8004788 <HAL_SPI_TxRxCpltCallback+0x38>)
 800476a:	f003 f913 	bl	8007994 <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 800476e:	4807      	ldr	r0, [pc, #28]	@ (800478c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8004770:	f7fd fb02 	bl	8001d78 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	2000059c 	.word	0x2000059c
 8004788:	40020000 	.word	0x40020000
 800478c:	20000990 	.word	0x20000990

08004790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004792:	b08d      	sub	sp, #52	@ 0x34
 8004794:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004796:	f000 fcdb 	bl	8005150 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800479a:	f001 fa56 	bl	8005c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800479e:	f000 f905 	bl	80049ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047a2:	f000 fc49 	bl	8005038 <MX_GPIO_Init>
  MX_DMA_Init();
 80047a6:	f000 fc05 	bl	8004fb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80047aa:	f000 f96b 	bl	8004a84 <MX_ADC1_Init>
  MX_I2C1_Init();
 80047ae:	f000 f9bb 	bl	8004b28 <MX_I2C1_Init>
  MX_SPI1_Init();
 80047b2:	f000 f9f9 	bl	8004ba8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80047b6:	f000 fa35 	bl	8004c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 80047ba:	f000 facb 	bl	8004d54 <MX_TIM3_Init>
  MX_UART4_Init();
 80047be:	f000 fb61 	bl	8004e84 <MX_UART4_Init>
  MX_UART5_Init();
 80047c2:	f000 fb97 	bl	8004ef4 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80047c6:	f000 fbc5 	bl	8004f54 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80047ca:	f00c feaf 	bl	801152c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  //Start Sbus Reception and Sync
  if(Sbus_Begin(&huart4, &receiver) != HAL_OK) {
 80047ce:	4969      	ldr	r1, [pc, #420]	@ (8004974 <main+0x1e4>)
 80047d0:	4869      	ldr	r0, [pc, #420]	@ (8004978 <main+0x1e8>)
 80047d2:	f7fe fba3 	bl	8002f1c <Sbus_Begin>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <main+0x50>
	  Error_Handler();
 80047dc:	f000 fce4 	bl	80051a8 <Error_Handler>
  }

  //Start IMU, configure ranges, filters & interrupts
  if(ICM42688_Begin(&imu, &hspi1) != HAL_OK) {
 80047e0:	4966      	ldr	r1, [pc, #408]	@ (800497c <main+0x1ec>)
 80047e2:	4867      	ldr	r0, [pc, #412]	@ (8004980 <main+0x1f0>)
 80047e4:	f7fd f9a8 	bl	8001b38 <ICM42688_Begin>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <main+0x62>
	  Error_Handler();
 80047ee:	f000 fcdb 	bl	80051a8 <Error_Handler>
  }

  //Start DMA Read for Vbat ADC
  if(Battery_Begin(&hadc1) != HAL_OK) {
 80047f2:	4864      	ldr	r0, [pc, #400]	@ (8004984 <main+0x1f4>)
 80047f4:	f7fc feac 	bl	8001550 <Battery_Begin>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <main+0x72>
	  Error_Handler();
 80047fe:	f000 fcd3 	bl	80051a8 <Error_Handler>
  }

  //Configure output timers
  if(Output_Begin(&htim2, &htim3) != HAL_OK) {
 8004802:	4961      	ldr	r1, [pc, #388]	@ (8004988 <main+0x1f8>)
 8004804:	4861      	ldr	r0, [pc, #388]	@ (800498c <main+0x1fc>)
 8004806:	f7fd fc8d 	bl	8002124 <Output_Begin>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <main+0x84>
	  Error_Handler();
 8004810:	f000 fcca 	bl	80051a8 <Error_Handler>
  }

  //Load Parameters from FLASH
  if(Load_Parameters(&parameters) != HAL_OK){
 8004814:	485e      	ldr	r0, [pc, #376]	@ (8004990 <main+0x200>)
 8004816:	f7fe fb03 	bl	8002e20 <Load_Parameters>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <main+0xa6>
	  Save_Parameters(&default_parameters);
 8004820:	485c      	ldr	r0, [pc, #368]	@ (8004994 <main+0x204>)
 8004822:	f7fe fb19 	bl	8002e58 <Save_Parameters>
	  if(Load_Parameters(&parameters) != HAL_OK){
 8004826:	485a      	ldr	r0, [pc, #360]	@ (8004990 <main+0x200>)
 8004828:	f7fe fafa 	bl	8002e20 <Load_Parameters>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <main+0xa6>
		  Error_Handler();
 8004832:	f000 fcb9 	bl	80051a8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8004836:	f001 fa59 	bl	8005cec <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	4b56      	ldr	r3, [pc, #344]	@ (8004998 <main+0x208>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b09      	cmp	r3, #9
 8004844:	d9f7      	bls.n	8004836 <main+0xa6>

		Battery_Update();
 8004846:	f7fc fe9b 	bl	8001580 <Battery_Update>

		if(imu.dataRdy){
 800484a:	4b4d      	ldr	r3, [pc, #308]	@ (8004980 <main+0x1f0>)
 800484c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01f      	beq.n	8004894 <main+0x104>

			AHRS_Update_Complementary_Filter(imu.gyro, imu.accel, 0.8, DELTA_T);
 8004854:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <main+0x1f0>)
 8004856:	ed93 5a01 	vldr	s10, [r3, #4]
 800485a:	edd3 5a02 	vldr	s11, [r3, #8]
 800485e:	ed93 6a03 	vldr	s12, [r3, #12]
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <main+0x1f0>)
 8004864:	edd3 6a04 	vldr	s13, [r3, #16]
 8004868:	ed93 7a05 	vldr	s14, [r3, #20]
 800486c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004870:	eddf 3a4a 	vldr	s7, [pc, #296]	@ 800499c <main+0x20c>
 8004874:	ed9f 3a4a 	vldr	s6, [pc, #296]	@ 80049a0 <main+0x210>
 8004878:	eef0 1a45 	vmov.f32	s3, s10
 800487c:	eeb0 2a65 	vmov.f32	s4, s11
 8004880:	eef0 2a46 	vmov.f32	s5, s12
 8004884:	eeb0 0a66 	vmov.f32	s0, s13
 8004888:	eef0 0a47 	vmov.f32	s1, s14
 800488c:	eeb0 1a67 	vmov.f32	s2, s15
 8004890:	f7fc fda6 	bl	80013e0 <AHRS_Update_Complementary_Filter>

		}

		if(receiver.dataRdy){
 8004894:	4b37      	ldr	r3, [pc, #220]	@ (8004974 <main+0x1e4>)
 8004896:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800489a:	2b00      	cmp	r3, #0
 800489c:	d051      	beq.n	8004942 <main+0x1b2>

			Process_Input(receiver);
 800489e:	4e35      	ldr	r6, [pc, #212]	@ (8004974 <main+0x1e4>)
 80048a0:	466d      	mov	r5, sp
 80048a2:	f106 0410 	add.w	r4, r6, #16
 80048a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048ba:	f7fd f887 	bl	80019cc <Process_Input>

			if(flight_mode == ACRO_MODE) Acro_Mode(receiver, DELTA_T);
 80048be:	4b39      	ldr	r3, [pc, #228]	@ (80049a4 <main+0x214>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d112      	bne.n	80048ec <main+0x15c>
 80048c6:	4e2b      	ldr	r6, [pc, #172]	@ (8004974 <main+0x1e4>)
 80048c8:	466d      	mov	r5, sp
 80048ca:	f106 0410 	add.w	r4, r6, #16
 80048ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048e2:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800499c <main+0x20c>
 80048e6:	f7fc ff27 	bl	8001738 <Acro_Mode>
 80048ea:	e02a      	b.n	8004942 <main+0x1b2>
			else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver, DELTA_T);
 80048ec:	4b2d      	ldr	r3, [pc, #180]	@ (80049a4 <main+0x214>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d112      	bne.n	800491a <main+0x18a>
 80048f4:	4e1f      	ldr	r6, [pc, #124]	@ (8004974 <main+0x1e4>)
 80048f6:	466d      	mov	r5, sp
 80048f8:	f106 0410 	add.w	r4, r6, #16
 80048fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004904:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004908:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800490c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004910:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800499c <main+0x20c>
 8004914:	f7fc fe4c 	bl	80015b0 <Stabilized_Mode>
 8004918:	e013      	b.n	8004942 <main+0x1b2>
			else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver);
 800491a:	4b22      	ldr	r3, [pc, #136]	@ (80049a4 <main+0x214>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <main+0x1b2>
 8004922:	4e14      	ldr	r6, [pc, #80]	@ (8004974 <main+0x1e4>)
 8004924:	466d      	mov	r5, sp
 8004926:	f106 0410 	add.w	r4, r6, #16
 800492a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004932:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004936:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800493a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800493e:	f7fc ffd1 	bl	80018e4 <Manual_Mode>

		}

		Output_Update(&htim2, &htim3);
 8004942:	4911      	ldr	r1, [pc, #68]	@ (8004988 <main+0x1f8>)
 8004944:	4811      	ldr	r0, [pc, #68]	@ (800498c <main+0x1fc>)
 8004946:	f7fd fc95 	bl	8002274 <Output_Update>



		timer += DELTA_T*1000;
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <main+0x208>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fb fe10 	bl	8000574 <__aeabi_ui2d>
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <main+0x218>)
 800495a:	f7fb fccf 	bl	80002fc <__adddf3>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	f7fc f957 	bl	8000c18 <__aeabi_d2uiz>
 800496a:	4603      	mov	r3, r0
 800496c:	4a0a      	ldr	r2, [pc, #40]	@ (8004998 <main+0x208>)
 800496e:	6013      	str	r3, [r2, #0]
	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8004970:	e761      	b.n	8004836 <main+0xa6>
 8004972:	bf00      	nop
 8004974:	20000950 	.word	0x20000950
 8004978:	20000758 	.word	0x20000758
 800497c:	2000059c 	.word	0x2000059c
 8004980:	20000990 	.word	0x20000990
 8004984:	200004a0 	.word	0x200004a0
 8004988:	2000070c 	.word	0x2000070c
 800498c:	200006c0 	.word	0x200006c0
 8004990:	20000394 	.word	0x20000394
 8004994:	08017a80 	.word	0x08017a80
 8004998:	200009c8 	.word	0x200009c8
 800499c:	3c23d70a 	.word	0x3c23d70a
 80049a0:	3f4ccccd 	.word	0x3f4ccccd
 80049a4:	20000334 	.word	0x20000334
 80049a8:	40240000 	.word	0x40240000

080049ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b094      	sub	sp, #80	@ 0x50
 80049b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049b2:	f107 0320 	add.w	r3, r7, #32
 80049b6:	2230      	movs	r2, #48	@ 0x30
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f00f f819 	bl	80139f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049d0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a7c <SystemClock_Config+0xd0>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	4a29      	ldr	r2, [pc, #164]	@ (8004a7c <SystemClock_Config+0xd0>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6413      	str	r3, [r2, #64]	@ 0x40
 80049dc:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <SystemClock_Config+0xd0>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049e8:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <SystemClock_Config+0xd4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a24      	ldr	r2, [pc, #144]	@ (8004a80 <SystemClock_Config+0xd4>)
 80049ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <SystemClock_Config+0xd4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a14:	2304      	movs	r3, #4
 8004a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004a18:	23d8      	movs	r3, #216	@ 0xd8
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004a20:	2309      	movs	r3, #9
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a24:	f107 0320 	add.w	r3, r7, #32
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f004 fc0d 	bl	8009248 <HAL_RCC_OscConfig>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004a34:	f000 fbb8 	bl	80051a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a38:	f004 fbb6 	bl	80091a8 <HAL_PWREx_EnableOverDrive>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a42:	f000 fbb1 	bl	80051a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a46:	230f      	movs	r3, #15
 8004a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	2107      	movs	r1, #7
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 fe93 	bl	8009790 <HAL_RCC_ClockConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004a70:	f000 fb9a 	bl	80051a8 <Error_Handler>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3750      	adds	r7, #80	@ 0x50
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40007000 	.word	0x40007000

08004a84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a96:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004a98:	4a21      	ldr	r2, [pc, #132]	@ (8004b20 <MX_ADC1_Init+0x9c>)
 8004a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004aa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ab6:	4b19      	ldr	r3, [pc, #100]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004abe:	4b17      	ldr	r3, [pc, #92]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ac4:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <MX_ADC1_Init+0xa0>)
 8004ac8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aca:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ade:	4b0f      	ldr	r3, [pc, #60]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ae4:	480d      	ldr	r0, [pc, #52]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004ae6:	f001 f931 	bl	8005d4c <HAL_ADC_Init>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004af0:	f000 fb5a 	bl	80051a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004af4:	230a      	movs	r3, #10
 8004af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004afc:	2307      	movs	r3, #7
 8004afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b00:	463b      	mov	r3, r7
 8004b02:	4619      	mov	r1, r3
 8004b04:	4805      	ldr	r0, [pc, #20]	@ (8004b1c <MX_ADC1_Init+0x98>)
 8004b06:	f001 fa81 	bl	800600c <HAL_ADC_ConfigChannel>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004b10:	f000 fb4a 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200004a0 	.word	0x200004a0
 8004b20:	40012000 	.word	0x40012000
 8004b24:	0f000001 	.word	0x0f000001

08004b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba0 <MX_I2C1_Init+0x78>)
 8004b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba4 <MX_I2C1_Init+0x7c>)
 8004b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b38:	4b18      	ldr	r3, [pc, #96]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b3e:	4b17      	ldr	r3, [pc, #92]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b44:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b50:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b62:	480e      	ldr	r0, [pc, #56]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b64:	f002 ff62 	bl	8007a2c <HAL_I2C_Init>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b6e:	f000 fb1b 	bl	80051a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b72:	2100      	movs	r1, #0
 8004b74:	4809      	ldr	r0, [pc, #36]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b76:	f002 fff5 	bl	8007b64 <HAL_I2CEx_ConfigAnalogFilter>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b80:	f000 fb12 	bl	80051a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b84:	2100      	movs	r1, #0
 8004b86:	4805      	ldr	r0, [pc, #20]	@ (8004b9c <MX_I2C1_Init+0x74>)
 8004b88:	f003 f837 	bl	8007bfa <HAL_I2CEx_ConfigDigitalFilter>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b92:	f000 fb09 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000548 	.word	0x20000548
 8004ba0:	40005400 	.word	0x40005400
 8004ba4:	20404768 	.word	0x20404768

08004ba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004bac:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bae:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <MX_SPI1_Init+0x78>)
 8004bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bba:	4b18      	ldr	r3, [pc, #96]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bc0:	4b16      	ldr	r3, [pc, #88]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc8:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bce:	4b13      	ldr	r3, [pc, #76]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bde:	2210      	movs	r2, #16
 8004be0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004be2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004bfa:	4b08      	ldr	r3, [pc, #32]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004c02:	2208      	movs	r2, #8
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c06:	4805      	ldr	r0, [pc, #20]	@ (8004c1c <MX_SPI1_Init+0x74>)
 8004c08:	f005 fb32 	bl	800a270 <HAL_SPI_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c12:	f000 fac9 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000059c 	.word	0x2000059c
 8004c20:	40013000 	.word	0x40013000

08004c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	@ 0x38
 8004c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c38:	f107 031c 	add.w	r3, r7, #28
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c44:	463b      	mov	r3, r7
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	609a      	str	r2, [r3, #8]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	611a      	str	r2, [r3, #16]
 8004c52:	615a      	str	r2, [r3, #20]
 8004c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c56:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c60:	223b      	movs	r2, #59	@ 0x3b
 8004c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c64:	4b3a      	ldr	r3, [pc, #232]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c6c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8004c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c72:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c78:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c7e:	4834      	ldr	r0, [pc, #208]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c80:	f006 fe10 	bl	800b8a4 <HAL_TIM_Base_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004c8a:	f000 fa8d 	bl	80051a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c98:	4619      	mov	r1, r3
 8004c9a:	482d      	ldr	r0, [pc, #180]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004c9c:	f007 f8c8 	bl	800be30 <HAL_TIM_ConfigClockSource>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004ca6:	f000 fa7f 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004caa:	4829      	ldr	r0, [pc, #164]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004cac:	f006 fe51 	bl	800b952 <HAL_TIM_PWM_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004cb6:	f000 fa77 	bl	80051a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cc2:	f107 031c 	add.w	r3, r7, #28
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4821      	ldr	r0, [pc, #132]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004cca:	f007 fd3f 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004cd4:	f000 fa68 	bl	80051a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cd8:	2360      	movs	r3, #96	@ 0x60
 8004cda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ce8:	463b      	mov	r3, r7
 8004cea:	2200      	movs	r2, #0
 8004cec:	4619      	mov	r1, r3
 8004cee:	4818      	ldr	r0, [pc, #96]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004cf0:	f006 ff8a 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004cfa:	f000 fa55 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cfe:	463b      	mov	r3, r7
 8004d00:	2204      	movs	r2, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4812      	ldr	r0, [pc, #72]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004d06:	f006 ff7f 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004d10:	f000 fa4a 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d14:	463b      	mov	r3, r7
 8004d16:	2208      	movs	r2, #8
 8004d18:	4619      	mov	r1, r3
 8004d1a:	480d      	ldr	r0, [pc, #52]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004d1c:	f006 ff74 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8004d26:	f000 fa3f 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	220c      	movs	r2, #12
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4807      	ldr	r0, [pc, #28]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004d32:	f006 ff69 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8004d3c:	f000 fa34 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004d40:	4803      	ldr	r0, [pc, #12]	@ (8004d50 <MX_TIM2_Init+0x12c>)
 8004d42:	f000 fc23 	bl	800558c <HAL_TIM_MspPostInit>

}
 8004d46:	bf00      	nop
 8004d48:	3738      	adds	r7, #56	@ 0x38
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200006c0 	.word	0x200006c0

08004d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	@ 0x38
 8004d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
 8004d64:	609a      	str	r2, [r3, #8]
 8004d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d68:	f107 031c 	add.w	r3, r7, #28
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d74:	463b      	mov	r3, r7
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	615a      	str	r2, [r3, #20]
 8004d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d86:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004d88:	4a3d      	ldr	r2, [pc, #244]	@ (8004e80 <MX_TIM3_Init+0x12c>)
 8004d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004d8e:	223b      	movs	r2, #59	@ 0x3b
 8004d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d92:	4b3a      	ldr	r3, [pc, #232]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8004d98:	4b38      	ldr	r3, [pc, #224]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004d9a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8004d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004da0:	4b36      	ldr	r3, [pc, #216]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da6:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004dac:	4833      	ldr	r0, [pc, #204]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004dae:	f006 fd79 	bl	800b8a4 <HAL_TIM_Base_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004db8:	f000 f9f6 	bl	80051a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	482c      	ldr	r0, [pc, #176]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004dca:	f007 f831 	bl	800be30 <HAL_TIM_ConfigClockSource>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004dd4:	f000 f9e8 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004dd8:	4828      	ldr	r0, [pc, #160]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004dda:	f006 fdba 	bl	800b952 <HAL_TIM_PWM_Init>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004de4:	f000 f9e0 	bl	80051a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004df0:	f107 031c 	add.w	r3, r7, #28
 8004df4:	4619      	mov	r1, r3
 8004df6:	4821      	ldr	r0, [pc, #132]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004df8:	f007 fca8 	bl	800c74c <HAL_TIMEx_MasterConfigSynchronization>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004e02:	f000 f9d1 	bl	80051a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e06:	2360      	movs	r3, #96	@ 0x60
 8004e08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e16:	463b      	mov	r3, r7
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4817      	ldr	r0, [pc, #92]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004e1e:	f006 fef3 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004e28:	f000 f9be 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	2204      	movs	r2, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4812      	ldr	r0, [pc, #72]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004e34:	f006 fee8 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004e3e:	f000 f9b3 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e42:	463b      	mov	r3, r7
 8004e44:	2208      	movs	r2, #8
 8004e46:	4619      	mov	r1, r3
 8004e48:	480c      	ldr	r0, [pc, #48]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004e4a:	f006 fedd 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004e54:	f000 f9a8 	bl	80051a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e58:	463b      	mov	r3, r7
 8004e5a:	220c      	movs	r2, #12
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4807      	ldr	r0, [pc, #28]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004e60:	f006 fed2 	bl	800bc08 <HAL_TIM_PWM_ConfigChannel>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8004e6a:	f000 f99d 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004e6e:	4803      	ldr	r0, [pc, #12]	@ (8004e7c <MX_TIM3_Init+0x128>)
 8004e70:	f000 fb8c 	bl	800558c <HAL_TIM_MspPostInit>

}
 8004e74:	bf00      	nop
 8004e76:	3738      	adds	r7, #56	@ 0x38
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000070c 	.word	0x2000070c
 8004e80:	40000400 	.word	0x40000400

08004e84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004e88:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <MX_UART4_Init+0x68>)
 8004e8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004e90:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <MX_UART4_Init+0x6c>)
 8004e92:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8004e94:	4b14      	ldr	r3, [pc, #80]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004e96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ea2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8004ea4:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8004eac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004eae:	2204      	movs	r2, #4
 8004eb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004ecc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004ed2:	4805      	ldr	r0, [pc, #20]	@ (8004ee8 <MX_UART4_Init+0x64>)
 8004ed4:	f007 fcc8 	bl	800c868 <HAL_UART_Init>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8004ede:	f000 f963 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000758 	.word	0x20000758
 8004eec:	40004c00 	.word	0x40004c00
 8004ef0:	000186a0 	.word	0x000186a0

08004ef4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004ef8:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004efa:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <MX_UART5_Init+0x5c>)
 8004efc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004efe:	4b13      	ldr	r3, [pc, #76]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004f06:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004f18:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f24:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f2a:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004f36:	4805      	ldr	r0, [pc, #20]	@ (8004f4c <MX_UART5_Init+0x58>)
 8004f38:	f007 fc96 	bl	800c868 <HAL_UART_Init>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8004f42:	f000 f931 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200007e0 	.word	0x200007e0
 8004f50:	40005000 	.word	0x40005000

08004f54 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f5a:	4a15      	ldr	r2, [pc, #84]	@ (8004fb0 <MX_USART6_UART_Init+0x5c>)
 8004f5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f5e:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f66:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f72:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f7a:	220c      	movs	r2, #12
 8004f7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004f96:	4805      	ldr	r0, [pc, #20]	@ (8004fac <MX_USART6_UART_Init+0x58>)
 8004f98:	f007 fc66 	bl	800c868 <HAL_UART_Init>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004fa2:	f000 f901 	bl	80051a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000868 	.word	0x20000868
 8004fb0:	40011400 	.word	0x40011400

08004fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004fba:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fd2:	4b18      	ldr	r3, [pc, #96]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	4a17      	ldr	r2, [pc, #92]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <MX_DMA_Init+0x80>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	200d      	movs	r0, #13
 8004ff0:	f001 fbbd 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004ff4:	200d      	movs	r0, #13
 8004ff6:	f001 fbd6 	bl	80067a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2038      	movs	r0, #56	@ 0x38
 8005000:	f001 fbb5 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005004:	2038      	movs	r0, #56	@ 0x38
 8005006:	f001 fbce 	bl	80067a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	203b      	movs	r0, #59	@ 0x3b
 8005010:	f001 fbad 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005014:	203b      	movs	r0, #59	@ 0x3b
 8005016:	f001 fbc6 	bl	80067a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2100      	movs	r1, #0
 800501e:	203c      	movs	r0, #60	@ 0x3c
 8005020:	f001 fba5 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005024:	203c      	movs	r0, #60	@ 0x3c
 8005026:	f001 fbbe 	bl	80067a6 <HAL_NVIC_EnableIRQ>

}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800

08005038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	@ 0x28
 800503c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	60da      	str	r2, [r3, #12]
 800504c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800504e:	4b3d      	ldr	r3, [pc, #244]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	4a3c      	ldr	r2, [pc, #240]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005058:	6313      	str	r3, [r2, #48]	@ 0x30
 800505a:	4b3a      	ldr	r3, [pc, #232]	@ (8005144 <MX_GPIO_Init+0x10c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005066:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	4a36      	ldr	r2, [pc, #216]	@ (8005144 <MX_GPIO_Init+0x10c>)
 800506c:	f043 0304 	orr.w	r3, r3, #4
 8005070:	6313      	str	r3, [r2, #48]	@ 0x30
 8005072:	4b34      	ldr	r3, [pc, #208]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800507e:	4b31      	ldr	r3, [pc, #196]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	4a30      	ldr	r2, [pc, #192]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6313      	str	r3, [r2, #48]	@ 0x30
 800508a:	4b2e      	ldr	r3, [pc, #184]	@ (8005144 <MX_GPIO_Init+0x10c>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005096:	4b2b      	ldr	r3, [pc, #172]	@ (8005144 <MX_GPIO_Init+0x10c>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	4a2a      	ldr	r2, [pc, #168]	@ (8005144 <MX_GPIO_Init+0x10c>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050a2:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <MX_GPIO_Init+0x10c>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050ae:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <MX_GPIO_Init+0x10c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	4a24      	ldr	r2, [pc, #144]	@ (8005144 <MX_GPIO_Init+0x10c>)
 80050b4:	f043 0308 	orr.w	r3, r3, #8
 80050b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ba:	4b22      	ldr	r3, [pc, #136]	@ (8005144 <MX_GPIO_Init+0x10c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2108      	movs	r1, #8
 80050ca:	481f      	ldr	r0, [pc, #124]	@ (8005148 <MX_GPIO_Init+0x110>)
 80050cc:	f002 fc62 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80050d0:	2200      	movs	r2, #0
 80050d2:	2110      	movs	r1, #16
 80050d4:	481d      	ldr	r0, [pc, #116]	@ (800514c <MX_GPIO_Init+0x114>)
 80050d6:	f002 fc5d 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80050da:	2308      	movs	r3, #8
 80050dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050de:	2301      	movs	r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	4619      	mov	r1, r3
 80050f0:	4815      	ldr	r0, [pc, #84]	@ (8005148 <MX_GPIO_Init+0x110>)
 80050f2:	f002 fab3 	bl	800765c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80050f6:	2310      	movs	r3, #16
 80050f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050fa:	2301      	movs	r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4619      	mov	r1, r3
 800510c:	480f      	ldr	r0, [pc, #60]	@ (800514c <MX_GPIO_Init+0x114>)
 800510e:	f002 faa5 	bl	800765c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8005112:	2310      	movs	r3, #16
 8005114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005116:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800511a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511c:	2300      	movs	r3, #0
 800511e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	4619      	mov	r1, r3
 8005126:	4808      	ldr	r0, [pc, #32]	@ (8005148 <MX_GPIO_Init+0x110>)
 8005128:	f002 fa98 	bl	800765c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	200a      	movs	r0, #10
 8005132:	f001 fb1c 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005136:	200a      	movs	r0, #10
 8005138:	f001 fb35 	bl	80067a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800513c:	bf00      	nop
 800513e:	3728      	adds	r7, #40	@ 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	40020800 	.word	0x40020800
 800514c:	40020000 	.word	0x40020000

08005150 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005156:	463b      	mov	r3, r7
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005162:	f001 fb3b 	bl	80067dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005166:	2301      	movs	r3, #1
 8005168:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800516a:	2300      	movs	r3, #0
 800516c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005172:	231f      	movs	r3, #31
 8005174:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005176:	2387      	movs	r3, #135	@ 0x87
 8005178:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800517a:	2300      	movs	r3, #0
 800517c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800517e:	2300      	movs	r3, #0
 8005180:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005182:	2301      	movs	r3, #1
 8005184:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005186:	2301      	movs	r3, #1
 8005188:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800518a:	2300      	movs	r3, #0
 800518c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005192:	463b      	mov	r3, r7
 8005194:	4618      	mov	r0, r3
 8005196:	f001 fb59 	bl	800684c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800519a:	2004      	movs	r0, #4
 800519c:	f001 fb36 	bl	800680c <HAL_MPU_Enable>

}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051ae:	b672      	cpsid	i
}
 80051b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 80051b2:	2108      	movs	r1, #8
 80051b4:	4807      	ldr	r0, [pc, #28]	@ (80051d4 <Error_Handler+0x2c>)
 80051b6:	f002 fc06 	bl	80079c6 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++){
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
 80051be:	e003      	b.n	80051c8 <Error_Handler+0x20>
		  __NOP();
 80051c0:	bf00      	nop
	  for(int i = 0; i < 1000000; i++){
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3301      	adds	r3, #1
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a03      	ldr	r2, [pc, #12]	@ (80051d8 <Error_Handler+0x30>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	ddf7      	ble.n	80051c0 <Error_Handler+0x18>
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 80051d0:	e7ef      	b.n	80051b2 <Error_Handler+0xa>
 80051d2:	bf00      	nop
 80051d4:	40020800 	.word	0x40020800
 80051d8:	000f423f 	.word	0x000f423f

080051dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <HAL_MspInit+0x44>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005220 <HAL_MspInit+0x44>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005220 <HAL_MspInit+0x44>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fa:	4b09      	ldr	r3, [pc, #36]	@ (8005220 <HAL_MspInit+0x44>)
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	4a08      	ldr	r2, [pc, #32]	@ (8005220 <HAL_MspInit+0x44>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005204:	6453      	str	r3, [r2, #68]	@ 0x44
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_MspInit+0x44>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800

08005224 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	@ 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2d      	ldr	r2, [pc, #180]	@ (80052f8 <HAL_ADC_MspInit+0xd4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d153      	bne.n	80052ee <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005246:	4b2d      	ldr	r3, [pc, #180]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	4a2c      	ldr	r2, [pc, #176]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005250:	6453      	str	r3, [r2, #68]	@ 0x44
 8005252:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800525e:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	4a26      	ldr	r2, [pc, #152]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	6313      	str	r3, [r2, #48]	@ 0x30
 800526a:	4b24      	ldr	r3, [pc, #144]	@ (80052fc <HAL_ADC_MspInit+0xd8>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005276:	2301      	movs	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800527a:	2303      	movs	r3, #3
 800527c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005282:	f107 0314 	add.w	r3, r7, #20
 8005286:	4619      	mov	r1, r3
 8005288:	481d      	ldr	r0, [pc, #116]	@ (8005300 <HAL_ADC_MspInit+0xdc>)
 800528a:	f002 f9e7 	bl	800765c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800528e:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 8005290:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <HAL_ADC_MspInit+0xe4>)
 8005292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005294:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800529a:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 800529c:	2200      	movs	r2, #0
 800529e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80052a0:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052be:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80052d2:	480c      	ldr	r0, [pc, #48]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052d4:	f001 fafa 	bl	80068cc <HAL_DMA_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80052de:	f7ff ff63 	bl	80051a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a07      	ldr	r2, [pc, #28]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80052e8:	4a06      	ldr	r2, [pc, #24]	@ (8005304 <HAL_ADC_MspInit+0xe0>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80052ee:	bf00      	nop
 80052f0:	3728      	adds	r7, #40	@ 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40012000 	.word	0x40012000
 80052fc:	40023800 	.word	0x40023800
 8005300:	40020800 	.word	0x40020800
 8005304:	200004e8 	.word	0x200004e8
 8005308:	40026470 	.word	0x40026470

0800530c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0aa      	sub	sp, #168	@ 0xa8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005314:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f00e fb60 	bl	80139f2 <memset>
  if(hi2c->Instance==I2C1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a21      	ldr	r2, [pc, #132]	@ (80053bc <HAL_I2C_MspInit+0xb0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d13b      	bne.n	80053b4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800533c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005340:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005342:	2300      	movs	r3, #0
 8005344:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	4618      	mov	r0, r3
 800534c:	f004 fc46 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005356:	f7ff ff27 	bl	80051a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800535a:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	6313      	str	r3, [r2, #48]	@ 0x30
 8005366:	4b16      	ldr	r3, [pc, #88]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005372:	23c0      	movs	r3, #192	@ 0xc0
 8005374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005378:	2312      	movs	r3, #18
 800537a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005384:	2303      	movs	r3, #3
 8005386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800538a:	2304      	movs	r3, #4
 800538c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005390:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005394:	4619      	mov	r1, r3
 8005396:	480b      	ldr	r0, [pc, #44]	@ (80053c4 <HAL_I2C_MspInit+0xb8>)
 8005398:	f002 f960 	bl	800765c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800539c:	4b08      	ldr	r3, [pc, #32]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	4a07      	ldr	r2, [pc, #28]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 80053a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_I2C_MspInit+0xb4>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80053b4:	bf00      	nop
 80053b6:	37a8      	adds	r7, #168	@ 0xa8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40005400 	.word	0x40005400
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020400 	.word	0x40020400

080053c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d0:	f107 0314 	add.w	r3, r7, #20
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	60da      	str	r2, [r3, #12]
 80053de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a49      	ldr	r2, [pc, #292]	@ (800550c <HAL_SPI_MspInit+0x144>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f040 808c 	bne.w	8005504 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053ec:	4b48      	ldr	r3, [pc, #288]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 80053ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f0:	4a47      	ldr	r2, [pc, #284]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 80053f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80053f8:	4b45      	ldr	r3, [pc, #276]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005404:	4b42      	ldr	r3, [pc, #264]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	4a41      	ldr	r2, [pc, #260]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005410:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <HAL_SPI_MspInit+0x148>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800541c:	23e0      	movs	r3, #224	@ 0xe0
 800541e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005420:	2302      	movs	r3, #2
 8005422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005428:	2303      	movs	r3, #3
 800542a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800542c:	2305      	movs	r3, #5
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	4619      	mov	r1, r3
 8005436:	4837      	ldr	r0, [pc, #220]	@ (8005514 <HAL_SPI_MspInit+0x14c>)
 8005438:	f002 f910 	bl	800765c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800543c:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 800543e:	4a37      	ldr	r2, [pc, #220]	@ (800551c <HAL_SPI_MspInit+0x154>)
 8005440:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005442:	4b35      	ldr	r3, [pc, #212]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005444:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8005448:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800544a:	4b33      	ldr	r3, [pc, #204]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005450:	4b31      	ldr	r3, [pc, #196]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005452:	2200      	movs	r2, #0
 8005454:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005456:	4b30      	ldr	r3, [pc, #192]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005458:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800545c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800545e:	4b2e      	ldr	r3, [pc, #184]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005460:	2200      	movs	r2, #0
 8005462:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005464:	4b2c      	ldr	r3, [pc, #176]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005466:	2200      	movs	r2, #0
 8005468:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800546a:	4b2b      	ldr	r3, [pc, #172]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 800546c:	2200      	movs	r2, #0
 800546e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005470:	4b29      	ldr	r3, [pc, #164]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005472:	2200      	movs	r2, #0
 8005474:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005476:	4b28      	ldr	r3, [pc, #160]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005478:	2200      	movs	r2, #0
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800547c:	4826      	ldr	r0, [pc, #152]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 800547e:	f001 fa25 	bl	80068cc <HAL_DMA_Init>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8005488:	f7ff fe8e 	bl	80051a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a22      	ldr	r2, [pc, #136]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005490:	659a      	str	r2, [r3, #88]	@ 0x58
 8005492:	4a21      	ldr	r2, [pc, #132]	@ (8005518 <HAL_SPI_MspInit+0x150>)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8005498:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 800549a:	4a22      	ldr	r2, [pc, #136]	@ (8005524 <HAL_SPI_MspInit+0x15c>)
 800549c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800549e:	4b20      	ldr	r3, [pc, #128]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80054a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054a8:	2240      	movs	r2, #64	@ 0x40
 80054aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054ba:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054bc:	2200      	movs	r2, #0
 80054be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054c0:	4b17      	ldr	r3, [pc, #92]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80054c6:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054cc:	4b14      	ldr	r3, [pc, #80]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054d2:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80054d8:	4811      	ldr	r0, [pc, #68]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054da:	f001 f9f7 	bl	80068cc <HAL_DMA_Init>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80054e4:	f7ff fe60 	bl	80051a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80054ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005520 <HAL_SPI_MspInit+0x158>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	2023      	movs	r0, #35	@ 0x23
 80054fa:	f001 f938 	bl	800676e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80054fe:	2023      	movs	r0, #35	@ 0x23
 8005500:	f001 f951 	bl	80067a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005504:	bf00      	nop
 8005506:	3728      	adds	r7, #40	@ 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40013000 	.word	0x40013000
 8005510:	40023800 	.word	0x40023800
 8005514:	40020000 	.word	0x40020000
 8005518:	20000600 	.word	0x20000600
 800551c:	40026410 	.word	0x40026410
 8005520:	20000660 	.word	0x20000660
 8005524:	40026458 	.word	0x40026458

08005528 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005538:	d10c      	bne.n	8005554 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800553a:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	4a11      	ldr	r2, [pc, #68]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6413      	str	r3, [r2, #64]	@ 0x40
 8005546:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005552:	e010      	b.n	8005576 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0b      	ldr	r2, [pc, #44]	@ (8005588 <HAL_TIM_Base_MspInit+0x60>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10b      	bne.n	8005576 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	4a08      	ldr	r2, [pc, #32]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 8005564:	f043 0302 	orr.w	r3, r3, #2
 8005568:	6413      	str	r3, [r2, #64]	@ 0x40
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_TIM_Base_MspInit+0x5c>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	40000400 	.word	0x40000400

0800558c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	@ 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ac:	d139      	bne.n	8005622 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ae:	4b2f      	ldr	r3, [pc, #188]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	4a2e      	ldr	r2, [pc, #184]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055ba:	4b2c      	ldr	r3, [pc, #176]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c6:	4b29      	ldr	r3, [pc, #164]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	4a28      	ldr	r2, [pc, #160]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055cc:	f043 0302 	orr.w	r3, r3, #2
 80055d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055d2:	4b26      	ldr	r3, [pc, #152]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80055de:	f248 030c 	movw	r3, #32780	@ 0x800c
 80055e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055f0:	2301      	movs	r3, #1
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4619      	mov	r1, r3
 80055fa:	481d      	ldr	r0, [pc, #116]	@ (8005670 <HAL_TIM_MspPostInit+0xe4>)
 80055fc:	f002 f82e 	bl	800765c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005600:	2308      	movs	r3, #8
 8005602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005604:	2302      	movs	r3, #2
 8005606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560c:	2300      	movs	r3, #0
 800560e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005610:	2301      	movs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4619      	mov	r1, r3
 800561a:	4816      	ldr	r0, [pc, #88]	@ (8005674 <HAL_TIM_MspPostInit+0xe8>)
 800561c:	f002 f81e 	bl	800765c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005620:	e020      	b.n	8005664 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <HAL_TIM_MspPostInit+0xec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800562c:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005630:	4a0e      	ldr	r2, [pc, #56]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 8005632:	f043 0302 	orr.w	r3, r3, #2
 8005636:	6313      	str	r3, [r2, #48]	@ 0x30
 8005638:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <HAL_TIM_MspPostInit+0xe0>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005644:	2333      	movs	r3, #51	@ 0x33
 8005646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005648:	2302      	movs	r3, #2
 800564a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005650:	2300      	movs	r3, #0
 8005652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005654:	2302      	movs	r3, #2
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	4619      	mov	r1, r3
 800565e:	4805      	ldr	r0, [pc, #20]	@ (8005674 <HAL_TIM_MspPostInit+0xe8>)
 8005660:	f001 fffc 	bl	800765c <HAL_GPIO_Init>
}
 8005664:	bf00      	nop
 8005666:	3728      	adds	r7, #40	@ 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40023800 	.word	0x40023800
 8005670:	40020000 	.word	0x40020000
 8005674:	40020400 	.word	0x40020400
 8005678:	40000400 	.word	0x40000400

0800567c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0b0      	sub	sp, #192	@ 0xc0
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005698:	2280      	movs	r2, #128	@ 0x80
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f00e f9a8 	bl	80139f2 <memset>
  if(huart->Instance==UART4)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4aa1      	ldr	r2, [pc, #644]	@ (800592c <HAL_UART_MspInit+0x2b0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	f040 8096 	bne.w	80057da <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80056ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80056b4:	2300      	movs	r3, #0
 80056b6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 fa8d 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80056c8:	f7ff fd6e 	bl	80051a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80056cc:	4b98      	ldr	r3, [pc, #608]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	4a97      	ldr	r2, [pc, #604]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80056d8:	4b95      	ldr	r3, [pc, #596]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e4:	4b92      	ldr	r3, [pc, #584]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e8:	4a91      	ldr	r2, [pc, #580]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80056f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	4a8b      	ldr	r2, [pc, #556]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	6313      	str	r3, [r2, #48]	@ 0x30
 8005708:	4b89      	ldr	r3, [pc, #548]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	623b      	str	r3, [r7, #32]
 8005712:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005714:	2302      	movs	r3, #2
 8005716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571a:	2302      	movs	r3, #2
 800571c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800572c:	2308      	movs	r3, #8
 800572e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005732:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005736:	4619      	mov	r1, r3
 8005738:	487e      	ldr	r0, [pc, #504]	@ (8005934 <HAL_UART_MspInit+0x2b8>)
 800573a:	f001 ff8f 	bl	800765c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800573e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005746:	2302      	movs	r3, #2
 8005748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005752:	2303      	movs	r3, #3
 8005754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005758:	2308      	movs	r3, #8
 800575a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800575e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005762:	4619      	mov	r1, r3
 8005764:	4874      	ldr	r0, [pc, #464]	@ (8005938 <HAL_UART_MspInit+0x2bc>)
 8005766:	f001 ff79 	bl	800765c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800576a:	4b74      	ldr	r3, [pc, #464]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 800576c:	4a74      	ldr	r2, [pc, #464]	@ (8005940 <HAL_UART_MspInit+0x2c4>)
 800576e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005770:	4b72      	ldr	r3, [pc, #456]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 8005772:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005776:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005778:	4b70      	ldr	r3, [pc, #448]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800577e:	4b6f      	ldr	r3, [pc, #444]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005784:	4b6d      	ldr	r3, [pc, #436]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 8005786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800578a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800578c:	4b6b      	ldr	r3, [pc, #428]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 800578e:	2200      	movs	r2, #0
 8005790:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005792:	4b6a      	ldr	r3, [pc, #424]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8005798:	4b68      	ldr	r3, [pc, #416]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 800579a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800579e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057a0:	4b66      	ldr	r3, [pc, #408]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057a6:	4b65      	ldr	r3, [pc, #404]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80057ac:	4863      	ldr	r0, [pc, #396]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 80057ae:	f001 f88d 	bl	80068cc <HAL_DMA_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80057b8:	f7ff fcf6 	bl	80051a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a5f      	ldr	r2, [pc, #380]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 80057c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80057c2:	4a5e      	ldr	r2, [pc, #376]	@ (800593c <HAL_UART_MspInit+0x2c0>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	2034      	movs	r0, #52	@ 0x34
 80057ce:	f000 ffce 	bl	800676e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80057d2:	2034      	movs	r0, #52	@ 0x34
 80057d4:	f000 ffe7 	bl	80067a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80057d8:	e0a4      	b.n	8005924 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==UART5)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a59      	ldr	r2, [pc, #356]	@ (8005944 <HAL_UART_MspInit+0x2c8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d15e      	bne.n	80058a2 <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80057e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80057ea:	2300      	movs	r3, #0
 80057ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057f2:	4618      	mov	r0, r3
 80057f4:	f004 f9f2 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_UART_MspInit+0x186>
      Error_Handler();
 80057fe:	f7ff fcd3 	bl	80051a8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005802:	4b4b      	ldr	r3, [pc, #300]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	4a4a      	ldr	r2, [pc, #296]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005808:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580c:	6413      	str	r3, [r2, #64]	@ 0x40
 800580e:	4b48      	ldr	r3, [pc, #288]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800581a:	4b45      	ldr	r3, [pc, #276]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	4a44      	ldr	r2, [pc, #272]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	6313      	str	r3, [r2, #48]	@ 0x30
 8005826:	4b42      	ldr	r3, [pc, #264]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005832:	4b3f      	ldr	r3, [pc, #252]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	4a3e      	ldr	r2, [pc, #248]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005838:	f043 0308 	orr.w	r3, r3, #8
 800583c:	6313      	str	r3, [r2, #48]	@ 0x30
 800583e:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800584a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800584e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005852:	2302      	movs	r3, #2
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800585e:	2303      	movs	r3, #3
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005864:	2308      	movs	r3, #8
 8005866:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800586a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800586e:	4619      	mov	r1, r3
 8005870:	4831      	ldr	r0, [pc, #196]	@ (8005938 <HAL_UART_MspInit+0x2bc>)
 8005872:	f001 fef3 	bl	800765c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005876:	2304      	movs	r3, #4
 8005878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005888:	2303      	movs	r3, #3
 800588a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800588e:	2308      	movs	r3, #8
 8005890:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005894:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005898:	4619      	mov	r1, r3
 800589a:	482b      	ldr	r0, [pc, #172]	@ (8005948 <HAL_UART_MspInit+0x2cc>)
 800589c:	f001 fede 	bl	800765c <HAL_GPIO_Init>
}
 80058a0:	e040      	b.n	8005924 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a29      	ldr	r2, [pc, #164]	@ (800594c <HAL_UART_MspInit+0x2d0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d13b      	bne.n	8005924 <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80058ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80058b2:	2300      	movs	r3, #0
 80058b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058ba:	4618      	mov	r0, r3
 80058bc:	f004 f98e 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80058c6:	f7ff fc6f 	bl	80051a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80058ca:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058d0:	f043 0320 	orr.w	r3, r3, #32
 80058d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80058d6:	4b16      	ldr	r3, [pc, #88]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ee:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <HAL_UART_MspInit+0x2b4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80058fa:	23c0      	movs	r3, #192	@ 0xc0
 80058fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005900:	2302      	movs	r3, #2
 8005902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800590c:	2303      	movs	r3, #3
 800590e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005912:	2308      	movs	r3, #8
 8005914:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005918:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800591c:	4619      	mov	r1, r3
 800591e:	4806      	ldr	r0, [pc, #24]	@ (8005938 <HAL_UART_MspInit+0x2bc>)
 8005920:	f001 fe9c 	bl	800765c <HAL_GPIO_Init>
}
 8005924:	bf00      	nop
 8005926:	37c0      	adds	r7, #192	@ 0xc0
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40004c00 	.word	0x40004c00
 8005930:	40023800 	.word	0x40023800
 8005934:	40020000 	.word	0x40020000
 8005938:	40020800 	.word	0x40020800
 800593c:	200008f0 	.word	0x200008f0
 8005940:	40026040 	.word	0x40026040
 8005944:	40005000 	.word	0x40005000
 8005948:	40020c00 	.word	0x40020c00
 800594c:	40011400 	.word	0x40011400

08005950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <NMI_Handler+0x4>

08005958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <HardFault_Handler+0x4>

08005960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <MemManage_Handler+0x4>

08005968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <BusFault_Handler+0x4>

08005970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <UsageFault_Handler+0x4>

08005978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059a6:	f000 f98d 	bl	8005cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}

080059ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80059b2:	2010      	movs	r0, #16
 80059b4:	f002 f822 	bl	80079fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}

080059bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80059c0:	4802      	ldr	r0, [pc, #8]	@ (80059cc <DMA1_Stream2_IRQHandler+0x10>)
 80059c2:	f001 f923 	bl	8006c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200008f0 	.word	0x200008f0

080059d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80059d4:	4802      	ldr	r0, [pc, #8]	@ (80059e0 <SPI1_IRQHandler+0x10>)
 80059d6:	f005 fb49 	bl	800b06c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2000059c 	.word	0x2000059c

080059e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80059e8:	4802      	ldr	r0, [pc, #8]	@ (80059f4 <UART4_IRQHandler+0x10>)
 80059ea:	f007 f83b 	bl	800ca64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000758 	.word	0x20000758

080059f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80059fc:	4802      	ldr	r0, [pc, #8]	@ (8005a08 <DMA2_Stream0_IRQHandler+0x10>)
 80059fe:	f001 f905 	bl	8006c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000600 	.word	0x20000600

08005a0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005a10:	4802      	ldr	r0, [pc, #8]	@ (8005a1c <DMA2_Stream3_IRQHandler+0x10>)
 8005a12:	f001 f8fb 	bl	8006c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000660 	.word	0x20000660

08005a20 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a24:	4802      	ldr	r0, [pc, #8]	@ (8005a30 <DMA2_Stream4_IRQHandler+0x10>)
 8005a26:	f001 f8f1 	bl	8006c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200004e8 	.word	0x200004e8

08005a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005a38:	4802      	ldr	r0, [pc, #8]	@ (8005a44 <OTG_FS_IRQHandler+0x10>)
 8005a3a:	f002 fa62 	bl	8007f02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20001ed0 	.word	0x20001ed0

08005a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return 1;
 8005a4c:	2301      	movs	r3, #1
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <_kill>:

int _kill(int pid, int sig)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a62:	f00e f897 	bl	8013b94 <__errno>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2216      	movs	r2, #22
 8005a6a:	601a      	str	r2, [r3, #0]
  return -1;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_exit>:

void _exit (int status)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a80:	f04f 31ff 	mov.w	r1, #4294967295
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ffe7 	bl	8005a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <_exit+0x12>

08005a8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e00a      	b.n	8005ab6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	4601      	mov	r1, r0
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	60ba      	str	r2, [r7, #8]
 8005aac:	b2ca      	uxtb	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	dbf0      	blt.n	8005aa0 <_read+0x12>
  }

  return len;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e009      	b.n	8005aee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	60ba      	str	r2, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	dbf1      	blt.n	8005ada <_write+0x12>
  }
  return len;
 8005af6:	687b      	ldr	r3, [r7, #4]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_close>:

int _close(int file)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b28:	605a      	str	r2, [r3, #4]
  return 0;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_isatty>:

int _isatty(int file)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b70:	4a14      	ldr	r2, [pc, #80]	@ (8005bc4 <_sbrk+0x5c>)
 8005b72:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <_sbrk+0x60>)
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b7c:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <_sbrk+0x64>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b84:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <_sbrk+0x64>)
 8005b86:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <_sbrk+0x68>)
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <_sbrk+0x64>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d207      	bcs.n	8005ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b98:	f00d fffc 	bl	8013b94 <__errno>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e009      	b.n	8005bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ba8:	4b08      	ldr	r3, [pc, #32]	@ (8005bcc <_sbrk+0x64>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bae:	4b07      	ldr	r3, [pc, #28]	@ (8005bcc <_sbrk+0x64>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4a05      	ldr	r2, [pc, #20]	@ (8005bcc <_sbrk+0x64>)
 8005bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 }
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20040000 	.word	0x20040000
 8005bc8:	00000400 	.word	0x00000400
 8005bcc:	200009cc 	.word	0x200009cc
 8005bd0:	20002500 	.word	0x20002500

08005bd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <SystemInit+0x20>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	4a05      	ldr	r2, [pc, #20]	@ (8005bf4 <SystemInit+0x20>)
 8005be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	e000ed00 	.word	0xe000ed00

08005bf8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8005bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8005bfc:	f7ff ffea 	bl	8005bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c00:	480c      	ldr	r0, [pc, #48]	@ (8005c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c02:	490d      	ldr	r1, [pc, #52]	@ (8005c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c04:	4a0d      	ldr	r2, [pc, #52]	@ (8005c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c08:	e002      	b.n	8005c10 <LoopCopyDataInit>

08005c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c0e:	3304      	adds	r3, #4

08005c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c14:	d3f9      	bcc.n	8005c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c16:	4a0a      	ldr	r2, [pc, #40]	@ (8005c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c18:	4c0a      	ldr	r4, [pc, #40]	@ (8005c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c1c:	e001      	b.n	8005c22 <LoopFillZerobss>

08005c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c20:	3204      	adds	r2, #4

08005c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c24:	d3fb      	bcc.n	8005c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c26:	f00d ffbb 	bl	8013ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c2a:	f7fe fdb1 	bl	8004790 <main>
  bx  lr    
 8005c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c30:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c38:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8005c3c:	080183d8 	.word	0x080183d8
  ldr r2, =_sbss
 8005c40:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8005c44:	200024fc 	.word	0x200024fc

08005c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c48:	e7fe      	b.n	8005c48 <ADC_IRQHandler>

08005c4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c4e:	2003      	movs	r0, #3
 8005c50:	f000 fd82 	bl	8006758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c54:	200f      	movs	r0, #15
 8005c56:	f000 f805 	bl	8005c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c5a:	f7ff fabf 	bl	80051dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c6c:	4b12      	ldr	r3, [pc, #72]	@ (8005cb8 <HAL_InitTick+0x54>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <HAL_InitTick+0x58>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fd9d 	bl	80067c2 <HAL_SYSTICK_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00e      	b.n	8005cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d80a      	bhi.n	8005cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	f000 fd65 	bl	800676e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ca4:	4a06      	ldr	r2, [pc, #24]	@ (8005cc0 <HAL_InitTick+0x5c>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	20000008 	.word	0x20000008
 8005cc0:	20000004 	.word	0x20000004

08005cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_IncTick+0x20>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <HAL_IncTick+0x24>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	4a04      	ldr	r2, [pc, #16]	@ (8005ce8 <HAL_IncTick+0x24>)
 8005cd6:	6013      	str	r3, [r2, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000008 	.word	0x20000008
 8005ce8:	200009d0 	.word	0x200009d0

08005cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return uwTick;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	@ (8005d00 <HAL_GetTick+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	200009d0 	.word	0x200009d0

08005d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7ff ffee 	bl	8005cec <HAL_GetTick>
 8005d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d005      	beq.n	8005d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <HAL_Delay+0x44>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d2a:	bf00      	nop
 8005d2c:	f7ff ffde 	bl	8005cec <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d8f7      	bhi.n	8005d2c <HAL_Delay+0x28>
  {
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000008 	.word	0x20000008

08005d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e031      	b.n	8005dc6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fa5a 	bl	8005224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d116      	bne.n	8005db8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d8e:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <HAL_ADC_Init+0x84>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	f043 0202 	orr.w	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa90 	bl	80062c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005db6:	e001      	b.n	8005dbc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	ffffeefd 	.word	0xffffeefd

08005dd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_ADC_Start_DMA+0x22>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0d6      	b.n	8005fa4 <HAL_ADC_Start_DMA+0x1d0>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d018      	beq.n	8005e3e <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005e1c:	4b63      	ldr	r3, [pc, #396]	@ (8005fac <HAL_ADC_Start_DMA+0x1d8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a63      	ldr	r2, [pc, #396]	@ (8005fb0 <HAL_ADC_Start_DMA+0x1dc>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	0c9a      	lsrs	r2, r3, #18
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8005e30:	e002      	b.n	8005e38 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f9      	bne.n	8005e32 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 809e 	bne.w	8005f8a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e52:	4b58      	ldr	r3, [pc, #352]	@ (8005fb4 <HAL_ADC_Start_DMA+0x1e0>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e88:	d106      	bne.n	8005e98 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f023 0206 	bic.w	r2, r3, #6
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e96:	e002      	b.n	8005e9e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	4a43      	ldr	r2, [pc, #268]	@ (8005fb8 <HAL_ADC_Start_DMA+0x1e4>)
 8005eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	4a42      	ldr	r2, [pc, #264]	@ (8005fbc <HAL_ADC_Start_DMA+0x1e8>)
 8005eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	4a41      	ldr	r2, [pc, #260]	@ (8005fc0 <HAL_ADC_Start_DMA+0x1ec>)
 8005ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005ed6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ee6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	334c      	adds	r3, #76	@ 0x4c
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f000 fd96 	bl	8006a28 <HAL_DMA_Start_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <HAL_ADC_Start_DMA+0x1f0>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10f      	bne.n	8005f2c <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d143      	bne.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	e03a      	b.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	@ (8005fc8 <HAL_ADC_Start_DMA+0x1f4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10e      	bne.n	8005f54 <HAL_ADC_Start_DMA+0x180>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f52:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005f54:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc4 <HAL_ADC_Start_DMA+0x1f0>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d120      	bne.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a19      	ldr	r2, [pc, #100]	@ (8005fcc <HAL_ADC_Start_DMA+0x1f8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d11b      	bne.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d114      	bne.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	e00b      	b.n	8005fa2 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8e:	f043 0210 	orr.w	r2, r3, #16
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20000000 	.word	0x20000000
 8005fb0:	431bde83 	.word	0x431bde83
 8005fb4:	fffff8fe 	.word	0xfffff8fe
 8005fb8:	080064b5 	.word	0x080064b5
 8005fbc:	0800656f 	.word	0x0800656f
 8005fc0:	0800658b 	.word	0x0800658b
 8005fc4:	40012300 	.word	0x40012300
 8005fc8:	40012000 	.word	0x40012000
 8005fcc:	40012200 	.word	0x40012200

08005fd0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_ADC_ConfigChannel+0x1c>
 8006024:	2302      	movs	r3, #2
 8006026:	e13a      	b.n	800629e <HAL_ADC_ConfigChannel+0x292>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b09      	cmp	r3, #9
 8006036:	d93a      	bls.n	80060ae <HAL_ADC_ConfigChannel+0xa2>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006040:	d035      	beq.n	80060ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68d9      	ldr	r1, [r3, #12]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	3b1e      	subs	r3, #30
 8006058:	2207      	movs	r2, #7
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43da      	mvns	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	400a      	ands	r2, r1
 8006066:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a8f      	ldr	r2, [pc, #572]	@ (80062ac <HAL_ADC_ConfigChannel+0x2a0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10a      	bne.n	8006088 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68d9      	ldr	r1, [r3, #12]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	061a      	lsls	r2, r3, #24
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006086:	e039      	b.n	80060fc <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68d9      	ldr	r1, [r3, #12]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	4618      	mov	r0, r3
 800609a:	4603      	mov	r3, r0
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4403      	add	r3, r0
 80060a0:	3b1e      	subs	r3, #30
 80060a2:	409a      	lsls	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060ac:	e026      	b.n	80060fc <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6919      	ldr	r1, [r3, #16]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2207      	movs	r2, #7
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	43da      	mvns	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	400a      	ands	r2, r1
 80060d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6919      	ldr	r1, [r3, #16]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	4618      	mov	r0, r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	4403      	add	r3, r0
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	409a      	lsls	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d824      	bhi.n	800614e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	3b05      	subs	r3, #5
 8006116:	221f      	movs	r2, #31
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	43da      	mvns	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	400a      	ands	r2, r1
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	4618      	mov	r0, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	3b05      	subs	r3, #5
 8006140:	fa00 f203 	lsl.w	r2, r0, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	635a      	str	r2, [r3, #52]	@ 0x34
 800614c:	e04c      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d824      	bhi.n	80061a0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	3b23      	subs	r3, #35	@ 0x23
 8006168:	221f      	movs	r2, #31
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43da      	mvns	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	400a      	ands	r2, r1
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	4618      	mov	r0, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	3b23      	subs	r3, #35	@ 0x23
 8006192:	fa00 f203 	lsl.w	r2, r0, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30
 800619e:	e023      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	3b41      	subs	r3, #65	@ 0x41
 80061b2:	221f      	movs	r2, #31
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43da      	mvns	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	400a      	ands	r2, r1
 80061c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4618      	mov	r0, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	3b41      	subs	r3, #65	@ 0x41
 80061dc:	fa00 f203 	lsl.w	r2, r0, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <HAL_ADC_ConfigChannel+0x2a4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10a      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x1fc>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fa:	d105      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80061fc:	4b2d      	ldr	r3, [pc, #180]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	4a2c      	ldr	r2, [pc, #176]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006202:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006206:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a28      	ldr	r2, [pc, #160]	@ (80062b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10f      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x226>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b12      	cmp	r3, #18
 8006218:	d10b      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800621a:	4b26      	ldr	r3, [pc, #152]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	4a25      	ldr	r2, [pc, #148]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006220:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006224:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006226:	4b23      	ldr	r3, [pc, #140]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800622c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006230:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <HAL_ADC_ConfigChannel+0x2a4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d12b      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x288>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1a      	ldr	r2, [pc, #104]	@ (80062ac <HAL_ADC_ConfigChannel+0x2a0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <HAL_ADC_ConfigChannel+0x242>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b11      	cmp	r3, #17
 800624c:	d122      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800624e:	4b19      	ldr	r3, [pc, #100]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a18      	ldr	r2, [pc, #96]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006254:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006258:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800625a:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <HAL_ADC_ConfigChannel+0x2a8>)
 8006260:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006264:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a10      	ldr	r2, [pc, #64]	@ (80062ac <HAL_ADC_ConfigChannel+0x2a0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d111      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006270:	4b11      	ldr	r3, [pc, #68]	@ (80062b8 <HAL_ADC_ConfigChannel+0x2ac>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a11      	ldr	r2, [pc, #68]	@ (80062bc <HAL_ADC_ConfigChannel+0x2b0>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	0c9a      	lsrs	r2, r3, #18
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006286:	e002      	b.n	800628e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b01      	subs	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f9      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	10000012 	.word	0x10000012
 80062b0:	40012000 	.word	0x40012000
 80062b4:	40012300 	.word	0x40012300
 80062b8:	20000000 	.word	0x20000000
 80062bc:	431bde83 	.word	0x431bde83

080062c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80062c8:	4b78      	ldr	r3, [pc, #480]	@ (80064ac <ADC_Init+0x1ec>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4a77      	ldr	r2, [pc, #476]	@ (80064ac <ADC_Init+0x1ec>)
 80062ce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80062d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80062d4:	4b75      	ldr	r3, [pc, #468]	@ (80064ac <ADC_Init+0x1ec>)
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4973      	ldr	r1, [pc, #460]	@ (80064ac <ADC_Init+0x1ec>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	021a      	lsls	r2, r3, #8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	4a58      	ldr	r2, [pc, #352]	@ (80064b0 <ADC_Init+0x1f0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006362:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6899      	ldr	r1, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	e00f      	b.n	80063ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80063b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0202 	bic.w	r2, r2, #2
 80063c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6899      	ldr	r1, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	005a      	lsls	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006406:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	3b01      	subs	r3, #1
 8006414:	035a      	lsls	r2, r3, #13
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
 800641e:	e007      	b.n	8006430 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800642e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800643e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	3b01      	subs	r3, #1
 800644c:	051a      	lsls	r2, r3, #20
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6899      	ldr	r1, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006472:	025a      	lsls	r2, r3, #9
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800648a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6899      	ldr	r1, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	029a      	lsls	r2, r3, #10
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40012300 	.word	0x40012300
 80064b0:	0f000001 	.word	0x0f000001

080064b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d13c      	bne.n	8006548 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d12b      	bne.n	8006540 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d127      	bne.n	8006540 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006508:	2b00      	cmp	r3, #0
 800650a:	d119      	bne.n	8006540 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0220 	bic.w	r2, r2, #32
 800651a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	f043 0201 	orr.w	r2, r3, #1
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f7ff fd45 	bl	8005fd0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006546:	e00e      	b.n	8006566 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fd4f 	bl	8005ff8 <HAL_ADC_ErrorCallback>
}
 800655a:	e004      	b.n	8006566 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
}
 8006566:	bf00      	nop
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fd31 	bl	8005fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006596:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	f043 0204 	orr.w	r2, r3, #4
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fd24 	bl	8005ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <__NVIC_SetPriorityGrouping+0x40>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80065d4:	4013      	ands	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <__NVIC_SetPriorityGrouping+0x44>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065e6:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <__NVIC_SetPriorityGrouping+0x40>)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	60d3      	str	r3, [r2, #12]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	e000ed00 	.word	0xe000ed00
 80065fc:	05fa0000 	.word	0x05fa0000

08006600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006604:	4b04      	ldr	r3, [pc, #16]	@ (8006618 <__NVIC_GetPriorityGrouping+0x18>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	f003 0307 	and.w	r3, r3, #7
}
 800660e:	4618      	mov	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db0b      	blt.n	8006646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f003 021f 	and.w	r2, r3, #31
 8006634:	4907      	ldr	r1, [pc, #28]	@ (8006654 <__NVIC_EnableIRQ+0x38>)
 8006636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2001      	movs	r0, #1
 800663e:	fa00 f202 	lsl.w	r2, r0, r2
 8006642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000e100 	.word	0xe000e100

08006658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db0a      	blt.n	8006682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	490c      	ldr	r1, [pc, #48]	@ (80066a4 <__NVIC_SetPriority+0x4c>)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	440b      	add	r3, r1
 800667c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006680:	e00a      	b.n	8006698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4908      	ldr	r1, [pc, #32]	@ (80066a8 <__NVIC_SetPriority+0x50>)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3b04      	subs	r3, #4
 8006690:	0112      	lsls	r2, r2, #4
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	440b      	add	r3, r1
 8006696:	761a      	strb	r2, [r3, #24]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000e100 	.word	0xe000e100
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b089      	sub	sp, #36	@ 0x24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f1c3 0307 	rsb	r3, r3, #7
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	bf28      	it	cs
 80066ca:	2304      	movcs	r3, #4
 80066cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3304      	adds	r3, #4
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d902      	bls.n	80066dc <NVIC_EncodePriority+0x30>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3b03      	subs	r3, #3
 80066da:	e000      	b.n	80066de <NVIC_EncodePriority+0x32>
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	401a      	ands	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066f4:	f04f 31ff 	mov.w	r1, #4294967295
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	43d9      	mvns	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	4313      	orrs	r3, r2
         );
}
 8006706:	4618      	mov	r0, r3
 8006708:	3724      	adds	r7, #36	@ 0x24
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3b01      	subs	r3, #1
 8006720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006724:	d301      	bcc.n	800672a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006726:	2301      	movs	r3, #1
 8006728:	e00f      	b.n	800674a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800672a:	4a0a      	ldr	r2, [pc, #40]	@ (8006754 <SysTick_Config+0x40>)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3b01      	subs	r3, #1
 8006730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006732:	210f      	movs	r1, #15
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	f7ff ff8e 	bl	8006658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <SysTick_Config+0x40>)
 800673e:	2200      	movs	r2, #0
 8006740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006742:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <SysTick_Config+0x40>)
 8006744:	2207      	movs	r2, #7
 8006746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	e000e010 	.word	0xe000e010

08006758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff29 	bl	80065b8 <__NVIC_SetPriorityGrouping>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006780:	f7ff ff3e 	bl	8006600 <__NVIC_GetPriorityGrouping>
 8006784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	6978      	ldr	r0, [r7, #20]
 800678c:	f7ff ff8e 	bl	80066ac <NVIC_EncodePriority>
 8006790:	4602      	mov	r2, r0
 8006792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff ff5d 	bl	8006658 <__NVIC_SetPriority>
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	4603      	mov	r3, r0
 80067ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff31 	bl	800661c <__NVIC_EnableIRQ>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ffa2 	bl	8006714 <SysTick_Config>
 80067d0:	4603      	mov	r3, r0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80067e0:	f3bf 8f5f 	dmb	sy
}
 80067e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80067e6:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <HAL_MPU_Disable+0x28>)
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	4a06      	ldr	r2, [pc, #24]	@ (8006804 <HAL_MPU_Disable+0x28>)
 80067ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067f0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80067f2:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_MPU_Disable+0x2c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	e000ed00 	.word	0xe000ed00
 8006808:	e000ed90 	.word	0xe000ed90

0800680c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006814:	4a0b      	ldr	r2, [pc, #44]	@ (8006844 <HAL_MPU_Enable+0x38>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800681e:	4b0a      	ldr	r3, [pc, #40]	@ (8006848 <HAL_MPU_Enable+0x3c>)
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	4a09      	ldr	r2, [pc, #36]	@ (8006848 <HAL_MPU_Enable+0x3c>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006828:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800682a:	f3bf 8f4f 	dsb	sy
}
 800682e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006830:	f3bf 8f6f 	isb	sy
}
 8006834:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	e000ed90 	.word	0xe000ed90
 8006848:	e000ed00 	.word	0xe000ed00

0800684c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	785a      	ldrb	r2, [r3, #1]
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_MPU_ConfigRegion+0x7c>)
 800685a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800685c:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <HAL_MPU_ConfigRegion+0x7c>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <HAL_MPU_ConfigRegion+0x7c>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006868:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <HAL_MPU_ConfigRegion+0x7c>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7b1b      	ldrb	r3, [r3, #12]
 8006874:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7adb      	ldrb	r3, [r3, #11]
 800687a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800687c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7a9b      	ldrb	r3, [r3, #10]
 8006882:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7b5b      	ldrb	r3, [r3, #13]
 800688a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800688c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7b9b      	ldrb	r3, [r3, #14]
 8006892:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7bdb      	ldrb	r3, [r3, #15]
 800689a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800689c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7a5b      	ldrb	r3, [r3, #9]
 80068a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7a1b      	ldrb	r3, [r3, #8]
 80068aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	7812      	ldrb	r2, [r2, #0]
 80068b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068b4:	4a04      	ldr	r2, [pc, #16]	@ (80068c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068b8:	6113      	str	r3, [r2, #16]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000ed90 	.word	0xe000ed90

080068cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068d8:	f7ff fa08 	bl	8005cec <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e099      	b.n	8006a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006908:	e00f      	b.n	800692a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800690a:	f7ff f9ef 	bl	8005cec <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b05      	cmp	r3, #5
 8006916:	d908      	bls.n	800692a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2203      	movs	r2, #3
 8006922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e078      	b.n	8006a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e8      	bne.n	800690a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4b38      	ldr	r3, [pc, #224]	@ (8006a24 <HAL_DMA_Init+0x158>)
 8006944:	4013      	ands	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800696e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	2b04      	cmp	r3, #4
 8006982:	d107      	bne.n	8006994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	4313      	orrs	r3, r2
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d117      	bne.n	80069ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fb15 	bl	8007000 <DMA_CheckFifoParam>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2240      	movs	r2, #64	@ 0x40
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80069ea:	2301      	movs	r3, #1
 80069ec:	e016      	b.n	8006a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 facc 	bl	8006f94 <DMA_CalcBaseAndBitshift>
 80069fc:	4603      	mov	r3, r0
 80069fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a04:	223f      	movs	r2, #63	@ 0x3f
 8006a06:	409a      	lsls	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e010803f 	.word	0xe010803f

08006a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_DMA_Start_IT+0x26>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e048      	b.n	8006ae0 <HAL_DMA_Start_IT+0xb8>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d137      	bne.n	8006ad2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa5e 	bl	8006f38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a80:	223f      	movs	r2, #63	@ 0x3f
 8006a82:	409a      	lsls	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0216 	orr.w	r2, r2, #22
 8006a96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006aa6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e005      	b.n	8006ade <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
 8006adc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006af6:	f7ff f8f9 	bl	8005cec <HAL_GetTick>
 8006afa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d008      	beq.n	8006b1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2280      	movs	r2, #128	@ 0x80
 8006b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e052      	b.n	8006bc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0216 	bic.w	r2, r2, #22
 8006b28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695a      	ldr	r2, [r3, #20]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <HAL_DMA_Abort+0x62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0208 	bic.w	r2, r2, #8
 8006b58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b6a:	e013      	b.n	8006b94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b6c:	f7ff f8be 	bl	8005cec <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d90c      	bls.n	8006b94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2203      	movs	r2, #3
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e015      	b.n	8006bc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e4      	bne.n	8006b6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba6:	223f      	movs	r2, #63	@ 0x3f
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d004      	beq.n	8006be6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2280      	movs	r2, #128	@ 0x80
 8006be0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e00c      	b.n	8006c00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2205      	movs	r2, #5
 8006bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006c18:	4b8e      	ldr	r3, [pc, #568]	@ (8006e54 <HAL_DMA_IRQHandler+0x248>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006e58 <HAL_DMA_IRQHandler+0x24c>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	0a9b      	lsrs	r3, r3, #10
 8006c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c36:	2208      	movs	r2, #8
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01a      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0204 	bic.w	r2, r2, #4
 8006c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c64:	2208      	movs	r2, #8
 8006c66:	409a      	lsls	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c70:	f043 0201 	orr.w	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca6:	f043 0202 	orr.w	r2, r3, #2
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d012      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	f043 0204 	orr.w	r2, r3, #4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce8:	2210      	movs	r2, #16
 8006cea:	409a      	lsls	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d043      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d03c      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d06:	2210      	movs	r2, #16
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d024      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	e01f      	b.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
 8006d4c:	e016      	b.n	8006d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0208 	bic.w	r2, r2, #8
 8006d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d80:	2220      	movs	r2, #32
 8006d82:	409a      	lsls	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 808f 	beq.w	8006eac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8087 	beq.w	8006eac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da2:	2220      	movs	r2, #32
 8006da4:	409a      	lsls	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d136      	bne.n	8006e24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0216 	bic.w	r2, r2, #22
 8006dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x1da>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0208 	bic.w	r2, r2, #8
 8006df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dfa:	223f      	movs	r2, #63	@ 0x3f
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d07e      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
        }
        return;
 8006e22:	e079      	b.n	8006f18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01d      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d031      	beq.n	8006eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
 8006e50:	e02c      	b.n	8006eac <HAL_DMA_IRQHandler+0x2a0>
 8006e52:	bf00      	nop
 8006e54:	20000000 	.word	0x20000000
 8006e58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d023      	beq.n	8006eac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
 8006e6c:	e01e      	b.n	8006eac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10f      	bne.n	8006e9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0210 	bic.w	r2, r2, #16
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d032      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d022      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d307      	bcc.n	8006ef4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f2      	bne.n	8006ed8 <HAL_DMA_IRQHandler+0x2cc>
 8006ef2:	e000      	b.n	8006ef6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ef4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	e000      	b.n	8006f1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006f18:	bf00      	nop
    }
  }
}
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006f54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b40      	cmp	r3, #64	@ 0x40
 8006f64:	d108      	bne.n	8006f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f76:	e007      	b.n	8006f88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	3b10      	subs	r3, #16
 8006fa4:	4a13      	ldr	r2, [pc, #76]	@ (8006ff4 <DMA_CalcBaseAndBitshift+0x60>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	091b      	lsrs	r3, r3, #4
 8006fac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fae:	4a12      	ldr	r2, [pc, #72]	@ (8006ff8 <DMA_CalcBaseAndBitshift+0x64>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d908      	bls.n	8006fd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006ffc <DMA_CalcBaseAndBitshift+0x68>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	1d1a      	adds	r2, r3, #4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fd2:	e006      	b.n	8006fe2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b08      	ldr	r3, [pc, #32]	@ (8006ffc <DMA_CalcBaseAndBitshift+0x68>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	aaaaaaab 	.word	0xaaaaaaab
 8006ff8:	08017b2c 	.word	0x08017b2c
 8006ffc:	fffffc00 	.word	0xfffffc00

08007000 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d11f      	bne.n	800705a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d856      	bhi.n	80070ce <DMA_CheckFifoParam+0xce>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <DMA_CheckFifoParam+0x28>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007039 	.word	0x08007039
 800702c:	0800704b 	.word	0x0800704b
 8007030:	08007039 	.word	0x08007039
 8007034:	080070cf 	.word	0x080070cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d046      	beq.n	80070d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007048:	e043      	b.n	80070d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007052:	d140      	bne.n	80070d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007058:	e03d      	b.n	80070d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007062:	d121      	bne.n	80070a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b03      	cmp	r3, #3
 8007068:	d837      	bhi.n	80070da <DMA_CheckFifoParam+0xda>
 800706a:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <DMA_CheckFifoParam+0x70>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007081 	.word	0x08007081
 8007074:	08007087 	.word	0x08007087
 8007078:	08007081 	.word	0x08007081
 800707c:	08007099 	.word	0x08007099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	e030      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d025      	beq.n	80070de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007096:	e022      	b.n	80070de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070a0:	d11f      	bne.n	80070e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070a6:	e01c      	b.n	80070e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d903      	bls.n	80070b6 <DMA_CheckFifoParam+0xb6>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d003      	beq.n	80070bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070b4:	e018      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ba:	e015      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00e      	beq.n	80070e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e00b      	b.n	80070e6 <DMA_CheckFifoParam+0xe6>
      break;
 80070ce:	bf00      	nop
 80070d0:	e00a      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;
 80070d2:	bf00      	nop
 80070d4:	e008      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;
 80070d6:	bf00      	nop
 80070d8:	e006      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;
 80070da:	bf00      	nop
 80070dc:	e004      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;
 80070de:	bf00      	nop
 80070e0:	e002      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80070e2:	bf00      	nop
 80070e4:	e000      	b.n	80070e8 <DMA_CheckFifoParam+0xe8>
      break;
 80070e6:	bf00      	nop
    }
  } 
  
  return status; 
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007106:	4b27      	ldr	r3, [pc, #156]	@ (80071a4 <HAL_FLASH_Program+0xac>)
 8007108:	7d1b      	ldrb	r3, [r3, #20]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_FLASH_Program+0x1a>
 800710e:	2302      	movs	r3, #2
 8007110:	e043      	b.n	800719a <HAL_FLASH_Program+0xa2>
 8007112:	4b24      	ldr	r3, [pc, #144]	@ (80071a4 <HAL_FLASH_Program+0xac>)
 8007114:	2201      	movs	r2, #1
 8007116:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007118:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800711c:	f000 f884 	bl	8007228 <FLASH_WaitForLastOperation>
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d133      	bne.n	8007192 <HAL_FLASH_Program+0x9a>
  {
    switch(TypeProgram)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d823      	bhi.n	8007178 <HAL_FLASH_Program+0x80>
 8007130:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <HAL_FLASH_Program+0x40>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007149 	.word	0x08007149
 800713c:	08007155 	.word	0x08007155
 8007140:	08007161 	.word	0x08007161
 8007144:	0800716d 	.word	0x0800716d
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8007148:	783b      	ldrb	r3, [r7, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	68b8      	ldr	r0, [r7, #8]
 800714e:	f000 f92d 	bl	80073ac <FLASH_Program_Byte>
        break;
 8007152:	e012      	b.n	800717a <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007154:	883b      	ldrh	r3, [r7, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	68b8      	ldr	r0, [r7, #8]
 800715a:	f000 f901 	bl	8007360 <FLASH_Program_HalfWord>
        break;
 800715e:	e00c      	b.n	800717a <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	4619      	mov	r1, r3
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f000 f8d5 	bl	8007314 <FLASH_Program_Word>
        break;
 800716a:	e006      	b.n	800717a <HAL_FLASH_Program+0x82>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800716c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f000 f899 	bl	80072a8 <FLASH_Program_DoubleWord>
        break;
 8007176:	e000      	b.n	800717a <HAL_FLASH_Program+0x82>
      }
      default :
        break;
 8007178:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800717a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800717e:	f000 f853 	bl	8007228 <FLASH_WaitForLastOperation>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8007186:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <HAL_FLASH_Program+0xb0>)
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	4a07      	ldr	r2, [pc, #28]	@ (80071a8 <HAL_FLASH_Program+0xb0>)
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007192:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <HAL_FLASH_Program+0xac>)
 8007194:	2200      	movs	r2, #0
 8007196:	751a      	strb	r2, [r3, #20]

  return status;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200009d4 	.word	0x200009d4
 80071a8:	40023c00 	.word	0x40023c00

080071ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_FLASH_Unlock+0x38>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da0b      	bge.n	80071d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <HAL_FLASH_Unlock+0x38>)
 80071c0:	4a09      	ldr	r2, [pc, #36]	@ (80071e8 <HAL_FLASH_Unlock+0x3c>)
 80071c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80071c4:	4b07      	ldr	r3, [pc, #28]	@ (80071e4 <HAL_FLASH_Unlock+0x38>)
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_FLASH_Unlock+0x40>)
 80071c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80071ca:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <HAL_FLASH_Unlock+0x38>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da01      	bge.n	80071d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80071d6:	79fb      	ldrb	r3, [r7, #7]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40023c00 	.word	0x40023c00
 80071e8:	45670123 	.word	0x45670123
 80071ec:	cdef89ab 	.word	0xcdef89ab

080071f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_FLASH_Lock+0x1c>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	4a04      	ldr	r2, [pc, #16]	@ (800720c <HAL_FLASH_Lock+0x1c>)
 80071fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40023c00 	.word	0x40023c00

08007210 <HAL_FLASH_GetError>:
  *            @arg FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8007214:	4b03      	ldr	r3, [pc, #12]	@ (8007224 <HAL_FLASH_GetError+0x14>)
 8007216:	699b      	ldr	r3, [r3, #24]
}  
 8007218:	4618      	mov	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	200009d4 	.word	0x200009d4

08007228 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007234:	4b1a      	ldr	r3, [pc, #104]	@ (80072a0 <FLASH_WaitForLastOperation+0x78>)
 8007236:	2200      	movs	r2, #0
 8007238:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800723a:	f7fe fd57 	bl	8005cec <HAL_GetTick>
 800723e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007240:	e010      	b.n	8007264 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d00c      	beq.n	8007264 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <FLASH_WaitForLastOperation+0x38>
 8007250:	f7fe fd4c 	bl	8005cec <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d201      	bcs.n	8007264 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e019      	b.n	8007298 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007264:	4b0f      	ldr	r3, [pc, #60]	@ (80072a4 <FLASH_WaitForLastOperation+0x7c>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e8      	bne.n	8007242 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <FLASH_WaitForLastOperation+0x7c>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800727c:	f000 f8ba 	bl	80073f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e009      	b.n	8007298 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007284:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <FLASH_WaitForLastOperation+0x7c>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007290:	4b04      	ldr	r3, [pc, #16]	@ (80072a4 <FLASH_WaitForLastOperation+0x7c>)
 8007292:	2201      	movs	r2, #1
 8007294:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
  
}  
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	200009d4 	.word	0x200009d4
 80072a4:	40023c00 	.word	0x40023c00

080072a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80072b4:	4b16      	ldr	r3, [pc, #88]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4a15      	ldr	r2, [pc, #84]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80072c0:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4a12      	ldr	r2, [pc, #72]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80072ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80072cc:	4b10      	ldr	r3, [pc, #64]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007310 <FLASH_Program_DoubleWord+0x68>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80072de:	f3bf 8f6f 	isb	sy
}
 80072e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80072e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	000a      	movs	r2, r1
 80072f2:	2300      	movs	r3, #0
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	3104      	adds	r1, #4
 80072f8:	4613      	mov	r3, r2
 80072fa:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80072fc:	f3bf 8f4f 	dsb	sy
}
 8007300:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40023c00 	.word	0x40023c00

08007314 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800731e:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <FLASH_Program_Word+0x48>)
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <FLASH_Program_Word+0x48>)
 8007324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007328:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800732a:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <FLASH_Program_Word+0x48>)
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	4a0b      	ldr	r2, [pc, #44]	@ (800735c <FLASH_Program_Word+0x48>)
 8007330:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007334:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007336:	4b09      	ldr	r3, [pc, #36]	@ (800735c <FLASH_Program_Word+0x48>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	4a08      	ldr	r2, [pc, #32]	@ (800735c <FLASH_Program_Word+0x48>)
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8007348:	f3bf 8f4f 	dsb	sy
}
 800734c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40023c00 	.word	0x40023c00

08007360 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800736c:	4b0e      	ldr	r3, [pc, #56]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	4a0d      	ldr	r2, [pc, #52]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 8007372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007378:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	4a0a      	ldr	r2, [pc, #40]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 800737e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	4a07      	ldr	r2, [pc, #28]	@ (80073a8 <FLASH_Program_HalfWord+0x48>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8007396:	f3bf 8f4f 	dsb	sy
}
 800739a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	40023c00 	.word	0x40023c00

080073ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80073b8:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	4a0c      	ldr	r2, [pc, #48]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80073c4:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073c6:	4a0a      	ldr	r2, [pc, #40]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80073cc:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	4a07      	ldr	r2, [pc, #28]	@ (80073f0 <FLASH_Program_Byte+0x44>)
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80073de:	f3bf 8f4f 	dsb	sy
}
 80073e2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40023c00 	.word	0x40023c00

080073f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80073f8:	4b28      	ldr	r3, [pc, #160]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007404:	4b26      	ldr	r3, [pc, #152]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f043 0320 	orr.w	r3, r3, #32
 800740c:	4a24      	ldr	r2, [pc, #144]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800740e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007410:	4b22      	ldr	r3, [pc, #136]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800741c:	4b20      	ldr	r3, [pc, #128]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007426:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007428:	4b1c      	ldr	r3, [pc, #112]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007434:	4b1a      	ldr	r3, [pc, #104]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800743e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007440:	4b16      	ldr	r3, [pc, #88]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800744c:	4b14      	ldr	r3, [pc, #80]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f043 0304 	orr.w	r3, r3, #4
 8007454:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007456:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8007458:	4b10      	ldr	r3, [pc, #64]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f043 0302 	orr.w	r3, r3, #2
 800746c:	4a0c      	ldr	r2, [pc, #48]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800746e:	6193      	str	r3, [r2, #24]
  }
  
#if defined (FLASH_OPTCR2_PCROP)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007470:	4b0a      	ldr	r3, [pc, #40]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <FLASH_SetErrorCode+0x94>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800747c:	4b08      	ldr	r3, [pc, #32]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007484:	4a06      	ldr	r2, [pc, #24]	@ (80074a0 <FLASH_SetErrorCode+0xac>)
 8007486:	6193      	str	r3, [r2, #24]
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8007488:	4b04      	ldr	r3, [pc, #16]	@ (800749c <FLASH_SetErrorCode+0xa8>)
 800748a:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800748e:	60da      	str	r2, [r3, #12]
}
 8007490:	bf00      	nop
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40023c00 	.word	0x40023c00
 80074a0:	200009d4 	.word	0x200009d4

080074a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80074b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007570 <HAL_FLASHEx_Erase+0xcc>)
 80074b4:	7d1b      	ldrb	r3, [r3, #20]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_FLASHEx_Erase+0x1a>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e053      	b.n	8007566 <HAL_FLASHEx_Erase+0xc2>
 80074be:	4b2c      	ldr	r3, [pc, #176]	@ (8007570 <HAL_FLASHEx_Erase+0xcc>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80074c8:	f7ff feae 	bl	8007228 <FLASH_WaitForLastOperation>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d143      	bne.n	800755e <HAL_FLASHEx_Erase+0xba>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
 80074dc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d112      	bne.n	800750c <HAL_FLASHEx_Erase+0x68>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f843 	bl	8007578 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074f2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80074f6:	f7ff fe97 	bl	8007228 <FLASH_WaitForLastOperation>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80074fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007574 <HAL_FLASHEx_Erase+0xd0>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <HAL_FLASHEx_Erase+0xd0>)
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	6113      	str	r3, [r2, #16]
 800750a:	e028      	b.n	800755e <HAL_FLASHEx_Erase+0xba>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	e01c      	b.n	800754e <HAL_FLASHEx_Erase+0xaa>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	4619      	mov	r1, r3
 800751c:	68b8      	ldr	r0, [r7, #8]
 800751e:	f000 f851 	bl	80075c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007522:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007526:	f7ff fe7f 	bl	8007228 <FLASH_WaitForLastOperation>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800752e:	4b11      	ldr	r3, [pc, #68]	@ (8007574 <HAL_FLASHEx_Erase+0xd0>)
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	4a10      	ldr	r2, [pc, #64]	@ (8007574 <HAL_FLASHEx_Erase+0xd0>)
 8007534:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8007538:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_FLASHEx_Erase+0xa4>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	601a      	str	r2, [r3, #0]
          break;
 8007546:	e00a      	b.n	800755e <HAL_FLASHEx_Erase+0xba>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	3301      	adds	r3, #1
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	4413      	add	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	d3da      	bcc.n	8007514 <HAL_FLASHEx_Erase+0x70>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800755e:	4b04      	ldr	r3, [pc, #16]	@ (8007570 <HAL_FLASHEx_Erase+0xcc>)
 8007560:	2200      	movs	r2, #0
 8007562:	751a      	strb	r2, [r3, #20]

  return status;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	200009d4 	.word	0x200009d4
 8007574:	40023c00 	.word	0x40023c00

08007578 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8007582:	4b0f      	ldr	r3, [pc, #60]	@ (80075c0 <FLASH_MassErase+0x48>)
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	4a0e      	ldr	r2, [pc, #56]	@ (80075c0 <FLASH_MassErase+0x48>)
 8007588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <FLASH_MassErase+0x48>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4a0b      	ldr	r2, [pc, #44]	@ (80075c0 <FLASH_MassErase+0x48>)
 8007594:	f043 0304 	orr.w	r3, r3, #4
 8007598:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800759a:	4b09      	ldr	r3, [pc, #36]	@ (80075c0 <FLASH_MassErase+0x48>)
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	4313      	orrs	r3, r2
 80075a4:	4a06      	ldr	r2, [pc, #24]	@ (80075c0 <FLASH_MassErase+0x48>)
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80075ac:	f3bf 8f4f 	dsb	sy
}
 80075b0:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40023c00 	.word	0x40023c00

080075c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	e010      	b.n	8007602 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d103      	bne.n	80075ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80075e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e009      	b.n	8007602 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d103      	bne.n	80075fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80075f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e002      	b.n	8007602 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80075fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007600:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8007602:	4b15      	ldr	r3, [pc, #84]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	4a14      	ldr	r2, [pc, #80]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800760e:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	4911      	ldr	r1, [pc, #68]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 800761a:	4b0f      	ldr	r3, [pc, #60]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4a0e      	ldr	r2, [pc, #56]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007620:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007624:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007626:	4b0c      	ldr	r3, [pc, #48]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4313      	orrs	r3, r2
 8007630:	4a09      	ldr	r2, [pc, #36]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 8007632:	f043 0302 	orr.w	r3, r3, #2
 8007636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007638:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	4a06      	ldr	r2, [pc, #24]	@ (8007658 <FLASH_Erase_Sector+0x94>)
 800763e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007642:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8007644:	f3bf 8f4f 	dsb	sy
}
 8007648:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40023c00 	.word	0x40023c00

0800765c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800765c:	b480      	push	{r7}
 800765e:	b089      	sub	sp, #36	@ 0x24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007666:	2300      	movs	r3, #0
 8007668:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e169      	b.n	8007950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800767c:	2201      	movs	r2, #1
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4013      	ands	r3, r2
 800768e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	429a      	cmp	r2, r3
 8007696:	f040 8158 	bne.w	800794a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d005      	beq.n	80076b2 <HAL_GPIO_Init+0x56>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d130      	bne.n	8007714 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	2203      	movs	r2, #3
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076e8:	2201      	movs	r2, #1
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 0201 	and.w	r2, r3, #1
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d017      	beq.n	8007750 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	2203      	movs	r2, #3
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	43db      	mvns	r3, r3
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4013      	ands	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4313      	orrs	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d123      	bne.n	80077a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	08da      	lsrs	r2, r3, #3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3208      	adds	r2, #8
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	220f      	movs	r2, #15
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	43db      	mvns	r3, r3
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	4013      	ands	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	4313      	orrs	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	08da      	lsrs	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3208      	adds	r2, #8
 800779e:	69b9      	ldr	r1, [r7, #24]
 80077a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	2203      	movs	r2, #3
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f003 0203 	and.w	r2, r3, #3
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80b2 	beq.w	800794a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077e6:	4b60      	ldr	r3, [pc, #384]	@ (8007968 <HAL_GPIO_Init+0x30c>)
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007968 <HAL_GPIO_Init+0x30c>)
 80077ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80077f2:	4b5d      	ldr	r3, [pc, #372]	@ (8007968 <HAL_GPIO_Init+0x30c>)
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80077fe:	4a5b      	ldr	r2, [pc, #364]	@ (800796c <HAL_GPIO_Init+0x310>)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	089b      	lsrs	r3, r3, #2
 8007804:	3302      	adds	r3, #2
 8007806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800780a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	220f      	movs	r2, #15
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	43db      	mvns	r3, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	4013      	ands	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a52      	ldr	r2, [pc, #328]	@ (8007970 <HAL_GPIO_Init+0x314>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d02b      	beq.n	8007882 <HAL_GPIO_Init+0x226>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a51      	ldr	r2, [pc, #324]	@ (8007974 <HAL_GPIO_Init+0x318>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d025      	beq.n	800787e <HAL_GPIO_Init+0x222>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a50      	ldr	r2, [pc, #320]	@ (8007978 <HAL_GPIO_Init+0x31c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01f      	beq.n	800787a <HAL_GPIO_Init+0x21e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a4f      	ldr	r2, [pc, #316]	@ (800797c <HAL_GPIO_Init+0x320>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d019      	beq.n	8007876 <HAL_GPIO_Init+0x21a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a4e      	ldr	r2, [pc, #312]	@ (8007980 <HAL_GPIO_Init+0x324>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <HAL_GPIO_Init+0x216>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a4d      	ldr	r2, [pc, #308]	@ (8007984 <HAL_GPIO_Init+0x328>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00d      	beq.n	800786e <HAL_GPIO_Init+0x212>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a4c      	ldr	r2, [pc, #304]	@ (8007988 <HAL_GPIO_Init+0x32c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d007      	beq.n	800786a <HAL_GPIO_Init+0x20e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a4b      	ldr	r2, [pc, #300]	@ (800798c <HAL_GPIO_Init+0x330>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d101      	bne.n	8007866 <HAL_GPIO_Init+0x20a>
 8007862:	2307      	movs	r3, #7
 8007864:	e00e      	b.n	8007884 <HAL_GPIO_Init+0x228>
 8007866:	2308      	movs	r3, #8
 8007868:	e00c      	b.n	8007884 <HAL_GPIO_Init+0x228>
 800786a:	2306      	movs	r3, #6
 800786c:	e00a      	b.n	8007884 <HAL_GPIO_Init+0x228>
 800786e:	2305      	movs	r3, #5
 8007870:	e008      	b.n	8007884 <HAL_GPIO_Init+0x228>
 8007872:	2304      	movs	r3, #4
 8007874:	e006      	b.n	8007884 <HAL_GPIO_Init+0x228>
 8007876:	2303      	movs	r3, #3
 8007878:	e004      	b.n	8007884 <HAL_GPIO_Init+0x228>
 800787a:	2302      	movs	r3, #2
 800787c:	e002      	b.n	8007884 <HAL_GPIO_Init+0x228>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <HAL_GPIO_Init+0x228>
 8007882:	2300      	movs	r3, #0
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	f002 0203 	and.w	r2, r2, #3
 800788a:	0092      	lsls	r2, r2, #2
 800788c:	4093      	lsls	r3, r2
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	4313      	orrs	r3, r2
 8007892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007894:	4935      	ldr	r1, [pc, #212]	@ (800796c <HAL_GPIO_Init+0x310>)
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	089b      	lsrs	r3, r3, #2
 800789a:	3302      	adds	r3, #2
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078a2:	4b3b      	ldr	r3, [pc, #236]	@ (8007990 <HAL_GPIO_Init+0x334>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	43db      	mvns	r3, r3
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	4013      	ands	r3, r2
 80078b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078c6:	4a32      	ldr	r2, [pc, #200]	@ (8007990 <HAL_GPIO_Init+0x334>)
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078cc:	4b30      	ldr	r3, [pc, #192]	@ (8007990 <HAL_GPIO_Init+0x334>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078f0:	4a27      	ldr	r2, [pc, #156]	@ (8007990 <HAL_GPIO_Init+0x334>)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80078f6:	4b26      	ldr	r3, [pc, #152]	@ (8007990 <HAL_GPIO_Init+0x334>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	43db      	mvns	r3, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4013      	ands	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800791a:	4a1d      	ldr	r2, [pc, #116]	@ (8007990 <HAL_GPIO_Init+0x334>)
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007920:	4b1b      	ldr	r3, [pc, #108]	@ (8007990 <HAL_GPIO_Init+0x334>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	43db      	mvns	r3, r3
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	4013      	ands	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007944:	4a12      	ldr	r2, [pc, #72]	@ (8007990 <HAL_GPIO_Init+0x334>)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3301      	adds	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	2b0f      	cmp	r3, #15
 8007954:	f67f ae92 	bls.w	800767c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	3724      	adds	r7, #36	@ 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800
 800796c:	40013800 	.word	0x40013800
 8007970:	40020000 	.word	0x40020000
 8007974:	40020400 	.word	0x40020400
 8007978:	40020800 	.word	0x40020800
 800797c:	40020c00 	.word	0x40020c00
 8007980:	40021000 	.word	0x40021000
 8007984:	40021400 	.word	0x40021400
 8007988:	40021800 	.word	0x40021800
 800798c:	40021c00 	.word	0x40021c00
 8007990:	40013c00 	.word	0x40013c00

08007994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079a4:	787b      	ldrb	r3, [r7, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80079b0:	e003      	b.n	80079ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80079d8:	887a      	ldrh	r2, [r7, #2]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4013      	ands	r3, r2
 80079de:	041a      	lsls	r2, r3, #16
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	43d9      	mvns	r1, r3
 80079e4:	887b      	ldrh	r3, [r7, #2]
 80079e6:	400b      	ands	r3, r1
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	619a      	str	r2, [r3, #24]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a06:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a08:	695a      	ldr	r2, [r3, #20]
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a12:	4a05      	ldr	r2, [pc, #20]	@ (8007a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a14:	88fb      	ldrh	r3, [r7, #6]
 8007a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fc fe82 	bl	8004724 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40013c00 	.word	0x40013c00

08007a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e08b      	b.n	8007b56 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fd fc5a 	bl	800530c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2224      	movs	r2, #36	@ 0x24
 8007a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d107      	bne.n	8007aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	e006      	b.n	8007ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d108      	bne.n	8007ace <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	e007      	b.n	8007ade <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6859      	ldr	r1, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b60 <HAL_I2C_Init+0x134>)
 8007aea:	430b      	orrs	r3, r1
 8007aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69d9      	ldr	r1, [r3, #28]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	02008000 	.word	0x02008000

08007b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d138      	bne.n	8007bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e032      	b.n	8007bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	@ 0x24
 8007b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e000      	b.n	8007bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bec:	2302      	movs	r3, #2
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d139      	bne.n	8007c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e033      	b.n	8007c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2224      	movs	r2, #36	@ 0x24
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	e000      	b.n	8007c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c84:	2302      	movs	r3, #2
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af02      	add	r7, sp, #8
 8007c98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e108      	b.n	8007eb6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f009 fe50 	bl	8011964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cd2:	d102      	bne.n	8007cda <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f006 f9bf 	bl	800e062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	7c1a      	ldrb	r2, [r3, #16]
 8007cec:	f88d 2000 	strb.w	r2, [sp]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cf4:	f006 f876 	bl	800dde4 <USB_CoreInit>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e0d5      	b.n	8007eb6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f006 f9b7 	bl	800e084 <USB_SetCurrentMode>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0c6      	b.n	8007eb6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	e04a      	b.n	8007dc4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d2e:	7bfa      	ldrb	r2, [r7, #15]
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3315      	adds	r3, #21
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3314      	adds	r3, #20
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	b298      	uxth	r0, r3
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	332e      	adds	r3, #46	@ 0x2e
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3318      	adds	r3, #24
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d82:	7bfa      	ldrb	r2, [r7, #15]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	331c      	adds	r3, #28
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d96:	7bfa      	ldrb	r2, [r7, #15]
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	3320      	adds	r3, #32
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007daa:	7bfa      	ldrb	r2, [r7, #15]
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	3324      	adds	r3, #36	@ 0x24
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d3af      	bcc.n	8007d2e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
 8007dd2:	e044      	b.n	8007e5e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007dd4:	7bfa      	ldrb	r2, [r7, #15]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007dfc:	7bfa      	ldrb	r2, [r7, #15]
 8007dfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e42:	7bfa      	ldrb	r2, [r7, #15]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	73fb      	strb	r3, [r7, #15]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	7bfa      	ldrb	r2, [r7, #15]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d3b5      	bcc.n	8007dd4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7c1a      	ldrb	r2, [r3, #16]
 8007e70:	f88d 2000 	strb.w	r2, [sp]
 8007e74:	3304      	adds	r3, #4
 8007e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e78:	f006 f950 	bl	800e11c <USB_DevInit>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e013      	b.n	8007eb6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7b1b      	ldrb	r3, [r3, #12]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d102      	bne.n	8007eaa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f95b 	bl	8009160 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f007 f9a5 	bl	800f1fe <USB_DevDisconnect>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_PCD_Start+0x16>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e012      	b.n	8007efa <HAL_PCD_Start+0x3c>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f006 f8ad 	bl	800e040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f007 f966 	bl	800f1bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f02:	b590      	push	{r4, r7, lr}
 8007f04:	b08d      	sub	sp, #52	@ 0x34
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f007 fa24 	bl	800f366 <USB_GetMode>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 84b9 	bne.w	8008898 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f007 f988 	bl	800f240 <USB_ReadInterrupts>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 84af 	beq.w	8008896 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f007 f975 	bl	800f240 <USB_ReadInterrupts>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d107      	bne.n	8007f70 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f002 0202 	and.w	r2, r2, #2
 8007f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f007 f963 	bl	800f240 <USB_ReadInterrupts>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d161      	bne.n	8008048 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0210 	bic.w	r2, r2, #16
 8007f92:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4413      	add	r3, r2
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fbe:	d124      	bne.n	800800a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d035      	beq.n	8008038 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	091b      	lsrs	r3, r3, #4
 8007fd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6a38      	ldr	r0, [r7, #32]
 8007fe0:	f006 ff9a 	bl	800ef18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff0:	441a      	add	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	695a      	ldr	r2, [r3, #20]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008002:	441a      	add	r2, r3
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	615a      	str	r2, [r3, #20]
 8008008:	e016      	b.n	8008038 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008010:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008014:	d110      	bne.n	8008038 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800801c:	2208      	movs	r2, #8
 800801e:	4619      	mov	r1, r3
 8008020:	6a38      	ldr	r0, [r7, #32]
 8008022:	f006 ff79 	bl	800ef18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	695a      	ldr	r2, [r3, #20]
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008032:	441a      	add	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0210 	orr.w	r2, r2, #16
 8008046:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f007 f8f7 	bl	800f240 <USB_ReadInterrupts>
 8008052:	4603      	mov	r3, r0
 8008054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008058:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800805c:	f040 80a7 	bne.w	80081ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f007 f8fc 	bl	800f266 <USB_ReadDevAllOutEpInterrupt>
 800806e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008070:	e099      	b.n	80081a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 808e 	beq.w	800819a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f007 f920 	bl	800f2ce <USB_ReadDevOutEPInterrupt>
 800808e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00c      	beq.n	80080b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a6:	461a      	mov	r2, r3
 80080a8:	2301      	movs	r3, #1
 80080aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80080ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fed0 	bl	8008e54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00c      	beq.n	80080d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ca:	461a      	mov	r2, r3
 80080cc:	2308      	movs	r3, #8
 80080ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80080d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 ffa6 	bl	8009024 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ee:	461a      	mov	r2, r3
 80080f0:	2310      	movs	r3, #16
 80080f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d030      	beq.n	8008160 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008106:	2b80      	cmp	r3, #128	@ 0x80
 8008108:	d109      	bne.n	800811e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800811c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800811e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	3304      	adds	r3, #4
 8008132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d108      	bne.n	800814e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f009 fd2f 	bl	8011bac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	461a      	mov	r2, r3
 800815c:	2302      	movs	r3, #2
 800815e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008176:	461a      	mov	r2, r3
 8008178:	2320      	movs	r3, #32
 800817a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008192:	461a      	mov	r2, r3
 8008194:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008198:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	3301      	adds	r3, #1
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f47f af62 	bne.w	8008072 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f007 f844 	bl	800f240 <USB_ReadInterrupts>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081c2:	f040 80db 	bne.w	800837c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f007 f865 	bl	800f29a <USB_ReadDevAllInEpInterrupt>
 80081d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80081d6:	e0cd      	b.n	8008374 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80c2 	beq.w	8008368 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f007 f88b 	bl	800f30a <USB_ReadDevInEPInterrupt>
 80081f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d057      	beq.n	80082b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	2201      	movs	r2, #1
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	43db      	mvns	r3, r3
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008220:	4013      	ands	r3, r2
 8008222:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008230:	461a      	mov	r2, r3
 8008232:	2301      	movs	r3, #1
 8008234:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	799b      	ldrb	r3, [r3, #6]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d132      	bne.n	80082a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	3320      	adds	r3, #32
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008254:	4613      	mov	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4403      	add	r3, r0
 800825e:	331c      	adds	r3, #28
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4419      	add	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4403      	add	r3, r0
 8008272:	3320      	adds	r3, #32
 8008274:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d113      	bne.n	80082a4 <HAL_PCD_IRQHandler+0x3a2>
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008280:	4613      	mov	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	3324      	adds	r3, #36	@ 0x24
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d108      	bne.n	80082a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800829c:	461a      	mov	r2, r3
 800829e:	2101      	movs	r1, #1
 80082a0:	f007 f894 	bl	800f3cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f009 fbf9 	bl	8011aa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c6:	461a      	mov	r2, r3
 80082c8:	2308      	movs	r3, #8
 80082ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e2:	461a      	mov	r2, r3
 80082e4:	2310      	movs	r3, #16
 80082e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fe:	461a      	mov	r2, r3
 8008300:	2340      	movs	r3, #64	@ 0x40
 8008302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d023      	beq.n	8008356 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800830e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008310:	6a38      	ldr	r0, [r7, #32]
 8008312:	f006 f873 	bl	800e3fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008318:	4613      	mov	r3, r2
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	3310      	adds	r3, #16
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	4413      	add	r3, r2
 8008326:	3304      	adds	r3, #4
 8008328:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	78db      	ldrb	r3, [r3, #3]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d108      	bne.n	8008344 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2200      	movs	r2, #0
 8008336:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	b2db      	uxtb	r3, r3
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f009 fc46 	bl	8011bd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008350:	461a      	mov	r2, r3
 8008352:	2302      	movs	r3, #2
 8008354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fcea 	bl	8008d3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	3301      	adds	r3, #1
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008370:	085b      	lsrs	r3, r3, #1
 8008372:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	2b00      	cmp	r3, #0
 8008378:	f47f af2e 	bne.w	80081d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	f006 ff5d 	bl	800f240 <USB_ReadInterrupts>
 8008386:	4603      	mov	r3, r0
 8008388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800838c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008390:	d122      	bne.n	80083d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d108      	bne.n	80083c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f009 fdc4 	bl	8011f48 <HAL_PCDEx_LPM_Callback>
 80083c0:	e002      	b.n	80083c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f009 fbe4 	bl	8011b90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80083d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f006 ff2f 	bl	800f240 <USB_ReadInterrupts>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ec:	d112      	bne.n	8008414 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d102      	bne.n	8008404 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f009 fba0 	bl	8011b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008412:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f006 ff11 	bl	800f240 <USB_ReadInterrupts>
 800841e:	4603      	mov	r3, r0
 8008420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008428:	d121      	bne.n	800846e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008438:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008440:	2b00      	cmp	r3, #0
 8008442:	d111      	bne.n	8008468 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	089b      	lsrs	r3, r3, #2
 8008454:	f003 020f 	and.w	r2, r3, #15
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800845e:	2101      	movs	r1, #1
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f009 fd71 	bl	8011f48 <HAL_PCDEx_LPM_Callback>
 8008466:	e002      	b.n	800846e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f009 fb6b 	bl	8011b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f006 fee4 	bl	800f240 <USB_ReadInterrupts>
 8008478:	4603      	mov	r3, r0
 800847a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008482:	f040 80b7 	bne.w	80085f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2110      	movs	r1, #16
 80084a0:	4618      	mov	r0, r3
 80084a2:	f005 ffab 	bl	800e3fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084a6:	2300      	movs	r3, #0
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084aa:	e046      	b.n	800853a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	461a      	mov	r2, r3
 80084ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ec:	461a      	mov	r2, r3
 80084ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	440a      	add	r2, r1
 800850a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800850e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008512:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	440a      	add	r2, r1
 800852a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800852e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008532:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	3301      	adds	r3, #1
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	461a      	mov	r2, r3
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	4293      	cmp	r3, r2
 8008544:	d3b2      	bcc.n	80084ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008554:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008558:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7bdb      	ldrb	r3, [r3, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008572:	f043 030b 	orr.w	r3, r3, #11
 8008576:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008588:	f043 030b 	orr.w	r3, r3, #11
 800858c:	6453      	str	r3, [r2, #68]	@ 0x44
 800858e:	e015      	b.n	80085bc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800859e:	4619      	mov	r1, r3
 80085a0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80085a4:	4313      	orrs	r3, r2
 80085a6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085b6:	f043 030b 	orr.w	r3, r3, #11
 80085ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80085ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085de:	461a      	mov	r2, r3
 80085e0:	f006 fef4 	bl	800f3cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80085f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f006 fe21 	bl	800f240 <USB_ReadInterrupts>
 80085fe:	4603      	mov	r3, r0
 8008600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008608:	d123      	bne.n	8008652 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f006 feb8 	bl	800f384 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f005 ff68 	bl	800e4ee <USB_GetDevSpeed>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681c      	ldr	r4, [r3, #0]
 800862a:	f001 faa3 	bl	8009b74 <HAL_RCC_GetHCLKFreq>
 800862e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008634:	461a      	mov	r2, r3
 8008636:	4620      	mov	r0, r4
 8008638:	f005 fc60 	bl	800defc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f009 fa58 	bl	8011af2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695a      	ldr	r2, [r3, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008650:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f006 fdf2 	bl	800f240 <USB_ReadInterrupts>
 800865c:	4603      	mov	r3, r0
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b08      	cmp	r3, #8
 8008664:	d10a      	bne.n	800867c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f009 fa35 	bl	8011ad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695a      	ldr	r2, [r3, #20]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f002 0208 	and.w	r2, r2, #8
 800867a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f006 fddd 	bl	800f240 <USB_ReadInterrupts>
 8008686:	4603      	mov	r3, r0
 8008688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868c:	2b80      	cmp	r3, #128	@ 0x80
 800868e:	d123      	bne.n	80086d8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800869c:	2301      	movs	r3, #1
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a0:	e014      	b.n	80086cc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a6:	4613      	mov	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fb0a 	bl	8008cda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	3301      	adds	r3, #1
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	791b      	ldrb	r3, [r3, #4]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d3e4      	bcc.n	80086a2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f006 fdaf 	bl	800f240 <USB_ReadInterrupts>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ec:	d13c      	bne.n	8008768 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086ee:	2301      	movs	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f2:	e02b      	b.n	800874c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3318      	adds	r3, #24
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d115      	bne.n	8008746 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800871a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800871c:	2b00      	cmp	r3, #0
 800871e:	da12      	bge.n	8008746 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008724:	4613      	mov	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	3317      	adds	r3, #23
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800873c:	b2db      	uxtb	r3, r3
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 faca 	bl	8008cda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	3301      	adds	r3, #1
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	791b      	ldrb	r3, [r3, #4]
 8008750:	461a      	mov	r2, r3
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	4293      	cmp	r3, r2
 8008756:	d3cd      	bcc.n	80086f4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4618      	mov	r0, r3
 800876e:	f006 fd67 	bl	800f240 <USB_ReadInterrupts>
 8008772:	4603      	mov	r3, r0
 8008774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800877c:	d156      	bne.n	800882c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800877e:	2301      	movs	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
 8008782:	e045      	b.n	8008810 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d12e      	bne.n	800880a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80087ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da2b      	bge.n	800880a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	0c1a      	lsrs	r2, r3, #16
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80087bc:	4053      	eors	r3, r2
 80087be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d121      	bne.n	800880a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80087d8:	2201      	movs	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008806:	6053      	str	r3, [r2, #4]
            break;
 8008808:	e008      	b.n	800881c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	3301      	adds	r3, #1
 800880e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	791b      	ldrb	r3, [r3, #4]
 8008814:	461a      	mov	r2, r3
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	4293      	cmp	r3, r2
 800881a:	d3b3      	bcc.n	8008784 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800882a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f006 fd05 	bl	800f240 <USB_ReadInterrupts>
 8008836:	4603      	mov	r3, r0
 8008838:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800883c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008840:	d10a      	bne.n	8008858 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f009 f9d6 	bl	8011bf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f006 fcef 	bl	800f240 <USB_ReadInterrupts>
 8008862:	4603      	mov	r3, r0
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b04      	cmp	r3, #4
 800886a:	d115      	bne.n	8008898 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f009 f9c6 	bl	8011c10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6859      	ldr	r1, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
 8008894:	e000      	b.n	8008898 <HAL_PCD_IRQHandler+0x996>
      return;
 8008896:	bf00      	nop
    }
  }
}
 8008898:	3734      	adds	r7, #52	@ 0x34
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}

0800889e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_PCD_SetAddress+0x1a>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e012      	b.n	80088de <HAL_PCD_SetAddress+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f006 fc4e 	bl	800f170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	4608      	mov	r0, r1
 80088f0:	4611      	mov	r1, r2
 80088f2:	461a      	mov	r2, r3
 80088f4:	4603      	mov	r3, r0
 80088f6:	70fb      	strb	r3, [r7, #3]
 80088f8:	460b      	mov	r3, r1
 80088fa:	803b      	strh	r3, [r7, #0]
 80088fc:	4613      	mov	r3, r2
 80088fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	da0f      	bge.n	800892c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 020f 	and.w	r2, r3, #15
 8008912:	4613      	mov	r3, r2
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	3310      	adds	r3, #16
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	4413      	add	r3, r2
 8008920:	3304      	adds	r3, #4
 8008922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	705a      	strb	r2, [r3, #1]
 800892a:	e00f      	b.n	800894c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	4613      	mov	r3, r2
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	3304      	adds	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	f003 030f 	and.w	r3, r3, #15
 8008952:	b2da      	uxtb	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008958:	883b      	ldrh	r3, [r7, #0]
 800895a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	78ba      	ldrb	r2, [r7, #2]
 8008966:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800897a:	78bb      	ldrb	r3, [r7, #2]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d102      	bne.n	8008986 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_PCD_EP_Open+0xae>
 8008990:	2302      	movs	r3, #2
 8008992:	e00e      	b.n	80089b2 <HAL_PCD_EP_Open+0xcc>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f005 fdc8 	bl	800e538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da0f      	bge.n	80089ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	3310      	adds	r3, #16
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	3304      	adds	r3, #4
 80089e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	705a      	strb	r2, [r3, #1]
 80089ec:	e00f      	b.n	8008a0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_PCD_EP_Close+0x6e>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e00e      	b.n	8008a46 <HAL_PCD_EP_Close+0x8c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68f9      	ldr	r1, [r7, #12]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f005 fe06 	bl	800e648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	4613      	mov	r3, r2
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	3304      	adds	r3, #4
 8008a76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	799b      	ldrb	r3, [r3, #6]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d102      	bne.n	8008aaa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	799b      	ldrb	r3, [r3, #6]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6979      	ldr	r1, [r7, #20]
 8008ab6:	f005 fea3 	bl	800e800 <USB_EPStartXfer>

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	f003 020f 	and.w	r2, r3, #15
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008ae6:	681b      	ldr	r3, [r3, #0]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	460b      	mov	r3, r1
 8008b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	f003 020f 	and.w	r2, r3, #15
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	3310      	adds	r3, #16
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	3304      	adds	r3, #4
 8008b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2201      	movs	r2, #1
 8008b32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	799b      	ldrb	r3, [r3, #6]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d102      	bne.n	8008b4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	799b      	ldrb	r3, [r3, #6]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6979      	ldr	r1, [r7, #20]
 8008b5a:	f005 fe51 	bl	800e800 <USB_EPStartXfer>

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	7912      	ldrb	r2, [r2, #4]
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e04f      	b.n	8008c26 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da0f      	bge.n	8008bae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	4613      	mov	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	3310      	adds	r3, #16
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	705a      	strb	r2, [r3, #1]
 8008bac:	e00d      	b.n	8008bca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_PCD_EP_SetStall+0x82>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e01d      	b.n	8008c26 <HAL_PCD_EP_SetStall+0xbe>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f006 f9e5 	bl	800efc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7999      	ldrb	r1, [r3, #6]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c16:	461a      	mov	r2, r3
 8008c18:	f006 fbd8 	bl	800f3cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7912      	ldrb	r2, [r2, #4]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d901      	bls.n	8008c4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e042      	b.n	8008cd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da0f      	bge.n	8008c74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	f003 020f 	and.w	r2, r3, #15
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	3310      	adds	r3, #16
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4413      	add	r3, r2
 8008c68:	3304      	adds	r3, #4
 8008c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	705a      	strb	r2, [r3, #1]
 8008c72:	e00f      	b.n	8008c94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	f003 020f 	and.w	r2, r3, #15
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_PCD_EP_ClrStall+0x86>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e00e      	b.n	8008cd2 <HAL_PCD_EP_ClrStall+0xa4>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f006 f9ee 	bl	800f0a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da0c      	bge.n	8008d08 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 020f 	and.w	r2, r3, #15
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	3304      	adds	r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]
 8008d06:	e00c      	b.n	8008d22 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 020f 	and.w	r2, r3, #15
 8008d0e:	4613      	mov	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	3304      	adds	r3, #4
 8008d20:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f006 f80d 	bl	800ed48 <USB_EPStopXfer>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008d32:	7afb      	ldrb	r3, [r7, #11]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	@ 0x28
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	3310      	adds	r3, #16
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	695a      	ldr	r2, [r3, #20]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d901      	bls.n	8008d74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e06b      	b.n	8008e4c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	691a      	ldr	r2, [r3, #16]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d902      	bls.n	8008d90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	3303      	adds	r3, #3
 8008d94:	089b      	lsrs	r3, r3, #2
 8008d96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d98:	e02a      	b.n	8008df0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d902      	bls.n	8008db6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	3303      	adds	r3, #3
 8008dba:	089b      	lsrs	r3, r3, #2
 8008dbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68d9      	ldr	r1, [r3, #12]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f006 f862 	bl	800ee9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	695a      	ldr	r2, [r3, #20]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	441a      	add	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d809      	bhi.n	8008e1a <PCD_WriteEmptyTxFifo+0xde>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	695a      	ldr	r2, [r3, #20]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d203      	bcs.n	8008e1a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1bf      	bne.n	8008d9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d811      	bhi.n	8008e4a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	f003 030f 	and.w	r3, r3, #15
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	43db      	mvns	r3, r3
 8008e40:	6939      	ldr	r1, [r7, #16]
 8008e42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e46:	4013      	ands	r3, r2
 8008e48:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	333c      	adds	r3, #60	@ 0x3c
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	799b      	ldrb	r3, [r3, #6]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d17b      	bne.n	8008f82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d015      	beq.n	8008ec0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4a61      	ldr	r2, [pc, #388]	@ (800901c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	f240 80b9 	bls.w	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80b3 	beq.w	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ebc:	6093      	str	r3, [r2, #8]
 8008ebe:	e0a7      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2320      	movs	r3, #32
 8008eda:	6093      	str	r3, [r2, #8]
 8008edc:	e098      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8093 	bne.w	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	4a4b      	ldr	r2, [pc, #300]	@ (800901c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d90f      	bls.n	8008f12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f0e:	6093      	str	r3, [r2, #8]
 8008f10:	e07e      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a1a      	ldr	r2, [r3, #32]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	0159      	lsls	r1, r3, #5
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	440b      	add	r3, r1
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d114      	bne.n	8008f74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2101      	movs	r1, #1
 8008f60:	f006 fa34 	bl	800f3cc <USB_EP0_OutStart>
 8008f64:	e006      	b.n	8008f74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	441a      	add	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f008 fd76 	bl	8011a6c <HAL_PCD_DataOutStageCallback>
 8008f80:	e046      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4a26      	ldr	r2, [pc, #152]	@ (8009020 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d124      	bne.n	8008fd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fa6:	6093      	str	r3, [r2, #8]
 8008fa8:	e032      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f008 fd4d 	bl	8011a6c <HAL_PCD_DataOutStageCallback>
 8008fd2:	e01d      	b.n	8009010 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d114      	bne.n	8009004 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2100      	movs	r1, #0
 8009000:	f006 f9e4 	bl	800f3cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f008 fd2e 	bl	8011a6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	4f54300a 	.word	0x4f54300a
 8009020:	4f54310a 	.word	0x4f54310a

08009024 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	333c      	adds	r3, #60	@ 0x3c
 800903c:	3304      	adds	r3, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4a15      	ldr	r2, [pc, #84]	@ (80090ac <PCD_EP_OutSetupPacket_int+0x88>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d90e      	bls.n	8009078 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009060:	2b00      	cmp	r3, #0
 8009062:	d009      	beq.n	8009078 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009070:	461a      	mov	r2, r3
 8009072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009076:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f008 fce5 	bl	8011a48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <PCD_EP_OutSetupPacket_int+0x88>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d90c      	bls.n	80090a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	799b      	ldrb	r3, [r3, #6]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d108      	bne.n	80090a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009098:	461a      	mov	r2, r3
 800909a:	2101      	movs	r1, #1
 800909c:	f006 f996 	bl	800f3cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	4f54300a 	.word	0x4f54300a

080090b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
 80090bc:	4613      	mov	r3, r2
 80090be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d107      	bne.n	80090de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80090ce:	883b      	ldrh	r3, [r7, #0]
 80090d0:	0419      	lsls	r1, r3, #16
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	430a      	orrs	r2, r1
 80090da:	629a      	str	r2, [r3, #40]	@ 0x28
 80090dc:	e028      	b.n	8009130 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	e00d      	b.n	800910e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	3340      	adds	r3, #64	@ 0x40
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	3301      	adds	r3, #1
 800910c:	73fb      	strb	r3, [r7, #15]
 800910e:	7bfa      	ldrb	r2, [r7, #15]
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	3b01      	subs	r3, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d3ec      	bcc.n	80090f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009118:	883b      	ldrh	r3, [r7, #0]
 800911a:	0418      	lsls	r0, r3, #16
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	3b01      	subs	r3, #1
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4302      	orrs	r2, r0
 8009128:	3340      	adds	r3, #64	@ 0x40
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	887a      	ldrh	r2, [r7, #2]
 8009150:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800918e:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8009190:	4313      	orrs	r3, r2
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	10000003 	.word	0x10000003

080091a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80091b2:	4b23      	ldr	r3, [pc, #140]	@ (8009240 <HAL_PWREx_EnableOverDrive+0x98>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	4a22      	ldr	r2, [pc, #136]	@ (8009240 <HAL_PWREx_EnableOverDrive+0x98>)
 80091b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80091be:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <HAL_PWREx_EnableOverDrive+0x98>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80091ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80091d6:	f7fc fd89 	bl	8005cec <HAL_GetTick>
 80091da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091dc:	e009      	b.n	80091f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091de:	f7fc fd85 	bl	8005cec <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091ec:	d901      	bls.n	80091f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e022      	b.n	8009238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80091f2:	4b14      	ldr	r3, [pc, #80]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091fe:	d1ee      	bne.n	80091de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009200:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a0f      	ldr	r2, [pc, #60]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800920a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800920c:	f7fc fd6e 	bl	8005cec <HAL_GetTick>
 8009210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009212:	e009      	b.n	8009228 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009214:	f7fc fd6a 	bl	8005cec <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009222:	d901      	bls.n	8009228 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e007      	b.n	8009238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009228:	4b06      	ldr	r3, [pc, #24]	@ (8009244 <HAL_PWREx_EnableOverDrive+0x9c>)
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009234:	d1ee      	bne.n	8009214 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	40023800 	.word	0x40023800
 8009244:	40007000 	.word	0x40007000

08009248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e291      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 8087 	beq.w	800937a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800926c:	4b96      	ldr	r3, [pc, #600]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 030c 	and.w	r3, r3, #12
 8009274:	2b04      	cmp	r3, #4
 8009276:	d00c      	beq.n	8009292 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009278:	4b93      	ldr	r3, [pc, #588]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 030c 	and.w	r3, r3, #12
 8009280:	2b08      	cmp	r3, #8
 8009282:	d112      	bne.n	80092aa <HAL_RCC_OscConfig+0x62>
 8009284:	4b90      	ldr	r3, [pc, #576]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009290:	d10b      	bne.n	80092aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009292:	4b8d      	ldr	r3, [pc, #564]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d06c      	beq.n	8009378 <HAL_RCC_OscConfig+0x130>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d168      	bne.n	8009378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e26b      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b2:	d106      	bne.n	80092c2 <HAL_RCC_OscConfig+0x7a>
 80092b4:	4b84      	ldr	r3, [pc, #528]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a83      	ldr	r2, [pc, #524]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e02e      	b.n	8009320 <HAL_RCC_OscConfig+0xd8>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10c      	bne.n	80092e4 <HAL_RCC_OscConfig+0x9c>
 80092ca:	4b7f      	ldr	r3, [pc, #508]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a7e      	ldr	r2, [pc, #504]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	4b7c      	ldr	r3, [pc, #496]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a7b      	ldr	r2, [pc, #492]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	e01d      	b.n	8009320 <HAL_RCC_OscConfig+0xd8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092ec:	d10c      	bne.n	8009308 <HAL_RCC_OscConfig+0xc0>
 80092ee:	4b76      	ldr	r3, [pc, #472]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a75      	ldr	r2, [pc, #468]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	4b73      	ldr	r3, [pc, #460]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a72      	ldr	r2, [pc, #456]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e00b      	b.n	8009320 <HAL_RCC_OscConfig+0xd8>
 8009308:	4b6f      	ldr	r3, [pc, #444]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a6e      	ldr	r2, [pc, #440]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800930e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	4b6c      	ldr	r3, [pc, #432]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a6b      	ldr	r2, [pc, #428]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800931a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800931e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d013      	beq.n	8009350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009328:	f7fc fce0 	bl	8005cec <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009330:	f7fc fcdc 	bl	8005cec <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	@ 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e21f      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009342:	4b61      	ldr	r3, [pc, #388]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCC_OscConfig+0xe8>
 800934e:	e014      	b.n	800937a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7fc fccc 	bl	8005cec <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009358:	f7fc fcc8 	bl	8005cec <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b64      	cmp	r3, #100	@ 0x64
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e20b      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800936a:	4b57      	ldr	r3, [pc, #348]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f0      	bne.n	8009358 <HAL_RCC_OscConfig+0x110>
 8009376:	e000      	b.n	800937a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d069      	beq.n	800945a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009386:	4b50      	ldr	r3, [pc, #320]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f003 030c 	and.w	r3, r3, #12
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009392:	4b4d      	ldr	r3, [pc, #308]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 030c 	and.w	r3, r3, #12
 800939a:	2b08      	cmp	r3, #8
 800939c:	d11c      	bne.n	80093d8 <HAL_RCC_OscConfig+0x190>
 800939e:	4b4a      	ldr	r3, [pc, #296]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d116      	bne.n	80093d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093aa:	4b47      	ldr	r3, [pc, #284]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <HAL_RCC_OscConfig+0x17a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d001      	beq.n	80093c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e1df      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c2:	4b41      	ldr	r3, [pc, #260]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	493d      	ldr	r1, [pc, #244]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093d6:	e040      	b.n	800945a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d023      	beq.n	8009428 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093e0:	4b39      	ldr	r3, [pc, #228]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a38      	ldr	r2, [pc, #224]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80093e6:	f043 0301 	orr.w	r3, r3, #1
 80093ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ec:	f7fc fc7e 	bl	8005cec <HAL_GetTick>
 80093f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093f2:	e008      	b.n	8009406 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f4:	f7fc fc7a 	bl	8005cec <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e1bd      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009406:	4b30      	ldr	r3, [pc, #192]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f0      	beq.n	80093f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009412:	4b2d      	ldr	r3, [pc, #180]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	4929      	ldr	r1, [pc, #164]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009422:	4313      	orrs	r3, r2
 8009424:	600b      	str	r3, [r1, #0]
 8009426:	e018      	b.n	800945a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009428:	4b27      	ldr	r3, [pc, #156]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a26      	ldr	r2, [pc, #152]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 800942e:	f023 0301 	bic.w	r3, r3, #1
 8009432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009434:	f7fc fc5a 	bl	8005cec <HAL_GetTick>
 8009438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800943c:	f7fc fc56 	bl	8005cec <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b02      	cmp	r3, #2
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e199      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800944e:	4b1e      	ldr	r3, [pc, #120]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1f0      	bne.n	800943c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d038      	beq.n	80094d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d019      	beq.n	80094a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800946e:	4b16      	ldr	r3, [pc, #88]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009472:	4a15      	ldr	r2, [pc, #84]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800947a:	f7fc fc37 	bl	8005cec <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009480:	e008      	b.n	8009494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009482:	f7fc fc33 	bl	8005cec <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d901      	bls.n	8009494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e176      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009494:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 8009496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f0      	beq.n	8009482 <HAL_RCC_OscConfig+0x23a>
 80094a0:	e01a      	b.n	80094d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094a2:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80094a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a6:	4a08      	ldr	r2, [pc, #32]	@ (80094c8 <HAL_RCC_OscConfig+0x280>)
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ae:	f7fc fc1d 	bl	8005cec <HAL_GetTick>
 80094b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094b4:	e00a      	b.n	80094cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094b6:	f7fc fc19 	bl	8005cec <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d903      	bls.n	80094cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e15c      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
 80094c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094cc:	4b91      	ldr	r3, [pc, #580]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80094ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1ee      	bne.n	80094b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80a4 	beq.w	800962e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094e6:	4b8b      	ldr	r3, [pc, #556]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80094e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10d      	bne.n	800950e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80094f2:	4b88      	ldr	r3, [pc, #544]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f6:	4a87      	ldr	r2, [pc, #540]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80094f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80094fe:	4b85      	ldr	r3, [pc, #532]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009506:	60bb      	str	r3, [r7, #8]
 8009508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800950a:	2301      	movs	r3, #1
 800950c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800950e:	4b82      	ldr	r3, [pc, #520]	@ (8009718 <HAL_RCC_OscConfig+0x4d0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009516:	2b00      	cmp	r3, #0
 8009518:	d118      	bne.n	800954c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800951a:	4b7f      	ldr	r3, [pc, #508]	@ (8009718 <HAL_RCC_OscConfig+0x4d0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a7e      	ldr	r2, [pc, #504]	@ (8009718 <HAL_RCC_OscConfig+0x4d0>)
 8009520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009526:	f7fc fbe1 	bl	8005cec <HAL_GetTick>
 800952a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800952c:	e008      	b.n	8009540 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800952e:	f7fc fbdd 	bl	8005cec <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b64      	cmp	r3, #100	@ 0x64
 800953a:	d901      	bls.n	8009540 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e120      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009540:	4b75      	ldr	r3, [pc, #468]	@ (8009718 <HAL_RCC_OscConfig+0x4d0>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0f0      	beq.n	800952e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d106      	bne.n	8009562 <HAL_RCC_OscConfig+0x31a>
 8009554:	4b6f      	ldr	r3, [pc, #444]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009558:	4a6e      	ldr	r2, [pc, #440]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009560:	e02d      	b.n	80095be <HAL_RCC_OscConfig+0x376>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10c      	bne.n	8009584 <HAL_RCC_OscConfig+0x33c>
 800956a:	4b6a      	ldr	r3, [pc, #424]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800956c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956e:	4a69      	ldr	r2, [pc, #420]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	6713      	str	r3, [r2, #112]	@ 0x70
 8009576:	4b67      	ldr	r3, [pc, #412]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957a:	4a66      	ldr	r2, [pc, #408]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800957c:	f023 0304 	bic.w	r3, r3, #4
 8009580:	6713      	str	r3, [r2, #112]	@ 0x70
 8009582:	e01c      	b.n	80095be <HAL_RCC_OscConfig+0x376>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b05      	cmp	r3, #5
 800958a:	d10c      	bne.n	80095a6 <HAL_RCC_OscConfig+0x35e>
 800958c:	4b61      	ldr	r3, [pc, #388]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800958e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009590:	4a60      	ldr	r2, [pc, #384]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009592:	f043 0304 	orr.w	r3, r3, #4
 8009596:	6713      	str	r3, [r2, #112]	@ 0x70
 8009598:	4b5e      	ldr	r3, [pc, #376]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800959c:	4a5d      	ldr	r2, [pc, #372]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80095a4:	e00b      	b.n	80095be <HAL_RCC_OscConfig+0x376>
 80095a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80095a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095aa:	4a5a      	ldr	r2, [pc, #360]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80095b2:	4b58      	ldr	r3, [pc, #352]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80095b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095b6:	4a57      	ldr	r2, [pc, #348]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80095b8:	f023 0304 	bic.w	r3, r3, #4
 80095bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d015      	beq.n	80095f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c6:	f7fc fb91 	bl	8005cec <HAL_GetTick>
 80095ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095cc:	e00a      	b.n	80095e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ce:	f7fc fb8d 	bl	8005cec <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095dc:	4293      	cmp	r3, r2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e0ce      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095e4:	4b4b      	ldr	r3, [pc, #300]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80095e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0ee      	beq.n	80095ce <HAL_RCC_OscConfig+0x386>
 80095f0:	e014      	b.n	800961c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095f2:	f7fc fb7b 	bl	8005cec <HAL_GetTick>
 80095f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095f8:	e00a      	b.n	8009610 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095fa:	f7fc fb77 	bl	8005cec <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009608:	4293      	cmp	r3, r2
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e0b8      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009610:	4b40      	ldr	r3, [pc, #256]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1ee      	bne.n	80095fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d105      	bne.n	800962e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009622:	4b3c      	ldr	r3, [pc, #240]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009626:	4a3b      	ldr	r2, [pc, #236]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800962c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 80a4 	beq.w	8009780 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009638:	4b36      	ldr	r3, [pc, #216]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 030c 	and.w	r3, r3, #12
 8009640:	2b08      	cmp	r3, #8
 8009642:	d06b      	beq.n	800971c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d149      	bne.n	80096e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800964c:	4b31      	ldr	r3, [pc, #196]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a30      	ldr	r2, [pc, #192]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009658:	f7fc fb48 	bl	8005cec <HAL_GetTick>
 800965c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800965e:	e008      	b.n	8009672 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009660:	f7fc fb44 	bl	8005cec <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e087      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009672:	4b28      	ldr	r3, [pc, #160]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1f0      	bne.n	8009660 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69da      	ldr	r2, [r3, #28]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	019b      	lsls	r3, r3, #6
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	3b01      	subs	r3, #1
 8009698:	041b      	lsls	r3, r3, #16
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	061b      	lsls	r3, r3, #24
 80096a2:	4313      	orrs	r3, r2
 80096a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096ac:	4b19      	ldr	r3, [pc, #100]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7fc fb18 	bl	8005cec <HAL_GetTick>
 80096bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096be:	e008      	b.n	80096d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096c0:	f7fc fb14 	bl	8005cec <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e057      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096d2:	4b10      	ldr	r3, [pc, #64]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <HAL_RCC_OscConfig+0x478>
 80096de:	e04f      	b.n	8009780 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 80096e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ec:	f7fc fafe 	bl	8005cec <HAL_GetTick>
 80096f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096f2:	e008      	b.n	8009706 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096f4:	f7fc fafa 	bl	8005cec <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e03d      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009706:	4b03      	ldr	r3, [pc, #12]	@ (8009714 <HAL_RCC_OscConfig+0x4cc>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f0      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4ac>
 8009712:	e035      	b.n	8009780 <HAL_RCC_OscConfig+0x538>
 8009714:	40023800 	.word	0x40023800
 8009718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800971c:	4b1b      	ldr	r3, [pc, #108]	@ (800978c <HAL_RCC_OscConfig+0x544>)
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d028      	beq.n	800977c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009734:	429a      	cmp	r2, r3
 8009736:	d121      	bne.n	800977c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009742:	429a      	cmp	r2, r3
 8009744:	d11a      	bne.n	800977c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800974c:	4013      	ands	r3, r2
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009752:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009754:	4293      	cmp	r3, r2
 8009756:	d111      	bne.n	800977c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	085b      	lsrs	r3, r3, #1
 8009764:	3b01      	subs	r3, #1
 8009766:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009768:	429a      	cmp	r2, r3
 800976a:	d107      	bne.n	800977c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009778:	429a      	cmp	r2, r3
 800977a:	d001      	beq.n	8009780 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e000      	b.n	8009782 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	40023800 	.word	0x40023800

08009790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e0d0      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097a8:	4b6a      	ldr	r3, [pc, #424]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d910      	bls.n	80097d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097b6:	4b67      	ldr	r3, [pc, #412]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f023 020f 	bic.w	r2, r3, #15
 80097be:	4965      	ldr	r1, [pc, #404]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c6:	4b63      	ldr	r3, [pc, #396]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d001      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e0b8      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d020      	beq.n	8009826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097f0:	4b59      	ldr	r3, [pc, #356]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	4a58      	ldr	r2, [pc, #352]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 80097f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80097fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009808:	4b53      	ldr	r3, [pc, #332]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	4a52      	ldr	r2, [pc, #328]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 800980e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009814:	4b50      	ldr	r3, [pc, #320]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	494d      	ldr	r1, [pc, #308]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009822:	4313      	orrs	r3, r2
 8009824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d040      	beq.n	80098b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d107      	bne.n	800984a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800983a:	4b47      	ldr	r3, [pc, #284]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d115      	bne.n	8009872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e07f      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d107      	bne.n	8009862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009852:	4b41      	ldr	r3, [pc, #260]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e073      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009862:	4b3d      	ldr	r3, [pc, #244]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e06b      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009872:	4b39      	ldr	r3, [pc, #228]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f023 0203 	bic.w	r2, r3, #3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4936      	ldr	r1, [pc, #216]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009880:	4313      	orrs	r3, r2
 8009882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009884:	f7fc fa32 	bl	8005cec <HAL_GetTick>
 8009888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800988a:	e00a      	b.n	80098a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800988c:	f7fc fa2e 	bl	8005cec <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800989a:	4293      	cmp	r3, r2
 800989c:	d901      	bls.n	80098a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e053      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 020c 	and.w	r2, r3, #12
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d1eb      	bne.n	800988c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098b4:	4b27      	ldr	r3, [pc, #156]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 030f 	and.w	r3, r3, #15
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d210      	bcs.n	80098e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098c2:	4b24      	ldr	r3, [pc, #144]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f023 020f 	bic.w	r2, r3, #15
 80098ca:	4922      	ldr	r1, [pc, #136]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098d2:	4b20      	ldr	r3, [pc, #128]	@ (8009954 <HAL_RCC_ClockConfig+0x1c4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d001      	beq.n	80098e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e032      	b.n	800994a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d008      	beq.n	8009902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098f0:	4b19      	ldr	r3, [pc, #100]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	4916      	ldr	r1, [pc, #88]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0308 	and.w	r3, r3, #8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800990e:	4b12      	ldr	r3, [pc, #72]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	490e      	ldr	r1, [pc, #56]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 800991e:	4313      	orrs	r3, r2
 8009920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009922:	f000 f821 	bl	8009968 <HAL_RCC_GetSysClockFreq>
 8009926:	4602      	mov	r2, r0
 8009928:	4b0b      	ldr	r3, [pc, #44]	@ (8009958 <HAL_RCC_ClockConfig+0x1c8>)
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	091b      	lsrs	r3, r3, #4
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	490a      	ldr	r1, [pc, #40]	@ (800995c <HAL_RCC_ClockConfig+0x1cc>)
 8009934:	5ccb      	ldrb	r3, [r1, r3]
 8009936:	fa22 f303 	lsr.w	r3, r2, r3
 800993a:	4a09      	ldr	r2, [pc, #36]	@ (8009960 <HAL_RCC_ClockConfig+0x1d0>)
 800993c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800993e:	4b09      	ldr	r3, [pc, #36]	@ (8009964 <HAL_RCC_ClockConfig+0x1d4>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f7fc f98e 	bl	8005c64 <HAL_InitTick>

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	40023c00 	.word	0x40023c00
 8009958:	40023800 	.word	0x40023800
 800995c:	08017b14 	.word	0x08017b14
 8009960:	20000000 	.word	0x20000000
 8009964:	20000004 	.word	0x20000004

08009968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800996c:	b094      	sub	sp, #80	@ 0x50
 800996e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	647b      	str	r3, [r7, #68]	@ 0x44
 8009974:	2300      	movs	r3, #0
 8009976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009978:	2300      	movs	r3, #0
 800997a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009980:	4b79      	ldr	r3, [pc, #484]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 030c 	and.w	r3, r3, #12
 8009988:	2b08      	cmp	r3, #8
 800998a:	d00d      	beq.n	80099a8 <HAL_RCC_GetSysClockFreq+0x40>
 800998c:	2b08      	cmp	r3, #8
 800998e:	f200 80e1 	bhi.w	8009b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_RCC_GetSysClockFreq+0x34>
 8009996:	2b04      	cmp	r3, #4
 8009998:	d003      	beq.n	80099a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800999a:	e0db      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800999c:	4b73      	ldr	r3, [pc, #460]	@ (8009b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800999e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80099a0:	e0db      	b.n	8009b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80099a2:	4b73      	ldr	r3, [pc, #460]	@ (8009b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80099a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80099a6:	e0d8      	b.n	8009b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80099b2:	4b6d      	ldr	r3, [pc, #436]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d063      	beq.n	8009a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099be:	4b6a      	ldr	r3, [pc, #424]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	099b      	lsrs	r3, r3, #6
 80099c4:	2200      	movs	r2, #0
 80099c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	f04f 0000 	mov.w	r0, #0
 80099e2:	f04f 0100 	mov.w	r1, #0
 80099e6:	0159      	lsls	r1, r3, #5
 80099e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099ec:	0150      	lsls	r0, r2, #5
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4621      	mov	r1, r4
 80099f4:	1a51      	subs	r1, r2, r1
 80099f6:	6139      	str	r1, [r7, #16]
 80099f8:	4629      	mov	r1, r5
 80099fa:	eb63 0301 	sbc.w	r3, r3, r1
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	018b      	lsls	r3, r1, #6
 8009a10:	4651      	mov	r1, sl
 8009a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a16:	4651      	mov	r1, sl
 8009a18:	018a      	lsls	r2, r1, #6
 8009a1a:	4651      	mov	r1, sl
 8009a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8009a20:	4659      	mov	r1, fp
 8009a22:	eb63 0901 	sbc.w	r9, r3, r1
 8009a26:	f04f 0200 	mov.w	r2, #0
 8009a2a:	f04f 0300 	mov.w	r3, #0
 8009a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a3a:	4690      	mov	r8, r2
 8009a3c:	4699      	mov	r9, r3
 8009a3e:	4623      	mov	r3, r4
 8009a40:	eb18 0303 	adds.w	r3, r8, r3
 8009a44:	60bb      	str	r3, [r7, #8]
 8009a46:	462b      	mov	r3, r5
 8009a48:	eb49 0303 	adc.w	r3, r9, r3
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	f04f 0300 	mov.w	r3, #0
 8009a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	024b      	lsls	r3, r1, #9
 8009a5e:	4621      	mov	r1, r4
 8009a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009a64:	4621      	mov	r1, r4
 8009a66:	024a      	lsls	r2, r1, #9
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	2200      	movs	r2, #0
 8009a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a78:	f7f7 f93e 	bl	8000cf8 <__aeabi_uldivmod>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4613      	mov	r3, r2
 8009a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a84:	e058      	b.n	8009b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a86:	4b38      	ldr	r3, [pc, #224]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	099b      	lsrs	r3, r3, #6
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	4611      	mov	r1, r2
 8009a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009a96:	623b      	str	r3, [r7, #32]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	f04f 0000 	mov.w	r0, #0
 8009aa8:	f04f 0100 	mov.w	r1, #0
 8009aac:	0159      	lsls	r1, r3, #5
 8009aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ab2:	0150      	lsls	r0, r2, #5
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4641      	mov	r1, r8
 8009aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8009abe:	4649      	mov	r1, r9
 8009ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8009adc:	eb63 050b 	sbc.w	r5, r3, fp
 8009ae0:	f04f 0200 	mov.w	r2, #0
 8009ae4:	f04f 0300 	mov.w	r3, #0
 8009ae8:	00eb      	lsls	r3, r5, #3
 8009aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009aee:	00e2      	lsls	r2, r4, #3
 8009af0:	4614      	mov	r4, r2
 8009af2:	461d      	mov	r5, r3
 8009af4:	4643      	mov	r3, r8
 8009af6:	18e3      	adds	r3, r4, r3
 8009af8:	603b      	str	r3, [r7, #0]
 8009afa:	464b      	mov	r3, r9
 8009afc:	eb45 0303 	adc.w	r3, r5, r3
 8009b00:	607b      	str	r3, [r7, #4]
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b0e:	4629      	mov	r1, r5
 8009b10:	028b      	lsls	r3, r1, #10
 8009b12:	4621      	mov	r1, r4
 8009b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b18:	4621      	mov	r1, r4
 8009b1a:	028a      	lsls	r2, r1, #10
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b22:	2200      	movs	r2, #0
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	61fa      	str	r2, [r7, #28]
 8009b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b2c:	f7f7 f8e4 	bl	8000cf8 <__aeabi_uldivmod>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4613      	mov	r3, r2
 8009b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009b38:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	0c1b      	lsrs	r3, r3, #16
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	3301      	adds	r3, #1
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b52:	e002      	b.n	8009b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b54:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8009b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3750      	adds	r7, #80	@ 0x50
 8009b60:	46bd      	mov	sp, r7
 8009b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b66:	bf00      	nop
 8009b68:	40023800 	.word	0x40023800
 8009b6c:	00f42400 	.word	0x00f42400
 8009b70:	007a1200 	.word	0x007a1200

08009b74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b78:	4b03      	ldr	r3, [pc, #12]	@ (8009b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000000 	.word	0x20000000

08009b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b90:	f7ff fff0 	bl	8009b74 <HAL_RCC_GetHCLKFreq>
 8009b94:	4602      	mov	r2, r0
 8009b96:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	0a9b      	lsrs	r3, r3, #10
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	4903      	ldr	r1, [pc, #12]	@ (8009bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ba2:	5ccb      	ldrb	r3, [r1, r3]
 8009ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40023800 	.word	0x40023800
 8009bb0:	08017b24 	.word	0x08017b24

08009bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009bb8:	f7ff ffdc 	bl	8009b74 <HAL_RCC_GetHCLKFreq>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4b05      	ldr	r3, [pc, #20]	@ (8009bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	0b5b      	lsrs	r3, r3, #13
 8009bc4:	f003 0307 	and.w	r3, r3, #7
 8009bc8:	4903      	ldr	r1, [pc, #12]	@ (8009bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bca:	5ccb      	ldrb	r3, [r1, r3]
 8009bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40023800 	.word	0x40023800
 8009bd8:	08017b24 	.word	0x08017b24

08009bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d012      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c00:	4b65      	ldr	r3, [pc, #404]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	4a64      	ldr	r2, [pc, #400]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c0a:	6093      	str	r3, [r2, #8]
 8009c0c:	4b62      	ldr	r3, [pc, #392]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c14:	4960      	ldr	r1, [pc, #384]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8009c22:	2301      	movs	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d017      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c32:	4b59      	ldr	r3, [pc, #356]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c40:	4955      	ldr	r1, [pc, #340]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c50:	d101      	bne.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d017      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c7c:	4946      	ldr	r1, [pc, #280]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c8c:	d101      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 808b 	beq.w	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009cac:	4b3a      	ldr	r3, [pc, #232]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb0:	4a39      	ldr	r2, [pc, #228]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cb8:	4b37      	ldr	r3, [pc, #220]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cc4:	4b35      	ldr	r3, [pc, #212]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a34      	ldr	r2, [pc, #208]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cd0:	f7fc f80c 	bl	8005cec <HAL_GetTick>
 8009cd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009cd6:	e008      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cd8:	f7fc f808 	bl	8005cec <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b64      	cmp	r3, #100	@ 0x64
 8009ce4:	d901      	bls.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e2bc      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009cea:	4b2c      	ldr	r3, [pc, #176]	@ (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009cf6:	4b28      	ldr	r3, [pc, #160]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d035      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d02e      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d14:	4b20      	ldr	r3, [pc, #128]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d22:	4a1d      	ldr	r2, [pc, #116]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009d36:	4a18      	ldr	r2, [pc, #96]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d3c:	4b16      	ldr	r3, [pc, #88]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d114      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d48:	f7fb ffd0 	bl	8005cec <HAL_GetTick>
 8009d4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d4e:	e00a      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d50:	f7fb ffcc 	bl	8005cec <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d901      	bls.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e27e      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d66:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0ee      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d7e:	d111      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8009d80:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d8c:	4b04      	ldr	r3, [pc, #16]	@ (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009d8e:	400b      	ands	r3, r1
 8009d90:	4901      	ldr	r1, [pc, #4]	@ (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	608b      	str	r3, [r1, #8]
 8009d96:	e00b      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009d98:	40023800 	.word	0x40023800
 8009d9c:	40007000 	.word	0x40007000
 8009da0:	0ffffcff 	.word	0x0ffffcff
 8009da4:	4ba4      	ldr	r3, [pc, #656]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	4aa3      	ldr	r2, [pc, #652]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009daa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009dae:	6093      	str	r3, [r2, #8]
 8009db0:	4ba1      	ldr	r3, [pc, #644]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009db2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dbc:	499e      	ldr	r1, [pc, #632]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d010      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dce:	4b9a      	ldr	r3, [pc, #616]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dd4:	4a98      	ldr	r2, [pc, #608]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009dde:	4b96      	ldr	r3, [pc, #600]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009de0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de8:	4993      	ldr	r1, [pc, #588]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dfc:	4b8e      	ldr	r3, [pc, #568]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e0a:	498b      	ldr	r1, [pc, #556]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e1e:	4b86      	ldr	r3, [pc, #536]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e2c:	4982      	ldr	r1, [pc, #520]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e40:	4b7d      	ldr	r3, [pc, #500]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e4e:	497a      	ldr	r1, [pc, #488]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e62:	4b75      	ldr	r3, [pc, #468]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e68:	f023 0203 	bic.w	r2, r3, #3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e70:	4971      	ldr	r1, [pc, #452]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e84:	4b6c      	ldr	r3, [pc, #432]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e8a:	f023 020c 	bic.w	r2, r3, #12
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	4969      	ldr	r1, [pc, #420]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ea6:	4b64      	ldr	r3, [pc, #400]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb4:	4960      	ldr	r1, [pc, #384]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ec8:	4b5b      	ldr	r3, [pc, #364]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ece:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed6:	4958      	ldr	r1, [pc, #352]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009eea:	4b53      	ldr	r3, [pc, #332]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ef8:	494f      	ldr	r1, [pc, #316]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00a      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009f0c:	4b4a      	ldr	r3, [pc, #296]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f1a:	4947      	ldr	r1, [pc, #284]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009f2e:	4b42      	ldr	r3, [pc, #264]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3c:	493e      	ldr	r1, [pc, #248]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009f50:	4b39      	ldr	r3, [pc, #228]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5e:	4936      	ldr	r1, [pc, #216]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d011      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009f72:	4b31      	ldr	r3, [pc, #196]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f78:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f80:	492d      	ldr	r1, [pc, #180]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f90:	d101      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8009f92:	2301      	movs	r3, #1
 8009f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fa2:	4b25      	ldr	r3, [pc, #148]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fb0:	4921      	ldr	r1, [pc, #132]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009fc4:	4b1c      	ldr	r3, [pc, #112]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fd2:	4919      	ldr	r1, [pc, #100]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009fe6:	4b14      	ldr	r3, [pc, #80]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ff4:	4910      	ldr	r1, [pc, #64]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d006      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 809d 	beq.w	800a14a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a010:	4b09      	ldr	r3, [pc, #36]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a08      	ldr	r2, [pc, #32]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a016:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a01a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01c:	f7fb fe66 	bl	8005cec <HAL_GetTick>
 800a020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a022:	e00b      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a024:	f7fb fe62 	bl	8005cec <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	2b64      	cmp	r3, #100	@ 0x64
 800a030:	d904      	bls.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e116      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a036:	bf00      	nop
 800a038:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a03c:	4b8b      	ldr	r3, [pc, #556]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1ed      	bne.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d017      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d113      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a05c:	4b83      	ldr	r3, [pc, #524]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a062:	0e1b      	lsrs	r3, r3, #24
 800a064:	f003 030f 	and.w	r3, r3, #15
 800a068:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	019a      	lsls	r2, r3, #6
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	061b      	lsls	r3, r3, #24
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	071b      	lsls	r3, r3, #28
 800a07c:	497b      	ldr	r1, [pc, #492]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a098:	d00a      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d024      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0ae:	d11f      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a0b0:	4b6e      	ldr	r3, [pc, #440]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0b6:	0f1b      	lsrs	r3, r3, #28
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	019a      	lsls	r2, r3, #6
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	061b      	lsls	r3, r3, #24
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	071b      	lsls	r3, r3, #28
 800a0d0:	4966      	ldr	r1, [pc, #408]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a0d8:	4b64      	ldr	r3, [pc, #400]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0de:	f023 021f 	bic.w	r2, r3, #31
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	4960      	ldr	r1, [pc, #384]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00d      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	019a      	lsls	r2, r3, #6
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	061b      	lsls	r3, r3, #24
 800a108:	431a      	orrs	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	071b      	lsls	r3, r3, #28
 800a110:	4956      	ldr	r1, [pc, #344]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a112:	4313      	orrs	r3, r2
 800a114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a118:	4b54      	ldr	r3, [pc, #336]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a53      	ldr	r2, [pc, #332]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a11e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a124:	f7fb fde2 	bl	8005cec <HAL_GetTick>
 800a128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a12a:	e008      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a12c:	f7fb fdde 	bl	8005cec <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b64      	cmp	r3, #100	@ 0x64
 800a138:	d901      	bls.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e092      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a13e:	4b4b      	ldr	r3, [pc, #300]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0f0      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	f040 8088 	bne.w	800a262 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a152:	4b46      	ldr	r3, [pc, #280]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a45      	ldr	r2, [pc, #276]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a15c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15e:	f7fb fdc5 	bl	8005cec <HAL_GetTick>
 800a162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a164:	e008      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a166:	f7fb fdc1 	bl	8005cec <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b64      	cmp	r3, #100	@ 0x64
 800a172:	d901      	bls.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e075      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a178:	4b3c      	ldr	r3, [pc, #240]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a184:	d0ef      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d024      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d120      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a1ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	019a      	lsls	r2, r3, #6
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	041b      	lsls	r3, r3, #16
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	061b      	lsls	r3, r3, #24
 800a1ce:	4927      	ldr	r1, [pc, #156]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a1d6:	4b25      	ldr	r3, [pc, #148]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	4920      	ldr	r1, [pc, #128]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d018      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a204:	d113      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a206:	4b19      	ldr	r3, [pc, #100]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20c:	0e1b      	lsrs	r3, r3, #24
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	019a      	lsls	r2, r3, #6
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	431a      	orrs	r2, r3
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	4911      	ldr	r1, [pc, #68]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a0e      	ldr	r2, [pc, #56]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a23a:	f7fb fd57 	bl	8005cec <HAL_GetTick>
 800a23e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a240:	e008      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a242:	f7fb fd53 	bl	8005cec <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b64      	cmp	r3, #100	@ 0x64
 800a24e:	d901      	bls.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e007      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a260:	d1ef      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3720      	adds	r7, #32
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40023800 	.word	0x40023800

0800a270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e09d      	b.n	800a3be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d108      	bne.n	800a29c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a292:	d009      	beq.n	800a2a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	61da      	str	r2, [r3, #28]
 800a29a:	e005      	b.n	800a2a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7fb f880 	bl	80053c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a2e8:	d902      	bls.n	800a2f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e002      	b.n	800a2f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a2fe:	d007      	beq.n	800a310 <HAL_SPI_Init+0xa0>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a308:	d002      	beq.n	800a310 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	431a      	orrs	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a352:	ea42 0103 	orr.w	r1, r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	f003 0204 	and.w	r2, r3, #4
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	f003 0310 	and.w	r3, r3, #16
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a38c:	ea42 0103 	orr.w	r1, r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b088      	sub	sp, #32
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	603b      	str	r3, [r7, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3d6:	f7fb fc89 	bl	8005cec <HAL_GetTick>
 800a3da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d001      	beq.n	800a3f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e15c      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <HAL_SPI_Transmit+0x36>
 800a3f6:	88fb      	ldrh	r3, [r7, #6]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e154      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a406:	2b01      	cmp	r3, #1
 800a408:	d101      	bne.n	800a40e <HAL_SPI_Transmit+0x48>
 800a40a:	2302      	movs	r3, #2
 800a40c:	e14d      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2203      	movs	r2, #3
 800a41a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	88fa      	ldrh	r2, [r7, #6]
 800a42e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	88fa      	ldrh	r2, [r7, #6]
 800a434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a460:	d10f      	bne.n	800a482 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a48c:	2b40      	cmp	r3, #64	@ 0x40
 800a48e:	d007      	beq.n	800a4a0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a49e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4a8:	d952      	bls.n	800a550 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <HAL_SPI_Transmit+0xf2>
 800a4b2:	8b7b      	ldrh	r3, [r7, #26]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d145      	bne.n	800a544 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	881a      	ldrh	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c8:	1c9a      	adds	r2, r3, #2
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4dc:	e032      	b.n	800a544 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d112      	bne.n	800a512 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f0:	881a      	ldrh	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fc:	1c9a      	adds	r2, r3, #2
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a510:	e018      	b.n	800a544 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a512:	f7fb fbeb 	bl	8005cec <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d803      	bhi.n	800a52a <HAL_SPI_Transmit+0x164>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a528:	d102      	bne.n	800a530 <HAL_SPI_Transmit+0x16a>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d109      	bne.n	800a544 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e0b2      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1c7      	bne.n	800a4de <HAL_SPI_Transmit+0x118>
 800a54e:	e083      	b.n	800a658 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <HAL_SPI_Transmit+0x198>
 800a558:	8b7b      	ldrh	r3, [r7, #26]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d177      	bne.n	800a64e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	d912      	bls.n	800a58e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a56c:	881a      	ldrh	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a578:	1c9a      	adds	r2, r3, #2
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b02      	subs	r3, #2
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a58c:	e05f      	b.n	800a64e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	330c      	adds	r3, #12
 800a598:	7812      	ldrb	r2, [r2, #0]
 800a59a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a5b4:	e04b      	b.n	800a64e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d12b      	bne.n	800a61c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d912      	bls.n	800a5f4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d2:	881a      	ldrh	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5de:	1c9a      	adds	r2, r3, #2
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	3b02      	subs	r3, #2
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5f2:	e02c      	b.n	800a64e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	330c      	adds	r3, #12
 800a5fe:	7812      	ldrb	r2, [r2, #0]
 800a600:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	b29a      	uxth	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a61a:	e018      	b.n	800a64e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a61c:	f7fb fb66 	bl	8005cec <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d803      	bhi.n	800a634 <HAL_SPI_Transmit+0x26e>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d102      	bne.n	800a63a <HAL_SPI_Transmit+0x274>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e02d      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1ae      	bne.n	800a5b6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f001 f8b7 	bl	800b7d0 <SPI_EndRxTxTransaction>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2220      	movs	r2, #32
 800a66c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e000      	b.n	800a6aa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
  }
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b088      	sub	sp, #32
 800a6b6:	af02      	add	r7, sp, #8
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	603b      	str	r3, [r7, #0]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d001      	beq.n	800a6d2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	e123      	b.n	800a91a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <HAL_SPI_Receive+0x2c>
 800a6d8:	88fb      	ldrh	r3, [r7, #6]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e11b      	b.n	800a91a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6ea:	d112      	bne.n	800a712 <HAL_SPI_Receive+0x60>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10e      	bne.n	800a712 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a6fc:	88fa      	ldrh	r2, [r7, #6]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	4613      	mov	r3, r2
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f90a 	bl	800a922 <HAL_SPI_TransmitReceive>
 800a70e:	4603      	mov	r3, r0
 800a710:	e103      	b.n	800a91a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a712:	f7fb faeb 	bl	8005cec <HAL_GetTick>
 800a716:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_SPI_Receive+0x74>
 800a722:	2302      	movs	r3, #2
 800a724:	e0f9      	b.n	800a91a <HAL_SPI_Receive+0x268>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2204      	movs	r2, #4
 800a732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	88fa      	ldrh	r2, [r7, #6]
 800a74e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a778:	d908      	bls.n	800a78c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	e007      	b.n	800a79c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a79a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a4:	d10f      	bne.n	800a7c6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a7c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d0:	2b40      	cmp	r3, #64	@ 0x40
 800a7d2:	d007      	beq.n	800a7e4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a7ec:	d875      	bhi.n	800a8da <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a7ee:	e037      	b.n	800a860 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d117      	bne.n	800a82e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f103 020c 	add.w	r2, r3, #12
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	b2d2      	uxtb	r2, r2
 800a80e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a814:	1c5a      	adds	r2, r3, #1
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a82c:	e018      	b.n	800a860 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a82e:	f7fb fa5d 	bl	8005cec <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d803      	bhi.n	800a846 <HAL_SPI_Receive+0x194>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d102      	bne.n	800a84c <HAL_SPI_Receive+0x19a>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e05c      	b.n	800a91a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a866:	b29b      	uxth	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1c1      	bne.n	800a7f0 <HAL_SPI_Receive+0x13e>
 800a86c:	e03b      	b.n	800a8e6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d115      	bne.n	800a8a8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	b292      	uxth	r2, r2
 800a888:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88e:	1c9a      	adds	r2, r3, #2
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a8a6:	e018      	b.n	800a8da <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8a8:	f7fb fa20 	bl	8005cec <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d803      	bhi.n	800a8c0 <HAL_SPI_Receive+0x20e>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d102      	bne.n	800a8c6 <HAL_SPI_Receive+0x214>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e01f      	b.n	800a91a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1c3      	bne.n	800a86e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fef4 	bl	800b6d8 <SPI_EndRxTransaction>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800a918:	2300      	movs	r3, #0
  }
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b08a      	sub	sp, #40	@ 0x28
 800a926:	af00      	add	r7, sp, #0
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	60b9      	str	r1, [r7, #8]
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a930:	2301      	movs	r3, #1
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a934:	f7fb f9da 	bl	8005cec <HAL_GetTick>
 800a938:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a940:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a948:	887b      	ldrh	r3, [r7, #2]
 800a94a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a94c:	887b      	ldrh	r3, [r7, #2]
 800a94e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a950:	7ffb      	ldrb	r3, [r7, #31]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d00c      	beq.n	800a970 <HAL_SPI_TransmitReceive+0x4e>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a95c:	d106      	bne.n	800a96c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <HAL_SPI_TransmitReceive+0x4a>
 800a966:	7ffb      	ldrb	r3, [r7, #31]
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d001      	beq.n	800a970 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a96c:	2302      	movs	r3, #2
 800a96e:	e1f3      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x60>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x60>
 800a97c:	887b      	ldrh	r3, [r7, #2]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e1e8      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d101      	bne.n	800a994 <HAL_SPI_TransmitReceive+0x72>
 800a990:	2302      	movs	r3, #2
 800a992:	e1e1      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d003      	beq.n	800a9b0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2205      	movs	r2, #5
 800a9ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	887a      	ldrh	r2, [r7, #2]
 800a9c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	887a      	ldrh	r2, [r7, #2]
 800a9c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	887a      	ldrh	r2, [r7, #2]
 800a9d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	887a      	ldrh	r2, [r7, #2]
 800a9dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a9f2:	d802      	bhi.n	800a9fa <HAL_SPI_TransmitReceive+0xd8>
 800a9f4:	8abb      	ldrh	r3, [r7, #20]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d908      	bls.n	800aa0c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa08:	605a      	str	r2, [r3, #4]
 800aa0a:	e007      	b.n	800aa1c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d007      	beq.n	800aa3a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa42:	f240 8083 	bls.w	800ab4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <HAL_SPI_TransmitReceive+0x132>
 800aa4e:	8afb      	ldrh	r3, [r7, #22]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d16f      	bne.n	800ab34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa58:	881a      	ldrh	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	1c9a      	adds	r2, r3, #2
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa78:	e05c      	b.n	800ab34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d11b      	bne.n	800aac0 <HAL_SPI_TransmitReceive+0x19e>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <HAL_SPI_TransmitReceive+0x19e>
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d113      	bne.n	800aac0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9c:	881a      	ldrh	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	1c9a      	adds	r2, r3, #2
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d11c      	bne.n	800ab08 <HAL_SPI_TransmitReceive+0x1e6>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d016      	beq.n	800ab08 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae4:	b292      	uxth	r2, r2
 800aae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaec:	1c9a      	adds	r2, r3, #2
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab04:	2301      	movs	r3, #1
 800ab06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab08:	f7fb f8f0 	bl	8005cec <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d80d      	bhi.n	800ab34 <HAL_SPI_TransmitReceive+0x212>
 800ab18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d009      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e111      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d19d      	bne.n	800aa7a <HAL_SPI_TransmitReceive+0x158>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d197      	bne.n	800aa7a <HAL_SPI_TransmitReceive+0x158>
 800ab4a:	e0e5      	b.n	800ad18 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <HAL_SPI_TransmitReceive+0x23a>
 800ab54:	8afb      	ldrh	r3, [r7, #22]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	f040 80d1 	bne.w	800acfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d912      	bls.n	800ab8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6a:	881a      	ldrh	r2, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	1c9a      	adds	r2, r3, #2
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	3b02      	subs	r3, #2
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ab8a:	e0b8      	b.n	800acfe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	330c      	adds	r3, #12
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abb2:	e0a4      	b.n	800acfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d134      	bne.n	800ac2c <HAL_SPI_TransmitReceive+0x30a>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d02f      	beq.n	800ac2c <HAL_SPI_TransmitReceive+0x30a>
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d12c      	bne.n	800ac2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d912      	bls.n	800ac02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe0:	881a      	ldrh	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abec:	1c9a      	adds	r2, r3, #2
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b02      	subs	r3, #2
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ac00:	e012      	b.n	800ac28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	330c      	adds	r3, #12
 800ac0c:	7812      	ldrb	r2, [r2, #0]
 800ac0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	3b01      	subs	r3, #1
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d148      	bne.n	800accc <HAL_SPI_TransmitReceive+0x3aa>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d042      	beq.n	800accc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d923      	bls.n	800ac9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5c:	b292      	uxth	r2, r2
 800ac5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac64:	1c9a      	adds	r2, r3, #2
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	3b02      	subs	r3, #2
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d81f      	bhi.n	800acc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	e016      	b.n	800acc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f103 020c 	add.w	r2, r3, #12
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca6:	7812      	ldrb	r2, [r2, #0]
 800aca8:	b2d2      	uxtb	r2, r2
 800acaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	3b01      	subs	r3, #1
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acc8:	2301      	movs	r3, #1
 800acca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800accc:	f7fb f80e 	bl	8005cec <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd8:	429a      	cmp	r2, r3
 800acda:	d803      	bhi.n	800ace4 <HAL_SPI_TransmitReceive+0x3c2>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d102      	bne.n	800acea <HAL_SPI_TransmitReceive+0x3c8>
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d109      	bne.n	800acfe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e02c      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f47f af55 	bne.w	800abb4 <HAL_SPI_TransmitReceive+0x292>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f47f af4e 	bne.w	800abb4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad18:	6a3a      	ldr	r2, [r7, #32]
 800ad1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fd57 	bl	800b7d0 <SPI_EndRxTxTransaction>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d008      	beq.n	800ad3a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e00e      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800ad56:	2300      	movs	r3, #0
  }
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3728      	adds	r7, #40	@ 0x28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ad74:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d00c      	beq.n	800ad9c <HAL_SPI_TransmitReceive_DMA+0x3c>
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad88:	d106      	bne.n	800ad98 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <HAL_SPI_TransmitReceive_DMA+0x38>
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d001      	beq.n	800ad9c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e158      	b.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d005      	beq.n	800adae <HAL_SPI_TransmitReceive_DMA+0x4e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <HAL_SPI_TransmitReceive_DMA+0x4e>
 800ada8:	887b      	ldrh	r3, [r7, #2]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e14d      	b.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_SPI_TransmitReceive_DMA+0x60>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e146      	b.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b04      	cmp	r3, #4
 800add2:	d003      	beq.n	800addc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2205      	movs	r2, #5
 800add8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	887a      	ldrh	r2, [r7, #2]
 800adec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	887a      	ldrh	r2, [r7, #2]
 800adf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	887a      	ldrh	r2, [r7, #2]
 800adfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	887a      	ldrh	r2, [r7, #2]
 800ae06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800ae24:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ae2e:	d908      	bls.n	800ae42 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ae3e:	605a      	str	r2, [r3, #4]
 800ae40:	e06f      	b.n	800af22 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae50:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae5c:	d126      	bne.n	800aeac <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10f      	bne.n	800ae8a <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ae78:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	085b      	lsrs	r3, r3, #1
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae88:	e010      	b.n	800aeac <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae98:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	085b      	lsrs	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	3301      	adds	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeb6:	d134      	bne.n	800af22 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aec6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d111      	bne.n	800aefc <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aee6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	085b      	lsrs	r3, r3, #1
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800aefa:	e012      	b.n	800af22 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af12:	b29b      	uxth	r3, r3
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	b29b      	uxth	r3, r3
 800af18:	3301      	adds	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d108      	bne.n	800af40 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af32:	4a49      	ldr	r2, [pc, #292]	@ (800b058 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800af34:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3a:	4a48      	ldr	r2, [pc, #288]	@ (800b05c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800af3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800af3e:	e007      	b.n	800af50 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af44:	4a46      	ldr	r2, [pc, #280]	@ (800b060 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800af46:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af4c:	4a45      	ldr	r2, [pc, #276]	@ (800b064 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800af4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af54:	4a44      	ldr	r2, [pc, #272]	@ (800b068 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800af56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af5c:	2200      	movs	r2, #0
 800af5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	330c      	adds	r3, #12
 800af6a:	4619      	mov	r1, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af70:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800af7a:	f7fb fd55 	bl	8006a28 <HAL_DMA_Start_IT>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00b      	beq.n	800af9c <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af88:	f043 0210 	orr.w	r2, r3, #16
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e058      	b.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0201 	orr.w	r2, r2, #1
 800afaa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb0:	2200      	movs	r2, #0
 800afb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb8:	2200      	movs	r2, #0
 800afba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc0:	2200      	movs	r2, #0
 800afc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc8:	2200      	movs	r2, #0
 800afca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	4619      	mov	r1, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	330c      	adds	r3, #12
 800afdc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afe2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800afe4:	f7fb fd20 	bl	8006a28 <HAL_DMA_Start_IT>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aff2:	f043 0210 	orr.w	r2, r3, #16
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e023      	b.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b010:	2b40      	cmp	r3, #64	@ 0x40
 800b012:	d007      	beq.n	800b024 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b022:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f042 0220 	orr.w	r2, r2, #32
 800b03a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f042 0202 	orr.w	r2, r2, #2
 800b04a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	0800b3f9 	.word	0x0800b3f9
 800b05c:	0800b2bd 	.word	0x0800b2bd
 800b060:	0800b415 	.word	0x0800b415
 800b064:	0800b367 	.word	0x0800b367
 800b068:	0800b431 	.word	0x0800b431

0800b06c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	099b      	lsrs	r3, r3, #6
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10f      	bne.n	800b0b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	099b      	lsrs	r3, r3, #6
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
    return;
 800b0ae:	e0d7      	b.n	800b260 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <HAL_SPI_IRQHandler+0x66>
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	09db      	lsrs	r3, r3, #7
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d004      	beq.n	800b0d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	4798      	blx	r3
    return;
 800b0d0:	e0c6      	b.n	800b260 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	095b      	lsrs	r3, r3, #5
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10c      	bne.n	800b0f8 <HAL_SPI_IRQHandler+0x8c>
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	099b      	lsrs	r3, r3, #6
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	0a1b      	lsrs	r3, r3, #8
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 80b4 	beq.w	800b260 <HAL_SPI_IRQHandler+0x1f4>
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	095b      	lsrs	r3, r3, #5
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 80ad 	beq.w	800b260 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	099b      	lsrs	r3, r3, #6
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d023      	beq.n	800b15a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d011      	beq.n	800b142 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b122:	f043 0204 	orr.w	r2, r3, #4
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	e00b      	b.n	800b15a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b142:	2300      	movs	r3, #0
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	693b      	ldr	r3, [r7, #16]
        return;
 800b158:	e082      	b.n	800b260 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	095b      	lsrs	r3, r3, #5
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d014      	beq.n	800b190 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b16a:	f043 0201 	orr.w	r2, r3, #1
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00c      	beq.n	800b1b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1a0:	f043 0208 	orr.w	r2, r3, #8
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60bb      	str	r3, [r7, #8]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	60bb      	str	r3, [r7, #8]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d04f      	beq.n	800b25e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b1cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <HAL_SPI_IRQHandler+0x17e>
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d034      	beq.n	800b254 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 0203 	bic.w	r2, r2, #3
 800b1f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d011      	beq.n	800b226 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b206:	4a18      	ldr	r2, [pc, #96]	@ (800b268 <HAL_SPI_IRQHandler+0x1fc>)
 800b208:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fb fcda 	bl	8006bc8 <HAL_DMA_Abort_IT>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b21e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d016      	beq.n	800b25c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b232:	4a0d      	ldr	r2, [pc, #52]	@ (800b268 <HAL_SPI_IRQHandler+0x1fc>)
 800b234:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fb fcc4 	bl	8006bc8 <HAL_DMA_Abort_IT>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b24a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800b252:	e003      	b.n	800b25c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f827 	bl	800b2a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b25a:	e000      	b.n	800b25e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b25c:	bf00      	nop
    return;
 800b25e:	bf00      	nop
  }
}
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	0800b471 	.word	0x0800b471

0800b26c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2ca:	f7fa fd0f 	bl	8005cec <HAL_GetTick>
 800b2ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2de:	d03c      	beq.n	800b35a <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 0220 	bic.w	r2, r2, #32
 800b2ee:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10d      	bne.n	800b314 <SPI_DMAReceiveCplt+0x58>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b300:	d108      	bne.n	800b314 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f022 0203 	bic.w	r2, r2, #3
 800b310:	605a      	str	r2, [r3, #4]
 800b312:	e007      	b.n	800b324 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 0201 	bic.w	r2, r2, #1
 800b322:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	2164      	movs	r1, #100	@ 0x64
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 f9d5 	bl	800b6d8 <SPI_EndRxTransaction>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2220      	movs	r2, #32
 800b338:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff ffa8 	bl	800b2a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b358:	e002      	b.n	800b360 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff ff86 	bl	800b26c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b372:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b374:	f7fa fcba 	bl	8005cec <HAL_GetTick>
 800b378:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b388:	d030      	beq.n	800b3ec <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 0220 	bic.w	r2, r2, #32
 800b398:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	2164      	movs	r1, #100	@ 0x64
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fa16 	bl	800b7d0 <SPI_EndRxTxTransaction>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3ae:	f043 0220 	orr.w	r2, r3, #32
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0203 	bic.w	r2, r2, #3
 800b3c4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7ff ff5f 	bl	800b2a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b3ea:	e002      	b.n	800b3f2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f7f9 f9af 	bl	8004750 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b404:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff ff3a 	bl	800b280 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7ff ff36 	bl	800b294 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b428:	bf00      	nop
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f022 0203 	bic.w	r2, r2, #3
 800b44c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b452:	f043 0210 	orr.w	r2, r3, #16
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff ff20 	bl	800b2a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b468:	bf00      	nop
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b47c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff ff0b 	bl	800b2a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b492:	bf00      	nop
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
	...

0800b49c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b4ac:	f7fa fc1e 	bl	8005cec <HAL_GetTick>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b4bc:	f7fa fc16 	bl	8005cec <HAL_GetTick>
 800b4c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b4c2:	4b39      	ldr	r3, [pc, #228]	@ (800b5a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	015b      	lsls	r3, r3, #5
 800b4c8:	0d1b      	lsrs	r3, r3, #20
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	fb02 f303 	mul.w	r3, r2, r3
 800b4d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4d2:	e055      	b.n	800b580 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4da:	d051      	beq.n	800b580 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b4dc:	f7fa fc06 	bl	8005cec <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d902      	bls.n	800b4f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d13d      	bne.n	800b56e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b50a:	d111      	bne.n	800b530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b514:	d004      	beq.n	800b520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b51e:	d107      	bne.n	800b530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b52e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b538:	d10f      	bne.n	800b55a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b548:	601a      	str	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e018      	b.n	800b5a0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]
 800b578:	e002      	b.n	800b580 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689a      	ldr	r2, [r3, #8]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4013      	ands	r3, r2
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	bf0c      	ite	eq
 800b590:	2301      	moveq	r3, #1
 800b592:	2300      	movne	r3, #0
 800b594:	b2db      	uxtb	r3, r3
 800b596:	461a      	mov	r2, r3
 800b598:	79fb      	ldrb	r3, [r7, #7]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d19a      	bne.n	800b4d4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3720      	adds	r7, #32
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000000 	.word	0x20000000

0800b5ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	@ 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b5be:	f7fa fb95 	bl	8005cec <HAL_GetTick>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b5ce:	f7fa fb8d 	bl	8005cec <HAL_GetTick>
 800b5d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	330c      	adds	r3, #12
 800b5da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b5dc:	4b3d      	ldr	r3, [pc, #244]	@ (800b6d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	00da      	lsls	r2, r3, #3
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	0d1b      	lsrs	r3, r3, #20
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ee:	fb02 f303 	mul.w	r3, r2, r3
 800b5f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b5f4:	e061      	b.n	800b6ba <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b5fc:	d107      	bne.n	800b60e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d104      	bne.n	800b60e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d051      	beq.n	800b6ba <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b616:	f7fa fb69 	bl	8005cec <HAL_GetTick>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b622:	429a      	cmp	r2, r3
 800b624:	d902      	bls.n	800b62c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d13d      	bne.n	800b6a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685a      	ldr	r2, [r3, #4]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b63a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b644:	d111      	bne.n	800b66a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b64e:	d004      	beq.n	800b65a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b658:	d107      	bne.n	800b66a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b672:	d10f      	bne.n	800b694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e011      	b.n	800b6cc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d102      	bne.n	800b6b4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6b2:	e002      	b.n	800b6ba <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	689a      	ldr	r2, [r3, #8]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d195      	bne.n	800b5f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3728      	adds	r7, #40	@ 0x28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20000000 	.word	0x20000000

0800b6d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b6ec:	d111      	bne.n	800b712 <SPI_EndRxTransaction+0x3a>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6f6:	d004      	beq.n	800b702 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b700:	d107      	bne.n	800b712 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b710:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b71a:	d112      	bne.n	800b742 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	2180      	movs	r1, #128	@ 0x80
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff feb8 	bl	800b49c <SPI_WaitFlagStateUntilTimeout>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d021      	beq.n	800b776 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b736:	f043 0220 	orr.w	r2, r3, #32
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e03d      	b.n	800b7be <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b742:	4b21      	ldr	r3, [pc, #132]	@ (800b7c8 <SPI_EndRxTransaction+0xf0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a21      	ldr	r2, [pc, #132]	@ (800b7cc <SPI_EndRxTransaction+0xf4>)
 800b748:	fba2 2303 	umull	r2, r3, r2, r3
 800b74c:	0d5b      	lsrs	r3, r3, #21
 800b74e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b752:	fb02 f303 	mul.w	r3, r2, r3
 800b756:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	3b01      	subs	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b76e:	2b80      	cmp	r3, #128	@ 0x80
 800b770:	d0f2      	beq.n	800b758 <SPI_EndRxTransaction+0x80>
 800b772:	e000      	b.n	800b776 <SPI_EndRxTransaction+0x9e>
        break;
 800b774:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b77e:	d11d      	bne.n	800b7bc <SPI_EndRxTransaction+0xe4>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b788:	d004      	beq.n	800b794 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b792:	d113      	bne.n	800b7bc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f7ff ff03 	bl	800b5ac <SPI_WaitFifoStateUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7b0:	f043 0220 	orr.w	r2, r3, #32
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e000      	b.n	800b7be <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000000 	.word	0x20000000
 800b7cc:	165e9f81 	.word	0x165e9f81

0800b7d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff fedf 	bl	800b5ac <SPI_WaitFifoStateUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d007      	beq.n	800b804 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7f8:	f043 0220 	orr.w	r2, r3, #32
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e046      	b.n	800b892 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b804:	4b25      	ldr	r3, [pc, #148]	@ (800b89c <SPI_EndRxTxTransaction+0xcc>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a25      	ldr	r2, [pc, #148]	@ (800b8a0 <SPI_EndRxTxTransaction+0xd0>)
 800b80a:	fba2 2303 	umull	r2, r3, r2, r3
 800b80e:	0d5b      	lsrs	r3, r3, #21
 800b810:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b814:	fb02 f303 	mul.w	r3, r2, r3
 800b818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b822:	d112      	bne.n	800b84a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	2180      	movs	r1, #128	@ 0x80
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fe34 	bl	800b49c <SPI_WaitFlagStateUntilTimeout>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d016      	beq.n	800b868 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b83e:	f043 0220 	orr.w	r2, r3, #32
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e023      	b.n	800b892 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3b01      	subs	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b860:	2b80      	cmp	r3, #128	@ 0x80
 800b862:	d0f2      	beq.n	800b84a <SPI_EndRxTxTransaction+0x7a>
 800b864:	e000      	b.n	800b868 <SPI_EndRxTxTransaction+0x98>
        break;
 800b866:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2200      	movs	r2, #0
 800b870:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fe99 	bl	800b5ac <SPI_WaitFifoStateUntilTimeout>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d007      	beq.n	800b890 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b884:	f043 0220 	orr.w	r2, r3, #32
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e000      	b.n	800b892 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20000000 	.word	0x20000000
 800b8a0:	165e9f81 	.word	0x165e9f81

0800b8a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e049      	b.n	800b94a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7f9 fe2c 	bl	8005528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f000 fb6e 	bl	800bfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e049      	b.n	800b9f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f841 	bl	800ba00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2202      	movs	r2, #2
 800b982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	3304      	adds	r3, #4
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f000 fb17 	bl	800bfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d109      	bne.n	800ba38 <HAL_TIM_PWM_Start+0x24>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	bf14      	ite	ne
 800ba30:	2301      	movne	r3, #1
 800ba32:	2300      	moveq	r3, #0
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	e03c      	b.n	800bab2 <HAL_TIM_PWM_Start+0x9e>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d109      	bne.n	800ba52 <HAL_TIM_PWM_Start+0x3e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	bf14      	ite	ne
 800ba4a:	2301      	movne	r3, #1
 800ba4c:	2300      	moveq	r3, #0
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	e02f      	b.n	800bab2 <HAL_TIM_PWM_Start+0x9e>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b08      	cmp	r3, #8
 800ba56:	d109      	bne.n	800ba6c <HAL_TIM_PWM_Start+0x58>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	bf14      	ite	ne
 800ba64:	2301      	movne	r3, #1
 800ba66:	2300      	moveq	r3, #0
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	e022      	b.n	800bab2 <HAL_TIM_PWM_Start+0x9e>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b0c      	cmp	r3, #12
 800ba70:	d109      	bne.n	800ba86 <HAL_TIM_PWM_Start+0x72>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	bf14      	ite	ne
 800ba7e:	2301      	movne	r3, #1
 800ba80:	2300      	moveq	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	e015      	b.n	800bab2 <HAL_TIM_PWM_Start+0x9e>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b10      	cmp	r3, #16
 800ba8a:	d109      	bne.n	800baa0 <HAL_TIM_PWM_Start+0x8c>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	bf14      	ite	ne
 800ba98:	2301      	movne	r3, #1
 800ba9a:	2300      	moveq	r3, #0
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	e008      	b.n	800bab2 <HAL_TIM_PWM_Start+0x9e>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	bf14      	ite	ne
 800baac:	2301      	movne	r3, #1
 800baae:	2300      	moveq	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e092      	b.n	800bbe0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <HAL_TIM_PWM_Start+0xb6>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bac8:	e023      	b.n	800bb12 <HAL_TIM_PWM_Start+0xfe>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d104      	bne.n	800bada <HAL_TIM_PWM_Start+0xc6>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bad8:	e01b      	b.n	800bb12 <HAL_TIM_PWM_Start+0xfe>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b08      	cmp	r3, #8
 800bade:	d104      	bne.n	800baea <HAL_TIM_PWM_Start+0xd6>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bae8:	e013      	b.n	800bb12 <HAL_TIM_PWM_Start+0xfe>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b0c      	cmp	r3, #12
 800baee:	d104      	bne.n	800bafa <HAL_TIM_PWM_Start+0xe6>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800baf8:	e00b      	b.n	800bb12 <HAL_TIM_PWM_Start+0xfe>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d104      	bne.n	800bb0a <HAL_TIM_PWM_Start+0xf6>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb08:	e003      	b.n	800bb12 <HAL_TIM_PWM_Start+0xfe>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2201      	movs	r2, #1
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 fdf0 	bl	800c700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a30      	ldr	r2, [pc, #192]	@ (800bbe8 <HAL_TIM_PWM_Start+0x1d4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d004      	beq.n	800bb34 <HAL_TIM_PWM_Start+0x120>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a2f      	ldr	r2, [pc, #188]	@ (800bbec <HAL_TIM_PWM_Start+0x1d8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d101      	bne.n	800bb38 <HAL_TIM_PWM_Start+0x124>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <HAL_TIM_PWM_Start+0x126>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d007      	beq.n	800bb4e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a25      	ldr	r2, [pc, #148]	@ (800bbe8 <HAL_TIM_PWM_Start+0x1d4>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d022      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb60:	d01d      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a22      	ldr	r2, [pc, #136]	@ (800bbf0 <HAL_TIM_PWM_Start+0x1dc>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d018      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a20      	ldr	r2, [pc, #128]	@ (800bbf4 <HAL_TIM_PWM_Start+0x1e0>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d013      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a1f      	ldr	r2, [pc, #124]	@ (800bbf8 <HAL_TIM_PWM_Start+0x1e4>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00e      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a19      	ldr	r2, [pc, #100]	@ (800bbec <HAL_TIM_PWM_Start+0x1d8>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d009      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a1b      	ldr	r2, [pc, #108]	@ (800bbfc <HAL_TIM_PWM_Start+0x1e8>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d004      	beq.n	800bb9e <HAL_TIM_PWM_Start+0x18a>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a19      	ldr	r2, [pc, #100]	@ (800bc00 <HAL_TIM_PWM_Start+0x1ec>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d115      	bne.n	800bbca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	4b17      	ldr	r3, [pc, #92]	@ (800bc04 <HAL_TIM_PWM_Start+0x1f0>)
 800bba6:	4013      	ands	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b06      	cmp	r3, #6
 800bbae:	d015      	beq.n	800bbdc <HAL_TIM_PWM_Start+0x1c8>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbb6:	d011      	beq.n	800bbdc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0201 	orr.w	r2, r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc8:	e008      	b.n	800bbdc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f042 0201 	orr.w	r2, r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e000      	b.n	800bbde <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	40010000 	.word	0x40010000
 800bbec:	40010400 	.word	0x40010400
 800bbf0:	40000400 	.word	0x40000400
 800bbf4:	40000800 	.word	0x40000800
 800bbf8:	40000c00 	.word	0x40000c00
 800bbfc:	40014000 	.word	0x40014000
 800bc00:	40001800 	.word	0x40001800
 800bc04:	00010007 	.word	0x00010007

0800bc08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d101      	bne.n	800bc26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc22:	2302      	movs	r3, #2
 800bc24:	e0ff      	b.n	800be26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b14      	cmp	r3, #20
 800bc32:	f200 80f0 	bhi.w	800be16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc36:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc91 	.word	0x0800bc91
 800bc40:	0800be17 	.word	0x0800be17
 800bc44:	0800be17 	.word	0x0800be17
 800bc48:	0800be17 	.word	0x0800be17
 800bc4c:	0800bcd1 	.word	0x0800bcd1
 800bc50:	0800be17 	.word	0x0800be17
 800bc54:	0800be17 	.word	0x0800be17
 800bc58:	0800be17 	.word	0x0800be17
 800bc5c:	0800bd13 	.word	0x0800bd13
 800bc60:	0800be17 	.word	0x0800be17
 800bc64:	0800be17 	.word	0x0800be17
 800bc68:	0800be17 	.word	0x0800be17
 800bc6c:	0800bd53 	.word	0x0800bd53
 800bc70:	0800be17 	.word	0x0800be17
 800bc74:	0800be17 	.word	0x0800be17
 800bc78:	0800be17 	.word	0x0800be17
 800bc7c:	0800bd95 	.word	0x0800bd95
 800bc80:	0800be17 	.word	0x0800be17
 800bc84:	0800be17 	.word	0x0800be17
 800bc88:	0800be17 	.word	0x0800be17
 800bc8c:	0800bdd5 	.word	0x0800bdd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fa3a 	bl	800c110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0208 	orr.w	r2, r2, #8
 800bcaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	699a      	ldr	r2, [r3, #24]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0204 	bic.w	r2, r2, #4
 800bcba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6999      	ldr	r1, [r3, #24]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	691a      	ldr	r2, [r3, #16]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	619a      	str	r2, [r3, #24]
      break;
 800bcce:	e0a5      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 fa8c 	bl	800c1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699a      	ldr	r2, [r3, #24]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	699a      	ldr	r2, [r3, #24]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6999      	ldr	r1, [r3, #24]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	021a      	lsls	r2, r3, #8
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	619a      	str	r2, [r3, #24]
      break;
 800bd10:	e084      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 fae3 	bl	800c2e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69da      	ldr	r2, [r3, #28]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f042 0208 	orr.w	r2, r2, #8
 800bd2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	69da      	ldr	r2, [r3, #28]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f022 0204 	bic.w	r2, r2, #4
 800bd3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69d9      	ldr	r1, [r3, #28]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	61da      	str	r2, [r3, #28]
      break;
 800bd50:	e064      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 fb39 	bl	800c3d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	69da      	ldr	r2, [r3, #28]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	69da      	ldr	r2, [r3, #28]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	69d9      	ldr	r1, [r3, #28]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	021a      	lsls	r2, r3, #8
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	61da      	str	r2, [r3, #28]
      break;
 800bd92:	e043      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 fb70 	bl	800c480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0208 	orr.w	r2, r2, #8
 800bdae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0204 	bic.w	r2, r2, #4
 800bdbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	691a      	ldr	r2, [r3, #16]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bdd2:	e023      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 fba2 	bl	800c524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	021a      	lsls	r2, r3, #8
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	430a      	orrs	r2, r1
 800be12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800be14:	e002      	b.n	800be1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	75fb      	strb	r3, [r7, #23]
      break;
 800be1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop

0800be30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be44:	2b01      	cmp	r3, #1
 800be46:	d101      	bne.n	800be4c <HAL_TIM_ConfigClockSource+0x1c>
 800be48:	2302      	movs	r3, #2
 800be4a:	e0b4      	b.n	800bfb6 <HAL_TIM_ConfigClockSource+0x186>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2202      	movs	r2, #2
 800be58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	4b56      	ldr	r3, [pc, #344]	@ (800bfc0 <HAL_TIM_ConfigClockSource+0x190>)
 800be68:	4013      	ands	r3, r2
 800be6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be84:	d03e      	beq.n	800bf04 <HAL_TIM_ConfigClockSource+0xd4>
 800be86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be8a:	f200 8087 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800be8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be92:	f000 8086 	beq.w	800bfa2 <HAL_TIM_ConfigClockSource+0x172>
 800be96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be9a:	d87f      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800be9c:	2b70      	cmp	r3, #112	@ 0x70
 800be9e:	d01a      	beq.n	800bed6 <HAL_TIM_ConfigClockSource+0xa6>
 800bea0:	2b70      	cmp	r3, #112	@ 0x70
 800bea2:	d87b      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800bea4:	2b60      	cmp	r3, #96	@ 0x60
 800bea6:	d050      	beq.n	800bf4a <HAL_TIM_ConfigClockSource+0x11a>
 800bea8:	2b60      	cmp	r3, #96	@ 0x60
 800beaa:	d877      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800beac:	2b50      	cmp	r3, #80	@ 0x50
 800beae:	d03c      	beq.n	800bf2a <HAL_TIM_ConfigClockSource+0xfa>
 800beb0:	2b50      	cmp	r3, #80	@ 0x50
 800beb2:	d873      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800beb4:	2b40      	cmp	r3, #64	@ 0x40
 800beb6:	d058      	beq.n	800bf6a <HAL_TIM_ConfigClockSource+0x13a>
 800beb8:	2b40      	cmp	r3, #64	@ 0x40
 800beba:	d86f      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800bebc:	2b30      	cmp	r3, #48	@ 0x30
 800bebe:	d064      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x15a>
 800bec0:	2b30      	cmp	r3, #48	@ 0x30
 800bec2:	d86b      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d060      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x15a>
 800bec8:	2b20      	cmp	r3, #32
 800beca:	d867      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
 800becc:	2b00      	cmp	r3, #0
 800bece:	d05c      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x15a>
 800bed0:	2b10      	cmp	r3, #16
 800bed2:	d05a      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x15a>
 800bed4:	e062      	b.n	800bf9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bee6:	f000 fbeb 	bl	800c6c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	609a      	str	r2, [r3, #8]
      break;
 800bf02:	e04f      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf14:	f000 fbd4 	bl	800c6c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf26:	609a      	str	r2, [r3, #8]
      break;
 800bf28:	e03c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf36:	461a      	mov	r2, r3
 800bf38:	f000 fb48 	bl	800c5cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2150      	movs	r1, #80	@ 0x50
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 fba1 	bl	800c68a <TIM_ITRx_SetConfig>
      break;
 800bf48:	e02c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf56:	461a      	mov	r2, r3
 800bf58:	f000 fb67 	bl	800c62a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2160      	movs	r1, #96	@ 0x60
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fb91 	bl	800c68a <TIM_ITRx_SetConfig>
      break;
 800bf68:	e01c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf76:	461a      	mov	r2, r3
 800bf78:	f000 fb28 	bl	800c5cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2140      	movs	r1, #64	@ 0x40
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fb81 	bl	800c68a <TIM_ITRx_SetConfig>
      break;
 800bf88:	e00c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f000 fb78 	bl	800c68a <TIM_ITRx_SetConfig>
      break;
 800bf9a:	e003      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa0:	e000      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bfa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	fffeff88 	.word	0xfffeff88

0800bfc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a43      	ldr	r2, [pc, #268]	@ (800c0e4 <TIM_Base_SetConfig+0x120>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d013      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe2:	d00f      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a40      	ldr	r2, [pc, #256]	@ (800c0e8 <TIM_Base_SetConfig+0x124>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d00b      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a3f      	ldr	r2, [pc, #252]	@ (800c0ec <TIM_Base_SetConfig+0x128>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d007      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a3e      	ldr	r2, [pc, #248]	@ (800c0f0 <TIM_Base_SetConfig+0x12c>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d003      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a3d      	ldr	r2, [pc, #244]	@ (800c0f4 <TIM_Base_SetConfig+0x130>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d108      	bne.n	800c016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a32      	ldr	r2, [pc, #200]	@ (800c0e4 <TIM_Base_SetConfig+0x120>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d02b      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c024:	d027      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a2f      	ldr	r2, [pc, #188]	@ (800c0e8 <TIM_Base_SetConfig+0x124>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d023      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a2e      	ldr	r2, [pc, #184]	@ (800c0ec <TIM_Base_SetConfig+0x128>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d01f      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a2d      	ldr	r2, [pc, #180]	@ (800c0f0 <TIM_Base_SetConfig+0x12c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d01b      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a2c      	ldr	r2, [pc, #176]	@ (800c0f4 <TIM_Base_SetConfig+0x130>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d017      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a2b      	ldr	r2, [pc, #172]	@ (800c0f8 <TIM_Base_SetConfig+0x134>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d013      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a2a      	ldr	r2, [pc, #168]	@ (800c0fc <TIM_Base_SetConfig+0x138>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d00f      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a29      	ldr	r2, [pc, #164]	@ (800c100 <TIM_Base_SetConfig+0x13c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d00b      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a28      	ldr	r2, [pc, #160]	@ (800c104 <TIM_Base_SetConfig+0x140>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d007      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a27      	ldr	r2, [pc, #156]	@ (800c108 <TIM_Base_SetConfig+0x144>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d003      	beq.n	800c076 <TIM_Base_SetConfig+0xb2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a26      	ldr	r2, [pc, #152]	@ (800c10c <TIM_Base_SetConfig+0x148>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d108      	bne.n	800c088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	4313      	orrs	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	4313      	orrs	r3, r2
 800c094:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	689a      	ldr	r2, [r3, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c0e4 <TIM_Base_SetConfig+0x120>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d003      	beq.n	800c0b6 <TIM_Base_SetConfig+0xf2>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a10      	ldr	r2, [pc, #64]	@ (800c0f4 <TIM_Base_SetConfig+0x130>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d103      	bne.n	800c0be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	691a      	ldr	r2, [r3, #16]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f043 0204 	orr.w	r2, r3, #4
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	601a      	str	r2, [r3, #0]
}
 800c0d6:	bf00      	nop
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40000400 	.word	0x40000400
 800c0ec:	40000800 	.word	0x40000800
 800c0f0:	40000c00 	.word	0x40000c00
 800c0f4:	40010400 	.word	0x40010400
 800c0f8:	40014000 	.word	0x40014000
 800c0fc:	40014400 	.word	0x40014400
 800c100:	40014800 	.word	0x40014800
 800c104:	40001800 	.word	0x40001800
 800c108:	40001c00 	.word	0x40001c00
 800c10c:	40002000 	.word	0x40002000

0800c110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c110:	b480      	push	{r7}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a1b      	ldr	r3, [r3, #32]
 800c11e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	f023 0201 	bic.w	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	4b2b      	ldr	r3, [pc, #172]	@ (800c1e8 <TIM_OC1_SetConfig+0xd8>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f023 0302 	bic.w	r3, r3, #2
 800c158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a21      	ldr	r2, [pc, #132]	@ (800c1ec <TIM_OC1_SetConfig+0xdc>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d003      	beq.n	800c174 <TIM_OC1_SetConfig+0x64>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a20      	ldr	r2, [pc, #128]	@ (800c1f0 <TIM_OC1_SetConfig+0xe0>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d10c      	bne.n	800c18e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f023 0308 	bic.w	r3, r3, #8
 800c17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f023 0304 	bic.w	r3, r3, #4
 800c18c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a16      	ldr	r2, [pc, #88]	@ (800c1ec <TIM_OC1_SetConfig+0xdc>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_OC1_SetConfig+0x8e>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a15      	ldr	r2, [pc, #84]	@ (800c1f0 <TIM_OC1_SetConfig+0xe0>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d111      	bne.n	800c1c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	621a      	str	r2, [r3, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	fffeff8f 	.word	0xfffeff8f
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40010400 	.word	0x40010400

0800c1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	f023 0210 	bic.w	r2, r3, #16
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d8 <TIM_OC2_SetConfig+0xe4>)
 800c220:	4013      	ands	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4313      	orrs	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f023 0320 	bic.w	r3, r3, #32
 800c23e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	011b      	lsls	r3, r3, #4
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	4313      	orrs	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a23      	ldr	r2, [pc, #140]	@ (800c2dc <TIM_OC2_SetConfig+0xe8>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_OC2_SetConfig+0x68>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a22      	ldr	r2, [pc, #136]	@ (800c2e0 <TIM_OC2_SetConfig+0xec>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d10d      	bne.n	800c278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a18      	ldr	r2, [pc, #96]	@ (800c2dc <TIM_OC2_SetConfig+0xe8>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_OC2_SetConfig+0x94>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a17      	ldr	r2, [pc, #92]	@ (800c2e0 <TIM_OC2_SetConfig+0xec>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d113      	bne.n	800c2b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c28e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	621a      	str	r2, [r3, #32]
}
 800c2ca:	bf00      	nop
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	feff8fff 	.word	0xfeff8fff
 800c2dc:	40010000 	.word	0x40010000
 800c2e0:	40010400 	.word	0x40010400

0800c2e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	4b2d      	ldr	r3, [pc, #180]	@ (800c3c4 <TIM_OC3_SetConfig+0xe0>)
 800c310:	4013      	ands	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f023 0303 	bic.w	r3, r3, #3
 800c31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	4313      	orrs	r3, r2
 800c338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a22      	ldr	r2, [pc, #136]	@ (800c3c8 <TIM_OC3_SetConfig+0xe4>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d003      	beq.n	800c34a <TIM_OC3_SetConfig+0x66>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a21      	ldr	r2, [pc, #132]	@ (800c3cc <TIM_OC3_SetConfig+0xe8>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d10d      	bne.n	800c366 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	021b      	lsls	r3, r3, #8
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a17      	ldr	r2, [pc, #92]	@ (800c3c8 <TIM_OC3_SetConfig+0xe4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d003      	beq.n	800c376 <TIM_OC3_SetConfig+0x92>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a16      	ldr	r2, [pc, #88]	@ (800c3cc <TIM_OC3_SetConfig+0xe8>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d113      	bne.n	800c39e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c37c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	011b      	lsls	r3, r3, #4
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	4313      	orrs	r3, r2
 800c390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	011b      	lsls	r3, r3, #4
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	621a      	str	r2, [r3, #32]
}
 800c3b8:	bf00      	nop
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	fffeff8f 	.word	0xfffeff8f
 800c3c8:	40010000 	.word	0x40010000
 800c3cc:	40010400 	.word	0x40010400

0800c3d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6a1b      	ldr	r3, [r3, #32]
 800c3e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	69db      	ldr	r3, [r3, #28]
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c474 <TIM_OC4_SetConfig+0xa4>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	021b      	lsls	r3, r3, #8
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	4313      	orrs	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c41a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	031b      	lsls	r3, r3, #12
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	4313      	orrs	r3, r2
 800c426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a13      	ldr	r2, [pc, #76]	@ (800c478 <TIM_OC4_SetConfig+0xa8>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d003      	beq.n	800c438 <TIM_OC4_SetConfig+0x68>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a12      	ldr	r2, [pc, #72]	@ (800c47c <TIM_OC4_SetConfig+0xac>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d109      	bne.n	800c44c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	019b      	lsls	r3, r3, #6
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	4313      	orrs	r3, r2
 800c44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	621a      	str	r2, [r3, #32]
}
 800c466:	bf00      	nop
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	feff8fff 	.word	0xfeff8fff
 800c478:	40010000 	.word	0x40010000
 800c47c:	40010400 	.word	0x40010400

0800c480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c518 <TIM_OC5_SetConfig+0x98>)
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c4c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	041b      	lsls	r3, r3, #16
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a12      	ldr	r2, [pc, #72]	@ (800c51c <TIM_OC5_SetConfig+0x9c>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d003      	beq.n	800c4de <TIM_OC5_SetConfig+0x5e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a11      	ldr	r2, [pc, #68]	@ (800c520 <TIM_OC5_SetConfig+0xa0>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d109      	bne.n	800c4f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	621a      	str	r2, [r3, #32]
}
 800c50c:	bf00      	nop
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	fffeff8f 	.word	0xfffeff8f
 800c51c:	40010000 	.word	0x40010000
 800c520:	40010400 	.word	0x40010400

0800c524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c0 <TIM_OC6_SetConfig+0x9c>)
 800c550:	4013      	ands	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	051b      	lsls	r3, r3, #20
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	4313      	orrs	r3, r2
 800c572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a13      	ldr	r2, [pc, #76]	@ (800c5c4 <TIM_OC6_SetConfig+0xa0>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d003      	beq.n	800c584 <TIM_OC6_SetConfig+0x60>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a12      	ldr	r2, [pc, #72]	@ (800c5c8 <TIM_OC6_SetConfig+0xa4>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d109      	bne.n	800c598 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c58a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	029b      	lsls	r3, r3, #10
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	4313      	orrs	r3, r2
 800c596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	621a      	str	r2, [r3, #32]
}
 800c5b2:	bf00      	nop
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	feff8fff 	.word	0xfeff8fff
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40010400 	.word	0x40010400

0800c5cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f023 0201 	bic.w	r2, r3, #1
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f023 030a 	bic.w	r3, r3, #10
 800c608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	4313      	orrs	r3, r2
 800c610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	621a      	str	r2, [r3, #32]
}
 800c61e:	bf00      	nop
 800c620:	371c      	adds	r7, #28
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b087      	sub	sp, #28
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	f023 0210 	bic.w	r2, r3, #16
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	031b      	lsls	r3, r3, #12
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c666:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	011b      	lsls	r3, r3, #4
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	621a      	str	r2, [r3, #32]
}
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b085      	sub	sp, #20
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	f043 0307 	orr.w	r3, r3, #7
 800c6ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	609a      	str	r2, [r3, #8]
}
 800c6b4:	bf00      	nop
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	021a      	lsls	r2, r3, #8
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	609a      	str	r2, [r3, #8]
}
 800c6f4:	bf00      	nop
 800c6f6:	371c      	adds	r7, #28
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f003 031f 	and.w	r3, r3, #31
 800c712:	2201      	movs	r2, #1
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	43db      	mvns	r3, r3
 800c722:	401a      	ands	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6a1a      	ldr	r2, [r3, #32]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f003 031f 	and.w	r3, r3, #31
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	fa01 f303 	lsl.w	r3, r1, r3
 800c738:	431a      	orrs	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	621a      	str	r2, [r3, #32]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
	...

0800c74c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c760:	2302      	movs	r3, #2
 800c762:	e06d      	b.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a30      	ldr	r2, [pc, #192]	@ (800c84c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d004      	beq.n	800c798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a2f      	ldr	r2, [pc, #188]	@ (800c850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d108      	bne.n	800c7aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c79e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a20      	ldr	r2, [pc, #128]	@ (800c84c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d022      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7d6:	d01d      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d018      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a1c      	ldr	r2, [pc, #112]	@ (800c858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d013      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1a      	ldr	r2, [pc, #104]	@ (800c85c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00e      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a15      	ldr	r2, [pc, #84]	@ (800c850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d009      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a16      	ldr	r2, [pc, #88]	@ (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d004      	beq.n	800c814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a15      	ldr	r2, [pc, #84]	@ (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d10c      	bne.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c81a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	4313      	orrs	r3, r2
 800c824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	40010000 	.word	0x40010000
 800c850:	40010400 	.word	0x40010400
 800c854:	40000400 	.word	0x40000400
 800c858:	40000800 	.word	0x40000800
 800c85c:	40000c00 	.word	0x40000c00
 800c860:	40014000 	.word	0x40014000
 800c864:	40001800 	.word	0x40001800

0800c868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	e040      	b.n	800c8fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f8 fef6 	bl	800567c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2224      	movs	r2, #36	@ 0x24
 800c894:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0201 	bic.w	r2, r2, #1
 800c8a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fe50 	bl	800d554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fbe9 	bl	800d08c <UART_SetConfig>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d101      	bne.n	800c8c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e01b      	b.n	800c8fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c8d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689a      	ldr	r2, [r3, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c8e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 0201 	orr.w	r2, r2, #1
 800c8f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fecf 	bl	800d698 <UART_CheckIdleState>
 800c8fa:	4603      	mov	r3, r0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b09a      	sub	sp, #104	@ 0x68
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c914:	e853 3f00 	ldrex	r3, [r3]
 800c918:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c91c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c920:	667b      	str	r3, [r7, #100]	@ 0x64
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c92a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c92c:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c932:	e841 2300 	strex	r3, r2, [r1]
 800c936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e6      	bne.n	800c90c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3308      	adds	r3, #8
 800c944:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c948:	e853 3f00 	ldrex	r3, [r3]
 800c94c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c950:	f023 0301 	bic.w	r3, r3, #1
 800c954:	663b      	str	r3, [r7, #96]	@ 0x60
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3308      	adds	r3, #8
 800c95c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c95e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c962:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c966:	e841 2300 	strex	r3, r2, [r1]
 800c96a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1e5      	bne.n	800c93e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c976:	2b01      	cmp	r3, #1
 800c978:	d118      	bne.n	800c9ac <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	e853 3f00 	ldrex	r3, [r3]
 800c986:	61fb      	str	r3, [r7, #28]
   return(result);
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	f023 0310 	bic.w	r3, r3, #16
 800c98e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c99a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c99e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9a0:	e841 2300 	strex	r3, r2, [r1]
 800c9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1e6      	bne.n	800c97a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b6:	2b40      	cmp	r3, #64	@ 0x40
 800c9b8:	d137      	bne.n	800ca2a <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3308      	adds	r3, #8
 800c9c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	e853 3f00 	ldrex	r3, [r3]
 800c9c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9da:	61ba      	str	r2, [r7, #24]
 800c9dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9de:	6979      	ldr	r1, [r7, #20]
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	e841 2300 	strex	r3, r2, [r1]
 800c9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e5      	bne.n	800c9ba <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d019      	beq.n	800ca2a <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fa f870 	bl	8006ae8 <HAL_DMA_Abort>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00d      	beq.n	800ca2a <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fa fa84 	bl	8006f20 <HAL_DMA_GetError>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	d105      	bne.n	800ca2a <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2210      	movs	r2, #16
 800ca22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e017      	b.n	800ca5a <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	220f      	movs	r2, #15
 800ca38:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	699a      	ldr	r2, [r3, #24]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f042 0208 	orr.w	r2, r2, #8
 800ca48:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3768      	adds	r7, #104	@ 0x68
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b0ba      	sub	sp, #232	@ 0xe8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ca8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ca92:	4013      	ands	r3, r2
 800ca94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ca98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d115      	bne.n	800cacc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800caa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caa4:	f003 0320 	and.w	r3, r3, #32
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00f      	beq.n	800cacc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800caac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d009      	beq.n	800cacc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 82b1 	beq.w	800d024 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	4798      	blx	r3
      }
      return;
 800caca:	e2ab      	b.n	800d024 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cacc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 8117 	beq.w	800cd04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cae6:	4b85      	ldr	r3, [pc, #532]	@ (800ccfc <HAL_UART_IRQHandler+0x298>)
 800cae8:	4013      	ands	r3, r2
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 810a 	beq.w	800cd04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800caf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d011      	beq.n	800cb20 <HAL_UART_IRQHandler+0xbc>
 800cafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb16:	f043 0201 	orr.w	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb24:	f003 0302 	and.w	r3, r3, #2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d011      	beq.n	800cb50 <HAL_UART_IRQHandler+0xec>
 800cb2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00b      	beq.n	800cb50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb46:	f043 0204 	orr.w	r2, r3, #4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb54:	f003 0304 	and.w	r3, r3, #4
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d011      	beq.n	800cb80 <HAL_UART_IRQHandler+0x11c>
 800cb5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00b      	beq.n	800cb80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2204      	movs	r2, #4
 800cb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb76:	f043 0202 	orr.w	r2, r3, #2
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb84:	f003 0308 	and.w	r3, r3, #8
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d017      	beq.n	800cbbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb90:	f003 0320 	and.w	r3, r3, #32
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d105      	bne.n	800cba4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cb98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00b      	beq.n	800cbbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2208      	movs	r2, #8
 800cbaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbb2:	f043 0208 	orr.w	r2, r3, #8
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cbbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d012      	beq.n	800cbee <HAL_UART_IRQHandler+0x18a>
 800cbc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00c      	beq.n	800cbee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cbdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbe4:	f043 0220 	orr.w	r2, r3, #32
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 8217 	beq.w	800d028 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbfe:	f003 0320 	and.w	r3, r3, #32
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cc06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d007      	beq.n	800cc22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc36:	2b40      	cmp	r3, #64	@ 0x40
 800cc38:	d005      	beq.n	800cc46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cc3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04f      	beq.n	800cce6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 feb0 	bl	800d9ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc56:	2b40      	cmp	r3, #64	@ 0x40
 800cc58:	d141      	bne.n	800ccde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc68:	e853 3f00 	ldrex	r3, [r3]
 800cc6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cc70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3308      	adds	r3, #8
 800cc82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cc86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cc92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc96:	e841 2300 	strex	r3, r2, [r1]
 800cc9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cc9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1d9      	bne.n	800cc5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d013      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccb2:	4a13      	ldr	r2, [pc, #76]	@ (800cd00 <HAL_UART_IRQHandler+0x29c>)
 800ccb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7f9 ff84 	bl	8006bc8 <HAL_DMA_Abort_IT>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d017      	beq.n	800ccf6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd4:	e00f      	b.n	800ccf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f9ce 	bl	800d078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccdc:	e00b      	b.n	800ccf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f9ca 	bl	800d078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce4:	e007      	b.n	800ccf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9c6 	bl	800d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ccf4:	e198      	b.n	800d028 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccf6:	bf00      	nop
    return;
 800ccf8:	e196      	b.n	800d028 <HAL_UART_IRQHandler+0x5c4>
 800ccfa:	bf00      	nop
 800ccfc:	04000120 	.word	0x04000120
 800cd00:	0800dcc3 	.word	0x0800dcc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	f040 8166 	bne.w	800cfda <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd12:	f003 0310 	and.w	r3, r3, #16
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 815f 	beq.w	800cfda <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd20:	f003 0310 	and.w	r3, r3, #16
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8158 	beq.w	800cfda <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2210      	movs	r2, #16
 800cd30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd3c:	2b40      	cmp	r3, #64	@ 0x40
 800cd3e:	f040 80d0 	bne.w	800cee2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cd4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 80ab 	beq.w	800ceae <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd62:	429a      	cmp	r2, r3
 800cd64:	f080 80a3 	bcs.w	800ceae <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd7c:	f000 8086 	beq.w	800ce8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cd8c:	e853 3f00 	ldrex	r3, [r3]
 800cd90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cd94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cdaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cdb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cdc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1da      	bne.n	800cd80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3308      	adds	r3, #8
 800cdd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdd4:	e853 3f00 	ldrex	r3, [r3]
 800cdd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cdda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cddc:	f023 0301 	bic.w	r3, r3, #1
 800cde0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3308      	adds	r3, #8
 800cdea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cdee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cdf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cdf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ce00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e1      	bne.n	800cdca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ce16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3308      	adds	r3, #8
 800ce26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ce2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ce2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ce30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ce32:	e841 2300 	strex	r3, r2, [r1]
 800ce36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ce38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e3      	bne.n	800ce06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce54:	e853 3f00 	ldrex	r3, [r3]
 800ce58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ce5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce5c:	f023 0310 	bic.w	r3, r3, #16
 800ce60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ce74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e4      	bne.n	800ce4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7f9 fe2e 	bl	8006ae8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f7 fc0c 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ceac:	e0be      	b.n	800d02c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ceb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	f040 80b7 	bne.w	800d02c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cec2:	69db      	ldr	r3, [r3, #28]
 800cec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cec8:	f040 80b0 	bne.w	800d02c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ced8:	4619      	mov	r1, r3
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7f7 fbf2 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
      return;
 800cee0:	e0a4      	b.n	800d02c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 8096 	beq.w	800d030 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800cf04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 8091 	beq.w	800d030 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cf30:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e4      	bne.n	800cf0e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3308      	adds	r3, #8
 800cf4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	623b      	str	r3, [r7, #32]
   return(result);
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	f023 0301 	bic.w	r3, r3, #1
 800cf5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3308      	adds	r3, #8
 800cf64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf68:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf70:	e841 2300 	strex	r3, r2, [r1]
 800cf74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e3      	bne.n	800cf44 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	e853 3f00 	ldrex	r3, [r3]
 800cf9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f023 0310 	bic.w	r3, r3, #16
 800cfa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	461a      	mov	r2, r3
 800cfae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	69b9      	ldr	r1, [r7, #24]
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	617b      	str	r3, [r7, #20]
   return(result);
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e4      	bne.n	800cf90 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cfcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7f7 fb76 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfd8:	e02a      	b.n	800d030 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00e      	beq.n	800d004 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d008      	beq.n	800d004 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01c      	beq.n	800d034 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	4798      	blx	r3
    }
    return;
 800d002:	e017      	b.n	800d034 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d012      	beq.n	800d036 <HAL_UART_IRQHandler+0x5d2>
 800d010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00c      	beq.n	800d036 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fe62 	bl	800dce6 <UART_EndTransmit_IT>
    return;
 800d022:	e008      	b.n	800d036 <HAL_UART_IRQHandler+0x5d2>
      return;
 800d024:	bf00      	nop
 800d026:	e006      	b.n	800d036 <HAL_UART_IRQHandler+0x5d2>
    return;
 800d028:	bf00      	nop
 800d02a:	e004      	b.n	800d036 <HAL_UART_IRQHandler+0x5d2>
      return;
 800d02c:	bf00      	nop
 800d02e:	e002      	b.n	800d036 <HAL_UART_IRQHandler+0x5d2>
      return;
 800d030:	bf00      	nop
 800d032:	e000      	b.n	800d036 <HAL_UART_IRQHandler+0x5d2>
    return;
 800d034:	bf00      	nop
  }

}
 800d036:	37e8      	adds	r7, #232	@ 0xe8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b088      	sub	sp, #32
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689a      	ldr	r2, [r3, #8]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	69db      	ldr	r3, [r3, #28]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	4ba6      	ldr	r3, [pc, #664]	@ (800d350 <UART_SetConfig+0x2c4>)
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	6812      	ldr	r2, [r2, #0]
 800d0be:	6979      	ldr	r1, [r7, #20]
 800d0c0:	430b      	orrs	r3, r1
 800d0c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	699b      	ldr	r3, [r3, #24]
 800d0de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	430a      	orrs	r2, r1
 800d0fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a94      	ldr	r2, [pc, #592]	@ (800d354 <UART_SetConfig+0x2c8>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d120      	bne.n	800d14a <UART_SetConfig+0xbe>
 800d108:	4b93      	ldr	r3, [pc, #588]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d10e:	f003 0303 	and.w	r3, r3, #3
 800d112:	2b03      	cmp	r3, #3
 800d114:	d816      	bhi.n	800d144 <UART_SetConfig+0xb8>
 800d116:	a201      	add	r2, pc, #4	@ (adr r2, 800d11c <UART_SetConfig+0x90>)
 800d118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11c:	0800d12d 	.word	0x0800d12d
 800d120:	0800d139 	.word	0x0800d139
 800d124:	0800d133 	.word	0x0800d133
 800d128:	0800d13f 	.word	0x0800d13f
 800d12c:	2301      	movs	r3, #1
 800d12e:	77fb      	strb	r3, [r7, #31]
 800d130:	e150      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d132:	2302      	movs	r3, #2
 800d134:	77fb      	strb	r3, [r7, #31]
 800d136:	e14d      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d138:	2304      	movs	r3, #4
 800d13a:	77fb      	strb	r3, [r7, #31]
 800d13c:	e14a      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d13e:	2308      	movs	r3, #8
 800d140:	77fb      	strb	r3, [r7, #31]
 800d142:	e147      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d144:	2310      	movs	r3, #16
 800d146:	77fb      	strb	r3, [r7, #31]
 800d148:	e144      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a83      	ldr	r2, [pc, #524]	@ (800d35c <UART_SetConfig+0x2d0>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d132      	bne.n	800d1ba <UART_SetConfig+0x12e>
 800d154:	4b80      	ldr	r3, [pc, #512]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15a:	f003 030c 	and.w	r3, r3, #12
 800d15e:	2b0c      	cmp	r3, #12
 800d160:	d828      	bhi.n	800d1b4 <UART_SetConfig+0x128>
 800d162:	a201      	add	r2, pc, #4	@ (adr r2, 800d168 <UART_SetConfig+0xdc>)
 800d164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d168:	0800d19d 	.word	0x0800d19d
 800d16c:	0800d1b5 	.word	0x0800d1b5
 800d170:	0800d1b5 	.word	0x0800d1b5
 800d174:	0800d1b5 	.word	0x0800d1b5
 800d178:	0800d1a9 	.word	0x0800d1a9
 800d17c:	0800d1b5 	.word	0x0800d1b5
 800d180:	0800d1b5 	.word	0x0800d1b5
 800d184:	0800d1b5 	.word	0x0800d1b5
 800d188:	0800d1a3 	.word	0x0800d1a3
 800d18c:	0800d1b5 	.word	0x0800d1b5
 800d190:	0800d1b5 	.word	0x0800d1b5
 800d194:	0800d1b5 	.word	0x0800d1b5
 800d198:	0800d1af 	.word	0x0800d1af
 800d19c:	2300      	movs	r3, #0
 800d19e:	77fb      	strb	r3, [r7, #31]
 800d1a0:	e118      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	77fb      	strb	r3, [r7, #31]
 800d1a6:	e115      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1a8:	2304      	movs	r3, #4
 800d1aa:	77fb      	strb	r3, [r7, #31]
 800d1ac:	e112      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1ae:	2308      	movs	r3, #8
 800d1b0:	77fb      	strb	r3, [r7, #31]
 800d1b2:	e10f      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	77fb      	strb	r3, [r7, #31]
 800d1b8:	e10c      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a68      	ldr	r2, [pc, #416]	@ (800d360 <UART_SetConfig+0x2d4>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d120      	bne.n	800d206 <UART_SetConfig+0x17a>
 800d1c4:	4b64      	ldr	r3, [pc, #400]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d1ce:	2b30      	cmp	r3, #48	@ 0x30
 800d1d0:	d013      	beq.n	800d1fa <UART_SetConfig+0x16e>
 800d1d2:	2b30      	cmp	r3, #48	@ 0x30
 800d1d4:	d814      	bhi.n	800d200 <UART_SetConfig+0x174>
 800d1d6:	2b20      	cmp	r3, #32
 800d1d8:	d009      	beq.n	800d1ee <UART_SetConfig+0x162>
 800d1da:	2b20      	cmp	r3, #32
 800d1dc:	d810      	bhi.n	800d200 <UART_SetConfig+0x174>
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <UART_SetConfig+0x15c>
 800d1e2:	2b10      	cmp	r3, #16
 800d1e4:	d006      	beq.n	800d1f4 <UART_SetConfig+0x168>
 800d1e6:	e00b      	b.n	800d200 <UART_SetConfig+0x174>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	77fb      	strb	r3, [r7, #31]
 800d1ec:	e0f2      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	77fb      	strb	r3, [r7, #31]
 800d1f2:	e0ef      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1f4:	2304      	movs	r3, #4
 800d1f6:	77fb      	strb	r3, [r7, #31]
 800d1f8:	e0ec      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d1fa:	2308      	movs	r3, #8
 800d1fc:	77fb      	strb	r3, [r7, #31]
 800d1fe:	e0e9      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d200:	2310      	movs	r3, #16
 800d202:	77fb      	strb	r3, [r7, #31]
 800d204:	e0e6      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a56      	ldr	r2, [pc, #344]	@ (800d364 <UART_SetConfig+0x2d8>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d120      	bne.n	800d252 <UART_SetConfig+0x1c6>
 800d210:	4b51      	ldr	r3, [pc, #324]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d216:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d21a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d21c:	d013      	beq.n	800d246 <UART_SetConfig+0x1ba>
 800d21e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d220:	d814      	bhi.n	800d24c <UART_SetConfig+0x1c0>
 800d222:	2b80      	cmp	r3, #128	@ 0x80
 800d224:	d009      	beq.n	800d23a <UART_SetConfig+0x1ae>
 800d226:	2b80      	cmp	r3, #128	@ 0x80
 800d228:	d810      	bhi.n	800d24c <UART_SetConfig+0x1c0>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <UART_SetConfig+0x1a8>
 800d22e:	2b40      	cmp	r3, #64	@ 0x40
 800d230:	d006      	beq.n	800d240 <UART_SetConfig+0x1b4>
 800d232:	e00b      	b.n	800d24c <UART_SetConfig+0x1c0>
 800d234:	2300      	movs	r3, #0
 800d236:	77fb      	strb	r3, [r7, #31]
 800d238:	e0cc      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d23a:	2302      	movs	r3, #2
 800d23c:	77fb      	strb	r3, [r7, #31]
 800d23e:	e0c9      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d240:	2304      	movs	r3, #4
 800d242:	77fb      	strb	r3, [r7, #31]
 800d244:	e0c6      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d246:	2308      	movs	r3, #8
 800d248:	77fb      	strb	r3, [r7, #31]
 800d24a:	e0c3      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d24c:	2310      	movs	r3, #16
 800d24e:	77fb      	strb	r3, [r7, #31]
 800d250:	e0c0      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a44      	ldr	r2, [pc, #272]	@ (800d368 <UART_SetConfig+0x2dc>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d125      	bne.n	800d2a8 <UART_SetConfig+0x21c>
 800d25c:	4b3e      	ldr	r3, [pc, #248]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d26a:	d017      	beq.n	800d29c <UART_SetConfig+0x210>
 800d26c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d270:	d817      	bhi.n	800d2a2 <UART_SetConfig+0x216>
 800d272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d276:	d00b      	beq.n	800d290 <UART_SetConfig+0x204>
 800d278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d27c:	d811      	bhi.n	800d2a2 <UART_SetConfig+0x216>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <UART_SetConfig+0x1fe>
 800d282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d286:	d006      	beq.n	800d296 <UART_SetConfig+0x20a>
 800d288:	e00b      	b.n	800d2a2 <UART_SetConfig+0x216>
 800d28a:	2300      	movs	r3, #0
 800d28c:	77fb      	strb	r3, [r7, #31]
 800d28e:	e0a1      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d290:	2302      	movs	r3, #2
 800d292:	77fb      	strb	r3, [r7, #31]
 800d294:	e09e      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d296:	2304      	movs	r3, #4
 800d298:	77fb      	strb	r3, [r7, #31]
 800d29a:	e09b      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d29c:	2308      	movs	r3, #8
 800d29e:	77fb      	strb	r3, [r7, #31]
 800d2a0:	e098      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	77fb      	strb	r3, [r7, #31]
 800d2a6:	e095      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a2f      	ldr	r2, [pc, #188]	@ (800d36c <UART_SetConfig+0x2e0>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d125      	bne.n	800d2fe <UART_SetConfig+0x272>
 800d2b2:	4b29      	ldr	r3, [pc, #164]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d2bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2c0:	d017      	beq.n	800d2f2 <UART_SetConfig+0x266>
 800d2c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2c6:	d817      	bhi.n	800d2f8 <UART_SetConfig+0x26c>
 800d2c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2cc:	d00b      	beq.n	800d2e6 <UART_SetConfig+0x25a>
 800d2ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2d2:	d811      	bhi.n	800d2f8 <UART_SetConfig+0x26c>
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <UART_SetConfig+0x254>
 800d2d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2dc:	d006      	beq.n	800d2ec <UART_SetConfig+0x260>
 800d2de:	e00b      	b.n	800d2f8 <UART_SetConfig+0x26c>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	77fb      	strb	r3, [r7, #31]
 800d2e4:	e076      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	77fb      	strb	r3, [r7, #31]
 800d2ea:	e073      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2ec:	2304      	movs	r3, #4
 800d2ee:	77fb      	strb	r3, [r7, #31]
 800d2f0:	e070      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2f2:	2308      	movs	r3, #8
 800d2f4:	77fb      	strb	r3, [r7, #31]
 800d2f6:	e06d      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	77fb      	strb	r3, [r7, #31]
 800d2fc:	e06a      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a1b      	ldr	r2, [pc, #108]	@ (800d370 <UART_SetConfig+0x2e4>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d138      	bne.n	800d37a <UART_SetConfig+0x2ee>
 800d308:	4b13      	ldr	r3, [pc, #76]	@ (800d358 <UART_SetConfig+0x2cc>)
 800d30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d30e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d316:	d017      	beq.n	800d348 <UART_SetConfig+0x2bc>
 800d318:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d31c:	d82a      	bhi.n	800d374 <UART_SetConfig+0x2e8>
 800d31e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d322:	d00b      	beq.n	800d33c <UART_SetConfig+0x2b0>
 800d324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d328:	d824      	bhi.n	800d374 <UART_SetConfig+0x2e8>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d003      	beq.n	800d336 <UART_SetConfig+0x2aa>
 800d32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d332:	d006      	beq.n	800d342 <UART_SetConfig+0x2b6>
 800d334:	e01e      	b.n	800d374 <UART_SetConfig+0x2e8>
 800d336:	2300      	movs	r3, #0
 800d338:	77fb      	strb	r3, [r7, #31]
 800d33a:	e04b      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d33c:	2302      	movs	r3, #2
 800d33e:	77fb      	strb	r3, [r7, #31]
 800d340:	e048      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d342:	2304      	movs	r3, #4
 800d344:	77fb      	strb	r3, [r7, #31]
 800d346:	e045      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d348:	2308      	movs	r3, #8
 800d34a:	77fb      	strb	r3, [r7, #31]
 800d34c:	e042      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d34e:	bf00      	nop
 800d350:	efff69f3 	.word	0xefff69f3
 800d354:	40011000 	.word	0x40011000
 800d358:	40023800 	.word	0x40023800
 800d35c:	40004400 	.word	0x40004400
 800d360:	40004800 	.word	0x40004800
 800d364:	40004c00 	.word	0x40004c00
 800d368:	40005000 	.word	0x40005000
 800d36c:	40011400 	.word	0x40011400
 800d370:	40007800 	.word	0x40007800
 800d374:	2310      	movs	r3, #16
 800d376:	77fb      	strb	r3, [r7, #31]
 800d378:	e02c      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a72      	ldr	r2, [pc, #456]	@ (800d548 <UART_SetConfig+0x4bc>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d125      	bne.n	800d3d0 <UART_SetConfig+0x344>
 800d384:	4b71      	ldr	r3, [pc, #452]	@ (800d54c <UART_SetConfig+0x4c0>)
 800d386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d38a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d38e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d392:	d017      	beq.n	800d3c4 <UART_SetConfig+0x338>
 800d394:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d398:	d817      	bhi.n	800d3ca <UART_SetConfig+0x33e>
 800d39a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d39e:	d00b      	beq.n	800d3b8 <UART_SetConfig+0x32c>
 800d3a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3a4:	d811      	bhi.n	800d3ca <UART_SetConfig+0x33e>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <UART_SetConfig+0x326>
 800d3aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d3ae:	d006      	beq.n	800d3be <UART_SetConfig+0x332>
 800d3b0:	e00b      	b.n	800d3ca <UART_SetConfig+0x33e>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	77fb      	strb	r3, [r7, #31]
 800d3b6:	e00d      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	77fb      	strb	r3, [r7, #31]
 800d3bc:	e00a      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d3be:	2304      	movs	r3, #4
 800d3c0:	77fb      	strb	r3, [r7, #31]
 800d3c2:	e007      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d3c4:	2308      	movs	r3, #8
 800d3c6:	77fb      	strb	r3, [r7, #31]
 800d3c8:	e004      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d3ca:	2310      	movs	r3, #16
 800d3cc:	77fb      	strb	r3, [r7, #31]
 800d3ce:	e001      	b.n	800d3d4 <UART_SetConfig+0x348>
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	69db      	ldr	r3, [r3, #28]
 800d3d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3dc:	d15b      	bne.n	800d496 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d3de:	7ffb      	ldrb	r3, [r7, #31]
 800d3e0:	2b08      	cmp	r3, #8
 800d3e2:	d828      	bhi.n	800d436 <UART_SetConfig+0x3aa>
 800d3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <UART_SetConfig+0x360>)
 800d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ea:	bf00      	nop
 800d3ec:	0800d411 	.word	0x0800d411
 800d3f0:	0800d419 	.word	0x0800d419
 800d3f4:	0800d421 	.word	0x0800d421
 800d3f8:	0800d437 	.word	0x0800d437
 800d3fc:	0800d427 	.word	0x0800d427
 800d400:	0800d437 	.word	0x0800d437
 800d404:	0800d437 	.word	0x0800d437
 800d408:	0800d437 	.word	0x0800d437
 800d40c:	0800d42f 	.word	0x0800d42f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d410:	f7fc fbbc 	bl	8009b8c <HAL_RCC_GetPCLK1Freq>
 800d414:	61b8      	str	r0, [r7, #24]
        break;
 800d416:	e013      	b.n	800d440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d418:	f7fc fbcc 	bl	8009bb4 <HAL_RCC_GetPCLK2Freq>
 800d41c:	61b8      	str	r0, [r7, #24]
        break;
 800d41e:	e00f      	b.n	800d440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d420:	4b4b      	ldr	r3, [pc, #300]	@ (800d550 <UART_SetConfig+0x4c4>)
 800d422:	61bb      	str	r3, [r7, #24]
        break;
 800d424:	e00c      	b.n	800d440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d426:	f7fc fa9f 	bl	8009968 <HAL_RCC_GetSysClockFreq>
 800d42a:	61b8      	str	r0, [r7, #24]
        break;
 800d42c:	e008      	b.n	800d440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d42e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d432:	61bb      	str	r3, [r7, #24]
        break;
 800d434:	e004      	b.n	800d440 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d436:	2300      	movs	r3, #0
 800d438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	77bb      	strb	r3, [r7, #30]
        break;
 800d43e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d074      	beq.n	800d530 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	005a      	lsls	r2, r3, #1
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	441a      	add	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b0f      	cmp	r3, #15
 800d460:	d916      	bls.n	800d490 <UART_SetConfig+0x404>
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d468:	d212      	bcs.n	800d490 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	f023 030f 	bic.w	r3, r3, #15
 800d472:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	085b      	lsrs	r3, r3, #1
 800d478:	b29b      	uxth	r3, r3
 800d47a:	f003 0307 	and.w	r3, r3, #7
 800d47e:	b29a      	uxth	r2, r3
 800d480:	89fb      	ldrh	r3, [r7, #14]
 800d482:	4313      	orrs	r3, r2
 800d484:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	89fa      	ldrh	r2, [r7, #14]
 800d48c:	60da      	str	r2, [r3, #12]
 800d48e:	e04f      	b.n	800d530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	77bb      	strb	r3, [r7, #30]
 800d494:	e04c      	b.n	800d530 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d496:	7ffb      	ldrb	r3, [r7, #31]
 800d498:	2b08      	cmp	r3, #8
 800d49a:	d828      	bhi.n	800d4ee <UART_SetConfig+0x462>
 800d49c:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a4 <UART_SetConfig+0x418>)
 800d49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a2:	bf00      	nop
 800d4a4:	0800d4c9 	.word	0x0800d4c9
 800d4a8:	0800d4d1 	.word	0x0800d4d1
 800d4ac:	0800d4d9 	.word	0x0800d4d9
 800d4b0:	0800d4ef 	.word	0x0800d4ef
 800d4b4:	0800d4df 	.word	0x0800d4df
 800d4b8:	0800d4ef 	.word	0x0800d4ef
 800d4bc:	0800d4ef 	.word	0x0800d4ef
 800d4c0:	0800d4ef 	.word	0x0800d4ef
 800d4c4:	0800d4e7 	.word	0x0800d4e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c8:	f7fc fb60 	bl	8009b8c <HAL_RCC_GetPCLK1Freq>
 800d4cc:	61b8      	str	r0, [r7, #24]
        break;
 800d4ce:	e013      	b.n	800d4f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4d0:	f7fc fb70 	bl	8009bb4 <HAL_RCC_GetPCLK2Freq>
 800d4d4:	61b8      	str	r0, [r7, #24]
        break;
 800d4d6:	e00f      	b.n	800d4f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800d550 <UART_SetConfig+0x4c4>)
 800d4da:	61bb      	str	r3, [r7, #24]
        break;
 800d4dc:	e00c      	b.n	800d4f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4de:	f7fc fa43 	bl	8009968 <HAL_RCC_GetSysClockFreq>
 800d4e2:	61b8      	str	r0, [r7, #24]
        break;
 800d4e4:	e008      	b.n	800d4f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4ea:	61bb      	str	r3, [r7, #24]
        break;
 800d4ec:	e004      	b.n	800d4f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	77bb      	strb	r3, [r7, #30]
        break;
 800d4f6:	bf00      	nop
    }

    if (pclk != 0U)
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d018      	beq.n	800d530 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	085a      	lsrs	r2, r3, #1
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	441a      	add	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	2b0f      	cmp	r3, #15
 800d516:	d909      	bls.n	800d52c <UART_SetConfig+0x4a0>
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d51e:	d205      	bcs.n	800d52c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	b29a      	uxth	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	60da      	str	r2, [r3, #12]
 800d52a:	e001      	b.n	800d530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d53c:	7fbb      	ldrb	r3, [r7, #30]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3720      	adds	r7, #32
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	40007c00 	.word	0x40007c00
 800d54c:	40023800 	.word	0x40023800
 800d550:	00f42400 	.word	0x00f42400

0800d554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d560:	f003 0308 	and.w	r3, r3, #8
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00a      	beq.n	800d57e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	430a      	orrs	r2, r1
 800d57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00a      	beq.n	800d5a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	430a      	orrs	r2, r1
 800d59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a4:	f003 0302 	and.w	r3, r3, #2
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c6:	f003 0304 	and.w	r3, r3, #4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00a      	beq.n	800d5e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00a      	beq.n	800d606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	430a      	orrs	r2, r1
 800d604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	f003 0320 	and.w	r3, r3, #32
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00a      	beq.n	800d628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	430a      	orrs	r2, r1
 800d626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d630:	2b00      	cmp	r3, #0
 800d632:	d01a      	beq.n	800d66a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	430a      	orrs	r2, r1
 800d648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d64e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d652:	d10a      	bne.n	800d66a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	430a      	orrs	r2, r1
 800d68a:	605a      	str	r2, [r3, #4]
  }
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08c      	sub	sp, #48	@ 0x30
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6a8:	f7f8 fb20 	bl	8005cec <HAL_GetTick>
 800d6ac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 0308 	and.w	r3, r3, #8
 800d6b8:	2b08      	cmp	r3, #8
 800d6ba:	d12e      	bne.n	800d71a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f83b 	bl	800d746 <UART_WaitOnFlagUntilTimeout>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d021      	beq.n	800d71a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d6ea:	623b      	str	r3, [r7, #32]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	69b9      	ldr	r1, [r7, #24]
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	617b      	str	r3, [r7, #20]
   return(result);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e6      	bne.n	800d6d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2220      	movs	r2, #32
 800d70c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e011      	b.n	800d73e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2220      	movs	r2, #32
 800d71e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2220      	movs	r2, #32
 800d724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3728      	adds	r7, #40	@ 0x28
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	60b9      	str	r1, [r7, #8]
 800d750:	603b      	str	r3, [r7, #0]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d756:	e04f      	b.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75e:	d04b      	beq.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d760:	f7f8 fac4 	bl	8005cec <HAL_GetTick>
 800d764:	4602      	mov	r2, r0
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	1ad3      	subs	r3, r2, r3
 800d76a:	69ba      	ldr	r2, [r7, #24]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d302      	bcc.n	800d776 <UART_WaitOnFlagUntilTimeout+0x30>
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d776:	2303      	movs	r3, #3
 800d778:	e04e      	b.n	800d818 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 0304 	and.w	r3, r3, #4
 800d784:	2b00      	cmp	r3, #0
 800d786:	d037      	beq.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b80      	cmp	r3, #128	@ 0x80
 800d78c:	d034      	beq.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	2b40      	cmp	r3, #64	@ 0x40
 800d792:	d031      	beq.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	f003 0308 	and.w	r3, r3, #8
 800d79e:	2b08      	cmp	r3, #8
 800d7a0:	d110      	bne.n	800d7c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2208      	movs	r2, #8
 800d7a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 f8fe 	bl	800d9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e029      	b.n	800d818 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7d2:	d111      	bne.n	800d7f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 f8e4 	bl	800d9ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2220      	movs	r2, #32
 800d7e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	e00f      	b.n	800d818 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69da      	ldr	r2, [r3, #28]
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	4013      	ands	r3, r2
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	429a      	cmp	r2, r3
 800d806:	bf0c      	ite	eq
 800d808:	2301      	moveq	r3, #1
 800d80a:	2300      	movne	r3, #0
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	461a      	mov	r2, r3
 800d810:	79fb      	ldrb	r3, [r7, #7]
 800d812:	429a      	cmp	r2, r3
 800d814:	d0a0      	beq.n	800d758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b096      	sub	sp, #88	@ 0x58
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	4613      	mov	r3, r2
 800d82c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	68ba      	ldr	r2, [r7, #8]
 800d832:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2222      	movs	r2, #34	@ 0x22
 800d848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d850:	2b00      	cmp	r3, #0
 800d852:	d028      	beq.n	800d8a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d858:	4a3e      	ldr	r2, [pc, #248]	@ (800d954 <UART_Start_Receive_DMA+0x134>)
 800d85a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d860:	4a3d      	ldr	r2, [pc, #244]	@ (800d958 <UART_Start_Receive_DMA+0x138>)
 800d862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d868:	4a3c      	ldr	r2, [pc, #240]	@ (800d95c <UART_Start_Receive_DMA+0x13c>)
 800d86a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d870:	2200      	movs	r2, #0
 800d872:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3324      	adds	r3, #36	@ 0x24
 800d87e:	4619      	mov	r1, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d884:	461a      	mov	r2, r3
 800d886:	88fb      	ldrh	r3, [r7, #6]
 800d888:	f7f9 f8ce 	bl	8006a28 <HAL_DMA_Start_IT>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d009      	beq.n	800d8a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2210      	movs	r2, #16
 800d896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2220      	movs	r2, #32
 800d89e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e051      	b.n	800d94a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d018      	beq.n	800d8e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b6:	e853 3f00 	ldrex	r3, [r3]
 800d8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d8d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8d4:	e841 2300 	strex	r3, r2, [r1]
 800d8d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d8da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1e6      	bne.n	800d8ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	e853 3f00 	ldrex	r3, [r3]
 800d8ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f2:	f043 0301 	orr.w	r3, r3, #1
 800d8f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d900:	637a      	str	r2, [r7, #52]	@ 0x34
 800d902:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d908:	e841 2300 	strex	r3, r2, [r1]
 800d90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e5      	bne.n	800d8e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	e853 3f00 	ldrex	r3, [r3]
 800d922:	613b      	str	r3, [r7, #16]
   return(result);
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3308      	adds	r3, #8
 800d932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d934:	623a      	str	r2, [r7, #32]
 800d936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d938:	69f9      	ldr	r1, [r7, #28]
 800d93a:	6a3a      	ldr	r2, [r7, #32]
 800d93c:	e841 2300 	strex	r3, r2, [r1]
 800d940:	61bb      	str	r3, [r7, #24]
   return(result);
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e5      	bne.n	800d914 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3758      	adds	r7, #88	@ 0x58
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	0800da75 	.word	0x0800da75
 800d958:	0800dbd3 	.word	0x0800dbd3
 800d95c:	0800dc45 	.word	0x0800dc45

0800d960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d960:	b480      	push	{r7}
 800d962:	b089      	sub	sp, #36	@ 0x24
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	e853 3f00 	ldrex	r3, [r3]
 800d974:	60bb      	str	r3, [r7, #8]
   return(result);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d97c:	61fb      	str	r3, [r7, #28]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	461a      	mov	r2, r3
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	61bb      	str	r3, [r7, #24]
 800d988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98a:	6979      	ldr	r1, [r7, #20]
 800d98c:	69ba      	ldr	r2, [r7, #24]
 800d98e:	e841 2300 	strex	r3, r2, [r1]
 800d992:	613b      	str	r3, [r7, #16]
   return(result);
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e6      	bne.n	800d968 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2220      	movs	r2, #32
 800d99e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d9a0:	bf00      	nop
 800d9a2:	3724      	adds	r7, #36	@ 0x24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b095      	sub	sp, #84	@ 0x54
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e6      	bne.n	800d9b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	e853 3f00 	ldrex	r3, [r3]
 800d9f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	f023 0301 	bic.w	r3, r3, #1
 800d9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3308      	adds	r3, #8
 800da04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da0e:	e841 2300 	strex	r3, r2, [r1]
 800da12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e5      	bne.n	800d9e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d118      	bne.n	800da54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f023 0310 	bic.w	r3, r3, #16
 800da36:	647b      	str	r3, [r7, #68]	@ 0x44
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6979      	ldr	r1, [r7, #20]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	613b      	str	r3, [r7, #16]
   return(result);
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e6      	bne.n	800da22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800da68:	bf00      	nop
 800da6a:	3754      	adds	r7, #84	@ 0x54
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b09c      	sub	sp, #112	@ 0x70
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da80:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da8a:	d071      	beq.n	800db70 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da8e:	2200      	movs	r2, #0
 800da90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800daa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800daaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dab2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dab4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800daba:	e841 2300 	strex	r3, r2, [r1]
 800dabe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e6      	bne.n	800da94 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3308      	adds	r3, #8
 800dacc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad0:	e853 3f00 	ldrex	r3, [r3]
 800dad4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad8:	f023 0301 	bic.w	r3, r3, #1
 800dadc:	667b      	str	r3, [r7, #100]	@ 0x64
 800dade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3308      	adds	r3, #8
 800dae4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dae6:	643a      	str	r2, [r7, #64]	@ 0x40
 800dae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800daec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800daf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e5      	bne.n	800dac6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3308      	adds	r3, #8
 800db00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db02:	6a3b      	ldr	r3, [r7, #32]
 800db04:	e853 3f00 	ldrex	r3, [r3]
 800db08:	61fb      	str	r3, [r7, #28]
   return(result);
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db10:	663b      	str	r3, [r7, #96]	@ 0x60
 800db12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3308      	adds	r3, #8
 800db18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db22:	e841 2300 	strex	r3, r2, [r1]
 800db26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e5      	bne.n	800dafa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db30:	2220      	movs	r2, #32
 800db32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d118      	bne.n	800db70 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	f023 0310 	bic.w	r3, r3, #16
 800db52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	461a      	mov	r2, r3
 800db5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db60:	6979      	ldr	r1, [r7, #20]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	e841 2300 	strex	r3, r2, [r1]
 800db68:	613b      	str	r3, [r7, #16]
   return(result);
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e6      	bne.n	800db3e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db72:	2200      	movs	r2, #0
 800db74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d122      	bne.n	800dbc4 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800db7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db80:	2200      	movs	r2, #0
 800db82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800db90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800db96:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d204      	bcs.n	800dba8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800db9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dba0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800dba4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800dbae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbbe:	f7f6 fd81 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbc2:	e002      	b.n	800dbca <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800dbc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbc6:	f7ff fa43 	bl	800d050 <HAL_UART_RxCpltCallback>
}
 800dbca:	bf00      	nop
 800dbcc:	3770      	adds	r7, #112	@ 0x70
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d123      	bne.n	800dc36 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dbf4:	085b      	lsrs	r3, r3, #1
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dc0c:	897a      	ldrh	r2, [r7, #10]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d803      	bhi.n	800dc1a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	897a      	ldrh	r2, [r7, #10]
 800dc16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f7f6 fd48 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc34:	e002      	b.n	800dc3c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7ff fa14 	bl	800d064 <HAL_UART_RxHalfCpltCallback>
}
 800dc3c:	bf00      	nop
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc6a:	2b80      	cmp	r3, #128	@ 0x80
 800dc6c:	d109      	bne.n	800dc82 <UART_DMAError+0x3e>
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b21      	cmp	r3, #33	@ 0x21
 800dc72:	d106      	bne.n	800dc82 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800dc7c:	6978      	ldr	r0, [r7, #20]
 800dc7e:	f7ff fe6f 	bl	800d960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc8c:	2b40      	cmp	r3, #64	@ 0x40
 800dc8e:	d109      	bne.n	800dca4 <UART_DMAError+0x60>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b22      	cmp	r3, #34	@ 0x22
 800dc94:	d106      	bne.n	800dca4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800dc9e:	6978      	ldr	r0, [r7, #20]
 800dca0:	f7ff fe84 	bl	800d9ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dcaa:	f043 0210 	orr.w	r2, r3, #16
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcb4:	6978      	ldr	r0, [r7, #20]
 800dcb6:	f7ff f9df 	bl	800d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcba:	bf00      	nop
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff f9cd 	bl	800d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b088      	sub	sp, #32
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	e853 3f00 	ldrex	r3, [r3]
 800dcfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd02:	61fb      	str	r3, [r7, #28]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	61bb      	str	r3, [r7, #24]
 800dd0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd10:	6979      	ldr	r1, [r7, #20]
 800dd12:	69ba      	ldr	r2, [r7, #24]
 800dd14:	e841 2300 	strex	r3, r2, [r1]
 800dd18:	613b      	str	r3, [r7, #16]
   return(result);
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1e6      	bne.n	800dcee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2220      	movs	r2, #32
 800dd24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7ff f985 	bl	800d03c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd32:	bf00      	nop
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b08c      	sub	sp, #48	@ 0x30
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	4613      	mov	r3, r2
 800dd46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd4e:	2b20      	cmp	r3, #32
 800dd50:	d142      	bne.n	800ddd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800dd58:	88fb      	ldrh	r3, [r7, #6]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e03b      	b.n	800ddda <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800dd6e:	88fb      	ldrh	r3, [r7, #6]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68b9      	ldr	r1, [r7, #8]
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff fd53 	bl	800d820 <UART_Start_Receive_DMA>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800dd80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d124      	bne.n	800ddd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d11d      	bne.n	800ddcc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2210      	movs	r2, #16
 800dd96:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	e853 3f00 	ldrex	r3, [r3]
 800dda4:	617b      	str	r3, [r7, #20]
   return(result);
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f043 0310 	orr.w	r3, r3, #16
 800ddac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddb8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6a39      	ldr	r1, [r7, #32]
 800ddbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e6      	bne.n	800dd98 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ddca:	e002      	b.n	800ddd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ddd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ddd6:	e000      	b.n	800ddda <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ddd8:	2302      	movs	r3, #2
  }
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3730      	adds	r7, #48	@ 0x30
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
	...

0800dde4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dde4:	b084      	sub	sp, #16
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	f107 001c 	add.w	r0, r7, #28
 800ddf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ddf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d127      	bne.n	800de4e <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	68da      	ldr	r2, [r3, #12]
 800de0e:	4b3a      	ldr	r3, [pc, #232]	@ (800def8 <USB_CoreInit+0x114>)
 800de10:	4013      	ands	r3, r2
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	f043 0210 	orr.w	r2, r3, #16
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de32:	2b01      	cmp	r3, #1
 800de34:	d105      	bne.n	800de42 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f001 fb20 	bl	800f488 <USB_CoreReset>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
 800de4c:	e03c      	b.n	800dec8 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800de4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800de52:	2b03      	cmp	r3, #3
 800de54:	d127      	bne.n	800dea6 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68da      	ldr	r2, [r3, #12]
 800de66:	4b24      	ldr	r3, [pc, #144]	@ (800def8 <USB_CoreInit+0x114>)
 800de68:	4013      	ands	r3, r2
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	f023 0210 	bic.w	r2, r3, #16
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800de86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d105      	bne.n	800de9a <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 faf4 	bl	800f488 <USB_CoreReset>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
 800dea4:	e010      	b.n	800dec8 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f001 fae8 	bl	800f488 <USB_CoreReset>
 800deb8:	4603      	mov	r3, r0
 800deba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800dec8:	7fbb      	ldrb	r3, [r7, #30]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d10b      	bne.n	800dee6 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	f043 0206 	orr.w	r2, r3, #6
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f043 0220 	orr.w	r2, r3, #32
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800def2:	b004      	add	sp, #16
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	ffbdffbf 	.word	0xffbdffbf

0800defc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800defc:	b480      	push	{r7}
 800defe:	b087      	sub	sp, #28
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d165      	bne.n	800dfdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	4a41      	ldr	r2, [pc, #260]	@ (800e018 <USB_SetTurnaroundTime+0x11c>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d906      	bls.n	800df26 <USB_SetTurnaroundTime+0x2a>
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	4a40      	ldr	r2, [pc, #256]	@ (800e01c <USB_SetTurnaroundTime+0x120>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d202      	bcs.n	800df26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800df20:	230f      	movs	r3, #15
 800df22:	617b      	str	r3, [r7, #20]
 800df24:	e062      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4a3c      	ldr	r2, [pc, #240]	@ (800e01c <USB_SetTurnaroundTime+0x120>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d306      	bcc.n	800df3c <USB_SetTurnaroundTime+0x40>
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	4a3b      	ldr	r2, [pc, #236]	@ (800e020 <USB_SetTurnaroundTime+0x124>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d202      	bcs.n	800df3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800df36:	230e      	movs	r3, #14
 800df38:	617b      	str	r3, [r7, #20]
 800df3a:	e057      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	4a38      	ldr	r2, [pc, #224]	@ (800e020 <USB_SetTurnaroundTime+0x124>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d306      	bcc.n	800df52 <USB_SetTurnaroundTime+0x56>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4a37      	ldr	r2, [pc, #220]	@ (800e024 <USB_SetTurnaroundTime+0x128>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d202      	bcs.n	800df52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df4c:	230d      	movs	r3, #13
 800df4e:	617b      	str	r3, [r7, #20]
 800df50:	e04c      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	4a33      	ldr	r2, [pc, #204]	@ (800e024 <USB_SetTurnaroundTime+0x128>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d306      	bcc.n	800df68 <USB_SetTurnaroundTime+0x6c>
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	4a32      	ldr	r2, [pc, #200]	@ (800e028 <USB_SetTurnaroundTime+0x12c>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d802      	bhi.n	800df68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df62:	230c      	movs	r3, #12
 800df64:	617b      	str	r3, [r7, #20]
 800df66:	e041      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	4a2f      	ldr	r2, [pc, #188]	@ (800e028 <USB_SetTurnaroundTime+0x12c>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d906      	bls.n	800df7e <USB_SetTurnaroundTime+0x82>
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4a2e      	ldr	r2, [pc, #184]	@ (800e02c <USB_SetTurnaroundTime+0x130>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d802      	bhi.n	800df7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800df78:	230b      	movs	r3, #11
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e036      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	4a2a      	ldr	r2, [pc, #168]	@ (800e02c <USB_SetTurnaroundTime+0x130>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d906      	bls.n	800df94 <USB_SetTurnaroundTime+0x98>
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	4a29      	ldr	r2, [pc, #164]	@ (800e030 <USB_SetTurnaroundTime+0x134>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d802      	bhi.n	800df94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df8e:	230a      	movs	r3, #10
 800df90:	617b      	str	r3, [r7, #20]
 800df92:	e02b      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	4a26      	ldr	r2, [pc, #152]	@ (800e030 <USB_SetTurnaroundTime+0x134>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d906      	bls.n	800dfaa <USB_SetTurnaroundTime+0xae>
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	4a25      	ldr	r2, [pc, #148]	@ (800e034 <USB_SetTurnaroundTime+0x138>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d202      	bcs.n	800dfaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dfa4:	2309      	movs	r3, #9
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e020      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	4a21      	ldr	r2, [pc, #132]	@ (800e034 <USB_SetTurnaroundTime+0x138>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d306      	bcc.n	800dfc0 <USB_SetTurnaroundTime+0xc4>
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	4a20      	ldr	r2, [pc, #128]	@ (800e038 <USB_SetTurnaroundTime+0x13c>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d802      	bhi.n	800dfc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dfba:	2308      	movs	r3, #8
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	e015      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	4a1d      	ldr	r2, [pc, #116]	@ (800e038 <USB_SetTurnaroundTime+0x13c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d906      	bls.n	800dfd6 <USB_SetTurnaroundTime+0xda>
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	4a1c      	ldr	r2, [pc, #112]	@ (800e03c <USB_SetTurnaroundTime+0x140>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d202      	bcs.n	800dfd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dfd0:	2307      	movs	r3, #7
 800dfd2:	617b      	str	r3, [r7, #20]
 800dfd4:	e00a      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dfd6:	2306      	movs	r3, #6
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	e007      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dfdc:	79fb      	ldrb	r3, [r7, #7]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d102      	bne.n	800dfe8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dfe2:	2309      	movs	r3, #9
 800dfe4:	617b      	str	r3, [r7, #20]
 800dfe6:	e001      	b.n	800dfec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dfe8:	2309      	movs	r3, #9
 800dfea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68da      	ldr	r2, [r3, #12]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	029b      	lsls	r3, r3, #10
 800e000:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e004:	431a      	orrs	r2, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	371c      	adds	r7, #28
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr
 800e018:	00d8acbf 	.word	0x00d8acbf
 800e01c:	00e4e1c0 	.word	0x00e4e1c0
 800e020:	00f42400 	.word	0x00f42400
 800e024:	01067380 	.word	0x01067380
 800e028:	011a499f 	.word	0x011a499f
 800e02c:	01312cff 	.word	0x01312cff
 800e030:	014ca43f 	.word	0x014ca43f
 800e034:	016e3600 	.word	0x016e3600
 800e038:	01a6ab1f 	.word	0x01a6ab1f
 800e03c:	01e84800 	.word	0x01e84800

0800e040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f043 0201 	orr.w	r2, r3, #1
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f023 0201 	bic.w	r2, r3, #1
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e0a0:	78fb      	ldrb	r3, [r7, #3]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d115      	bne.n	800e0d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0b2:	200a      	movs	r0, #10
 800e0b4:	f7f7 fe26 	bl	8005d04 <HAL_Delay>
      ms += 10U;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	330a      	adds	r3, #10
 800e0bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 f951 	bl	800f366 <USB_GetMode>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d01e      	beq.n	800e108 <USB_SetCurrentMode+0x84>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0ce:	d9f0      	bls.n	800e0b2 <USB_SetCurrentMode+0x2e>
 800e0d0:	e01a      	b.n	800e108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e0d2:	78fb      	ldrb	r3, [r7, #3]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d115      	bne.n	800e104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0e4:	200a      	movs	r0, #10
 800e0e6:	f7f7 fe0d 	bl	8005d04 <HAL_Delay>
      ms += 10U;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	330a      	adds	r3, #10
 800e0ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f001 f938 	bl	800f366 <USB_GetMode>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d005      	beq.n	800e108 <USB_SetCurrentMode+0x84>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2bc7      	cmp	r3, #199	@ 0xc7
 800e100:	d9f0      	bls.n	800e0e4 <USB_SetCurrentMode+0x60>
 800e102:	e001      	b.n	800e108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	e005      	b.n	800e114 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2bc8      	cmp	r3, #200	@ 0xc8
 800e10c:	d101      	bne.n	800e112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e000      	b.n	800e114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e11c:	b084      	sub	sp, #16
 800e11e:	b580      	push	{r7, lr}
 800e120:	b086      	sub	sp, #24
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e136:	2300      	movs	r3, #0
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	e009      	b.n	800e150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3340      	adds	r3, #64	@ 0x40
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	2200      	movs	r2, #0
 800e148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3301      	adds	r3, #1
 800e14e:	613b      	str	r3, [r7, #16]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b0e      	cmp	r3, #14
 800e154:	d9f2      	bls.n	800e13c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e156:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d11c      	bne.n	800e198 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e16c:	f043 0302 	orr.w	r3, r3, #2
 800e170:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e176:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	e005      	b.n	800e1a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e19c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e1b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d10d      	bne.n	800e1d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d104      	bne.n	800e1ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f97a 	bl	800e4bc <USB_SetDevSpeed>
 800e1c8:	e01a      	b.n	800e200 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f975 	bl	800e4bc <USB_SetDevSpeed>
 800e1d2:	e015      	b.n	800e200 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e1d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d10d      	bne.n	800e1f8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d104      	bne.n	800e1ee <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f968 	bl	800e4bc <USB_SetDevSpeed>
 800e1ec:	e008      	b.n	800e200 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f963 	bl	800e4bc <USB_SetDevSpeed>
 800e1f6:	e003      	b.n	800e200 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e1f8:	2103      	movs	r1, #3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f95e 	bl	800e4bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e200:	2110      	movs	r1, #16
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f8fa 	bl	800e3fc <USB_FlushTxFifo>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f924 	bl	800e460 <USB_FlushRxFifo>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800e21e:	2301      	movs	r3, #1
 800e220:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e228:	461a      	mov	r2, r3
 800e22a:	2300      	movs	r3, #0
 800e22c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e234:	461a      	mov	r2, r3
 800e236:	2300      	movs	r3, #0
 800e238:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e240:	461a      	mov	r2, r3
 800e242:	2300      	movs	r3, #0
 800e244:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e246:	2300      	movs	r3, #0
 800e248:	613b      	str	r3, [r7, #16]
 800e24a:	e043      	b.n	800e2d4 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e25e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e262:	d118      	bne.n	800e296 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	015a      	lsls	r2, r3, #5
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	4413      	add	r3, r2
 800e272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e276:	461a      	mov	r2, r3
 800e278:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	e013      	b.n	800e2a8 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	015a      	lsls	r2, r3, #5
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4413      	add	r3, r2
 800e288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e28c:	461a      	mov	r2, r3
 800e28e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e008      	b.n	800e2a8 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e2cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	613b      	str	r3, [r7, #16]
 800e2d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e2d8:	461a      	mov	r2, r3
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d3b5      	bcc.n	800e24c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	613b      	str	r3, [r7, #16]
 800e2e4:	e043      	b.n	800e36e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	015a      	lsls	r2, r3, #5
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2fc:	d118      	bne.n	800e330 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e310:	461a      	mov	r2, r3
 800e312:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e316:	6013      	str	r3, [r2, #0]
 800e318:	e013      	b.n	800e342 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e326:	461a      	mov	r2, r3
 800e328:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	e008      	b.n	800e342 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	015a      	lsls	r2, r3, #5
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	4413      	add	r3, r2
 800e338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e33c:	461a      	mov	r2, r3
 800e33e:	2300      	movs	r3, #0
 800e340:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	015a      	lsls	r2, r3, #5
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e34e:	461a      	mov	r2, r3
 800e350:	2300      	movs	r3, #0
 800e352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	015a      	lsls	r2, r3, #5
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e360:	461a      	mov	r2, r3
 800e362:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	3301      	adds	r3, #1
 800e36c:	613b      	str	r3, [r7, #16]
 800e36e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e372:	461a      	mov	r2, r3
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	4293      	cmp	r3, r2
 800e378:	d3b5      	bcc.n	800e2e6 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e38c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e39a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e39c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d105      	bne.n	800e3b0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	f043 0210 	orr.w	r2, r3, #16
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	699a      	ldr	r2, [r3, #24]
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f4 <USB_DevInit+0x2d8>)
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e3bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	f043 0208 	orr.w	r2, r3, #8
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e3d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d105      	bne.n	800e3e4 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	699a      	ldr	r2, [r3, #24]
 800e3dc:	4b06      	ldr	r3, [pc, #24]	@ (800e3f8 <USB_DevInit+0x2dc>)
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3f0:	b004      	add	sp, #16
 800e3f2:	4770      	bx	lr
 800e3f4:	803c3800 	.word	0x803c3800
 800e3f8:	40000004 	.word	0x40000004

0800e3fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e406:	2300      	movs	r3, #0
 800e408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3301      	adds	r3, #1
 800e40e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e416:	d901      	bls.n	800e41c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	e01b      	b.n	800e454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	2b00      	cmp	r3, #0
 800e422:	daf2      	bge.n	800e40a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	019b      	lsls	r3, r3, #6
 800e42c:	f043 0220 	orr.w	r2, r3, #32
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3301      	adds	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e440:	d901      	bls.n	800e446 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e006      	b.n	800e454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f003 0320 	and.w	r3, r3, #32
 800e44e:	2b20      	cmp	r3, #32
 800e450:	d0f0      	beq.n	800e434 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	3301      	adds	r3, #1
 800e470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e478:	d901      	bls.n	800e47e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e47a:	2303      	movs	r3, #3
 800e47c:	e018      	b.n	800e4b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	daf2      	bge.n	800e46c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e486:	2300      	movs	r3, #0
 800e488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2210      	movs	r2, #16
 800e48e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3301      	adds	r3, #1
 800e494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e49c:	d901      	bls.n	800e4a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	e006      	b.n	800e4b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	f003 0310 	and.w	r3, r3, #16
 800e4aa:	2b10      	cmp	r3, #16
 800e4ac:	d0f0      	beq.n	800e490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	68f9      	ldr	r1, [r7, #12]
 800e4d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4ee:	b480      	push	{r7}
 800e4f0:	b087      	sub	sp, #28
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f003 0306 	and.w	r3, r3, #6
 800e506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d102      	bne.n	800e514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e50e:	2300      	movs	r3, #0
 800e510:	75fb      	strb	r3, [r7, #23]
 800e512:	e00a      	b.n	800e52a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b02      	cmp	r3, #2
 800e518:	d002      	beq.n	800e520 <USB_GetDevSpeed+0x32>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b06      	cmp	r3, #6
 800e51e:	d102      	bne.n	800e526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e520:	2302      	movs	r3, #2
 800e522:	75fb      	strb	r3, [r7, #23]
 800e524:	e001      	b.n	800e52a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e526:	230f      	movs	r3, #15
 800e528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	371c      	adds	r7, #28
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d139      	bne.n	800e5c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e55a:	69da      	ldr	r2, [r3, #28]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 030f 	and.w	r3, r3, #15
 800e564:	2101      	movs	r1, #1
 800e566:	fa01 f303 	lsl.w	r3, r1, r3
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	68f9      	ldr	r1, [r7, #12]
 800e56e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e572:	4313      	orrs	r3, r2
 800e574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	015a      	lsls	r2, r3, #5
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	4413      	add	r3, r2
 800e57e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d153      	bne.n	800e634 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	791b      	ldrb	r3, [r3, #4]
 800e5a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	059b      	lsls	r3, r3, #22
 800e5ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	0159      	lsls	r1, r3, #5
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	440b      	add	r3, r1
 800e5ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4b20      	ldr	r3, [pc, #128]	@ (800e644 <USB_ActivateEndpoint+0x10c>)
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	600b      	str	r3, [r1, #0]
 800e5c6:	e035      	b.n	800e634 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ce:	69da      	ldr	r2, [r3, #28]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	f003 030f 	and.w	r3, r3, #15
 800e5d8:	2101      	movs	r1, #1
 800e5da:	fa01 f303 	lsl.w	r3, r1, r3
 800e5de:	041b      	lsls	r3, r3, #16
 800e5e0:	68f9      	ldr	r1, [r7, #12]
 800e5e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	015a      	lsls	r2, r3, #5
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d119      	bne.n	800e634 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	791b      	ldrb	r3, [r3, #4]
 800e61a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e61c:	430b      	orrs	r3, r1
 800e61e:	431a      	orrs	r2, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	0159      	lsls	r1, r3, #5
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	440b      	add	r3, r1
 800e628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e62c:	4619      	mov	r1, r3
 800e62e:	4b05      	ldr	r3, [pc, #20]	@ (800e644 <USB_ActivateEndpoint+0x10c>)
 800e630:	4313      	orrs	r3, r2
 800e632:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	10008000 	.word	0x10008000

0800e648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	785b      	ldrb	r3, [r3, #1]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d161      	bne.n	800e728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e67a:	d11f      	bne.n	800e6bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	0151      	lsls	r1, r2, #5
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	440a      	add	r2, r1
 800e692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e69a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	0151      	lsls	r1, r2, #5
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	440a      	add	r2, r1
 800e6b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 030f 	and.w	r3, r3, #15
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	43db      	mvns	r3, r3
 800e6d6:	68f9      	ldr	r1, [r7, #12]
 800e6d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6dc:	4013      	ands	r3, r2
 800e6de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6e6:	69da      	ldr	r2, [r3, #28]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	43db      	mvns	r3, r3
 800e6fa:	68f9      	ldr	r1, [r7, #12]
 800e6fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e700:	4013      	ands	r3, r2
 800e702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	0159      	lsls	r1, r3, #5
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	440b      	add	r3, r1
 800e71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e71e:	4619      	mov	r1, r3
 800e720:	4b35      	ldr	r3, [pc, #212]	@ (800e7f8 <USB_DeactivateEndpoint+0x1b0>)
 800e722:	4013      	ands	r3, r2
 800e724:	600b      	str	r3, [r1, #0]
 800e726:	e060      	b.n	800e7ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e73a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e73e:	d11f      	bne.n	800e780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	015a      	lsls	r2, r3, #5
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4413      	add	r3, r2
 800e748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	0151      	lsls	r1, r2, #5
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	440a      	add	r2, r1
 800e756:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e75a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e75e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	015a      	lsls	r2, r3, #5
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	4413      	add	r3, r2
 800e768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	0151      	lsls	r1, r2, #5
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	440a      	add	r2, r1
 800e776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e77a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e77e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f003 030f 	and.w	r3, r3, #15
 800e790:	2101      	movs	r1, #1
 800e792:	fa01 f303 	lsl.w	r3, r1, r3
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	43db      	mvns	r3, r3
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7aa:	69da      	ldr	r2, [r3, #28]
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	f003 030f 	and.w	r3, r3, #15
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ba:	041b      	lsls	r3, r3, #16
 800e7bc:	43db      	mvns	r3, r3
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	0159      	lsls	r1, r3, #5
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	440b      	add	r3, r1
 800e7de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4b05      	ldr	r3, [pc, #20]	@ (800e7fc <USB_DeactivateEndpoint+0x1b4>)
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	ec337800 	.word	0xec337800
 800e7fc:	eff37800 	.word	0xeff37800

0800e800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08a      	sub	sp, #40	@ 0x28
 800e804:	af02      	add	r7, sp, #8
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	785b      	ldrb	r3, [r3, #1]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	f040 8185 	bne.w	800eb2c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d132      	bne.n	800e890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	015a      	lsls	r2, r3, #5
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	4413      	add	r3, r2
 800e832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e836:	691a      	ldr	r2, [r3, #16]
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	0159      	lsls	r1, r3, #5
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	440b      	add	r3, r1
 800e840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e844:	4619      	mov	r1, r3
 800e846:	4ba7      	ldr	r3, [pc, #668]	@ (800eae4 <USB_EPStartXfer+0x2e4>)
 800e848:	4013      	ands	r3, r2
 800e84a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	015a      	lsls	r2, r3, #5
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	4413      	add	r3, r2
 800e854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	0151      	lsls	r1, r2, #5
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	440a      	add	r2, r1
 800e862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e866:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e86a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e878:	691a      	ldr	r2, [r3, #16]
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	0159      	lsls	r1, r3, #5
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	440b      	add	r3, r1
 800e882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e886:	4619      	mov	r1, r3
 800e888:	4b97      	ldr	r3, [pc, #604]	@ (800eae8 <USB_EPStartXfer+0x2e8>)
 800e88a:	4013      	ands	r3, r2
 800e88c:	610b      	str	r3, [r1, #16]
 800e88e:	e097      	b.n	800e9c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e89c:	691a      	ldr	r2, [r3, #16]
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	0159      	lsls	r1, r3, #5
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	440b      	add	r3, r1
 800e8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4b8e      	ldr	r3, [pc, #568]	@ (800eae8 <USB_EPStartXfer+0x2e8>)
 800e8ae:	4013      	ands	r3, r2
 800e8b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8be:	691a      	ldr	r2, [r3, #16]
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	0159      	lsls	r1, r3, #5
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	440b      	add	r3, r1
 800e8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4b85      	ldr	r3, [pc, #532]	@ (800eae4 <USB_EPStartXfer+0x2e4>)
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d11a      	bne.n	800e910 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	691a      	ldr	r2, [r3, #16]
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d903      	bls.n	800e8ee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	689a      	ldr	r2, [r3, #8]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	015a      	lsls	r2, r3, #5
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	69ba      	ldr	r2, [r7, #24]
 800e8fe:	0151      	lsls	r1, r2, #5
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	440a      	add	r2, r1
 800e904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e908:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e90c:	6113      	str	r3, [r2, #16]
 800e90e:	e044      	b.n	800e99a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	691a      	ldr	r2, [r3, #16]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	4413      	add	r3, r2
 800e91a:	1e5a      	subs	r2, r3, #1
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	fbb2 f3f3 	udiv	r3, r2, r3
 800e924:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	015a      	lsls	r2, r3, #5
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	4413      	add	r3, r2
 800e92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e932:	691a      	ldr	r2, [r3, #16]
 800e934:	8afb      	ldrh	r3, [r7, #22]
 800e936:	04d9      	lsls	r1, r3, #19
 800e938:	4b6c      	ldr	r3, [pc, #432]	@ (800eaec <USB_EPStartXfer+0x2ec>)
 800e93a:	400b      	ands	r3, r1
 800e93c:	69b9      	ldr	r1, [r7, #24]
 800e93e:	0148      	lsls	r0, r1, #5
 800e940:	69f9      	ldr	r1, [r7, #28]
 800e942:	4401      	add	r1, r0
 800e944:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e948:	4313      	orrs	r3, r2
 800e94a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	791b      	ldrb	r3, [r3, #4]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d122      	bne.n	800e99a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	015a      	lsls	r2, r3, #5
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	4413      	add	r3, r2
 800e95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	69ba      	ldr	r2, [r7, #24]
 800e964:	0151      	lsls	r1, r2, #5
 800e966:	69fa      	ldr	r2, [r7, #28]
 800e968:	440a      	add	r2, r1
 800e96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e96e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e972:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	4413      	add	r3, r2
 800e97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	8afb      	ldrh	r3, [r7, #22]
 800e984:	075b      	lsls	r3, r3, #29
 800e986:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e98a:	69b9      	ldr	r1, [r7, #24]
 800e98c:	0148      	lsls	r0, r1, #5
 800e98e:	69f9      	ldr	r1, [r7, #28]
 800e990:	4401      	add	r1, r0
 800e992:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e996:	4313      	orrs	r3, r2
 800e998:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	015a      	lsls	r2, r3, #5
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9a6:	691a      	ldr	r2, [r3, #16]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9b0:	69b9      	ldr	r1, [r7, #24]
 800e9b2:	0148      	lsls	r0, r1, #5
 800e9b4:	69f9      	ldr	r1, [r7, #28]
 800e9b6:	4401      	add	r1, r0
 800e9b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d14b      	bne.n	800ea5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d009      	beq.n	800e9e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	015a      	lsls	r2, r3, #5
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9da:	461a      	mov	r2, r3
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	791b      	ldrb	r3, [r3, #4]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d128      	bne.n	800ea3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d110      	bne.n	800ea1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	015a      	lsls	r2, r3, #5
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	4413      	add	r3, r2
 800ea02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	69ba      	ldr	r2, [r7, #24]
 800ea0a:	0151      	lsls	r1, r2, #5
 800ea0c:	69fa      	ldr	r2, [r7, #28]
 800ea0e:	440a      	add	r2, r1
 800ea10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	e00f      	b.n	800ea3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	015a      	lsls	r2, r3, #5
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	4413      	add	r3, r2
 800ea24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	0151      	lsls	r1, r2, #5
 800ea2e:	69fa      	ldr	r2, [r7, #28]
 800ea30:	440a      	add	r2, r1
 800ea32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	69ba      	ldr	r2, [r7, #24]
 800ea4c:	0151      	lsls	r1, r2, #5
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	440a      	add	r2, r1
 800ea52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	e169      	b.n	800ed32 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	69ba      	ldr	r2, [r7, #24]
 800ea6e:	0151      	lsls	r1, r2, #5
 800ea70:	69fa      	ldr	r2, [r7, #28]
 800ea72:	440a      	add	r2, r1
 800ea74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	791b      	ldrb	r3, [r3, #4]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d015      	beq.n	800eab2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 8151 	beq.w	800ed32 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	f003 030f 	and.w	r3, r3, #15
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	fa01 f303 	lsl.w	r3, r1, r3
 800eaa6:	69f9      	ldr	r1, [r7, #28]
 800eaa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eaac:	4313      	orrs	r3, r2
 800eaae:	634b      	str	r3, [r1, #52]	@ 0x34
 800eab0:	e13f      	b.n	800ed32 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d116      	bne.n	800eaf0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	015a      	lsls	r2, r3, #5
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	4413      	add	r3, r2
 800eaca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	69ba      	ldr	r2, [r7, #24]
 800ead2:	0151      	lsls	r1, r2, #5
 800ead4:	69fa      	ldr	r2, [r7, #28]
 800ead6:	440a      	add	r2, r1
 800ead8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eadc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eae0:	6013      	str	r3, [r2, #0]
 800eae2:	e015      	b.n	800eb10 <USB_EPStartXfer+0x310>
 800eae4:	e007ffff 	.word	0xe007ffff
 800eae8:	fff80000 	.word	0xfff80000
 800eaec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	015a      	lsls	r2, r3, #5
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	69ba      	ldr	r2, [r7, #24]
 800eb00:	0151      	lsls	r1, r2, #5
 800eb02:	69fa      	ldr	r2, [r7, #28]
 800eb04:	440a      	add	r2, r1
 800eb06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb0e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	68d9      	ldr	r1, [r3, #12]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	781a      	ldrb	r2, [r3, #0]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	b298      	uxth	r0, r3
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	4603      	mov	r3, r0
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f000 f9b9 	bl	800ee9c <USB_WritePacket>
 800eb2a:	e102      	b.n	800ed32 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	015a      	lsls	r2, r3, #5
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	4413      	add	r3, r2
 800eb34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb38:	691a      	ldr	r2, [r3, #16]
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	0159      	lsls	r1, r3, #5
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	440b      	add	r3, r1
 800eb42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb46:	4619      	mov	r1, r3
 800eb48:	4b7c      	ldr	r3, [pc, #496]	@ (800ed3c <USB_EPStartXfer+0x53c>)
 800eb4a:	4013      	ands	r3, r2
 800eb4c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	015a      	lsls	r2, r3, #5
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	4413      	add	r3, r2
 800eb56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5a:	691a      	ldr	r2, [r3, #16]
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	0159      	lsls	r1, r3, #5
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	440b      	add	r3, r1
 800eb64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4b75      	ldr	r3, [pc, #468]	@ (800ed40 <USB_EPStartXfer+0x540>)
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d12f      	bne.n	800ebd6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	689a      	ldr	r2, [r3, #8]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	689a      	ldr	r2, [r3, #8]
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	015a      	lsls	r2, r3, #5
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	4413      	add	r3, r2
 800eb96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb9a:	691a      	ldr	r2, [r3, #16]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eba4:	69b9      	ldr	r1, [r7, #24]
 800eba6:	0148      	lsls	r0, r1, #5
 800eba8:	69f9      	ldr	r1, [r7, #28]
 800ebaa:	4401      	add	r1, r0
 800ebac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	015a      	lsls	r2, r3, #5
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	4413      	add	r3, r2
 800ebbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	0151      	lsls	r1, r2, #5
 800ebc6:	69fa      	ldr	r2, [r7, #28]
 800ebc8:	440a      	add	r2, r1
 800ebca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ebd2:	6113      	str	r3, [r2, #16]
 800ebd4:	e05f      	b.n	800ec96 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d123      	bne.n	800ec26 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	015a      	lsls	r2, r3, #5
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebea:	691a      	ldr	r2, [r3, #16]
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebf4:	69b9      	ldr	r1, [r7, #24]
 800ebf6:	0148      	lsls	r0, r1, #5
 800ebf8:	69f9      	ldr	r1, [r7, #28]
 800ebfa:	4401      	add	r1, r0
 800ebfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec00:	4313      	orrs	r3, r2
 800ec02:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	015a      	lsls	r2, r3, #5
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	69ba      	ldr	r2, [r7, #24]
 800ec14:	0151      	lsls	r1, r2, #5
 800ec16:	69fa      	ldr	r2, [r7, #28]
 800ec18:	440a      	add	r2, r1
 800ec1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec22:	6113      	str	r3, [r2, #16]
 800ec24:	e037      	b.n	800ec96 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	691a      	ldr	r2, [r3, #16]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	4413      	add	r3, r2
 800ec30:	1e5a      	subs	r2, r3, #1
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec3a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	8afa      	ldrh	r2, [r7, #22]
 800ec42:	fb03 f202 	mul.w	r2, r3, r2
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	015a      	lsls	r2, r3, #5
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	4413      	add	r3, r2
 800ec52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec56:	691a      	ldr	r2, [r3, #16]
 800ec58:	8afb      	ldrh	r3, [r7, #22]
 800ec5a:	04d9      	lsls	r1, r3, #19
 800ec5c:	4b39      	ldr	r3, [pc, #228]	@ (800ed44 <USB_EPStartXfer+0x544>)
 800ec5e:	400b      	ands	r3, r1
 800ec60:	69b9      	ldr	r1, [r7, #24]
 800ec62:	0148      	lsls	r0, r1, #5
 800ec64:	69f9      	ldr	r1, [r7, #28]
 800ec66:	4401      	add	r1, r0
 800ec68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	015a      	lsls	r2, r3, #5
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	4413      	add	r3, r2
 800ec78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec7c:	691a      	ldr	r2, [r3, #16]
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec86:	69b9      	ldr	r1, [r7, #24]
 800ec88:	0148      	lsls	r0, r1, #5
 800ec8a:	69f9      	ldr	r1, [r7, #28]
 800ec8c:	4401      	add	r1, r0
 800ec8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec92:	4313      	orrs	r3, r2
 800ec94:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ec96:	79fb      	ldrb	r3, [r7, #7]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d10d      	bne.n	800ecb8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d009      	beq.n	800ecb8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	68d9      	ldr	r1, [r3, #12]
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb4:	460a      	mov	r2, r1
 800ecb6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	791b      	ldrb	r3, [r3, #4]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d128      	bne.n	800ed12 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d110      	bne.n	800ecf2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	015a      	lsls	r2, r3, #5
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	69ba      	ldr	r2, [r7, #24]
 800ece0:	0151      	lsls	r1, r2, #5
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	440a      	add	r2, r1
 800ece6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	e00f      	b.n	800ed12 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	015a      	lsls	r2, r3, #5
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	69ba      	ldr	r2, [r7, #24]
 800ed02:	0151      	lsls	r1, r2, #5
 800ed04:	69fa      	ldr	r2, [r7, #28]
 800ed06:	440a      	add	r2, r1
 800ed08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed10:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	0151      	lsls	r1, r2, #5
 800ed24:	69fa      	ldr	r2, [r7, #28]
 800ed26:	440a      	add	r2, r1
 800ed28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ed30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	fff80000 	.word	0xfff80000
 800ed40:	e007ffff 	.word	0xe007ffff
 800ed44:	1ff80000 	.word	0x1ff80000

0800ed48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b087      	sub	sp, #28
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ed52:	2300      	movs	r3, #0
 800ed54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ed56:	2300      	movs	r3, #0
 800ed58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	785b      	ldrb	r3, [r3, #1]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d14a      	bne.n	800edfc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed7e:	f040 8086 	bne.w	800ee8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	015a      	lsls	r2, r3, #5
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	7812      	ldrb	r2, [r2, #0]
 800ed96:	0151      	lsls	r1, r2, #5
 800ed98:	693a      	ldr	r2, [r7, #16]
 800ed9a:	440a      	add	r2, r1
 800ed9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eda0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eda4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	7812      	ldrb	r2, [r2, #0]
 800edba:	0151      	lsls	r1, r2, #5
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	440a      	add	r2, r1
 800edc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800edc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3301      	adds	r3, #1
 800edce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d902      	bls.n	800ede0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	75fb      	strb	r3, [r7, #23]
          break;
 800edde:	e056      	b.n	800ee8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	015a      	lsls	r2, r3, #5
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	4413      	add	r3, r2
 800edea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edf8:	d0e7      	beq.n	800edca <USB_EPStopXfer+0x82>
 800edfa:	e048      	b.n	800ee8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	015a      	lsls	r2, r3, #5
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	4413      	add	r3, r2
 800ee06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee14:	d13b      	bne.n	800ee8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	015a      	lsls	r2, r3, #5
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	4413      	add	r3, r2
 800ee20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	7812      	ldrb	r2, [r2, #0]
 800ee2a:	0151      	lsls	r1, r2, #5
 800ee2c:	693a      	ldr	r2, [r7, #16]
 800ee2e:	440a      	add	r2, r1
 800ee30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ee38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	015a      	lsls	r2, r3, #5
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	4413      	add	r3, r2
 800ee44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	7812      	ldrb	r2, [r2, #0]
 800ee4e:	0151      	lsls	r1, r2, #5
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	440a      	add	r2, r1
 800ee54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3301      	adds	r3, #1
 800ee62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d902      	bls.n	800ee74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	75fb      	strb	r3, [r7, #23]
          break;
 800ee72:	e00c      	b.n	800ee8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	015a      	lsls	r2, r3, #5
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee8c:	d0e7      	beq.n	800ee5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ee8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	371c      	adds	r7, #28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b089      	sub	sp, #36	@ 0x24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	4611      	mov	r1, r2
 800eea8:	461a      	mov	r2, r3
 800eeaa:	460b      	mov	r3, r1
 800eeac:	71fb      	strb	r3, [r7, #7]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800eeba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d123      	bne.n	800ef0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eec2:	88bb      	ldrh	r3, [r7, #4]
 800eec4:	3303      	adds	r3, #3
 800eec6:	089b      	lsrs	r3, r3, #2
 800eec8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eeca:	2300      	movs	r3, #0
 800eecc:	61bb      	str	r3, [r7, #24]
 800eece:	e018      	b.n	800ef02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	031a      	lsls	r2, r3, #12
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	4413      	add	r3, r2
 800eed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eedc:	461a      	mov	r2, r3
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	3301      	adds	r3, #1
 800eee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	3301      	adds	r3, #1
 800eeee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	3301      	adds	r3, #1
 800eef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	3301      	adds	r3, #1
 800eefa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	3301      	adds	r3, #1
 800ef00:	61bb      	str	r3, [r7, #24]
 800ef02:	69ba      	ldr	r2, [r7, #24]
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d3e2      	bcc.n	800eed0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3724      	adds	r7, #36	@ 0x24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b08b      	sub	sp, #44	@ 0x2c
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ef2e:	88fb      	ldrh	r3, [r7, #6]
 800ef30:	089b      	lsrs	r3, r3, #2
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ef3e:	2300      	movs	r3, #0
 800ef40:	623b      	str	r3, [r7, #32]
 800ef42:	e014      	b.n	800ef6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef52:	3301      	adds	r3, #1
 800ef54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef58:	3301      	adds	r3, #1
 800ef5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5e:	3301      	adds	r3, #1
 800ef60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef64:	3301      	adds	r3, #1
 800ef66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ef68:	6a3b      	ldr	r3, [r7, #32]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	623b      	str	r3, [r7, #32]
 800ef6e:	6a3a      	ldr	r2, [r7, #32]
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d3e6      	bcc.n	800ef44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef76:	8bfb      	ldrh	r3, [r7, #30]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d01e      	beq.n	800efba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef86:	461a      	mov	r2, r3
 800ef88:	f107 0310 	add.w	r3, r7, #16
 800ef8c:	6812      	ldr	r2, [r2, #0]
 800ef8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	fa22 f303 	lsr.w	r3, r2, r3
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa0:	701a      	strb	r2, [r3, #0]
      i++;
 800efa2:	6a3b      	ldr	r3, [r7, #32]
 800efa4:	3301      	adds	r3, #1
 800efa6:	623b      	str	r3, [r7, #32]
      pDest++;
 800efa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efaa:	3301      	adds	r3, #1
 800efac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800efae:	8bfb      	ldrh	r3, [r7, #30]
 800efb0:	3b01      	subs	r3, #1
 800efb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800efb4:	8bfb      	ldrh	r3, [r7, #30]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1ea      	bne.n	800ef90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	372c      	adds	r7, #44	@ 0x2c
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	785b      	ldrb	r3, [r3, #1]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d12c      	bne.n	800f03e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4413      	add	r3, r2
 800efec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	db12      	blt.n	800f01c <USB_EPSetStall+0x54>
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00f      	beq.n	800f01c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	015a      	lsls	r2, r3, #5
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	4413      	add	r3, r2
 800f004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	0151      	lsls	r1, r2, #5
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	440a      	add	r2, r1
 800f012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f016:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f01a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	015a      	lsls	r2, r3, #5
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4413      	add	r3, r2
 800f024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	0151      	lsls	r1, r2, #5
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	440a      	add	r2, r1
 800f032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f036:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f03a:	6013      	str	r3, [r2, #0]
 800f03c:	e02b      	b.n	800f096 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	015a      	lsls	r2, r3, #5
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	4413      	add	r3, r2
 800f046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	db12      	blt.n	800f076 <USB_EPSetStall+0xae>
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00f      	beq.n	800f076 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	015a      	lsls	r2, r3, #5
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	4413      	add	r3, r2
 800f05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	0151      	lsls	r1, r2, #5
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	440a      	add	r2, r1
 800f06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f070:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f074:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	015a      	lsls	r2, r3, #5
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	4413      	add	r3, r2
 800f07e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	0151      	lsls	r1, r2, #5
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	440a      	add	r2, r1
 800f08c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	785b      	ldrb	r3, [r3, #1]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d128      	bne.n	800f112 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	015a      	lsls	r2, r3, #5
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	0151      	lsls	r1, r2, #5
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	440a      	add	r2, r1
 800f0d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f0de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	791b      	ldrb	r3, [r3, #4]
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d003      	beq.n	800f0f0 <USB_EPClearStall+0x4c>
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	791b      	ldrb	r3, [r3, #4]
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d138      	bne.n	800f162 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	0151      	lsls	r1, r2, #5
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	440a      	add	r2, r1
 800f106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f10a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	e027      	b.n	800f162 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	015a      	lsls	r2, r3, #5
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	4413      	add	r3, r2
 800f11a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	0151      	lsls	r1, r2, #5
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	440a      	add	r2, r1
 800f128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f12c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f130:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	791b      	ldrb	r3, [r3, #4]
 800f136:	2b03      	cmp	r3, #3
 800f138:	d003      	beq.n	800f142 <USB_EPClearStall+0x9e>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	791b      	ldrb	r3, [r3, #4]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d10f      	bne.n	800f162 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	015a      	lsls	r2, r3, #5
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	4413      	add	r3, r2
 800f14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	0151      	lsls	r1, r2, #5
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	440a      	add	r2, r1
 800f158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f15c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f160:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	460b      	mov	r3, r1
 800f17a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f18e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f192:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	011b      	lsls	r3, r3, #4
 800f1a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f1a4:	68f9      	ldr	r1, [r7, #12]
 800f1a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1ea:	f023 0302 	bic.w	r3, r3, #2
 800f1ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3714      	adds	r7, #20
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1fe:	b480      	push	{r7}
 800f200:	b085      	sub	sp, #20
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f218:	f023 0303 	bic.w	r3, r3, #3
 800f21c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f22c:	f043 0302 	orr.w	r3, r3, #2
 800f230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f240:	b480      	push	{r7}
 800f242:	b085      	sub	sp, #20
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	695b      	ldr	r3, [r3, #20]
 800f24c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	4013      	ands	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f258:	68fb      	ldr	r3, [r7, #12]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f266:	b480      	push	{r7}
 800f268:	b085      	sub	sp, #20
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f278:	699b      	ldr	r3, [r3, #24]
 800f27a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f282:	69db      	ldr	r3, [r3, #28]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	4013      	ands	r3, r2
 800f288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	0c1b      	lsrs	r3, r3, #16
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b085      	sub	sp, #20
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2b6:	69db      	ldr	r3, [r3, #28]
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	b29b      	uxth	r3, r3
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3714      	adds	r7, #20
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b085      	sub	sp, #20
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f2de:	78fb      	ldrb	r3, [r7, #3]
 800f2e0:	015a      	lsls	r2, r3, #5
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f30a:	b480      	push	{r7}
 800f30c:	b087      	sub	sp, #28
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	460b      	mov	r3, r1
 800f314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f32c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f32e:	78fb      	ldrb	r3, [r7, #3]
 800f330:	f003 030f 	and.w	r3, r3, #15
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	fa22 f303 	lsr.w	r3, r2, r3
 800f33a:	01db      	lsls	r3, r3, #7
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	693a      	ldr	r2, [r7, #16]
 800f340:	4313      	orrs	r3, r2
 800f342:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f344:	78fb      	ldrb	r3, [r7, #3]
 800f346:	015a      	lsls	r2, r3, #5
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	4413      	add	r3, r2
 800f34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	693a      	ldr	r2, [r7, #16]
 800f354:	4013      	ands	r3, r2
 800f356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f358:	68bb      	ldr	r3, [r7, #8]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	371c      	adds	r7, #28
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f366:	b480      	push	{r7}
 800f368:	b083      	sub	sp, #12
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	f003 0301 	and.w	r3, r3, #1
}
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4b09      	ldr	r3, [pc, #36]	@ (800f3c8 <USB_ActivateSetup+0x44>)
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f3b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	fffff800 	.word	0xfffff800

0800f3cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b087      	sub	sp, #28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	607a      	str	r2, [r7, #4]
 800f3d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	333c      	adds	r3, #60	@ 0x3c
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	4a26      	ldr	r2, [pc, #152]	@ (800f484 <USB_EP0_OutStart+0xb8>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d90a      	bls.n	800f406 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f400:	d101      	bne.n	800f406 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f402:	2300      	movs	r3, #0
 800f404:	e037      	b.n	800f476 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f40c:	461a      	mov	r2, r3
 800f40e:	2300      	movs	r3, #0
 800f410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f42c:	691b      	ldr	r3, [r3, #16]
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f434:	f043 0318 	orr.w	r3, r3, #24
 800f438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f448:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f44c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f44e:	7afb      	ldrb	r3, [r7, #11]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d10f      	bne.n	800f474 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f45a:	461a      	mov	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f46e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	371c      	adds	r7, #28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	4f54300a 	.word	0x4f54300a

0800f488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	3301      	adds	r3, #1
 800f498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f4a0:	d901      	bls.n	800f4a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	e022      	b.n	800f4ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	daf2      	bge.n	800f494 <USB_CoreReset+0xc>

  count = 10U;
 800f4ae:	230a      	movs	r3, #10
 800f4b0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800f4b2:	e002      	b.n	800f4ba <USB_CoreReset+0x32>
  {
    count--;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1f9      	bne.n	800f4b4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	691b      	ldr	r3, [r3, #16]
 800f4c4:	f043 0201 	orr.w	r2, r3, #1
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f4d8:	d901      	bls.n	800f4de <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	e006      	b.n	800f4ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d0f0      	beq.n	800f4cc <USB_CoreReset+0x44>

  return HAL_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f504:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f508:	f002 fda6 	bl	8012058 <malloc>
 800f50c:	4603      	mov	r3, r0
 800f50e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d109      	bne.n	800f52a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	32b0      	adds	r2, #176	@ 0xb0
 800f520:	2100      	movs	r1, #0
 800f522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f526:	2302      	movs	r3, #2
 800f528:	e0d4      	b.n	800f6d4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f52a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f52e:	2100      	movs	r1, #0
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f004 fa5e 	bl	80139f2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	32b0      	adds	r2, #176	@ 0xb0
 800f540:	68f9      	ldr	r1, [r7, #12]
 800f542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	32b0      	adds	r2, #176	@ 0xb0
 800f550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	7c1b      	ldrb	r3, [r3, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d138      	bne.n	800f5d4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f562:	4b5e      	ldr	r3, [pc, #376]	@ (800f6dc <USBD_CDC_Init+0x1e4>)
 800f564:	7819      	ldrb	r1, [r3, #0]
 800f566:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f56a:	2202      	movs	r2, #2
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f002 fbc8 	bl	8011d02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f572:	4b5a      	ldr	r3, [pc, #360]	@ (800f6dc <USBD_CDC_Init+0x1e4>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	f003 020f 	and.w	r2, r3, #15
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	4613      	mov	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	440b      	add	r3, r1
 800f586:	3323      	adds	r3, #35	@ 0x23
 800f588:	2201      	movs	r2, #1
 800f58a:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f58c:	4b54      	ldr	r3, [pc, #336]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f58e:	7819      	ldrb	r1, [r3, #0]
 800f590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f594:	2202      	movs	r2, #2
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f002 fbb3 	bl	8011d02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f59c:	4b50      	ldr	r3, [pc, #320]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 020f 	and.w	r2, r3, #15
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	4413      	add	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	440b      	add	r3, r1
 800f5b0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f5b8:	4b4a      	ldr	r3, [pc, #296]	@ (800f6e4 <USBD_CDC_Init+0x1ec>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f003 020f 	and.w	r2, r3, #15
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	440b      	add	r3, r1
 800f5cc:	331c      	adds	r3, #28
 800f5ce:	2210      	movs	r2, #16
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	e035      	b.n	800f640 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f5d4:	4b41      	ldr	r3, [pc, #260]	@ (800f6dc <USBD_CDC_Init+0x1e4>)
 800f5d6:	7819      	ldrb	r1, [r3, #0]
 800f5d8:	2340      	movs	r3, #64	@ 0x40
 800f5da:	2202      	movs	r2, #2
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f002 fb90 	bl	8011d02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f5e2:	4b3e      	ldr	r3, [pc, #248]	@ (800f6dc <USBD_CDC_Init+0x1e4>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	f003 020f 	and.w	r2, r3, #15
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	440b      	add	r3, r1
 800f5f6:	3323      	adds	r3, #35	@ 0x23
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f5fc:	4b38      	ldr	r3, [pc, #224]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f5fe:	7819      	ldrb	r1, [r3, #0]
 800f600:	2340      	movs	r3, #64	@ 0x40
 800f602:	2202      	movs	r2, #2
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f002 fb7c 	bl	8011d02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f60a:	4b35      	ldr	r3, [pc, #212]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	f003 020f 	and.w	r2, r3, #15
 800f612:	6879      	ldr	r1, [r7, #4]
 800f614:	4613      	mov	r3, r2
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	4413      	add	r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	440b      	add	r3, r1
 800f61e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f622:	2201      	movs	r2, #1
 800f624:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f626:	4b2f      	ldr	r3, [pc, #188]	@ (800f6e4 <USBD_CDC_Init+0x1ec>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	f003 020f 	and.w	r2, r3, #15
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	4613      	mov	r3, r2
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4413      	add	r3, r2
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	440b      	add	r3, r1
 800f63a:	331c      	adds	r3, #28
 800f63c:	2210      	movs	r2, #16
 800f63e:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f640:	4b28      	ldr	r3, [pc, #160]	@ (800f6e4 <USBD_CDC_Init+0x1ec>)
 800f642:	7819      	ldrb	r1, [r3, #0]
 800f644:	2308      	movs	r3, #8
 800f646:	2203      	movs	r2, #3
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f002 fb5a 	bl	8011d02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f64e:	4b25      	ldr	r3, [pc, #148]	@ (800f6e4 <USBD_CDC_Init+0x1ec>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	f003 020f 	and.w	r2, r3, #15
 800f656:	6879      	ldr	r1, [r7, #4]
 800f658:	4613      	mov	r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	440b      	add	r3, r1
 800f662:	3323      	adds	r3, #35	@ 0x23
 800f664:	2201      	movs	r2, #1
 800f666:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	33b0      	adds	r3, #176	@ 0xb0
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2200      	movs	r2, #0
 800f690:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800f69e:	2302      	movs	r3, #2
 800f6a0:	e018      	b.n	800f6d4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	7c1b      	ldrb	r3, [r3, #16]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f6ac:	7819      	ldrb	r1, [r3, #0]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f6b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f002 fc11 	bl	8011ee0 <USBD_LL_PrepareReceive>
 800f6be:	e008      	b.n	800f6d2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f6c0:	4b07      	ldr	r3, [pc, #28]	@ (800f6e0 <USBD_CDC_Init+0x1e8>)
 800f6c2:	7819      	ldrb	r1, [r3, #0]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f6ca:	2340      	movs	r3, #64	@ 0x40
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f002 fc07 	bl	8011ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3710      	adds	r7, #16
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	20000093 	.word	0x20000093
 800f6e0:	20000094 	.word	0x20000094
 800f6e4:	20000095 	.word	0x20000095

0800f6e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f6f4:	4b3a      	ldr	r3, [pc, #232]	@ (800f7e0 <USBD_CDC_DeInit+0xf8>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f002 fb27 	bl	8011d4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f700:	4b37      	ldr	r3, [pc, #220]	@ (800f7e0 <USBD_CDC_DeInit+0xf8>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f003 020f 	and.w	r2, r3, #15
 800f708:	6879      	ldr	r1, [r7, #4]
 800f70a:	4613      	mov	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	440b      	add	r3, r1
 800f714:	3323      	adds	r3, #35	@ 0x23
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f71a:	4b32      	ldr	r3, [pc, #200]	@ (800f7e4 <USBD_CDC_DeInit+0xfc>)
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f002 fb14 	bl	8011d4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f726:	4b2f      	ldr	r3, [pc, #188]	@ (800f7e4 <USBD_CDC_DeInit+0xfc>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	f003 020f 	and.w	r2, r3, #15
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	4613      	mov	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f73e:	2200      	movs	r2, #0
 800f740:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f742:	4b29      	ldr	r3, [pc, #164]	@ (800f7e8 <USBD_CDC_DeInit+0x100>)
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	4619      	mov	r1, r3
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f002 fb00 	bl	8011d4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f74e:	4b26      	ldr	r3, [pc, #152]	@ (800f7e8 <USBD_CDC_DeInit+0x100>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	f003 020f 	and.w	r2, r3, #15
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	4613      	mov	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	440b      	add	r3, r1
 800f762:	3323      	adds	r3, #35	@ 0x23
 800f764:	2200      	movs	r2, #0
 800f766:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f768:	4b1f      	ldr	r3, [pc, #124]	@ (800f7e8 <USBD_CDC_DeInit+0x100>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 020f 	and.w	r2, r3, #15
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	4613      	mov	r3, r2
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	440b      	add	r3, r1
 800f77c:	331c      	adds	r3, #28
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	32b0      	adds	r2, #176	@ 0xb0
 800f78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d01f      	beq.n	800f7d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	33b0      	adds	r3, #176	@ 0xb0
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	32b0      	adds	r2, #176	@ 0xb0
 800f7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f002 fc56 	bl	8012068 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	32b0      	adds	r2, #176	@ 0xb0
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20000093 	.word	0x20000093
 800f7e4:	20000094 	.word	0x20000094
 800f7e8:	20000095 	.word	0x20000095

0800f7ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	32b0      	adds	r2, #176	@ 0xb0
 800f800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f804:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f806:	2300      	movs	r3, #0
 800f808:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f80a:	2300      	movs	r3, #0
 800f80c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f80e:	2300      	movs	r3, #0
 800f810:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d101      	bne.n	800f81c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f818:	2303      	movs	r3, #3
 800f81a:	e0bf      	b.n	800f99c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f824:	2b00      	cmp	r3, #0
 800f826:	d050      	beq.n	800f8ca <USBD_CDC_Setup+0xde>
 800f828:	2b20      	cmp	r3, #32
 800f82a:	f040 80af 	bne.w	800f98c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	88db      	ldrh	r3, [r3, #6]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d03a      	beq.n	800f8ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	b25b      	sxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	da1b      	bge.n	800f878 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	33b0      	adds	r3, #176	@ 0xb0
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	4413      	add	r3, r2
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f856:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f858:	683a      	ldr	r2, [r7, #0]
 800f85a:	88d2      	ldrh	r2, [r2, #6]
 800f85c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	88db      	ldrh	r3, [r3, #6]
 800f862:	2b07      	cmp	r3, #7
 800f864:	bf28      	it	cs
 800f866:	2307      	movcs	r3, #7
 800f868:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	89fa      	ldrh	r2, [r7, #14]
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f001 fdd3 	bl	801141c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f876:	e090      	b.n	800f99a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	785a      	ldrb	r2, [r3, #1]
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	88db      	ldrh	r3, [r3, #6]
 800f886:	2b3f      	cmp	r3, #63	@ 0x3f
 800f888:	d803      	bhi.n	800f892 <USBD_CDC_Setup+0xa6>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	88db      	ldrh	r3, [r3, #6]
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	e000      	b.n	800f894 <USBD_CDC_Setup+0xa8>
 800f892:	2240      	movs	r2, #64	@ 0x40
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f89a:	6939      	ldr	r1, [r7, #16]
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 fde8 	bl	801147a <USBD_CtlPrepareRx>
      break;
 800f8aa:	e076      	b.n	800f99a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	33b0      	adds	r3, #176	@ 0xb0
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	7850      	ldrb	r0, [r2, #1]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	4798      	blx	r3
      break;
 800f8c8:	e067      	b.n	800f99a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	785b      	ldrb	r3, [r3, #1]
 800f8ce:	2b0b      	cmp	r3, #11
 800f8d0:	d851      	bhi.n	800f976 <USBD_CDC_Setup+0x18a>
 800f8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8d8 <USBD_CDC_Setup+0xec>)
 800f8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d8:	0800f909 	.word	0x0800f909
 800f8dc:	0800f985 	.word	0x0800f985
 800f8e0:	0800f977 	.word	0x0800f977
 800f8e4:	0800f977 	.word	0x0800f977
 800f8e8:	0800f977 	.word	0x0800f977
 800f8ec:	0800f977 	.word	0x0800f977
 800f8f0:	0800f977 	.word	0x0800f977
 800f8f4:	0800f977 	.word	0x0800f977
 800f8f8:	0800f977 	.word	0x0800f977
 800f8fc:	0800f977 	.word	0x0800f977
 800f900:	0800f933 	.word	0x0800f933
 800f904:	0800f95d 	.word	0x0800f95d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b03      	cmp	r3, #3
 800f912:	d107      	bne.n	800f924 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f914:	f107 030a 	add.w	r3, r7, #10
 800f918:	2202      	movs	r2, #2
 800f91a:	4619      	mov	r1, r3
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f001 fd7d 	bl	801141c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f922:	e032      	b.n	800f98a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f924:	6839      	ldr	r1, [r7, #0]
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f001 fcfb 	bl	8011322 <USBD_CtlError>
            ret = USBD_FAIL;
 800f92c:	2303      	movs	r3, #3
 800f92e:	75fb      	strb	r3, [r7, #23]
          break;
 800f930:	e02b      	b.n	800f98a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d107      	bne.n	800f94e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f93e:	f107 030d 	add.w	r3, r7, #13
 800f942:	2201      	movs	r2, #1
 800f944:	4619      	mov	r1, r3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f001 fd68 	bl	801141c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f94c:	e01d      	b.n	800f98a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f94e:	6839      	ldr	r1, [r7, #0]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f001 fce6 	bl	8011322 <USBD_CtlError>
            ret = USBD_FAIL;
 800f956:	2303      	movs	r3, #3
 800f958:	75fb      	strb	r3, [r7, #23]
          break;
 800f95a:	e016      	b.n	800f98a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b03      	cmp	r3, #3
 800f966:	d00f      	beq.n	800f988 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f001 fcd9 	bl	8011322 <USBD_CtlError>
            ret = USBD_FAIL;
 800f970:	2303      	movs	r3, #3
 800f972:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f974:	e008      	b.n	800f988 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f001 fcd2 	bl	8011322 <USBD_CtlError>
          ret = USBD_FAIL;
 800f97e:	2303      	movs	r3, #3
 800f980:	75fb      	strb	r3, [r7, #23]
          break;
 800f982:	e002      	b.n	800f98a <USBD_CDC_Setup+0x19e>
          break;
 800f984:	bf00      	nop
 800f986:	e008      	b.n	800f99a <USBD_CDC_Setup+0x1ae>
          break;
 800f988:	bf00      	nop
      }
      break;
 800f98a:	e006      	b.n	800f99a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f001 fcc7 	bl	8011322 <USBD_CtlError>
      ret = USBD_FAIL;
 800f994:	2303      	movs	r3, #3
 800f996:	75fb      	strb	r3, [r7, #23]
      break;
 800f998:	bf00      	nop
  }

  return (uint8_t)ret;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	32b0      	adds	r2, #176	@ 0xb0
 800f9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	e065      	b.n	800fa9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	32b0      	adds	r2, #176	@ 0xb0
 800f9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	f003 020f 	and.w	r2, r3, #15
 800f9e4:	6879      	ldr	r1, [r7, #4]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3314      	adds	r3, #20
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d02f      	beq.n	800fa58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f9f8:	78fb      	ldrb	r3, [r7, #3]
 800f9fa:	f003 020f 	and.w	r2, r3, #15
 800f9fe:	6879      	ldr	r1, [r7, #4]
 800fa00:	4613      	mov	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	440b      	add	r3, r1
 800fa0a:	3314      	adds	r3, #20
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	78fb      	ldrb	r3, [r7, #3]
 800fa10:	f003 010f 	and.w	r1, r3, #15
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	460b      	mov	r3, r1
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	440b      	add	r3, r1
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4403      	add	r3, r0
 800fa20:	331c      	adds	r3, #28
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	fbb2 f1f3 	udiv	r1, r2, r3
 800fa28:	fb01 f303 	mul.w	r3, r1, r3
 800fa2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d112      	bne.n	800fa58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fa32:	78fb      	ldrb	r3, [r7, #3]
 800fa34:	f003 020f 	and.w	r2, r3, #15
 800fa38:	6879      	ldr	r1, [r7, #4]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4413      	add	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	440b      	add	r3, r1
 800fa44:	3314      	adds	r3, #20
 800fa46:	2200      	movs	r2, #0
 800fa48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fa4a:	78f9      	ldrb	r1, [r7, #3]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	2200      	movs	r2, #0
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f002 fa24 	bl	8011e9e <USBD_LL_Transmit>
 800fa56:	e01f      	b.n	800fa98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	33b0      	adds	r3, #176	@ 0xb0
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	691b      	ldr	r3, [r3, #16]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d010      	beq.n	800fa98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	33b0      	adds	r3, #176	@ 0xb0
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fa94:	78fa      	ldrb	r2, [r7, #3]
 800fa96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b084      	sub	sp, #16
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	460b      	mov	r3, r1
 800faac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	32b0      	adds	r2, #176	@ 0xb0
 800fab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fabc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	32b0      	adds	r2, #176	@ 0xb0
 800fac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fad0:	2303      	movs	r3, #3
 800fad2:	e01a      	b.n	800fb0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fad4:	78fb      	ldrb	r3, [r7, #3]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f002 fa22 	bl	8011f22 <USBD_LL_GetRxDataSize>
 800fade:	4602      	mov	r2, r0
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	33b0      	adds	r3, #176	@ 0xb0
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	4413      	add	r3, r2
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fb04:	4611      	mov	r1, r2
 800fb06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b084      	sub	sp, #16
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	32b0      	adds	r2, #176	@ 0xb0
 800fb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb30:	2303      	movs	r3, #3
 800fb32:	e024      	b.n	800fb7e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	33b0      	adds	r3, #176	@ 0xb0
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4413      	add	r3, r2
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d019      	beq.n	800fb7c <USBD_CDC_EP0_RxReady+0x6a>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fb4e:	2bff      	cmp	r3, #255	@ 0xff
 800fb50:	d014      	beq.n	800fb7c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	33b0      	adds	r3, #176	@ 0xb0
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	4413      	add	r3, r2
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fb6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fb72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	22ff      	movs	r2, #255	@ 0xff
 800fb78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fb90:	2182      	movs	r1, #130	@ 0x82
 800fb92:	4818      	ldr	r0, [pc, #96]	@ (800fbf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fb94:	f000 fd62 	bl	801065c <USBD_GetEpDesc>
 800fb98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	4815      	ldr	r0, [pc, #84]	@ (800fbf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fb9e:	f000 fd5d 	bl	801065c <USBD_GetEpDesc>
 800fba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fba4:	2181      	movs	r1, #129	@ 0x81
 800fba6:	4813      	ldr	r0, [pc, #76]	@ (800fbf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fba8:	f000 fd58 	bl	801065c <USBD_GetEpDesc>
 800fbac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2210      	movs	r2, #16
 800fbb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d006      	beq.n	800fbce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fbc8:	711a      	strb	r2, [r3, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d006      	beq.n	800fbe2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fbdc:	711a      	strb	r2, [r3, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2243      	movs	r2, #67	@ 0x43
 800fbe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fbe8:	4b02      	ldr	r3, [pc, #8]	@ (800fbf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	20000050 	.word	0x20000050

0800fbf8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fc00:	2182      	movs	r1, #130	@ 0x82
 800fc02:	4818      	ldr	r0, [pc, #96]	@ (800fc64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc04:	f000 fd2a 	bl	801065c <USBD_GetEpDesc>
 800fc08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc0a:	2101      	movs	r1, #1
 800fc0c:	4815      	ldr	r0, [pc, #84]	@ (800fc64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc0e:	f000 fd25 	bl	801065c <USBD_GetEpDesc>
 800fc12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc14:	2181      	movs	r1, #129	@ 0x81
 800fc16:	4813      	ldr	r0, [pc, #76]	@ (800fc64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc18:	f000 fd20 	bl	801065c <USBD_GetEpDesc>
 800fc1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	2210      	movs	r2, #16
 800fc28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d006      	beq.n	800fc3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	2200      	movs	r2, #0
 800fc34:	711a      	strb	r2, [r3, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f042 0202 	orr.w	r2, r2, #2
 800fc3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d006      	beq.n	800fc52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2200      	movs	r2, #0
 800fc48:	711a      	strb	r2, [r3, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f042 0202 	orr.w	r2, r2, #2
 800fc50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2243      	movs	r2, #67	@ 0x43
 800fc56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fc58:	4b02      	ldr	r3, [pc, #8]	@ (800fc64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20000050 	.word	0x20000050

0800fc68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fc70:	2182      	movs	r1, #130	@ 0x82
 800fc72:	4818      	ldr	r0, [pc, #96]	@ (800fcd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fc74:	f000 fcf2 	bl	801065c <USBD_GetEpDesc>
 800fc78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	4815      	ldr	r0, [pc, #84]	@ (800fcd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fc7e:	f000 fced 	bl	801065c <USBD_GetEpDesc>
 800fc82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc84:	2181      	movs	r1, #129	@ 0x81
 800fc86:	4813      	ldr	r0, [pc, #76]	@ (800fcd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fc88:	f000 fce8 	bl	801065c <USBD_GetEpDesc>
 800fc8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	2210      	movs	r2, #16
 800fc98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d006      	beq.n	800fcae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fca8:	711a      	strb	r2, [r3, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d006      	beq.n	800fcc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fcbc:	711a      	strb	r2, [r3, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2243      	movs	r2, #67	@ 0x43
 800fcc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fcc8:	4b02      	ldr	r3, [pc, #8]	@ (800fcd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000050 	.word	0x20000050

0800fcd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	220a      	movs	r2, #10
 800fce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fce6:	4b03      	ldr	r3, [pc, #12]	@ (800fcf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	2000000c 	.word	0x2000000c

0800fcf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d101      	bne.n	800fd0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e009      	b.n	800fd20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	33b0      	adds	r3, #176	@ 0xb0
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fd1e:	2300      	movs	r3, #0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b087      	sub	sp, #28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	32b0      	adds	r2, #176	@ 0xb0
 800fd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fd4e:	2303      	movs	r3, #3
 800fd50:	e008      	b.n	800fd64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	68ba      	ldr	r2, [r7, #8]
 800fd56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fd62:	2300      	movs	r3, #0
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	371c      	adds	r7, #28
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	32b0      	adds	r2, #176	@ 0xb0
 800fd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fd90:	2303      	movs	r3, #3
 800fd92:	e004      	b.n	800fd9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3714      	adds	r7, #20
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
	...

0800fdac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	32b0      	adds	r2, #176	@ 0xb0
 800fdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d101      	bne.n	800fdd2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fdce:	2303      	movs	r3, #3
 800fdd0:	e025      	b.n	800fe1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d11f      	bne.n	800fe1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2201      	movs	r2, #1
 800fde0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fde4:	4b10      	ldr	r3, [pc, #64]	@ (800fe28 <USBD_CDC_TransmitPacket+0x7c>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	f003 020f 	and.w	r2, r3, #15
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	4413      	add	r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4403      	add	r3, r0
 800fdfe:	3314      	adds	r3, #20
 800fe00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fe02:	4b09      	ldr	r3, [pc, #36]	@ (800fe28 <USBD_CDC_TransmitPacket+0x7c>)
 800fe04:	7819      	ldrb	r1, [r3, #0]
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f002 f843 	bl	8011e9e <USBD_LL_Transmit>

    ret = USBD_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	20000093 	.word	0x20000093

0800fe2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	32b0      	adds	r2, #176	@ 0xb0
 800fe3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	32b0      	adds	r2, #176	@ 0xb0
 800fe4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fe56:	2303      	movs	r3, #3
 800fe58:	e018      	b.n	800fe8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7c1b      	ldrb	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d10a      	bne.n	800fe78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fe62:	4b0c      	ldr	r3, [pc, #48]	@ (800fe94 <USBD_CDC_ReceivePacket+0x68>)
 800fe64:	7819      	ldrb	r1, [r3, #0]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fe6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f002 f835 	bl	8011ee0 <USBD_LL_PrepareReceive>
 800fe76:	e008      	b.n	800fe8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fe78:	4b06      	ldr	r3, [pc, #24]	@ (800fe94 <USBD_CDC_ReceivePacket+0x68>)
 800fe7a:	7819      	ldrb	r1, [r3, #0]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fe82:	2340      	movs	r3, #64	@ 0x40
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f002 f82b 	bl	8011ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	20000094 	.word	0x20000094

0800fe98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	e01f      	b.n	800fef0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d003      	beq.n	800fed6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	79fa      	ldrb	r2, [r7, #7]
 800fee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f001 fea1 	bl	8011c2c <USBD_LL_Init>
 800feea:	4603      	mov	r3, r0
 800feec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800feee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3718      	adds	r7, #24
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff02:	2300      	movs	r3, #0
 800ff04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e025      	b.n	800ff5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	32ae      	adds	r2, #174	@ 0xae
 800ff22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00f      	beq.n	800ff4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	32ae      	adds	r2, #174	@ 0xae
 800ff36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff3c:	f107 020e 	add.w	r2, r7, #14
 800ff40:	4610      	mov	r0, r2
 800ff42:	4798      	blx	r3
 800ff44:	4602      	mov	r2, r0
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f001 fead 	bl	8011ccc <USBD_LL_Start>
 800ff72:	4603      	mov	r3, r0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b084      	sub	sp, #16
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d009      	beq.n	800ffc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	78fa      	ldrb	r2, [r7, #3]
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	4798      	blx	r3
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ffc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	78fa      	ldrb	r2, [r7, #3]
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	4798      	blx	r3
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fff0:	2303      	movs	r3, #3
 800fff2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	4618      	mov	r0, r3
 8010012:	f001 f94c 	bl	80112ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010024:	461a      	mov	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010032:	f003 031f 	and.w	r3, r3, #31
 8010036:	2b02      	cmp	r3, #2
 8010038:	d01a      	beq.n	8010070 <USBD_LL_SetupStage+0x72>
 801003a:	2b02      	cmp	r3, #2
 801003c:	d822      	bhi.n	8010084 <USBD_LL_SetupStage+0x86>
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <USBD_LL_SetupStage+0x4a>
 8010042:	2b01      	cmp	r3, #1
 8010044:	d00a      	beq.n	801005c <USBD_LL_SetupStage+0x5e>
 8010046:	e01d      	b.n	8010084 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801004e:	4619      	mov	r1, r3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 fb77 	bl	8010744 <USBD_StdDevReq>
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]
      break;
 801005a:	e020      	b.n	801009e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fbdf 	bl	8010828 <USBD_StdItfReq>
 801006a:	4603      	mov	r3, r0
 801006c:	73fb      	strb	r3, [r7, #15]
      break;
 801006e:	e016      	b.n	801009e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010076:	4619      	mov	r1, r3
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 fc41 	bl	8010900 <USBD_StdEPReq>
 801007e:	4603      	mov	r3, r0
 8010080:	73fb      	strb	r3, [r7, #15]
      break;
 8010082:	e00c      	b.n	801009e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801008a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801008e:	b2db      	uxtb	r3, r3
 8010090:	4619      	mov	r1, r3
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f001 fe7a 	bl	8011d8c <USBD_LL_StallEP>
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]
      break;
 801009c:	bf00      	nop
  }

  return ret;
 801009e:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	460b      	mov	r3, r1
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80100b6:	2300      	movs	r3, #0
 80100b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80100ba:	7afb      	ldrb	r3, [r7, #11]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d177      	bne.n	80101b0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80100c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	f040 80a1 	bne.w	8010216 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	8992      	ldrh	r2, [r2, #12]
 80100dc:	4293      	cmp	r3, r2
 80100de:	d91c      	bls.n	801011a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	693a      	ldr	r2, [r7, #16]
 80100e6:	8992      	ldrh	r2, [r2, #12]
 80100e8:	1a9a      	subs	r2, r3, r2
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	8992      	ldrh	r2, [r2, #12]
 80100f6:	441a      	add	r2, r3
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	6919      	ldr	r1, [r3, #16]
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	899b      	ldrh	r3, [r3, #12]
 8010104:	461a      	mov	r2, r3
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	4293      	cmp	r3, r2
 801010c:	bf38      	it	cc
 801010e:	4613      	movcc	r3, r2
 8010110:	461a      	mov	r2, r3
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f001 f9d2 	bl	80114bc <USBD_CtlContinueRx>
 8010118:	e07d      	b.n	8010216 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010120:	f003 031f 	and.w	r3, r3, #31
 8010124:	2b02      	cmp	r3, #2
 8010126:	d014      	beq.n	8010152 <USBD_LL_DataOutStage+0xaa>
 8010128:	2b02      	cmp	r3, #2
 801012a:	d81d      	bhi.n	8010168 <USBD_LL_DataOutStage+0xc0>
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <USBD_LL_DataOutStage+0x8e>
 8010130:	2b01      	cmp	r3, #1
 8010132:	d003      	beq.n	801013c <USBD_LL_DataOutStage+0x94>
 8010134:	e018      	b.n	8010168 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010136:	2300      	movs	r3, #0
 8010138:	75bb      	strb	r3, [r7, #22]
            break;
 801013a:	e018      	b.n	801016e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010142:	b2db      	uxtb	r3, r3
 8010144:	4619      	mov	r1, r3
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f000 fa6e 	bl	8010628 <USBD_CoreFindIF>
 801014c:	4603      	mov	r3, r0
 801014e:	75bb      	strb	r3, [r7, #22]
            break;
 8010150:	e00d      	b.n	801016e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010158:	b2db      	uxtb	r3, r3
 801015a:	4619      	mov	r1, r3
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 fa70 	bl	8010642 <USBD_CoreFindEP>
 8010162:	4603      	mov	r3, r0
 8010164:	75bb      	strb	r3, [r7, #22]
            break;
 8010166:	e002      	b.n	801016e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010168:	2300      	movs	r3, #0
 801016a:	75bb      	strb	r3, [r7, #22]
            break;
 801016c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801016e:	7dbb      	ldrb	r3, [r7, #22]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d119      	bne.n	80101a8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801017a:	b2db      	uxtb	r3, r3
 801017c:	2b03      	cmp	r3, #3
 801017e:	d113      	bne.n	80101a8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010180:	7dba      	ldrb	r2, [r7, #22]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	32ae      	adds	r2, #174	@ 0xae
 8010186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00b      	beq.n	80101a8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8010190:	7dba      	ldrb	r2, [r7, #22]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010198:	7dba      	ldrb	r2, [r7, #22]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	32ae      	adds	r2, #174	@ 0xae
 801019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f001 f998 	bl	80114de <USBD_CtlSendStatus>
 80101ae:	e032      	b.n	8010216 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80101b0:	7afb      	ldrb	r3, [r7, #11]
 80101b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f000 fa41 	bl	8010642 <USBD_CoreFindEP>
 80101c0:	4603      	mov	r3, r0
 80101c2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80101c4:	7dbb      	ldrb	r3, [r7, #22]
 80101c6:	2bff      	cmp	r3, #255	@ 0xff
 80101c8:	d025      	beq.n	8010216 <USBD_LL_DataOutStage+0x16e>
 80101ca:	7dbb      	ldrb	r3, [r7, #22]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d122      	bne.n	8010216 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b03      	cmp	r3, #3
 80101da:	d117      	bne.n	801020c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80101dc:	7dba      	ldrb	r2, [r7, #22]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	32ae      	adds	r2, #174	@ 0xae
 80101e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e6:	699b      	ldr	r3, [r3, #24]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00f      	beq.n	801020c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80101ec:	7dba      	ldrb	r2, [r7, #22]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80101f4:	7dba      	ldrb	r2, [r7, #22]
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	32ae      	adds	r2, #174	@ 0xae
 80101fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fe:	699b      	ldr	r3, [r3, #24]
 8010200:	7afa      	ldrb	r2, [r7, #11]
 8010202:	4611      	mov	r1, r2
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	4798      	blx	r3
 8010208:	4603      	mov	r3, r0
 801020a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801020c:	7dfb      	ldrb	r3, [r7, #23]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	e000      	b.n	8010218 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3718      	adds	r7, #24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	460b      	mov	r3, r1
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 801022e:	7afb      	ldrb	r3, [r7, #11]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d178      	bne.n	8010326 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	3314      	adds	r3, #20
 8010238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010240:	2b02      	cmp	r3, #2
 8010242:	d163      	bne.n	801030c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	693a      	ldr	r2, [r7, #16]
 801024a:	8992      	ldrh	r2, [r2, #12]
 801024c:	4293      	cmp	r3, r2
 801024e:	d91c      	bls.n	801028a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	8992      	ldrh	r2, [r2, #12]
 8010258:	1a9a      	subs	r2, r3, r2
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	8992      	ldrh	r2, [r2, #12]
 8010266:	441a      	add	r2, r3
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	6919      	ldr	r1, [r3, #16]
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	461a      	mov	r2, r3
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f001 f8ee 	bl	8011458 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801027c:	2300      	movs	r3, #0
 801027e:	2200      	movs	r2, #0
 8010280:	2100      	movs	r1, #0
 8010282:	68f8      	ldr	r0, [r7, #12]
 8010284:	f001 fe2c 	bl	8011ee0 <USBD_LL_PrepareReceive>
 8010288:	e040      	b.n	801030c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	899b      	ldrh	r3, [r3, #12]
 801028e:	461a      	mov	r2, r3
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	429a      	cmp	r2, r3
 8010296:	d11c      	bne.n	80102d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d316      	bcc.n	80102d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d20f      	bcs.n	80102d2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80102b2:	2200      	movs	r2, #0
 80102b4:	2100      	movs	r1, #0
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f001 f8ce 	bl	8011458 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102c4:	2300      	movs	r3, #0
 80102c6:	2200      	movs	r2, #0
 80102c8:	2100      	movs	r1, #0
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f001 fe08 	bl	8011ee0 <USBD_LL_PrepareReceive>
 80102d0:	e01c      	b.n	801030c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b03      	cmp	r3, #3
 80102dc:	d10f      	bne.n	80102fe <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d009      	beq.n	80102fe <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80102fe:	2180      	movs	r1, #128	@ 0x80
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f001 fd43 	bl	8011d8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f001 f8fc 	bl	8011504 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d03a      	beq.n	801038c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f7ff fe30 	bl	800ff7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010324:	e032      	b.n	801038c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010326:	7afb      	ldrb	r3, [r7, #11]
 8010328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801032c:	b2db      	uxtb	r3, r3
 801032e:	4619      	mov	r1, r3
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f000 f986 	bl	8010642 <USBD_CoreFindEP>
 8010336:	4603      	mov	r3, r0
 8010338:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801033a:	7dfb      	ldrb	r3, [r7, #23]
 801033c:	2bff      	cmp	r3, #255	@ 0xff
 801033e:	d025      	beq.n	801038c <USBD_LL_DataInStage+0x16c>
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d122      	bne.n	801038c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2b03      	cmp	r3, #3
 8010350:	d11c      	bne.n	801038c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010352:	7dfa      	ldrb	r2, [r7, #23]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	32ae      	adds	r2, #174	@ 0xae
 8010358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801035c:	695b      	ldr	r3, [r3, #20]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d014      	beq.n	801038c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8010362:	7dfa      	ldrb	r2, [r7, #23]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801036a:	7dfa      	ldrb	r2, [r7, #23]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	32ae      	adds	r2, #174	@ 0xae
 8010370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010374:	695b      	ldr	r3, [r3, #20]
 8010376:	7afa      	ldrb	r2, [r7, #11]
 8010378:	4611      	mov	r1, r2
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	4798      	blx	r3
 801037e:	4603      	mov	r3, r0
 8010380:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010382:	7dbb      	ldrb	r3, [r7, #22]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8010388:	7dbb      	ldrb	r3, [r7, #22]
 801038a:	e000      	b.n	801038e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3718      	adds	r7, #24
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}

08010396 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010396:	b580      	push	{r7, lr}
 8010398:	b084      	sub	sp, #16
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d014      	beq.n	80103fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00e      	beq.n	80103fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	6852      	ldr	r2, [r2, #4]
 80103ea:	b2d2      	uxtb	r2, r2
 80103ec:	4611      	mov	r1, r2
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	4798      	blx	r3
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d001      	beq.n	80103fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80103f8:	2303      	movs	r3, #3
 80103fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103fc:	2340      	movs	r3, #64	@ 0x40
 80103fe:	2200      	movs	r2, #0
 8010400:	2100      	movs	r1, #0
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f001 fc7d 	bl	8011d02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2240      	movs	r2, #64	@ 0x40
 8010414:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010418:	2340      	movs	r3, #64	@ 0x40
 801041a:	2200      	movs	r2, #0
 801041c:	2180      	movs	r1, #128	@ 0x80
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f001 fc6f 	bl	8011d02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2201      	movs	r2, #1
 8010428:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2240      	movs	r2, #64	@ 0x40
 8010430:	841a      	strh	r2, [r3, #32]

  return ret;
 8010432:	7bfb      	ldrb	r3, [r7, #15]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	78fa      	ldrb	r2, [r7, #3]
 801044c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801046a:	b2db      	uxtb	r3, r3
 801046c:	2b04      	cmp	r3, #4
 801046e:	d006      	beq.n	801047e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010476:	b2da      	uxtb	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2204      	movs	r2, #4
 8010482:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b04      	cmp	r3, #4
 80104a6:	d106      	bne.n	80104b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d110      	bne.n	80104fa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00b      	beq.n	80104fa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104e8:	69db      	ldr	r3, [r3, #28]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d005      	beq.n	80104fa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104f4:	69db      	ldr	r3, [r3, #28]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	32ae      	adds	r2, #174	@ 0xae
 801051a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010522:	2303      	movs	r3, #3
 8010524:	e01c      	b.n	8010560 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b03      	cmp	r3, #3
 8010530:	d115      	bne.n	801055e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	32ae      	adds	r2, #174	@ 0xae
 801053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010540:	6a1b      	ldr	r3, [r3, #32]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00b      	beq.n	801055e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	32ae      	adds	r2, #174	@ 0xae
 8010550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010554:	6a1b      	ldr	r3, [r3, #32]
 8010556:	78fa      	ldrb	r2, [r7, #3]
 8010558:	4611      	mov	r1, r2
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	32ae      	adds	r2, #174	@ 0xae
 801057e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010586:	2303      	movs	r3, #3
 8010588:	e01c      	b.n	80105c4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010590:	b2db      	uxtb	r3, r3
 8010592:	2b03      	cmp	r3, #3
 8010594:	d115      	bne.n	80105c2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	32ae      	adds	r2, #174	@ 0xae
 80105a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00b      	beq.n	80105c2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	32ae      	adds	r2, #174	@ 0xae
 80105b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105ba:	78fa      	ldrb	r2, [r7, #3]
 80105bc:	4611      	mov	r1, r2
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr

080105e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b084      	sub	sp, #16
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00e      	beq.n	801061e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	6852      	ldr	r2, [r2, #4]
 801060c:	b2d2      	uxtb	r2, r2
 801060e:	4611      	mov	r1, r2
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	4798      	blx	r3
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d001      	beq.n	801061e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801061a:	2303      	movs	r3, #3
 801061c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010634:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010636:	4618      	mov	r0, r3
 8010638:	370c      	adds	r7, #12
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010642:	b480      	push	{r7}
 8010644:	b083      	sub	sp, #12
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	460b      	mov	r3, r1
 801064c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801064e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010650:	4618      	mov	r0, r3
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	460b      	mov	r3, r1
 8010666:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010670:	2300      	movs	r3, #0
 8010672:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	885b      	ldrh	r3, [r3, #2]
 8010678:	b29b      	uxth	r3, r3
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	7812      	ldrb	r2, [r2, #0]
 801067e:	4293      	cmp	r3, r2
 8010680:	d91f      	bls.n	80106c2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010688:	e013      	b.n	80106b2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801068a:	f107 030a 	add.w	r3, r7, #10
 801068e:	4619      	mov	r1, r3
 8010690:	6978      	ldr	r0, [r7, #20]
 8010692:	f000 f81b 	bl	80106cc <USBD_GetNextDesc>
 8010696:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	785b      	ldrb	r3, [r3, #1]
 801069c:	2b05      	cmp	r3, #5
 801069e:	d108      	bne.n	80106b2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	789b      	ldrb	r3, [r3, #2]
 80106a8:	78fa      	ldrb	r2, [r7, #3]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d008      	beq.n	80106c0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	885b      	ldrh	r3, [r3, #2]
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	897b      	ldrh	r3, [r7, #10]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d8e5      	bhi.n	801068a <USBD_GetEpDesc+0x2e>
 80106be:	e000      	b.n	80106c2 <USBD_GetEpDesc+0x66>
          break;
 80106c0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80106c2:	693b      	ldr	r3, [r7, #16]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	7812      	ldrb	r2, [r2, #0]
 80106e2:	4413      	add	r3, r2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	461a      	mov	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	4413      	add	r3, r2
 80106f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80106f6:	68fb      	ldr	r3, [r7, #12]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3714      	adds	r7, #20
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010704:	b480      	push	{r7}
 8010706:	b087      	sub	sp, #28
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	3301      	adds	r3, #1
 801071a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010722:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010726:	021b      	lsls	r3, r3, #8
 8010728:	b21a      	sxth	r2, r3
 801072a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801072e:	4313      	orrs	r3, r2
 8010730:	b21b      	sxth	r3, r3
 8010732:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010734:	89fb      	ldrh	r3, [r7, #14]
}
 8010736:	4618      	mov	r0, r3
 8010738:	371c      	adds	r7, #28
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
	...

08010744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801075a:	2b40      	cmp	r3, #64	@ 0x40
 801075c:	d005      	beq.n	801076a <USBD_StdDevReq+0x26>
 801075e:	2b40      	cmp	r3, #64	@ 0x40
 8010760:	d857      	bhi.n	8010812 <USBD_StdDevReq+0xce>
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00f      	beq.n	8010786 <USBD_StdDevReq+0x42>
 8010766:	2b20      	cmp	r3, #32
 8010768:	d153      	bne.n	8010812 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	32ae      	adds	r2, #174	@ 0xae
 8010774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010778:	689b      	ldr	r3, [r3, #8]
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	4798      	blx	r3
 8010780:	4603      	mov	r3, r0
 8010782:	73fb      	strb	r3, [r7, #15]
      break;
 8010784:	e04a      	b.n	801081c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	785b      	ldrb	r3, [r3, #1]
 801078a:	2b09      	cmp	r3, #9
 801078c:	d83b      	bhi.n	8010806 <USBD_StdDevReq+0xc2>
 801078e:	a201      	add	r2, pc, #4	@ (adr r2, 8010794 <USBD_StdDevReq+0x50>)
 8010790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010794:	080107e9 	.word	0x080107e9
 8010798:	080107fd 	.word	0x080107fd
 801079c:	08010807 	.word	0x08010807
 80107a0:	080107f3 	.word	0x080107f3
 80107a4:	08010807 	.word	0x08010807
 80107a8:	080107c7 	.word	0x080107c7
 80107ac:	080107bd 	.word	0x080107bd
 80107b0:	08010807 	.word	0x08010807
 80107b4:	080107df 	.word	0x080107df
 80107b8:	080107d1 	.word	0x080107d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80107bc:	6839      	ldr	r1, [r7, #0]
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 fa3e 	bl	8010c40 <USBD_GetDescriptor>
          break;
 80107c4:	e024      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 fbcd 	bl	8010f68 <USBD_SetAddress>
          break;
 80107ce:	e01f      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 fc0c 	bl	8010ff0 <USBD_SetConfig>
 80107d8:	4603      	mov	r3, r0
 80107da:	73fb      	strb	r3, [r7, #15]
          break;
 80107dc:	e018      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fcaf 	bl	8011144 <USBD_GetConfig>
          break;
 80107e6:	e013      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 fce0 	bl	80111b0 <USBD_GetStatus>
          break;
 80107f0:	e00e      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 fd0f 	bl	8011218 <USBD_SetFeature>
          break;
 80107fa:	e009      	b.n	8010810 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80107fc:	6839      	ldr	r1, [r7, #0]
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 fd33 	bl	801126a <USBD_ClrFeature>
          break;
 8010804:	e004      	b.n	8010810 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 fd8a 	bl	8011322 <USBD_CtlError>
          break;
 801080e:	bf00      	nop
      }
      break;
 8010810:	e004      	b.n	801081c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f000 fd84 	bl	8011322 <USBD_CtlError>
      break;
 801081a:	bf00      	nop
  }

  return ret;
 801081c:	7bfb      	ldrb	r3, [r7, #15]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop

08010828 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801083e:	2b40      	cmp	r3, #64	@ 0x40
 8010840:	d005      	beq.n	801084e <USBD_StdItfReq+0x26>
 8010842:	2b40      	cmp	r3, #64	@ 0x40
 8010844:	d852      	bhi.n	80108ec <USBD_StdItfReq+0xc4>
 8010846:	2b00      	cmp	r3, #0
 8010848:	d001      	beq.n	801084e <USBD_StdItfReq+0x26>
 801084a:	2b20      	cmp	r3, #32
 801084c:	d14e      	bne.n	80108ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010854:	b2db      	uxtb	r3, r3
 8010856:	3b01      	subs	r3, #1
 8010858:	2b02      	cmp	r3, #2
 801085a:	d840      	bhi.n	80108de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	889b      	ldrh	r3, [r3, #4]
 8010860:	b2db      	uxtb	r3, r3
 8010862:	2b01      	cmp	r3, #1
 8010864:	d836      	bhi.n	80108d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	889b      	ldrh	r3, [r3, #4]
 801086a:	b2db      	uxtb	r3, r3
 801086c:	4619      	mov	r1, r3
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff feda 	bl	8010628 <USBD_CoreFindIF>
 8010874:	4603      	mov	r3, r0
 8010876:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010878:	7bbb      	ldrb	r3, [r7, #14]
 801087a:	2bff      	cmp	r3, #255	@ 0xff
 801087c:	d01d      	beq.n	80108ba <USBD_StdItfReq+0x92>
 801087e:	7bbb      	ldrb	r3, [r7, #14]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d11a      	bne.n	80108ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010884:	7bba      	ldrb	r2, [r7, #14]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	32ae      	adds	r2, #174	@ 0xae
 801088a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d00f      	beq.n	80108b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010894:	7bba      	ldrb	r2, [r7, #14]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801089c:	7bba      	ldrb	r2, [r7, #14]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	32ae      	adds	r2, #174	@ 0xae
 80108a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	4798      	blx	r3
 80108ae:	4603      	mov	r3, r0
 80108b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108b2:	e004      	b.n	80108be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80108b4:	2303      	movs	r3, #3
 80108b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108b8:	e001      	b.n	80108be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80108ba:	2303      	movs	r3, #3
 80108bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	88db      	ldrh	r3, [r3, #6]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d110      	bne.n	80108e8 <USBD_StdItfReq+0xc0>
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d10d      	bne.n	80108e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 fe06 	bl	80114de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80108d2:	e009      	b.n	80108e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80108d4:	6839      	ldr	r1, [r7, #0]
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fd23 	bl	8011322 <USBD_CtlError>
          break;
 80108dc:	e004      	b.n	80108e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 fd1e 	bl	8011322 <USBD_CtlError>
          break;
 80108e6:	e000      	b.n	80108ea <USBD_StdItfReq+0xc2>
          break;
 80108e8:	bf00      	nop
      }
      break;
 80108ea:	e004      	b.n	80108f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80108ec:	6839      	ldr	r1, [r7, #0]
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fd17 	bl	8011322 <USBD_CtlError>
      break;
 80108f4:	bf00      	nop
  }

  return ret;
 80108f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3710      	adds	r7, #16
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	889b      	ldrh	r3, [r3, #4]
 8010912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801091c:	2b40      	cmp	r3, #64	@ 0x40
 801091e:	d007      	beq.n	8010930 <USBD_StdEPReq+0x30>
 8010920:	2b40      	cmp	r3, #64	@ 0x40
 8010922:	f200 8181 	bhi.w	8010c28 <USBD_StdEPReq+0x328>
 8010926:	2b00      	cmp	r3, #0
 8010928:	d02a      	beq.n	8010980 <USBD_StdEPReq+0x80>
 801092a:	2b20      	cmp	r3, #32
 801092c:	f040 817c 	bne.w	8010c28 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010930:	7bbb      	ldrb	r3, [r7, #14]
 8010932:	4619      	mov	r1, r3
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff fe84 	bl	8010642 <USBD_CoreFindEP>
 801093a:	4603      	mov	r3, r0
 801093c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801093e:	7b7b      	ldrb	r3, [r7, #13]
 8010940:	2bff      	cmp	r3, #255	@ 0xff
 8010942:	f000 8176 	beq.w	8010c32 <USBD_StdEPReq+0x332>
 8010946:	7b7b      	ldrb	r3, [r7, #13]
 8010948:	2b00      	cmp	r3, #0
 801094a:	f040 8172 	bne.w	8010c32 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 801094e:	7b7a      	ldrb	r2, [r7, #13]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010956:	7b7a      	ldrb	r2, [r7, #13]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	32ae      	adds	r2, #174	@ 0xae
 801095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	2b00      	cmp	r3, #0
 8010964:	f000 8165 	beq.w	8010c32 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010968:	7b7a      	ldrb	r2, [r7, #13]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	32ae      	adds	r2, #174	@ 0xae
 801096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	4798      	blx	r3
 801097a:	4603      	mov	r3, r0
 801097c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801097e:	e158      	b.n	8010c32 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	785b      	ldrb	r3, [r3, #1]
 8010984:	2b03      	cmp	r3, #3
 8010986:	d008      	beq.n	801099a <USBD_StdEPReq+0x9a>
 8010988:	2b03      	cmp	r3, #3
 801098a:	f300 8147 	bgt.w	8010c1c <USBD_StdEPReq+0x31c>
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 809b 	beq.w	8010aca <USBD_StdEPReq+0x1ca>
 8010994:	2b01      	cmp	r3, #1
 8010996:	d03c      	beq.n	8010a12 <USBD_StdEPReq+0x112>
 8010998:	e140      	b.n	8010c1c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d002      	beq.n	80109ac <USBD_StdEPReq+0xac>
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d016      	beq.n	80109d8 <USBD_StdEPReq+0xd8>
 80109aa:	e02c      	b.n	8010a06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109ac:	7bbb      	ldrb	r3, [r7, #14]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00d      	beq.n	80109ce <USBD_StdEPReq+0xce>
 80109b2:	7bbb      	ldrb	r3, [r7, #14]
 80109b4:	2b80      	cmp	r3, #128	@ 0x80
 80109b6:	d00a      	beq.n	80109ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80109b8:	7bbb      	ldrb	r3, [r7, #14]
 80109ba:	4619      	mov	r1, r3
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f001 f9e5 	bl	8011d8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80109c2:	2180      	movs	r1, #128	@ 0x80
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f001 f9e1 	bl	8011d8c <USBD_LL_StallEP>
 80109ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80109cc:	e020      	b.n	8010a10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80109ce:	6839      	ldr	r1, [r7, #0]
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 fca6 	bl	8011322 <USBD_CtlError>
              break;
 80109d6:	e01b      	b.n	8010a10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	885b      	ldrh	r3, [r3, #2]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d10e      	bne.n	80109fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00b      	beq.n	80109fe <USBD_StdEPReq+0xfe>
 80109e6:	7bbb      	ldrb	r3, [r7, #14]
 80109e8:	2b80      	cmp	r3, #128	@ 0x80
 80109ea:	d008      	beq.n	80109fe <USBD_StdEPReq+0xfe>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	88db      	ldrh	r3, [r3, #6]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d104      	bne.n	80109fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80109f4:	7bbb      	ldrb	r3, [r7, #14]
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f001 f9c7 	bl	8011d8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 fd6d 	bl	80114de <USBD_CtlSendStatus>

              break;
 8010a04:	e004      	b.n	8010a10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a06:	6839      	ldr	r1, [r7, #0]
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fc8a 	bl	8011322 <USBD_CtlError>
              break;
 8010a0e:	bf00      	nop
          }
          break;
 8010a10:	e109      	b.n	8010c26 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d002      	beq.n	8010a24 <USBD_StdEPReq+0x124>
 8010a1e:	2b03      	cmp	r3, #3
 8010a20:	d016      	beq.n	8010a50 <USBD_StdEPReq+0x150>
 8010a22:	e04b      	b.n	8010abc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a24:	7bbb      	ldrb	r3, [r7, #14]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00d      	beq.n	8010a46 <USBD_StdEPReq+0x146>
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	2b80      	cmp	r3, #128	@ 0x80
 8010a2e:	d00a      	beq.n	8010a46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a30:	7bbb      	ldrb	r3, [r7, #14]
 8010a32:	4619      	mov	r1, r3
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f001 f9a9 	bl	8011d8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a3a:	2180      	movs	r1, #128	@ 0x80
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f001 f9a5 	bl	8011d8c <USBD_LL_StallEP>
 8010a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a44:	e040      	b.n	8010ac8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fc6a 	bl	8011322 <USBD_CtlError>
              break;
 8010a4e:	e03b      	b.n	8010ac8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	885b      	ldrh	r3, [r3, #2]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d136      	bne.n	8010ac6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a58:	7bbb      	ldrb	r3, [r7, #14]
 8010a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d004      	beq.n	8010a6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a62:	7bbb      	ldrb	r3, [r7, #14]
 8010a64:	4619      	mov	r1, r3
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f001 f9af 	bl	8011dca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fd36 	bl	80114de <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010a72:	7bbb      	ldrb	r3, [r7, #14]
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff fde3 	bl	8010642 <USBD_CoreFindEP>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a80:	7b7b      	ldrb	r3, [r7, #13]
 8010a82:	2bff      	cmp	r3, #255	@ 0xff
 8010a84:	d01f      	beq.n	8010ac6 <USBD_StdEPReq+0x1c6>
 8010a86:	7b7b      	ldrb	r3, [r7, #13]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d11c      	bne.n	8010ac6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010a8c:	7b7a      	ldrb	r2, [r7, #13]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010a94:	7b7a      	ldrb	r2, [r7, #13]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	32ae      	adds	r2, #174	@ 0xae
 8010a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d010      	beq.n	8010ac6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010aa4:	7b7a      	ldrb	r2, [r7, #13]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	32ae      	adds	r2, #174	@ 0xae
 8010aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	6839      	ldr	r1, [r7, #0]
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	4798      	blx	r3
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010aba:	e004      	b.n	8010ac6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fc2f 	bl	8011322 <USBD_CtlError>
              break;
 8010ac4:	e000      	b.n	8010ac8 <USBD_StdEPReq+0x1c8>
              break;
 8010ac6:	bf00      	nop
          }
          break;
 8010ac8:	e0ad      	b.n	8010c26 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	d002      	beq.n	8010adc <USBD_StdEPReq+0x1dc>
 8010ad6:	2b03      	cmp	r3, #3
 8010ad8:	d033      	beq.n	8010b42 <USBD_StdEPReq+0x242>
 8010ada:	e099      	b.n	8010c10 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010adc:	7bbb      	ldrb	r3, [r7, #14]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d007      	beq.n	8010af2 <USBD_StdEPReq+0x1f2>
 8010ae2:	7bbb      	ldrb	r3, [r7, #14]
 8010ae4:	2b80      	cmp	r3, #128	@ 0x80
 8010ae6:	d004      	beq.n	8010af2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010ae8:	6839      	ldr	r1, [r7, #0]
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f000 fc19 	bl	8011322 <USBD_CtlError>
                break;
 8010af0:	e093      	b.n	8010c1a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	da0b      	bge.n	8010b12 <USBD_StdEPReq+0x212>
 8010afa:	7bbb      	ldrb	r3, [r7, #14]
 8010afc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b00:	4613      	mov	r3, r2
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	4413      	add	r3, r2
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	3310      	adds	r3, #16
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	3304      	adds	r3, #4
 8010b10:	e00b      	b.n	8010b2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b12:	7bbb      	ldrb	r3, [r7, #14]
 8010b14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b18:	4613      	mov	r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4413      	add	r3, r2
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	4413      	add	r3, r2
 8010b28:	3304      	adds	r3, #4
 8010b2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	330e      	adds	r3, #14
 8010b36:	2202      	movs	r2, #2
 8010b38:	4619      	mov	r1, r3
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 fc6e 	bl	801141c <USBD_CtlSendData>
              break;
 8010b40:	e06b      	b.n	8010c1a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010b42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	da11      	bge.n	8010b6e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	f003 020f 	and.w	r2, r3, #15
 8010b50:	6879      	ldr	r1, [r7, #4]
 8010b52:	4613      	mov	r3, r2
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	4413      	add	r3, r2
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	440b      	add	r3, r1
 8010b5c:	3323      	adds	r3, #35	@ 0x23
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d117      	bne.n	8010b94 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fbdb 	bl	8011322 <USBD_CtlError>
                  break;
 8010b6c:	e055      	b.n	8010c1a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b6e:	7bbb      	ldrb	r3, [r7, #14]
 8010b70:	f003 020f 	and.w	r2, r3, #15
 8010b74:	6879      	ldr	r1, [r7, #4]
 8010b76:	4613      	mov	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4413      	add	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	440b      	add	r3, r1
 8010b80:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8010b8a:	6839      	ldr	r1, [r7, #0]
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fbc8 	bl	8011322 <USBD_CtlError>
                  break;
 8010b92:	e042      	b.n	8010c1a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	da0b      	bge.n	8010bb4 <USBD_StdEPReq+0x2b4>
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
 8010b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	4413      	add	r3, r2
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	3310      	adds	r3, #16
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	4413      	add	r3, r2
 8010bb0:	3304      	adds	r3, #4
 8010bb2:	e00b      	b.n	8010bcc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010bb4:	7bbb      	ldrb	r3, [r7, #14]
 8010bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bba:	4613      	mov	r3, r2
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4413      	add	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	4413      	add	r3, r2
 8010bca:	3304      	adds	r3, #4
 8010bcc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010bce:	7bbb      	ldrb	r3, [r7, #14]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d002      	beq.n	8010bda <USBD_StdEPReq+0x2da>
 8010bd4:	7bbb      	ldrb	r3, [r7, #14]
 8010bd6:	2b80      	cmp	r3, #128	@ 0x80
 8010bd8:	d103      	bne.n	8010be2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	739a      	strb	r2, [r3, #14]
 8010be0:	e00e      	b.n	8010c00 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010be2:	7bbb      	ldrb	r3, [r7, #14]
 8010be4:	4619      	mov	r1, r3
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f001 f90e 	bl	8011e08 <USBD_LL_IsStallEP>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d003      	beq.n	8010bfa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	739a      	strb	r2, [r3, #14]
 8010bf8:	e002      	b.n	8010c00 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	330e      	adds	r3, #14
 8010c04:	2202      	movs	r2, #2
 8010c06:	4619      	mov	r1, r3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fc07 	bl	801141c <USBD_CtlSendData>
              break;
 8010c0e:	e004      	b.n	8010c1a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8010c10:	6839      	ldr	r1, [r7, #0]
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fb85 	bl	8011322 <USBD_CtlError>
              break;
 8010c18:	bf00      	nop
          }
          break;
 8010c1a:	e004      	b.n	8010c26 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8010c1c:	6839      	ldr	r1, [r7, #0]
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fb7f 	bl	8011322 <USBD_CtlError>
          break;
 8010c24:	bf00      	nop
      }
      break;
 8010c26:	e005      	b.n	8010c34 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8010c28:	6839      	ldr	r1, [r7, #0]
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fb79 	bl	8011322 <USBD_CtlError>
      break;
 8010c30:	e000      	b.n	8010c34 <USBD_StdEPReq+0x334>
      break;
 8010c32:	bf00      	nop
  }

  return ret;
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
	...

08010c40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c52:	2300      	movs	r3, #0
 8010c54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	885b      	ldrh	r3, [r3, #2]
 8010c5a:	0a1b      	lsrs	r3, r3, #8
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	2b0e      	cmp	r3, #14
 8010c62:	f200 8152 	bhi.w	8010f0a <USBD_GetDescriptor+0x2ca>
 8010c66:	a201      	add	r2, pc, #4	@ (adr r2, 8010c6c <USBD_GetDescriptor+0x2c>)
 8010c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6c:	08010cdd 	.word	0x08010cdd
 8010c70:	08010cf5 	.word	0x08010cf5
 8010c74:	08010d35 	.word	0x08010d35
 8010c78:	08010f0b 	.word	0x08010f0b
 8010c7c:	08010f0b 	.word	0x08010f0b
 8010c80:	08010eab 	.word	0x08010eab
 8010c84:	08010ed7 	.word	0x08010ed7
 8010c88:	08010f0b 	.word	0x08010f0b
 8010c8c:	08010f0b 	.word	0x08010f0b
 8010c90:	08010f0b 	.word	0x08010f0b
 8010c94:	08010f0b 	.word	0x08010f0b
 8010c98:	08010f0b 	.word	0x08010f0b
 8010c9c:	08010f0b 	.word	0x08010f0b
 8010ca0:	08010f0b 	.word	0x08010f0b
 8010ca4:	08010ca9 	.word	0x08010ca9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cae:	69db      	ldr	r3, [r3, #28]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00b      	beq.n	8010ccc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cba:	69db      	ldr	r3, [r3, #28]
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	7c12      	ldrb	r2, [r2, #16]
 8010cc0:	f107 0108 	add.w	r1, r7, #8
 8010cc4:	4610      	mov	r0, r2
 8010cc6:	4798      	blx	r3
 8010cc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cca:	e126      	b.n	8010f1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fb27 	bl	8011322 <USBD_CtlError>
        err++;
 8010cd4:	7afb      	ldrb	r3, [r7, #11]
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	72fb      	strb	r3, [r7, #11]
      break;
 8010cda:	e11e      	b.n	8010f1a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	7c12      	ldrb	r2, [r2, #16]
 8010ce8:	f107 0108 	add.w	r1, r7, #8
 8010cec:	4610      	mov	r0, r2
 8010cee:	4798      	blx	r3
 8010cf0:	60f8      	str	r0, [r7, #12]
      break;
 8010cf2:	e112      	b.n	8010f1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	7c1b      	ldrb	r3, [r3, #16]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10d      	bne.n	8010d18 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d04:	f107 0208 	add.w	r2, r7, #8
 8010d08:	4610      	mov	r0, r2
 8010d0a:	4798      	blx	r3
 8010d0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3301      	adds	r3, #1
 8010d12:	2202      	movs	r2, #2
 8010d14:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d16:	e100      	b.n	8010f1a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d20:	f107 0208 	add.w	r2, r7, #8
 8010d24:	4610      	mov	r0, r2
 8010d26:	4798      	blx	r3
 8010d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	2202      	movs	r2, #2
 8010d30:	701a      	strb	r2, [r3, #0]
      break;
 8010d32:	e0f2      	b.n	8010f1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	885b      	ldrh	r3, [r3, #2]
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	2b05      	cmp	r3, #5
 8010d3c:	f200 80ac 	bhi.w	8010e98 <USBD_GetDescriptor+0x258>
 8010d40:	a201      	add	r2, pc, #4	@ (adr r2, 8010d48 <USBD_GetDescriptor+0x108>)
 8010d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d46:	bf00      	nop
 8010d48:	08010d61 	.word	0x08010d61
 8010d4c:	08010d95 	.word	0x08010d95
 8010d50:	08010dc9 	.word	0x08010dc9
 8010d54:	08010dfd 	.word	0x08010dfd
 8010d58:	08010e31 	.word	0x08010e31
 8010d5c:	08010e65 	.word	0x08010e65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00b      	beq.n	8010d84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	7c12      	ldrb	r2, [r2, #16]
 8010d78:	f107 0108 	add.w	r1, r7, #8
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4798      	blx	r3
 8010d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d82:	e091      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 facb 	bl	8011322 <USBD_CtlError>
            err++;
 8010d8c:	7afb      	ldrb	r3, [r7, #11]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	72fb      	strb	r3, [r7, #11]
          break;
 8010d92:	e089      	b.n	8010ea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d9a:	689b      	ldr	r3, [r3, #8]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00b      	beq.n	8010db8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	7c12      	ldrb	r2, [r2, #16]
 8010dac:	f107 0108 	add.w	r1, r7, #8
 8010db0:	4610      	mov	r0, r2
 8010db2:	4798      	blx	r3
 8010db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010db6:	e077      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010db8:	6839      	ldr	r1, [r7, #0]
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fab1 	bl	8011322 <USBD_CtlError>
            err++;
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8010dc6:	e06f      	b.n	8010ea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00b      	beq.n	8010dec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	7c12      	ldrb	r2, [r2, #16]
 8010de0:	f107 0108 	add.w	r1, r7, #8
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
 8010de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dea:	e05d      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fa97 	bl	8011322 <USBD_CtlError>
            err++;
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	3301      	adds	r3, #1
 8010df8:	72fb      	strb	r3, [r7, #11]
          break;
 8010dfa:	e055      	b.n	8010ea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00b      	beq.n	8010e20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	7c12      	ldrb	r2, [r2, #16]
 8010e14:	f107 0108 	add.w	r1, r7, #8
 8010e18:	4610      	mov	r0, r2
 8010e1a:	4798      	blx	r3
 8010e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e1e:	e043      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa7d 	bl	8011322 <USBD_CtlError>
            err++;
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e2e:	e03b      	b.n	8010ea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00b      	beq.n	8010e54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	7c12      	ldrb	r2, [r2, #16]
 8010e48:	f107 0108 	add.w	r1, r7, #8
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
 8010e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e52:	e029      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e54:	6839      	ldr	r1, [r7, #0]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 fa63 	bl	8011322 <USBD_CtlError>
            err++;
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	72fb      	strb	r3, [r7, #11]
          break;
 8010e62:	e021      	b.n	8010ea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e6a:	699b      	ldr	r3, [r3, #24]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00b      	beq.n	8010e88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	7c12      	ldrb	r2, [r2, #16]
 8010e7c:	f107 0108 	add.w	r1, r7, #8
 8010e80:	4610      	mov	r0, r2
 8010e82:	4798      	blx	r3
 8010e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e86:	e00f      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e88:	6839      	ldr	r1, [r7, #0]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fa49 	bl	8011322 <USBD_CtlError>
            err++;
 8010e90:	7afb      	ldrb	r3, [r7, #11]
 8010e92:	3301      	adds	r3, #1
 8010e94:	72fb      	strb	r3, [r7, #11]
          break;
 8010e96:	e007      	b.n	8010ea8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010e98:	6839      	ldr	r1, [r7, #0]
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 fa41 	bl	8011322 <USBD_CtlError>
          err++;
 8010ea0:	7afb      	ldrb	r3, [r7, #11]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010ea6:	bf00      	nop
      }
      break;
 8010ea8:	e037      	b.n	8010f1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	7c1b      	ldrb	r3, [r3, #16]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d109      	bne.n	8010ec6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eba:	f107 0208 	add.w	r2, r7, #8
 8010ebe:	4610      	mov	r0, r2
 8010ec0:	4798      	blx	r3
 8010ec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ec4:	e029      	b.n	8010f1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 fa2a 	bl	8011322 <USBD_CtlError>
        err++;
 8010ece:	7afb      	ldrb	r3, [r7, #11]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ed4:	e021      	b.n	8010f1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	7c1b      	ldrb	r3, [r3, #16]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10d      	bne.n	8010efa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ee6:	f107 0208 	add.w	r2, r7, #8
 8010eea:	4610      	mov	r0, r2
 8010eec:	4798      	blx	r3
 8010eee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	2207      	movs	r2, #7
 8010ef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ef8:	e00f      	b.n	8010f1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fa10 	bl	8011322 <USBD_CtlError>
        err++;
 8010f02:	7afb      	ldrb	r3, [r7, #11]
 8010f04:	3301      	adds	r3, #1
 8010f06:	72fb      	strb	r3, [r7, #11]
      break;
 8010f08:	e007      	b.n	8010f1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010f0a:	6839      	ldr	r1, [r7, #0]
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fa08 	bl	8011322 <USBD_CtlError>
      err++;
 8010f12:	7afb      	ldrb	r3, [r7, #11]
 8010f14:	3301      	adds	r3, #1
 8010f16:	72fb      	strb	r3, [r7, #11]
      break;
 8010f18:	bf00      	nop
  }

  if (err != 0U)
 8010f1a:	7afb      	ldrb	r3, [r7, #11]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d11e      	bne.n	8010f5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	88db      	ldrh	r3, [r3, #6]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d016      	beq.n	8010f56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010f28:	893b      	ldrh	r3, [r7, #8]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00e      	beq.n	8010f4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	88da      	ldrh	r2, [r3, #6]
 8010f32:	893b      	ldrh	r3, [r7, #8]
 8010f34:	4293      	cmp	r3, r2
 8010f36:	bf28      	it	cs
 8010f38:	4613      	movcs	r3, r2
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f3e:	893b      	ldrh	r3, [r7, #8]
 8010f40:	461a      	mov	r2, r3
 8010f42:	68f9      	ldr	r1, [r7, #12]
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 fa69 	bl	801141c <USBD_CtlSendData>
 8010f4a:	e009      	b.n	8010f60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 f9e7 	bl	8011322 <USBD_CtlError>
 8010f54:	e004      	b.n	8010f60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fac1 	bl	80114de <USBD_CtlSendStatus>
 8010f5c:	e000      	b.n	8010f60 <USBD_GetDescriptor+0x320>
    return;
 8010f5e:	bf00      	nop
  }
}
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop

08010f68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	889b      	ldrh	r3, [r3, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d131      	bne.n	8010fde <USBD_SetAddress+0x76>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	88db      	ldrh	r3, [r3, #6]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d12d      	bne.n	8010fde <USBD_SetAddress+0x76>
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	885b      	ldrh	r3, [r3, #2]
 8010f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f88:	d829      	bhi.n	8010fde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	885b      	ldrh	r3, [r3, #2]
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	2b03      	cmp	r3, #3
 8010fa0:	d104      	bne.n	8010fac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010fa2:	6839      	ldr	r1, [r7, #0]
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 f9bc 	bl	8011322 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010faa:	e01d      	b.n	8010fe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7bfa      	ldrb	r2, [r7, #15]
 8010fb0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 ff51 	bl	8011e60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 fa8d 	bl	80114de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d004      	beq.n	8010fd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2202      	movs	r2, #2
 8010fce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fd2:	e009      	b.n	8010fe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fdc:	e004      	b.n	8010fe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 f99e 	bl	8011322 <USBD_CtlError>
  }
}
 8010fe6:	bf00      	nop
 8010fe8:	bf00      	nop
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b084      	sub	sp, #16
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	885b      	ldrh	r3, [r3, #2]
 8011002:	b2da      	uxtb	r2, r3
 8011004:	4b4e      	ldr	r3, [pc, #312]	@ (8011140 <USBD_SetConfig+0x150>)
 8011006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011008:	4b4d      	ldr	r3, [pc, #308]	@ (8011140 <USBD_SetConfig+0x150>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d905      	bls.n	801101c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011010:	6839      	ldr	r1, [r7, #0]
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f985 	bl	8011322 <USBD_CtlError>
    return USBD_FAIL;
 8011018:	2303      	movs	r3, #3
 801101a:	e08c      	b.n	8011136 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011022:	b2db      	uxtb	r3, r3
 8011024:	2b02      	cmp	r3, #2
 8011026:	d002      	beq.n	801102e <USBD_SetConfig+0x3e>
 8011028:	2b03      	cmp	r3, #3
 801102a:	d029      	beq.n	8011080 <USBD_SetConfig+0x90>
 801102c:	e075      	b.n	801111a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801102e:	4b44      	ldr	r3, [pc, #272]	@ (8011140 <USBD_SetConfig+0x150>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d020      	beq.n	8011078 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011036:	4b42      	ldr	r3, [pc, #264]	@ (8011140 <USBD_SetConfig+0x150>)
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	461a      	mov	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011040:	4b3f      	ldr	r3, [pc, #252]	@ (8011140 <USBD_SetConfig+0x150>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7fe ffa3 	bl	800ff92 <USBD_SetClassConfig>
 801104c:	4603      	mov	r3, r0
 801104e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011050:	7bfb      	ldrb	r3, [r7, #15]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d008      	beq.n	8011068 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f962 	bl	8011322 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2202      	movs	r2, #2
 8011062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011066:	e065      	b.n	8011134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 fa38 	bl	80114de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2203      	movs	r2, #3
 8011072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011076:	e05d      	b.n	8011134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fa30 	bl	80114de <USBD_CtlSendStatus>
      break;
 801107e:	e059      	b.n	8011134 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011080:	4b2f      	ldr	r3, [pc, #188]	@ (8011140 <USBD_SetConfig+0x150>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d112      	bne.n	80110ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2202      	movs	r2, #2
 801108c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011090:	4b2b      	ldr	r3, [pc, #172]	@ (8011140 <USBD_SetConfig+0x150>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	461a      	mov	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801109a:	4b29      	ldr	r3, [pc, #164]	@ (8011140 <USBD_SetConfig+0x150>)
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	4619      	mov	r1, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7fe ff92 	bl	800ffca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 fa19 	bl	80114de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80110ac:	e042      	b.n	8011134 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80110ae:	4b24      	ldr	r3, [pc, #144]	@ (8011140 <USBD_SetConfig+0x150>)
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	461a      	mov	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d02a      	beq.n	8011112 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	4619      	mov	r1, r3
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7fe ff80 	bl	800ffca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80110ca:	4b1d      	ldr	r3, [pc, #116]	@ (8011140 <USBD_SetConfig+0x150>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	461a      	mov	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011140 <USBD_SetConfig+0x150>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	4619      	mov	r1, r3
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7fe ff59 	bl	800ff92 <USBD_SetClassConfig>
 80110e0:	4603      	mov	r3, r0
 80110e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80110e4:	7bfb      	ldrb	r3, [r7, #15]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00f      	beq.n	801110a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 f918 	bl	8011322 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	4619      	mov	r1, r3
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7fe ff65 	bl	800ffca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2202      	movs	r2, #2
 8011104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011108:	e014      	b.n	8011134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 f9e7 	bl	80114de <USBD_CtlSendStatus>
      break;
 8011110:	e010      	b.n	8011134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f9e3 	bl	80114de <USBD_CtlSendStatus>
      break;
 8011118:	e00c      	b.n	8011134 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f900 	bl	8011322 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011122:	4b07      	ldr	r3, [pc, #28]	@ (8011140 <USBD_SetConfig+0x150>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	4619      	mov	r1, r3
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7fe ff4e 	bl	800ffca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801112e:	2303      	movs	r3, #3
 8011130:	73fb      	strb	r3, [r7, #15]
      break;
 8011132:	bf00      	nop
  }

  return ret;
 8011134:	7bfb      	ldrb	r3, [r7, #15]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	200009f0 	.word	0x200009f0

08011144 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	88db      	ldrh	r3, [r3, #6]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d004      	beq.n	8011160 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 f8e2 	bl	8011322 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801115e:	e023      	b.n	80111a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b02      	cmp	r3, #2
 801116a:	dc02      	bgt.n	8011172 <USBD_GetConfig+0x2e>
 801116c:	2b00      	cmp	r3, #0
 801116e:	dc03      	bgt.n	8011178 <USBD_GetConfig+0x34>
 8011170:	e015      	b.n	801119e <USBD_GetConfig+0x5a>
 8011172:	2b03      	cmp	r3, #3
 8011174:	d00b      	beq.n	801118e <USBD_GetConfig+0x4a>
 8011176:	e012      	b.n	801119e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3308      	adds	r3, #8
 8011182:	2201      	movs	r2, #1
 8011184:	4619      	mov	r1, r3
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f948 	bl	801141c <USBD_CtlSendData>
        break;
 801118c:	e00c      	b.n	80111a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	3304      	adds	r3, #4
 8011192:	2201      	movs	r2, #1
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f940 	bl	801141c <USBD_CtlSendData>
        break;
 801119c:	e004      	b.n	80111a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f8be 	bl	8011322 <USBD_CtlError>
        break;
 80111a6:	bf00      	nop
}
 80111a8:	bf00      	nop
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	3b01      	subs	r3, #1
 80111c4:	2b02      	cmp	r3, #2
 80111c6:	d81e      	bhi.n	8011206 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	88db      	ldrh	r3, [r3, #6]
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d004      	beq.n	80111da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 f8a5 	bl	8011322 <USBD_CtlError>
        break;
 80111d8:	e01a      	b.n	8011210 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2201      	movs	r2, #1
 80111de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d005      	beq.n	80111f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	f043 0202 	orr.w	r2, r3, #2
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	330c      	adds	r3, #12
 80111fa:	2202      	movs	r2, #2
 80111fc:	4619      	mov	r1, r3
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f90c 	bl	801141c <USBD_CtlSendData>
      break;
 8011204:	e004      	b.n	8011210 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 f88a 	bl	8011322 <USBD_CtlError>
      break;
 801120e:	bf00      	nop
  }
}
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	885b      	ldrh	r3, [r3, #2]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d107      	bne.n	801123a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2201      	movs	r2, #1
 801122e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 f953 	bl	80114de <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011238:	e013      	b.n	8011262 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	885b      	ldrh	r3, [r3, #2]
 801123e:	2b02      	cmp	r3, #2
 8011240:	d10b      	bne.n	801125a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	889b      	ldrh	r3, [r3, #4]
 8011246:	0a1b      	lsrs	r3, r3, #8
 8011248:	b29b      	uxth	r3, r3
 801124a:	b2da      	uxtb	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 f943 	bl	80114de <USBD_CtlSendStatus>
}
 8011258:	e003      	b.n	8011262 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801125a:	6839      	ldr	r1, [r7, #0]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 f860 	bl	8011322 <USBD_CtlError>
}
 8011262:	bf00      	nop
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b082      	sub	sp, #8
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801127a:	b2db      	uxtb	r3, r3
 801127c:	3b01      	subs	r3, #1
 801127e:	2b02      	cmp	r3, #2
 8011280:	d80b      	bhi.n	801129a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	885b      	ldrh	r3, [r3, #2]
 8011286:	2b01      	cmp	r3, #1
 8011288:	d10c      	bne.n	80112a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 f923 	bl	80114de <USBD_CtlSendStatus>
      }
      break;
 8011298:	e004      	b.n	80112a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801129a:	6839      	ldr	r1, [r7, #0]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 f840 	bl	8011322 <USBD_CtlError>
      break;
 80112a2:	e000      	b.n	80112a6 <USBD_ClrFeature+0x3c>
      break;
 80112a4:	bf00      	nop
  }
}
 80112a6:	bf00      	nop
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b084      	sub	sp, #16
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
 80112b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	781a      	ldrb	r2, [r3, #0]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	3301      	adds	r3, #1
 80112c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	781a      	ldrb	r2, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f7ff fa13 	bl	8010704 <SWAPBYTE>
 80112de:	4603      	mov	r3, r0
 80112e0:	461a      	mov	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3301      	adds	r3, #1
 80112ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3301      	adds	r3, #1
 80112f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7ff fa06 	bl	8010704 <SWAPBYTE>
 80112f8:	4603      	mov	r3, r0
 80112fa:	461a      	mov	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3301      	adds	r3, #1
 8011304:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	3301      	adds	r3, #1
 801130a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	f7ff f9f9 	bl	8010704 <SWAPBYTE>
 8011312:	4603      	mov	r3, r0
 8011314:	461a      	mov	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	80da      	strh	r2, [r3, #6]
}
 801131a:	bf00      	nop
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b082      	sub	sp, #8
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801132c:	2180      	movs	r1, #128	@ 0x80
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fd2c 	bl	8011d8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011334:	2100      	movs	r1, #0
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 fd28 	bl	8011d8c <USBD_LL_StallEP>
}
 801133c:	bf00      	nop
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011350:	2300      	movs	r3, #0
 8011352:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d042      	beq.n	80113e0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801135e:	6938      	ldr	r0, [r7, #16]
 8011360:	f000 f842 	bl	80113e8 <USBD_GetLen>
 8011364:	4603      	mov	r3, r0
 8011366:	3301      	adds	r3, #1
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801136e:	d808      	bhi.n	8011382 <USBD_GetString+0x3e>
 8011370:	6938      	ldr	r0, [r7, #16]
 8011372:	f000 f839 	bl	80113e8 <USBD_GetLen>
 8011376:	4603      	mov	r3, r0
 8011378:	3301      	adds	r3, #1
 801137a:	b29b      	uxth	r3, r3
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	b29a      	uxth	r2, r3
 8011380:	e001      	b.n	8011386 <USBD_GetString+0x42>
 8011382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801138a:	7dfb      	ldrb	r3, [r7, #23]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	4413      	add	r3, r2
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	7812      	ldrb	r2, [r2, #0]
 8011394:	701a      	strb	r2, [r3, #0]
  idx++;
 8011396:	7dfb      	ldrb	r3, [r7, #23]
 8011398:	3301      	adds	r3, #1
 801139a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801139c:	7dfb      	ldrb	r3, [r7, #23]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	4413      	add	r3, r2
 80113a2:	2203      	movs	r2, #3
 80113a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80113a6:	7dfb      	ldrb	r3, [r7, #23]
 80113a8:	3301      	adds	r3, #1
 80113aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80113ac:	e013      	b.n	80113d6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	4413      	add	r3, r2
 80113b4:	693a      	ldr	r2, [r7, #16]
 80113b6:	7812      	ldrb	r2, [r2, #0]
 80113b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	3301      	adds	r3, #1
 80113be:	613b      	str	r3, [r7, #16]
    idx++;
 80113c0:	7dfb      	ldrb	r3, [r7, #23]
 80113c2:	3301      	adds	r3, #1
 80113c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80113c6:	7dfb      	ldrb	r3, [r7, #23]
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	4413      	add	r3, r2
 80113cc:	2200      	movs	r2, #0
 80113ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80113d0:	7dfb      	ldrb	r3, [r7, #23]
 80113d2:	3301      	adds	r3, #1
 80113d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d1e7      	bne.n	80113ae <USBD_GetString+0x6a>
 80113de:	e000      	b.n	80113e2 <USBD_GetString+0x9e>
    return;
 80113e0:	bf00      	nop
  }
}
 80113e2:	3718      	adds	r7, #24
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80113f0:	2300      	movs	r3, #0
 80113f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80113f8:	e005      	b.n	8011406 <USBD_GetLen+0x1e>
  {
    len++;
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	3301      	adds	r3, #1
 80113fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	3301      	adds	r3, #1
 8011404:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1f5      	bne.n	80113fa <USBD_GetLen+0x12>
  }

  return len;
 801140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2202      	movs	r2, #2
 801142c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	68ba      	ldr	r2, [r7, #8]
 8011446:	2100      	movs	r1, #0
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f000 fd28 	bl	8011e9e <USBD_LL_Transmit>

  return USBD_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	2100      	movs	r1, #0
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 fd17 	bl	8011e9e <USBD_LL_Transmit>

  return USBD_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b084      	sub	sp, #16
 801147e:	af00      	add	r7, sp, #0
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	60b9      	str	r1, [r7, #8]
 8011484:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2203      	movs	r2, #3
 801148a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	2100      	movs	r1, #0
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f000 fd17 	bl	8011ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3710      	adds	r7, #16
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	68ba      	ldr	r2, [r7, #8]
 80114cc:	2100      	movs	r1, #0
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f000 fd06 	bl	8011ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3710      	adds	r7, #16
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b082      	sub	sp, #8
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2204      	movs	r2, #4
 80114ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80114ee:	2300      	movs	r3, #0
 80114f0:	2200      	movs	r2, #0
 80114f2:	2100      	movs	r1, #0
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f000 fcd2 	bl	8011e9e <USBD_LL_Transmit>

  return USBD_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2205      	movs	r2, #5
 8011510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011514:	2300      	movs	r3, #0
 8011516:	2200      	movs	r2, #0
 8011518:	2100      	movs	r1, #0
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fce0 	bl	8011ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
	...

0801152c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011530:	2200      	movs	r2, #0
 8011532:	4912      	ldr	r1, [pc, #72]	@ (801157c <MX_USB_DEVICE_Init+0x50>)
 8011534:	4812      	ldr	r0, [pc, #72]	@ (8011580 <MX_USB_DEVICE_Init+0x54>)
 8011536:	f7fe fcaf 	bl	800fe98 <USBD_Init>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011540:	f7f3 fe32 	bl	80051a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011544:	490f      	ldr	r1, [pc, #60]	@ (8011584 <MX_USB_DEVICE_Init+0x58>)
 8011546:	480e      	ldr	r0, [pc, #56]	@ (8011580 <MX_USB_DEVICE_Init+0x54>)
 8011548:	f7fe fcd6 	bl	800fef8 <USBD_RegisterClass>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011552:	f7f3 fe29 	bl	80051a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011556:	490c      	ldr	r1, [pc, #48]	@ (8011588 <MX_USB_DEVICE_Init+0x5c>)
 8011558:	4809      	ldr	r0, [pc, #36]	@ (8011580 <MX_USB_DEVICE_Init+0x54>)
 801155a:	f7fe fbcd 	bl	800fcf8 <USBD_CDC_RegisterInterface>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011564:	f7f3 fe20 	bl	80051a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011568:	4805      	ldr	r0, [pc, #20]	@ (8011580 <MX_USB_DEVICE_Init+0x54>)
 801156a:	f7fe fcfb 	bl	800ff64 <USBD_Start>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011574:	f7f3 fe18 	bl	80051a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011578:	bf00      	nop
 801157a:	bd80      	pop	{r7, pc}
 801157c:	200000ac 	.word	0x200000ac
 8011580:	200009f4 	.word	0x200009f4
 8011584:	20000018 	.word	0x20000018
 8011588:	20000098 	.word	0x20000098

0801158c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011590:	2200      	movs	r2, #0
 8011592:	4905      	ldr	r1, [pc, #20]	@ (80115a8 <CDC_Init_FS+0x1c>)
 8011594:	4805      	ldr	r0, [pc, #20]	@ (80115ac <CDC_Init_FS+0x20>)
 8011596:	f7fe fbc9 	bl	800fd2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801159a:	4905      	ldr	r1, [pc, #20]	@ (80115b0 <CDC_Init_FS+0x24>)
 801159c:	4803      	ldr	r0, [pc, #12]	@ (80115ac <CDC_Init_FS+0x20>)
 801159e:	f7fe fbe7 	bl	800fd70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80115a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	200014d0 	.word	0x200014d0
 80115ac:	200009f4 	.word	0x200009f4
 80115b0:	20000cd0 	.word	0x20000cd0

080115b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80115b4:	b480      	push	{r7}
 80115b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80115b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	4603      	mov	r3, r0
 80115cc:	6039      	str	r1, [r7, #0]
 80115ce:	71fb      	strb	r3, [r7, #7]
 80115d0:	4613      	mov	r3, r2
 80115d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80115d4:	79fb      	ldrb	r3, [r7, #7]
 80115d6:	2b23      	cmp	r3, #35	@ 0x23
 80115d8:	d84a      	bhi.n	8011670 <CDC_Control_FS+0xac>
 80115da:	a201      	add	r2, pc, #4	@ (adr r2, 80115e0 <CDC_Control_FS+0x1c>)
 80115dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e0:	08011671 	.word	0x08011671
 80115e4:	08011671 	.word	0x08011671
 80115e8:	08011671 	.word	0x08011671
 80115ec:	08011671 	.word	0x08011671
 80115f0:	08011671 	.word	0x08011671
 80115f4:	08011671 	.word	0x08011671
 80115f8:	08011671 	.word	0x08011671
 80115fc:	08011671 	.word	0x08011671
 8011600:	08011671 	.word	0x08011671
 8011604:	08011671 	.word	0x08011671
 8011608:	08011671 	.word	0x08011671
 801160c:	08011671 	.word	0x08011671
 8011610:	08011671 	.word	0x08011671
 8011614:	08011671 	.word	0x08011671
 8011618:	08011671 	.word	0x08011671
 801161c:	08011671 	.word	0x08011671
 8011620:	08011671 	.word	0x08011671
 8011624:	08011671 	.word	0x08011671
 8011628:	08011671 	.word	0x08011671
 801162c:	08011671 	.word	0x08011671
 8011630:	08011671 	.word	0x08011671
 8011634:	08011671 	.word	0x08011671
 8011638:	08011671 	.word	0x08011671
 801163c:	08011671 	.word	0x08011671
 8011640:	08011671 	.word	0x08011671
 8011644:	08011671 	.word	0x08011671
 8011648:	08011671 	.word	0x08011671
 801164c:	08011671 	.word	0x08011671
 8011650:	08011671 	.word	0x08011671
 8011654:	08011671 	.word	0x08011671
 8011658:	08011671 	.word	0x08011671
 801165c:	08011671 	.word	0x08011671
 8011660:	08011671 	.word	0x08011671
 8011664:	08011671 	.word	0x08011671
 8011668:	08011671 	.word	0x08011671
 801166c:	08011671 	.word	0x08011671
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011670:	bf00      	nop
  }

  return (USBD_OK);
 8011672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011674:	4618      	mov	r0, r3
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	USB_RXCallback(Buf, Len);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7f2 fffd 	bl	800468c <USB_RXCallback>

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011692:	6879      	ldr	r1, [r7, #4]
 8011694:	4805      	ldr	r0, [pc, #20]	@ (80116ac <CDC_Receive_FS+0x2c>)
 8011696:	f7fe fb6b 	bl	800fd70 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801169a:	4804      	ldr	r0, [pc, #16]	@ (80116ac <CDC_Receive_FS+0x2c>)
 801169c:	f7fe fbc6 	bl	800fe2c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80116a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	200009f4 	.word	0x200009f4

080116b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	460b      	mov	r3, r1
 80116ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80116c0:	4b0d      	ldr	r3, [pc, #52]	@ (80116f8 <CDC_Transmit_FS+0x48>)
 80116c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80116c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d001      	beq.n	80116d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80116d2:	2301      	movs	r3, #1
 80116d4:	e00b      	b.n	80116ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80116d6:	887b      	ldrh	r3, [r7, #2]
 80116d8:	461a      	mov	r2, r3
 80116da:	6879      	ldr	r1, [r7, #4]
 80116dc:	4806      	ldr	r0, [pc, #24]	@ (80116f8 <CDC_Transmit_FS+0x48>)
 80116de:	f7fe fb25 	bl	800fd2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80116e2:	4805      	ldr	r0, [pc, #20]	@ (80116f8 <CDC_Transmit_FS+0x48>)
 80116e4:	f7fe fb62 	bl	800fdac <USBD_CDC_TransmitPacket>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200009f4 	.word	0x200009f4

080116fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b087      	sub	sp, #28
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	4613      	mov	r3, r2
 8011708:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011712:	4618      	mov	r0, r3
 8011714:	371c      	adds	r7, #28
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
	...

08011720 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	6039      	str	r1, [r7, #0]
 801172a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	2212      	movs	r2, #18
 8011730:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011732:	4b03      	ldr	r3, [pc, #12]	@ (8011740 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011734:	4618      	mov	r0, r3
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr
 8011740:	200000cc 	.word	0x200000cc

08011744 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	6039      	str	r1, [r7, #0]
 801174e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2204      	movs	r2, #4
 8011754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011756:	4b03      	ldr	r3, [pc, #12]	@ (8011764 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011758:	4618      	mov	r0, r3
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	200000ec 	.word	0x200000ec

08011768 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	6039      	str	r1, [r7, #0]
 8011772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d105      	bne.n	8011786 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	4907      	ldr	r1, [pc, #28]	@ (801179c <USBD_FS_ProductStrDescriptor+0x34>)
 801177e:	4808      	ldr	r0, [pc, #32]	@ (80117a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011780:	f7ff fde0 	bl	8011344 <USBD_GetString>
 8011784:	e004      	b.n	8011790 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011786:	683a      	ldr	r2, [r7, #0]
 8011788:	4904      	ldr	r1, [pc, #16]	@ (801179c <USBD_FS_ProductStrDescriptor+0x34>)
 801178a:	4805      	ldr	r0, [pc, #20]	@ (80117a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801178c:	f7ff fdda 	bl	8011344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011790:	4b02      	ldr	r3, [pc, #8]	@ (801179c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011792:	4618      	mov	r0, r3
 8011794:	3708      	adds	r7, #8
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	20001cd0 	.word	0x20001cd0
 80117a0:	08017a38 	.word	0x08017a38

080117a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	4603      	mov	r3, r0
 80117ac:	6039      	str	r1, [r7, #0]
 80117ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	4904      	ldr	r1, [pc, #16]	@ (80117c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80117b4:	4804      	ldr	r0, [pc, #16]	@ (80117c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80117b6:	f7ff fdc5 	bl	8011344 <USBD_GetString>
  return USBD_StrDesc;
 80117ba:	4b02      	ldr	r3, [pc, #8]	@ (80117c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	20001cd0 	.word	0x20001cd0
 80117c8:	08017a50 	.word	0x08017a50

080117cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	4603      	mov	r3, r0
 80117d4:	6039      	str	r1, [r7, #0]
 80117d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	221a      	movs	r2, #26
 80117dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80117de:	f000 f855 	bl	801188c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80117e2:	4b02      	ldr	r3, [pc, #8]	@ (80117ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	200000f0 	.word	0x200000f0

080117f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	6039      	str	r1, [r7, #0]
 80117fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80117fc:	79fb      	ldrb	r3, [r7, #7]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d105      	bne.n	801180e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011802:	683a      	ldr	r2, [r7, #0]
 8011804:	4907      	ldr	r1, [pc, #28]	@ (8011824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011806:	4808      	ldr	r0, [pc, #32]	@ (8011828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011808:	f7ff fd9c 	bl	8011344 <USBD_GetString>
 801180c:	e004      	b.n	8011818 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801180e:	683a      	ldr	r2, [r7, #0]
 8011810:	4904      	ldr	r1, [pc, #16]	@ (8011824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011812:	4805      	ldr	r0, [pc, #20]	@ (8011828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011814:	f7ff fd96 	bl	8011344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011818:	4b02      	ldr	r3, [pc, #8]	@ (8011824 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801181a:	4618      	mov	r0, r3
 801181c:	3708      	adds	r7, #8
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
 8011822:	bf00      	nop
 8011824:	20001cd0 	.word	0x20001cd0
 8011828:	08017a64 	.word	0x08017a64

0801182c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	6039      	str	r1, [r7, #0]
 8011836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011838:	79fb      	ldrb	r3, [r7, #7]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d105      	bne.n	801184a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801183e:	683a      	ldr	r2, [r7, #0]
 8011840:	4907      	ldr	r1, [pc, #28]	@ (8011860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011842:	4808      	ldr	r0, [pc, #32]	@ (8011864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011844:	f7ff fd7e 	bl	8011344 <USBD_GetString>
 8011848:	e004      	b.n	8011854 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801184a:	683a      	ldr	r2, [r7, #0]
 801184c:	4904      	ldr	r1, [pc, #16]	@ (8011860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801184e:	4805      	ldr	r0, [pc, #20]	@ (8011864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011850:	f7ff fd78 	bl	8011344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011854:	4b02      	ldr	r3, [pc, #8]	@ (8011860 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	20001cd0 	.word	0x20001cd0
 8011864:	08017a70 	.word	0x08017a70

08011868 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	4603      	mov	r3, r0
 8011870:	6039      	str	r1, [r7, #0]
 8011872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	220c      	movs	r2, #12
 8011878:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801187a:	4b03      	ldr	r3, [pc, #12]	@ (8011888 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801187c:	4618      	mov	r0, r3
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	200000e0 	.word	0x200000e0

0801188c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011892:	4b0f      	ldr	r3, [pc, #60]	@ (80118d0 <Get_SerialNum+0x44>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011898:	4b0e      	ldr	r3, [pc, #56]	@ (80118d4 <Get_SerialNum+0x48>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801189e:	4b0e      	ldr	r3, [pc, #56]	@ (80118d8 <Get_SerialNum+0x4c>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4413      	add	r3, r2
 80118aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d009      	beq.n	80118c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80118b2:	2208      	movs	r2, #8
 80118b4:	4909      	ldr	r1, [pc, #36]	@ (80118dc <Get_SerialNum+0x50>)
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f000 f814 	bl	80118e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80118bc:	2204      	movs	r2, #4
 80118be:	4908      	ldr	r1, [pc, #32]	@ (80118e0 <Get_SerialNum+0x54>)
 80118c0:	68b8      	ldr	r0, [r7, #8]
 80118c2:	f000 f80f 	bl	80118e4 <IntToUnicode>
  }
}
 80118c6:	bf00      	nop
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	1ff07a10 	.word	0x1ff07a10
 80118d4:	1ff07a14 	.word	0x1ff07a14
 80118d8:	1ff07a18 	.word	0x1ff07a18
 80118dc:	200000f2 	.word	0x200000f2
 80118e0:	20000102 	.word	0x20000102

080118e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80118f2:	2300      	movs	r3, #0
 80118f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80118f6:	2300      	movs	r3, #0
 80118f8:	75fb      	strb	r3, [r7, #23]
 80118fa:	e027      	b.n	801194c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	0f1b      	lsrs	r3, r3, #28
 8011900:	2b09      	cmp	r3, #9
 8011902:	d80b      	bhi.n	801191c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	0f1b      	lsrs	r3, r3, #28
 8011908:	b2da      	uxtb	r2, r3
 801190a:	7dfb      	ldrb	r3, [r7, #23]
 801190c:	005b      	lsls	r3, r3, #1
 801190e:	4619      	mov	r1, r3
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	440b      	add	r3, r1
 8011914:	3230      	adds	r2, #48	@ 0x30
 8011916:	b2d2      	uxtb	r2, r2
 8011918:	701a      	strb	r2, [r3, #0]
 801191a:	e00a      	b.n	8011932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	0f1b      	lsrs	r3, r3, #28
 8011920:	b2da      	uxtb	r2, r3
 8011922:	7dfb      	ldrb	r3, [r7, #23]
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	4619      	mov	r1, r3
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	440b      	add	r3, r1
 801192c:	3237      	adds	r2, #55	@ 0x37
 801192e:	b2d2      	uxtb	r2, r2
 8011930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	011b      	lsls	r3, r3, #4
 8011936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011938:	7dfb      	ldrb	r3, [r7, #23]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	3301      	adds	r3, #1
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	4413      	add	r3, r2
 8011942:	2200      	movs	r2, #0
 8011944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011946:	7dfb      	ldrb	r3, [r7, #23]
 8011948:	3301      	adds	r3, #1
 801194a:	75fb      	strb	r3, [r7, #23]
 801194c:	7dfa      	ldrb	r2, [r7, #23]
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	429a      	cmp	r2, r3
 8011952:	d3d3      	bcc.n	80118fc <IntToUnicode+0x18>
  }
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop
 8011958:	371c      	adds	r7, #28
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
	...

08011964 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b0aa      	sub	sp, #168	@ 0xa8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801196c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8011970:	2200      	movs	r2, #0
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	605a      	str	r2, [r3, #4]
 8011976:	609a      	str	r2, [r3, #8]
 8011978:	60da      	str	r2, [r3, #12]
 801197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801197c:	f107 0314 	add.w	r3, r7, #20
 8011980:	2280      	movs	r2, #128	@ 0x80
 8011982:	2100      	movs	r1, #0
 8011984:	4618      	mov	r0, r3
 8011986:	f002 f834 	bl	80139f2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011992:	d151      	bne.n	8011a38 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011994:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011998:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801199a:	2300      	movs	r3, #0
 801199c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80119a0:	f107 0314 	add.w	r3, r7, #20
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7f8 f919 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80119b0:	f7f3 fbfa 	bl	80051a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119b4:	4b22      	ldr	r3, [pc, #136]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 80119b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119b8:	4a21      	ldr	r2, [pc, #132]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 80119ba:	f043 0301 	orr.w	r3, r3, #1
 80119be:	6313      	str	r3, [r2, #48]	@ 0x30
 80119c0:	4b1f      	ldr	r3, [pc, #124]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 80119c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119c4:	f003 0301 	and.w	r3, r3, #1
 80119c8:	613b      	str	r3, [r7, #16]
 80119ca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80119cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80119d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119d4:	2302      	movs	r3, #2
 80119d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119da:	2300      	movs	r3, #0
 80119dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119e0:	2303      	movs	r3, #3
 80119e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80119e6:	230a      	movs	r3, #10
 80119e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80119f0:	4619      	mov	r1, r3
 80119f2:	4814      	ldr	r0, [pc, #80]	@ (8011a44 <HAL_PCD_MspInit+0xe0>)
 80119f4:	f7f5 fe32 	bl	800765c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80119f8:	4b11      	ldr	r3, [pc, #68]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 80119fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119fc:	4a10      	ldr	r2, [pc, #64]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 80119fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a02:	6353      	str	r3, [r2, #52]	@ 0x34
 8011a04:	4b0e      	ldr	r3, [pc, #56]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 8011a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a0c:	60fb      	str	r3, [r7, #12]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	4b0b      	ldr	r3, [pc, #44]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 8011a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a14:	4a0a      	ldr	r2, [pc, #40]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 8011a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011a1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8011a1c:	4b08      	ldr	r3, [pc, #32]	@ (8011a40 <HAL_PCD_MspInit+0xdc>)
 8011a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011a24:	60bb      	str	r3, [r7, #8]
 8011a26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011a28:	2200      	movs	r2, #0
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	2043      	movs	r0, #67	@ 0x43
 8011a2e:	f7f4 fe9e 	bl	800676e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011a32:	2043      	movs	r0, #67	@ 0x43
 8011a34:	f7f4 feb7 	bl	80067a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011a38:	bf00      	nop
 8011a3a:	37a8      	adds	r7, #168	@ 0xa8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	40023800 	.word	0x40023800
 8011a44:	40020000 	.word	0x40020000

08011a48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4610      	mov	r0, r2
 8011a60:	f7fe facd 	bl	800fffe <USBD_LL_SetupStage>
}
 8011a64:	bf00      	nop
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8011a7e:	78fa      	ldrb	r2, [r7, #3]
 8011a80:	6879      	ldr	r1, [r7, #4]
 8011a82:	4613      	mov	r3, r2
 8011a84:	00db      	lsls	r3, r3, #3
 8011a86:	4413      	add	r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	440b      	add	r3, r1
 8011a8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	78fb      	ldrb	r3, [r7, #3]
 8011a94:	4619      	mov	r1, r3
 8011a96:	f7fe fb07 	bl	80100a8 <USBD_LL_DataOutStage>
}
 8011a9a:	bf00      	nop
 8011a9c:	3708      	adds	r7, #8
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b082      	sub	sp, #8
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	460b      	mov	r3, r1
 8011aac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8011ab4:	78fa      	ldrb	r2, [r7, #3]
 8011ab6:	6879      	ldr	r1, [r7, #4]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	00db      	lsls	r3, r3, #3
 8011abc:	4413      	add	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	3320      	adds	r3, #32
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	78fb      	ldrb	r3, [r7, #3]
 8011ac8:	4619      	mov	r1, r3
 8011aca:	f7fe fba9 	bl	8010220 <USBD_LL_DataInStage>
}
 8011ace:	bf00      	nop
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b082      	sub	sp, #8
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7fe fced 	bl	80104c4 <USBD_LL_SOF>
}
 8011aea:	bf00      	nop
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b084      	sub	sp, #16
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011afa:	2301      	movs	r3, #1
 8011afc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	79db      	ldrb	r3, [r3, #7]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d102      	bne.n	8011b0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011b06:	2300      	movs	r3, #0
 8011b08:	73fb      	strb	r3, [r7, #15]
 8011b0a:	e008      	b.n	8011b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	79db      	ldrb	r3, [r3, #7]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d102      	bne.n	8011b1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011b14:	2301      	movs	r3, #1
 8011b16:	73fb      	strb	r3, [r7, #15]
 8011b18:	e001      	b.n	8011b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011b1a:	f7f3 fb45 	bl	80051a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011b24:	7bfa      	ldrb	r2, [r7, #15]
 8011b26:	4611      	mov	r1, r2
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7fe fc87 	bl	801043c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe fc2e 	bl	8010396 <USBD_LL_Reset>
}
 8011b3a:	bf00      	nop
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe fc82 	bl	801045c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	6812      	ldr	r2, [r2, #0]
 8011b66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011b6a:	f043 0301 	orr.w	r3, r3, #1
 8011b6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	7adb      	ldrb	r3, [r3, #11]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d005      	beq.n	8011b84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b78:	4b04      	ldr	r3, [pc, #16]	@ (8011b8c <HAL_PCD_SuspendCallback+0x48>)
 8011b7a:	691b      	ldr	r3, [r3, #16]
 8011b7c:	4a03      	ldr	r2, [pc, #12]	@ (8011b8c <HAL_PCD_SuspendCallback+0x48>)
 8011b7e:	f043 0306 	orr.w	r3, r3, #6
 8011b82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011b84:	bf00      	nop
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	e000ed00 	.word	0xe000ed00

08011b90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fe fc78 	bl	8010494 <USBD_LL_Resume>
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011bbe:	78fa      	ldrb	r2, [r7, #3]
 8011bc0:	4611      	mov	r1, r2
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fe fcd0 	bl	8010568 <USBD_LL_IsoOUTIncomplete>
}
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	460b      	mov	r3, r1
 8011bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011be2:	78fa      	ldrb	r2, [r7, #3]
 8011be4:	4611      	mov	r1, r2
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fe fc8c 	bl	8010504 <USBD_LL_IsoINIncomplete>
}
 8011bec:	bf00      	nop
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fe fce2 	bl	80105cc <USBD_LL_DevConnected>
}
 8011c08:	bf00      	nop
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fcdf 	bl	80105e2 <USBD_LL_DevDisconnected>
}
 8011c24:	bf00      	nop
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d13f      	bne.n	8011cbc <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011c3c:	4a22      	ldr	r2, [pc, #136]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4a20      	ldr	r2, [pc, #128]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c48:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011c52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011c54:	4b1c      	ldr	r3, [pc, #112]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c56:	2206      	movs	r2, #6
 8011c58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c5c:	2202      	movs	r2, #2
 8011c5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011c60:	4b19      	ldr	r3, [pc, #100]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c66:	4b18      	ldr	r3, [pc, #96]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c68:	2202      	movs	r2, #2
 8011c6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011c6c:	4b16      	ldr	r3, [pc, #88]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011c72:	4b15      	ldr	r3, [pc, #84]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011c78:	4b13      	ldr	r3, [pc, #76]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011c7e:	4b12      	ldr	r3, [pc, #72]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011c84:	4b10      	ldr	r3, [pc, #64]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c86:	2200      	movs	r2, #0
 8011c88:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011c90:	480d      	ldr	r0, [pc, #52]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011c92:	f7f5 fffe 	bl	8007c92 <HAL_PCD_Init>
 8011c96:	4603      	mov	r3, r0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d001      	beq.n	8011ca0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8011c9c:	f7f3 fa84 	bl	80051a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ca0:	2180      	movs	r1, #128	@ 0x80
 8011ca2:	4809      	ldr	r0, [pc, #36]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011ca4:	f7f7 fa4b 	bl	800913e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011ca8:	2240      	movs	r2, #64	@ 0x40
 8011caa:	2100      	movs	r1, #0
 8011cac:	4806      	ldr	r0, [pc, #24]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011cae:	f7f7 f9ff 	bl	80090b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011cb2:	2280      	movs	r2, #128	@ 0x80
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	4804      	ldr	r0, [pc, #16]	@ (8011cc8 <USBD_LL_Init+0x9c>)
 8011cb8:	f7f7 f9fa 	bl	80090b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20001ed0 	.word	0x20001ed0

08011ccc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7f6 f8eb 	bl	8007ebe <HAL_PCD_Start>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cec:	7bfb      	ldrb	r3, [r7, #15]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f000 f97e 	bl	8011ff0 <USBD_Get_USB_Status>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	4608      	mov	r0, r1
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	461a      	mov	r2, r3
 8011d10:	4603      	mov	r3, r0
 8011d12:	70fb      	strb	r3, [r7, #3]
 8011d14:	460b      	mov	r3, r1
 8011d16:	70bb      	strb	r3, [r7, #2]
 8011d18:	4613      	mov	r3, r2
 8011d1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d2a:	78bb      	ldrb	r3, [r7, #2]
 8011d2c:	883a      	ldrh	r2, [r7, #0]
 8011d2e:	78f9      	ldrb	r1, [r7, #3]
 8011d30:	f7f6 fdd9 	bl	80088e6 <HAL_PCD_EP_Open>
 8011d34:	4603      	mov	r3, r0
 8011d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d38:	7bfb      	ldrb	r3, [r7, #15]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 f958 	bl	8011ff0 <USBD_Get_USB_Status>
 8011d40:	4603      	mov	r3, r0
 8011d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d68:	78fa      	ldrb	r2, [r7, #3]
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f6 fe24 	bl	80089ba <HAL_PCD_EP_Close>
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f000 f939 	bl	8011ff0 <USBD_Get_USB_Status>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011da6:	78fa      	ldrb	r2, [r7, #3]
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7f6 fedc 	bl	8008b68 <HAL_PCD_EP_SetStall>
 8011db0:	4603      	mov	r3, r0
 8011db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011db4:	7bfb      	ldrb	r3, [r7, #15]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f000 f91a 	bl	8011ff0 <USBD_Get_USB_Status>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011de4:	78fa      	ldrb	r2, [r7, #3]
 8011de6:	4611      	mov	r1, r2
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7f6 ff20 	bl	8008c2e <HAL_PCD_EP_ClrStall>
 8011dee:	4603      	mov	r3, r0
 8011df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011df2:	7bfb      	ldrb	r3, [r7, #15]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 f8fb 	bl	8011ff0 <USBD_Get_USB_Status>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3710      	adds	r7, #16
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	da0b      	bge.n	8011e3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e2a:	68f9      	ldr	r1, [r7, #12]
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	4413      	add	r3, r2
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	440b      	add	r3, r1
 8011e36:	3316      	adds	r3, #22
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	e00b      	b.n	8011e54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e3c:	78fb      	ldrb	r3, [r7, #3]
 8011e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e42:	68f9      	ldr	r1, [r7, #12]
 8011e44:	4613      	mov	r3, r2
 8011e46:	00db      	lsls	r3, r3, #3
 8011e48:	4413      	add	r3, r2
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	440b      	add	r3, r1
 8011e4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e7a:	78fa      	ldrb	r2, [r7, #3]
 8011e7c:	4611      	mov	r1, r2
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7f6 fd0d 	bl	800889e <HAL_PCD_SetAddress>
 8011e84:	4603      	mov	r3, r0
 8011e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f000 f8b0 	bl	8011ff0 <USBD_Get_USB_Status>
 8011e90:	4603      	mov	r3, r0
 8011e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	60f8      	str	r0, [r7, #12]
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	603b      	str	r3, [r7, #0]
 8011eaa:	460b      	mov	r3, r1
 8011eac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011ebc:	7af9      	ldrb	r1, [r7, #11]
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	f7f6 fe17 	bl	8008af4 <HAL_PCD_EP_Transmit>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011eca:	7dfb      	ldrb	r3, [r7, #23]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f000 f88f 	bl	8011ff0 <USBD_Get_USB_Status>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ed6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	607a      	str	r2, [r7, #4]
 8011eea:	603b      	str	r3, [r7, #0]
 8011eec:	460b      	mov	r3, r1
 8011eee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011efe:	7af9      	ldrb	r1, [r7, #11]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	f7f6 fda3 	bl	8008a4e <HAL_PCD_EP_Receive>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f0c:	7dfb      	ldrb	r3, [r7, #23]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f000 f86e 	bl	8011ff0 <USBD_Get_USB_Status>
 8011f14:	4603      	mov	r3, r0
 8011f16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f18:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3718      	adds	r7, #24
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b082      	sub	sp, #8
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f34:	78fa      	ldrb	r2, [r7, #3]
 8011f36:	4611      	mov	r1, r2
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f6 fdc3 	bl	8008ac4 <HAL_PCD_EP_GetRxCount>
 8011f3e:	4603      	mov	r3, r0
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	460b      	mov	r3, r1
 8011f52:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011f54:	78fb      	ldrb	r3, [r7, #3]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <HAL_PCDEx_LPM_Callback+0x18>
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d01f      	beq.n	8011f9e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011f5e:	e03b      	b.n	8011fd8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	7adb      	ldrb	r3, [r3, #11]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d007      	beq.n	8011f78 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011f68:	f000 f83c 	bl	8011fe4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8011fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	4a1b      	ldr	r2, [pc, #108]	@ (8011fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011f72:	f023 0306 	bic.w	r3, r3, #6
 8011f76:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	6812      	ldr	r2, [r2, #0]
 8011f86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f8a:	f023 0301 	bic.w	r3, r3, #1
 8011f8e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fe fa7c 	bl	8010494 <USBD_LL_Resume>
    break;
 8011f9c:	e01c      	b.n	8011fd8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	6812      	ldr	r2, [r2, #0]
 8011fac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011fb0:	f043 0301 	orr.w	r3, r3, #1
 8011fb4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fe fa4d 	bl	801045c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	7adb      	ldrb	r3, [r3, #11]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d005      	beq.n	8011fd6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011fca:	4b05      	ldr	r3, [pc, #20]	@ (8011fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	4a04      	ldr	r2, [pc, #16]	@ (8011fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011fd0:	f043 0306 	orr.w	r3, r3, #6
 8011fd4:	6113      	str	r3, [r2, #16]
    break;
 8011fd6:	bf00      	nop
}
 8011fd8:	bf00      	nop
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	e000ed00 	.word	0xe000ed00

08011fe4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011fe8:	f7f2 fce0 	bl	80049ac <SystemClock_Config>
}
 8011fec:	bf00      	nop
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ffe:	79fb      	ldrb	r3, [r7, #7]
 8012000:	2b03      	cmp	r3, #3
 8012002:	d817      	bhi.n	8012034 <USBD_Get_USB_Status+0x44>
 8012004:	a201      	add	r2, pc, #4	@ (adr r2, 801200c <USBD_Get_USB_Status+0x1c>)
 8012006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801200a:	bf00      	nop
 801200c:	0801201d 	.word	0x0801201d
 8012010:	08012023 	.word	0x08012023
 8012014:	08012029 	.word	0x08012029
 8012018:	0801202f 	.word	0x0801202f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801201c:	2300      	movs	r3, #0
 801201e:	73fb      	strb	r3, [r7, #15]
    break;
 8012020:	e00b      	b.n	801203a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012022:	2303      	movs	r3, #3
 8012024:	73fb      	strb	r3, [r7, #15]
    break;
 8012026:	e008      	b.n	801203a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012028:	2301      	movs	r3, #1
 801202a:	73fb      	strb	r3, [r7, #15]
    break;
 801202c:	e005      	b.n	801203a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801202e:	2303      	movs	r3, #3
 8012030:	73fb      	strb	r3, [r7, #15]
    break;
 8012032:	e002      	b.n	801203a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012034:	2303      	movs	r3, #3
 8012036:	73fb      	strb	r3, [r7, #15]
    break;
 8012038:	bf00      	nop
  }
  return usb_status;
 801203a:	7bfb      	ldrb	r3, [r7, #15]
}
 801203c:	4618      	mov	r0, r3
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <atof>:
 8012048:	2100      	movs	r1, #0
 801204a:	f000 bec5 	b.w	8012dd8 <strtod>

0801204e <atoi>:
 801204e:	220a      	movs	r2, #10
 8012050:	2100      	movs	r1, #0
 8012052:	f000 bf47 	b.w	8012ee4 <strtol>
	...

08012058 <malloc>:
 8012058:	4b02      	ldr	r3, [pc, #8]	@ (8012064 <malloc+0xc>)
 801205a:	4601      	mov	r1, r0
 801205c:	6818      	ldr	r0, [r3, #0]
 801205e:	f000 b82d 	b.w	80120bc <_malloc_r>
 8012062:	bf00      	nop
 8012064:	20000284 	.word	0x20000284

08012068 <free>:
 8012068:	4b02      	ldr	r3, [pc, #8]	@ (8012074 <free+0xc>)
 801206a:	4601      	mov	r1, r0
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	f002 bc4f 	b.w	8014910 <_free_r>
 8012072:	bf00      	nop
 8012074:	20000284 	.word	0x20000284

08012078 <sbrk_aligned>:
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	4e0f      	ldr	r6, [pc, #60]	@ (80120b8 <sbrk_aligned+0x40>)
 801207c:	460c      	mov	r4, r1
 801207e:	6831      	ldr	r1, [r6, #0]
 8012080:	4605      	mov	r5, r0
 8012082:	b911      	cbnz	r1, 801208a <sbrk_aligned+0x12>
 8012084:	f001 fd64 	bl	8013b50 <_sbrk_r>
 8012088:	6030      	str	r0, [r6, #0]
 801208a:	4621      	mov	r1, r4
 801208c:	4628      	mov	r0, r5
 801208e:	f001 fd5f 	bl	8013b50 <_sbrk_r>
 8012092:	1c43      	adds	r3, r0, #1
 8012094:	d103      	bne.n	801209e <sbrk_aligned+0x26>
 8012096:	f04f 34ff 	mov.w	r4, #4294967295
 801209a:	4620      	mov	r0, r4
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	1cc4      	adds	r4, r0, #3
 80120a0:	f024 0403 	bic.w	r4, r4, #3
 80120a4:	42a0      	cmp	r0, r4
 80120a6:	d0f8      	beq.n	801209a <sbrk_aligned+0x22>
 80120a8:	1a21      	subs	r1, r4, r0
 80120aa:	4628      	mov	r0, r5
 80120ac:	f001 fd50 	bl	8013b50 <_sbrk_r>
 80120b0:	3001      	adds	r0, #1
 80120b2:	d1f2      	bne.n	801209a <sbrk_aligned+0x22>
 80120b4:	e7ef      	b.n	8012096 <sbrk_aligned+0x1e>
 80120b6:	bf00      	nop
 80120b8:	200023b0 	.word	0x200023b0

080120bc <_malloc_r>:
 80120bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c0:	1ccd      	adds	r5, r1, #3
 80120c2:	f025 0503 	bic.w	r5, r5, #3
 80120c6:	3508      	adds	r5, #8
 80120c8:	2d0c      	cmp	r5, #12
 80120ca:	bf38      	it	cc
 80120cc:	250c      	movcc	r5, #12
 80120ce:	2d00      	cmp	r5, #0
 80120d0:	4606      	mov	r6, r0
 80120d2:	db01      	blt.n	80120d8 <_malloc_r+0x1c>
 80120d4:	42a9      	cmp	r1, r5
 80120d6:	d904      	bls.n	80120e2 <_malloc_r+0x26>
 80120d8:	230c      	movs	r3, #12
 80120da:	6033      	str	r3, [r6, #0]
 80120dc:	2000      	movs	r0, #0
 80120de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121b8 <_malloc_r+0xfc>
 80120e6:	f000 f869 	bl	80121bc <__malloc_lock>
 80120ea:	f8d8 3000 	ldr.w	r3, [r8]
 80120ee:	461c      	mov	r4, r3
 80120f0:	bb44      	cbnz	r4, 8012144 <_malloc_r+0x88>
 80120f2:	4629      	mov	r1, r5
 80120f4:	4630      	mov	r0, r6
 80120f6:	f7ff ffbf 	bl	8012078 <sbrk_aligned>
 80120fa:	1c43      	adds	r3, r0, #1
 80120fc:	4604      	mov	r4, r0
 80120fe:	d158      	bne.n	80121b2 <_malloc_r+0xf6>
 8012100:	f8d8 4000 	ldr.w	r4, [r8]
 8012104:	4627      	mov	r7, r4
 8012106:	2f00      	cmp	r7, #0
 8012108:	d143      	bne.n	8012192 <_malloc_r+0xd6>
 801210a:	2c00      	cmp	r4, #0
 801210c:	d04b      	beq.n	80121a6 <_malloc_r+0xea>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	4639      	mov	r1, r7
 8012112:	4630      	mov	r0, r6
 8012114:	eb04 0903 	add.w	r9, r4, r3
 8012118:	f001 fd1a 	bl	8013b50 <_sbrk_r>
 801211c:	4581      	cmp	r9, r0
 801211e:	d142      	bne.n	80121a6 <_malloc_r+0xea>
 8012120:	6821      	ldr	r1, [r4, #0]
 8012122:	1a6d      	subs	r5, r5, r1
 8012124:	4629      	mov	r1, r5
 8012126:	4630      	mov	r0, r6
 8012128:	f7ff ffa6 	bl	8012078 <sbrk_aligned>
 801212c:	3001      	adds	r0, #1
 801212e:	d03a      	beq.n	80121a6 <_malloc_r+0xea>
 8012130:	6823      	ldr	r3, [r4, #0]
 8012132:	442b      	add	r3, r5
 8012134:	6023      	str	r3, [r4, #0]
 8012136:	f8d8 3000 	ldr.w	r3, [r8]
 801213a:	685a      	ldr	r2, [r3, #4]
 801213c:	bb62      	cbnz	r2, 8012198 <_malloc_r+0xdc>
 801213e:	f8c8 7000 	str.w	r7, [r8]
 8012142:	e00f      	b.n	8012164 <_malloc_r+0xa8>
 8012144:	6822      	ldr	r2, [r4, #0]
 8012146:	1b52      	subs	r2, r2, r5
 8012148:	d420      	bmi.n	801218c <_malloc_r+0xd0>
 801214a:	2a0b      	cmp	r2, #11
 801214c:	d917      	bls.n	801217e <_malloc_r+0xc2>
 801214e:	1961      	adds	r1, r4, r5
 8012150:	42a3      	cmp	r3, r4
 8012152:	6025      	str	r5, [r4, #0]
 8012154:	bf18      	it	ne
 8012156:	6059      	strne	r1, [r3, #4]
 8012158:	6863      	ldr	r3, [r4, #4]
 801215a:	bf08      	it	eq
 801215c:	f8c8 1000 	streq.w	r1, [r8]
 8012160:	5162      	str	r2, [r4, r5]
 8012162:	604b      	str	r3, [r1, #4]
 8012164:	4630      	mov	r0, r6
 8012166:	f000 f82f 	bl	80121c8 <__malloc_unlock>
 801216a:	f104 000b 	add.w	r0, r4, #11
 801216e:	1d23      	adds	r3, r4, #4
 8012170:	f020 0007 	bic.w	r0, r0, #7
 8012174:	1ac2      	subs	r2, r0, r3
 8012176:	bf1c      	itt	ne
 8012178:	1a1b      	subne	r3, r3, r0
 801217a:	50a3      	strne	r3, [r4, r2]
 801217c:	e7af      	b.n	80120de <_malloc_r+0x22>
 801217e:	6862      	ldr	r2, [r4, #4]
 8012180:	42a3      	cmp	r3, r4
 8012182:	bf0c      	ite	eq
 8012184:	f8c8 2000 	streq.w	r2, [r8]
 8012188:	605a      	strne	r2, [r3, #4]
 801218a:	e7eb      	b.n	8012164 <_malloc_r+0xa8>
 801218c:	4623      	mov	r3, r4
 801218e:	6864      	ldr	r4, [r4, #4]
 8012190:	e7ae      	b.n	80120f0 <_malloc_r+0x34>
 8012192:	463c      	mov	r4, r7
 8012194:	687f      	ldr	r7, [r7, #4]
 8012196:	e7b6      	b.n	8012106 <_malloc_r+0x4a>
 8012198:	461a      	mov	r2, r3
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	42a3      	cmp	r3, r4
 801219e:	d1fb      	bne.n	8012198 <_malloc_r+0xdc>
 80121a0:	2300      	movs	r3, #0
 80121a2:	6053      	str	r3, [r2, #4]
 80121a4:	e7de      	b.n	8012164 <_malloc_r+0xa8>
 80121a6:	230c      	movs	r3, #12
 80121a8:	6033      	str	r3, [r6, #0]
 80121aa:	4630      	mov	r0, r6
 80121ac:	f000 f80c 	bl	80121c8 <__malloc_unlock>
 80121b0:	e794      	b.n	80120dc <_malloc_r+0x20>
 80121b2:	6005      	str	r5, [r0, #0]
 80121b4:	e7d6      	b.n	8012164 <_malloc_r+0xa8>
 80121b6:	bf00      	nop
 80121b8:	200023b4 	.word	0x200023b4

080121bc <__malloc_lock>:
 80121bc:	4801      	ldr	r0, [pc, #4]	@ (80121c4 <__malloc_lock+0x8>)
 80121be:	f001 bd14 	b.w	8013bea <__retarget_lock_acquire_recursive>
 80121c2:	bf00      	nop
 80121c4:	200024f8 	.word	0x200024f8

080121c8 <__malloc_unlock>:
 80121c8:	4801      	ldr	r0, [pc, #4]	@ (80121d0 <__malloc_unlock+0x8>)
 80121ca:	f001 bd0f 	b.w	8013bec <__retarget_lock_release_recursive>
 80121ce:	bf00      	nop
 80121d0:	200024f8 	.word	0x200024f8

080121d4 <sulp>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	4604      	mov	r4, r0
 80121d8:	460d      	mov	r5, r1
 80121da:	ec45 4b10 	vmov	d0, r4, r5
 80121de:	4616      	mov	r6, r2
 80121e0:	f003 fa98 	bl	8015714 <__ulp>
 80121e4:	ec51 0b10 	vmov	r0, r1, d0
 80121e8:	b17e      	cbz	r6, 801220a <sulp+0x36>
 80121ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80121ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	dd09      	ble.n	801220a <sulp+0x36>
 80121f6:	051b      	lsls	r3, r3, #20
 80121f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80121fc:	2400      	movs	r4, #0
 80121fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012202:	4622      	mov	r2, r4
 8012204:	462b      	mov	r3, r5
 8012206:	f7ee fa2f 	bl	8000668 <__aeabi_dmul>
 801220a:	ec41 0b10 	vmov	d0, r0, r1
 801220e:	bd70      	pop	{r4, r5, r6, pc}

08012210 <_strtod_l>:
 8012210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	b09f      	sub	sp, #124	@ 0x7c
 8012216:	460c      	mov	r4, r1
 8012218:	9217      	str	r2, [sp, #92]	@ 0x5c
 801221a:	2200      	movs	r2, #0
 801221c:	921a      	str	r2, [sp, #104]	@ 0x68
 801221e:	9005      	str	r0, [sp, #20]
 8012220:	f04f 0a00 	mov.w	sl, #0
 8012224:	f04f 0b00 	mov.w	fp, #0
 8012228:	460a      	mov	r2, r1
 801222a:	9219      	str	r2, [sp, #100]	@ 0x64
 801222c:	7811      	ldrb	r1, [r2, #0]
 801222e:	292b      	cmp	r1, #43	@ 0x2b
 8012230:	d04a      	beq.n	80122c8 <_strtod_l+0xb8>
 8012232:	d838      	bhi.n	80122a6 <_strtod_l+0x96>
 8012234:	290d      	cmp	r1, #13
 8012236:	d832      	bhi.n	801229e <_strtod_l+0x8e>
 8012238:	2908      	cmp	r1, #8
 801223a:	d832      	bhi.n	80122a2 <_strtod_l+0x92>
 801223c:	2900      	cmp	r1, #0
 801223e:	d03b      	beq.n	80122b8 <_strtod_l+0xa8>
 8012240:	2200      	movs	r2, #0
 8012242:	920e      	str	r2, [sp, #56]	@ 0x38
 8012244:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012246:	782a      	ldrb	r2, [r5, #0]
 8012248:	2a30      	cmp	r2, #48	@ 0x30
 801224a:	f040 80b2 	bne.w	80123b2 <_strtod_l+0x1a2>
 801224e:	786a      	ldrb	r2, [r5, #1]
 8012250:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012254:	2a58      	cmp	r2, #88	@ 0x58
 8012256:	d16e      	bne.n	8012336 <_strtod_l+0x126>
 8012258:	9302      	str	r3, [sp, #8]
 801225a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	ab1a      	add	r3, sp, #104	@ 0x68
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	4a8f      	ldr	r2, [pc, #572]	@ (80124a0 <_strtod_l+0x290>)
 8012264:	9805      	ldr	r0, [sp, #20]
 8012266:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012268:	a919      	add	r1, sp, #100	@ 0x64
 801226a:	f002 fc03 	bl	8014a74 <__gethex>
 801226e:	f010 060f 	ands.w	r6, r0, #15
 8012272:	4604      	mov	r4, r0
 8012274:	d005      	beq.n	8012282 <_strtod_l+0x72>
 8012276:	2e06      	cmp	r6, #6
 8012278:	d128      	bne.n	80122cc <_strtod_l+0xbc>
 801227a:	3501      	adds	r5, #1
 801227c:	2300      	movs	r3, #0
 801227e:	9519      	str	r5, [sp, #100]	@ 0x64
 8012280:	930e      	str	r3, [sp, #56]	@ 0x38
 8012282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012284:	2b00      	cmp	r3, #0
 8012286:	f040 858e 	bne.w	8012da6 <_strtod_l+0xb96>
 801228a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801228c:	b1cb      	cbz	r3, 80122c2 <_strtod_l+0xb2>
 801228e:	4652      	mov	r2, sl
 8012290:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012294:	ec43 2b10 	vmov	d0, r2, r3
 8012298:	b01f      	add	sp, #124	@ 0x7c
 801229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229e:	2920      	cmp	r1, #32
 80122a0:	d1ce      	bne.n	8012240 <_strtod_l+0x30>
 80122a2:	3201      	adds	r2, #1
 80122a4:	e7c1      	b.n	801222a <_strtod_l+0x1a>
 80122a6:	292d      	cmp	r1, #45	@ 0x2d
 80122a8:	d1ca      	bne.n	8012240 <_strtod_l+0x30>
 80122aa:	2101      	movs	r1, #1
 80122ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80122ae:	1c51      	adds	r1, r2, #1
 80122b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80122b2:	7852      	ldrb	r2, [r2, #1]
 80122b4:	2a00      	cmp	r2, #0
 80122b6:	d1c5      	bne.n	8012244 <_strtod_l+0x34>
 80122b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80122ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f040 8570 	bne.w	8012da2 <_strtod_l+0xb92>
 80122c2:	4652      	mov	r2, sl
 80122c4:	465b      	mov	r3, fp
 80122c6:	e7e5      	b.n	8012294 <_strtod_l+0x84>
 80122c8:	2100      	movs	r1, #0
 80122ca:	e7ef      	b.n	80122ac <_strtod_l+0x9c>
 80122cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80122ce:	b13a      	cbz	r2, 80122e0 <_strtod_l+0xd0>
 80122d0:	2135      	movs	r1, #53	@ 0x35
 80122d2:	a81c      	add	r0, sp, #112	@ 0x70
 80122d4:	f003 fb18 	bl	8015908 <__copybits>
 80122d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122da:	9805      	ldr	r0, [sp, #20]
 80122dc:	f002 feee 	bl	80150bc <_Bfree>
 80122e0:	3e01      	subs	r6, #1
 80122e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80122e4:	2e04      	cmp	r6, #4
 80122e6:	d806      	bhi.n	80122f6 <_strtod_l+0xe6>
 80122e8:	e8df f006 	tbb	[pc, r6]
 80122ec:	201d0314 	.word	0x201d0314
 80122f0:	14          	.byte	0x14
 80122f1:	00          	.byte	0x00
 80122f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80122f6:	05e1      	lsls	r1, r4, #23
 80122f8:	bf48      	it	mi
 80122fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80122fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012302:	0d1b      	lsrs	r3, r3, #20
 8012304:	051b      	lsls	r3, r3, #20
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1bb      	bne.n	8012282 <_strtod_l+0x72>
 801230a:	f001 fc43 	bl	8013b94 <__errno>
 801230e:	2322      	movs	r3, #34	@ 0x22
 8012310:	6003      	str	r3, [r0, #0]
 8012312:	e7b6      	b.n	8012282 <_strtod_l+0x72>
 8012314:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012318:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801231c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012320:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012324:	e7e7      	b.n	80122f6 <_strtod_l+0xe6>
 8012326:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80124a8 <_strtod_l+0x298>
 801232a:	e7e4      	b.n	80122f6 <_strtod_l+0xe6>
 801232c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012330:	f04f 3aff 	mov.w	sl, #4294967295
 8012334:	e7df      	b.n	80122f6 <_strtod_l+0xe6>
 8012336:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012338:	1c5a      	adds	r2, r3, #1
 801233a:	9219      	str	r2, [sp, #100]	@ 0x64
 801233c:	785b      	ldrb	r3, [r3, #1]
 801233e:	2b30      	cmp	r3, #48	@ 0x30
 8012340:	d0f9      	beq.n	8012336 <_strtod_l+0x126>
 8012342:	2b00      	cmp	r3, #0
 8012344:	d09d      	beq.n	8012282 <_strtod_l+0x72>
 8012346:	2301      	movs	r3, #1
 8012348:	2700      	movs	r7, #0
 801234a:	9308      	str	r3, [sp, #32]
 801234c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801234e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012350:	970b      	str	r7, [sp, #44]	@ 0x2c
 8012352:	46b9      	mov	r9, r7
 8012354:	220a      	movs	r2, #10
 8012356:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012358:	7805      	ldrb	r5, [r0, #0]
 801235a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801235e:	b2d9      	uxtb	r1, r3
 8012360:	2909      	cmp	r1, #9
 8012362:	d928      	bls.n	80123b6 <_strtod_l+0x1a6>
 8012364:	494f      	ldr	r1, [pc, #316]	@ (80124a4 <_strtod_l+0x294>)
 8012366:	2201      	movs	r2, #1
 8012368:	f001 fb4b 	bl	8013a02 <strncmp>
 801236c:	2800      	cmp	r0, #0
 801236e:	d032      	beq.n	80123d6 <_strtod_l+0x1c6>
 8012370:	2000      	movs	r0, #0
 8012372:	462a      	mov	r2, r5
 8012374:	900a      	str	r0, [sp, #40]	@ 0x28
 8012376:	464d      	mov	r5, r9
 8012378:	4603      	mov	r3, r0
 801237a:	2a65      	cmp	r2, #101	@ 0x65
 801237c:	d001      	beq.n	8012382 <_strtod_l+0x172>
 801237e:	2a45      	cmp	r2, #69	@ 0x45
 8012380:	d114      	bne.n	80123ac <_strtod_l+0x19c>
 8012382:	b91d      	cbnz	r5, 801238c <_strtod_l+0x17c>
 8012384:	9a08      	ldr	r2, [sp, #32]
 8012386:	4302      	orrs	r2, r0
 8012388:	d096      	beq.n	80122b8 <_strtod_l+0xa8>
 801238a:	2500      	movs	r5, #0
 801238c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801238e:	1c62      	adds	r2, r4, #1
 8012390:	9219      	str	r2, [sp, #100]	@ 0x64
 8012392:	7862      	ldrb	r2, [r4, #1]
 8012394:	2a2b      	cmp	r2, #43	@ 0x2b
 8012396:	d07a      	beq.n	801248e <_strtod_l+0x27e>
 8012398:	2a2d      	cmp	r2, #45	@ 0x2d
 801239a:	d07e      	beq.n	801249a <_strtod_l+0x28a>
 801239c:	f04f 0c00 	mov.w	ip, #0
 80123a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80123a4:	2909      	cmp	r1, #9
 80123a6:	f240 8085 	bls.w	80124b4 <_strtod_l+0x2a4>
 80123aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80123ac:	f04f 0800 	mov.w	r8, #0
 80123b0:	e0a5      	b.n	80124fe <_strtod_l+0x2ee>
 80123b2:	2300      	movs	r3, #0
 80123b4:	e7c8      	b.n	8012348 <_strtod_l+0x138>
 80123b6:	f1b9 0f08 	cmp.w	r9, #8
 80123ba:	bfd8      	it	le
 80123bc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80123be:	f100 0001 	add.w	r0, r0, #1
 80123c2:	bfda      	itte	le
 80123c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80123c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80123ca:	fb02 3707 	mlagt	r7, r2, r7, r3
 80123ce:	f109 0901 	add.w	r9, r9, #1
 80123d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80123d4:	e7bf      	b.n	8012356 <_strtod_l+0x146>
 80123d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123d8:	1c5a      	adds	r2, r3, #1
 80123da:	9219      	str	r2, [sp, #100]	@ 0x64
 80123dc:	785a      	ldrb	r2, [r3, #1]
 80123de:	f1b9 0f00 	cmp.w	r9, #0
 80123e2:	d03b      	beq.n	801245c <_strtod_l+0x24c>
 80123e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80123e6:	464d      	mov	r5, r9
 80123e8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80123ec:	2b09      	cmp	r3, #9
 80123ee:	d912      	bls.n	8012416 <_strtod_l+0x206>
 80123f0:	2301      	movs	r3, #1
 80123f2:	e7c2      	b.n	801237a <_strtod_l+0x16a>
 80123f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123f6:	1c5a      	adds	r2, r3, #1
 80123f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80123fa:	785a      	ldrb	r2, [r3, #1]
 80123fc:	3001      	adds	r0, #1
 80123fe:	2a30      	cmp	r2, #48	@ 0x30
 8012400:	d0f8      	beq.n	80123f4 <_strtod_l+0x1e4>
 8012402:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012406:	2b08      	cmp	r3, #8
 8012408:	f200 84d2 	bhi.w	8012db0 <_strtod_l+0xba0>
 801240c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801240e:	900a      	str	r0, [sp, #40]	@ 0x28
 8012410:	2000      	movs	r0, #0
 8012412:	930c      	str	r3, [sp, #48]	@ 0x30
 8012414:	4605      	mov	r5, r0
 8012416:	3a30      	subs	r2, #48	@ 0x30
 8012418:	f100 0301 	add.w	r3, r0, #1
 801241c:	d018      	beq.n	8012450 <_strtod_l+0x240>
 801241e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012420:	4419      	add	r1, r3
 8012422:	910a      	str	r1, [sp, #40]	@ 0x28
 8012424:	462e      	mov	r6, r5
 8012426:	f04f 0e0a 	mov.w	lr, #10
 801242a:	1c71      	adds	r1, r6, #1
 801242c:	eba1 0c05 	sub.w	ip, r1, r5
 8012430:	4563      	cmp	r3, ip
 8012432:	dc15      	bgt.n	8012460 <_strtod_l+0x250>
 8012434:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012438:	182b      	adds	r3, r5, r0
 801243a:	2b08      	cmp	r3, #8
 801243c:	f105 0501 	add.w	r5, r5, #1
 8012440:	4405      	add	r5, r0
 8012442:	dc1a      	bgt.n	801247a <_strtod_l+0x26a>
 8012444:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012446:	230a      	movs	r3, #10
 8012448:	fb03 2301 	mla	r3, r3, r1, r2
 801244c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801244e:	2300      	movs	r3, #0
 8012450:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012452:	1c51      	adds	r1, r2, #1
 8012454:	9119      	str	r1, [sp, #100]	@ 0x64
 8012456:	7852      	ldrb	r2, [r2, #1]
 8012458:	4618      	mov	r0, r3
 801245a:	e7c5      	b.n	80123e8 <_strtod_l+0x1d8>
 801245c:	4648      	mov	r0, r9
 801245e:	e7ce      	b.n	80123fe <_strtod_l+0x1ee>
 8012460:	2e08      	cmp	r6, #8
 8012462:	dc05      	bgt.n	8012470 <_strtod_l+0x260>
 8012464:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012466:	fb0e f606 	mul.w	r6, lr, r6
 801246a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801246c:	460e      	mov	r6, r1
 801246e:	e7dc      	b.n	801242a <_strtod_l+0x21a>
 8012470:	2910      	cmp	r1, #16
 8012472:	bfd8      	it	le
 8012474:	fb0e f707 	mulle.w	r7, lr, r7
 8012478:	e7f8      	b.n	801246c <_strtod_l+0x25c>
 801247a:	2b0f      	cmp	r3, #15
 801247c:	bfdc      	itt	le
 801247e:	230a      	movle	r3, #10
 8012480:	fb03 2707 	mlale	r7, r3, r7, r2
 8012484:	e7e3      	b.n	801244e <_strtod_l+0x23e>
 8012486:	2300      	movs	r3, #0
 8012488:	930a      	str	r3, [sp, #40]	@ 0x28
 801248a:	2301      	movs	r3, #1
 801248c:	e77a      	b.n	8012384 <_strtod_l+0x174>
 801248e:	f04f 0c00 	mov.w	ip, #0
 8012492:	1ca2      	adds	r2, r4, #2
 8012494:	9219      	str	r2, [sp, #100]	@ 0x64
 8012496:	78a2      	ldrb	r2, [r4, #2]
 8012498:	e782      	b.n	80123a0 <_strtod_l+0x190>
 801249a:	f04f 0c01 	mov.w	ip, #1
 801249e:	e7f8      	b.n	8012492 <_strtod_l+0x282>
 80124a0:	08017d74 	.word	0x08017d74
 80124a4:	08017b34 	.word	0x08017b34
 80124a8:	7ff00000 	.word	0x7ff00000
 80124ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124ae:	1c51      	adds	r1, r2, #1
 80124b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80124b2:	7852      	ldrb	r2, [r2, #1]
 80124b4:	2a30      	cmp	r2, #48	@ 0x30
 80124b6:	d0f9      	beq.n	80124ac <_strtod_l+0x29c>
 80124b8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80124bc:	2908      	cmp	r1, #8
 80124be:	f63f af75 	bhi.w	80123ac <_strtod_l+0x19c>
 80124c2:	3a30      	subs	r2, #48	@ 0x30
 80124c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80124c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80124ca:	f04f 080a 	mov.w	r8, #10
 80124ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124d0:	1c56      	adds	r6, r2, #1
 80124d2:	9619      	str	r6, [sp, #100]	@ 0x64
 80124d4:	7852      	ldrb	r2, [r2, #1]
 80124d6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80124da:	f1be 0f09 	cmp.w	lr, #9
 80124de:	d939      	bls.n	8012554 <_strtod_l+0x344>
 80124e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80124e2:	1a76      	subs	r6, r6, r1
 80124e4:	2e08      	cmp	r6, #8
 80124e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80124ea:	dc03      	bgt.n	80124f4 <_strtod_l+0x2e4>
 80124ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124ee:	4588      	cmp	r8, r1
 80124f0:	bfa8      	it	ge
 80124f2:	4688      	movge	r8, r1
 80124f4:	f1bc 0f00 	cmp.w	ip, #0
 80124f8:	d001      	beq.n	80124fe <_strtod_l+0x2ee>
 80124fa:	f1c8 0800 	rsb	r8, r8, #0
 80124fe:	2d00      	cmp	r5, #0
 8012500:	d14e      	bne.n	80125a0 <_strtod_l+0x390>
 8012502:	9908      	ldr	r1, [sp, #32]
 8012504:	4308      	orrs	r0, r1
 8012506:	f47f aebc 	bne.w	8012282 <_strtod_l+0x72>
 801250a:	2b00      	cmp	r3, #0
 801250c:	f47f aed4 	bne.w	80122b8 <_strtod_l+0xa8>
 8012510:	2a69      	cmp	r2, #105	@ 0x69
 8012512:	d028      	beq.n	8012566 <_strtod_l+0x356>
 8012514:	dc25      	bgt.n	8012562 <_strtod_l+0x352>
 8012516:	2a49      	cmp	r2, #73	@ 0x49
 8012518:	d025      	beq.n	8012566 <_strtod_l+0x356>
 801251a:	2a4e      	cmp	r2, #78	@ 0x4e
 801251c:	f47f aecc 	bne.w	80122b8 <_strtod_l+0xa8>
 8012520:	499a      	ldr	r1, [pc, #616]	@ (801278c <_strtod_l+0x57c>)
 8012522:	a819      	add	r0, sp, #100	@ 0x64
 8012524:	f002 fcc8 	bl	8014eb8 <__match>
 8012528:	2800      	cmp	r0, #0
 801252a:	f43f aec5 	beq.w	80122b8 <_strtod_l+0xa8>
 801252e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b28      	cmp	r3, #40	@ 0x28
 8012534:	d12e      	bne.n	8012594 <_strtod_l+0x384>
 8012536:	4996      	ldr	r1, [pc, #600]	@ (8012790 <_strtod_l+0x580>)
 8012538:	aa1c      	add	r2, sp, #112	@ 0x70
 801253a:	a819      	add	r0, sp, #100	@ 0x64
 801253c:	f002 fcd0 	bl	8014ee0 <__hexnan>
 8012540:	2805      	cmp	r0, #5
 8012542:	d127      	bne.n	8012594 <_strtod_l+0x384>
 8012544:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012546:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801254a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801254e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012552:	e696      	b.n	8012282 <_strtod_l+0x72>
 8012554:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012556:	fb08 2101 	mla	r1, r8, r1, r2
 801255a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801255e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012560:	e7b5      	b.n	80124ce <_strtod_l+0x2be>
 8012562:	2a6e      	cmp	r2, #110	@ 0x6e
 8012564:	e7da      	b.n	801251c <_strtod_l+0x30c>
 8012566:	498b      	ldr	r1, [pc, #556]	@ (8012794 <_strtod_l+0x584>)
 8012568:	a819      	add	r0, sp, #100	@ 0x64
 801256a:	f002 fca5 	bl	8014eb8 <__match>
 801256e:	2800      	cmp	r0, #0
 8012570:	f43f aea2 	beq.w	80122b8 <_strtod_l+0xa8>
 8012574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012576:	4988      	ldr	r1, [pc, #544]	@ (8012798 <_strtod_l+0x588>)
 8012578:	3b01      	subs	r3, #1
 801257a:	a819      	add	r0, sp, #100	@ 0x64
 801257c:	9319      	str	r3, [sp, #100]	@ 0x64
 801257e:	f002 fc9b 	bl	8014eb8 <__match>
 8012582:	b910      	cbnz	r0, 801258a <_strtod_l+0x37a>
 8012584:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012586:	3301      	adds	r3, #1
 8012588:	9319      	str	r3, [sp, #100]	@ 0x64
 801258a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80127a8 <_strtod_l+0x598>
 801258e:	f04f 0a00 	mov.w	sl, #0
 8012592:	e676      	b.n	8012282 <_strtod_l+0x72>
 8012594:	4881      	ldr	r0, [pc, #516]	@ (801279c <_strtod_l+0x58c>)
 8012596:	f001 fb3b 	bl	8013c10 <nan>
 801259a:	ec5b ab10 	vmov	sl, fp, d0
 801259e:	e670      	b.n	8012282 <_strtod_l+0x72>
 80125a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80125a4:	eba8 0303 	sub.w	r3, r8, r3
 80125a8:	f1b9 0f00 	cmp.w	r9, #0
 80125ac:	bf08      	it	eq
 80125ae:	46a9      	moveq	r9, r5
 80125b0:	2d10      	cmp	r5, #16
 80125b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125b4:	462c      	mov	r4, r5
 80125b6:	bfa8      	it	ge
 80125b8:	2410      	movge	r4, #16
 80125ba:	f7ed ffdb 	bl	8000574 <__aeabi_ui2d>
 80125be:	2d09      	cmp	r5, #9
 80125c0:	4682      	mov	sl, r0
 80125c2:	468b      	mov	fp, r1
 80125c4:	dc13      	bgt.n	80125ee <_strtod_l+0x3de>
 80125c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f43f ae5a 	beq.w	8012282 <_strtod_l+0x72>
 80125ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125d0:	dd78      	ble.n	80126c4 <_strtod_l+0x4b4>
 80125d2:	2b16      	cmp	r3, #22
 80125d4:	dc5f      	bgt.n	8012696 <_strtod_l+0x486>
 80125d6:	4972      	ldr	r1, [pc, #456]	@ (80127a0 <_strtod_l+0x590>)
 80125d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80125dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e0:	4652      	mov	r2, sl
 80125e2:	465b      	mov	r3, fp
 80125e4:	f7ee f840 	bl	8000668 <__aeabi_dmul>
 80125e8:	4682      	mov	sl, r0
 80125ea:	468b      	mov	fp, r1
 80125ec:	e649      	b.n	8012282 <_strtod_l+0x72>
 80125ee:	4b6c      	ldr	r3, [pc, #432]	@ (80127a0 <_strtod_l+0x590>)
 80125f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80125f8:	f7ee f836 	bl	8000668 <__aeabi_dmul>
 80125fc:	4682      	mov	sl, r0
 80125fe:	4638      	mov	r0, r7
 8012600:	468b      	mov	fp, r1
 8012602:	f7ed ffb7 	bl	8000574 <__aeabi_ui2d>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	4650      	mov	r0, sl
 801260c:	4659      	mov	r1, fp
 801260e:	f7ed fe75 	bl	80002fc <__adddf3>
 8012612:	2d0f      	cmp	r5, #15
 8012614:	4682      	mov	sl, r0
 8012616:	468b      	mov	fp, r1
 8012618:	ddd5      	ble.n	80125c6 <_strtod_l+0x3b6>
 801261a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801261c:	1b2c      	subs	r4, r5, r4
 801261e:	441c      	add	r4, r3
 8012620:	2c00      	cmp	r4, #0
 8012622:	f340 8093 	ble.w	801274c <_strtod_l+0x53c>
 8012626:	f014 030f 	ands.w	r3, r4, #15
 801262a:	d00a      	beq.n	8012642 <_strtod_l+0x432>
 801262c:	495c      	ldr	r1, [pc, #368]	@ (80127a0 <_strtod_l+0x590>)
 801262e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012632:	4652      	mov	r2, sl
 8012634:	465b      	mov	r3, fp
 8012636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801263a:	f7ee f815 	bl	8000668 <__aeabi_dmul>
 801263e:	4682      	mov	sl, r0
 8012640:	468b      	mov	fp, r1
 8012642:	f034 040f 	bics.w	r4, r4, #15
 8012646:	d073      	beq.n	8012730 <_strtod_l+0x520>
 8012648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801264c:	dd49      	ble.n	80126e2 <_strtod_l+0x4d2>
 801264e:	2400      	movs	r4, #0
 8012650:	46a0      	mov	r8, r4
 8012652:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012654:	46a1      	mov	r9, r4
 8012656:	9a05      	ldr	r2, [sp, #20]
 8012658:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80127a8 <_strtod_l+0x598>
 801265c:	2322      	movs	r3, #34	@ 0x22
 801265e:	6013      	str	r3, [r2, #0]
 8012660:	f04f 0a00 	mov.w	sl, #0
 8012664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012666:	2b00      	cmp	r3, #0
 8012668:	f43f ae0b 	beq.w	8012282 <_strtod_l+0x72>
 801266c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801266e:	9805      	ldr	r0, [sp, #20]
 8012670:	f002 fd24 	bl	80150bc <_Bfree>
 8012674:	9805      	ldr	r0, [sp, #20]
 8012676:	4649      	mov	r1, r9
 8012678:	f002 fd20 	bl	80150bc <_Bfree>
 801267c:	9805      	ldr	r0, [sp, #20]
 801267e:	4641      	mov	r1, r8
 8012680:	f002 fd1c 	bl	80150bc <_Bfree>
 8012684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012686:	9805      	ldr	r0, [sp, #20]
 8012688:	f002 fd18 	bl	80150bc <_Bfree>
 801268c:	9805      	ldr	r0, [sp, #20]
 801268e:	4621      	mov	r1, r4
 8012690:	f002 fd14 	bl	80150bc <_Bfree>
 8012694:	e5f5      	b.n	8012282 <_strtod_l+0x72>
 8012696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801269c:	4293      	cmp	r3, r2
 801269e:	dbbc      	blt.n	801261a <_strtod_l+0x40a>
 80126a0:	4c3f      	ldr	r4, [pc, #252]	@ (80127a0 <_strtod_l+0x590>)
 80126a2:	f1c5 050f 	rsb	r5, r5, #15
 80126a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80126aa:	4652      	mov	r2, sl
 80126ac:	465b      	mov	r3, fp
 80126ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126b2:	f7ed ffd9 	bl	8000668 <__aeabi_dmul>
 80126b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126b8:	1b5d      	subs	r5, r3, r5
 80126ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80126be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80126c2:	e78f      	b.n	80125e4 <_strtod_l+0x3d4>
 80126c4:	3316      	adds	r3, #22
 80126c6:	dba8      	blt.n	801261a <_strtod_l+0x40a>
 80126c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126ca:	eba3 0808 	sub.w	r8, r3, r8
 80126ce:	4b34      	ldr	r3, [pc, #208]	@ (80127a0 <_strtod_l+0x590>)
 80126d0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80126d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80126d8:	4650      	mov	r0, sl
 80126da:	4659      	mov	r1, fp
 80126dc:	f7ee f8ee 	bl	80008bc <__aeabi_ddiv>
 80126e0:	e782      	b.n	80125e8 <_strtod_l+0x3d8>
 80126e2:	2300      	movs	r3, #0
 80126e4:	4f2f      	ldr	r7, [pc, #188]	@ (80127a4 <_strtod_l+0x594>)
 80126e6:	1124      	asrs	r4, r4, #4
 80126e8:	4650      	mov	r0, sl
 80126ea:	4659      	mov	r1, fp
 80126ec:	461e      	mov	r6, r3
 80126ee:	2c01      	cmp	r4, #1
 80126f0:	dc21      	bgt.n	8012736 <_strtod_l+0x526>
 80126f2:	b10b      	cbz	r3, 80126f8 <_strtod_l+0x4e8>
 80126f4:	4682      	mov	sl, r0
 80126f6:	468b      	mov	fp, r1
 80126f8:	492a      	ldr	r1, [pc, #168]	@ (80127a4 <_strtod_l+0x594>)
 80126fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80126fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012702:	4652      	mov	r2, sl
 8012704:	465b      	mov	r3, fp
 8012706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801270a:	f7ed ffad 	bl	8000668 <__aeabi_dmul>
 801270e:	4b26      	ldr	r3, [pc, #152]	@ (80127a8 <_strtod_l+0x598>)
 8012710:	460a      	mov	r2, r1
 8012712:	400b      	ands	r3, r1
 8012714:	4925      	ldr	r1, [pc, #148]	@ (80127ac <_strtod_l+0x59c>)
 8012716:	428b      	cmp	r3, r1
 8012718:	4682      	mov	sl, r0
 801271a:	d898      	bhi.n	801264e <_strtod_l+0x43e>
 801271c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012720:	428b      	cmp	r3, r1
 8012722:	bf86      	itte	hi
 8012724:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80127b0 <_strtod_l+0x5a0>
 8012728:	f04f 3aff 	movhi.w	sl, #4294967295
 801272c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012730:	2300      	movs	r3, #0
 8012732:	9308      	str	r3, [sp, #32]
 8012734:	e076      	b.n	8012824 <_strtod_l+0x614>
 8012736:	07e2      	lsls	r2, r4, #31
 8012738:	d504      	bpl.n	8012744 <_strtod_l+0x534>
 801273a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801273e:	f7ed ff93 	bl	8000668 <__aeabi_dmul>
 8012742:	2301      	movs	r3, #1
 8012744:	3601      	adds	r6, #1
 8012746:	1064      	asrs	r4, r4, #1
 8012748:	3708      	adds	r7, #8
 801274a:	e7d0      	b.n	80126ee <_strtod_l+0x4de>
 801274c:	d0f0      	beq.n	8012730 <_strtod_l+0x520>
 801274e:	4264      	negs	r4, r4
 8012750:	f014 020f 	ands.w	r2, r4, #15
 8012754:	d00a      	beq.n	801276c <_strtod_l+0x55c>
 8012756:	4b12      	ldr	r3, [pc, #72]	@ (80127a0 <_strtod_l+0x590>)
 8012758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801275c:	4650      	mov	r0, sl
 801275e:	4659      	mov	r1, fp
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	f7ee f8aa 	bl	80008bc <__aeabi_ddiv>
 8012768:	4682      	mov	sl, r0
 801276a:	468b      	mov	fp, r1
 801276c:	1124      	asrs	r4, r4, #4
 801276e:	d0df      	beq.n	8012730 <_strtod_l+0x520>
 8012770:	2c1f      	cmp	r4, #31
 8012772:	dd1f      	ble.n	80127b4 <_strtod_l+0x5a4>
 8012774:	2400      	movs	r4, #0
 8012776:	46a0      	mov	r8, r4
 8012778:	940b      	str	r4, [sp, #44]	@ 0x2c
 801277a:	46a1      	mov	r9, r4
 801277c:	9a05      	ldr	r2, [sp, #20]
 801277e:	2322      	movs	r3, #34	@ 0x22
 8012780:	f04f 0a00 	mov.w	sl, #0
 8012784:	f04f 0b00 	mov.w	fp, #0
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	e76b      	b.n	8012664 <_strtod_l+0x454>
 801278c:	08017b43 	.word	0x08017b43
 8012790:	08017d60 	.word	0x08017d60
 8012794:	08017b3b 	.word	0x08017b3b
 8012798:	08017c22 	.word	0x08017c22
 801279c:	08017c1e 	.word	0x08017c1e
 80127a0:	08017ee8 	.word	0x08017ee8
 80127a4:	08017ec0 	.word	0x08017ec0
 80127a8:	7ff00000 	.word	0x7ff00000
 80127ac:	7ca00000 	.word	0x7ca00000
 80127b0:	7fefffff 	.word	0x7fefffff
 80127b4:	f014 0310 	ands.w	r3, r4, #16
 80127b8:	bf18      	it	ne
 80127ba:	236a      	movne	r3, #106	@ 0x6a
 80127bc:	4ea9      	ldr	r6, [pc, #676]	@ (8012a64 <_strtod_l+0x854>)
 80127be:	9308      	str	r3, [sp, #32]
 80127c0:	4650      	mov	r0, sl
 80127c2:	4659      	mov	r1, fp
 80127c4:	2300      	movs	r3, #0
 80127c6:	07e7      	lsls	r7, r4, #31
 80127c8:	d504      	bpl.n	80127d4 <_strtod_l+0x5c4>
 80127ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80127ce:	f7ed ff4b 	bl	8000668 <__aeabi_dmul>
 80127d2:	2301      	movs	r3, #1
 80127d4:	1064      	asrs	r4, r4, #1
 80127d6:	f106 0608 	add.w	r6, r6, #8
 80127da:	d1f4      	bne.n	80127c6 <_strtod_l+0x5b6>
 80127dc:	b10b      	cbz	r3, 80127e2 <_strtod_l+0x5d2>
 80127de:	4682      	mov	sl, r0
 80127e0:	468b      	mov	fp, r1
 80127e2:	9b08      	ldr	r3, [sp, #32]
 80127e4:	b1b3      	cbz	r3, 8012814 <_strtod_l+0x604>
 80127e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80127ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	4659      	mov	r1, fp
 80127f2:	dd0f      	ble.n	8012814 <_strtod_l+0x604>
 80127f4:	2b1f      	cmp	r3, #31
 80127f6:	dd56      	ble.n	80128a6 <_strtod_l+0x696>
 80127f8:	2b34      	cmp	r3, #52	@ 0x34
 80127fa:	bfde      	ittt	le
 80127fc:	f04f 33ff 	movle.w	r3, #4294967295
 8012800:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012804:	4093      	lslle	r3, r2
 8012806:	f04f 0a00 	mov.w	sl, #0
 801280a:	bfcc      	ite	gt
 801280c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012810:	ea03 0b01 	andle.w	fp, r3, r1
 8012814:	2200      	movs	r2, #0
 8012816:	2300      	movs	r3, #0
 8012818:	4650      	mov	r0, sl
 801281a:	4659      	mov	r1, fp
 801281c:	f7ee f98c 	bl	8000b38 <__aeabi_dcmpeq>
 8012820:	2800      	cmp	r0, #0
 8012822:	d1a7      	bne.n	8012774 <_strtod_l+0x564>
 8012824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012826:	9300      	str	r3, [sp, #0]
 8012828:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801282a:	9805      	ldr	r0, [sp, #20]
 801282c:	462b      	mov	r3, r5
 801282e:	464a      	mov	r2, r9
 8012830:	f002 fcac 	bl	801518c <__s2b>
 8012834:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012836:	2800      	cmp	r0, #0
 8012838:	f43f af09 	beq.w	801264e <_strtod_l+0x43e>
 801283c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801283e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012840:	2a00      	cmp	r2, #0
 8012842:	eba3 0308 	sub.w	r3, r3, r8
 8012846:	bfa8      	it	ge
 8012848:	2300      	movge	r3, #0
 801284a:	9312      	str	r3, [sp, #72]	@ 0x48
 801284c:	2400      	movs	r4, #0
 801284e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012852:	9316      	str	r3, [sp, #88]	@ 0x58
 8012854:	46a0      	mov	r8, r4
 8012856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012858:	9805      	ldr	r0, [sp, #20]
 801285a:	6859      	ldr	r1, [r3, #4]
 801285c:	f002 fbee 	bl	801503c <_Balloc>
 8012860:	4681      	mov	r9, r0
 8012862:	2800      	cmp	r0, #0
 8012864:	f43f aef7 	beq.w	8012656 <_strtod_l+0x446>
 8012868:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801286a:	691a      	ldr	r2, [r3, #16]
 801286c:	3202      	adds	r2, #2
 801286e:	f103 010c 	add.w	r1, r3, #12
 8012872:	0092      	lsls	r2, r2, #2
 8012874:	300c      	adds	r0, #12
 8012876:	f001 f9ba 	bl	8013bee <memcpy>
 801287a:	ec4b ab10 	vmov	d0, sl, fp
 801287e:	9805      	ldr	r0, [sp, #20]
 8012880:	aa1c      	add	r2, sp, #112	@ 0x70
 8012882:	a91b      	add	r1, sp, #108	@ 0x6c
 8012884:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012888:	f002 ffb4 	bl	80157f4 <__d2b>
 801288c:	901a      	str	r0, [sp, #104]	@ 0x68
 801288e:	2800      	cmp	r0, #0
 8012890:	f43f aee1 	beq.w	8012656 <_strtod_l+0x446>
 8012894:	9805      	ldr	r0, [sp, #20]
 8012896:	2101      	movs	r1, #1
 8012898:	f002 fd0e 	bl	80152b8 <__i2b>
 801289c:	4680      	mov	r8, r0
 801289e:	b948      	cbnz	r0, 80128b4 <_strtod_l+0x6a4>
 80128a0:	f04f 0800 	mov.w	r8, #0
 80128a4:	e6d7      	b.n	8012656 <_strtod_l+0x446>
 80128a6:	f04f 32ff 	mov.w	r2, #4294967295
 80128aa:	fa02 f303 	lsl.w	r3, r2, r3
 80128ae:	ea03 0a0a 	and.w	sl, r3, sl
 80128b2:	e7af      	b.n	8012814 <_strtod_l+0x604>
 80128b4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80128b6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80128b8:	2d00      	cmp	r5, #0
 80128ba:	bfab      	itete	ge
 80128bc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80128be:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80128c0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80128c2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80128c4:	bfac      	ite	ge
 80128c6:	18ef      	addge	r7, r5, r3
 80128c8:	1b5e      	sublt	r6, r3, r5
 80128ca:	9b08      	ldr	r3, [sp, #32]
 80128cc:	1aed      	subs	r5, r5, r3
 80128ce:	4415      	add	r5, r2
 80128d0:	4b65      	ldr	r3, [pc, #404]	@ (8012a68 <_strtod_l+0x858>)
 80128d2:	3d01      	subs	r5, #1
 80128d4:	429d      	cmp	r5, r3
 80128d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80128da:	da50      	bge.n	801297e <_strtod_l+0x76e>
 80128dc:	1b5b      	subs	r3, r3, r5
 80128de:	2b1f      	cmp	r3, #31
 80128e0:	eba2 0203 	sub.w	r2, r2, r3
 80128e4:	f04f 0101 	mov.w	r1, #1
 80128e8:	dc3d      	bgt.n	8012966 <_strtod_l+0x756>
 80128ea:	fa01 f303 	lsl.w	r3, r1, r3
 80128ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80128f0:	2300      	movs	r3, #0
 80128f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80128f4:	18bd      	adds	r5, r7, r2
 80128f6:	9b08      	ldr	r3, [sp, #32]
 80128f8:	42af      	cmp	r7, r5
 80128fa:	4416      	add	r6, r2
 80128fc:	441e      	add	r6, r3
 80128fe:	463b      	mov	r3, r7
 8012900:	bfa8      	it	ge
 8012902:	462b      	movge	r3, r5
 8012904:	42b3      	cmp	r3, r6
 8012906:	bfa8      	it	ge
 8012908:	4633      	movge	r3, r6
 801290a:	2b00      	cmp	r3, #0
 801290c:	bfc2      	ittt	gt
 801290e:	1aed      	subgt	r5, r5, r3
 8012910:	1af6      	subgt	r6, r6, r3
 8012912:	1aff      	subgt	r7, r7, r3
 8012914:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012916:	2b00      	cmp	r3, #0
 8012918:	dd16      	ble.n	8012948 <_strtod_l+0x738>
 801291a:	4641      	mov	r1, r8
 801291c:	9805      	ldr	r0, [sp, #20]
 801291e:	461a      	mov	r2, r3
 8012920:	f002 fd82 	bl	8015428 <__pow5mult>
 8012924:	4680      	mov	r8, r0
 8012926:	2800      	cmp	r0, #0
 8012928:	d0ba      	beq.n	80128a0 <_strtod_l+0x690>
 801292a:	4601      	mov	r1, r0
 801292c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801292e:	9805      	ldr	r0, [sp, #20]
 8012930:	f002 fcd8 	bl	80152e4 <__multiply>
 8012934:	900a      	str	r0, [sp, #40]	@ 0x28
 8012936:	2800      	cmp	r0, #0
 8012938:	f43f ae8d 	beq.w	8012656 <_strtod_l+0x446>
 801293c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801293e:	9805      	ldr	r0, [sp, #20]
 8012940:	f002 fbbc 	bl	80150bc <_Bfree>
 8012944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012946:	931a      	str	r3, [sp, #104]	@ 0x68
 8012948:	2d00      	cmp	r5, #0
 801294a:	dc1d      	bgt.n	8012988 <_strtod_l+0x778>
 801294c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	dd23      	ble.n	801299a <_strtod_l+0x78a>
 8012952:	4649      	mov	r1, r9
 8012954:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012956:	9805      	ldr	r0, [sp, #20]
 8012958:	f002 fd66 	bl	8015428 <__pow5mult>
 801295c:	4681      	mov	r9, r0
 801295e:	b9e0      	cbnz	r0, 801299a <_strtod_l+0x78a>
 8012960:	f04f 0900 	mov.w	r9, #0
 8012964:	e677      	b.n	8012656 <_strtod_l+0x446>
 8012966:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801296a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801296e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012972:	35e2      	adds	r5, #226	@ 0xe2
 8012974:	fa01 f305 	lsl.w	r3, r1, r5
 8012978:	9310      	str	r3, [sp, #64]	@ 0x40
 801297a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801297c:	e7ba      	b.n	80128f4 <_strtod_l+0x6e4>
 801297e:	2300      	movs	r3, #0
 8012980:	9310      	str	r3, [sp, #64]	@ 0x40
 8012982:	2301      	movs	r3, #1
 8012984:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012986:	e7b5      	b.n	80128f4 <_strtod_l+0x6e4>
 8012988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801298a:	9805      	ldr	r0, [sp, #20]
 801298c:	462a      	mov	r2, r5
 801298e:	f002 fda5 	bl	80154dc <__lshift>
 8012992:	901a      	str	r0, [sp, #104]	@ 0x68
 8012994:	2800      	cmp	r0, #0
 8012996:	d1d9      	bne.n	801294c <_strtod_l+0x73c>
 8012998:	e65d      	b.n	8012656 <_strtod_l+0x446>
 801299a:	2e00      	cmp	r6, #0
 801299c:	dd07      	ble.n	80129ae <_strtod_l+0x79e>
 801299e:	4649      	mov	r1, r9
 80129a0:	9805      	ldr	r0, [sp, #20]
 80129a2:	4632      	mov	r2, r6
 80129a4:	f002 fd9a 	bl	80154dc <__lshift>
 80129a8:	4681      	mov	r9, r0
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d0d8      	beq.n	8012960 <_strtod_l+0x750>
 80129ae:	2f00      	cmp	r7, #0
 80129b0:	dd08      	ble.n	80129c4 <_strtod_l+0x7b4>
 80129b2:	4641      	mov	r1, r8
 80129b4:	9805      	ldr	r0, [sp, #20]
 80129b6:	463a      	mov	r2, r7
 80129b8:	f002 fd90 	bl	80154dc <__lshift>
 80129bc:	4680      	mov	r8, r0
 80129be:	2800      	cmp	r0, #0
 80129c0:	f43f ae49 	beq.w	8012656 <_strtod_l+0x446>
 80129c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80129c6:	9805      	ldr	r0, [sp, #20]
 80129c8:	464a      	mov	r2, r9
 80129ca:	f002 fe0f 	bl	80155ec <__mdiff>
 80129ce:	4604      	mov	r4, r0
 80129d0:	2800      	cmp	r0, #0
 80129d2:	f43f ae40 	beq.w	8012656 <_strtod_l+0x446>
 80129d6:	68c3      	ldr	r3, [r0, #12]
 80129d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80129da:	2300      	movs	r3, #0
 80129dc:	60c3      	str	r3, [r0, #12]
 80129de:	4641      	mov	r1, r8
 80129e0:	f002 fde8 	bl	80155b4 <__mcmp>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	da45      	bge.n	8012a74 <_strtod_l+0x864>
 80129e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129ea:	ea53 030a 	orrs.w	r3, r3, sl
 80129ee:	d16b      	bne.n	8012ac8 <_strtod_l+0x8b8>
 80129f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d167      	bne.n	8012ac8 <_strtod_l+0x8b8>
 80129f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80129fc:	0d1b      	lsrs	r3, r3, #20
 80129fe:	051b      	lsls	r3, r3, #20
 8012a00:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a04:	d960      	bls.n	8012ac8 <_strtod_l+0x8b8>
 8012a06:	6963      	ldr	r3, [r4, #20]
 8012a08:	b913      	cbnz	r3, 8012a10 <_strtod_l+0x800>
 8012a0a:	6923      	ldr	r3, [r4, #16]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	dd5b      	ble.n	8012ac8 <_strtod_l+0x8b8>
 8012a10:	4621      	mov	r1, r4
 8012a12:	2201      	movs	r2, #1
 8012a14:	9805      	ldr	r0, [sp, #20]
 8012a16:	f002 fd61 	bl	80154dc <__lshift>
 8012a1a:	4641      	mov	r1, r8
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	f002 fdc9 	bl	80155b4 <__mcmp>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	dd50      	ble.n	8012ac8 <_strtod_l+0x8b8>
 8012a26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a2a:	9a08      	ldr	r2, [sp, #32]
 8012a2c:	0d1b      	lsrs	r3, r3, #20
 8012a2e:	051b      	lsls	r3, r3, #20
 8012a30:	2a00      	cmp	r2, #0
 8012a32:	d06a      	beq.n	8012b0a <_strtod_l+0x8fa>
 8012a34:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a38:	d867      	bhi.n	8012b0a <_strtod_l+0x8fa>
 8012a3a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012a3e:	f67f ae9d 	bls.w	801277c <_strtod_l+0x56c>
 8012a42:	4b0a      	ldr	r3, [pc, #40]	@ (8012a6c <_strtod_l+0x85c>)
 8012a44:	4650      	mov	r0, sl
 8012a46:	4659      	mov	r1, fp
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f7ed fe0d 	bl	8000668 <__aeabi_dmul>
 8012a4e:	4b08      	ldr	r3, [pc, #32]	@ (8012a70 <_strtod_l+0x860>)
 8012a50:	400b      	ands	r3, r1
 8012a52:	4682      	mov	sl, r0
 8012a54:	468b      	mov	fp, r1
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f47f ae08 	bne.w	801266c <_strtod_l+0x45c>
 8012a5c:	9a05      	ldr	r2, [sp, #20]
 8012a5e:	2322      	movs	r3, #34	@ 0x22
 8012a60:	6013      	str	r3, [r2, #0]
 8012a62:	e603      	b.n	801266c <_strtod_l+0x45c>
 8012a64:	08017d88 	.word	0x08017d88
 8012a68:	fffffc02 	.word	0xfffffc02
 8012a6c:	39500000 	.word	0x39500000
 8012a70:	7ff00000 	.word	0x7ff00000
 8012a74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012a78:	d165      	bne.n	8012b46 <_strtod_l+0x936>
 8012a7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a80:	b35a      	cbz	r2, 8012ada <_strtod_l+0x8ca>
 8012a82:	4a9f      	ldr	r2, [pc, #636]	@ (8012d00 <_strtod_l+0xaf0>)
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d12b      	bne.n	8012ae0 <_strtod_l+0x8d0>
 8012a88:	9b08      	ldr	r3, [sp, #32]
 8012a8a:	4651      	mov	r1, sl
 8012a8c:	b303      	cbz	r3, 8012ad0 <_strtod_l+0x8c0>
 8012a8e:	4b9d      	ldr	r3, [pc, #628]	@ (8012d04 <_strtod_l+0xaf4>)
 8012a90:	465a      	mov	r2, fp
 8012a92:	4013      	ands	r3, r2
 8012a94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012a98:	f04f 32ff 	mov.w	r2, #4294967295
 8012a9c:	d81b      	bhi.n	8012ad6 <_strtod_l+0x8c6>
 8012a9e:	0d1b      	lsrs	r3, r3, #20
 8012aa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8012aa8:	4299      	cmp	r1, r3
 8012aaa:	d119      	bne.n	8012ae0 <_strtod_l+0x8d0>
 8012aac:	4b96      	ldr	r3, [pc, #600]	@ (8012d08 <_strtod_l+0xaf8>)
 8012aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d102      	bne.n	8012aba <_strtod_l+0x8aa>
 8012ab4:	3101      	adds	r1, #1
 8012ab6:	f43f adce 	beq.w	8012656 <_strtod_l+0x446>
 8012aba:	4b92      	ldr	r3, [pc, #584]	@ (8012d04 <_strtod_l+0xaf4>)
 8012abc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012abe:	401a      	ands	r2, r3
 8012ac0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012ac4:	f04f 0a00 	mov.w	sl, #0
 8012ac8:	9b08      	ldr	r3, [sp, #32]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1b9      	bne.n	8012a42 <_strtod_l+0x832>
 8012ace:	e5cd      	b.n	801266c <_strtod_l+0x45c>
 8012ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad4:	e7e8      	b.n	8012aa8 <_strtod_l+0x898>
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	e7e6      	b.n	8012aa8 <_strtod_l+0x898>
 8012ada:	ea53 030a 	orrs.w	r3, r3, sl
 8012ade:	d0a2      	beq.n	8012a26 <_strtod_l+0x816>
 8012ae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ae2:	b1db      	cbz	r3, 8012b1c <_strtod_l+0x90c>
 8012ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ae6:	4213      	tst	r3, r2
 8012ae8:	d0ee      	beq.n	8012ac8 <_strtod_l+0x8b8>
 8012aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aec:	9a08      	ldr	r2, [sp, #32]
 8012aee:	4650      	mov	r0, sl
 8012af0:	4659      	mov	r1, fp
 8012af2:	b1bb      	cbz	r3, 8012b24 <_strtod_l+0x914>
 8012af4:	f7ff fb6e 	bl	80121d4 <sulp>
 8012af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012afc:	ec53 2b10 	vmov	r2, r3, d0
 8012b00:	f7ed fbfc 	bl	80002fc <__adddf3>
 8012b04:	4682      	mov	sl, r0
 8012b06:	468b      	mov	fp, r1
 8012b08:	e7de      	b.n	8012ac8 <_strtod_l+0x8b8>
 8012b0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012b0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012b12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012b16:	f04f 3aff 	mov.w	sl, #4294967295
 8012b1a:	e7d5      	b.n	8012ac8 <_strtod_l+0x8b8>
 8012b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012b1e:	ea13 0f0a 	tst.w	r3, sl
 8012b22:	e7e1      	b.n	8012ae8 <_strtod_l+0x8d8>
 8012b24:	f7ff fb56 	bl	80121d4 <sulp>
 8012b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b2c:	ec53 2b10 	vmov	r2, r3, d0
 8012b30:	f7ed fbe2 	bl	80002f8 <__aeabi_dsub>
 8012b34:	2200      	movs	r2, #0
 8012b36:	2300      	movs	r3, #0
 8012b38:	4682      	mov	sl, r0
 8012b3a:	468b      	mov	fp, r1
 8012b3c:	f7ed fffc 	bl	8000b38 <__aeabi_dcmpeq>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d0c1      	beq.n	8012ac8 <_strtod_l+0x8b8>
 8012b44:	e61a      	b.n	801277c <_strtod_l+0x56c>
 8012b46:	4641      	mov	r1, r8
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f002 feab 	bl	80158a4 <__ratio>
 8012b4e:	ec57 6b10 	vmov	r6, r7, d0
 8012b52:	2200      	movs	r2, #0
 8012b54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012b58:	4630      	mov	r0, r6
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	f7ee f800 	bl	8000b60 <__aeabi_dcmple>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d06f      	beq.n	8012c44 <_strtod_l+0xa34>
 8012b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d17a      	bne.n	8012c60 <_strtod_l+0xa50>
 8012b6a:	f1ba 0f00 	cmp.w	sl, #0
 8012b6e:	d158      	bne.n	8012c22 <_strtod_l+0xa12>
 8012b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d15a      	bne.n	8012c30 <_strtod_l+0xa20>
 8012b7a:	4b64      	ldr	r3, [pc, #400]	@ (8012d0c <_strtod_l+0xafc>)
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4630      	mov	r0, r6
 8012b80:	4639      	mov	r1, r7
 8012b82:	f7ed ffe3 	bl	8000b4c <__aeabi_dcmplt>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d159      	bne.n	8012c3e <_strtod_l+0xa2e>
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	4639      	mov	r1, r7
 8012b8e:	4b60      	ldr	r3, [pc, #384]	@ (8012d10 <_strtod_l+0xb00>)
 8012b90:	2200      	movs	r2, #0
 8012b92:	f7ed fd69 	bl	8000668 <__aeabi_dmul>
 8012b96:	4606      	mov	r6, r0
 8012b98:	460f      	mov	r7, r1
 8012b9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012b9e:	9606      	str	r6, [sp, #24]
 8012ba0:	9307      	str	r3, [sp, #28]
 8012ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ba6:	4d57      	ldr	r5, [pc, #348]	@ (8012d04 <_strtod_l+0xaf4>)
 8012ba8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bae:	401d      	ands	r5, r3
 8012bb0:	4b58      	ldr	r3, [pc, #352]	@ (8012d14 <_strtod_l+0xb04>)
 8012bb2:	429d      	cmp	r5, r3
 8012bb4:	f040 80b2 	bne.w	8012d1c <_strtod_l+0xb0c>
 8012bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012bbe:	ec4b ab10 	vmov	d0, sl, fp
 8012bc2:	f002 fda7 	bl	8015714 <__ulp>
 8012bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bca:	ec51 0b10 	vmov	r0, r1, d0
 8012bce:	f7ed fd4b 	bl	8000668 <__aeabi_dmul>
 8012bd2:	4652      	mov	r2, sl
 8012bd4:	465b      	mov	r3, fp
 8012bd6:	f7ed fb91 	bl	80002fc <__adddf3>
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4949      	ldr	r1, [pc, #292]	@ (8012d04 <_strtod_l+0xaf4>)
 8012bde:	4a4e      	ldr	r2, [pc, #312]	@ (8012d18 <_strtod_l+0xb08>)
 8012be0:	4019      	ands	r1, r3
 8012be2:	4291      	cmp	r1, r2
 8012be4:	4682      	mov	sl, r0
 8012be6:	d942      	bls.n	8012c6e <_strtod_l+0xa5e>
 8012be8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012bea:	4b47      	ldr	r3, [pc, #284]	@ (8012d08 <_strtod_l+0xaf8>)
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d103      	bne.n	8012bf8 <_strtod_l+0x9e8>
 8012bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	f43f ad2f 	beq.w	8012656 <_strtod_l+0x446>
 8012bf8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012d08 <_strtod_l+0xaf8>
 8012bfc:	f04f 3aff 	mov.w	sl, #4294967295
 8012c00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c02:	9805      	ldr	r0, [sp, #20]
 8012c04:	f002 fa5a 	bl	80150bc <_Bfree>
 8012c08:	9805      	ldr	r0, [sp, #20]
 8012c0a:	4649      	mov	r1, r9
 8012c0c:	f002 fa56 	bl	80150bc <_Bfree>
 8012c10:	9805      	ldr	r0, [sp, #20]
 8012c12:	4641      	mov	r1, r8
 8012c14:	f002 fa52 	bl	80150bc <_Bfree>
 8012c18:	9805      	ldr	r0, [sp, #20]
 8012c1a:	4621      	mov	r1, r4
 8012c1c:	f002 fa4e 	bl	80150bc <_Bfree>
 8012c20:	e619      	b.n	8012856 <_strtod_l+0x646>
 8012c22:	f1ba 0f01 	cmp.w	sl, #1
 8012c26:	d103      	bne.n	8012c30 <_strtod_l+0xa20>
 8012c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f43f ada6 	beq.w	801277c <_strtod_l+0x56c>
 8012c30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012ce0 <_strtod_l+0xad0>
 8012c34:	4f35      	ldr	r7, [pc, #212]	@ (8012d0c <_strtod_l+0xafc>)
 8012c36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c3a:	2600      	movs	r6, #0
 8012c3c:	e7b1      	b.n	8012ba2 <_strtod_l+0x992>
 8012c3e:	4f34      	ldr	r7, [pc, #208]	@ (8012d10 <_strtod_l+0xb00>)
 8012c40:	2600      	movs	r6, #0
 8012c42:	e7aa      	b.n	8012b9a <_strtod_l+0x98a>
 8012c44:	4b32      	ldr	r3, [pc, #200]	@ (8012d10 <_strtod_l+0xb00>)
 8012c46:	4630      	mov	r0, r6
 8012c48:	4639      	mov	r1, r7
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f7ed fd0c 	bl	8000668 <__aeabi_dmul>
 8012c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c52:	4606      	mov	r6, r0
 8012c54:	460f      	mov	r7, r1
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d09f      	beq.n	8012b9a <_strtod_l+0x98a>
 8012c5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012c5e:	e7a0      	b.n	8012ba2 <_strtod_l+0x992>
 8012c60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012ce8 <_strtod_l+0xad8>
 8012c64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c68:	ec57 6b17 	vmov	r6, r7, d7
 8012c6c:	e799      	b.n	8012ba2 <_strtod_l+0x992>
 8012c6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012c72:	9b08      	ldr	r3, [sp, #32]
 8012c74:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1c1      	bne.n	8012c00 <_strtod_l+0x9f0>
 8012c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c80:	0d1b      	lsrs	r3, r3, #20
 8012c82:	051b      	lsls	r3, r3, #20
 8012c84:	429d      	cmp	r5, r3
 8012c86:	d1bb      	bne.n	8012c00 <_strtod_l+0x9f0>
 8012c88:	4630      	mov	r0, r6
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ee f84c 	bl	8000d28 <__aeabi_d2lz>
 8012c90:	f7ed fcbc 	bl	800060c <__aeabi_l2d>
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f7ed fb2c 	bl	80002f8 <__aeabi_dsub>
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012ca8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cae:	ea46 060a 	orr.w	r6, r6, sl
 8012cb2:	431e      	orrs	r6, r3
 8012cb4:	d06f      	beq.n	8012d96 <_strtod_l+0xb86>
 8012cb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012cf0 <_strtod_l+0xae0>)
 8012cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbc:	f7ed ff46 	bl	8000b4c <__aeabi_dcmplt>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	f47f acd3 	bne.w	801266c <_strtod_l+0x45c>
 8012cc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012cf8 <_strtod_l+0xae8>)
 8012cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cd0:	f7ed ff5a 	bl	8000b88 <__aeabi_dcmpgt>
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	d093      	beq.n	8012c00 <_strtod_l+0x9f0>
 8012cd8:	e4c8      	b.n	801266c <_strtod_l+0x45c>
 8012cda:	bf00      	nop
 8012cdc:	f3af 8000 	nop.w
 8012ce0:	00000000 	.word	0x00000000
 8012ce4:	bff00000 	.word	0xbff00000
 8012ce8:	00000000 	.word	0x00000000
 8012cec:	3ff00000 	.word	0x3ff00000
 8012cf0:	94a03595 	.word	0x94a03595
 8012cf4:	3fdfffff 	.word	0x3fdfffff
 8012cf8:	35afe535 	.word	0x35afe535
 8012cfc:	3fe00000 	.word	0x3fe00000
 8012d00:	000fffff 	.word	0x000fffff
 8012d04:	7ff00000 	.word	0x7ff00000
 8012d08:	7fefffff 	.word	0x7fefffff
 8012d0c:	3ff00000 	.word	0x3ff00000
 8012d10:	3fe00000 	.word	0x3fe00000
 8012d14:	7fe00000 	.word	0x7fe00000
 8012d18:	7c9fffff 	.word	0x7c9fffff
 8012d1c:	9b08      	ldr	r3, [sp, #32]
 8012d1e:	b323      	cbz	r3, 8012d6a <_strtod_l+0xb5a>
 8012d20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012d24:	d821      	bhi.n	8012d6a <_strtod_l+0xb5a>
 8012d26:	a328      	add	r3, pc, #160	@ (adr r3, 8012dc8 <_strtod_l+0xbb8>)
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	4639      	mov	r1, r7
 8012d30:	f7ed ff16 	bl	8000b60 <__aeabi_dcmple>
 8012d34:	b1a0      	cbz	r0, 8012d60 <_strtod_l+0xb50>
 8012d36:	4639      	mov	r1, r7
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f7ed ff6d 	bl	8000c18 <__aeabi_d2uiz>
 8012d3e:	2801      	cmp	r0, #1
 8012d40:	bf38      	it	cc
 8012d42:	2001      	movcc	r0, #1
 8012d44:	f7ed fc16 	bl	8000574 <__aeabi_ui2d>
 8012d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	460f      	mov	r7, r1
 8012d4e:	b9fb      	cbnz	r3, 8012d90 <_strtod_l+0xb80>
 8012d50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012d54:	9014      	str	r0, [sp, #80]	@ 0x50
 8012d56:	9315      	str	r3, [sp, #84]	@ 0x54
 8012d58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012d5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012d60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012d66:	1b5b      	subs	r3, r3, r5
 8012d68:	9311      	str	r3, [sp, #68]	@ 0x44
 8012d6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012d6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012d72:	f002 fccf 	bl	8015714 <__ulp>
 8012d76:	4650      	mov	r0, sl
 8012d78:	ec53 2b10 	vmov	r2, r3, d0
 8012d7c:	4659      	mov	r1, fp
 8012d7e:	f7ed fc73 	bl	8000668 <__aeabi_dmul>
 8012d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012d86:	f7ed fab9 	bl	80002fc <__adddf3>
 8012d8a:	4682      	mov	sl, r0
 8012d8c:	468b      	mov	fp, r1
 8012d8e:	e770      	b.n	8012c72 <_strtod_l+0xa62>
 8012d90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012d94:	e7e0      	b.n	8012d58 <_strtod_l+0xb48>
 8012d96:	a30e      	add	r3, pc, #56	@ (adr r3, 8012dd0 <_strtod_l+0xbc0>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	f7ed fed6 	bl	8000b4c <__aeabi_dcmplt>
 8012da0:	e798      	b.n	8012cd4 <_strtod_l+0xac4>
 8012da2:	2300      	movs	r3, #0
 8012da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8012da6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012daa:	6013      	str	r3, [r2, #0]
 8012dac:	f7ff ba6d 	b.w	801228a <_strtod_l+0x7a>
 8012db0:	2a65      	cmp	r2, #101	@ 0x65
 8012db2:	f43f ab68 	beq.w	8012486 <_strtod_l+0x276>
 8012db6:	2a45      	cmp	r2, #69	@ 0x45
 8012db8:	f43f ab65 	beq.w	8012486 <_strtod_l+0x276>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	f7ff bba0 	b.w	8012502 <_strtod_l+0x2f2>
 8012dc2:	bf00      	nop
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	ffc00000 	.word	0xffc00000
 8012dcc:	41dfffff 	.word	0x41dfffff
 8012dd0:	94a03595 	.word	0x94a03595
 8012dd4:	3fcfffff 	.word	0x3fcfffff

08012dd8 <strtod>:
 8012dd8:	460a      	mov	r2, r1
 8012dda:	4601      	mov	r1, r0
 8012ddc:	4802      	ldr	r0, [pc, #8]	@ (8012de8 <strtod+0x10>)
 8012dde:	4b03      	ldr	r3, [pc, #12]	@ (8012dec <strtod+0x14>)
 8012de0:	6800      	ldr	r0, [r0, #0]
 8012de2:	f7ff ba15 	b.w	8012210 <_strtod_l>
 8012de6:	bf00      	nop
 8012de8:	20000284 	.word	0x20000284
 8012dec:	20000118 	.word	0x20000118

08012df0 <_strtol_l.isra.0>:
 8012df0:	2b24      	cmp	r3, #36	@ 0x24
 8012df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012df6:	4686      	mov	lr, r0
 8012df8:	4690      	mov	r8, r2
 8012dfa:	d801      	bhi.n	8012e00 <_strtol_l.isra.0+0x10>
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	d106      	bne.n	8012e0e <_strtol_l.isra.0+0x1e>
 8012e00:	f000 fec8 	bl	8013b94 <__errno>
 8012e04:	2316      	movs	r3, #22
 8012e06:	6003      	str	r3, [r0, #0]
 8012e08:	2000      	movs	r0, #0
 8012e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e0e:	4834      	ldr	r0, [pc, #208]	@ (8012ee0 <_strtol_l.isra.0+0xf0>)
 8012e10:	460d      	mov	r5, r1
 8012e12:	462a      	mov	r2, r5
 8012e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e18:	5d06      	ldrb	r6, [r0, r4]
 8012e1a:	f016 0608 	ands.w	r6, r6, #8
 8012e1e:	d1f8      	bne.n	8012e12 <_strtol_l.isra.0+0x22>
 8012e20:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e22:	d110      	bne.n	8012e46 <_strtol_l.isra.0+0x56>
 8012e24:	782c      	ldrb	r4, [r5, #0]
 8012e26:	2601      	movs	r6, #1
 8012e28:	1c95      	adds	r5, r2, #2
 8012e2a:	f033 0210 	bics.w	r2, r3, #16
 8012e2e:	d115      	bne.n	8012e5c <_strtol_l.isra.0+0x6c>
 8012e30:	2c30      	cmp	r4, #48	@ 0x30
 8012e32:	d10d      	bne.n	8012e50 <_strtol_l.isra.0+0x60>
 8012e34:	782a      	ldrb	r2, [r5, #0]
 8012e36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e3a:	2a58      	cmp	r2, #88	@ 0x58
 8012e3c:	d108      	bne.n	8012e50 <_strtol_l.isra.0+0x60>
 8012e3e:	786c      	ldrb	r4, [r5, #1]
 8012e40:	3502      	adds	r5, #2
 8012e42:	2310      	movs	r3, #16
 8012e44:	e00a      	b.n	8012e5c <_strtol_l.isra.0+0x6c>
 8012e46:	2c2b      	cmp	r4, #43	@ 0x2b
 8012e48:	bf04      	itt	eq
 8012e4a:	782c      	ldrbeq	r4, [r5, #0]
 8012e4c:	1c95      	addeq	r5, r2, #2
 8012e4e:	e7ec      	b.n	8012e2a <_strtol_l.isra.0+0x3a>
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1f6      	bne.n	8012e42 <_strtol_l.isra.0+0x52>
 8012e54:	2c30      	cmp	r4, #48	@ 0x30
 8012e56:	bf14      	ite	ne
 8012e58:	230a      	movne	r3, #10
 8012e5a:	2308      	moveq	r3, #8
 8012e5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e64:	2200      	movs	r2, #0
 8012e66:	fbbc f9f3 	udiv	r9, ip, r3
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012e74:	2f09      	cmp	r7, #9
 8012e76:	d80f      	bhi.n	8012e98 <_strtol_l.isra.0+0xa8>
 8012e78:	463c      	mov	r4, r7
 8012e7a:	42a3      	cmp	r3, r4
 8012e7c:	dd1b      	ble.n	8012eb6 <_strtol_l.isra.0+0xc6>
 8012e7e:	1c57      	adds	r7, r2, #1
 8012e80:	d007      	beq.n	8012e92 <_strtol_l.isra.0+0xa2>
 8012e82:	4581      	cmp	r9, r0
 8012e84:	d314      	bcc.n	8012eb0 <_strtol_l.isra.0+0xc0>
 8012e86:	d101      	bne.n	8012e8c <_strtol_l.isra.0+0x9c>
 8012e88:	45a2      	cmp	sl, r4
 8012e8a:	db11      	blt.n	8012eb0 <_strtol_l.isra.0+0xc0>
 8012e8c:	fb00 4003 	mla	r0, r0, r3, r4
 8012e90:	2201      	movs	r2, #1
 8012e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e96:	e7eb      	b.n	8012e70 <_strtol_l.isra.0+0x80>
 8012e98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012e9c:	2f19      	cmp	r7, #25
 8012e9e:	d801      	bhi.n	8012ea4 <_strtol_l.isra.0+0xb4>
 8012ea0:	3c37      	subs	r4, #55	@ 0x37
 8012ea2:	e7ea      	b.n	8012e7a <_strtol_l.isra.0+0x8a>
 8012ea4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ea8:	2f19      	cmp	r7, #25
 8012eaa:	d804      	bhi.n	8012eb6 <_strtol_l.isra.0+0xc6>
 8012eac:	3c57      	subs	r4, #87	@ 0x57
 8012eae:	e7e4      	b.n	8012e7a <_strtol_l.isra.0+0x8a>
 8012eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb4:	e7ed      	b.n	8012e92 <_strtol_l.isra.0+0xa2>
 8012eb6:	1c53      	adds	r3, r2, #1
 8012eb8:	d108      	bne.n	8012ecc <_strtol_l.isra.0+0xdc>
 8012eba:	2322      	movs	r3, #34	@ 0x22
 8012ebc:	f8ce 3000 	str.w	r3, [lr]
 8012ec0:	4660      	mov	r0, ip
 8012ec2:	f1b8 0f00 	cmp.w	r8, #0
 8012ec6:	d0a0      	beq.n	8012e0a <_strtol_l.isra.0+0x1a>
 8012ec8:	1e69      	subs	r1, r5, #1
 8012eca:	e006      	b.n	8012eda <_strtol_l.isra.0+0xea>
 8012ecc:	b106      	cbz	r6, 8012ed0 <_strtol_l.isra.0+0xe0>
 8012ece:	4240      	negs	r0, r0
 8012ed0:	f1b8 0f00 	cmp.w	r8, #0
 8012ed4:	d099      	beq.n	8012e0a <_strtol_l.isra.0+0x1a>
 8012ed6:	2a00      	cmp	r2, #0
 8012ed8:	d1f6      	bne.n	8012ec8 <_strtol_l.isra.0+0xd8>
 8012eda:	f8c8 1000 	str.w	r1, [r8]
 8012ede:	e794      	b.n	8012e0a <_strtol_l.isra.0+0x1a>
 8012ee0:	08017db1 	.word	0x08017db1

08012ee4 <strtol>:
 8012ee4:	4613      	mov	r3, r2
 8012ee6:	460a      	mov	r2, r1
 8012ee8:	4601      	mov	r1, r0
 8012eea:	4802      	ldr	r0, [pc, #8]	@ (8012ef4 <strtol+0x10>)
 8012eec:	6800      	ldr	r0, [r0, #0]
 8012eee:	f7ff bf7f 	b.w	8012df0 <_strtol_l.isra.0>
 8012ef2:	bf00      	nop
 8012ef4:	20000284 	.word	0x20000284

08012ef8 <__cvt>:
 8012ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012efc:	ec57 6b10 	vmov	r6, r7, d0
 8012f00:	2f00      	cmp	r7, #0
 8012f02:	460c      	mov	r4, r1
 8012f04:	4619      	mov	r1, r3
 8012f06:	463b      	mov	r3, r7
 8012f08:	bfbb      	ittet	lt
 8012f0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012f0e:	461f      	movlt	r7, r3
 8012f10:	2300      	movge	r3, #0
 8012f12:	232d      	movlt	r3, #45	@ 0x2d
 8012f14:	700b      	strb	r3, [r1, #0]
 8012f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012f1c:	4691      	mov	r9, r2
 8012f1e:	f023 0820 	bic.w	r8, r3, #32
 8012f22:	bfbc      	itt	lt
 8012f24:	4632      	movlt	r2, r6
 8012f26:	4616      	movlt	r6, r2
 8012f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012f2c:	d005      	beq.n	8012f3a <__cvt+0x42>
 8012f2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012f32:	d100      	bne.n	8012f36 <__cvt+0x3e>
 8012f34:	3401      	adds	r4, #1
 8012f36:	2102      	movs	r1, #2
 8012f38:	e000      	b.n	8012f3c <__cvt+0x44>
 8012f3a:	2103      	movs	r1, #3
 8012f3c:	ab03      	add	r3, sp, #12
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	ab02      	add	r3, sp, #8
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	ec47 6b10 	vmov	d0, r6, r7
 8012f48:	4653      	mov	r3, sl
 8012f4a:	4622      	mov	r2, r4
 8012f4c:	f000 ff10 	bl	8013d70 <_dtoa_r>
 8012f50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012f54:	4605      	mov	r5, r0
 8012f56:	d119      	bne.n	8012f8c <__cvt+0x94>
 8012f58:	f019 0f01 	tst.w	r9, #1
 8012f5c:	d00e      	beq.n	8012f7c <__cvt+0x84>
 8012f5e:	eb00 0904 	add.w	r9, r0, r4
 8012f62:	2200      	movs	r2, #0
 8012f64:	2300      	movs	r3, #0
 8012f66:	4630      	mov	r0, r6
 8012f68:	4639      	mov	r1, r7
 8012f6a:	f7ed fde5 	bl	8000b38 <__aeabi_dcmpeq>
 8012f6e:	b108      	cbz	r0, 8012f74 <__cvt+0x7c>
 8012f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f74:	2230      	movs	r2, #48	@ 0x30
 8012f76:	9b03      	ldr	r3, [sp, #12]
 8012f78:	454b      	cmp	r3, r9
 8012f7a:	d31e      	bcc.n	8012fba <__cvt+0xc2>
 8012f7c:	9b03      	ldr	r3, [sp, #12]
 8012f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f80:	1b5b      	subs	r3, r3, r5
 8012f82:	4628      	mov	r0, r5
 8012f84:	6013      	str	r3, [r2, #0]
 8012f86:	b004      	add	sp, #16
 8012f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012f90:	eb00 0904 	add.w	r9, r0, r4
 8012f94:	d1e5      	bne.n	8012f62 <__cvt+0x6a>
 8012f96:	7803      	ldrb	r3, [r0, #0]
 8012f98:	2b30      	cmp	r3, #48	@ 0x30
 8012f9a:	d10a      	bne.n	8012fb2 <__cvt+0xba>
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	f7ed fdc8 	bl	8000b38 <__aeabi_dcmpeq>
 8012fa8:	b918      	cbnz	r0, 8012fb2 <__cvt+0xba>
 8012faa:	f1c4 0401 	rsb	r4, r4, #1
 8012fae:	f8ca 4000 	str.w	r4, [sl]
 8012fb2:	f8da 3000 	ldr.w	r3, [sl]
 8012fb6:	4499      	add	r9, r3
 8012fb8:	e7d3      	b.n	8012f62 <__cvt+0x6a>
 8012fba:	1c59      	adds	r1, r3, #1
 8012fbc:	9103      	str	r1, [sp, #12]
 8012fbe:	701a      	strb	r2, [r3, #0]
 8012fc0:	e7d9      	b.n	8012f76 <__cvt+0x7e>

08012fc2 <__exponent>:
 8012fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fc4:	2900      	cmp	r1, #0
 8012fc6:	bfba      	itte	lt
 8012fc8:	4249      	neglt	r1, r1
 8012fca:	232d      	movlt	r3, #45	@ 0x2d
 8012fcc:	232b      	movge	r3, #43	@ 0x2b
 8012fce:	2909      	cmp	r1, #9
 8012fd0:	7002      	strb	r2, [r0, #0]
 8012fd2:	7043      	strb	r3, [r0, #1]
 8012fd4:	dd29      	ble.n	801302a <__exponent+0x68>
 8012fd6:	f10d 0307 	add.w	r3, sp, #7
 8012fda:	461d      	mov	r5, r3
 8012fdc:	270a      	movs	r7, #10
 8012fde:	461a      	mov	r2, r3
 8012fe0:	fbb1 f6f7 	udiv	r6, r1, r7
 8012fe4:	fb07 1416 	mls	r4, r7, r6, r1
 8012fe8:	3430      	adds	r4, #48	@ 0x30
 8012fea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012fee:	460c      	mov	r4, r1
 8012ff0:	2c63      	cmp	r4, #99	@ 0x63
 8012ff2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ff6:	4631      	mov	r1, r6
 8012ff8:	dcf1      	bgt.n	8012fde <__exponent+0x1c>
 8012ffa:	3130      	adds	r1, #48	@ 0x30
 8012ffc:	1e94      	subs	r4, r2, #2
 8012ffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013002:	1c41      	adds	r1, r0, #1
 8013004:	4623      	mov	r3, r4
 8013006:	42ab      	cmp	r3, r5
 8013008:	d30a      	bcc.n	8013020 <__exponent+0x5e>
 801300a:	f10d 0309 	add.w	r3, sp, #9
 801300e:	1a9b      	subs	r3, r3, r2
 8013010:	42ac      	cmp	r4, r5
 8013012:	bf88      	it	hi
 8013014:	2300      	movhi	r3, #0
 8013016:	3302      	adds	r3, #2
 8013018:	4403      	add	r3, r0
 801301a:	1a18      	subs	r0, r3, r0
 801301c:	b003      	add	sp, #12
 801301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013020:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013024:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013028:	e7ed      	b.n	8013006 <__exponent+0x44>
 801302a:	2330      	movs	r3, #48	@ 0x30
 801302c:	3130      	adds	r1, #48	@ 0x30
 801302e:	7083      	strb	r3, [r0, #2]
 8013030:	70c1      	strb	r1, [r0, #3]
 8013032:	1d03      	adds	r3, r0, #4
 8013034:	e7f1      	b.n	801301a <__exponent+0x58>
	...

08013038 <_printf_float>:
 8013038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303c:	b08d      	sub	sp, #52	@ 0x34
 801303e:	460c      	mov	r4, r1
 8013040:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013044:	4616      	mov	r6, r2
 8013046:	461f      	mov	r7, r3
 8013048:	4605      	mov	r5, r0
 801304a:	f000 fd49 	bl	8013ae0 <_localeconv_r>
 801304e:	6803      	ldr	r3, [r0, #0]
 8013050:	9304      	str	r3, [sp, #16]
 8013052:	4618      	mov	r0, r3
 8013054:	f7ed f944 	bl	80002e0 <strlen>
 8013058:	2300      	movs	r3, #0
 801305a:	930a      	str	r3, [sp, #40]	@ 0x28
 801305c:	f8d8 3000 	ldr.w	r3, [r8]
 8013060:	9005      	str	r0, [sp, #20]
 8013062:	3307      	adds	r3, #7
 8013064:	f023 0307 	bic.w	r3, r3, #7
 8013068:	f103 0208 	add.w	r2, r3, #8
 801306c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013070:	f8d4 b000 	ldr.w	fp, [r4]
 8013074:	f8c8 2000 	str.w	r2, [r8]
 8013078:	e9d3 8900 	ldrd	r8, r9, [r3]
 801307c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013080:	9307      	str	r3, [sp, #28]
 8013082:	f8cd 8018 	str.w	r8, [sp, #24]
 8013086:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801308a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801308e:	4b9c      	ldr	r3, [pc, #624]	@ (8013300 <_printf_float+0x2c8>)
 8013090:	f04f 32ff 	mov.w	r2, #4294967295
 8013094:	f7ed fd82 	bl	8000b9c <__aeabi_dcmpun>
 8013098:	bb70      	cbnz	r0, 80130f8 <_printf_float+0xc0>
 801309a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801309e:	4b98      	ldr	r3, [pc, #608]	@ (8013300 <_printf_float+0x2c8>)
 80130a0:	f04f 32ff 	mov.w	r2, #4294967295
 80130a4:	f7ed fd5c 	bl	8000b60 <__aeabi_dcmple>
 80130a8:	bb30      	cbnz	r0, 80130f8 <_printf_float+0xc0>
 80130aa:	2200      	movs	r2, #0
 80130ac:	2300      	movs	r3, #0
 80130ae:	4640      	mov	r0, r8
 80130b0:	4649      	mov	r1, r9
 80130b2:	f7ed fd4b 	bl	8000b4c <__aeabi_dcmplt>
 80130b6:	b110      	cbz	r0, 80130be <_printf_float+0x86>
 80130b8:	232d      	movs	r3, #45	@ 0x2d
 80130ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130be:	4a91      	ldr	r2, [pc, #580]	@ (8013304 <_printf_float+0x2cc>)
 80130c0:	4b91      	ldr	r3, [pc, #580]	@ (8013308 <_printf_float+0x2d0>)
 80130c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80130c6:	bf8c      	ite	hi
 80130c8:	4690      	movhi	r8, r2
 80130ca:	4698      	movls	r8, r3
 80130cc:	2303      	movs	r3, #3
 80130ce:	6123      	str	r3, [r4, #16]
 80130d0:	f02b 0304 	bic.w	r3, fp, #4
 80130d4:	6023      	str	r3, [r4, #0]
 80130d6:	f04f 0900 	mov.w	r9, #0
 80130da:	9700      	str	r7, [sp, #0]
 80130dc:	4633      	mov	r3, r6
 80130de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80130e0:	4621      	mov	r1, r4
 80130e2:	4628      	mov	r0, r5
 80130e4:	f000 f9d2 	bl	801348c <_printf_common>
 80130e8:	3001      	adds	r0, #1
 80130ea:	f040 808d 	bne.w	8013208 <_printf_float+0x1d0>
 80130ee:	f04f 30ff 	mov.w	r0, #4294967295
 80130f2:	b00d      	add	sp, #52	@ 0x34
 80130f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f8:	4642      	mov	r2, r8
 80130fa:	464b      	mov	r3, r9
 80130fc:	4640      	mov	r0, r8
 80130fe:	4649      	mov	r1, r9
 8013100:	f7ed fd4c 	bl	8000b9c <__aeabi_dcmpun>
 8013104:	b140      	cbz	r0, 8013118 <_printf_float+0xe0>
 8013106:	464b      	mov	r3, r9
 8013108:	2b00      	cmp	r3, #0
 801310a:	bfbc      	itt	lt
 801310c:	232d      	movlt	r3, #45	@ 0x2d
 801310e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013112:	4a7e      	ldr	r2, [pc, #504]	@ (801330c <_printf_float+0x2d4>)
 8013114:	4b7e      	ldr	r3, [pc, #504]	@ (8013310 <_printf_float+0x2d8>)
 8013116:	e7d4      	b.n	80130c2 <_printf_float+0x8a>
 8013118:	6863      	ldr	r3, [r4, #4]
 801311a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801311e:	9206      	str	r2, [sp, #24]
 8013120:	1c5a      	adds	r2, r3, #1
 8013122:	d13b      	bne.n	801319c <_printf_float+0x164>
 8013124:	2306      	movs	r3, #6
 8013126:	6063      	str	r3, [r4, #4]
 8013128:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801312c:	2300      	movs	r3, #0
 801312e:	6022      	str	r2, [r4, #0]
 8013130:	9303      	str	r3, [sp, #12]
 8013132:	ab0a      	add	r3, sp, #40	@ 0x28
 8013134:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013138:	ab09      	add	r3, sp, #36	@ 0x24
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	6861      	ldr	r1, [r4, #4]
 801313e:	ec49 8b10 	vmov	d0, r8, r9
 8013142:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013146:	4628      	mov	r0, r5
 8013148:	f7ff fed6 	bl	8012ef8 <__cvt>
 801314c:	9b06      	ldr	r3, [sp, #24]
 801314e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013150:	2b47      	cmp	r3, #71	@ 0x47
 8013152:	4680      	mov	r8, r0
 8013154:	d129      	bne.n	80131aa <_printf_float+0x172>
 8013156:	1cc8      	adds	r0, r1, #3
 8013158:	db02      	blt.n	8013160 <_printf_float+0x128>
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	4299      	cmp	r1, r3
 801315e:	dd41      	ble.n	80131e4 <_printf_float+0x1ac>
 8013160:	f1aa 0a02 	sub.w	sl, sl, #2
 8013164:	fa5f fa8a 	uxtb.w	sl, sl
 8013168:	3901      	subs	r1, #1
 801316a:	4652      	mov	r2, sl
 801316c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013170:	9109      	str	r1, [sp, #36]	@ 0x24
 8013172:	f7ff ff26 	bl	8012fc2 <__exponent>
 8013176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013178:	1813      	adds	r3, r2, r0
 801317a:	2a01      	cmp	r2, #1
 801317c:	4681      	mov	r9, r0
 801317e:	6123      	str	r3, [r4, #16]
 8013180:	dc02      	bgt.n	8013188 <_printf_float+0x150>
 8013182:	6822      	ldr	r2, [r4, #0]
 8013184:	07d2      	lsls	r2, r2, #31
 8013186:	d501      	bpl.n	801318c <_printf_float+0x154>
 8013188:	3301      	adds	r3, #1
 801318a:	6123      	str	r3, [r4, #16]
 801318c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013190:	2b00      	cmp	r3, #0
 8013192:	d0a2      	beq.n	80130da <_printf_float+0xa2>
 8013194:	232d      	movs	r3, #45	@ 0x2d
 8013196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801319a:	e79e      	b.n	80130da <_printf_float+0xa2>
 801319c:	9a06      	ldr	r2, [sp, #24]
 801319e:	2a47      	cmp	r2, #71	@ 0x47
 80131a0:	d1c2      	bne.n	8013128 <_printf_float+0xf0>
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d1c0      	bne.n	8013128 <_printf_float+0xf0>
 80131a6:	2301      	movs	r3, #1
 80131a8:	e7bd      	b.n	8013126 <_printf_float+0xee>
 80131aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80131ae:	d9db      	bls.n	8013168 <_printf_float+0x130>
 80131b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80131b4:	d118      	bne.n	80131e8 <_printf_float+0x1b0>
 80131b6:	2900      	cmp	r1, #0
 80131b8:	6863      	ldr	r3, [r4, #4]
 80131ba:	dd0b      	ble.n	80131d4 <_printf_float+0x19c>
 80131bc:	6121      	str	r1, [r4, #16]
 80131be:	b913      	cbnz	r3, 80131c6 <_printf_float+0x18e>
 80131c0:	6822      	ldr	r2, [r4, #0]
 80131c2:	07d0      	lsls	r0, r2, #31
 80131c4:	d502      	bpl.n	80131cc <_printf_float+0x194>
 80131c6:	3301      	adds	r3, #1
 80131c8:	440b      	add	r3, r1
 80131ca:	6123      	str	r3, [r4, #16]
 80131cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80131ce:	f04f 0900 	mov.w	r9, #0
 80131d2:	e7db      	b.n	801318c <_printf_float+0x154>
 80131d4:	b913      	cbnz	r3, 80131dc <_printf_float+0x1a4>
 80131d6:	6822      	ldr	r2, [r4, #0]
 80131d8:	07d2      	lsls	r2, r2, #31
 80131da:	d501      	bpl.n	80131e0 <_printf_float+0x1a8>
 80131dc:	3302      	adds	r3, #2
 80131de:	e7f4      	b.n	80131ca <_printf_float+0x192>
 80131e0:	2301      	movs	r3, #1
 80131e2:	e7f2      	b.n	80131ca <_printf_float+0x192>
 80131e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80131e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131ea:	4299      	cmp	r1, r3
 80131ec:	db05      	blt.n	80131fa <_printf_float+0x1c2>
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	6121      	str	r1, [r4, #16]
 80131f2:	07d8      	lsls	r0, r3, #31
 80131f4:	d5ea      	bpl.n	80131cc <_printf_float+0x194>
 80131f6:	1c4b      	adds	r3, r1, #1
 80131f8:	e7e7      	b.n	80131ca <_printf_float+0x192>
 80131fa:	2900      	cmp	r1, #0
 80131fc:	bfd4      	ite	le
 80131fe:	f1c1 0202 	rsble	r2, r1, #2
 8013202:	2201      	movgt	r2, #1
 8013204:	4413      	add	r3, r2
 8013206:	e7e0      	b.n	80131ca <_printf_float+0x192>
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	055a      	lsls	r2, r3, #21
 801320c:	d407      	bmi.n	801321e <_printf_float+0x1e6>
 801320e:	6923      	ldr	r3, [r4, #16]
 8013210:	4642      	mov	r2, r8
 8013212:	4631      	mov	r1, r6
 8013214:	4628      	mov	r0, r5
 8013216:	47b8      	blx	r7
 8013218:	3001      	adds	r0, #1
 801321a:	d12b      	bne.n	8013274 <_printf_float+0x23c>
 801321c:	e767      	b.n	80130ee <_printf_float+0xb6>
 801321e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013222:	f240 80dd 	bls.w	80133e0 <_printf_float+0x3a8>
 8013226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801322a:	2200      	movs	r2, #0
 801322c:	2300      	movs	r3, #0
 801322e:	f7ed fc83 	bl	8000b38 <__aeabi_dcmpeq>
 8013232:	2800      	cmp	r0, #0
 8013234:	d033      	beq.n	801329e <_printf_float+0x266>
 8013236:	4a37      	ldr	r2, [pc, #220]	@ (8013314 <_printf_float+0x2dc>)
 8013238:	2301      	movs	r3, #1
 801323a:	4631      	mov	r1, r6
 801323c:	4628      	mov	r0, r5
 801323e:	47b8      	blx	r7
 8013240:	3001      	adds	r0, #1
 8013242:	f43f af54 	beq.w	80130ee <_printf_float+0xb6>
 8013246:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801324a:	4543      	cmp	r3, r8
 801324c:	db02      	blt.n	8013254 <_printf_float+0x21c>
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	07d8      	lsls	r0, r3, #31
 8013252:	d50f      	bpl.n	8013274 <_printf_float+0x23c>
 8013254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013258:	4631      	mov	r1, r6
 801325a:	4628      	mov	r0, r5
 801325c:	47b8      	blx	r7
 801325e:	3001      	adds	r0, #1
 8013260:	f43f af45 	beq.w	80130ee <_printf_float+0xb6>
 8013264:	f04f 0900 	mov.w	r9, #0
 8013268:	f108 38ff 	add.w	r8, r8, #4294967295
 801326c:	f104 0a1a 	add.w	sl, r4, #26
 8013270:	45c8      	cmp	r8, r9
 8013272:	dc09      	bgt.n	8013288 <_printf_float+0x250>
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	079b      	lsls	r3, r3, #30
 8013278:	f100 8103 	bmi.w	8013482 <_printf_float+0x44a>
 801327c:	68e0      	ldr	r0, [r4, #12]
 801327e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013280:	4298      	cmp	r0, r3
 8013282:	bfb8      	it	lt
 8013284:	4618      	movlt	r0, r3
 8013286:	e734      	b.n	80130f2 <_printf_float+0xba>
 8013288:	2301      	movs	r3, #1
 801328a:	4652      	mov	r2, sl
 801328c:	4631      	mov	r1, r6
 801328e:	4628      	mov	r0, r5
 8013290:	47b8      	blx	r7
 8013292:	3001      	adds	r0, #1
 8013294:	f43f af2b 	beq.w	80130ee <_printf_float+0xb6>
 8013298:	f109 0901 	add.w	r9, r9, #1
 801329c:	e7e8      	b.n	8013270 <_printf_float+0x238>
 801329e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	dc39      	bgt.n	8013318 <_printf_float+0x2e0>
 80132a4:	4a1b      	ldr	r2, [pc, #108]	@ (8013314 <_printf_float+0x2dc>)
 80132a6:	2301      	movs	r3, #1
 80132a8:	4631      	mov	r1, r6
 80132aa:	4628      	mov	r0, r5
 80132ac:	47b8      	blx	r7
 80132ae:	3001      	adds	r0, #1
 80132b0:	f43f af1d 	beq.w	80130ee <_printf_float+0xb6>
 80132b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80132b8:	ea59 0303 	orrs.w	r3, r9, r3
 80132bc:	d102      	bne.n	80132c4 <_printf_float+0x28c>
 80132be:	6823      	ldr	r3, [r4, #0]
 80132c0:	07d9      	lsls	r1, r3, #31
 80132c2:	d5d7      	bpl.n	8013274 <_printf_float+0x23c>
 80132c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132c8:	4631      	mov	r1, r6
 80132ca:	4628      	mov	r0, r5
 80132cc:	47b8      	blx	r7
 80132ce:	3001      	adds	r0, #1
 80132d0:	f43f af0d 	beq.w	80130ee <_printf_float+0xb6>
 80132d4:	f04f 0a00 	mov.w	sl, #0
 80132d8:	f104 0b1a 	add.w	fp, r4, #26
 80132dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132de:	425b      	negs	r3, r3
 80132e0:	4553      	cmp	r3, sl
 80132e2:	dc01      	bgt.n	80132e8 <_printf_float+0x2b0>
 80132e4:	464b      	mov	r3, r9
 80132e6:	e793      	b.n	8013210 <_printf_float+0x1d8>
 80132e8:	2301      	movs	r3, #1
 80132ea:	465a      	mov	r2, fp
 80132ec:	4631      	mov	r1, r6
 80132ee:	4628      	mov	r0, r5
 80132f0:	47b8      	blx	r7
 80132f2:	3001      	adds	r0, #1
 80132f4:	f43f aefb 	beq.w	80130ee <_printf_float+0xb6>
 80132f8:	f10a 0a01 	add.w	sl, sl, #1
 80132fc:	e7ee      	b.n	80132dc <_printf_float+0x2a4>
 80132fe:	bf00      	nop
 8013300:	7fefffff 	.word	0x7fefffff
 8013304:	08017b3a 	.word	0x08017b3a
 8013308:	08017b36 	.word	0x08017b36
 801330c:	08017b42 	.word	0x08017b42
 8013310:	08017b3e 	.word	0x08017b3e
 8013314:	08017b46 	.word	0x08017b46
 8013318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801331a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801331e:	4553      	cmp	r3, sl
 8013320:	bfa8      	it	ge
 8013322:	4653      	movge	r3, sl
 8013324:	2b00      	cmp	r3, #0
 8013326:	4699      	mov	r9, r3
 8013328:	dc36      	bgt.n	8013398 <_printf_float+0x360>
 801332a:	f04f 0b00 	mov.w	fp, #0
 801332e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013332:	f104 021a 	add.w	r2, r4, #26
 8013336:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013338:	9306      	str	r3, [sp, #24]
 801333a:	eba3 0309 	sub.w	r3, r3, r9
 801333e:	455b      	cmp	r3, fp
 8013340:	dc31      	bgt.n	80133a6 <_printf_float+0x36e>
 8013342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013344:	459a      	cmp	sl, r3
 8013346:	dc3a      	bgt.n	80133be <_printf_float+0x386>
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	07da      	lsls	r2, r3, #31
 801334c:	d437      	bmi.n	80133be <_printf_float+0x386>
 801334e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013350:	ebaa 0903 	sub.w	r9, sl, r3
 8013354:	9b06      	ldr	r3, [sp, #24]
 8013356:	ebaa 0303 	sub.w	r3, sl, r3
 801335a:	4599      	cmp	r9, r3
 801335c:	bfa8      	it	ge
 801335e:	4699      	movge	r9, r3
 8013360:	f1b9 0f00 	cmp.w	r9, #0
 8013364:	dc33      	bgt.n	80133ce <_printf_float+0x396>
 8013366:	f04f 0800 	mov.w	r8, #0
 801336a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801336e:	f104 0b1a 	add.w	fp, r4, #26
 8013372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013374:	ebaa 0303 	sub.w	r3, sl, r3
 8013378:	eba3 0309 	sub.w	r3, r3, r9
 801337c:	4543      	cmp	r3, r8
 801337e:	f77f af79 	ble.w	8013274 <_printf_float+0x23c>
 8013382:	2301      	movs	r3, #1
 8013384:	465a      	mov	r2, fp
 8013386:	4631      	mov	r1, r6
 8013388:	4628      	mov	r0, r5
 801338a:	47b8      	blx	r7
 801338c:	3001      	adds	r0, #1
 801338e:	f43f aeae 	beq.w	80130ee <_printf_float+0xb6>
 8013392:	f108 0801 	add.w	r8, r8, #1
 8013396:	e7ec      	b.n	8013372 <_printf_float+0x33a>
 8013398:	4642      	mov	r2, r8
 801339a:	4631      	mov	r1, r6
 801339c:	4628      	mov	r0, r5
 801339e:	47b8      	blx	r7
 80133a0:	3001      	adds	r0, #1
 80133a2:	d1c2      	bne.n	801332a <_printf_float+0x2f2>
 80133a4:	e6a3      	b.n	80130ee <_printf_float+0xb6>
 80133a6:	2301      	movs	r3, #1
 80133a8:	4631      	mov	r1, r6
 80133aa:	4628      	mov	r0, r5
 80133ac:	9206      	str	r2, [sp, #24]
 80133ae:	47b8      	blx	r7
 80133b0:	3001      	adds	r0, #1
 80133b2:	f43f ae9c 	beq.w	80130ee <_printf_float+0xb6>
 80133b6:	9a06      	ldr	r2, [sp, #24]
 80133b8:	f10b 0b01 	add.w	fp, fp, #1
 80133bc:	e7bb      	b.n	8013336 <_printf_float+0x2fe>
 80133be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133c2:	4631      	mov	r1, r6
 80133c4:	4628      	mov	r0, r5
 80133c6:	47b8      	blx	r7
 80133c8:	3001      	adds	r0, #1
 80133ca:	d1c0      	bne.n	801334e <_printf_float+0x316>
 80133cc:	e68f      	b.n	80130ee <_printf_float+0xb6>
 80133ce:	9a06      	ldr	r2, [sp, #24]
 80133d0:	464b      	mov	r3, r9
 80133d2:	4442      	add	r2, r8
 80133d4:	4631      	mov	r1, r6
 80133d6:	4628      	mov	r0, r5
 80133d8:	47b8      	blx	r7
 80133da:	3001      	adds	r0, #1
 80133dc:	d1c3      	bne.n	8013366 <_printf_float+0x32e>
 80133de:	e686      	b.n	80130ee <_printf_float+0xb6>
 80133e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80133e4:	f1ba 0f01 	cmp.w	sl, #1
 80133e8:	dc01      	bgt.n	80133ee <_printf_float+0x3b6>
 80133ea:	07db      	lsls	r3, r3, #31
 80133ec:	d536      	bpl.n	801345c <_printf_float+0x424>
 80133ee:	2301      	movs	r3, #1
 80133f0:	4642      	mov	r2, r8
 80133f2:	4631      	mov	r1, r6
 80133f4:	4628      	mov	r0, r5
 80133f6:	47b8      	blx	r7
 80133f8:	3001      	adds	r0, #1
 80133fa:	f43f ae78 	beq.w	80130ee <_printf_float+0xb6>
 80133fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013402:	4631      	mov	r1, r6
 8013404:	4628      	mov	r0, r5
 8013406:	47b8      	blx	r7
 8013408:	3001      	adds	r0, #1
 801340a:	f43f ae70 	beq.w	80130ee <_printf_float+0xb6>
 801340e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013412:	2200      	movs	r2, #0
 8013414:	2300      	movs	r3, #0
 8013416:	f10a 3aff 	add.w	sl, sl, #4294967295
 801341a:	f7ed fb8d 	bl	8000b38 <__aeabi_dcmpeq>
 801341e:	b9c0      	cbnz	r0, 8013452 <_printf_float+0x41a>
 8013420:	4653      	mov	r3, sl
 8013422:	f108 0201 	add.w	r2, r8, #1
 8013426:	4631      	mov	r1, r6
 8013428:	4628      	mov	r0, r5
 801342a:	47b8      	blx	r7
 801342c:	3001      	adds	r0, #1
 801342e:	d10c      	bne.n	801344a <_printf_float+0x412>
 8013430:	e65d      	b.n	80130ee <_printf_float+0xb6>
 8013432:	2301      	movs	r3, #1
 8013434:	465a      	mov	r2, fp
 8013436:	4631      	mov	r1, r6
 8013438:	4628      	mov	r0, r5
 801343a:	47b8      	blx	r7
 801343c:	3001      	adds	r0, #1
 801343e:	f43f ae56 	beq.w	80130ee <_printf_float+0xb6>
 8013442:	f108 0801 	add.w	r8, r8, #1
 8013446:	45d0      	cmp	r8, sl
 8013448:	dbf3      	blt.n	8013432 <_printf_float+0x3fa>
 801344a:	464b      	mov	r3, r9
 801344c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013450:	e6df      	b.n	8013212 <_printf_float+0x1da>
 8013452:	f04f 0800 	mov.w	r8, #0
 8013456:	f104 0b1a 	add.w	fp, r4, #26
 801345a:	e7f4      	b.n	8013446 <_printf_float+0x40e>
 801345c:	2301      	movs	r3, #1
 801345e:	4642      	mov	r2, r8
 8013460:	e7e1      	b.n	8013426 <_printf_float+0x3ee>
 8013462:	2301      	movs	r3, #1
 8013464:	464a      	mov	r2, r9
 8013466:	4631      	mov	r1, r6
 8013468:	4628      	mov	r0, r5
 801346a:	47b8      	blx	r7
 801346c:	3001      	adds	r0, #1
 801346e:	f43f ae3e 	beq.w	80130ee <_printf_float+0xb6>
 8013472:	f108 0801 	add.w	r8, r8, #1
 8013476:	68e3      	ldr	r3, [r4, #12]
 8013478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801347a:	1a5b      	subs	r3, r3, r1
 801347c:	4543      	cmp	r3, r8
 801347e:	dcf0      	bgt.n	8013462 <_printf_float+0x42a>
 8013480:	e6fc      	b.n	801327c <_printf_float+0x244>
 8013482:	f04f 0800 	mov.w	r8, #0
 8013486:	f104 0919 	add.w	r9, r4, #25
 801348a:	e7f4      	b.n	8013476 <_printf_float+0x43e>

0801348c <_printf_common>:
 801348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013490:	4616      	mov	r6, r2
 8013492:	4698      	mov	r8, r3
 8013494:	688a      	ldr	r2, [r1, #8]
 8013496:	690b      	ldr	r3, [r1, #16]
 8013498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801349c:	4293      	cmp	r3, r2
 801349e:	bfb8      	it	lt
 80134a0:	4613      	movlt	r3, r2
 80134a2:	6033      	str	r3, [r6, #0]
 80134a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80134a8:	4607      	mov	r7, r0
 80134aa:	460c      	mov	r4, r1
 80134ac:	b10a      	cbz	r2, 80134b2 <_printf_common+0x26>
 80134ae:	3301      	adds	r3, #1
 80134b0:	6033      	str	r3, [r6, #0]
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	0699      	lsls	r1, r3, #26
 80134b6:	bf42      	ittt	mi
 80134b8:	6833      	ldrmi	r3, [r6, #0]
 80134ba:	3302      	addmi	r3, #2
 80134bc:	6033      	strmi	r3, [r6, #0]
 80134be:	6825      	ldr	r5, [r4, #0]
 80134c0:	f015 0506 	ands.w	r5, r5, #6
 80134c4:	d106      	bne.n	80134d4 <_printf_common+0x48>
 80134c6:	f104 0a19 	add.w	sl, r4, #25
 80134ca:	68e3      	ldr	r3, [r4, #12]
 80134cc:	6832      	ldr	r2, [r6, #0]
 80134ce:	1a9b      	subs	r3, r3, r2
 80134d0:	42ab      	cmp	r3, r5
 80134d2:	dc26      	bgt.n	8013522 <_printf_common+0x96>
 80134d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80134d8:	6822      	ldr	r2, [r4, #0]
 80134da:	3b00      	subs	r3, #0
 80134dc:	bf18      	it	ne
 80134de:	2301      	movne	r3, #1
 80134e0:	0692      	lsls	r2, r2, #26
 80134e2:	d42b      	bmi.n	801353c <_printf_common+0xb0>
 80134e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80134e8:	4641      	mov	r1, r8
 80134ea:	4638      	mov	r0, r7
 80134ec:	47c8      	blx	r9
 80134ee:	3001      	adds	r0, #1
 80134f0:	d01e      	beq.n	8013530 <_printf_common+0xa4>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	6922      	ldr	r2, [r4, #16]
 80134f6:	f003 0306 	and.w	r3, r3, #6
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	bf02      	ittt	eq
 80134fe:	68e5      	ldreq	r5, [r4, #12]
 8013500:	6833      	ldreq	r3, [r6, #0]
 8013502:	1aed      	subeq	r5, r5, r3
 8013504:	68a3      	ldr	r3, [r4, #8]
 8013506:	bf0c      	ite	eq
 8013508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801350c:	2500      	movne	r5, #0
 801350e:	4293      	cmp	r3, r2
 8013510:	bfc4      	itt	gt
 8013512:	1a9b      	subgt	r3, r3, r2
 8013514:	18ed      	addgt	r5, r5, r3
 8013516:	2600      	movs	r6, #0
 8013518:	341a      	adds	r4, #26
 801351a:	42b5      	cmp	r5, r6
 801351c:	d11a      	bne.n	8013554 <_printf_common+0xc8>
 801351e:	2000      	movs	r0, #0
 8013520:	e008      	b.n	8013534 <_printf_common+0xa8>
 8013522:	2301      	movs	r3, #1
 8013524:	4652      	mov	r2, sl
 8013526:	4641      	mov	r1, r8
 8013528:	4638      	mov	r0, r7
 801352a:	47c8      	blx	r9
 801352c:	3001      	adds	r0, #1
 801352e:	d103      	bne.n	8013538 <_printf_common+0xac>
 8013530:	f04f 30ff 	mov.w	r0, #4294967295
 8013534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013538:	3501      	adds	r5, #1
 801353a:	e7c6      	b.n	80134ca <_printf_common+0x3e>
 801353c:	18e1      	adds	r1, r4, r3
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	2030      	movs	r0, #48	@ 0x30
 8013542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013546:	4422      	add	r2, r4
 8013548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801354c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013550:	3302      	adds	r3, #2
 8013552:	e7c7      	b.n	80134e4 <_printf_common+0x58>
 8013554:	2301      	movs	r3, #1
 8013556:	4622      	mov	r2, r4
 8013558:	4641      	mov	r1, r8
 801355a:	4638      	mov	r0, r7
 801355c:	47c8      	blx	r9
 801355e:	3001      	adds	r0, #1
 8013560:	d0e6      	beq.n	8013530 <_printf_common+0xa4>
 8013562:	3601      	adds	r6, #1
 8013564:	e7d9      	b.n	801351a <_printf_common+0x8e>
	...

08013568 <_printf_i>:
 8013568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801356c:	7e0f      	ldrb	r7, [r1, #24]
 801356e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013570:	2f78      	cmp	r7, #120	@ 0x78
 8013572:	4691      	mov	r9, r2
 8013574:	4680      	mov	r8, r0
 8013576:	460c      	mov	r4, r1
 8013578:	469a      	mov	sl, r3
 801357a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801357e:	d807      	bhi.n	8013590 <_printf_i+0x28>
 8013580:	2f62      	cmp	r7, #98	@ 0x62
 8013582:	d80a      	bhi.n	801359a <_printf_i+0x32>
 8013584:	2f00      	cmp	r7, #0
 8013586:	f000 80d1 	beq.w	801372c <_printf_i+0x1c4>
 801358a:	2f58      	cmp	r7, #88	@ 0x58
 801358c:	f000 80b8 	beq.w	8013700 <_printf_i+0x198>
 8013590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013598:	e03a      	b.n	8013610 <_printf_i+0xa8>
 801359a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801359e:	2b15      	cmp	r3, #21
 80135a0:	d8f6      	bhi.n	8013590 <_printf_i+0x28>
 80135a2:	a101      	add	r1, pc, #4	@ (adr r1, 80135a8 <_printf_i+0x40>)
 80135a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80135a8:	08013601 	.word	0x08013601
 80135ac:	08013615 	.word	0x08013615
 80135b0:	08013591 	.word	0x08013591
 80135b4:	08013591 	.word	0x08013591
 80135b8:	08013591 	.word	0x08013591
 80135bc:	08013591 	.word	0x08013591
 80135c0:	08013615 	.word	0x08013615
 80135c4:	08013591 	.word	0x08013591
 80135c8:	08013591 	.word	0x08013591
 80135cc:	08013591 	.word	0x08013591
 80135d0:	08013591 	.word	0x08013591
 80135d4:	08013713 	.word	0x08013713
 80135d8:	0801363f 	.word	0x0801363f
 80135dc:	080136cd 	.word	0x080136cd
 80135e0:	08013591 	.word	0x08013591
 80135e4:	08013591 	.word	0x08013591
 80135e8:	08013735 	.word	0x08013735
 80135ec:	08013591 	.word	0x08013591
 80135f0:	0801363f 	.word	0x0801363f
 80135f4:	08013591 	.word	0x08013591
 80135f8:	08013591 	.word	0x08013591
 80135fc:	080136d5 	.word	0x080136d5
 8013600:	6833      	ldr	r3, [r6, #0]
 8013602:	1d1a      	adds	r2, r3, #4
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6032      	str	r2, [r6, #0]
 8013608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801360c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013610:	2301      	movs	r3, #1
 8013612:	e09c      	b.n	801374e <_printf_i+0x1e6>
 8013614:	6833      	ldr	r3, [r6, #0]
 8013616:	6820      	ldr	r0, [r4, #0]
 8013618:	1d19      	adds	r1, r3, #4
 801361a:	6031      	str	r1, [r6, #0]
 801361c:	0606      	lsls	r6, r0, #24
 801361e:	d501      	bpl.n	8013624 <_printf_i+0xbc>
 8013620:	681d      	ldr	r5, [r3, #0]
 8013622:	e003      	b.n	801362c <_printf_i+0xc4>
 8013624:	0645      	lsls	r5, r0, #25
 8013626:	d5fb      	bpl.n	8013620 <_printf_i+0xb8>
 8013628:	f9b3 5000 	ldrsh.w	r5, [r3]
 801362c:	2d00      	cmp	r5, #0
 801362e:	da03      	bge.n	8013638 <_printf_i+0xd0>
 8013630:	232d      	movs	r3, #45	@ 0x2d
 8013632:	426d      	negs	r5, r5
 8013634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013638:	4858      	ldr	r0, [pc, #352]	@ (801379c <_printf_i+0x234>)
 801363a:	230a      	movs	r3, #10
 801363c:	e011      	b.n	8013662 <_printf_i+0xfa>
 801363e:	6821      	ldr	r1, [r4, #0]
 8013640:	6833      	ldr	r3, [r6, #0]
 8013642:	0608      	lsls	r0, r1, #24
 8013644:	f853 5b04 	ldr.w	r5, [r3], #4
 8013648:	d402      	bmi.n	8013650 <_printf_i+0xe8>
 801364a:	0649      	lsls	r1, r1, #25
 801364c:	bf48      	it	mi
 801364e:	b2ad      	uxthmi	r5, r5
 8013650:	2f6f      	cmp	r7, #111	@ 0x6f
 8013652:	4852      	ldr	r0, [pc, #328]	@ (801379c <_printf_i+0x234>)
 8013654:	6033      	str	r3, [r6, #0]
 8013656:	bf14      	ite	ne
 8013658:	230a      	movne	r3, #10
 801365a:	2308      	moveq	r3, #8
 801365c:	2100      	movs	r1, #0
 801365e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013662:	6866      	ldr	r6, [r4, #4]
 8013664:	60a6      	str	r6, [r4, #8]
 8013666:	2e00      	cmp	r6, #0
 8013668:	db05      	blt.n	8013676 <_printf_i+0x10e>
 801366a:	6821      	ldr	r1, [r4, #0]
 801366c:	432e      	orrs	r6, r5
 801366e:	f021 0104 	bic.w	r1, r1, #4
 8013672:	6021      	str	r1, [r4, #0]
 8013674:	d04b      	beq.n	801370e <_printf_i+0x1a6>
 8013676:	4616      	mov	r6, r2
 8013678:	fbb5 f1f3 	udiv	r1, r5, r3
 801367c:	fb03 5711 	mls	r7, r3, r1, r5
 8013680:	5dc7      	ldrb	r7, [r0, r7]
 8013682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013686:	462f      	mov	r7, r5
 8013688:	42bb      	cmp	r3, r7
 801368a:	460d      	mov	r5, r1
 801368c:	d9f4      	bls.n	8013678 <_printf_i+0x110>
 801368e:	2b08      	cmp	r3, #8
 8013690:	d10b      	bne.n	80136aa <_printf_i+0x142>
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	07df      	lsls	r7, r3, #31
 8013696:	d508      	bpl.n	80136aa <_printf_i+0x142>
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	6861      	ldr	r1, [r4, #4]
 801369c:	4299      	cmp	r1, r3
 801369e:	bfde      	ittt	le
 80136a0:	2330      	movle	r3, #48	@ 0x30
 80136a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80136a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80136aa:	1b92      	subs	r2, r2, r6
 80136ac:	6122      	str	r2, [r4, #16]
 80136ae:	f8cd a000 	str.w	sl, [sp]
 80136b2:	464b      	mov	r3, r9
 80136b4:	aa03      	add	r2, sp, #12
 80136b6:	4621      	mov	r1, r4
 80136b8:	4640      	mov	r0, r8
 80136ba:	f7ff fee7 	bl	801348c <_printf_common>
 80136be:	3001      	adds	r0, #1
 80136c0:	d14a      	bne.n	8013758 <_printf_i+0x1f0>
 80136c2:	f04f 30ff 	mov.w	r0, #4294967295
 80136c6:	b004      	add	sp, #16
 80136c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136cc:	6823      	ldr	r3, [r4, #0]
 80136ce:	f043 0320 	orr.w	r3, r3, #32
 80136d2:	6023      	str	r3, [r4, #0]
 80136d4:	4832      	ldr	r0, [pc, #200]	@ (80137a0 <_printf_i+0x238>)
 80136d6:	2778      	movs	r7, #120	@ 0x78
 80136d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	6831      	ldr	r1, [r6, #0]
 80136e0:	061f      	lsls	r7, r3, #24
 80136e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80136e6:	d402      	bmi.n	80136ee <_printf_i+0x186>
 80136e8:	065f      	lsls	r7, r3, #25
 80136ea:	bf48      	it	mi
 80136ec:	b2ad      	uxthmi	r5, r5
 80136ee:	6031      	str	r1, [r6, #0]
 80136f0:	07d9      	lsls	r1, r3, #31
 80136f2:	bf44      	itt	mi
 80136f4:	f043 0320 	orrmi.w	r3, r3, #32
 80136f8:	6023      	strmi	r3, [r4, #0]
 80136fa:	b11d      	cbz	r5, 8013704 <_printf_i+0x19c>
 80136fc:	2310      	movs	r3, #16
 80136fe:	e7ad      	b.n	801365c <_printf_i+0xf4>
 8013700:	4826      	ldr	r0, [pc, #152]	@ (801379c <_printf_i+0x234>)
 8013702:	e7e9      	b.n	80136d8 <_printf_i+0x170>
 8013704:	6823      	ldr	r3, [r4, #0]
 8013706:	f023 0320 	bic.w	r3, r3, #32
 801370a:	6023      	str	r3, [r4, #0]
 801370c:	e7f6      	b.n	80136fc <_printf_i+0x194>
 801370e:	4616      	mov	r6, r2
 8013710:	e7bd      	b.n	801368e <_printf_i+0x126>
 8013712:	6833      	ldr	r3, [r6, #0]
 8013714:	6825      	ldr	r5, [r4, #0]
 8013716:	6961      	ldr	r1, [r4, #20]
 8013718:	1d18      	adds	r0, r3, #4
 801371a:	6030      	str	r0, [r6, #0]
 801371c:	062e      	lsls	r6, r5, #24
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	d501      	bpl.n	8013726 <_printf_i+0x1be>
 8013722:	6019      	str	r1, [r3, #0]
 8013724:	e002      	b.n	801372c <_printf_i+0x1c4>
 8013726:	0668      	lsls	r0, r5, #25
 8013728:	d5fb      	bpl.n	8013722 <_printf_i+0x1ba>
 801372a:	8019      	strh	r1, [r3, #0]
 801372c:	2300      	movs	r3, #0
 801372e:	6123      	str	r3, [r4, #16]
 8013730:	4616      	mov	r6, r2
 8013732:	e7bc      	b.n	80136ae <_printf_i+0x146>
 8013734:	6833      	ldr	r3, [r6, #0]
 8013736:	1d1a      	adds	r2, r3, #4
 8013738:	6032      	str	r2, [r6, #0]
 801373a:	681e      	ldr	r6, [r3, #0]
 801373c:	6862      	ldr	r2, [r4, #4]
 801373e:	2100      	movs	r1, #0
 8013740:	4630      	mov	r0, r6
 8013742:	f7ec fd7d 	bl	8000240 <memchr>
 8013746:	b108      	cbz	r0, 801374c <_printf_i+0x1e4>
 8013748:	1b80      	subs	r0, r0, r6
 801374a:	6060      	str	r0, [r4, #4]
 801374c:	6863      	ldr	r3, [r4, #4]
 801374e:	6123      	str	r3, [r4, #16]
 8013750:	2300      	movs	r3, #0
 8013752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013756:	e7aa      	b.n	80136ae <_printf_i+0x146>
 8013758:	6923      	ldr	r3, [r4, #16]
 801375a:	4632      	mov	r2, r6
 801375c:	4649      	mov	r1, r9
 801375e:	4640      	mov	r0, r8
 8013760:	47d0      	blx	sl
 8013762:	3001      	adds	r0, #1
 8013764:	d0ad      	beq.n	80136c2 <_printf_i+0x15a>
 8013766:	6823      	ldr	r3, [r4, #0]
 8013768:	079b      	lsls	r3, r3, #30
 801376a:	d413      	bmi.n	8013794 <_printf_i+0x22c>
 801376c:	68e0      	ldr	r0, [r4, #12]
 801376e:	9b03      	ldr	r3, [sp, #12]
 8013770:	4298      	cmp	r0, r3
 8013772:	bfb8      	it	lt
 8013774:	4618      	movlt	r0, r3
 8013776:	e7a6      	b.n	80136c6 <_printf_i+0x15e>
 8013778:	2301      	movs	r3, #1
 801377a:	4632      	mov	r2, r6
 801377c:	4649      	mov	r1, r9
 801377e:	4640      	mov	r0, r8
 8013780:	47d0      	blx	sl
 8013782:	3001      	adds	r0, #1
 8013784:	d09d      	beq.n	80136c2 <_printf_i+0x15a>
 8013786:	3501      	adds	r5, #1
 8013788:	68e3      	ldr	r3, [r4, #12]
 801378a:	9903      	ldr	r1, [sp, #12]
 801378c:	1a5b      	subs	r3, r3, r1
 801378e:	42ab      	cmp	r3, r5
 8013790:	dcf2      	bgt.n	8013778 <_printf_i+0x210>
 8013792:	e7eb      	b.n	801376c <_printf_i+0x204>
 8013794:	2500      	movs	r5, #0
 8013796:	f104 0619 	add.w	r6, r4, #25
 801379a:	e7f5      	b.n	8013788 <_printf_i+0x220>
 801379c:	08017b48 	.word	0x08017b48
 80137a0:	08017b59 	.word	0x08017b59

080137a4 <std>:
 80137a4:	2300      	movs	r3, #0
 80137a6:	b510      	push	{r4, lr}
 80137a8:	4604      	mov	r4, r0
 80137aa:	e9c0 3300 	strd	r3, r3, [r0]
 80137ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137b2:	6083      	str	r3, [r0, #8]
 80137b4:	8181      	strh	r1, [r0, #12]
 80137b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80137b8:	81c2      	strh	r2, [r0, #14]
 80137ba:	6183      	str	r3, [r0, #24]
 80137bc:	4619      	mov	r1, r3
 80137be:	2208      	movs	r2, #8
 80137c0:	305c      	adds	r0, #92	@ 0x5c
 80137c2:	f000 f916 	bl	80139f2 <memset>
 80137c6:	4b0d      	ldr	r3, [pc, #52]	@ (80137fc <std+0x58>)
 80137c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80137ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013800 <std+0x5c>)
 80137cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80137ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013804 <std+0x60>)
 80137d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80137d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013808 <std+0x64>)
 80137d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80137d6:	4b0d      	ldr	r3, [pc, #52]	@ (801380c <std+0x68>)
 80137d8:	6224      	str	r4, [r4, #32]
 80137da:	429c      	cmp	r4, r3
 80137dc:	d006      	beq.n	80137ec <std+0x48>
 80137de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80137e2:	4294      	cmp	r4, r2
 80137e4:	d002      	beq.n	80137ec <std+0x48>
 80137e6:	33d0      	adds	r3, #208	@ 0xd0
 80137e8:	429c      	cmp	r4, r3
 80137ea:	d105      	bne.n	80137f8 <std+0x54>
 80137ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80137f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137f4:	f000 b9f8 	b.w	8013be8 <__retarget_lock_init_recursive>
 80137f8:	bd10      	pop	{r4, pc}
 80137fa:	bf00      	nop
 80137fc:	0801396d 	.word	0x0801396d
 8013800:	0801398f 	.word	0x0801398f
 8013804:	080139c7 	.word	0x080139c7
 8013808:	080139eb 	.word	0x080139eb
 801380c:	200023b8 	.word	0x200023b8

08013810 <stdio_exit_handler>:
 8013810:	4a02      	ldr	r2, [pc, #8]	@ (801381c <stdio_exit_handler+0xc>)
 8013812:	4903      	ldr	r1, [pc, #12]	@ (8013820 <stdio_exit_handler+0x10>)
 8013814:	4803      	ldr	r0, [pc, #12]	@ (8013824 <stdio_exit_handler+0x14>)
 8013816:	f000 b869 	b.w	80138ec <_fwalk_sglue>
 801381a:	bf00      	nop
 801381c:	2000010c 	.word	0x2000010c
 8013820:	08015d61 	.word	0x08015d61
 8013824:	20000288 	.word	0x20000288

08013828 <cleanup_stdio>:
 8013828:	6841      	ldr	r1, [r0, #4]
 801382a:	4b0c      	ldr	r3, [pc, #48]	@ (801385c <cleanup_stdio+0x34>)
 801382c:	4299      	cmp	r1, r3
 801382e:	b510      	push	{r4, lr}
 8013830:	4604      	mov	r4, r0
 8013832:	d001      	beq.n	8013838 <cleanup_stdio+0x10>
 8013834:	f002 fa94 	bl	8015d60 <_fflush_r>
 8013838:	68a1      	ldr	r1, [r4, #8]
 801383a:	4b09      	ldr	r3, [pc, #36]	@ (8013860 <cleanup_stdio+0x38>)
 801383c:	4299      	cmp	r1, r3
 801383e:	d002      	beq.n	8013846 <cleanup_stdio+0x1e>
 8013840:	4620      	mov	r0, r4
 8013842:	f002 fa8d 	bl	8015d60 <_fflush_r>
 8013846:	68e1      	ldr	r1, [r4, #12]
 8013848:	4b06      	ldr	r3, [pc, #24]	@ (8013864 <cleanup_stdio+0x3c>)
 801384a:	4299      	cmp	r1, r3
 801384c:	d004      	beq.n	8013858 <cleanup_stdio+0x30>
 801384e:	4620      	mov	r0, r4
 8013850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013854:	f002 ba84 	b.w	8015d60 <_fflush_r>
 8013858:	bd10      	pop	{r4, pc}
 801385a:	bf00      	nop
 801385c:	200023b8 	.word	0x200023b8
 8013860:	20002420 	.word	0x20002420
 8013864:	20002488 	.word	0x20002488

08013868 <global_stdio_init.part.0>:
 8013868:	b510      	push	{r4, lr}
 801386a:	4b0b      	ldr	r3, [pc, #44]	@ (8013898 <global_stdio_init.part.0+0x30>)
 801386c:	4c0b      	ldr	r4, [pc, #44]	@ (801389c <global_stdio_init.part.0+0x34>)
 801386e:	4a0c      	ldr	r2, [pc, #48]	@ (80138a0 <global_stdio_init.part.0+0x38>)
 8013870:	601a      	str	r2, [r3, #0]
 8013872:	4620      	mov	r0, r4
 8013874:	2200      	movs	r2, #0
 8013876:	2104      	movs	r1, #4
 8013878:	f7ff ff94 	bl	80137a4 <std>
 801387c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013880:	2201      	movs	r2, #1
 8013882:	2109      	movs	r1, #9
 8013884:	f7ff ff8e 	bl	80137a4 <std>
 8013888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801388c:	2202      	movs	r2, #2
 801388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013892:	2112      	movs	r1, #18
 8013894:	f7ff bf86 	b.w	80137a4 <std>
 8013898:	200024f0 	.word	0x200024f0
 801389c:	200023b8 	.word	0x200023b8
 80138a0:	08013811 	.word	0x08013811

080138a4 <__sfp_lock_acquire>:
 80138a4:	4801      	ldr	r0, [pc, #4]	@ (80138ac <__sfp_lock_acquire+0x8>)
 80138a6:	f000 b9a0 	b.w	8013bea <__retarget_lock_acquire_recursive>
 80138aa:	bf00      	nop
 80138ac:	200024f9 	.word	0x200024f9

080138b0 <__sfp_lock_release>:
 80138b0:	4801      	ldr	r0, [pc, #4]	@ (80138b8 <__sfp_lock_release+0x8>)
 80138b2:	f000 b99b 	b.w	8013bec <__retarget_lock_release_recursive>
 80138b6:	bf00      	nop
 80138b8:	200024f9 	.word	0x200024f9

080138bc <__sinit>:
 80138bc:	b510      	push	{r4, lr}
 80138be:	4604      	mov	r4, r0
 80138c0:	f7ff fff0 	bl	80138a4 <__sfp_lock_acquire>
 80138c4:	6a23      	ldr	r3, [r4, #32]
 80138c6:	b11b      	cbz	r3, 80138d0 <__sinit+0x14>
 80138c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138cc:	f7ff bff0 	b.w	80138b0 <__sfp_lock_release>
 80138d0:	4b04      	ldr	r3, [pc, #16]	@ (80138e4 <__sinit+0x28>)
 80138d2:	6223      	str	r3, [r4, #32]
 80138d4:	4b04      	ldr	r3, [pc, #16]	@ (80138e8 <__sinit+0x2c>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d1f5      	bne.n	80138c8 <__sinit+0xc>
 80138dc:	f7ff ffc4 	bl	8013868 <global_stdio_init.part.0>
 80138e0:	e7f2      	b.n	80138c8 <__sinit+0xc>
 80138e2:	bf00      	nop
 80138e4:	08013829 	.word	0x08013829
 80138e8:	200024f0 	.word	0x200024f0

080138ec <_fwalk_sglue>:
 80138ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138f0:	4607      	mov	r7, r0
 80138f2:	4688      	mov	r8, r1
 80138f4:	4614      	mov	r4, r2
 80138f6:	2600      	movs	r6, #0
 80138f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138fc:	f1b9 0901 	subs.w	r9, r9, #1
 8013900:	d505      	bpl.n	801390e <_fwalk_sglue+0x22>
 8013902:	6824      	ldr	r4, [r4, #0]
 8013904:	2c00      	cmp	r4, #0
 8013906:	d1f7      	bne.n	80138f8 <_fwalk_sglue+0xc>
 8013908:	4630      	mov	r0, r6
 801390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801390e:	89ab      	ldrh	r3, [r5, #12]
 8013910:	2b01      	cmp	r3, #1
 8013912:	d907      	bls.n	8013924 <_fwalk_sglue+0x38>
 8013914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013918:	3301      	adds	r3, #1
 801391a:	d003      	beq.n	8013924 <_fwalk_sglue+0x38>
 801391c:	4629      	mov	r1, r5
 801391e:	4638      	mov	r0, r7
 8013920:	47c0      	blx	r8
 8013922:	4306      	orrs	r6, r0
 8013924:	3568      	adds	r5, #104	@ 0x68
 8013926:	e7e9      	b.n	80138fc <_fwalk_sglue+0x10>

08013928 <siprintf>:
 8013928:	b40e      	push	{r1, r2, r3}
 801392a:	b510      	push	{r4, lr}
 801392c:	b09d      	sub	sp, #116	@ 0x74
 801392e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013930:	9002      	str	r0, [sp, #8]
 8013932:	9006      	str	r0, [sp, #24]
 8013934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013938:	480a      	ldr	r0, [pc, #40]	@ (8013964 <siprintf+0x3c>)
 801393a:	9107      	str	r1, [sp, #28]
 801393c:	9104      	str	r1, [sp, #16]
 801393e:	490a      	ldr	r1, [pc, #40]	@ (8013968 <siprintf+0x40>)
 8013940:	f853 2b04 	ldr.w	r2, [r3], #4
 8013944:	9105      	str	r1, [sp, #20]
 8013946:	2400      	movs	r4, #0
 8013948:	a902      	add	r1, sp, #8
 801394a:	6800      	ldr	r0, [r0, #0]
 801394c:	9301      	str	r3, [sp, #4]
 801394e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013950:	f002 f886 	bl	8015a60 <_svfiprintf_r>
 8013954:	9b02      	ldr	r3, [sp, #8]
 8013956:	701c      	strb	r4, [r3, #0]
 8013958:	b01d      	add	sp, #116	@ 0x74
 801395a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801395e:	b003      	add	sp, #12
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	20000284 	.word	0x20000284
 8013968:	ffff0208 	.word	0xffff0208

0801396c <__sread>:
 801396c:	b510      	push	{r4, lr}
 801396e:	460c      	mov	r4, r1
 8013970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013974:	f000 f8da 	bl	8013b2c <_read_r>
 8013978:	2800      	cmp	r0, #0
 801397a:	bfab      	itete	ge
 801397c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801397e:	89a3      	ldrhlt	r3, [r4, #12]
 8013980:	181b      	addge	r3, r3, r0
 8013982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013986:	bfac      	ite	ge
 8013988:	6563      	strge	r3, [r4, #84]	@ 0x54
 801398a:	81a3      	strhlt	r3, [r4, #12]
 801398c:	bd10      	pop	{r4, pc}

0801398e <__swrite>:
 801398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013992:	461f      	mov	r7, r3
 8013994:	898b      	ldrh	r3, [r1, #12]
 8013996:	05db      	lsls	r3, r3, #23
 8013998:	4605      	mov	r5, r0
 801399a:	460c      	mov	r4, r1
 801399c:	4616      	mov	r6, r2
 801399e:	d505      	bpl.n	80139ac <__swrite+0x1e>
 80139a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139a4:	2302      	movs	r3, #2
 80139a6:	2200      	movs	r2, #0
 80139a8:	f000 f8ae 	bl	8013b08 <_lseek_r>
 80139ac:	89a3      	ldrh	r3, [r4, #12]
 80139ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80139b6:	81a3      	strh	r3, [r4, #12]
 80139b8:	4632      	mov	r2, r6
 80139ba:	463b      	mov	r3, r7
 80139bc:	4628      	mov	r0, r5
 80139be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139c2:	f000 b8d5 	b.w	8013b70 <_write_r>

080139c6 <__sseek>:
 80139c6:	b510      	push	{r4, lr}
 80139c8:	460c      	mov	r4, r1
 80139ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139ce:	f000 f89b 	bl	8013b08 <_lseek_r>
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	89a3      	ldrh	r3, [r4, #12]
 80139d6:	bf15      	itete	ne
 80139d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80139da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80139de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80139e2:	81a3      	strheq	r3, [r4, #12]
 80139e4:	bf18      	it	ne
 80139e6:	81a3      	strhne	r3, [r4, #12]
 80139e8:	bd10      	pop	{r4, pc}

080139ea <__sclose>:
 80139ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139ee:	f000 b87b 	b.w	8013ae8 <_close_r>

080139f2 <memset>:
 80139f2:	4402      	add	r2, r0
 80139f4:	4603      	mov	r3, r0
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d100      	bne.n	80139fc <memset+0xa>
 80139fa:	4770      	bx	lr
 80139fc:	f803 1b01 	strb.w	r1, [r3], #1
 8013a00:	e7f9      	b.n	80139f6 <memset+0x4>

08013a02 <strncmp>:
 8013a02:	b510      	push	{r4, lr}
 8013a04:	b16a      	cbz	r2, 8013a22 <strncmp+0x20>
 8013a06:	3901      	subs	r1, #1
 8013a08:	1884      	adds	r4, r0, r2
 8013a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d103      	bne.n	8013a1e <strncmp+0x1c>
 8013a16:	42a0      	cmp	r0, r4
 8013a18:	d001      	beq.n	8013a1e <strncmp+0x1c>
 8013a1a:	2a00      	cmp	r2, #0
 8013a1c:	d1f5      	bne.n	8013a0a <strncmp+0x8>
 8013a1e:	1ad0      	subs	r0, r2, r3
 8013a20:	bd10      	pop	{r4, pc}
 8013a22:	4610      	mov	r0, r2
 8013a24:	e7fc      	b.n	8013a20 <strncmp+0x1e>
	...

08013a28 <strtok>:
 8013a28:	4b16      	ldr	r3, [pc, #88]	@ (8013a84 <strtok+0x5c>)
 8013a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2e:	681f      	ldr	r7, [r3, #0]
 8013a30:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013a32:	4605      	mov	r5, r0
 8013a34:	460e      	mov	r6, r1
 8013a36:	b9ec      	cbnz	r4, 8013a74 <strtok+0x4c>
 8013a38:	2050      	movs	r0, #80	@ 0x50
 8013a3a:	f7fe fb0d 	bl	8012058 <malloc>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	6478      	str	r0, [r7, #68]	@ 0x44
 8013a42:	b920      	cbnz	r0, 8013a4e <strtok+0x26>
 8013a44:	4b10      	ldr	r3, [pc, #64]	@ (8013a88 <strtok+0x60>)
 8013a46:	4811      	ldr	r0, [pc, #68]	@ (8013a8c <strtok+0x64>)
 8013a48:	215b      	movs	r1, #91	@ 0x5b
 8013a4a:	f000 f8e9 	bl	8013c20 <__assert_func>
 8013a4e:	e9c0 4400 	strd	r4, r4, [r0]
 8013a52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013a56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013a5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013a5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013a62:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013a66:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013a6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013a6e:	6184      	str	r4, [r0, #24]
 8013a70:	7704      	strb	r4, [r0, #28]
 8013a72:	6244      	str	r4, [r0, #36]	@ 0x24
 8013a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013a76:	4631      	mov	r1, r6
 8013a78:	4628      	mov	r0, r5
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a80:	f000 b806 	b.w	8013a90 <__strtok_r>
 8013a84:	20000284 	.word	0x20000284
 8013a88:	08017b6a 	.word	0x08017b6a
 8013a8c:	08017b81 	.word	0x08017b81

08013a90 <__strtok_r>:
 8013a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a92:	4604      	mov	r4, r0
 8013a94:	b908      	cbnz	r0, 8013a9a <__strtok_r+0xa>
 8013a96:	6814      	ldr	r4, [r2, #0]
 8013a98:	b144      	cbz	r4, 8013aac <__strtok_r+0x1c>
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013aa0:	460f      	mov	r7, r1
 8013aa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013aa6:	b91e      	cbnz	r6, 8013ab0 <__strtok_r+0x20>
 8013aa8:	b965      	cbnz	r5, 8013ac4 <__strtok_r+0x34>
 8013aaa:	6015      	str	r5, [r2, #0]
 8013aac:	2000      	movs	r0, #0
 8013aae:	e005      	b.n	8013abc <__strtok_r+0x2c>
 8013ab0:	42b5      	cmp	r5, r6
 8013ab2:	d1f6      	bne.n	8013aa2 <__strtok_r+0x12>
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1f0      	bne.n	8013a9a <__strtok_r+0xa>
 8013ab8:	6014      	str	r4, [r2, #0]
 8013aba:	7003      	strb	r3, [r0, #0]
 8013abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013abe:	461c      	mov	r4, r3
 8013ac0:	e00c      	b.n	8013adc <__strtok_r+0x4c>
 8013ac2:	b91d      	cbnz	r5, 8013acc <__strtok_r+0x3c>
 8013ac4:	4627      	mov	r7, r4
 8013ac6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013aca:	460e      	mov	r6, r1
 8013acc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013ad0:	42ab      	cmp	r3, r5
 8013ad2:	d1f6      	bne.n	8013ac2 <__strtok_r+0x32>
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d0f2      	beq.n	8013abe <__strtok_r+0x2e>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	703b      	strb	r3, [r7, #0]
 8013adc:	6014      	str	r4, [r2, #0]
 8013ade:	e7ed      	b.n	8013abc <__strtok_r+0x2c>

08013ae0 <_localeconv_r>:
 8013ae0:	4800      	ldr	r0, [pc, #0]	@ (8013ae4 <_localeconv_r+0x4>)
 8013ae2:	4770      	bx	lr
 8013ae4:	20000208 	.word	0x20000208

08013ae8 <_close_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d06      	ldr	r5, [pc, #24]	@ (8013b04 <_close_r+0x1c>)
 8013aec:	2300      	movs	r3, #0
 8013aee:	4604      	mov	r4, r0
 8013af0:	4608      	mov	r0, r1
 8013af2:	602b      	str	r3, [r5, #0]
 8013af4:	f7f2 f804 	bl	8005b00 <_close>
 8013af8:	1c43      	adds	r3, r0, #1
 8013afa:	d102      	bne.n	8013b02 <_close_r+0x1a>
 8013afc:	682b      	ldr	r3, [r5, #0]
 8013afe:	b103      	cbz	r3, 8013b02 <_close_r+0x1a>
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	200024f4 	.word	0x200024f4

08013b08 <_lseek_r>:
 8013b08:	b538      	push	{r3, r4, r5, lr}
 8013b0a:	4d07      	ldr	r5, [pc, #28]	@ (8013b28 <_lseek_r+0x20>)
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	4608      	mov	r0, r1
 8013b10:	4611      	mov	r1, r2
 8013b12:	2200      	movs	r2, #0
 8013b14:	602a      	str	r2, [r5, #0]
 8013b16:	461a      	mov	r2, r3
 8013b18:	f7f2 f819 	bl	8005b4e <_lseek>
 8013b1c:	1c43      	adds	r3, r0, #1
 8013b1e:	d102      	bne.n	8013b26 <_lseek_r+0x1e>
 8013b20:	682b      	ldr	r3, [r5, #0]
 8013b22:	b103      	cbz	r3, 8013b26 <_lseek_r+0x1e>
 8013b24:	6023      	str	r3, [r4, #0]
 8013b26:	bd38      	pop	{r3, r4, r5, pc}
 8013b28:	200024f4 	.word	0x200024f4

08013b2c <_read_r>:
 8013b2c:	b538      	push	{r3, r4, r5, lr}
 8013b2e:	4d07      	ldr	r5, [pc, #28]	@ (8013b4c <_read_r+0x20>)
 8013b30:	4604      	mov	r4, r0
 8013b32:	4608      	mov	r0, r1
 8013b34:	4611      	mov	r1, r2
 8013b36:	2200      	movs	r2, #0
 8013b38:	602a      	str	r2, [r5, #0]
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	f7f1 ffa7 	bl	8005a8e <_read>
 8013b40:	1c43      	adds	r3, r0, #1
 8013b42:	d102      	bne.n	8013b4a <_read_r+0x1e>
 8013b44:	682b      	ldr	r3, [r5, #0]
 8013b46:	b103      	cbz	r3, 8013b4a <_read_r+0x1e>
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}
 8013b4c:	200024f4 	.word	0x200024f4

08013b50 <_sbrk_r>:
 8013b50:	b538      	push	{r3, r4, r5, lr}
 8013b52:	4d06      	ldr	r5, [pc, #24]	@ (8013b6c <_sbrk_r+0x1c>)
 8013b54:	2300      	movs	r3, #0
 8013b56:	4604      	mov	r4, r0
 8013b58:	4608      	mov	r0, r1
 8013b5a:	602b      	str	r3, [r5, #0]
 8013b5c:	f7f2 f804 	bl	8005b68 <_sbrk>
 8013b60:	1c43      	adds	r3, r0, #1
 8013b62:	d102      	bne.n	8013b6a <_sbrk_r+0x1a>
 8013b64:	682b      	ldr	r3, [r5, #0]
 8013b66:	b103      	cbz	r3, 8013b6a <_sbrk_r+0x1a>
 8013b68:	6023      	str	r3, [r4, #0]
 8013b6a:	bd38      	pop	{r3, r4, r5, pc}
 8013b6c:	200024f4 	.word	0x200024f4

08013b70 <_write_r>:
 8013b70:	b538      	push	{r3, r4, r5, lr}
 8013b72:	4d07      	ldr	r5, [pc, #28]	@ (8013b90 <_write_r+0x20>)
 8013b74:	4604      	mov	r4, r0
 8013b76:	4608      	mov	r0, r1
 8013b78:	4611      	mov	r1, r2
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	602a      	str	r2, [r5, #0]
 8013b7e:	461a      	mov	r2, r3
 8013b80:	f7f1 ffa2 	bl	8005ac8 <_write>
 8013b84:	1c43      	adds	r3, r0, #1
 8013b86:	d102      	bne.n	8013b8e <_write_r+0x1e>
 8013b88:	682b      	ldr	r3, [r5, #0]
 8013b8a:	b103      	cbz	r3, 8013b8e <_write_r+0x1e>
 8013b8c:	6023      	str	r3, [r4, #0]
 8013b8e:	bd38      	pop	{r3, r4, r5, pc}
 8013b90:	200024f4 	.word	0x200024f4

08013b94 <__errno>:
 8013b94:	4b01      	ldr	r3, [pc, #4]	@ (8013b9c <__errno+0x8>)
 8013b96:	6818      	ldr	r0, [r3, #0]
 8013b98:	4770      	bx	lr
 8013b9a:	bf00      	nop
 8013b9c:	20000284 	.word	0x20000284

08013ba0 <__libc_init_array>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8013bd8 <__libc_init_array+0x38>)
 8013ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8013bdc <__libc_init_array+0x3c>)
 8013ba6:	1b64      	subs	r4, r4, r5
 8013ba8:	10a4      	asrs	r4, r4, #2
 8013baa:	2600      	movs	r6, #0
 8013bac:	42a6      	cmp	r6, r4
 8013bae:	d109      	bne.n	8013bc4 <__libc_init_array+0x24>
 8013bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8013be0 <__libc_init_array+0x40>)
 8013bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8013be4 <__libc_init_array+0x44>)
 8013bb4:	f003 fd0e 	bl	80175d4 <_init>
 8013bb8:	1b64      	subs	r4, r4, r5
 8013bba:	10a4      	asrs	r4, r4, #2
 8013bbc:	2600      	movs	r6, #0
 8013bbe:	42a6      	cmp	r6, r4
 8013bc0:	d105      	bne.n	8013bce <__libc_init_array+0x2e>
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}
 8013bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bc8:	4798      	blx	r3
 8013bca:	3601      	adds	r6, #1
 8013bcc:	e7ee      	b.n	8013bac <__libc_init_array+0xc>
 8013bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bd2:	4798      	blx	r3
 8013bd4:	3601      	adds	r6, #1
 8013bd6:	e7f2      	b.n	8013bbe <__libc_init_array+0x1e>
 8013bd8:	080183d0 	.word	0x080183d0
 8013bdc:	080183d0 	.word	0x080183d0
 8013be0:	080183d0 	.word	0x080183d0
 8013be4:	080183d4 	.word	0x080183d4

08013be8 <__retarget_lock_init_recursive>:
 8013be8:	4770      	bx	lr

08013bea <__retarget_lock_acquire_recursive>:
 8013bea:	4770      	bx	lr

08013bec <__retarget_lock_release_recursive>:
 8013bec:	4770      	bx	lr

08013bee <memcpy>:
 8013bee:	440a      	add	r2, r1
 8013bf0:	4291      	cmp	r1, r2
 8013bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bf6:	d100      	bne.n	8013bfa <memcpy+0xc>
 8013bf8:	4770      	bx	lr
 8013bfa:	b510      	push	{r4, lr}
 8013bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c04:	4291      	cmp	r1, r2
 8013c06:	d1f9      	bne.n	8013bfc <memcpy+0xe>
 8013c08:	bd10      	pop	{r4, pc}
 8013c0a:	0000      	movs	r0, r0
 8013c0c:	0000      	movs	r0, r0
	...

08013c10 <nan>:
 8013c10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013c18 <nan+0x8>
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop
 8013c18:	00000000 	.word	0x00000000
 8013c1c:	7ff80000 	.word	0x7ff80000

08013c20 <__assert_func>:
 8013c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c22:	4614      	mov	r4, r2
 8013c24:	461a      	mov	r2, r3
 8013c26:	4b09      	ldr	r3, [pc, #36]	@ (8013c4c <__assert_func+0x2c>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	68d8      	ldr	r0, [r3, #12]
 8013c2e:	b14c      	cbz	r4, 8013c44 <__assert_func+0x24>
 8013c30:	4b07      	ldr	r3, [pc, #28]	@ (8013c50 <__assert_func+0x30>)
 8013c32:	9100      	str	r1, [sp, #0]
 8013c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c38:	4906      	ldr	r1, [pc, #24]	@ (8013c54 <__assert_func+0x34>)
 8013c3a:	462b      	mov	r3, r5
 8013c3c:	f002 f8b8 	bl	8015db0 <fiprintf>
 8013c40:	f002 f8e2 	bl	8015e08 <abort>
 8013c44:	4b04      	ldr	r3, [pc, #16]	@ (8013c58 <__assert_func+0x38>)
 8013c46:	461c      	mov	r4, r3
 8013c48:	e7f3      	b.n	8013c32 <__assert_func+0x12>
 8013c4a:	bf00      	nop
 8013c4c:	20000284 	.word	0x20000284
 8013c50:	08017be3 	.word	0x08017be3
 8013c54:	08017bf0 	.word	0x08017bf0
 8013c58:	08017c1e 	.word	0x08017c1e

08013c5c <quorem>:
 8013c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c60:	6903      	ldr	r3, [r0, #16]
 8013c62:	690c      	ldr	r4, [r1, #16]
 8013c64:	42a3      	cmp	r3, r4
 8013c66:	4607      	mov	r7, r0
 8013c68:	db7e      	blt.n	8013d68 <quorem+0x10c>
 8013c6a:	3c01      	subs	r4, #1
 8013c6c:	f101 0814 	add.w	r8, r1, #20
 8013c70:	00a3      	lsls	r3, r4, #2
 8013c72:	f100 0514 	add.w	r5, r0, #20
 8013c76:	9300      	str	r3, [sp, #0]
 8013c78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c7c:	9301      	str	r3, [sp, #4]
 8013c7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013c82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c86:	3301      	adds	r3, #1
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c92:	d32e      	bcc.n	8013cf2 <quorem+0x96>
 8013c94:	f04f 0a00 	mov.w	sl, #0
 8013c98:	46c4      	mov	ip, r8
 8013c9a:	46ae      	mov	lr, r5
 8013c9c:	46d3      	mov	fp, sl
 8013c9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ca2:	b298      	uxth	r0, r3
 8013ca4:	fb06 a000 	mla	r0, r6, r0, sl
 8013ca8:	0c02      	lsrs	r2, r0, #16
 8013caa:	0c1b      	lsrs	r3, r3, #16
 8013cac:	fb06 2303 	mla	r3, r6, r3, r2
 8013cb0:	f8de 2000 	ldr.w	r2, [lr]
 8013cb4:	b280      	uxth	r0, r0
 8013cb6:	b292      	uxth	r2, r2
 8013cb8:	1a12      	subs	r2, r2, r0
 8013cba:	445a      	add	r2, fp
 8013cbc:	f8de 0000 	ldr.w	r0, [lr]
 8013cc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013cca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013cce:	b292      	uxth	r2, r2
 8013cd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013cd4:	45e1      	cmp	r9, ip
 8013cd6:	f84e 2b04 	str.w	r2, [lr], #4
 8013cda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013cde:	d2de      	bcs.n	8013c9e <quorem+0x42>
 8013ce0:	9b00      	ldr	r3, [sp, #0]
 8013ce2:	58eb      	ldr	r3, [r5, r3]
 8013ce4:	b92b      	cbnz	r3, 8013cf2 <quorem+0x96>
 8013ce6:	9b01      	ldr	r3, [sp, #4]
 8013ce8:	3b04      	subs	r3, #4
 8013cea:	429d      	cmp	r5, r3
 8013cec:	461a      	mov	r2, r3
 8013cee:	d32f      	bcc.n	8013d50 <quorem+0xf4>
 8013cf0:	613c      	str	r4, [r7, #16]
 8013cf2:	4638      	mov	r0, r7
 8013cf4:	f001 fc5e 	bl	80155b4 <__mcmp>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	db25      	blt.n	8013d48 <quorem+0xec>
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	2000      	movs	r0, #0
 8013d00:	f858 2b04 	ldr.w	r2, [r8], #4
 8013d04:	f8d1 c000 	ldr.w	ip, [r1]
 8013d08:	fa1f fe82 	uxth.w	lr, r2
 8013d0c:	fa1f f38c 	uxth.w	r3, ip
 8013d10:	eba3 030e 	sub.w	r3, r3, lr
 8013d14:	4403      	add	r3, r0
 8013d16:	0c12      	lsrs	r2, r2, #16
 8013d18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013d1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d26:	45c1      	cmp	r9, r8
 8013d28:	f841 3b04 	str.w	r3, [r1], #4
 8013d2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013d30:	d2e6      	bcs.n	8013d00 <quorem+0xa4>
 8013d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d3a:	b922      	cbnz	r2, 8013d46 <quorem+0xea>
 8013d3c:	3b04      	subs	r3, #4
 8013d3e:	429d      	cmp	r5, r3
 8013d40:	461a      	mov	r2, r3
 8013d42:	d30b      	bcc.n	8013d5c <quorem+0x100>
 8013d44:	613c      	str	r4, [r7, #16]
 8013d46:	3601      	adds	r6, #1
 8013d48:	4630      	mov	r0, r6
 8013d4a:	b003      	add	sp, #12
 8013d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d50:	6812      	ldr	r2, [r2, #0]
 8013d52:	3b04      	subs	r3, #4
 8013d54:	2a00      	cmp	r2, #0
 8013d56:	d1cb      	bne.n	8013cf0 <quorem+0x94>
 8013d58:	3c01      	subs	r4, #1
 8013d5a:	e7c6      	b.n	8013cea <quorem+0x8e>
 8013d5c:	6812      	ldr	r2, [r2, #0]
 8013d5e:	3b04      	subs	r3, #4
 8013d60:	2a00      	cmp	r2, #0
 8013d62:	d1ef      	bne.n	8013d44 <quorem+0xe8>
 8013d64:	3c01      	subs	r4, #1
 8013d66:	e7ea      	b.n	8013d3e <quorem+0xe2>
 8013d68:	2000      	movs	r0, #0
 8013d6a:	e7ee      	b.n	8013d4a <quorem+0xee>
 8013d6c:	0000      	movs	r0, r0
	...

08013d70 <_dtoa_r>:
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	69c7      	ldr	r7, [r0, #28]
 8013d76:	b097      	sub	sp, #92	@ 0x5c
 8013d78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013d7c:	ec55 4b10 	vmov	r4, r5, d0
 8013d80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013d82:	9107      	str	r1, [sp, #28]
 8013d84:	4681      	mov	r9, r0
 8013d86:	920c      	str	r2, [sp, #48]	@ 0x30
 8013d88:	9311      	str	r3, [sp, #68]	@ 0x44
 8013d8a:	b97f      	cbnz	r7, 8013dac <_dtoa_r+0x3c>
 8013d8c:	2010      	movs	r0, #16
 8013d8e:	f7fe f963 	bl	8012058 <malloc>
 8013d92:	4602      	mov	r2, r0
 8013d94:	f8c9 001c 	str.w	r0, [r9, #28]
 8013d98:	b920      	cbnz	r0, 8013da4 <_dtoa_r+0x34>
 8013d9a:	4ba9      	ldr	r3, [pc, #676]	@ (8014040 <_dtoa_r+0x2d0>)
 8013d9c:	21ef      	movs	r1, #239	@ 0xef
 8013d9e:	48a9      	ldr	r0, [pc, #676]	@ (8014044 <_dtoa_r+0x2d4>)
 8013da0:	f7ff ff3e 	bl	8013c20 <__assert_func>
 8013da4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013da8:	6007      	str	r7, [r0, #0]
 8013daa:	60c7      	str	r7, [r0, #12]
 8013dac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013db0:	6819      	ldr	r1, [r3, #0]
 8013db2:	b159      	cbz	r1, 8013dcc <_dtoa_r+0x5c>
 8013db4:	685a      	ldr	r2, [r3, #4]
 8013db6:	604a      	str	r2, [r1, #4]
 8013db8:	2301      	movs	r3, #1
 8013dba:	4093      	lsls	r3, r2
 8013dbc:	608b      	str	r3, [r1, #8]
 8013dbe:	4648      	mov	r0, r9
 8013dc0:	f001 f97c 	bl	80150bc <_Bfree>
 8013dc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	601a      	str	r2, [r3, #0]
 8013dcc:	1e2b      	subs	r3, r5, #0
 8013dce:	bfb9      	ittee	lt
 8013dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013dd4:	9305      	strlt	r3, [sp, #20]
 8013dd6:	2300      	movge	r3, #0
 8013dd8:	6033      	strge	r3, [r6, #0]
 8013dda:	9f05      	ldr	r7, [sp, #20]
 8013ddc:	4b9a      	ldr	r3, [pc, #616]	@ (8014048 <_dtoa_r+0x2d8>)
 8013dde:	bfbc      	itt	lt
 8013de0:	2201      	movlt	r2, #1
 8013de2:	6032      	strlt	r2, [r6, #0]
 8013de4:	43bb      	bics	r3, r7
 8013de6:	d112      	bne.n	8013e0e <_dtoa_r+0x9e>
 8013de8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013dea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013dee:	6013      	str	r3, [r2, #0]
 8013df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013df4:	4323      	orrs	r3, r4
 8013df6:	f000 855a 	beq.w	80148ae <_dtoa_r+0xb3e>
 8013dfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013dfc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801405c <_dtoa_r+0x2ec>
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 855c 	beq.w	80148be <_dtoa_r+0xb4e>
 8013e06:	f10a 0303 	add.w	r3, sl, #3
 8013e0a:	f000 bd56 	b.w	80148ba <_dtoa_r+0xb4a>
 8013e0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013e12:	2200      	movs	r2, #0
 8013e14:	ec51 0b17 	vmov	r0, r1, d7
 8013e18:	2300      	movs	r3, #0
 8013e1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013e1e:	f7ec fe8b 	bl	8000b38 <__aeabi_dcmpeq>
 8013e22:	4680      	mov	r8, r0
 8013e24:	b158      	cbz	r0, 8013e3e <_dtoa_r+0xce>
 8013e26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013e28:	2301      	movs	r3, #1
 8013e2a:	6013      	str	r3, [r2, #0]
 8013e2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013e2e:	b113      	cbz	r3, 8013e36 <_dtoa_r+0xc6>
 8013e30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013e32:	4b86      	ldr	r3, [pc, #536]	@ (801404c <_dtoa_r+0x2dc>)
 8013e34:	6013      	str	r3, [r2, #0]
 8013e36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014060 <_dtoa_r+0x2f0>
 8013e3a:	f000 bd40 	b.w	80148be <_dtoa_r+0xb4e>
 8013e3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013e42:	aa14      	add	r2, sp, #80	@ 0x50
 8013e44:	a915      	add	r1, sp, #84	@ 0x54
 8013e46:	4648      	mov	r0, r9
 8013e48:	f001 fcd4 	bl	80157f4 <__d2b>
 8013e4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013e50:	9002      	str	r0, [sp, #8]
 8013e52:	2e00      	cmp	r6, #0
 8013e54:	d078      	beq.n	8013f48 <_dtoa_r+0x1d8>
 8013e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013e64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013e68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013e6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013e70:	4619      	mov	r1, r3
 8013e72:	2200      	movs	r2, #0
 8013e74:	4b76      	ldr	r3, [pc, #472]	@ (8014050 <_dtoa_r+0x2e0>)
 8013e76:	f7ec fa3f 	bl	80002f8 <__aeabi_dsub>
 8013e7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014028 <_dtoa_r+0x2b8>)
 8013e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e80:	f7ec fbf2 	bl	8000668 <__aeabi_dmul>
 8013e84:	a36a      	add	r3, pc, #424	@ (adr r3, 8014030 <_dtoa_r+0x2c0>)
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	f7ec fa37 	bl	80002fc <__adddf3>
 8013e8e:	4604      	mov	r4, r0
 8013e90:	4630      	mov	r0, r6
 8013e92:	460d      	mov	r5, r1
 8013e94:	f7ec fb7e 	bl	8000594 <__aeabi_i2d>
 8013e98:	a367      	add	r3, pc, #412	@ (adr r3, 8014038 <_dtoa_r+0x2c8>)
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	f7ec fbe3 	bl	8000668 <__aeabi_dmul>
 8013ea2:	4602      	mov	r2, r0
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	f7ec fa27 	bl	80002fc <__adddf3>
 8013eae:	4604      	mov	r4, r0
 8013eb0:	460d      	mov	r5, r1
 8013eb2:	f7ec fe89 	bl	8000bc8 <__aeabi_d2iz>
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	4607      	mov	r7, r0
 8013eba:	2300      	movs	r3, #0
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	f7ec fe44 	bl	8000b4c <__aeabi_dcmplt>
 8013ec4:	b140      	cbz	r0, 8013ed8 <_dtoa_r+0x168>
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	f7ec fb64 	bl	8000594 <__aeabi_i2d>
 8013ecc:	4622      	mov	r2, r4
 8013ece:	462b      	mov	r3, r5
 8013ed0:	f7ec fe32 	bl	8000b38 <__aeabi_dcmpeq>
 8013ed4:	b900      	cbnz	r0, 8013ed8 <_dtoa_r+0x168>
 8013ed6:	3f01      	subs	r7, #1
 8013ed8:	2f16      	cmp	r7, #22
 8013eda:	d852      	bhi.n	8013f82 <_dtoa_r+0x212>
 8013edc:	4b5d      	ldr	r3, [pc, #372]	@ (8014054 <_dtoa_r+0x2e4>)
 8013ede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013eea:	f7ec fe2f 	bl	8000b4c <__aeabi_dcmplt>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d049      	beq.n	8013f86 <_dtoa_r+0x216>
 8013ef2:	3f01      	subs	r7, #1
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013efa:	1b9b      	subs	r3, r3, r6
 8013efc:	1e5a      	subs	r2, r3, #1
 8013efe:	bf45      	ittet	mi
 8013f00:	f1c3 0301 	rsbmi	r3, r3, #1
 8013f04:	9300      	strmi	r3, [sp, #0]
 8013f06:	2300      	movpl	r3, #0
 8013f08:	2300      	movmi	r3, #0
 8013f0a:	9206      	str	r2, [sp, #24]
 8013f0c:	bf54      	ite	pl
 8013f0e:	9300      	strpl	r3, [sp, #0]
 8013f10:	9306      	strmi	r3, [sp, #24]
 8013f12:	2f00      	cmp	r7, #0
 8013f14:	db39      	blt.n	8013f8a <_dtoa_r+0x21a>
 8013f16:	9b06      	ldr	r3, [sp, #24]
 8013f18:	970d      	str	r7, [sp, #52]	@ 0x34
 8013f1a:	443b      	add	r3, r7
 8013f1c:	9306      	str	r3, [sp, #24]
 8013f1e:	2300      	movs	r3, #0
 8013f20:	9308      	str	r3, [sp, #32]
 8013f22:	9b07      	ldr	r3, [sp, #28]
 8013f24:	2b09      	cmp	r3, #9
 8013f26:	d863      	bhi.n	8013ff0 <_dtoa_r+0x280>
 8013f28:	2b05      	cmp	r3, #5
 8013f2a:	bfc4      	itt	gt
 8013f2c:	3b04      	subgt	r3, #4
 8013f2e:	9307      	strgt	r3, [sp, #28]
 8013f30:	9b07      	ldr	r3, [sp, #28]
 8013f32:	f1a3 0302 	sub.w	r3, r3, #2
 8013f36:	bfcc      	ite	gt
 8013f38:	2400      	movgt	r4, #0
 8013f3a:	2401      	movle	r4, #1
 8013f3c:	2b03      	cmp	r3, #3
 8013f3e:	d863      	bhi.n	8014008 <_dtoa_r+0x298>
 8013f40:	e8df f003 	tbb	[pc, r3]
 8013f44:	2b375452 	.word	0x2b375452
 8013f48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013f4c:	441e      	add	r6, r3
 8013f4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013f52:	2b20      	cmp	r3, #32
 8013f54:	bfc1      	itttt	gt
 8013f56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013f5a:	409f      	lslgt	r7, r3
 8013f5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013f60:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013f64:	bfd6      	itet	le
 8013f66:	f1c3 0320 	rsble	r3, r3, #32
 8013f6a:	ea47 0003 	orrgt.w	r0, r7, r3
 8013f6e:	fa04 f003 	lslle.w	r0, r4, r3
 8013f72:	f7ec faff 	bl	8000574 <__aeabi_ui2d>
 8013f76:	2201      	movs	r2, #1
 8013f78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013f7c:	3e01      	subs	r6, #1
 8013f7e:	9212      	str	r2, [sp, #72]	@ 0x48
 8013f80:	e776      	b.n	8013e70 <_dtoa_r+0x100>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e7b7      	b.n	8013ef6 <_dtoa_r+0x186>
 8013f86:	9010      	str	r0, [sp, #64]	@ 0x40
 8013f88:	e7b6      	b.n	8013ef8 <_dtoa_r+0x188>
 8013f8a:	9b00      	ldr	r3, [sp, #0]
 8013f8c:	1bdb      	subs	r3, r3, r7
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	427b      	negs	r3, r7
 8013f92:	9308      	str	r3, [sp, #32]
 8013f94:	2300      	movs	r3, #0
 8013f96:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f98:	e7c3      	b.n	8013f22 <_dtoa_r+0x1b2>
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013fa0:	eb07 0b03 	add.w	fp, r7, r3
 8013fa4:	f10b 0301 	add.w	r3, fp, #1
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	9303      	str	r3, [sp, #12]
 8013fac:	bfb8      	it	lt
 8013fae:	2301      	movlt	r3, #1
 8013fb0:	e006      	b.n	8013fc0 <_dtoa_r+0x250>
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	dd28      	ble.n	801400e <_dtoa_r+0x29e>
 8013fbc:	469b      	mov	fp, r3
 8013fbe:	9303      	str	r3, [sp, #12]
 8013fc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	2204      	movs	r2, #4
 8013fc8:	f102 0514 	add.w	r5, r2, #20
 8013fcc:	429d      	cmp	r5, r3
 8013fce:	d926      	bls.n	801401e <_dtoa_r+0x2ae>
 8013fd0:	6041      	str	r1, [r0, #4]
 8013fd2:	4648      	mov	r0, r9
 8013fd4:	f001 f832 	bl	801503c <_Balloc>
 8013fd8:	4682      	mov	sl, r0
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d142      	bne.n	8014064 <_dtoa_r+0x2f4>
 8013fde:	4b1e      	ldr	r3, [pc, #120]	@ (8014058 <_dtoa_r+0x2e8>)
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	f240 11af 	movw	r1, #431	@ 0x1af
 8013fe6:	e6da      	b.n	8013d9e <_dtoa_r+0x2e>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	e7e3      	b.n	8013fb4 <_dtoa_r+0x244>
 8013fec:	2300      	movs	r3, #0
 8013fee:	e7d5      	b.n	8013f9c <_dtoa_r+0x22c>
 8013ff0:	2401      	movs	r4, #1
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	9307      	str	r3, [sp, #28]
 8013ff6:	9409      	str	r4, [sp, #36]	@ 0x24
 8013ff8:	f04f 3bff 	mov.w	fp, #4294967295
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f8cd b00c 	str.w	fp, [sp, #12]
 8014002:	2312      	movs	r3, #18
 8014004:	920c      	str	r2, [sp, #48]	@ 0x30
 8014006:	e7db      	b.n	8013fc0 <_dtoa_r+0x250>
 8014008:	2301      	movs	r3, #1
 801400a:	9309      	str	r3, [sp, #36]	@ 0x24
 801400c:	e7f4      	b.n	8013ff8 <_dtoa_r+0x288>
 801400e:	f04f 0b01 	mov.w	fp, #1
 8014012:	f8cd b00c 	str.w	fp, [sp, #12]
 8014016:	465b      	mov	r3, fp
 8014018:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801401c:	e7d0      	b.n	8013fc0 <_dtoa_r+0x250>
 801401e:	3101      	adds	r1, #1
 8014020:	0052      	lsls	r2, r2, #1
 8014022:	e7d1      	b.n	8013fc8 <_dtoa_r+0x258>
 8014024:	f3af 8000 	nop.w
 8014028:	636f4361 	.word	0x636f4361
 801402c:	3fd287a7 	.word	0x3fd287a7
 8014030:	8b60c8b3 	.word	0x8b60c8b3
 8014034:	3fc68a28 	.word	0x3fc68a28
 8014038:	509f79fb 	.word	0x509f79fb
 801403c:	3fd34413 	.word	0x3fd34413
 8014040:	08017b6a 	.word	0x08017b6a
 8014044:	08017c2c 	.word	0x08017c2c
 8014048:	7ff00000 	.word	0x7ff00000
 801404c:	08017b47 	.word	0x08017b47
 8014050:	3ff80000 	.word	0x3ff80000
 8014054:	08017ee8 	.word	0x08017ee8
 8014058:	08017c84 	.word	0x08017c84
 801405c:	08017c28 	.word	0x08017c28
 8014060:	08017b46 	.word	0x08017b46
 8014064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014068:	6018      	str	r0, [r3, #0]
 801406a:	9b03      	ldr	r3, [sp, #12]
 801406c:	2b0e      	cmp	r3, #14
 801406e:	f200 80a1 	bhi.w	80141b4 <_dtoa_r+0x444>
 8014072:	2c00      	cmp	r4, #0
 8014074:	f000 809e 	beq.w	80141b4 <_dtoa_r+0x444>
 8014078:	2f00      	cmp	r7, #0
 801407a:	dd33      	ble.n	80140e4 <_dtoa_r+0x374>
 801407c:	4b9c      	ldr	r3, [pc, #624]	@ (80142f0 <_dtoa_r+0x580>)
 801407e:	f007 020f 	and.w	r2, r7, #15
 8014082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014086:	ed93 7b00 	vldr	d7, [r3]
 801408a:	05f8      	lsls	r0, r7, #23
 801408c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014090:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014094:	d516      	bpl.n	80140c4 <_dtoa_r+0x354>
 8014096:	4b97      	ldr	r3, [pc, #604]	@ (80142f4 <_dtoa_r+0x584>)
 8014098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801409c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140a0:	f7ec fc0c 	bl	80008bc <__aeabi_ddiv>
 80140a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140a8:	f004 040f 	and.w	r4, r4, #15
 80140ac:	2603      	movs	r6, #3
 80140ae:	4d91      	ldr	r5, [pc, #580]	@ (80142f4 <_dtoa_r+0x584>)
 80140b0:	b954      	cbnz	r4, 80140c8 <_dtoa_r+0x358>
 80140b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80140b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140ba:	f7ec fbff 	bl	80008bc <__aeabi_ddiv>
 80140be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140c2:	e028      	b.n	8014116 <_dtoa_r+0x3a6>
 80140c4:	2602      	movs	r6, #2
 80140c6:	e7f2      	b.n	80140ae <_dtoa_r+0x33e>
 80140c8:	07e1      	lsls	r1, r4, #31
 80140ca:	d508      	bpl.n	80140de <_dtoa_r+0x36e>
 80140cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80140d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80140d4:	f7ec fac8 	bl	8000668 <__aeabi_dmul>
 80140d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80140dc:	3601      	adds	r6, #1
 80140de:	1064      	asrs	r4, r4, #1
 80140e0:	3508      	adds	r5, #8
 80140e2:	e7e5      	b.n	80140b0 <_dtoa_r+0x340>
 80140e4:	f000 80af 	beq.w	8014246 <_dtoa_r+0x4d6>
 80140e8:	427c      	negs	r4, r7
 80140ea:	4b81      	ldr	r3, [pc, #516]	@ (80142f0 <_dtoa_r+0x580>)
 80140ec:	4d81      	ldr	r5, [pc, #516]	@ (80142f4 <_dtoa_r+0x584>)
 80140ee:	f004 020f 	and.w	r2, r4, #15
 80140f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80140fe:	f7ec fab3 	bl	8000668 <__aeabi_dmul>
 8014102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014106:	1124      	asrs	r4, r4, #4
 8014108:	2300      	movs	r3, #0
 801410a:	2602      	movs	r6, #2
 801410c:	2c00      	cmp	r4, #0
 801410e:	f040 808f 	bne.w	8014230 <_dtoa_r+0x4c0>
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1d3      	bne.n	80140be <_dtoa_r+0x34e>
 8014116:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014118:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801411c:	2b00      	cmp	r3, #0
 801411e:	f000 8094 	beq.w	801424a <_dtoa_r+0x4da>
 8014122:	4b75      	ldr	r3, [pc, #468]	@ (80142f8 <_dtoa_r+0x588>)
 8014124:	2200      	movs	r2, #0
 8014126:	4620      	mov	r0, r4
 8014128:	4629      	mov	r1, r5
 801412a:	f7ec fd0f 	bl	8000b4c <__aeabi_dcmplt>
 801412e:	2800      	cmp	r0, #0
 8014130:	f000 808b 	beq.w	801424a <_dtoa_r+0x4da>
 8014134:	9b03      	ldr	r3, [sp, #12]
 8014136:	2b00      	cmp	r3, #0
 8014138:	f000 8087 	beq.w	801424a <_dtoa_r+0x4da>
 801413c:	f1bb 0f00 	cmp.w	fp, #0
 8014140:	dd34      	ble.n	80141ac <_dtoa_r+0x43c>
 8014142:	4620      	mov	r0, r4
 8014144:	4b6d      	ldr	r3, [pc, #436]	@ (80142fc <_dtoa_r+0x58c>)
 8014146:	2200      	movs	r2, #0
 8014148:	4629      	mov	r1, r5
 801414a:	f7ec fa8d 	bl	8000668 <__aeabi_dmul>
 801414e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014152:	f107 38ff 	add.w	r8, r7, #4294967295
 8014156:	3601      	adds	r6, #1
 8014158:	465c      	mov	r4, fp
 801415a:	4630      	mov	r0, r6
 801415c:	f7ec fa1a 	bl	8000594 <__aeabi_i2d>
 8014160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014164:	f7ec fa80 	bl	8000668 <__aeabi_dmul>
 8014168:	4b65      	ldr	r3, [pc, #404]	@ (8014300 <_dtoa_r+0x590>)
 801416a:	2200      	movs	r2, #0
 801416c:	f7ec f8c6 	bl	80002fc <__adddf3>
 8014170:	4605      	mov	r5, r0
 8014172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014176:	2c00      	cmp	r4, #0
 8014178:	d16a      	bne.n	8014250 <_dtoa_r+0x4e0>
 801417a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801417e:	4b61      	ldr	r3, [pc, #388]	@ (8014304 <_dtoa_r+0x594>)
 8014180:	2200      	movs	r2, #0
 8014182:	f7ec f8b9 	bl	80002f8 <__aeabi_dsub>
 8014186:	4602      	mov	r2, r0
 8014188:	460b      	mov	r3, r1
 801418a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801418e:	462a      	mov	r2, r5
 8014190:	4633      	mov	r3, r6
 8014192:	f7ec fcf9 	bl	8000b88 <__aeabi_dcmpgt>
 8014196:	2800      	cmp	r0, #0
 8014198:	f040 8298 	bne.w	80146cc <_dtoa_r+0x95c>
 801419c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141a0:	462a      	mov	r2, r5
 80141a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80141a6:	f7ec fcd1 	bl	8000b4c <__aeabi_dcmplt>
 80141aa:	bb38      	cbnz	r0, 80141fc <_dtoa_r+0x48c>
 80141ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80141b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80141b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f2c0 8157 	blt.w	801446a <_dtoa_r+0x6fa>
 80141bc:	2f0e      	cmp	r7, #14
 80141be:	f300 8154 	bgt.w	801446a <_dtoa_r+0x6fa>
 80141c2:	4b4b      	ldr	r3, [pc, #300]	@ (80142f0 <_dtoa_r+0x580>)
 80141c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80141c8:	ed93 7b00 	vldr	d7, [r3]
 80141cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	ed8d 7b00 	vstr	d7, [sp]
 80141d4:	f280 80e5 	bge.w	80143a2 <_dtoa_r+0x632>
 80141d8:	9b03      	ldr	r3, [sp, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f300 80e1 	bgt.w	80143a2 <_dtoa_r+0x632>
 80141e0:	d10c      	bne.n	80141fc <_dtoa_r+0x48c>
 80141e2:	4b48      	ldr	r3, [pc, #288]	@ (8014304 <_dtoa_r+0x594>)
 80141e4:	2200      	movs	r2, #0
 80141e6:	ec51 0b17 	vmov	r0, r1, d7
 80141ea:	f7ec fa3d 	bl	8000668 <__aeabi_dmul>
 80141ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141f2:	f7ec fcbf 	bl	8000b74 <__aeabi_dcmpge>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	f000 8266 	beq.w	80146c8 <_dtoa_r+0x958>
 80141fc:	2400      	movs	r4, #0
 80141fe:	4625      	mov	r5, r4
 8014200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014202:	4656      	mov	r6, sl
 8014204:	ea6f 0803 	mvn.w	r8, r3
 8014208:	2700      	movs	r7, #0
 801420a:	4621      	mov	r1, r4
 801420c:	4648      	mov	r0, r9
 801420e:	f000 ff55 	bl	80150bc <_Bfree>
 8014212:	2d00      	cmp	r5, #0
 8014214:	f000 80bd 	beq.w	8014392 <_dtoa_r+0x622>
 8014218:	b12f      	cbz	r7, 8014226 <_dtoa_r+0x4b6>
 801421a:	42af      	cmp	r7, r5
 801421c:	d003      	beq.n	8014226 <_dtoa_r+0x4b6>
 801421e:	4639      	mov	r1, r7
 8014220:	4648      	mov	r0, r9
 8014222:	f000 ff4b 	bl	80150bc <_Bfree>
 8014226:	4629      	mov	r1, r5
 8014228:	4648      	mov	r0, r9
 801422a:	f000 ff47 	bl	80150bc <_Bfree>
 801422e:	e0b0      	b.n	8014392 <_dtoa_r+0x622>
 8014230:	07e2      	lsls	r2, r4, #31
 8014232:	d505      	bpl.n	8014240 <_dtoa_r+0x4d0>
 8014234:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014238:	f7ec fa16 	bl	8000668 <__aeabi_dmul>
 801423c:	3601      	adds	r6, #1
 801423e:	2301      	movs	r3, #1
 8014240:	1064      	asrs	r4, r4, #1
 8014242:	3508      	adds	r5, #8
 8014244:	e762      	b.n	801410c <_dtoa_r+0x39c>
 8014246:	2602      	movs	r6, #2
 8014248:	e765      	b.n	8014116 <_dtoa_r+0x3a6>
 801424a:	9c03      	ldr	r4, [sp, #12]
 801424c:	46b8      	mov	r8, r7
 801424e:	e784      	b.n	801415a <_dtoa_r+0x3ea>
 8014250:	4b27      	ldr	r3, [pc, #156]	@ (80142f0 <_dtoa_r+0x580>)
 8014252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801425c:	4454      	add	r4, sl
 801425e:	2900      	cmp	r1, #0
 8014260:	d054      	beq.n	801430c <_dtoa_r+0x59c>
 8014262:	4929      	ldr	r1, [pc, #164]	@ (8014308 <_dtoa_r+0x598>)
 8014264:	2000      	movs	r0, #0
 8014266:	f7ec fb29 	bl	80008bc <__aeabi_ddiv>
 801426a:	4633      	mov	r3, r6
 801426c:	462a      	mov	r2, r5
 801426e:	f7ec f843 	bl	80002f8 <__aeabi_dsub>
 8014272:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014276:	4656      	mov	r6, sl
 8014278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801427c:	f7ec fca4 	bl	8000bc8 <__aeabi_d2iz>
 8014280:	4605      	mov	r5, r0
 8014282:	f7ec f987 	bl	8000594 <__aeabi_i2d>
 8014286:	4602      	mov	r2, r0
 8014288:	460b      	mov	r3, r1
 801428a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801428e:	f7ec f833 	bl	80002f8 <__aeabi_dsub>
 8014292:	3530      	adds	r5, #48	@ 0x30
 8014294:	4602      	mov	r2, r0
 8014296:	460b      	mov	r3, r1
 8014298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801429c:	f806 5b01 	strb.w	r5, [r6], #1
 80142a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80142a4:	f7ec fc52 	bl	8000b4c <__aeabi_dcmplt>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d172      	bne.n	8014392 <_dtoa_r+0x622>
 80142ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142b0:	4911      	ldr	r1, [pc, #68]	@ (80142f8 <_dtoa_r+0x588>)
 80142b2:	2000      	movs	r0, #0
 80142b4:	f7ec f820 	bl	80002f8 <__aeabi_dsub>
 80142b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80142bc:	f7ec fc46 	bl	8000b4c <__aeabi_dcmplt>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	f040 80b4 	bne.w	801442e <_dtoa_r+0x6be>
 80142c6:	42a6      	cmp	r6, r4
 80142c8:	f43f af70 	beq.w	80141ac <_dtoa_r+0x43c>
 80142cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80142d0:	4b0a      	ldr	r3, [pc, #40]	@ (80142fc <_dtoa_r+0x58c>)
 80142d2:	2200      	movs	r2, #0
 80142d4:	f7ec f9c8 	bl	8000668 <__aeabi_dmul>
 80142d8:	4b08      	ldr	r3, [pc, #32]	@ (80142fc <_dtoa_r+0x58c>)
 80142da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80142de:	2200      	movs	r2, #0
 80142e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142e4:	f7ec f9c0 	bl	8000668 <__aeabi_dmul>
 80142e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142ec:	e7c4      	b.n	8014278 <_dtoa_r+0x508>
 80142ee:	bf00      	nop
 80142f0:	08017ee8 	.word	0x08017ee8
 80142f4:	08017ec0 	.word	0x08017ec0
 80142f8:	3ff00000 	.word	0x3ff00000
 80142fc:	40240000 	.word	0x40240000
 8014300:	401c0000 	.word	0x401c0000
 8014304:	40140000 	.word	0x40140000
 8014308:	3fe00000 	.word	0x3fe00000
 801430c:	4631      	mov	r1, r6
 801430e:	4628      	mov	r0, r5
 8014310:	f7ec f9aa 	bl	8000668 <__aeabi_dmul>
 8014314:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014318:	9413      	str	r4, [sp, #76]	@ 0x4c
 801431a:	4656      	mov	r6, sl
 801431c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014320:	f7ec fc52 	bl	8000bc8 <__aeabi_d2iz>
 8014324:	4605      	mov	r5, r0
 8014326:	f7ec f935 	bl	8000594 <__aeabi_i2d>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014332:	f7eb ffe1 	bl	80002f8 <__aeabi_dsub>
 8014336:	3530      	adds	r5, #48	@ 0x30
 8014338:	f806 5b01 	strb.w	r5, [r6], #1
 801433c:	4602      	mov	r2, r0
 801433e:	460b      	mov	r3, r1
 8014340:	42a6      	cmp	r6, r4
 8014342:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014346:	f04f 0200 	mov.w	r2, #0
 801434a:	d124      	bne.n	8014396 <_dtoa_r+0x626>
 801434c:	4baf      	ldr	r3, [pc, #700]	@ (801460c <_dtoa_r+0x89c>)
 801434e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014352:	f7eb ffd3 	bl	80002fc <__adddf3>
 8014356:	4602      	mov	r2, r0
 8014358:	460b      	mov	r3, r1
 801435a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801435e:	f7ec fc13 	bl	8000b88 <__aeabi_dcmpgt>
 8014362:	2800      	cmp	r0, #0
 8014364:	d163      	bne.n	801442e <_dtoa_r+0x6be>
 8014366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801436a:	49a8      	ldr	r1, [pc, #672]	@ (801460c <_dtoa_r+0x89c>)
 801436c:	2000      	movs	r0, #0
 801436e:	f7eb ffc3 	bl	80002f8 <__aeabi_dsub>
 8014372:	4602      	mov	r2, r0
 8014374:	460b      	mov	r3, r1
 8014376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801437a:	f7ec fbe7 	bl	8000b4c <__aeabi_dcmplt>
 801437e:	2800      	cmp	r0, #0
 8014380:	f43f af14 	beq.w	80141ac <_dtoa_r+0x43c>
 8014384:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014386:	1e73      	subs	r3, r6, #1
 8014388:	9313      	str	r3, [sp, #76]	@ 0x4c
 801438a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801438e:	2b30      	cmp	r3, #48	@ 0x30
 8014390:	d0f8      	beq.n	8014384 <_dtoa_r+0x614>
 8014392:	4647      	mov	r7, r8
 8014394:	e03b      	b.n	801440e <_dtoa_r+0x69e>
 8014396:	4b9e      	ldr	r3, [pc, #632]	@ (8014610 <_dtoa_r+0x8a0>)
 8014398:	f7ec f966 	bl	8000668 <__aeabi_dmul>
 801439c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143a0:	e7bc      	b.n	801431c <_dtoa_r+0x5ac>
 80143a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80143a6:	4656      	mov	r6, sl
 80143a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143ac:	4620      	mov	r0, r4
 80143ae:	4629      	mov	r1, r5
 80143b0:	f7ec fa84 	bl	80008bc <__aeabi_ddiv>
 80143b4:	f7ec fc08 	bl	8000bc8 <__aeabi_d2iz>
 80143b8:	4680      	mov	r8, r0
 80143ba:	f7ec f8eb 	bl	8000594 <__aeabi_i2d>
 80143be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143c2:	f7ec f951 	bl	8000668 <__aeabi_dmul>
 80143c6:	4602      	mov	r2, r0
 80143c8:	460b      	mov	r3, r1
 80143ca:	4620      	mov	r0, r4
 80143cc:	4629      	mov	r1, r5
 80143ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80143d2:	f7eb ff91 	bl	80002f8 <__aeabi_dsub>
 80143d6:	f806 4b01 	strb.w	r4, [r6], #1
 80143da:	9d03      	ldr	r5, [sp, #12]
 80143dc:	eba6 040a 	sub.w	r4, r6, sl
 80143e0:	42a5      	cmp	r5, r4
 80143e2:	4602      	mov	r2, r0
 80143e4:	460b      	mov	r3, r1
 80143e6:	d133      	bne.n	8014450 <_dtoa_r+0x6e0>
 80143e8:	f7eb ff88 	bl	80002fc <__adddf3>
 80143ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143f0:	4604      	mov	r4, r0
 80143f2:	460d      	mov	r5, r1
 80143f4:	f7ec fbc8 	bl	8000b88 <__aeabi_dcmpgt>
 80143f8:	b9c0      	cbnz	r0, 801442c <_dtoa_r+0x6bc>
 80143fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143fe:	4620      	mov	r0, r4
 8014400:	4629      	mov	r1, r5
 8014402:	f7ec fb99 	bl	8000b38 <__aeabi_dcmpeq>
 8014406:	b110      	cbz	r0, 801440e <_dtoa_r+0x69e>
 8014408:	f018 0f01 	tst.w	r8, #1
 801440c:	d10e      	bne.n	801442c <_dtoa_r+0x6bc>
 801440e:	9902      	ldr	r1, [sp, #8]
 8014410:	4648      	mov	r0, r9
 8014412:	f000 fe53 	bl	80150bc <_Bfree>
 8014416:	2300      	movs	r3, #0
 8014418:	7033      	strb	r3, [r6, #0]
 801441a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801441c:	3701      	adds	r7, #1
 801441e:	601f      	str	r7, [r3, #0]
 8014420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014422:	2b00      	cmp	r3, #0
 8014424:	f000 824b 	beq.w	80148be <_dtoa_r+0xb4e>
 8014428:	601e      	str	r6, [r3, #0]
 801442a:	e248      	b.n	80148be <_dtoa_r+0xb4e>
 801442c:	46b8      	mov	r8, r7
 801442e:	4633      	mov	r3, r6
 8014430:	461e      	mov	r6, r3
 8014432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014436:	2a39      	cmp	r2, #57	@ 0x39
 8014438:	d106      	bne.n	8014448 <_dtoa_r+0x6d8>
 801443a:	459a      	cmp	sl, r3
 801443c:	d1f8      	bne.n	8014430 <_dtoa_r+0x6c0>
 801443e:	2230      	movs	r2, #48	@ 0x30
 8014440:	f108 0801 	add.w	r8, r8, #1
 8014444:	f88a 2000 	strb.w	r2, [sl]
 8014448:	781a      	ldrb	r2, [r3, #0]
 801444a:	3201      	adds	r2, #1
 801444c:	701a      	strb	r2, [r3, #0]
 801444e:	e7a0      	b.n	8014392 <_dtoa_r+0x622>
 8014450:	4b6f      	ldr	r3, [pc, #444]	@ (8014610 <_dtoa_r+0x8a0>)
 8014452:	2200      	movs	r2, #0
 8014454:	f7ec f908 	bl	8000668 <__aeabi_dmul>
 8014458:	2200      	movs	r2, #0
 801445a:	2300      	movs	r3, #0
 801445c:	4604      	mov	r4, r0
 801445e:	460d      	mov	r5, r1
 8014460:	f7ec fb6a 	bl	8000b38 <__aeabi_dcmpeq>
 8014464:	2800      	cmp	r0, #0
 8014466:	d09f      	beq.n	80143a8 <_dtoa_r+0x638>
 8014468:	e7d1      	b.n	801440e <_dtoa_r+0x69e>
 801446a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801446c:	2a00      	cmp	r2, #0
 801446e:	f000 80ea 	beq.w	8014646 <_dtoa_r+0x8d6>
 8014472:	9a07      	ldr	r2, [sp, #28]
 8014474:	2a01      	cmp	r2, #1
 8014476:	f300 80cd 	bgt.w	8014614 <_dtoa_r+0x8a4>
 801447a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801447c:	2a00      	cmp	r2, #0
 801447e:	f000 80c1 	beq.w	8014604 <_dtoa_r+0x894>
 8014482:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014486:	9c08      	ldr	r4, [sp, #32]
 8014488:	9e00      	ldr	r6, [sp, #0]
 801448a:	9a00      	ldr	r2, [sp, #0]
 801448c:	441a      	add	r2, r3
 801448e:	9200      	str	r2, [sp, #0]
 8014490:	9a06      	ldr	r2, [sp, #24]
 8014492:	2101      	movs	r1, #1
 8014494:	441a      	add	r2, r3
 8014496:	4648      	mov	r0, r9
 8014498:	9206      	str	r2, [sp, #24]
 801449a:	f000 ff0d 	bl	80152b8 <__i2b>
 801449e:	4605      	mov	r5, r0
 80144a0:	b166      	cbz	r6, 80144bc <_dtoa_r+0x74c>
 80144a2:	9b06      	ldr	r3, [sp, #24]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	dd09      	ble.n	80144bc <_dtoa_r+0x74c>
 80144a8:	42b3      	cmp	r3, r6
 80144aa:	9a00      	ldr	r2, [sp, #0]
 80144ac:	bfa8      	it	ge
 80144ae:	4633      	movge	r3, r6
 80144b0:	1ad2      	subs	r2, r2, r3
 80144b2:	9200      	str	r2, [sp, #0]
 80144b4:	9a06      	ldr	r2, [sp, #24]
 80144b6:	1af6      	subs	r6, r6, r3
 80144b8:	1ad3      	subs	r3, r2, r3
 80144ba:	9306      	str	r3, [sp, #24]
 80144bc:	9b08      	ldr	r3, [sp, #32]
 80144be:	b30b      	cbz	r3, 8014504 <_dtoa_r+0x794>
 80144c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 80c6 	beq.w	8014654 <_dtoa_r+0x8e4>
 80144c8:	2c00      	cmp	r4, #0
 80144ca:	f000 80c0 	beq.w	801464e <_dtoa_r+0x8de>
 80144ce:	4629      	mov	r1, r5
 80144d0:	4622      	mov	r2, r4
 80144d2:	4648      	mov	r0, r9
 80144d4:	f000 ffa8 	bl	8015428 <__pow5mult>
 80144d8:	9a02      	ldr	r2, [sp, #8]
 80144da:	4601      	mov	r1, r0
 80144dc:	4605      	mov	r5, r0
 80144de:	4648      	mov	r0, r9
 80144e0:	f000 ff00 	bl	80152e4 <__multiply>
 80144e4:	9902      	ldr	r1, [sp, #8]
 80144e6:	4680      	mov	r8, r0
 80144e8:	4648      	mov	r0, r9
 80144ea:	f000 fde7 	bl	80150bc <_Bfree>
 80144ee:	9b08      	ldr	r3, [sp, #32]
 80144f0:	1b1b      	subs	r3, r3, r4
 80144f2:	9308      	str	r3, [sp, #32]
 80144f4:	f000 80b1 	beq.w	801465a <_dtoa_r+0x8ea>
 80144f8:	9a08      	ldr	r2, [sp, #32]
 80144fa:	4641      	mov	r1, r8
 80144fc:	4648      	mov	r0, r9
 80144fe:	f000 ff93 	bl	8015428 <__pow5mult>
 8014502:	9002      	str	r0, [sp, #8]
 8014504:	2101      	movs	r1, #1
 8014506:	4648      	mov	r0, r9
 8014508:	f000 fed6 	bl	80152b8 <__i2b>
 801450c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801450e:	4604      	mov	r4, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	f000 81d8 	beq.w	80148c6 <_dtoa_r+0xb56>
 8014516:	461a      	mov	r2, r3
 8014518:	4601      	mov	r1, r0
 801451a:	4648      	mov	r0, r9
 801451c:	f000 ff84 	bl	8015428 <__pow5mult>
 8014520:	9b07      	ldr	r3, [sp, #28]
 8014522:	2b01      	cmp	r3, #1
 8014524:	4604      	mov	r4, r0
 8014526:	f300 809f 	bgt.w	8014668 <_dtoa_r+0x8f8>
 801452a:	9b04      	ldr	r3, [sp, #16]
 801452c:	2b00      	cmp	r3, #0
 801452e:	f040 8097 	bne.w	8014660 <_dtoa_r+0x8f0>
 8014532:	9b05      	ldr	r3, [sp, #20]
 8014534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014538:	2b00      	cmp	r3, #0
 801453a:	f040 8093 	bne.w	8014664 <_dtoa_r+0x8f4>
 801453e:	9b05      	ldr	r3, [sp, #20]
 8014540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014544:	0d1b      	lsrs	r3, r3, #20
 8014546:	051b      	lsls	r3, r3, #20
 8014548:	b133      	cbz	r3, 8014558 <_dtoa_r+0x7e8>
 801454a:	9b00      	ldr	r3, [sp, #0]
 801454c:	3301      	adds	r3, #1
 801454e:	9300      	str	r3, [sp, #0]
 8014550:	9b06      	ldr	r3, [sp, #24]
 8014552:	3301      	adds	r3, #1
 8014554:	9306      	str	r3, [sp, #24]
 8014556:	2301      	movs	r3, #1
 8014558:	9308      	str	r3, [sp, #32]
 801455a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801455c:	2b00      	cmp	r3, #0
 801455e:	f000 81b8 	beq.w	80148d2 <_dtoa_r+0xb62>
 8014562:	6923      	ldr	r3, [r4, #16]
 8014564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014568:	6918      	ldr	r0, [r3, #16]
 801456a:	f000 fe59 	bl	8015220 <__hi0bits>
 801456e:	f1c0 0020 	rsb	r0, r0, #32
 8014572:	9b06      	ldr	r3, [sp, #24]
 8014574:	4418      	add	r0, r3
 8014576:	f010 001f 	ands.w	r0, r0, #31
 801457a:	f000 8082 	beq.w	8014682 <_dtoa_r+0x912>
 801457e:	f1c0 0320 	rsb	r3, r0, #32
 8014582:	2b04      	cmp	r3, #4
 8014584:	dd73      	ble.n	801466e <_dtoa_r+0x8fe>
 8014586:	9b00      	ldr	r3, [sp, #0]
 8014588:	f1c0 001c 	rsb	r0, r0, #28
 801458c:	4403      	add	r3, r0
 801458e:	9300      	str	r3, [sp, #0]
 8014590:	9b06      	ldr	r3, [sp, #24]
 8014592:	4403      	add	r3, r0
 8014594:	4406      	add	r6, r0
 8014596:	9306      	str	r3, [sp, #24]
 8014598:	9b00      	ldr	r3, [sp, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	dd05      	ble.n	80145aa <_dtoa_r+0x83a>
 801459e:	9902      	ldr	r1, [sp, #8]
 80145a0:	461a      	mov	r2, r3
 80145a2:	4648      	mov	r0, r9
 80145a4:	f000 ff9a 	bl	80154dc <__lshift>
 80145a8:	9002      	str	r0, [sp, #8]
 80145aa:	9b06      	ldr	r3, [sp, #24]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dd05      	ble.n	80145bc <_dtoa_r+0x84c>
 80145b0:	4621      	mov	r1, r4
 80145b2:	461a      	mov	r2, r3
 80145b4:	4648      	mov	r0, r9
 80145b6:	f000 ff91 	bl	80154dc <__lshift>
 80145ba:	4604      	mov	r4, r0
 80145bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d061      	beq.n	8014686 <_dtoa_r+0x916>
 80145c2:	9802      	ldr	r0, [sp, #8]
 80145c4:	4621      	mov	r1, r4
 80145c6:	f000 fff5 	bl	80155b4 <__mcmp>
 80145ca:	2800      	cmp	r0, #0
 80145cc:	da5b      	bge.n	8014686 <_dtoa_r+0x916>
 80145ce:	2300      	movs	r3, #0
 80145d0:	9902      	ldr	r1, [sp, #8]
 80145d2:	220a      	movs	r2, #10
 80145d4:	4648      	mov	r0, r9
 80145d6:	f000 fd93 	bl	8015100 <__multadd>
 80145da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145dc:	9002      	str	r0, [sp, #8]
 80145de:	f107 38ff 	add.w	r8, r7, #4294967295
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f000 8177 	beq.w	80148d6 <_dtoa_r+0xb66>
 80145e8:	4629      	mov	r1, r5
 80145ea:	2300      	movs	r3, #0
 80145ec:	220a      	movs	r2, #10
 80145ee:	4648      	mov	r0, r9
 80145f0:	f000 fd86 	bl	8015100 <__multadd>
 80145f4:	f1bb 0f00 	cmp.w	fp, #0
 80145f8:	4605      	mov	r5, r0
 80145fa:	dc6f      	bgt.n	80146dc <_dtoa_r+0x96c>
 80145fc:	9b07      	ldr	r3, [sp, #28]
 80145fe:	2b02      	cmp	r3, #2
 8014600:	dc49      	bgt.n	8014696 <_dtoa_r+0x926>
 8014602:	e06b      	b.n	80146dc <_dtoa_r+0x96c>
 8014604:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801460a:	e73c      	b.n	8014486 <_dtoa_r+0x716>
 801460c:	3fe00000 	.word	0x3fe00000
 8014610:	40240000 	.word	0x40240000
 8014614:	9b03      	ldr	r3, [sp, #12]
 8014616:	1e5c      	subs	r4, r3, #1
 8014618:	9b08      	ldr	r3, [sp, #32]
 801461a:	42a3      	cmp	r3, r4
 801461c:	db09      	blt.n	8014632 <_dtoa_r+0x8c2>
 801461e:	1b1c      	subs	r4, r3, r4
 8014620:	9b03      	ldr	r3, [sp, #12]
 8014622:	2b00      	cmp	r3, #0
 8014624:	f6bf af30 	bge.w	8014488 <_dtoa_r+0x718>
 8014628:	9b00      	ldr	r3, [sp, #0]
 801462a:	9a03      	ldr	r2, [sp, #12]
 801462c:	1a9e      	subs	r6, r3, r2
 801462e:	2300      	movs	r3, #0
 8014630:	e72b      	b.n	801448a <_dtoa_r+0x71a>
 8014632:	9b08      	ldr	r3, [sp, #32]
 8014634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014636:	9408      	str	r4, [sp, #32]
 8014638:	1ae3      	subs	r3, r4, r3
 801463a:	441a      	add	r2, r3
 801463c:	9e00      	ldr	r6, [sp, #0]
 801463e:	9b03      	ldr	r3, [sp, #12]
 8014640:	920d      	str	r2, [sp, #52]	@ 0x34
 8014642:	2400      	movs	r4, #0
 8014644:	e721      	b.n	801448a <_dtoa_r+0x71a>
 8014646:	9c08      	ldr	r4, [sp, #32]
 8014648:	9e00      	ldr	r6, [sp, #0]
 801464a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801464c:	e728      	b.n	80144a0 <_dtoa_r+0x730>
 801464e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014652:	e751      	b.n	80144f8 <_dtoa_r+0x788>
 8014654:	9a08      	ldr	r2, [sp, #32]
 8014656:	9902      	ldr	r1, [sp, #8]
 8014658:	e750      	b.n	80144fc <_dtoa_r+0x78c>
 801465a:	f8cd 8008 	str.w	r8, [sp, #8]
 801465e:	e751      	b.n	8014504 <_dtoa_r+0x794>
 8014660:	2300      	movs	r3, #0
 8014662:	e779      	b.n	8014558 <_dtoa_r+0x7e8>
 8014664:	9b04      	ldr	r3, [sp, #16]
 8014666:	e777      	b.n	8014558 <_dtoa_r+0x7e8>
 8014668:	2300      	movs	r3, #0
 801466a:	9308      	str	r3, [sp, #32]
 801466c:	e779      	b.n	8014562 <_dtoa_r+0x7f2>
 801466e:	d093      	beq.n	8014598 <_dtoa_r+0x828>
 8014670:	9a00      	ldr	r2, [sp, #0]
 8014672:	331c      	adds	r3, #28
 8014674:	441a      	add	r2, r3
 8014676:	9200      	str	r2, [sp, #0]
 8014678:	9a06      	ldr	r2, [sp, #24]
 801467a:	441a      	add	r2, r3
 801467c:	441e      	add	r6, r3
 801467e:	9206      	str	r2, [sp, #24]
 8014680:	e78a      	b.n	8014598 <_dtoa_r+0x828>
 8014682:	4603      	mov	r3, r0
 8014684:	e7f4      	b.n	8014670 <_dtoa_r+0x900>
 8014686:	9b03      	ldr	r3, [sp, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	46b8      	mov	r8, r7
 801468c:	dc20      	bgt.n	80146d0 <_dtoa_r+0x960>
 801468e:	469b      	mov	fp, r3
 8014690:	9b07      	ldr	r3, [sp, #28]
 8014692:	2b02      	cmp	r3, #2
 8014694:	dd1e      	ble.n	80146d4 <_dtoa_r+0x964>
 8014696:	f1bb 0f00 	cmp.w	fp, #0
 801469a:	f47f adb1 	bne.w	8014200 <_dtoa_r+0x490>
 801469e:	4621      	mov	r1, r4
 80146a0:	465b      	mov	r3, fp
 80146a2:	2205      	movs	r2, #5
 80146a4:	4648      	mov	r0, r9
 80146a6:	f000 fd2b 	bl	8015100 <__multadd>
 80146aa:	4601      	mov	r1, r0
 80146ac:	4604      	mov	r4, r0
 80146ae:	9802      	ldr	r0, [sp, #8]
 80146b0:	f000 ff80 	bl	80155b4 <__mcmp>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	f77f ada3 	ble.w	8014200 <_dtoa_r+0x490>
 80146ba:	4656      	mov	r6, sl
 80146bc:	2331      	movs	r3, #49	@ 0x31
 80146be:	f806 3b01 	strb.w	r3, [r6], #1
 80146c2:	f108 0801 	add.w	r8, r8, #1
 80146c6:	e59f      	b.n	8014208 <_dtoa_r+0x498>
 80146c8:	9c03      	ldr	r4, [sp, #12]
 80146ca:	46b8      	mov	r8, r7
 80146cc:	4625      	mov	r5, r4
 80146ce:	e7f4      	b.n	80146ba <_dtoa_r+0x94a>
 80146d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80146d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8101 	beq.w	80148de <_dtoa_r+0xb6e>
 80146dc:	2e00      	cmp	r6, #0
 80146de:	dd05      	ble.n	80146ec <_dtoa_r+0x97c>
 80146e0:	4629      	mov	r1, r5
 80146e2:	4632      	mov	r2, r6
 80146e4:	4648      	mov	r0, r9
 80146e6:	f000 fef9 	bl	80154dc <__lshift>
 80146ea:	4605      	mov	r5, r0
 80146ec:	9b08      	ldr	r3, [sp, #32]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d05c      	beq.n	80147ac <_dtoa_r+0xa3c>
 80146f2:	6869      	ldr	r1, [r5, #4]
 80146f4:	4648      	mov	r0, r9
 80146f6:	f000 fca1 	bl	801503c <_Balloc>
 80146fa:	4606      	mov	r6, r0
 80146fc:	b928      	cbnz	r0, 801470a <_dtoa_r+0x99a>
 80146fe:	4b82      	ldr	r3, [pc, #520]	@ (8014908 <_dtoa_r+0xb98>)
 8014700:	4602      	mov	r2, r0
 8014702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014706:	f7ff bb4a 	b.w	8013d9e <_dtoa_r+0x2e>
 801470a:	692a      	ldr	r2, [r5, #16]
 801470c:	3202      	adds	r2, #2
 801470e:	0092      	lsls	r2, r2, #2
 8014710:	f105 010c 	add.w	r1, r5, #12
 8014714:	300c      	adds	r0, #12
 8014716:	f7ff fa6a 	bl	8013bee <memcpy>
 801471a:	2201      	movs	r2, #1
 801471c:	4631      	mov	r1, r6
 801471e:	4648      	mov	r0, r9
 8014720:	f000 fedc 	bl	80154dc <__lshift>
 8014724:	f10a 0301 	add.w	r3, sl, #1
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	eb0a 030b 	add.w	r3, sl, fp
 801472e:	9308      	str	r3, [sp, #32]
 8014730:	9b04      	ldr	r3, [sp, #16]
 8014732:	f003 0301 	and.w	r3, r3, #1
 8014736:	462f      	mov	r7, r5
 8014738:	9306      	str	r3, [sp, #24]
 801473a:	4605      	mov	r5, r0
 801473c:	9b00      	ldr	r3, [sp, #0]
 801473e:	9802      	ldr	r0, [sp, #8]
 8014740:	4621      	mov	r1, r4
 8014742:	f103 3bff 	add.w	fp, r3, #4294967295
 8014746:	f7ff fa89 	bl	8013c5c <quorem>
 801474a:	4603      	mov	r3, r0
 801474c:	3330      	adds	r3, #48	@ 0x30
 801474e:	9003      	str	r0, [sp, #12]
 8014750:	4639      	mov	r1, r7
 8014752:	9802      	ldr	r0, [sp, #8]
 8014754:	9309      	str	r3, [sp, #36]	@ 0x24
 8014756:	f000 ff2d 	bl	80155b4 <__mcmp>
 801475a:	462a      	mov	r2, r5
 801475c:	9004      	str	r0, [sp, #16]
 801475e:	4621      	mov	r1, r4
 8014760:	4648      	mov	r0, r9
 8014762:	f000 ff43 	bl	80155ec <__mdiff>
 8014766:	68c2      	ldr	r2, [r0, #12]
 8014768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801476a:	4606      	mov	r6, r0
 801476c:	bb02      	cbnz	r2, 80147b0 <_dtoa_r+0xa40>
 801476e:	4601      	mov	r1, r0
 8014770:	9802      	ldr	r0, [sp, #8]
 8014772:	f000 ff1f 	bl	80155b4 <__mcmp>
 8014776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014778:	4602      	mov	r2, r0
 801477a:	4631      	mov	r1, r6
 801477c:	4648      	mov	r0, r9
 801477e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014780:	9309      	str	r3, [sp, #36]	@ 0x24
 8014782:	f000 fc9b 	bl	80150bc <_Bfree>
 8014786:	9b07      	ldr	r3, [sp, #28]
 8014788:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801478a:	9e00      	ldr	r6, [sp, #0]
 801478c:	ea42 0103 	orr.w	r1, r2, r3
 8014790:	9b06      	ldr	r3, [sp, #24]
 8014792:	4319      	orrs	r1, r3
 8014794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014796:	d10d      	bne.n	80147b4 <_dtoa_r+0xa44>
 8014798:	2b39      	cmp	r3, #57	@ 0x39
 801479a:	d027      	beq.n	80147ec <_dtoa_r+0xa7c>
 801479c:	9a04      	ldr	r2, [sp, #16]
 801479e:	2a00      	cmp	r2, #0
 80147a0:	dd01      	ble.n	80147a6 <_dtoa_r+0xa36>
 80147a2:	9b03      	ldr	r3, [sp, #12]
 80147a4:	3331      	adds	r3, #49	@ 0x31
 80147a6:	f88b 3000 	strb.w	r3, [fp]
 80147aa:	e52e      	b.n	801420a <_dtoa_r+0x49a>
 80147ac:	4628      	mov	r0, r5
 80147ae:	e7b9      	b.n	8014724 <_dtoa_r+0x9b4>
 80147b0:	2201      	movs	r2, #1
 80147b2:	e7e2      	b.n	801477a <_dtoa_r+0xa0a>
 80147b4:	9904      	ldr	r1, [sp, #16]
 80147b6:	2900      	cmp	r1, #0
 80147b8:	db04      	blt.n	80147c4 <_dtoa_r+0xa54>
 80147ba:	9807      	ldr	r0, [sp, #28]
 80147bc:	4301      	orrs	r1, r0
 80147be:	9806      	ldr	r0, [sp, #24]
 80147c0:	4301      	orrs	r1, r0
 80147c2:	d120      	bne.n	8014806 <_dtoa_r+0xa96>
 80147c4:	2a00      	cmp	r2, #0
 80147c6:	ddee      	ble.n	80147a6 <_dtoa_r+0xa36>
 80147c8:	9902      	ldr	r1, [sp, #8]
 80147ca:	9300      	str	r3, [sp, #0]
 80147cc:	2201      	movs	r2, #1
 80147ce:	4648      	mov	r0, r9
 80147d0:	f000 fe84 	bl	80154dc <__lshift>
 80147d4:	4621      	mov	r1, r4
 80147d6:	9002      	str	r0, [sp, #8]
 80147d8:	f000 feec 	bl	80155b4 <__mcmp>
 80147dc:	2800      	cmp	r0, #0
 80147de:	9b00      	ldr	r3, [sp, #0]
 80147e0:	dc02      	bgt.n	80147e8 <_dtoa_r+0xa78>
 80147e2:	d1e0      	bne.n	80147a6 <_dtoa_r+0xa36>
 80147e4:	07da      	lsls	r2, r3, #31
 80147e6:	d5de      	bpl.n	80147a6 <_dtoa_r+0xa36>
 80147e8:	2b39      	cmp	r3, #57	@ 0x39
 80147ea:	d1da      	bne.n	80147a2 <_dtoa_r+0xa32>
 80147ec:	2339      	movs	r3, #57	@ 0x39
 80147ee:	f88b 3000 	strb.w	r3, [fp]
 80147f2:	4633      	mov	r3, r6
 80147f4:	461e      	mov	r6, r3
 80147f6:	3b01      	subs	r3, #1
 80147f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80147fc:	2a39      	cmp	r2, #57	@ 0x39
 80147fe:	d04e      	beq.n	801489e <_dtoa_r+0xb2e>
 8014800:	3201      	adds	r2, #1
 8014802:	701a      	strb	r2, [r3, #0]
 8014804:	e501      	b.n	801420a <_dtoa_r+0x49a>
 8014806:	2a00      	cmp	r2, #0
 8014808:	dd03      	ble.n	8014812 <_dtoa_r+0xaa2>
 801480a:	2b39      	cmp	r3, #57	@ 0x39
 801480c:	d0ee      	beq.n	80147ec <_dtoa_r+0xa7c>
 801480e:	3301      	adds	r3, #1
 8014810:	e7c9      	b.n	80147a6 <_dtoa_r+0xa36>
 8014812:	9a00      	ldr	r2, [sp, #0]
 8014814:	9908      	ldr	r1, [sp, #32]
 8014816:	f802 3c01 	strb.w	r3, [r2, #-1]
 801481a:	428a      	cmp	r2, r1
 801481c:	d028      	beq.n	8014870 <_dtoa_r+0xb00>
 801481e:	9902      	ldr	r1, [sp, #8]
 8014820:	2300      	movs	r3, #0
 8014822:	220a      	movs	r2, #10
 8014824:	4648      	mov	r0, r9
 8014826:	f000 fc6b 	bl	8015100 <__multadd>
 801482a:	42af      	cmp	r7, r5
 801482c:	9002      	str	r0, [sp, #8]
 801482e:	f04f 0300 	mov.w	r3, #0
 8014832:	f04f 020a 	mov.w	r2, #10
 8014836:	4639      	mov	r1, r7
 8014838:	4648      	mov	r0, r9
 801483a:	d107      	bne.n	801484c <_dtoa_r+0xadc>
 801483c:	f000 fc60 	bl	8015100 <__multadd>
 8014840:	4607      	mov	r7, r0
 8014842:	4605      	mov	r5, r0
 8014844:	9b00      	ldr	r3, [sp, #0]
 8014846:	3301      	adds	r3, #1
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	e777      	b.n	801473c <_dtoa_r+0x9cc>
 801484c:	f000 fc58 	bl	8015100 <__multadd>
 8014850:	4629      	mov	r1, r5
 8014852:	4607      	mov	r7, r0
 8014854:	2300      	movs	r3, #0
 8014856:	220a      	movs	r2, #10
 8014858:	4648      	mov	r0, r9
 801485a:	f000 fc51 	bl	8015100 <__multadd>
 801485e:	4605      	mov	r5, r0
 8014860:	e7f0      	b.n	8014844 <_dtoa_r+0xad4>
 8014862:	f1bb 0f00 	cmp.w	fp, #0
 8014866:	bfcc      	ite	gt
 8014868:	465e      	movgt	r6, fp
 801486a:	2601      	movle	r6, #1
 801486c:	4456      	add	r6, sl
 801486e:	2700      	movs	r7, #0
 8014870:	9902      	ldr	r1, [sp, #8]
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	2201      	movs	r2, #1
 8014876:	4648      	mov	r0, r9
 8014878:	f000 fe30 	bl	80154dc <__lshift>
 801487c:	4621      	mov	r1, r4
 801487e:	9002      	str	r0, [sp, #8]
 8014880:	f000 fe98 	bl	80155b4 <__mcmp>
 8014884:	2800      	cmp	r0, #0
 8014886:	dcb4      	bgt.n	80147f2 <_dtoa_r+0xa82>
 8014888:	d102      	bne.n	8014890 <_dtoa_r+0xb20>
 801488a:	9b00      	ldr	r3, [sp, #0]
 801488c:	07db      	lsls	r3, r3, #31
 801488e:	d4b0      	bmi.n	80147f2 <_dtoa_r+0xa82>
 8014890:	4633      	mov	r3, r6
 8014892:	461e      	mov	r6, r3
 8014894:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014898:	2a30      	cmp	r2, #48	@ 0x30
 801489a:	d0fa      	beq.n	8014892 <_dtoa_r+0xb22>
 801489c:	e4b5      	b.n	801420a <_dtoa_r+0x49a>
 801489e:	459a      	cmp	sl, r3
 80148a0:	d1a8      	bne.n	80147f4 <_dtoa_r+0xa84>
 80148a2:	2331      	movs	r3, #49	@ 0x31
 80148a4:	f108 0801 	add.w	r8, r8, #1
 80148a8:	f88a 3000 	strb.w	r3, [sl]
 80148ac:	e4ad      	b.n	801420a <_dtoa_r+0x49a>
 80148ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80148b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801490c <_dtoa_r+0xb9c>
 80148b4:	b11b      	cbz	r3, 80148be <_dtoa_r+0xb4e>
 80148b6:	f10a 0308 	add.w	r3, sl, #8
 80148ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80148bc:	6013      	str	r3, [r2, #0]
 80148be:	4650      	mov	r0, sl
 80148c0:	b017      	add	sp, #92	@ 0x5c
 80148c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c6:	9b07      	ldr	r3, [sp, #28]
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	f77f ae2e 	ble.w	801452a <_dtoa_r+0x7ba>
 80148ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148d0:	9308      	str	r3, [sp, #32]
 80148d2:	2001      	movs	r0, #1
 80148d4:	e64d      	b.n	8014572 <_dtoa_r+0x802>
 80148d6:	f1bb 0f00 	cmp.w	fp, #0
 80148da:	f77f aed9 	ble.w	8014690 <_dtoa_r+0x920>
 80148de:	4656      	mov	r6, sl
 80148e0:	9802      	ldr	r0, [sp, #8]
 80148e2:	4621      	mov	r1, r4
 80148e4:	f7ff f9ba 	bl	8013c5c <quorem>
 80148e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80148ec:	f806 3b01 	strb.w	r3, [r6], #1
 80148f0:	eba6 020a 	sub.w	r2, r6, sl
 80148f4:	4593      	cmp	fp, r2
 80148f6:	ddb4      	ble.n	8014862 <_dtoa_r+0xaf2>
 80148f8:	9902      	ldr	r1, [sp, #8]
 80148fa:	2300      	movs	r3, #0
 80148fc:	220a      	movs	r2, #10
 80148fe:	4648      	mov	r0, r9
 8014900:	f000 fbfe 	bl	8015100 <__multadd>
 8014904:	9002      	str	r0, [sp, #8]
 8014906:	e7eb      	b.n	80148e0 <_dtoa_r+0xb70>
 8014908:	08017c84 	.word	0x08017c84
 801490c:	08017c1f 	.word	0x08017c1f

08014910 <_free_r>:
 8014910:	b538      	push	{r3, r4, r5, lr}
 8014912:	4605      	mov	r5, r0
 8014914:	2900      	cmp	r1, #0
 8014916:	d041      	beq.n	801499c <_free_r+0x8c>
 8014918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801491c:	1f0c      	subs	r4, r1, #4
 801491e:	2b00      	cmp	r3, #0
 8014920:	bfb8      	it	lt
 8014922:	18e4      	addlt	r4, r4, r3
 8014924:	f7fd fc4a 	bl	80121bc <__malloc_lock>
 8014928:	4a1d      	ldr	r2, [pc, #116]	@ (80149a0 <_free_r+0x90>)
 801492a:	6813      	ldr	r3, [r2, #0]
 801492c:	b933      	cbnz	r3, 801493c <_free_r+0x2c>
 801492e:	6063      	str	r3, [r4, #4]
 8014930:	6014      	str	r4, [r2, #0]
 8014932:	4628      	mov	r0, r5
 8014934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014938:	f7fd bc46 	b.w	80121c8 <__malloc_unlock>
 801493c:	42a3      	cmp	r3, r4
 801493e:	d908      	bls.n	8014952 <_free_r+0x42>
 8014940:	6820      	ldr	r0, [r4, #0]
 8014942:	1821      	adds	r1, r4, r0
 8014944:	428b      	cmp	r3, r1
 8014946:	bf01      	itttt	eq
 8014948:	6819      	ldreq	r1, [r3, #0]
 801494a:	685b      	ldreq	r3, [r3, #4]
 801494c:	1809      	addeq	r1, r1, r0
 801494e:	6021      	streq	r1, [r4, #0]
 8014950:	e7ed      	b.n	801492e <_free_r+0x1e>
 8014952:	461a      	mov	r2, r3
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	b10b      	cbz	r3, 801495c <_free_r+0x4c>
 8014958:	42a3      	cmp	r3, r4
 801495a:	d9fa      	bls.n	8014952 <_free_r+0x42>
 801495c:	6811      	ldr	r1, [r2, #0]
 801495e:	1850      	adds	r0, r2, r1
 8014960:	42a0      	cmp	r0, r4
 8014962:	d10b      	bne.n	801497c <_free_r+0x6c>
 8014964:	6820      	ldr	r0, [r4, #0]
 8014966:	4401      	add	r1, r0
 8014968:	1850      	adds	r0, r2, r1
 801496a:	4283      	cmp	r3, r0
 801496c:	6011      	str	r1, [r2, #0]
 801496e:	d1e0      	bne.n	8014932 <_free_r+0x22>
 8014970:	6818      	ldr	r0, [r3, #0]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	6053      	str	r3, [r2, #4]
 8014976:	4408      	add	r0, r1
 8014978:	6010      	str	r0, [r2, #0]
 801497a:	e7da      	b.n	8014932 <_free_r+0x22>
 801497c:	d902      	bls.n	8014984 <_free_r+0x74>
 801497e:	230c      	movs	r3, #12
 8014980:	602b      	str	r3, [r5, #0]
 8014982:	e7d6      	b.n	8014932 <_free_r+0x22>
 8014984:	6820      	ldr	r0, [r4, #0]
 8014986:	1821      	adds	r1, r4, r0
 8014988:	428b      	cmp	r3, r1
 801498a:	bf04      	itt	eq
 801498c:	6819      	ldreq	r1, [r3, #0]
 801498e:	685b      	ldreq	r3, [r3, #4]
 8014990:	6063      	str	r3, [r4, #4]
 8014992:	bf04      	itt	eq
 8014994:	1809      	addeq	r1, r1, r0
 8014996:	6021      	streq	r1, [r4, #0]
 8014998:	6054      	str	r4, [r2, #4]
 801499a:	e7ca      	b.n	8014932 <_free_r+0x22>
 801499c:	bd38      	pop	{r3, r4, r5, pc}
 801499e:	bf00      	nop
 80149a0:	200023b4 	.word	0x200023b4

080149a4 <rshift>:
 80149a4:	6903      	ldr	r3, [r0, #16]
 80149a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80149aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80149b2:	f100 0414 	add.w	r4, r0, #20
 80149b6:	dd45      	ble.n	8014a44 <rshift+0xa0>
 80149b8:	f011 011f 	ands.w	r1, r1, #31
 80149bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80149c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80149c4:	d10c      	bne.n	80149e0 <rshift+0x3c>
 80149c6:	f100 0710 	add.w	r7, r0, #16
 80149ca:	4629      	mov	r1, r5
 80149cc:	42b1      	cmp	r1, r6
 80149ce:	d334      	bcc.n	8014a3a <rshift+0x96>
 80149d0:	1a9b      	subs	r3, r3, r2
 80149d2:	009b      	lsls	r3, r3, #2
 80149d4:	1eea      	subs	r2, r5, #3
 80149d6:	4296      	cmp	r6, r2
 80149d8:	bf38      	it	cc
 80149da:	2300      	movcc	r3, #0
 80149dc:	4423      	add	r3, r4
 80149de:	e015      	b.n	8014a0c <rshift+0x68>
 80149e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80149e4:	f1c1 0820 	rsb	r8, r1, #32
 80149e8:	40cf      	lsrs	r7, r1
 80149ea:	f105 0e04 	add.w	lr, r5, #4
 80149ee:	46a1      	mov	r9, r4
 80149f0:	4576      	cmp	r6, lr
 80149f2:	46f4      	mov	ip, lr
 80149f4:	d815      	bhi.n	8014a22 <rshift+0x7e>
 80149f6:	1a9a      	subs	r2, r3, r2
 80149f8:	0092      	lsls	r2, r2, #2
 80149fa:	3a04      	subs	r2, #4
 80149fc:	3501      	adds	r5, #1
 80149fe:	42ae      	cmp	r6, r5
 8014a00:	bf38      	it	cc
 8014a02:	2200      	movcc	r2, #0
 8014a04:	18a3      	adds	r3, r4, r2
 8014a06:	50a7      	str	r7, [r4, r2]
 8014a08:	b107      	cbz	r7, 8014a0c <rshift+0x68>
 8014a0a:	3304      	adds	r3, #4
 8014a0c:	1b1a      	subs	r2, r3, r4
 8014a0e:	42a3      	cmp	r3, r4
 8014a10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a14:	bf08      	it	eq
 8014a16:	2300      	moveq	r3, #0
 8014a18:	6102      	str	r2, [r0, #16]
 8014a1a:	bf08      	it	eq
 8014a1c:	6143      	streq	r3, [r0, #20]
 8014a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a22:	f8dc c000 	ldr.w	ip, [ip]
 8014a26:	fa0c fc08 	lsl.w	ip, ip, r8
 8014a2a:	ea4c 0707 	orr.w	r7, ip, r7
 8014a2e:	f849 7b04 	str.w	r7, [r9], #4
 8014a32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a36:	40cf      	lsrs	r7, r1
 8014a38:	e7da      	b.n	80149f0 <rshift+0x4c>
 8014a3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8014a3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8014a42:	e7c3      	b.n	80149cc <rshift+0x28>
 8014a44:	4623      	mov	r3, r4
 8014a46:	e7e1      	b.n	8014a0c <rshift+0x68>

08014a48 <__hexdig_fun>:
 8014a48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014a4c:	2b09      	cmp	r3, #9
 8014a4e:	d802      	bhi.n	8014a56 <__hexdig_fun+0xe>
 8014a50:	3820      	subs	r0, #32
 8014a52:	b2c0      	uxtb	r0, r0
 8014a54:	4770      	bx	lr
 8014a56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014a5a:	2b05      	cmp	r3, #5
 8014a5c:	d801      	bhi.n	8014a62 <__hexdig_fun+0x1a>
 8014a5e:	3847      	subs	r0, #71	@ 0x47
 8014a60:	e7f7      	b.n	8014a52 <__hexdig_fun+0xa>
 8014a62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014a66:	2b05      	cmp	r3, #5
 8014a68:	d801      	bhi.n	8014a6e <__hexdig_fun+0x26>
 8014a6a:	3827      	subs	r0, #39	@ 0x27
 8014a6c:	e7f1      	b.n	8014a52 <__hexdig_fun+0xa>
 8014a6e:	2000      	movs	r0, #0
 8014a70:	4770      	bx	lr
	...

08014a74 <__gethex>:
 8014a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a78:	b085      	sub	sp, #20
 8014a7a:	468a      	mov	sl, r1
 8014a7c:	9302      	str	r3, [sp, #8]
 8014a7e:	680b      	ldr	r3, [r1, #0]
 8014a80:	9001      	str	r0, [sp, #4]
 8014a82:	4690      	mov	r8, r2
 8014a84:	1c9c      	adds	r4, r3, #2
 8014a86:	46a1      	mov	r9, r4
 8014a88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014a8c:	2830      	cmp	r0, #48	@ 0x30
 8014a8e:	d0fa      	beq.n	8014a86 <__gethex+0x12>
 8014a90:	eba9 0303 	sub.w	r3, r9, r3
 8014a94:	f1a3 0b02 	sub.w	fp, r3, #2
 8014a98:	f7ff ffd6 	bl	8014a48 <__hexdig_fun>
 8014a9c:	4605      	mov	r5, r0
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	d168      	bne.n	8014b74 <__gethex+0x100>
 8014aa2:	49a0      	ldr	r1, [pc, #640]	@ (8014d24 <__gethex+0x2b0>)
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	4648      	mov	r0, r9
 8014aa8:	f7fe ffab 	bl	8013a02 <strncmp>
 8014aac:	4607      	mov	r7, r0
 8014aae:	2800      	cmp	r0, #0
 8014ab0:	d167      	bne.n	8014b82 <__gethex+0x10e>
 8014ab2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014ab6:	4626      	mov	r6, r4
 8014ab8:	f7ff ffc6 	bl	8014a48 <__hexdig_fun>
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d062      	beq.n	8014b86 <__gethex+0x112>
 8014ac0:	4623      	mov	r3, r4
 8014ac2:	7818      	ldrb	r0, [r3, #0]
 8014ac4:	2830      	cmp	r0, #48	@ 0x30
 8014ac6:	4699      	mov	r9, r3
 8014ac8:	f103 0301 	add.w	r3, r3, #1
 8014acc:	d0f9      	beq.n	8014ac2 <__gethex+0x4e>
 8014ace:	f7ff ffbb 	bl	8014a48 <__hexdig_fun>
 8014ad2:	fab0 f580 	clz	r5, r0
 8014ad6:	096d      	lsrs	r5, r5, #5
 8014ad8:	f04f 0b01 	mov.w	fp, #1
 8014adc:	464a      	mov	r2, r9
 8014ade:	4616      	mov	r6, r2
 8014ae0:	3201      	adds	r2, #1
 8014ae2:	7830      	ldrb	r0, [r6, #0]
 8014ae4:	f7ff ffb0 	bl	8014a48 <__hexdig_fun>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d1f8      	bne.n	8014ade <__gethex+0x6a>
 8014aec:	498d      	ldr	r1, [pc, #564]	@ (8014d24 <__gethex+0x2b0>)
 8014aee:	2201      	movs	r2, #1
 8014af0:	4630      	mov	r0, r6
 8014af2:	f7fe ff86 	bl	8013a02 <strncmp>
 8014af6:	2800      	cmp	r0, #0
 8014af8:	d13f      	bne.n	8014b7a <__gethex+0x106>
 8014afa:	b944      	cbnz	r4, 8014b0e <__gethex+0x9a>
 8014afc:	1c74      	adds	r4, r6, #1
 8014afe:	4622      	mov	r2, r4
 8014b00:	4616      	mov	r6, r2
 8014b02:	3201      	adds	r2, #1
 8014b04:	7830      	ldrb	r0, [r6, #0]
 8014b06:	f7ff ff9f 	bl	8014a48 <__hexdig_fun>
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d1f8      	bne.n	8014b00 <__gethex+0x8c>
 8014b0e:	1ba4      	subs	r4, r4, r6
 8014b10:	00a7      	lsls	r7, r4, #2
 8014b12:	7833      	ldrb	r3, [r6, #0]
 8014b14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014b18:	2b50      	cmp	r3, #80	@ 0x50
 8014b1a:	d13e      	bne.n	8014b9a <__gethex+0x126>
 8014b1c:	7873      	ldrb	r3, [r6, #1]
 8014b1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b20:	d033      	beq.n	8014b8a <__gethex+0x116>
 8014b22:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b24:	d034      	beq.n	8014b90 <__gethex+0x11c>
 8014b26:	1c71      	adds	r1, r6, #1
 8014b28:	2400      	movs	r4, #0
 8014b2a:	7808      	ldrb	r0, [r1, #0]
 8014b2c:	f7ff ff8c 	bl	8014a48 <__hexdig_fun>
 8014b30:	1e43      	subs	r3, r0, #1
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	2b18      	cmp	r3, #24
 8014b36:	d830      	bhi.n	8014b9a <__gethex+0x126>
 8014b38:	f1a0 0210 	sub.w	r2, r0, #16
 8014b3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014b40:	f7ff ff82 	bl	8014a48 <__hexdig_fun>
 8014b44:	f100 3cff 	add.w	ip, r0, #4294967295
 8014b48:	fa5f fc8c 	uxtb.w	ip, ip
 8014b4c:	f1bc 0f18 	cmp.w	ip, #24
 8014b50:	f04f 030a 	mov.w	r3, #10
 8014b54:	d91e      	bls.n	8014b94 <__gethex+0x120>
 8014b56:	b104      	cbz	r4, 8014b5a <__gethex+0xe6>
 8014b58:	4252      	negs	r2, r2
 8014b5a:	4417      	add	r7, r2
 8014b5c:	f8ca 1000 	str.w	r1, [sl]
 8014b60:	b1ed      	cbz	r5, 8014b9e <__gethex+0x12a>
 8014b62:	f1bb 0f00 	cmp.w	fp, #0
 8014b66:	bf0c      	ite	eq
 8014b68:	2506      	moveq	r5, #6
 8014b6a:	2500      	movne	r5, #0
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	b005      	add	sp, #20
 8014b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	2500      	movs	r5, #0
 8014b76:	462c      	mov	r4, r5
 8014b78:	e7b0      	b.n	8014adc <__gethex+0x68>
 8014b7a:	2c00      	cmp	r4, #0
 8014b7c:	d1c7      	bne.n	8014b0e <__gethex+0x9a>
 8014b7e:	4627      	mov	r7, r4
 8014b80:	e7c7      	b.n	8014b12 <__gethex+0x9e>
 8014b82:	464e      	mov	r6, r9
 8014b84:	462f      	mov	r7, r5
 8014b86:	2501      	movs	r5, #1
 8014b88:	e7c3      	b.n	8014b12 <__gethex+0x9e>
 8014b8a:	2400      	movs	r4, #0
 8014b8c:	1cb1      	adds	r1, r6, #2
 8014b8e:	e7cc      	b.n	8014b2a <__gethex+0xb6>
 8014b90:	2401      	movs	r4, #1
 8014b92:	e7fb      	b.n	8014b8c <__gethex+0x118>
 8014b94:	fb03 0002 	mla	r0, r3, r2, r0
 8014b98:	e7ce      	b.n	8014b38 <__gethex+0xc4>
 8014b9a:	4631      	mov	r1, r6
 8014b9c:	e7de      	b.n	8014b5c <__gethex+0xe8>
 8014b9e:	eba6 0309 	sub.w	r3, r6, r9
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	4629      	mov	r1, r5
 8014ba6:	2b07      	cmp	r3, #7
 8014ba8:	dc0a      	bgt.n	8014bc0 <__gethex+0x14c>
 8014baa:	9801      	ldr	r0, [sp, #4]
 8014bac:	f000 fa46 	bl	801503c <_Balloc>
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	b940      	cbnz	r0, 8014bc6 <__gethex+0x152>
 8014bb4:	4b5c      	ldr	r3, [pc, #368]	@ (8014d28 <__gethex+0x2b4>)
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	21e4      	movs	r1, #228	@ 0xe4
 8014bba:	485c      	ldr	r0, [pc, #368]	@ (8014d2c <__gethex+0x2b8>)
 8014bbc:	f7ff f830 	bl	8013c20 <__assert_func>
 8014bc0:	3101      	adds	r1, #1
 8014bc2:	105b      	asrs	r3, r3, #1
 8014bc4:	e7ef      	b.n	8014ba6 <__gethex+0x132>
 8014bc6:	f100 0a14 	add.w	sl, r0, #20
 8014bca:	2300      	movs	r3, #0
 8014bcc:	4655      	mov	r5, sl
 8014bce:	469b      	mov	fp, r3
 8014bd0:	45b1      	cmp	r9, r6
 8014bd2:	d337      	bcc.n	8014c44 <__gethex+0x1d0>
 8014bd4:	f845 bb04 	str.w	fp, [r5], #4
 8014bd8:	eba5 050a 	sub.w	r5, r5, sl
 8014bdc:	10ad      	asrs	r5, r5, #2
 8014bde:	6125      	str	r5, [r4, #16]
 8014be0:	4658      	mov	r0, fp
 8014be2:	f000 fb1d 	bl	8015220 <__hi0bits>
 8014be6:	016d      	lsls	r5, r5, #5
 8014be8:	f8d8 6000 	ldr.w	r6, [r8]
 8014bec:	1a2d      	subs	r5, r5, r0
 8014bee:	42b5      	cmp	r5, r6
 8014bf0:	dd54      	ble.n	8014c9c <__gethex+0x228>
 8014bf2:	1bad      	subs	r5, r5, r6
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	f000 fea9 	bl	801594e <__any_on>
 8014bfc:	4681      	mov	r9, r0
 8014bfe:	b178      	cbz	r0, 8014c20 <__gethex+0x1ac>
 8014c00:	1e6b      	subs	r3, r5, #1
 8014c02:	1159      	asrs	r1, r3, #5
 8014c04:	f003 021f 	and.w	r2, r3, #31
 8014c08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014c0c:	f04f 0901 	mov.w	r9, #1
 8014c10:	fa09 f202 	lsl.w	r2, r9, r2
 8014c14:	420a      	tst	r2, r1
 8014c16:	d003      	beq.n	8014c20 <__gethex+0x1ac>
 8014c18:	454b      	cmp	r3, r9
 8014c1a:	dc36      	bgt.n	8014c8a <__gethex+0x216>
 8014c1c:	f04f 0902 	mov.w	r9, #2
 8014c20:	4629      	mov	r1, r5
 8014c22:	4620      	mov	r0, r4
 8014c24:	f7ff febe 	bl	80149a4 <rshift>
 8014c28:	442f      	add	r7, r5
 8014c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c2e:	42bb      	cmp	r3, r7
 8014c30:	da42      	bge.n	8014cb8 <__gethex+0x244>
 8014c32:	9801      	ldr	r0, [sp, #4]
 8014c34:	4621      	mov	r1, r4
 8014c36:	f000 fa41 	bl	80150bc <_Bfree>
 8014c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	6013      	str	r3, [r2, #0]
 8014c40:	25a3      	movs	r5, #163	@ 0xa3
 8014c42:	e793      	b.n	8014b6c <__gethex+0xf8>
 8014c44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014c48:	2a2e      	cmp	r2, #46	@ 0x2e
 8014c4a:	d012      	beq.n	8014c72 <__gethex+0x1fe>
 8014c4c:	2b20      	cmp	r3, #32
 8014c4e:	d104      	bne.n	8014c5a <__gethex+0x1e6>
 8014c50:	f845 bb04 	str.w	fp, [r5], #4
 8014c54:	f04f 0b00 	mov.w	fp, #0
 8014c58:	465b      	mov	r3, fp
 8014c5a:	7830      	ldrb	r0, [r6, #0]
 8014c5c:	9303      	str	r3, [sp, #12]
 8014c5e:	f7ff fef3 	bl	8014a48 <__hexdig_fun>
 8014c62:	9b03      	ldr	r3, [sp, #12]
 8014c64:	f000 000f 	and.w	r0, r0, #15
 8014c68:	4098      	lsls	r0, r3
 8014c6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8014c6e:	3304      	adds	r3, #4
 8014c70:	e7ae      	b.n	8014bd0 <__gethex+0x15c>
 8014c72:	45b1      	cmp	r9, r6
 8014c74:	d8ea      	bhi.n	8014c4c <__gethex+0x1d8>
 8014c76:	492b      	ldr	r1, [pc, #172]	@ (8014d24 <__gethex+0x2b0>)
 8014c78:	9303      	str	r3, [sp, #12]
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	4630      	mov	r0, r6
 8014c7e:	f7fe fec0 	bl	8013a02 <strncmp>
 8014c82:	9b03      	ldr	r3, [sp, #12]
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d1e1      	bne.n	8014c4c <__gethex+0x1d8>
 8014c88:	e7a2      	b.n	8014bd0 <__gethex+0x15c>
 8014c8a:	1ea9      	subs	r1, r5, #2
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f000 fe5e 	bl	801594e <__any_on>
 8014c92:	2800      	cmp	r0, #0
 8014c94:	d0c2      	beq.n	8014c1c <__gethex+0x1a8>
 8014c96:	f04f 0903 	mov.w	r9, #3
 8014c9a:	e7c1      	b.n	8014c20 <__gethex+0x1ac>
 8014c9c:	da09      	bge.n	8014cb2 <__gethex+0x23e>
 8014c9e:	1b75      	subs	r5, r6, r5
 8014ca0:	4621      	mov	r1, r4
 8014ca2:	9801      	ldr	r0, [sp, #4]
 8014ca4:	462a      	mov	r2, r5
 8014ca6:	f000 fc19 	bl	80154dc <__lshift>
 8014caa:	1b7f      	subs	r7, r7, r5
 8014cac:	4604      	mov	r4, r0
 8014cae:	f100 0a14 	add.w	sl, r0, #20
 8014cb2:	f04f 0900 	mov.w	r9, #0
 8014cb6:	e7b8      	b.n	8014c2a <__gethex+0x1b6>
 8014cb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014cbc:	42bd      	cmp	r5, r7
 8014cbe:	dd6f      	ble.n	8014da0 <__gethex+0x32c>
 8014cc0:	1bed      	subs	r5, r5, r7
 8014cc2:	42ae      	cmp	r6, r5
 8014cc4:	dc34      	bgt.n	8014d30 <__gethex+0x2bc>
 8014cc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014cca:	2b02      	cmp	r3, #2
 8014ccc:	d022      	beq.n	8014d14 <__gethex+0x2a0>
 8014cce:	2b03      	cmp	r3, #3
 8014cd0:	d024      	beq.n	8014d1c <__gethex+0x2a8>
 8014cd2:	2b01      	cmp	r3, #1
 8014cd4:	d115      	bne.n	8014d02 <__gethex+0x28e>
 8014cd6:	42ae      	cmp	r6, r5
 8014cd8:	d113      	bne.n	8014d02 <__gethex+0x28e>
 8014cda:	2e01      	cmp	r6, #1
 8014cdc:	d10b      	bne.n	8014cf6 <__gethex+0x282>
 8014cde:	9a02      	ldr	r2, [sp, #8]
 8014ce0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ce4:	6013      	str	r3, [r2, #0]
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	6123      	str	r3, [r4, #16]
 8014cea:	f8ca 3000 	str.w	r3, [sl]
 8014cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cf0:	2562      	movs	r5, #98	@ 0x62
 8014cf2:	601c      	str	r4, [r3, #0]
 8014cf4:	e73a      	b.n	8014b6c <__gethex+0xf8>
 8014cf6:	1e71      	subs	r1, r6, #1
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	f000 fe28 	bl	801594e <__any_on>
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d1ed      	bne.n	8014cde <__gethex+0x26a>
 8014d02:	9801      	ldr	r0, [sp, #4]
 8014d04:	4621      	mov	r1, r4
 8014d06:	f000 f9d9 	bl	80150bc <_Bfree>
 8014d0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	6013      	str	r3, [r2, #0]
 8014d10:	2550      	movs	r5, #80	@ 0x50
 8014d12:	e72b      	b.n	8014b6c <__gethex+0xf8>
 8014d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d1f3      	bne.n	8014d02 <__gethex+0x28e>
 8014d1a:	e7e0      	b.n	8014cde <__gethex+0x26a>
 8014d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d1dd      	bne.n	8014cde <__gethex+0x26a>
 8014d22:	e7ee      	b.n	8014d02 <__gethex+0x28e>
 8014d24:	08017b34 	.word	0x08017b34
 8014d28:	08017c84 	.word	0x08017c84
 8014d2c:	08017c95 	.word	0x08017c95
 8014d30:	1e6f      	subs	r7, r5, #1
 8014d32:	f1b9 0f00 	cmp.w	r9, #0
 8014d36:	d130      	bne.n	8014d9a <__gethex+0x326>
 8014d38:	b127      	cbz	r7, 8014d44 <__gethex+0x2d0>
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f000 fe06 	bl	801594e <__any_on>
 8014d42:	4681      	mov	r9, r0
 8014d44:	117a      	asrs	r2, r7, #5
 8014d46:	2301      	movs	r3, #1
 8014d48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014d4c:	f007 071f 	and.w	r7, r7, #31
 8014d50:	40bb      	lsls	r3, r7
 8014d52:	4213      	tst	r3, r2
 8014d54:	4629      	mov	r1, r5
 8014d56:	4620      	mov	r0, r4
 8014d58:	bf18      	it	ne
 8014d5a:	f049 0902 	orrne.w	r9, r9, #2
 8014d5e:	f7ff fe21 	bl	80149a4 <rshift>
 8014d62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014d66:	1b76      	subs	r6, r6, r5
 8014d68:	2502      	movs	r5, #2
 8014d6a:	f1b9 0f00 	cmp.w	r9, #0
 8014d6e:	d047      	beq.n	8014e00 <__gethex+0x38c>
 8014d70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d74:	2b02      	cmp	r3, #2
 8014d76:	d015      	beq.n	8014da4 <__gethex+0x330>
 8014d78:	2b03      	cmp	r3, #3
 8014d7a:	d017      	beq.n	8014dac <__gethex+0x338>
 8014d7c:	2b01      	cmp	r3, #1
 8014d7e:	d109      	bne.n	8014d94 <__gethex+0x320>
 8014d80:	f019 0f02 	tst.w	r9, #2
 8014d84:	d006      	beq.n	8014d94 <__gethex+0x320>
 8014d86:	f8da 3000 	ldr.w	r3, [sl]
 8014d8a:	ea49 0903 	orr.w	r9, r9, r3
 8014d8e:	f019 0f01 	tst.w	r9, #1
 8014d92:	d10e      	bne.n	8014db2 <__gethex+0x33e>
 8014d94:	f045 0510 	orr.w	r5, r5, #16
 8014d98:	e032      	b.n	8014e00 <__gethex+0x38c>
 8014d9a:	f04f 0901 	mov.w	r9, #1
 8014d9e:	e7d1      	b.n	8014d44 <__gethex+0x2d0>
 8014da0:	2501      	movs	r5, #1
 8014da2:	e7e2      	b.n	8014d6a <__gethex+0x2f6>
 8014da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014da6:	f1c3 0301 	rsb	r3, r3, #1
 8014daa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d0f0      	beq.n	8014d94 <__gethex+0x320>
 8014db2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014db6:	f104 0314 	add.w	r3, r4, #20
 8014dba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014dbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014dc2:	f04f 0c00 	mov.w	ip, #0
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014dd0:	d01b      	beq.n	8014e0a <__gethex+0x396>
 8014dd2:	3201      	adds	r2, #1
 8014dd4:	6002      	str	r2, [r0, #0]
 8014dd6:	2d02      	cmp	r5, #2
 8014dd8:	f104 0314 	add.w	r3, r4, #20
 8014ddc:	d13c      	bne.n	8014e58 <__gethex+0x3e4>
 8014dde:	f8d8 2000 	ldr.w	r2, [r8]
 8014de2:	3a01      	subs	r2, #1
 8014de4:	42b2      	cmp	r2, r6
 8014de6:	d109      	bne.n	8014dfc <__gethex+0x388>
 8014de8:	1171      	asrs	r1, r6, #5
 8014dea:	2201      	movs	r2, #1
 8014dec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014df0:	f006 061f 	and.w	r6, r6, #31
 8014df4:	fa02 f606 	lsl.w	r6, r2, r6
 8014df8:	421e      	tst	r6, r3
 8014dfa:	d13a      	bne.n	8014e72 <__gethex+0x3fe>
 8014dfc:	f045 0520 	orr.w	r5, r5, #32
 8014e00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e02:	601c      	str	r4, [r3, #0]
 8014e04:	9b02      	ldr	r3, [sp, #8]
 8014e06:	601f      	str	r7, [r3, #0]
 8014e08:	e6b0      	b.n	8014b6c <__gethex+0xf8>
 8014e0a:	4299      	cmp	r1, r3
 8014e0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014e10:	d8d9      	bhi.n	8014dc6 <__gethex+0x352>
 8014e12:	68a3      	ldr	r3, [r4, #8]
 8014e14:	459b      	cmp	fp, r3
 8014e16:	db17      	blt.n	8014e48 <__gethex+0x3d4>
 8014e18:	6861      	ldr	r1, [r4, #4]
 8014e1a:	9801      	ldr	r0, [sp, #4]
 8014e1c:	3101      	adds	r1, #1
 8014e1e:	f000 f90d 	bl	801503c <_Balloc>
 8014e22:	4681      	mov	r9, r0
 8014e24:	b918      	cbnz	r0, 8014e2e <__gethex+0x3ba>
 8014e26:	4b1a      	ldr	r3, [pc, #104]	@ (8014e90 <__gethex+0x41c>)
 8014e28:	4602      	mov	r2, r0
 8014e2a:	2184      	movs	r1, #132	@ 0x84
 8014e2c:	e6c5      	b.n	8014bba <__gethex+0x146>
 8014e2e:	6922      	ldr	r2, [r4, #16]
 8014e30:	3202      	adds	r2, #2
 8014e32:	f104 010c 	add.w	r1, r4, #12
 8014e36:	0092      	lsls	r2, r2, #2
 8014e38:	300c      	adds	r0, #12
 8014e3a:	f7fe fed8 	bl	8013bee <memcpy>
 8014e3e:	4621      	mov	r1, r4
 8014e40:	9801      	ldr	r0, [sp, #4]
 8014e42:	f000 f93b 	bl	80150bc <_Bfree>
 8014e46:	464c      	mov	r4, r9
 8014e48:	6923      	ldr	r3, [r4, #16]
 8014e4a:	1c5a      	adds	r2, r3, #1
 8014e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014e50:	6122      	str	r2, [r4, #16]
 8014e52:	2201      	movs	r2, #1
 8014e54:	615a      	str	r2, [r3, #20]
 8014e56:	e7be      	b.n	8014dd6 <__gethex+0x362>
 8014e58:	6922      	ldr	r2, [r4, #16]
 8014e5a:	455a      	cmp	r2, fp
 8014e5c:	dd0b      	ble.n	8014e76 <__gethex+0x402>
 8014e5e:	2101      	movs	r1, #1
 8014e60:	4620      	mov	r0, r4
 8014e62:	f7ff fd9f 	bl	80149a4 <rshift>
 8014e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e6a:	3701      	adds	r7, #1
 8014e6c:	42bb      	cmp	r3, r7
 8014e6e:	f6ff aee0 	blt.w	8014c32 <__gethex+0x1be>
 8014e72:	2501      	movs	r5, #1
 8014e74:	e7c2      	b.n	8014dfc <__gethex+0x388>
 8014e76:	f016 061f 	ands.w	r6, r6, #31
 8014e7a:	d0fa      	beq.n	8014e72 <__gethex+0x3fe>
 8014e7c:	4453      	add	r3, sl
 8014e7e:	f1c6 0620 	rsb	r6, r6, #32
 8014e82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014e86:	f000 f9cb 	bl	8015220 <__hi0bits>
 8014e8a:	42b0      	cmp	r0, r6
 8014e8c:	dbe7      	blt.n	8014e5e <__gethex+0x3ea>
 8014e8e:	e7f0      	b.n	8014e72 <__gethex+0x3fe>
 8014e90:	08017c84 	.word	0x08017c84

08014e94 <L_shift>:
 8014e94:	f1c2 0208 	rsb	r2, r2, #8
 8014e98:	0092      	lsls	r2, r2, #2
 8014e9a:	b570      	push	{r4, r5, r6, lr}
 8014e9c:	f1c2 0620 	rsb	r6, r2, #32
 8014ea0:	6843      	ldr	r3, [r0, #4]
 8014ea2:	6804      	ldr	r4, [r0, #0]
 8014ea4:	fa03 f506 	lsl.w	r5, r3, r6
 8014ea8:	432c      	orrs	r4, r5
 8014eaa:	40d3      	lsrs	r3, r2
 8014eac:	6004      	str	r4, [r0, #0]
 8014eae:	f840 3f04 	str.w	r3, [r0, #4]!
 8014eb2:	4288      	cmp	r0, r1
 8014eb4:	d3f4      	bcc.n	8014ea0 <L_shift+0xc>
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}

08014eb8 <__match>:
 8014eb8:	b530      	push	{r4, r5, lr}
 8014eba:	6803      	ldr	r3, [r0, #0]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ec2:	b914      	cbnz	r4, 8014eca <__match+0x12>
 8014ec4:	6003      	str	r3, [r0, #0]
 8014ec6:	2001      	movs	r0, #1
 8014ec8:	bd30      	pop	{r4, r5, pc}
 8014eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ece:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014ed2:	2d19      	cmp	r5, #25
 8014ed4:	bf98      	it	ls
 8014ed6:	3220      	addls	r2, #32
 8014ed8:	42a2      	cmp	r2, r4
 8014eda:	d0f0      	beq.n	8014ebe <__match+0x6>
 8014edc:	2000      	movs	r0, #0
 8014ede:	e7f3      	b.n	8014ec8 <__match+0x10>

08014ee0 <__hexnan>:
 8014ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	680b      	ldr	r3, [r1, #0]
 8014ee6:	6801      	ldr	r1, [r0, #0]
 8014ee8:	115e      	asrs	r6, r3, #5
 8014eea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014eee:	f013 031f 	ands.w	r3, r3, #31
 8014ef2:	b087      	sub	sp, #28
 8014ef4:	bf18      	it	ne
 8014ef6:	3604      	addne	r6, #4
 8014ef8:	2500      	movs	r5, #0
 8014efa:	1f37      	subs	r7, r6, #4
 8014efc:	4682      	mov	sl, r0
 8014efe:	4690      	mov	r8, r2
 8014f00:	9301      	str	r3, [sp, #4]
 8014f02:	f846 5c04 	str.w	r5, [r6, #-4]
 8014f06:	46b9      	mov	r9, r7
 8014f08:	463c      	mov	r4, r7
 8014f0a:	9502      	str	r5, [sp, #8]
 8014f0c:	46ab      	mov	fp, r5
 8014f0e:	784a      	ldrb	r2, [r1, #1]
 8014f10:	1c4b      	adds	r3, r1, #1
 8014f12:	9303      	str	r3, [sp, #12]
 8014f14:	b342      	cbz	r2, 8014f68 <__hexnan+0x88>
 8014f16:	4610      	mov	r0, r2
 8014f18:	9105      	str	r1, [sp, #20]
 8014f1a:	9204      	str	r2, [sp, #16]
 8014f1c:	f7ff fd94 	bl	8014a48 <__hexdig_fun>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d151      	bne.n	8014fc8 <__hexnan+0xe8>
 8014f24:	9a04      	ldr	r2, [sp, #16]
 8014f26:	9905      	ldr	r1, [sp, #20]
 8014f28:	2a20      	cmp	r2, #32
 8014f2a:	d818      	bhi.n	8014f5e <__hexnan+0x7e>
 8014f2c:	9b02      	ldr	r3, [sp, #8]
 8014f2e:	459b      	cmp	fp, r3
 8014f30:	dd13      	ble.n	8014f5a <__hexnan+0x7a>
 8014f32:	454c      	cmp	r4, r9
 8014f34:	d206      	bcs.n	8014f44 <__hexnan+0x64>
 8014f36:	2d07      	cmp	r5, #7
 8014f38:	dc04      	bgt.n	8014f44 <__hexnan+0x64>
 8014f3a:	462a      	mov	r2, r5
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f7ff ffa8 	bl	8014e94 <L_shift>
 8014f44:	4544      	cmp	r4, r8
 8014f46:	d952      	bls.n	8014fee <__hexnan+0x10e>
 8014f48:	2300      	movs	r3, #0
 8014f4a:	f1a4 0904 	sub.w	r9, r4, #4
 8014f4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f52:	f8cd b008 	str.w	fp, [sp, #8]
 8014f56:	464c      	mov	r4, r9
 8014f58:	461d      	mov	r5, r3
 8014f5a:	9903      	ldr	r1, [sp, #12]
 8014f5c:	e7d7      	b.n	8014f0e <__hexnan+0x2e>
 8014f5e:	2a29      	cmp	r2, #41	@ 0x29
 8014f60:	d157      	bne.n	8015012 <__hexnan+0x132>
 8014f62:	3102      	adds	r1, #2
 8014f64:	f8ca 1000 	str.w	r1, [sl]
 8014f68:	f1bb 0f00 	cmp.w	fp, #0
 8014f6c:	d051      	beq.n	8015012 <__hexnan+0x132>
 8014f6e:	454c      	cmp	r4, r9
 8014f70:	d206      	bcs.n	8014f80 <__hexnan+0xa0>
 8014f72:	2d07      	cmp	r5, #7
 8014f74:	dc04      	bgt.n	8014f80 <__hexnan+0xa0>
 8014f76:	462a      	mov	r2, r5
 8014f78:	4649      	mov	r1, r9
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	f7ff ff8a 	bl	8014e94 <L_shift>
 8014f80:	4544      	cmp	r4, r8
 8014f82:	d936      	bls.n	8014ff2 <__hexnan+0x112>
 8014f84:	f1a8 0204 	sub.w	r2, r8, #4
 8014f88:	4623      	mov	r3, r4
 8014f8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014f8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014f92:	429f      	cmp	r7, r3
 8014f94:	d2f9      	bcs.n	8014f8a <__hexnan+0xaa>
 8014f96:	1b3b      	subs	r3, r7, r4
 8014f98:	f023 0303 	bic.w	r3, r3, #3
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	3401      	adds	r4, #1
 8014fa0:	3e03      	subs	r6, #3
 8014fa2:	42b4      	cmp	r4, r6
 8014fa4:	bf88      	it	hi
 8014fa6:	2304      	movhi	r3, #4
 8014fa8:	4443      	add	r3, r8
 8014faa:	2200      	movs	r2, #0
 8014fac:	f843 2b04 	str.w	r2, [r3], #4
 8014fb0:	429f      	cmp	r7, r3
 8014fb2:	d2fb      	bcs.n	8014fac <__hexnan+0xcc>
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	b91b      	cbnz	r3, 8014fc0 <__hexnan+0xe0>
 8014fb8:	4547      	cmp	r7, r8
 8014fba:	d128      	bne.n	801500e <__hexnan+0x12e>
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	603b      	str	r3, [r7, #0]
 8014fc0:	2005      	movs	r0, #5
 8014fc2:	b007      	add	sp, #28
 8014fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc8:	3501      	adds	r5, #1
 8014fca:	2d08      	cmp	r5, #8
 8014fcc:	f10b 0b01 	add.w	fp, fp, #1
 8014fd0:	dd06      	ble.n	8014fe0 <__hexnan+0x100>
 8014fd2:	4544      	cmp	r4, r8
 8014fd4:	d9c1      	bls.n	8014f5a <__hexnan+0x7a>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fdc:	2501      	movs	r5, #1
 8014fde:	3c04      	subs	r4, #4
 8014fe0:	6822      	ldr	r2, [r4, #0]
 8014fe2:	f000 000f 	and.w	r0, r0, #15
 8014fe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014fea:	6020      	str	r0, [r4, #0]
 8014fec:	e7b5      	b.n	8014f5a <__hexnan+0x7a>
 8014fee:	2508      	movs	r5, #8
 8014ff0:	e7b3      	b.n	8014f5a <__hexnan+0x7a>
 8014ff2:	9b01      	ldr	r3, [sp, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d0dd      	beq.n	8014fb4 <__hexnan+0xd4>
 8014ff8:	f1c3 0320 	rsb	r3, r3, #32
 8014ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8015000:	40da      	lsrs	r2, r3
 8015002:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015006:	4013      	ands	r3, r2
 8015008:	f846 3c04 	str.w	r3, [r6, #-4]
 801500c:	e7d2      	b.n	8014fb4 <__hexnan+0xd4>
 801500e:	3f04      	subs	r7, #4
 8015010:	e7d0      	b.n	8014fb4 <__hexnan+0xd4>
 8015012:	2004      	movs	r0, #4
 8015014:	e7d5      	b.n	8014fc2 <__hexnan+0xe2>

08015016 <__ascii_mbtowc>:
 8015016:	b082      	sub	sp, #8
 8015018:	b901      	cbnz	r1, 801501c <__ascii_mbtowc+0x6>
 801501a:	a901      	add	r1, sp, #4
 801501c:	b142      	cbz	r2, 8015030 <__ascii_mbtowc+0x1a>
 801501e:	b14b      	cbz	r3, 8015034 <__ascii_mbtowc+0x1e>
 8015020:	7813      	ldrb	r3, [r2, #0]
 8015022:	600b      	str	r3, [r1, #0]
 8015024:	7812      	ldrb	r2, [r2, #0]
 8015026:	1e10      	subs	r0, r2, #0
 8015028:	bf18      	it	ne
 801502a:	2001      	movne	r0, #1
 801502c:	b002      	add	sp, #8
 801502e:	4770      	bx	lr
 8015030:	4610      	mov	r0, r2
 8015032:	e7fb      	b.n	801502c <__ascii_mbtowc+0x16>
 8015034:	f06f 0001 	mvn.w	r0, #1
 8015038:	e7f8      	b.n	801502c <__ascii_mbtowc+0x16>
	...

0801503c <_Balloc>:
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	69c6      	ldr	r6, [r0, #28]
 8015040:	4604      	mov	r4, r0
 8015042:	460d      	mov	r5, r1
 8015044:	b976      	cbnz	r6, 8015064 <_Balloc+0x28>
 8015046:	2010      	movs	r0, #16
 8015048:	f7fd f806 	bl	8012058 <malloc>
 801504c:	4602      	mov	r2, r0
 801504e:	61e0      	str	r0, [r4, #28]
 8015050:	b920      	cbnz	r0, 801505c <_Balloc+0x20>
 8015052:	4b18      	ldr	r3, [pc, #96]	@ (80150b4 <_Balloc+0x78>)
 8015054:	4818      	ldr	r0, [pc, #96]	@ (80150b8 <_Balloc+0x7c>)
 8015056:	216b      	movs	r1, #107	@ 0x6b
 8015058:	f7fe fde2 	bl	8013c20 <__assert_func>
 801505c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015060:	6006      	str	r6, [r0, #0]
 8015062:	60c6      	str	r6, [r0, #12]
 8015064:	69e6      	ldr	r6, [r4, #28]
 8015066:	68f3      	ldr	r3, [r6, #12]
 8015068:	b183      	cbz	r3, 801508c <_Balloc+0x50>
 801506a:	69e3      	ldr	r3, [r4, #28]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015072:	b9b8      	cbnz	r0, 80150a4 <_Balloc+0x68>
 8015074:	2101      	movs	r1, #1
 8015076:	fa01 f605 	lsl.w	r6, r1, r5
 801507a:	1d72      	adds	r2, r6, #5
 801507c:	0092      	lsls	r2, r2, #2
 801507e:	4620      	mov	r0, r4
 8015080:	f000 fec9 	bl	8015e16 <_calloc_r>
 8015084:	b160      	cbz	r0, 80150a0 <_Balloc+0x64>
 8015086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801508a:	e00e      	b.n	80150aa <_Balloc+0x6e>
 801508c:	2221      	movs	r2, #33	@ 0x21
 801508e:	2104      	movs	r1, #4
 8015090:	4620      	mov	r0, r4
 8015092:	f000 fec0 	bl	8015e16 <_calloc_r>
 8015096:	69e3      	ldr	r3, [r4, #28]
 8015098:	60f0      	str	r0, [r6, #12]
 801509a:	68db      	ldr	r3, [r3, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d1e4      	bne.n	801506a <_Balloc+0x2e>
 80150a0:	2000      	movs	r0, #0
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	6802      	ldr	r2, [r0, #0]
 80150a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150aa:	2300      	movs	r3, #0
 80150ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80150b0:	e7f7      	b.n	80150a2 <_Balloc+0x66>
 80150b2:	bf00      	nop
 80150b4:	08017b6a 	.word	0x08017b6a
 80150b8:	08017cf5 	.word	0x08017cf5

080150bc <_Bfree>:
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	69c6      	ldr	r6, [r0, #28]
 80150c0:	4605      	mov	r5, r0
 80150c2:	460c      	mov	r4, r1
 80150c4:	b976      	cbnz	r6, 80150e4 <_Bfree+0x28>
 80150c6:	2010      	movs	r0, #16
 80150c8:	f7fc ffc6 	bl	8012058 <malloc>
 80150cc:	4602      	mov	r2, r0
 80150ce:	61e8      	str	r0, [r5, #28]
 80150d0:	b920      	cbnz	r0, 80150dc <_Bfree+0x20>
 80150d2:	4b09      	ldr	r3, [pc, #36]	@ (80150f8 <_Bfree+0x3c>)
 80150d4:	4809      	ldr	r0, [pc, #36]	@ (80150fc <_Bfree+0x40>)
 80150d6:	218f      	movs	r1, #143	@ 0x8f
 80150d8:	f7fe fda2 	bl	8013c20 <__assert_func>
 80150dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150e0:	6006      	str	r6, [r0, #0]
 80150e2:	60c6      	str	r6, [r0, #12]
 80150e4:	b13c      	cbz	r4, 80150f6 <_Bfree+0x3a>
 80150e6:	69eb      	ldr	r3, [r5, #28]
 80150e8:	6862      	ldr	r2, [r4, #4]
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80150f0:	6021      	str	r1, [r4, #0]
 80150f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80150f6:	bd70      	pop	{r4, r5, r6, pc}
 80150f8:	08017b6a 	.word	0x08017b6a
 80150fc:	08017cf5 	.word	0x08017cf5

08015100 <__multadd>:
 8015100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015104:	690d      	ldr	r5, [r1, #16]
 8015106:	4607      	mov	r7, r0
 8015108:	460c      	mov	r4, r1
 801510a:	461e      	mov	r6, r3
 801510c:	f101 0c14 	add.w	ip, r1, #20
 8015110:	2000      	movs	r0, #0
 8015112:	f8dc 3000 	ldr.w	r3, [ip]
 8015116:	b299      	uxth	r1, r3
 8015118:	fb02 6101 	mla	r1, r2, r1, r6
 801511c:	0c1e      	lsrs	r6, r3, #16
 801511e:	0c0b      	lsrs	r3, r1, #16
 8015120:	fb02 3306 	mla	r3, r2, r6, r3
 8015124:	b289      	uxth	r1, r1
 8015126:	3001      	adds	r0, #1
 8015128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801512c:	4285      	cmp	r5, r0
 801512e:	f84c 1b04 	str.w	r1, [ip], #4
 8015132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015136:	dcec      	bgt.n	8015112 <__multadd+0x12>
 8015138:	b30e      	cbz	r6, 801517e <__multadd+0x7e>
 801513a:	68a3      	ldr	r3, [r4, #8]
 801513c:	42ab      	cmp	r3, r5
 801513e:	dc19      	bgt.n	8015174 <__multadd+0x74>
 8015140:	6861      	ldr	r1, [r4, #4]
 8015142:	4638      	mov	r0, r7
 8015144:	3101      	adds	r1, #1
 8015146:	f7ff ff79 	bl	801503c <_Balloc>
 801514a:	4680      	mov	r8, r0
 801514c:	b928      	cbnz	r0, 801515a <__multadd+0x5a>
 801514e:	4602      	mov	r2, r0
 8015150:	4b0c      	ldr	r3, [pc, #48]	@ (8015184 <__multadd+0x84>)
 8015152:	480d      	ldr	r0, [pc, #52]	@ (8015188 <__multadd+0x88>)
 8015154:	21ba      	movs	r1, #186	@ 0xba
 8015156:	f7fe fd63 	bl	8013c20 <__assert_func>
 801515a:	6922      	ldr	r2, [r4, #16]
 801515c:	3202      	adds	r2, #2
 801515e:	f104 010c 	add.w	r1, r4, #12
 8015162:	0092      	lsls	r2, r2, #2
 8015164:	300c      	adds	r0, #12
 8015166:	f7fe fd42 	bl	8013bee <memcpy>
 801516a:	4621      	mov	r1, r4
 801516c:	4638      	mov	r0, r7
 801516e:	f7ff ffa5 	bl	80150bc <_Bfree>
 8015172:	4644      	mov	r4, r8
 8015174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015178:	3501      	adds	r5, #1
 801517a:	615e      	str	r6, [r3, #20]
 801517c:	6125      	str	r5, [r4, #16]
 801517e:	4620      	mov	r0, r4
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	08017c84 	.word	0x08017c84
 8015188:	08017cf5 	.word	0x08017cf5

0801518c <__s2b>:
 801518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015190:	460c      	mov	r4, r1
 8015192:	4615      	mov	r5, r2
 8015194:	461f      	mov	r7, r3
 8015196:	2209      	movs	r2, #9
 8015198:	3308      	adds	r3, #8
 801519a:	4606      	mov	r6, r0
 801519c:	fb93 f3f2 	sdiv	r3, r3, r2
 80151a0:	2100      	movs	r1, #0
 80151a2:	2201      	movs	r2, #1
 80151a4:	429a      	cmp	r2, r3
 80151a6:	db09      	blt.n	80151bc <__s2b+0x30>
 80151a8:	4630      	mov	r0, r6
 80151aa:	f7ff ff47 	bl	801503c <_Balloc>
 80151ae:	b940      	cbnz	r0, 80151c2 <__s2b+0x36>
 80151b0:	4602      	mov	r2, r0
 80151b2:	4b19      	ldr	r3, [pc, #100]	@ (8015218 <__s2b+0x8c>)
 80151b4:	4819      	ldr	r0, [pc, #100]	@ (801521c <__s2b+0x90>)
 80151b6:	21d3      	movs	r1, #211	@ 0xd3
 80151b8:	f7fe fd32 	bl	8013c20 <__assert_func>
 80151bc:	0052      	lsls	r2, r2, #1
 80151be:	3101      	adds	r1, #1
 80151c0:	e7f0      	b.n	80151a4 <__s2b+0x18>
 80151c2:	9b08      	ldr	r3, [sp, #32]
 80151c4:	6143      	str	r3, [r0, #20]
 80151c6:	2d09      	cmp	r5, #9
 80151c8:	f04f 0301 	mov.w	r3, #1
 80151cc:	6103      	str	r3, [r0, #16]
 80151ce:	dd16      	ble.n	80151fe <__s2b+0x72>
 80151d0:	f104 0909 	add.w	r9, r4, #9
 80151d4:	46c8      	mov	r8, r9
 80151d6:	442c      	add	r4, r5
 80151d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80151dc:	4601      	mov	r1, r0
 80151de:	3b30      	subs	r3, #48	@ 0x30
 80151e0:	220a      	movs	r2, #10
 80151e2:	4630      	mov	r0, r6
 80151e4:	f7ff ff8c 	bl	8015100 <__multadd>
 80151e8:	45a0      	cmp	r8, r4
 80151ea:	d1f5      	bne.n	80151d8 <__s2b+0x4c>
 80151ec:	f1a5 0408 	sub.w	r4, r5, #8
 80151f0:	444c      	add	r4, r9
 80151f2:	1b2d      	subs	r5, r5, r4
 80151f4:	1963      	adds	r3, r4, r5
 80151f6:	42bb      	cmp	r3, r7
 80151f8:	db04      	blt.n	8015204 <__s2b+0x78>
 80151fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151fe:	340a      	adds	r4, #10
 8015200:	2509      	movs	r5, #9
 8015202:	e7f6      	b.n	80151f2 <__s2b+0x66>
 8015204:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015208:	4601      	mov	r1, r0
 801520a:	3b30      	subs	r3, #48	@ 0x30
 801520c:	220a      	movs	r2, #10
 801520e:	4630      	mov	r0, r6
 8015210:	f7ff ff76 	bl	8015100 <__multadd>
 8015214:	e7ee      	b.n	80151f4 <__s2b+0x68>
 8015216:	bf00      	nop
 8015218:	08017c84 	.word	0x08017c84
 801521c:	08017cf5 	.word	0x08017cf5

08015220 <__hi0bits>:
 8015220:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015224:	4603      	mov	r3, r0
 8015226:	bf36      	itet	cc
 8015228:	0403      	lslcc	r3, r0, #16
 801522a:	2000      	movcs	r0, #0
 801522c:	2010      	movcc	r0, #16
 801522e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015232:	bf3c      	itt	cc
 8015234:	021b      	lslcc	r3, r3, #8
 8015236:	3008      	addcc	r0, #8
 8015238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801523c:	bf3c      	itt	cc
 801523e:	011b      	lslcc	r3, r3, #4
 8015240:	3004      	addcc	r0, #4
 8015242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015246:	bf3c      	itt	cc
 8015248:	009b      	lslcc	r3, r3, #2
 801524a:	3002      	addcc	r0, #2
 801524c:	2b00      	cmp	r3, #0
 801524e:	db05      	blt.n	801525c <__hi0bits+0x3c>
 8015250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015254:	f100 0001 	add.w	r0, r0, #1
 8015258:	bf08      	it	eq
 801525a:	2020      	moveq	r0, #32
 801525c:	4770      	bx	lr

0801525e <__lo0bits>:
 801525e:	6803      	ldr	r3, [r0, #0]
 8015260:	4602      	mov	r2, r0
 8015262:	f013 0007 	ands.w	r0, r3, #7
 8015266:	d00b      	beq.n	8015280 <__lo0bits+0x22>
 8015268:	07d9      	lsls	r1, r3, #31
 801526a:	d421      	bmi.n	80152b0 <__lo0bits+0x52>
 801526c:	0798      	lsls	r0, r3, #30
 801526e:	bf49      	itett	mi
 8015270:	085b      	lsrmi	r3, r3, #1
 8015272:	089b      	lsrpl	r3, r3, #2
 8015274:	2001      	movmi	r0, #1
 8015276:	6013      	strmi	r3, [r2, #0]
 8015278:	bf5c      	itt	pl
 801527a:	6013      	strpl	r3, [r2, #0]
 801527c:	2002      	movpl	r0, #2
 801527e:	4770      	bx	lr
 8015280:	b299      	uxth	r1, r3
 8015282:	b909      	cbnz	r1, 8015288 <__lo0bits+0x2a>
 8015284:	0c1b      	lsrs	r3, r3, #16
 8015286:	2010      	movs	r0, #16
 8015288:	b2d9      	uxtb	r1, r3
 801528a:	b909      	cbnz	r1, 8015290 <__lo0bits+0x32>
 801528c:	3008      	adds	r0, #8
 801528e:	0a1b      	lsrs	r3, r3, #8
 8015290:	0719      	lsls	r1, r3, #28
 8015292:	bf04      	itt	eq
 8015294:	091b      	lsreq	r3, r3, #4
 8015296:	3004      	addeq	r0, #4
 8015298:	0799      	lsls	r1, r3, #30
 801529a:	bf04      	itt	eq
 801529c:	089b      	lsreq	r3, r3, #2
 801529e:	3002      	addeq	r0, #2
 80152a0:	07d9      	lsls	r1, r3, #31
 80152a2:	d403      	bmi.n	80152ac <__lo0bits+0x4e>
 80152a4:	085b      	lsrs	r3, r3, #1
 80152a6:	f100 0001 	add.w	r0, r0, #1
 80152aa:	d003      	beq.n	80152b4 <__lo0bits+0x56>
 80152ac:	6013      	str	r3, [r2, #0]
 80152ae:	4770      	bx	lr
 80152b0:	2000      	movs	r0, #0
 80152b2:	4770      	bx	lr
 80152b4:	2020      	movs	r0, #32
 80152b6:	4770      	bx	lr

080152b8 <__i2b>:
 80152b8:	b510      	push	{r4, lr}
 80152ba:	460c      	mov	r4, r1
 80152bc:	2101      	movs	r1, #1
 80152be:	f7ff febd 	bl	801503c <_Balloc>
 80152c2:	4602      	mov	r2, r0
 80152c4:	b928      	cbnz	r0, 80152d2 <__i2b+0x1a>
 80152c6:	4b05      	ldr	r3, [pc, #20]	@ (80152dc <__i2b+0x24>)
 80152c8:	4805      	ldr	r0, [pc, #20]	@ (80152e0 <__i2b+0x28>)
 80152ca:	f240 1145 	movw	r1, #325	@ 0x145
 80152ce:	f7fe fca7 	bl	8013c20 <__assert_func>
 80152d2:	2301      	movs	r3, #1
 80152d4:	6144      	str	r4, [r0, #20]
 80152d6:	6103      	str	r3, [r0, #16]
 80152d8:	bd10      	pop	{r4, pc}
 80152da:	bf00      	nop
 80152dc:	08017c84 	.word	0x08017c84
 80152e0:	08017cf5 	.word	0x08017cf5

080152e4 <__multiply>:
 80152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e8:	4617      	mov	r7, r2
 80152ea:	690a      	ldr	r2, [r1, #16]
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	bfa8      	it	ge
 80152f2:	463b      	movge	r3, r7
 80152f4:	4689      	mov	r9, r1
 80152f6:	bfa4      	itt	ge
 80152f8:	460f      	movge	r7, r1
 80152fa:	4699      	movge	r9, r3
 80152fc:	693d      	ldr	r5, [r7, #16]
 80152fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	6879      	ldr	r1, [r7, #4]
 8015306:	eb05 060a 	add.w	r6, r5, sl
 801530a:	42b3      	cmp	r3, r6
 801530c:	b085      	sub	sp, #20
 801530e:	bfb8      	it	lt
 8015310:	3101      	addlt	r1, #1
 8015312:	f7ff fe93 	bl	801503c <_Balloc>
 8015316:	b930      	cbnz	r0, 8015326 <__multiply+0x42>
 8015318:	4602      	mov	r2, r0
 801531a:	4b41      	ldr	r3, [pc, #260]	@ (8015420 <__multiply+0x13c>)
 801531c:	4841      	ldr	r0, [pc, #260]	@ (8015424 <__multiply+0x140>)
 801531e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015322:	f7fe fc7d 	bl	8013c20 <__assert_func>
 8015326:	f100 0414 	add.w	r4, r0, #20
 801532a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801532e:	4623      	mov	r3, r4
 8015330:	2200      	movs	r2, #0
 8015332:	4573      	cmp	r3, lr
 8015334:	d320      	bcc.n	8015378 <__multiply+0x94>
 8015336:	f107 0814 	add.w	r8, r7, #20
 801533a:	f109 0114 	add.w	r1, r9, #20
 801533e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015342:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015346:	9302      	str	r3, [sp, #8]
 8015348:	1beb      	subs	r3, r5, r7
 801534a:	3b15      	subs	r3, #21
 801534c:	f023 0303 	bic.w	r3, r3, #3
 8015350:	3304      	adds	r3, #4
 8015352:	3715      	adds	r7, #21
 8015354:	42bd      	cmp	r5, r7
 8015356:	bf38      	it	cc
 8015358:	2304      	movcc	r3, #4
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	9b02      	ldr	r3, [sp, #8]
 801535e:	9103      	str	r1, [sp, #12]
 8015360:	428b      	cmp	r3, r1
 8015362:	d80c      	bhi.n	801537e <__multiply+0x9a>
 8015364:	2e00      	cmp	r6, #0
 8015366:	dd03      	ble.n	8015370 <__multiply+0x8c>
 8015368:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801536c:	2b00      	cmp	r3, #0
 801536e:	d055      	beq.n	801541c <__multiply+0x138>
 8015370:	6106      	str	r6, [r0, #16]
 8015372:	b005      	add	sp, #20
 8015374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015378:	f843 2b04 	str.w	r2, [r3], #4
 801537c:	e7d9      	b.n	8015332 <__multiply+0x4e>
 801537e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015382:	f1ba 0f00 	cmp.w	sl, #0
 8015386:	d01f      	beq.n	80153c8 <__multiply+0xe4>
 8015388:	46c4      	mov	ip, r8
 801538a:	46a1      	mov	r9, r4
 801538c:	2700      	movs	r7, #0
 801538e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015392:	f8d9 3000 	ldr.w	r3, [r9]
 8015396:	fa1f fb82 	uxth.w	fp, r2
 801539a:	b29b      	uxth	r3, r3
 801539c:	fb0a 330b 	mla	r3, sl, fp, r3
 80153a0:	443b      	add	r3, r7
 80153a2:	f8d9 7000 	ldr.w	r7, [r9]
 80153a6:	0c12      	lsrs	r2, r2, #16
 80153a8:	0c3f      	lsrs	r7, r7, #16
 80153aa:	fb0a 7202 	mla	r2, sl, r2, r7
 80153ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153b8:	4565      	cmp	r5, ip
 80153ba:	f849 3b04 	str.w	r3, [r9], #4
 80153be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80153c2:	d8e4      	bhi.n	801538e <__multiply+0xaa>
 80153c4:	9b01      	ldr	r3, [sp, #4]
 80153c6:	50e7      	str	r7, [r4, r3]
 80153c8:	9b03      	ldr	r3, [sp, #12]
 80153ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80153ce:	3104      	adds	r1, #4
 80153d0:	f1b9 0f00 	cmp.w	r9, #0
 80153d4:	d020      	beq.n	8015418 <__multiply+0x134>
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	4647      	mov	r7, r8
 80153da:	46a4      	mov	ip, r4
 80153dc:	f04f 0a00 	mov.w	sl, #0
 80153e0:	f8b7 b000 	ldrh.w	fp, [r7]
 80153e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80153e8:	fb09 220b 	mla	r2, r9, fp, r2
 80153ec:	4452      	add	r2, sl
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153f4:	f84c 3b04 	str.w	r3, [ip], #4
 80153f8:	f857 3b04 	ldr.w	r3, [r7], #4
 80153fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015400:	f8bc 3000 	ldrh.w	r3, [ip]
 8015404:	fb09 330a 	mla	r3, r9, sl, r3
 8015408:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801540c:	42bd      	cmp	r5, r7
 801540e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015412:	d8e5      	bhi.n	80153e0 <__multiply+0xfc>
 8015414:	9a01      	ldr	r2, [sp, #4]
 8015416:	50a3      	str	r3, [r4, r2]
 8015418:	3404      	adds	r4, #4
 801541a:	e79f      	b.n	801535c <__multiply+0x78>
 801541c:	3e01      	subs	r6, #1
 801541e:	e7a1      	b.n	8015364 <__multiply+0x80>
 8015420:	08017c84 	.word	0x08017c84
 8015424:	08017cf5 	.word	0x08017cf5

08015428 <__pow5mult>:
 8015428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801542c:	4615      	mov	r5, r2
 801542e:	f012 0203 	ands.w	r2, r2, #3
 8015432:	4607      	mov	r7, r0
 8015434:	460e      	mov	r6, r1
 8015436:	d007      	beq.n	8015448 <__pow5mult+0x20>
 8015438:	4c25      	ldr	r4, [pc, #148]	@ (80154d0 <__pow5mult+0xa8>)
 801543a:	3a01      	subs	r2, #1
 801543c:	2300      	movs	r3, #0
 801543e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015442:	f7ff fe5d 	bl	8015100 <__multadd>
 8015446:	4606      	mov	r6, r0
 8015448:	10ad      	asrs	r5, r5, #2
 801544a:	d03d      	beq.n	80154c8 <__pow5mult+0xa0>
 801544c:	69fc      	ldr	r4, [r7, #28]
 801544e:	b97c      	cbnz	r4, 8015470 <__pow5mult+0x48>
 8015450:	2010      	movs	r0, #16
 8015452:	f7fc fe01 	bl	8012058 <malloc>
 8015456:	4602      	mov	r2, r0
 8015458:	61f8      	str	r0, [r7, #28]
 801545a:	b928      	cbnz	r0, 8015468 <__pow5mult+0x40>
 801545c:	4b1d      	ldr	r3, [pc, #116]	@ (80154d4 <__pow5mult+0xac>)
 801545e:	481e      	ldr	r0, [pc, #120]	@ (80154d8 <__pow5mult+0xb0>)
 8015460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015464:	f7fe fbdc 	bl	8013c20 <__assert_func>
 8015468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801546c:	6004      	str	r4, [r0, #0]
 801546e:	60c4      	str	r4, [r0, #12]
 8015470:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015478:	b94c      	cbnz	r4, 801548e <__pow5mult+0x66>
 801547a:	f240 2171 	movw	r1, #625	@ 0x271
 801547e:	4638      	mov	r0, r7
 8015480:	f7ff ff1a 	bl	80152b8 <__i2b>
 8015484:	2300      	movs	r3, #0
 8015486:	f8c8 0008 	str.w	r0, [r8, #8]
 801548a:	4604      	mov	r4, r0
 801548c:	6003      	str	r3, [r0, #0]
 801548e:	f04f 0900 	mov.w	r9, #0
 8015492:	07eb      	lsls	r3, r5, #31
 8015494:	d50a      	bpl.n	80154ac <__pow5mult+0x84>
 8015496:	4631      	mov	r1, r6
 8015498:	4622      	mov	r2, r4
 801549a:	4638      	mov	r0, r7
 801549c:	f7ff ff22 	bl	80152e4 <__multiply>
 80154a0:	4631      	mov	r1, r6
 80154a2:	4680      	mov	r8, r0
 80154a4:	4638      	mov	r0, r7
 80154a6:	f7ff fe09 	bl	80150bc <_Bfree>
 80154aa:	4646      	mov	r6, r8
 80154ac:	106d      	asrs	r5, r5, #1
 80154ae:	d00b      	beq.n	80154c8 <__pow5mult+0xa0>
 80154b0:	6820      	ldr	r0, [r4, #0]
 80154b2:	b938      	cbnz	r0, 80154c4 <__pow5mult+0x9c>
 80154b4:	4622      	mov	r2, r4
 80154b6:	4621      	mov	r1, r4
 80154b8:	4638      	mov	r0, r7
 80154ba:	f7ff ff13 	bl	80152e4 <__multiply>
 80154be:	6020      	str	r0, [r4, #0]
 80154c0:	f8c0 9000 	str.w	r9, [r0]
 80154c4:	4604      	mov	r4, r0
 80154c6:	e7e4      	b.n	8015492 <__pow5mult+0x6a>
 80154c8:	4630      	mov	r0, r6
 80154ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154ce:	bf00      	nop
 80154d0:	08017eb4 	.word	0x08017eb4
 80154d4:	08017b6a 	.word	0x08017b6a
 80154d8:	08017cf5 	.word	0x08017cf5

080154dc <__lshift>:
 80154dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154e0:	460c      	mov	r4, r1
 80154e2:	6849      	ldr	r1, [r1, #4]
 80154e4:	6923      	ldr	r3, [r4, #16]
 80154e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80154ea:	68a3      	ldr	r3, [r4, #8]
 80154ec:	4607      	mov	r7, r0
 80154ee:	4691      	mov	r9, r2
 80154f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80154f4:	f108 0601 	add.w	r6, r8, #1
 80154f8:	42b3      	cmp	r3, r6
 80154fa:	db0b      	blt.n	8015514 <__lshift+0x38>
 80154fc:	4638      	mov	r0, r7
 80154fe:	f7ff fd9d 	bl	801503c <_Balloc>
 8015502:	4605      	mov	r5, r0
 8015504:	b948      	cbnz	r0, 801551a <__lshift+0x3e>
 8015506:	4602      	mov	r2, r0
 8015508:	4b28      	ldr	r3, [pc, #160]	@ (80155ac <__lshift+0xd0>)
 801550a:	4829      	ldr	r0, [pc, #164]	@ (80155b0 <__lshift+0xd4>)
 801550c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015510:	f7fe fb86 	bl	8013c20 <__assert_func>
 8015514:	3101      	adds	r1, #1
 8015516:	005b      	lsls	r3, r3, #1
 8015518:	e7ee      	b.n	80154f8 <__lshift+0x1c>
 801551a:	2300      	movs	r3, #0
 801551c:	f100 0114 	add.w	r1, r0, #20
 8015520:	f100 0210 	add.w	r2, r0, #16
 8015524:	4618      	mov	r0, r3
 8015526:	4553      	cmp	r3, sl
 8015528:	db33      	blt.n	8015592 <__lshift+0xb6>
 801552a:	6920      	ldr	r0, [r4, #16]
 801552c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015530:	f104 0314 	add.w	r3, r4, #20
 8015534:	f019 091f 	ands.w	r9, r9, #31
 8015538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801553c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015540:	d02b      	beq.n	801559a <__lshift+0xbe>
 8015542:	f1c9 0e20 	rsb	lr, r9, #32
 8015546:	468a      	mov	sl, r1
 8015548:	2200      	movs	r2, #0
 801554a:	6818      	ldr	r0, [r3, #0]
 801554c:	fa00 f009 	lsl.w	r0, r0, r9
 8015550:	4310      	orrs	r0, r2
 8015552:	f84a 0b04 	str.w	r0, [sl], #4
 8015556:	f853 2b04 	ldr.w	r2, [r3], #4
 801555a:	459c      	cmp	ip, r3
 801555c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015560:	d8f3      	bhi.n	801554a <__lshift+0x6e>
 8015562:	ebac 0304 	sub.w	r3, ip, r4
 8015566:	3b15      	subs	r3, #21
 8015568:	f023 0303 	bic.w	r3, r3, #3
 801556c:	3304      	adds	r3, #4
 801556e:	f104 0015 	add.w	r0, r4, #21
 8015572:	4560      	cmp	r0, ip
 8015574:	bf88      	it	hi
 8015576:	2304      	movhi	r3, #4
 8015578:	50ca      	str	r2, [r1, r3]
 801557a:	b10a      	cbz	r2, 8015580 <__lshift+0xa4>
 801557c:	f108 0602 	add.w	r6, r8, #2
 8015580:	3e01      	subs	r6, #1
 8015582:	4638      	mov	r0, r7
 8015584:	612e      	str	r6, [r5, #16]
 8015586:	4621      	mov	r1, r4
 8015588:	f7ff fd98 	bl	80150bc <_Bfree>
 801558c:	4628      	mov	r0, r5
 801558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015592:	f842 0f04 	str.w	r0, [r2, #4]!
 8015596:	3301      	adds	r3, #1
 8015598:	e7c5      	b.n	8015526 <__lshift+0x4a>
 801559a:	3904      	subs	r1, #4
 801559c:	f853 2b04 	ldr.w	r2, [r3], #4
 80155a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80155a4:	459c      	cmp	ip, r3
 80155a6:	d8f9      	bhi.n	801559c <__lshift+0xc0>
 80155a8:	e7ea      	b.n	8015580 <__lshift+0xa4>
 80155aa:	bf00      	nop
 80155ac:	08017c84 	.word	0x08017c84
 80155b0:	08017cf5 	.word	0x08017cf5

080155b4 <__mcmp>:
 80155b4:	690a      	ldr	r2, [r1, #16]
 80155b6:	4603      	mov	r3, r0
 80155b8:	6900      	ldr	r0, [r0, #16]
 80155ba:	1a80      	subs	r0, r0, r2
 80155bc:	b530      	push	{r4, r5, lr}
 80155be:	d10e      	bne.n	80155de <__mcmp+0x2a>
 80155c0:	3314      	adds	r3, #20
 80155c2:	3114      	adds	r1, #20
 80155c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80155c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80155cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80155d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80155d4:	4295      	cmp	r5, r2
 80155d6:	d003      	beq.n	80155e0 <__mcmp+0x2c>
 80155d8:	d205      	bcs.n	80155e6 <__mcmp+0x32>
 80155da:	f04f 30ff 	mov.w	r0, #4294967295
 80155de:	bd30      	pop	{r4, r5, pc}
 80155e0:	42a3      	cmp	r3, r4
 80155e2:	d3f3      	bcc.n	80155cc <__mcmp+0x18>
 80155e4:	e7fb      	b.n	80155de <__mcmp+0x2a>
 80155e6:	2001      	movs	r0, #1
 80155e8:	e7f9      	b.n	80155de <__mcmp+0x2a>
	...

080155ec <__mdiff>:
 80155ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f0:	4689      	mov	r9, r1
 80155f2:	4606      	mov	r6, r0
 80155f4:	4611      	mov	r1, r2
 80155f6:	4648      	mov	r0, r9
 80155f8:	4614      	mov	r4, r2
 80155fa:	f7ff ffdb 	bl	80155b4 <__mcmp>
 80155fe:	1e05      	subs	r5, r0, #0
 8015600:	d112      	bne.n	8015628 <__mdiff+0x3c>
 8015602:	4629      	mov	r1, r5
 8015604:	4630      	mov	r0, r6
 8015606:	f7ff fd19 	bl	801503c <_Balloc>
 801560a:	4602      	mov	r2, r0
 801560c:	b928      	cbnz	r0, 801561a <__mdiff+0x2e>
 801560e:	4b3f      	ldr	r3, [pc, #252]	@ (801570c <__mdiff+0x120>)
 8015610:	f240 2137 	movw	r1, #567	@ 0x237
 8015614:	483e      	ldr	r0, [pc, #248]	@ (8015710 <__mdiff+0x124>)
 8015616:	f7fe fb03 	bl	8013c20 <__assert_func>
 801561a:	2301      	movs	r3, #1
 801561c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015620:	4610      	mov	r0, r2
 8015622:	b003      	add	sp, #12
 8015624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015628:	bfbc      	itt	lt
 801562a:	464b      	movlt	r3, r9
 801562c:	46a1      	movlt	r9, r4
 801562e:	4630      	mov	r0, r6
 8015630:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015634:	bfba      	itte	lt
 8015636:	461c      	movlt	r4, r3
 8015638:	2501      	movlt	r5, #1
 801563a:	2500      	movge	r5, #0
 801563c:	f7ff fcfe 	bl	801503c <_Balloc>
 8015640:	4602      	mov	r2, r0
 8015642:	b918      	cbnz	r0, 801564c <__mdiff+0x60>
 8015644:	4b31      	ldr	r3, [pc, #196]	@ (801570c <__mdiff+0x120>)
 8015646:	f240 2145 	movw	r1, #581	@ 0x245
 801564a:	e7e3      	b.n	8015614 <__mdiff+0x28>
 801564c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015650:	6926      	ldr	r6, [r4, #16]
 8015652:	60c5      	str	r5, [r0, #12]
 8015654:	f109 0310 	add.w	r3, r9, #16
 8015658:	f109 0514 	add.w	r5, r9, #20
 801565c:	f104 0e14 	add.w	lr, r4, #20
 8015660:	f100 0b14 	add.w	fp, r0, #20
 8015664:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015668:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	46d9      	mov	r9, fp
 8015670:	f04f 0c00 	mov.w	ip, #0
 8015674:	9b01      	ldr	r3, [sp, #4]
 8015676:	f85e 0b04 	ldr.w	r0, [lr], #4
 801567a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	fa1f f38a 	uxth.w	r3, sl
 8015684:	4619      	mov	r1, r3
 8015686:	b283      	uxth	r3, r0
 8015688:	1acb      	subs	r3, r1, r3
 801568a:	0c00      	lsrs	r0, r0, #16
 801568c:	4463      	add	r3, ip
 801568e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015692:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015696:	b29b      	uxth	r3, r3
 8015698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801569c:	4576      	cmp	r6, lr
 801569e:	f849 3b04 	str.w	r3, [r9], #4
 80156a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80156a6:	d8e5      	bhi.n	8015674 <__mdiff+0x88>
 80156a8:	1b33      	subs	r3, r6, r4
 80156aa:	3b15      	subs	r3, #21
 80156ac:	f023 0303 	bic.w	r3, r3, #3
 80156b0:	3415      	adds	r4, #21
 80156b2:	3304      	adds	r3, #4
 80156b4:	42a6      	cmp	r6, r4
 80156b6:	bf38      	it	cc
 80156b8:	2304      	movcc	r3, #4
 80156ba:	441d      	add	r5, r3
 80156bc:	445b      	add	r3, fp
 80156be:	461e      	mov	r6, r3
 80156c0:	462c      	mov	r4, r5
 80156c2:	4544      	cmp	r4, r8
 80156c4:	d30e      	bcc.n	80156e4 <__mdiff+0xf8>
 80156c6:	f108 0103 	add.w	r1, r8, #3
 80156ca:	1b49      	subs	r1, r1, r5
 80156cc:	f021 0103 	bic.w	r1, r1, #3
 80156d0:	3d03      	subs	r5, #3
 80156d2:	45a8      	cmp	r8, r5
 80156d4:	bf38      	it	cc
 80156d6:	2100      	movcc	r1, #0
 80156d8:	440b      	add	r3, r1
 80156da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80156de:	b191      	cbz	r1, 8015706 <__mdiff+0x11a>
 80156e0:	6117      	str	r7, [r2, #16]
 80156e2:	e79d      	b.n	8015620 <__mdiff+0x34>
 80156e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80156e8:	46e6      	mov	lr, ip
 80156ea:	0c08      	lsrs	r0, r1, #16
 80156ec:	fa1c fc81 	uxtah	ip, ip, r1
 80156f0:	4471      	add	r1, lr
 80156f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80156f6:	b289      	uxth	r1, r1
 80156f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80156fc:	f846 1b04 	str.w	r1, [r6], #4
 8015700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015704:	e7dd      	b.n	80156c2 <__mdiff+0xd6>
 8015706:	3f01      	subs	r7, #1
 8015708:	e7e7      	b.n	80156da <__mdiff+0xee>
 801570a:	bf00      	nop
 801570c:	08017c84 	.word	0x08017c84
 8015710:	08017cf5 	.word	0x08017cf5

08015714 <__ulp>:
 8015714:	b082      	sub	sp, #8
 8015716:	ed8d 0b00 	vstr	d0, [sp]
 801571a:	9a01      	ldr	r2, [sp, #4]
 801571c:	4b0f      	ldr	r3, [pc, #60]	@ (801575c <__ulp+0x48>)
 801571e:	4013      	ands	r3, r2
 8015720:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015724:	2b00      	cmp	r3, #0
 8015726:	dc08      	bgt.n	801573a <__ulp+0x26>
 8015728:	425b      	negs	r3, r3
 801572a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801572e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015732:	da04      	bge.n	801573e <__ulp+0x2a>
 8015734:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015738:	4113      	asrs	r3, r2
 801573a:	2200      	movs	r2, #0
 801573c:	e008      	b.n	8015750 <__ulp+0x3c>
 801573e:	f1a2 0314 	sub.w	r3, r2, #20
 8015742:	2b1e      	cmp	r3, #30
 8015744:	bfda      	itte	le
 8015746:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801574a:	40da      	lsrle	r2, r3
 801574c:	2201      	movgt	r2, #1
 801574e:	2300      	movs	r3, #0
 8015750:	4619      	mov	r1, r3
 8015752:	4610      	mov	r0, r2
 8015754:	ec41 0b10 	vmov	d0, r0, r1
 8015758:	b002      	add	sp, #8
 801575a:	4770      	bx	lr
 801575c:	7ff00000 	.word	0x7ff00000

08015760 <__b2d>:
 8015760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015764:	6906      	ldr	r6, [r0, #16]
 8015766:	f100 0814 	add.w	r8, r0, #20
 801576a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801576e:	1f37      	subs	r7, r6, #4
 8015770:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015774:	4610      	mov	r0, r2
 8015776:	f7ff fd53 	bl	8015220 <__hi0bits>
 801577a:	f1c0 0320 	rsb	r3, r0, #32
 801577e:	280a      	cmp	r0, #10
 8015780:	600b      	str	r3, [r1, #0]
 8015782:	491b      	ldr	r1, [pc, #108]	@ (80157f0 <__b2d+0x90>)
 8015784:	dc15      	bgt.n	80157b2 <__b2d+0x52>
 8015786:	f1c0 0c0b 	rsb	ip, r0, #11
 801578a:	fa22 f30c 	lsr.w	r3, r2, ip
 801578e:	45b8      	cmp	r8, r7
 8015790:	ea43 0501 	orr.w	r5, r3, r1
 8015794:	bf34      	ite	cc
 8015796:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801579a:	2300      	movcs	r3, #0
 801579c:	3015      	adds	r0, #21
 801579e:	fa02 f000 	lsl.w	r0, r2, r0
 80157a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80157a6:	4303      	orrs	r3, r0
 80157a8:	461c      	mov	r4, r3
 80157aa:	ec45 4b10 	vmov	d0, r4, r5
 80157ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b2:	45b8      	cmp	r8, r7
 80157b4:	bf3a      	itte	cc
 80157b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80157ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80157be:	2300      	movcs	r3, #0
 80157c0:	380b      	subs	r0, #11
 80157c2:	d012      	beq.n	80157ea <__b2d+0x8a>
 80157c4:	f1c0 0120 	rsb	r1, r0, #32
 80157c8:	fa23 f401 	lsr.w	r4, r3, r1
 80157cc:	4082      	lsls	r2, r0
 80157ce:	4322      	orrs	r2, r4
 80157d0:	4547      	cmp	r7, r8
 80157d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80157d6:	bf8c      	ite	hi
 80157d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80157dc:	2200      	movls	r2, #0
 80157de:	4083      	lsls	r3, r0
 80157e0:	40ca      	lsrs	r2, r1
 80157e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80157e6:	4313      	orrs	r3, r2
 80157e8:	e7de      	b.n	80157a8 <__b2d+0x48>
 80157ea:	ea42 0501 	orr.w	r5, r2, r1
 80157ee:	e7db      	b.n	80157a8 <__b2d+0x48>
 80157f0:	3ff00000 	.word	0x3ff00000

080157f4 <__d2b>:
 80157f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80157f8:	460f      	mov	r7, r1
 80157fa:	2101      	movs	r1, #1
 80157fc:	ec59 8b10 	vmov	r8, r9, d0
 8015800:	4616      	mov	r6, r2
 8015802:	f7ff fc1b 	bl	801503c <_Balloc>
 8015806:	4604      	mov	r4, r0
 8015808:	b930      	cbnz	r0, 8015818 <__d2b+0x24>
 801580a:	4602      	mov	r2, r0
 801580c:	4b23      	ldr	r3, [pc, #140]	@ (801589c <__d2b+0xa8>)
 801580e:	4824      	ldr	r0, [pc, #144]	@ (80158a0 <__d2b+0xac>)
 8015810:	f240 310f 	movw	r1, #783	@ 0x30f
 8015814:	f7fe fa04 	bl	8013c20 <__assert_func>
 8015818:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801581c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015820:	b10d      	cbz	r5, 8015826 <__d2b+0x32>
 8015822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015826:	9301      	str	r3, [sp, #4]
 8015828:	f1b8 0300 	subs.w	r3, r8, #0
 801582c:	d023      	beq.n	8015876 <__d2b+0x82>
 801582e:	4668      	mov	r0, sp
 8015830:	9300      	str	r3, [sp, #0]
 8015832:	f7ff fd14 	bl	801525e <__lo0bits>
 8015836:	e9dd 1200 	ldrd	r1, r2, [sp]
 801583a:	b1d0      	cbz	r0, 8015872 <__d2b+0x7e>
 801583c:	f1c0 0320 	rsb	r3, r0, #32
 8015840:	fa02 f303 	lsl.w	r3, r2, r3
 8015844:	430b      	orrs	r3, r1
 8015846:	40c2      	lsrs	r2, r0
 8015848:	6163      	str	r3, [r4, #20]
 801584a:	9201      	str	r2, [sp, #4]
 801584c:	9b01      	ldr	r3, [sp, #4]
 801584e:	61a3      	str	r3, [r4, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	bf0c      	ite	eq
 8015854:	2201      	moveq	r2, #1
 8015856:	2202      	movne	r2, #2
 8015858:	6122      	str	r2, [r4, #16]
 801585a:	b1a5      	cbz	r5, 8015886 <__d2b+0x92>
 801585c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015860:	4405      	add	r5, r0
 8015862:	603d      	str	r5, [r7, #0]
 8015864:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015868:	6030      	str	r0, [r6, #0]
 801586a:	4620      	mov	r0, r4
 801586c:	b003      	add	sp, #12
 801586e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015872:	6161      	str	r1, [r4, #20]
 8015874:	e7ea      	b.n	801584c <__d2b+0x58>
 8015876:	a801      	add	r0, sp, #4
 8015878:	f7ff fcf1 	bl	801525e <__lo0bits>
 801587c:	9b01      	ldr	r3, [sp, #4]
 801587e:	6163      	str	r3, [r4, #20]
 8015880:	3020      	adds	r0, #32
 8015882:	2201      	movs	r2, #1
 8015884:	e7e8      	b.n	8015858 <__d2b+0x64>
 8015886:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801588a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801588e:	6038      	str	r0, [r7, #0]
 8015890:	6918      	ldr	r0, [r3, #16]
 8015892:	f7ff fcc5 	bl	8015220 <__hi0bits>
 8015896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801589a:	e7e5      	b.n	8015868 <__d2b+0x74>
 801589c:	08017c84 	.word	0x08017c84
 80158a0:	08017cf5 	.word	0x08017cf5

080158a4 <__ratio>:
 80158a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	b085      	sub	sp, #20
 80158aa:	e9cd 1000 	strd	r1, r0, [sp]
 80158ae:	a902      	add	r1, sp, #8
 80158b0:	f7ff ff56 	bl	8015760 <__b2d>
 80158b4:	9800      	ldr	r0, [sp, #0]
 80158b6:	a903      	add	r1, sp, #12
 80158b8:	ec55 4b10 	vmov	r4, r5, d0
 80158bc:	f7ff ff50 	bl	8015760 <__b2d>
 80158c0:	9b01      	ldr	r3, [sp, #4]
 80158c2:	6919      	ldr	r1, [r3, #16]
 80158c4:	9b00      	ldr	r3, [sp, #0]
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	1ac9      	subs	r1, r1, r3
 80158ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80158ce:	1a9b      	subs	r3, r3, r2
 80158d0:	ec5b ab10 	vmov	sl, fp, d0
 80158d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80158d8:	2b00      	cmp	r3, #0
 80158da:	bfce      	itee	gt
 80158dc:	462a      	movgt	r2, r5
 80158de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80158e2:	465a      	movle	r2, fp
 80158e4:	462f      	mov	r7, r5
 80158e6:	46d9      	mov	r9, fp
 80158e8:	bfcc      	ite	gt
 80158ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80158ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80158f2:	464b      	mov	r3, r9
 80158f4:	4652      	mov	r2, sl
 80158f6:	4620      	mov	r0, r4
 80158f8:	4639      	mov	r1, r7
 80158fa:	f7ea ffdf 	bl	80008bc <__aeabi_ddiv>
 80158fe:	ec41 0b10 	vmov	d0, r0, r1
 8015902:	b005      	add	sp, #20
 8015904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015908 <__copybits>:
 8015908:	3901      	subs	r1, #1
 801590a:	b570      	push	{r4, r5, r6, lr}
 801590c:	1149      	asrs	r1, r1, #5
 801590e:	6914      	ldr	r4, [r2, #16]
 8015910:	3101      	adds	r1, #1
 8015912:	f102 0314 	add.w	r3, r2, #20
 8015916:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801591a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801591e:	1f05      	subs	r5, r0, #4
 8015920:	42a3      	cmp	r3, r4
 8015922:	d30c      	bcc.n	801593e <__copybits+0x36>
 8015924:	1aa3      	subs	r3, r4, r2
 8015926:	3b11      	subs	r3, #17
 8015928:	f023 0303 	bic.w	r3, r3, #3
 801592c:	3211      	adds	r2, #17
 801592e:	42a2      	cmp	r2, r4
 8015930:	bf88      	it	hi
 8015932:	2300      	movhi	r3, #0
 8015934:	4418      	add	r0, r3
 8015936:	2300      	movs	r3, #0
 8015938:	4288      	cmp	r0, r1
 801593a:	d305      	bcc.n	8015948 <__copybits+0x40>
 801593c:	bd70      	pop	{r4, r5, r6, pc}
 801593e:	f853 6b04 	ldr.w	r6, [r3], #4
 8015942:	f845 6f04 	str.w	r6, [r5, #4]!
 8015946:	e7eb      	b.n	8015920 <__copybits+0x18>
 8015948:	f840 3b04 	str.w	r3, [r0], #4
 801594c:	e7f4      	b.n	8015938 <__copybits+0x30>

0801594e <__any_on>:
 801594e:	f100 0214 	add.w	r2, r0, #20
 8015952:	6900      	ldr	r0, [r0, #16]
 8015954:	114b      	asrs	r3, r1, #5
 8015956:	4298      	cmp	r0, r3
 8015958:	b510      	push	{r4, lr}
 801595a:	db11      	blt.n	8015980 <__any_on+0x32>
 801595c:	dd0a      	ble.n	8015974 <__any_on+0x26>
 801595e:	f011 011f 	ands.w	r1, r1, #31
 8015962:	d007      	beq.n	8015974 <__any_on+0x26>
 8015964:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015968:	fa24 f001 	lsr.w	r0, r4, r1
 801596c:	fa00 f101 	lsl.w	r1, r0, r1
 8015970:	428c      	cmp	r4, r1
 8015972:	d10b      	bne.n	801598c <__any_on+0x3e>
 8015974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015978:	4293      	cmp	r3, r2
 801597a:	d803      	bhi.n	8015984 <__any_on+0x36>
 801597c:	2000      	movs	r0, #0
 801597e:	bd10      	pop	{r4, pc}
 8015980:	4603      	mov	r3, r0
 8015982:	e7f7      	b.n	8015974 <__any_on+0x26>
 8015984:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015988:	2900      	cmp	r1, #0
 801598a:	d0f5      	beq.n	8015978 <__any_on+0x2a>
 801598c:	2001      	movs	r0, #1
 801598e:	e7f6      	b.n	801597e <__any_on+0x30>

08015990 <__ascii_wctomb>:
 8015990:	4603      	mov	r3, r0
 8015992:	4608      	mov	r0, r1
 8015994:	b141      	cbz	r1, 80159a8 <__ascii_wctomb+0x18>
 8015996:	2aff      	cmp	r2, #255	@ 0xff
 8015998:	d904      	bls.n	80159a4 <__ascii_wctomb+0x14>
 801599a:	228a      	movs	r2, #138	@ 0x8a
 801599c:	601a      	str	r2, [r3, #0]
 801599e:	f04f 30ff 	mov.w	r0, #4294967295
 80159a2:	4770      	bx	lr
 80159a4:	700a      	strb	r2, [r1, #0]
 80159a6:	2001      	movs	r0, #1
 80159a8:	4770      	bx	lr

080159aa <__ssputs_r>:
 80159aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159ae:	688e      	ldr	r6, [r1, #8]
 80159b0:	461f      	mov	r7, r3
 80159b2:	42be      	cmp	r6, r7
 80159b4:	680b      	ldr	r3, [r1, #0]
 80159b6:	4682      	mov	sl, r0
 80159b8:	460c      	mov	r4, r1
 80159ba:	4690      	mov	r8, r2
 80159bc:	d82d      	bhi.n	8015a1a <__ssputs_r+0x70>
 80159be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159c2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80159c6:	d026      	beq.n	8015a16 <__ssputs_r+0x6c>
 80159c8:	6965      	ldr	r5, [r4, #20]
 80159ca:	6909      	ldr	r1, [r1, #16]
 80159cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159d0:	eba3 0901 	sub.w	r9, r3, r1
 80159d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159d8:	1c7b      	adds	r3, r7, #1
 80159da:	444b      	add	r3, r9
 80159dc:	106d      	asrs	r5, r5, #1
 80159de:	429d      	cmp	r5, r3
 80159e0:	bf38      	it	cc
 80159e2:	461d      	movcc	r5, r3
 80159e4:	0553      	lsls	r3, r2, #21
 80159e6:	d527      	bpl.n	8015a38 <__ssputs_r+0x8e>
 80159e8:	4629      	mov	r1, r5
 80159ea:	f7fc fb67 	bl	80120bc <_malloc_r>
 80159ee:	4606      	mov	r6, r0
 80159f0:	b360      	cbz	r0, 8015a4c <__ssputs_r+0xa2>
 80159f2:	6921      	ldr	r1, [r4, #16]
 80159f4:	464a      	mov	r2, r9
 80159f6:	f7fe f8fa 	bl	8013bee <memcpy>
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a04:	81a3      	strh	r3, [r4, #12]
 8015a06:	6126      	str	r6, [r4, #16]
 8015a08:	6165      	str	r5, [r4, #20]
 8015a0a:	444e      	add	r6, r9
 8015a0c:	eba5 0509 	sub.w	r5, r5, r9
 8015a10:	6026      	str	r6, [r4, #0]
 8015a12:	60a5      	str	r5, [r4, #8]
 8015a14:	463e      	mov	r6, r7
 8015a16:	42be      	cmp	r6, r7
 8015a18:	d900      	bls.n	8015a1c <__ssputs_r+0x72>
 8015a1a:	463e      	mov	r6, r7
 8015a1c:	6820      	ldr	r0, [r4, #0]
 8015a1e:	4632      	mov	r2, r6
 8015a20:	4641      	mov	r1, r8
 8015a22:	f000 f9d7 	bl	8015dd4 <memmove>
 8015a26:	68a3      	ldr	r3, [r4, #8]
 8015a28:	1b9b      	subs	r3, r3, r6
 8015a2a:	60a3      	str	r3, [r4, #8]
 8015a2c:	6823      	ldr	r3, [r4, #0]
 8015a2e:	4433      	add	r3, r6
 8015a30:	6023      	str	r3, [r4, #0]
 8015a32:	2000      	movs	r0, #0
 8015a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a38:	462a      	mov	r2, r5
 8015a3a:	f000 fa00 	bl	8015e3e <_realloc_r>
 8015a3e:	4606      	mov	r6, r0
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d1e0      	bne.n	8015a06 <__ssputs_r+0x5c>
 8015a44:	6921      	ldr	r1, [r4, #16]
 8015a46:	4650      	mov	r0, sl
 8015a48:	f7fe ff62 	bl	8014910 <_free_r>
 8015a4c:	230c      	movs	r3, #12
 8015a4e:	f8ca 3000 	str.w	r3, [sl]
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a58:	81a3      	strh	r3, [r4, #12]
 8015a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5e:	e7e9      	b.n	8015a34 <__ssputs_r+0x8a>

08015a60 <_svfiprintf_r>:
 8015a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a64:	4698      	mov	r8, r3
 8015a66:	898b      	ldrh	r3, [r1, #12]
 8015a68:	061b      	lsls	r3, r3, #24
 8015a6a:	b09d      	sub	sp, #116	@ 0x74
 8015a6c:	4607      	mov	r7, r0
 8015a6e:	460d      	mov	r5, r1
 8015a70:	4614      	mov	r4, r2
 8015a72:	d510      	bpl.n	8015a96 <_svfiprintf_r+0x36>
 8015a74:	690b      	ldr	r3, [r1, #16]
 8015a76:	b973      	cbnz	r3, 8015a96 <_svfiprintf_r+0x36>
 8015a78:	2140      	movs	r1, #64	@ 0x40
 8015a7a:	f7fc fb1f 	bl	80120bc <_malloc_r>
 8015a7e:	6028      	str	r0, [r5, #0]
 8015a80:	6128      	str	r0, [r5, #16]
 8015a82:	b930      	cbnz	r0, 8015a92 <_svfiprintf_r+0x32>
 8015a84:	230c      	movs	r3, #12
 8015a86:	603b      	str	r3, [r7, #0]
 8015a88:	f04f 30ff 	mov.w	r0, #4294967295
 8015a8c:	b01d      	add	sp, #116	@ 0x74
 8015a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a92:	2340      	movs	r3, #64	@ 0x40
 8015a94:	616b      	str	r3, [r5, #20]
 8015a96:	2300      	movs	r3, #0
 8015a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a9a:	2320      	movs	r3, #32
 8015a9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015aa4:	2330      	movs	r3, #48	@ 0x30
 8015aa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015c44 <_svfiprintf_r+0x1e4>
 8015aaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015aae:	f04f 0901 	mov.w	r9, #1
 8015ab2:	4623      	mov	r3, r4
 8015ab4:	469a      	mov	sl, r3
 8015ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aba:	b10a      	cbz	r2, 8015ac0 <_svfiprintf_r+0x60>
 8015abc:	2a25      	cmp	r2, #37	@ 0x25
 8015abe:	d1f9      	bne.n	8015ab4 <_svfiprintf_r+0x54>
 8015ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8015ac4:	d00b      	beq.n	8015ade <_svfiprintf_r+0x7e>
 8015ac6:	465b      	mov	r3, fp
 8015ac8:	4622      	mov	r2, r4
 8015aca:	4629      	mov	r1, r5
 8015acc:	4638      	mov	r0, r7
 8015ace:	f7ff ff6c 	bl	80159aa <__ssputs_r>
 8015ad2:	3001      	adds	r0, #1
 8015ad4:	f000 80a7 	beq.w	8015c26 <_svfiprintf_r+0x1c6>
 8015ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ada:	445a      	add	r2, fp
 8015adc:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ade:	f89a 3000 	ldrb.w	r3, [sl]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f000 809f 	beq.w	8015c26 <_svfiprintf_r+0x1c6>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	f04f 32ff 	mov.w	r2, #4294967295
 8015aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015af2:	f10a 0a01 	add.w	sl, sl, #1
 8015af6:	9304      	str	r3, [sp, #16]
 8015af8:	9307      	str	r3, [sp, #28]
 8015afa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015afe:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b00:	4654      	mov	r4, sl
 8015b02:	2205      	movs	r2, #5
 8015b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b08:	484e      	ldr	r0, [pc, #312]	@ (8015c44 <_svfiprintf_r+0x1e4>)
 8015b0a:	f7ea fb99 	bl	8000240 <memchr>
 8015b0e:	9a04      	ldr	r2, [sp, #16]
 8015b10:	b9d8      	cbnz	r0, 8015b4a <_svfiprintf_r+0xea>
 8015b12:	06d0      	lsls	r0, r2, #27
 8015b14:	bf44      	itt	mi
 8015b16:	2320      	movmi	r3, #32
 8015b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b1c:	0711      	lsls	r1, r2, #28
 8015b1e:	bf44      	itt	mi
 8015b20:	232b      	movmi	r3, #43	@ 0x2b
 8015b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015b26:	f89a 3000 	ldrb.w	r3, [sl]
 8015b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b2c:	d015      	beq.n	8015b5a <_svfiprintf_r+0xfa>
 8015b2e:	9a07      	ldr	r2, [sp, #28]
 8015b30:	4654      	mov	r4, sl
 8015b32:	2000      	movs	r0, #0
 8015b34:	f04f 0c0a 	mov.w	ip, #10
 8015b38:	4621      	mov	r1, r4
 8015b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b3e:	3b30      	subs	r3, #48	@ 0x30
 8015b40:	2b09      	cmp	r3, #9
 8015b42:	d94b      	bls.n	8015bdc <_svfiprintf_r+0x17c>
 8015b44:	b1b0      	cbz	r0, 8015b74 <_svfiprintf_r+0x114>
 8015b46:	9207      	str	r2, [sp, #28]
 8015b48:	e014      	b.n	8015b74 <_svfiprintf_r+0x114>
 8015b4a:	eba0 0308 	sub.w	r3, r0, r8
 8015b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8015b52:	4313      	orrs	r3, r2
 8015b54:	9304      	str	r3, [sp, #16]
 8015b56:	46a2      	mov	sl, r4
 8015b58:	e7d2      	b.n	8015b00 <_svfiprintf_r+0xa0>
 8015b5a:	9b03      	ldr	r3, [sp, #12]
 8015b5c:	1d19      	adds	r1, r3, #4
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	9103      	str	r1, [sp, #12]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	bfbb      	ittet	lt
 8015b66:	425b      	neglt	r3, r3
 8015b68:	f042 0202 	orrlt.w	r2, r2, #2
 8015b6c:	9307      	strge	r3, [sp, #28]
 8015b6e:	9307      	strlt	r3, [sp, #28]
 8015b70:	bfb8      	it	lt
 8015b72:	9204      	strlt	r2, [sp, #16]
 8015b74:	7823      	ldrb	r3, [r4, #0]
 8015b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b78:	d10a      	bne.n	8015b90 <_svfiprintf_r+0x130>
 8015b7a:	7863      	ldrb	r3, [r4, #1]
 8015b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b7e:	d132      	bne.n	8015be6 <_svfiprintf_r+0x186>
 8015b80:	9b03      	ldr	r3, [sp, #12]
 8015b82:	1d1a      	adds	r2, r3, #4
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	9203      	str	r2, [sp, #12]
 8015b88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b8c:	3402      	adds	r4, #2
 8015b8e:	9305      	str	r3, [sp, #20]
 8015b90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015c54 <_svfiprintf_r+0x1f4>
 8015b94:	7821      	ldrb	r1, [r4, #0]
 8015b96:	2203      	movs	r2, #3
 8015b98:	4650      	mov	r0, sl
 8015b9a:	f7ea fb51 	bl	8000240 <memchr>
 8015b9e:	b138      	cbz	r0, 8015bb0 <_svfiprintf_r+0x150>
 8015ba0:	9b04      	ldr	r3, [sp, #16]
 8015ba2:	eba0 000a 	sub.w	r0, r0, sl
 8015ba6:	2240      	movs	r2, #64	@ 0x40
 8015ba8:	4082      	lsls	r2, r0
 8015baa:	4313      	orrs	r3, r2
 8015bac:	3401      	adds	r4, #1
 8015bae:	9304      	str	r3, [sp, #16]
 8015bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb4:	4824      	ldr	r0, [pc, #144]	@ (8015c48 <_svfiprintf_r+0x1e8>)
 8015bb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015bba:	2206      	movs	r2, #6
 8015bbc:	f7ea fb40 	bl	8000240 <memchr>
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d036      	beq.n	8015c32 <_svfiprintf_r+0x1d2>
 8015bc4:	4b21      	ldr	r3, [pc, #132]	@ (8015c4c <_svfiprintf_r+0x1ec>)
 8015bc6:	bb1b      	cbnz	r3, 8015c10 <_svfiprintf_r+0x1b0>
 8015bc8:	9b03      	ldr	r3, [sp, #12]
 8015bca:	3307      	adds	r3, #7
 8015bcc:	f023 0307 	bic.w	r3, r3, #7
 8015bd0:	3308      	adds	r3, #8
 8015bd2:	9303      	str	r3, [sp, #12]
 8015bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bd6:	4433      	add	r3, r6
 8015bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bda:	e76a      	b.n	8015ab2 <_svfiprintf_r+0x52>
 8015bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015be0:	460c      	mov	r4, r1
 8015be2:	2001      	movs	r0, #1
 8015be4:	e7a8      	b.n	8015b38 <_svfiprintf_r+0xd8>
 8015be6:	2300      	movs	r3, #0
 8015be8:	3401      	adds	r4, #1
 8015bea:	9305      	str	r3, [sp, #20]
 8015bec:	4619      	mov	r1, r3
 8015bee:	f04f 0c0a 	mov.w	ip, #10
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bf8:	3a30      	subs	r2, #48	@ 0x30
 8015bfa:	2a09      	cmp	r2, #9
 8015bfc:	d903      	bls.n	8015c06 <_svfiprintf_r+0x1a6>
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d0c6      	beq.n	8015b90 <_svfiprintf_r+0x130>
 8015c02:	9105      	str	r1, [sp, #20]
 8015c04:	e7c4      	b.n	8015b90 <_svfiprintf_r+0x130>
 8015c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e7f0      	b.n	8015bf2 <_svfiprintf_r+0x192>
 8015c10:	ab03      	add	r3, sp, #12
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	462a      	mov	r2, r5
 8015c16:	4b0e      	ldr	r3, [pc, #56]	@ (8015c50 <_svfiprintf_r+0x1f0>)
 8015c18:	a904      	add	r1, sp, #16
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	f7fd fa0c 	bl	8013038 <_printf_float>
 8015c20:	1c42      	adds	r2, r0, #1
 8015c22:	4606      	mov	r6, r0
 8015c24:	d1d6      	bne.n	8015bd4 <_svfiprintf_r+0x174>
 8015c26:	89ab      	ldrh	r3, [r5, #12]
 8015c28:	065b      	lsls	r3, r3, #25
 8015c2a:	f53f af2d 	bmi.w	8015a88 <_svfiprintf_r+0x28>
 8015c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c30:	e72c      	b.n	8015a8c <_svfiprintf_r+0x2c>
 8015c32:	ab03      	add	r3, sp, #12
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	462a      	mov	r2, r5
 8015c38:	4b05      	ldr	r3, [pc, #20]	@ (8015c50 <_svfiprintf_r+0x1f0>)
 8015c3a:	a904      	add	r1, sp, #16
 8015c3c:	4638      	mov	r0, r7
 8015c3e:	f7fd fc93 	bl	8013568 <_printf_i>
 8015c42:	e7ed      	b.n	8015c20 <_svfiprintf_r+0x1c0>
 8015c44:	08017d4e 	.word	0x08017d4e
 8015c48:	08017d58 	.word	0x08017d58
 8015c4c:	08013039 	.word	0x08013039
 8015c50:	080159ab 	.word	0x080159ab
 8015c54:	08017d54 	.word	0x08017d54

08015c58 <__sflush_r>:
 8015c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c60:	0716      	lsls	r6, r2, #28
 8015c62:	4605      	mov	r5, r0
 8015c64:	460c      	mov	r4, r1
 8015c66:	d454      	bmi.n	8015d12 <__sflush_r+0xba>
 8015c68:	684b      	ldr	r3, [r1, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	dc02      	bgt.n	8015c74 <__sflush_r+0x1c>
 8015c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	dd48      	ble.n	8015d06 <__sflush_r+0xae>
 8015c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015c76:	2e00      	cmp	r6, #0
 8015c78:	d045      	beq.n	8015d06 <__sflush_r+0xae>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015c80:	682f      	ldr	r7, [r5, #0]
 8015c82:	6a21      	ldr	r1, [r4, #32]
 8015c84:	602b      	str	r3, [r5, #0]
 8015c86:	d030      	beq.n	8015cea <__sflush_r+0x92>
 8015c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015c8a:	89a3      	ldrh	r3, [r4, #12]
 8015c8c:	0759      	lsls	r1, r3, #29
 8015c8e:	d505      	bpl.n	8015c9c <__sflush_r+0x44>
 8015c90:	6863      	ldr	r3, [r4, #4]
 8015c92:	1ad2      	subs	r2, r2, r3
 8015c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015c96:	b10b      	cbz	r3, 8015c9c <__sflush_r+0x44>
 8015c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015c9a:	1ad2      	subs	r2, r2, r3
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015ca0:	6a21      	ldr	r1, [r4, #32]
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	47b0      	blx	r6
 8015ca6:	1c43      	adds	r3, r0, #1
 8015ca8:	89a3      	ldrh	r3, [r4, #12]
 8015caa:	d106      	bne.n	8015cba <__sflush_r+0x62>
 8015cac:	6829      	ldr	r1, [r5, #0]
 8015cae:	291d      	cmp	r1, #29
 8015cb0:	d82b      	bhi.n	8015d0a <__sflush_r+0xb2>
 8015cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8015d5c <__sflush_r+0x104>)
 8015cb4:	40ca      	lsrs	r2, r1
 8015cb6:	07d6      	lsls	r6, r2, #31
 8015cb8:	d527      	bpl.n	8015d0a <__sflush_r+0xb2>
 8015cba:	2200      	movs	r2, #0
 8015cbc:	6062      	str	r2, [r4, #4]
 8015cbe:	04d9      	lsls	r1, r3, #19
 8015cc0:	6922      	ldr	r2, [r4, #16]
 8015cc2:	6022      	str	r2, [r4, #0]
 8015cc4:	d504      	bpl.n	8015cd0 <__sflush_r+0x78>
 8015cc6:	1c42      	adds	r2, r0, #1
 8015cc8:	d101      	bne.n	8015cce <__sflush_r+0x76>
 8015cca:	682b      	ldr	r3, [r5, #0]
 8015ccc:	b903      	cbnz	r3, 8015cd0 <__sflush_r+0x78>
 8015cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8015cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015cd2:	602f      	str	r7, [r5, #0]
 8015cd4:	b1b9      	cbz	r1, 8015d06 <__sflush_r+0xae>
 8015cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015cda:	4299      	cmp	r1, r3
 8015cdc:	d002      	beq.n	8015ce4 <__sflush_r+0x8c>
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f7fe fe16 	bl	8014910 <_free_r>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ce8:	e00d      	b.n	8015d06 <__sflush_r+0xae>
 8015cea:	2301      	movs	r3, #1
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b0      	blx	r6
 8015cf0:	4602      	mov	r2, r0
 8015cf2:	1c50      	adds	r0, r2, #1
 8015cf4:	d1c9      	bne.n	8015c8a <__sflush_r+0x32>
 8015cf6:	682b      	ldr	r3, [r5, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d0c6      	beq.n	8015c8a <__sflush_r+0x32>
 8015cfc:	2b1d      	cmp	r3, #29
 8015cfe:	d001      	beq.n	8015d04 <__sflush_r+0xac>
 8015d00:	2b16      	cmp	r3, #22
 8015d02:	d11e      	bne.n	8015d42 <__sflush_r+0xea>
 8015d04:	602f      	str	r7, [r5, #0]
 8015d06:	2000      	movs	r0, #0
 8015d08:	e022      	b.n	8015d50 <__sflush_r+0xf8>
 8015d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d0e:	b21b      	sxth	r3, r3
 8015d10:	e01b      	b.n	8015d4a <__sflush_r+0xf2>
 8015d12:	690f      	ldr	r7, [r1, #16]
 8015d14:	2f00      	cmp	r7, #0
 8015d16:	d0f6      	beq.n	8015d06 <__sflush_r+0xae>
 8015d18:	0793      	lsls	r3, r2, #30
 8015d1a:	680e      	ldr	r6, [r1, #0]
 8015d1c:	bf08      	it	eq
 8015d1e:	694b      	ldreq	r3, [r1, #20]
 8015d20:	600f      	str	r7, [r1, #0]
 8015d22:	bf18      	it	ne
 8015d24:	2300      	movne	r3, #0
 8015d26:	eba6 0807 	sub.w	r8, r6, r7
 8015d2a:	608b      	str	r3, [r1, #8]
 8015d2c:	f1b8 0f00 	cmp.w	r8, #0
 8015d30:	dde9      	ble.n	8015d06 <__sflush_r+0xae>
 8015d32:	6a21      	ldr	r1, [r4, #32]
 8015d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015d36:	4643      	mov	r3, r8
 8015d38:	463a      	mov	r2, r7
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	47b0      	blx	r6
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	dc08      	bgt.n	8015d54 <__sflush_r+0xfc>
 8015d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d4a:	81a3      	strh	r3, [r4, #12]
 8015d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d54:	4407      	add	r7, r0
 8015d56:	eba8 0800 	sub.w	r8, r8, r0
 8015d5a:	e7e7      	b.n	8015d2c <__sflush_r+0xd4>
 8015d5c:	20400001 	.word	0x20400001

08015d60 <_fflush_r>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	690b      	ldr	r3, [r1, #16]
 8015d64:	4605      	mov	r5, r0
 8015d66:	460c      	mov	r4, r1
 8015d68:	b913      	cbnz	r3, 8015d70 <_fflush_r+0x10>
 8015d6a:	2500      	movs	r5, #0
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
 8015d70:	b118      	cbz	r0, 8015d7a <_fflush_r+0x1a>
 8015d72:	6a03      	ldr	r3, [r0, #32]
 8015d74:	b90b      	cbnz	r3, 8015d7a <_fflush_r+0x1a>
 8015d76:	f7fd fda1 	bl	80138bc <__sinit>
 8015d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d0f3      	beq.n	8015d6a <_fflush_r+0xa>
 8015d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015d84:	07d0      	lsls	r0, r2, #31
 8015d86:	d404      	bmi.n	8015d92 <_fflush_r+0x32>
 8015d88:	0599      	lsls	r1, r3, #22
 8015d8a:	d402      	bmi.n	8015d92 <_fflush_r+0x32>
 8015d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d8e:	f7fd ff2c 	bl	8013bea <__retarget_lock_acquire_recursive>
 8015d92:	4628      	mov	r0, r5
 8015d94:	4621      	mov	r1, r4
 8015d96:	f7ff ff5f 	bl	8015c58 <__sflush_r>
 8015d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015d9c:	07da      	lsls	r2, r3, #31
 8015d9e:	4605      	mov	r5, r0
 8015da0:	d4e4      	bmi.n	8015d6c <_fflush_r+0xc>
 8015da2:	89a3      	ldrh	r3, [r4, #12]
 8015da4:	059b      	lsls	r3, r3, #22
 8015da6:	d4e1      	bmi.n	8015d6c <_fflush_r+0xc>
 8015da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015daa:	f7fd ff1f 	bl	8013bec <__retarget_lock_release_recursive>
 8015dae:	e7dd      	b.n	8015d6c <_fflush_r+0xc>

08015db0 <fiprintf>:
 8015db0:	b40e      	push	{r1, r2, r3}
 8015db2:	b503      	push	{r0, r1, lr}
 8015db4:	4601      	mov	r1, r0
 8015db6:	ab03      	add	r3, sp, #12
 8015db8:	4805      	ldr	r0, [pc, #20]	@ (8015dd0 <fiprintf+0x20>)
 8015dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dbe:	6800      	ldr	r0, [r0, #0]
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	f000 f893 	bl	8015eec <_vfiprintf_r>
 8015dc6:	b002      	add	sp, #8
 8015dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dcc:	b003      	add	sp, #12
 8015dce:	4770      	bx	lr
 8015dd0:	20000284 	.word	0x20000284

08015dd4 <memmove>:
 8015dd4:	4288      	cmp	r0, r1
 8015dd6:	b510      	push	{r4, lr}
 8015dd8:	eb01 0402 	add.w	r4, r1, r2
 8015ddc:	d902      	bls.n	8015de4 <memmove+0x10>
 8015dde:	4284      	cmp	r4, r0
 8015de0:	4623      	mov	r3, r4
 8015de2:	d807      	bhi.n	8015df4 <memmove+0x20>
 8015de4:	1e43      	subs	r3, r0, #1
 8015de6:	42a1      	cmp	r1, r4
 8015de8:	d008      	beq.n	8015dfc <memmove+0x28>
 8015dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015df2:	e7f8      	b.n	8015de6 <memmove+0x12>
 8015df4:	4402      	add	r2, r0
 8015df6:	4601      	mov	r1, r0
 8015df8:	428a      	cmp	r2, r1
 8015dfa:	d100      	bne.n	8015dfe <memmove+0x2a>
 8015dfc:	bd10      	pop	{r4, pc}
 8015dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015e06:	e7f7      	b.n	8015df8 <memmove+0x24>

08015e08 <abort>:
 8015e08:	b508      	push	{r3, lr}
 8015e0a:	2006      	movs	r0, #6
 8015e0c:	f000 fa42 	bl	8016294 <raise>
 8015e10:	2001      	movs	r0, #1
 8015e12:	f7ef fe31 	bl	8005a78 <_exit>

08015e16 <_calloc_r>:
 8015e16:	b570      	push	{r4, r5, r6, lr}
 8015e18:	fba1 5402 	umull	r5, r4, r1, r2
 8015e1c:	b934      	cbnz	r4, 8015e2c <_calloc_r+0x16>
 8015e1e:	4629      	mov	r1, r5
 8015e20:	f7fc f94c 	bl	80120bc <_malloc_r>
 8015e24:	4606      	mov	r6, r0
 8015e26:	b928      	cbnz	r0, 8015e34 <_calloc_r+0x1e>
 8015e28:	4630      	mov	r0, r6
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	220c      	movs	r2, #12
 8015e2e:	6002      	str	r2, [r0, #0]
 8015e30:	2600      	movs	r6, #0
 8015e32:	e7f9      	b.n	8015e28 <_calloc_r+0x12>
 8015e34:	462a      	mov	r2, r5
 8015e36:	4621      	mov	r1, r4
 8015e38:	f7fd fddb 	bl	80139f2 <memset>
 8015e3c:	e7f4      	b.n	8015e28 <_calloc_r+0x12>

08015e3e <_realloc_r>:
 8015e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e42:	4607      	mov	r7, r0
 8015e44:	4614      	mov	r4, r2
 8015e46:	460d      	mov	r5, r1
 8015e48:	b921      	cbnz	r1, 8015e54 <_realloc_r+0x16>
 8015e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e4e:	4611      	mov	r1, r2
 8015e50:	f7fc b934 	b.w	80120bc <_malloc_r>
 8015e54:	b92a      	cbnz	r2, 8015e62 <_realloc_r+0x24>
 8015e56:	f7fe fd5b 	bl	8014910 <_free_r>
 8015e5a:	4625      	mov	r5, r4
 8015e5c:	4628      	mov	r0, r5
 8015e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e62:	f000 fa33 	bl	80162cc <_malloc_usable_size_r>
 8015e66:	4284      	cmp	r4, r0
 8015e68:	4606      	mov	r6, r0
 8015e6a:	d802      	bhi.n	8015e72 <_realloc_r+0x34>
 8015e6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e70:	d8f4      	bhi.n	8015e5c <_realloc_r+0x1e>
 8015e72:	4621      	mov	r1, r4
 8015e74:	4638      	mov	r0, r7
 8015e76:	f7fc f921 	bl	80120bc <_malloc_r>
 8015e7a:	4680      	mov	r8, r0
 8015e7c:	b908      	cbnz	r0, 8015e82 <_realloc_r+0x44>
 8015e7e:	4645      	mov	r5, r8
 8015e80:	e7ec      	b.n	8015e5c <_realloc_r+0x1e>
 8015e82:	42b4      	cmp	r4, r6
 8015e84:	4622      	mov	r2, r4
 8015e86:	4629      	mov	r1, r5
 8015e88:	bf28      	it	cs
 8015e8a:	4632      	movcs	r2, r6
 8015e8c:	f7fd feaf 	bl	8013bee <memcpy>
 8015e90:	4629      	mov	r1, r5
 8015e92:	4638      	mov	r0, r7
 8015e94:	f7fe fd3c 	bl	8014910 <_free_r>
 8015e98:	e7f1      	b.n	8015e7e <_realloc_r+0x40>

08015e9a <__sfputc_r>:
 8015e9a:	6893      	ldr	r3, [r2, #8]
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	b410      	push	{r4}
 8015ea2:	6093      	str	r3, [r2, #8]
 8015ea4:	da08      	bge.n	8015eb8 <__sfputc_r+0x1e>
 8015ea6:	6994      	ldr	r4, [r2, #24]
 8015ea8:	42a3      	cmp	r3, r4
 8015eaa:	db01      	blt.n	8015eb0 <__sfputc_r+0x16>
 8015eac:	290a      	cmp	r1, #10
 8015eae:	d103      	bne.n	8015eb8 <__sfputc_r+0x1e>
 8015eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eb4:	f000 b932 	b.w	801611c <__swbuf_r>
 8015eb8:	6813      	ldr	r3, [r2, #0]
 8015eba:	1c58      	adds	r0, r3, #1
 8015ebc:	6010      	str	r0, [r2, #0]
 8015ebe:	7019      	strb	r1, [r3, #0]
 8015ec0:	4608      	mov	r0, r1
 8015ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <__sfputs_r>:
 8015ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eca:	4606      	mov	r6, r0
 8015ecc:	460f      	mov	r7, r1
 8015ece:	4614      	mov	r4, r2
 8015ed0:	18d5      	adds	r5, r2, r3
 8015ed2:	42ac      	cmp	r4, r5
 8015ed4:	d101      	bne.n	8015eda <__sfputs_r+0x12>
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	e007      	b.n	8015eea <__sfputs_r+0x22>
 8015eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ede:	463a      	mov	r2, r7
 8015ee0:	4630      	mov	r0, r6
 8015ee2:	f7ff ffda 	bl	8015e9a <__sfputc_r>
 8015ee6:	1c43      	adds	r3, r0, #1
 8015ee8:	d1f3      	bne.n	8015ed2 <__sfputs_r+0xa>
 8015eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015eec <_vfiprintf_r>:
 8015eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef0:	460d      	mov	r5, r1
 8015ef2:	b09d      	sub	sp, #116	@ 0x74
 8015ef4:	4614      	mov	r4, r2
 8015ef6:	4698      	mov	r8, r3
 8015ef8:	4606      	mov	r6, r0
 8015efa:	b118      	cbz	r0, 8015f04 <_vfiprintf_r+0x18>
 8015efc:	6a03      	ldr	r3, [r0, #32]
 8015efe:	b90b      	cbnz	r3, 8015f04 <_vfiprintf_r+0x18>
 8015f00:	f7fd fcdc 	bl	80138bc <__sinit>
 8015f04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f06:	07d9      	lsls	r1, r3, #31
 8015f08:	d405      	bmi.n	8015f16 <_vfiprintf_r+0x2a>
 8015f0a:	89ab      	ldrh	r3, [r5, #12]
 8015f0c:	059a      	lsls	r2, r3, #22
 8015f0e:	d402      	bmi.n	8015f16 <_vfiprintf_r+0x2a>
 8015f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f12:	f7fd fe6a 	bl	8013bea <__retarget_lock_acquire_recursive>
 8015f16:	89ab      	ldrh	r3, [r5, #12]
 8015f18:	071b      	lsls	r3, r3, #28
 8015f1a:	d501      	bpl.n	8015f20 <_vfiprintf_r+0x34>
 8015f1c:	692b      	ldr	r3, [r5, #16]
 8015f1e:	b99b      	cbnz	r3, 8015f48 <_vfiprintf_r+0x5c>
 8015f20:	4629      	mov	r1, r5
 8015f22:	4630      	mov	r0, r6
 8015f24:	f000 f938 	bl	8016198 <__swsetup_r>
 8015f28:	b170      	cbz	r0, 8015f48 <_vfiprintf_r+0x5c>
 8015f2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f2c:	07dc      	lsls	r4, r3, #31
 8015f2e:	d504      	bpl.n	8015f3a <_vfiprintf_r+0x4e>
 8015f30:	f04f 30ff 	mov.w	r0, #4294967295
 8015f34:	b01d      	add	sp, #116	@ 0x74
 8015f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3a:	89ab      	ldrh	r3, [r5, #12]
 8015f3c:	0598      	lsls	r0, r3, #22
 8015f3e:	d4f7      	bmi.n	8015f30 <_vfiprintf_r+0x44>
 8015f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f42:	f7fd fe53 	bl	8013bec <__retarget_lock_release_recursive>
 8015f46:	e7f3      	b.n	8015f30 <_vfiprintf_r+0x44>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f4c:	2320      	movs	r3, #32
 8015f4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f56:	2330      	movs	r3, #48	@ 0x30
 8015f58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016108 <_vfiprintf_r+0x21c>
 8015f5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f60:	f04f 0901 	mov.w	r9, #1
 8015f64:	4623      	mov	r3, r4
 8015f66:	469a      	mov	sl, r3
 8015f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f6c:	b10a      	cbz	r2, 8015f72 <_vfiprintf_r+0x86>
 8015f6e:	2a25      	cmp	r2, #37	@ 0x25
 8015f70:	d1f9      	bne.n	8015f66 <_vfiprintf_r+0x7a>
 8015f72:	ebba 0b04 	subs.w	fp, sl, r4
 8015f76:	d00b      	beq.n	8015f90 <_vfiprintf_r+0xa4>
 8015f78:	465b      	mov	r3, fp
 8015f7a:	4622      	mov	r2, r4
 8015f7c:	4629      	mov	r1, r5
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f7ff ffa2 	bl	8015ec8 <__sfputs_r>
 8015f84:	3001      	adds	r0, #1
 8015f86:	f000 80a7 	beq.w	80160d8 <_vfiprintf_r+0x1ec>
 8015f8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f8c:	445a      	add	r2, fp
 8015f8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f90:	f89a 3000 	ldrb.w	r3, [sl]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 809f 	beq.w	80160d8 <_vfiprintf_r+0x1ec>
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8015fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fa4:	f10a 0a01 	add.w	sl, sl, #1
 8015fa8:	9304      	str	r3, [sp, #16]
 8015faa:	9307      	str	r3, [sp, #28]
 8015fac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fb2:	4654      	mov	r4, sl
 8015fb4:	2205      	movs	r2, #5
 8015fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fba:	4853      	ldr	r0, [pc, #332]	@ (8016108 <_vfiprintf_r+0x21c>)
 8015fbc:	f7ea f940 	bl	8000240 <memchr>
 8015fc0:	9a04      	ldr	r2, [sp, #16]
 8015fc2:	b9d8      	cbnz	r0, 8015ffc <_vfiprintf_r+0x110>
 8015fc4:	06d1      	lsls	r1, r2, #27
 8015fc6:	bf44      	itt	mi
 8015fc8:	2320      	movmi	r3, #32
 8015fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fce:	0713      	lsls	r3, r2, #28
 8015fd0:	bf44      	itt	mi
 8015fd2:	232b      	movmi	r3, #43	@ 0x2b
 8015fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8015fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fde:	d015      	beq.n	801600c <_vfiprintf_r+0x120>
 8015fe0:	9a07      	ldr	r2, [sp, #28]
 8015fe2:	4654      	mov	r4, sl
 8015fe4:	2000      	movs	r0, #0
 8015fe6:	f04f 0c0a 	mov.w	ip, #10
 8015fea:	4621      	mov	r1, r4
 8015fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ff0:	3b30      	subs	r3, #48	@ 0x30
 8015ff2:	2b09      	cmp	r3, #9
 8015ff4:	d94b      	bls.n	801608e <_vfiprintf_r+0x1a2>
 8015ff6:	b1b0      	cbz	r0, 8016026 <_vfiprintf_r+0x13a>
 8015ff8:	9207      	str	r2, [sp, #28]
 8015ffa:	e014      	b.n	8016026 <_vfiprintf_r+0x13a>
 8015ffc:	eba0 0308 	sub.w	r3, r0, r8
 8016000:	fa09 f303 	lsl.w	r3, r9, r3
 8016004:	4313      	orrs	r3, r2
 8016006:	9304      	str	r3, [sp, #16]
 8016008:	46a2      	mov	sl, r4
 801600a:	e7d2      	b.n	8015fb2 <_vfiprintf_r+0xc6>
 801600c:	9b03      	ldr	r3, [sp, #12]
 801600e:	1d19      	adds	r1, r3, #4
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	9103      	str	r1, [sp, #12]
 8016014:	2b00      	cmp	r3, #0
 8016016:	bfbb      	ittet	lt
 8016018:	425b      	neglt	r3, r3
 801601a:	f042 0202 	orrlt.w	r2, r2, #2
 801601e:	9307      	strge	r3, [sp, #28]
 8016020:	9307      	strlt	r3, [sp, #28]
 8016022:	bfb8      	it	lt
 8016024:	9204      	strlt	r2, [sp, #16]
 8016026:	7823      	ldrb	r3, [r4, #0]
 8016028:	2b2e      	cmp	r3, #46	@ 0x2e
 801602a:	d10a      	bne.n	8016042 <_vfiprintf_r+0x156>
 801602c:	7863      	ldrb	r3, [r4, #1]
 801602e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016030:	d132      	bne.n	8016098 <_vfiprintf_r+0x1ac>
 8016032:	9b03      	ldr	r3, [sp, #12]
 8016034:	1d1a      	adds	r2, r3, #4
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	9203      	str	r2, [sp, #12]
 801603a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801603e:	3402      	adds	r4, #2
 8016040:	9305      	str	r3, [sp, #20]
 8016042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016118 <_vfiprintf_r+0x22c>
 8016046:	7821      	ldrb	r1, [r4, #0]
 8016048:	2203      	movs	r2, #3
 801604a:	4650      	mov	r0, sl
 801604c:	f7ea f8f8 	bl	8000240 <memchr>
 8016050:	b138      	cbz	r0, 8016062 <_vfiprintf_r+0x176>
 8016052:	9b04      	ldr	r3, [sp, #16]
 8016054:	eba0 000a 	sub.w	r0, r0, sl
 8016058:	2240      	movs	r2, #64	@ 0x40
 801605a:	4082      	lsls	r2, r0
 801605c:	4313      	orrs	r3, r2
 801605e:	3401      	adds	r4, #1
 8016060:	9304      	str	r3, [sp, #16]
 8016062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016066:	4829      	ldr	r0, [pc, #164]	@ (801610c <_vfiprintf_r+0x220>)
 8016068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801606c:	2206      	movs	r2, #6
 801606e:	f7ea f8e7 	bl	8000240 <memchr>
 8016072:	2800      	cmp	r0, #0
 8016074:	d03f      	beq.n	80160f6 <_vfiprintf_r+0x20a>
 8016076:	4b26      	ldr	r3, [pc, #152]	@ (8016110 <_vfiprintf_r+0x224>)
 8016078:	bb1b      	cbnz	r3, 80160c2 <_vfiprintf_r+0x1d6>
 801607a:	9b03      	ldr	r3, [sp, #12]
 801607c:	3307      	adds	r3, #7
 801607e:	f023 0307 	bic.w	r3, r3, #7
 8016082:	3308      	adds	r3, #8
 8016084:	9303      	str	r3, [sp, #12]
 8016086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016088:	443b      	add	r3, r7
 801608a:	9309      	str	r3, [sp, #36]	@ 0x24
 801608c:	e76a      	b.n	8015f64 <_vfiprintf_r+0x78>
 801608e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016092:	460c      	mov	r4, r1
 8016094:	2001      	movs	r0, #1
 8016096:	e7a8      	b.n	8015fea <_vfiprintf_r+0xfe>
 8016098:	2300      	movs	r3, #0
 801609a:	3401      	adds	r4, #1
 801609c:	9305      	str	r3, [sp, #20]
 801609e:	4619      	mov	r1, r3
 80160a0:	f04f 0c0a 	mov.w	ip, #10
 80160a4:	4620      	mov	r0, r4
 80160a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160aa:	3a30      	subs	r2, #48	@ 0x30
 80160ac:	2a09      	cmp	r2, #9
 80160ae:	d903      	bls.n	80160b8 <_vfiprintf_r+0x1cc>
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d0c6      	beq.n	8016042 <_vfiprintf_r+0x156>
 80160b4:	9105      	str	r1, [sp, #20]
 80160b6:	e7c4      	b.n	8016042 <_vfiprintf_r+0x156>
 80160b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80160bc:	4604      	mov	r4, r0
 80160be:	2301      	movs	r3, #1
 80160c0:	e7f0      	b.n	80160a4 <_vfiprintf_r+0x1b8>
 80160c2:	ab03      	add	r3, sp, #12
 80160c4:	9300      	str	r3, [sp, #0]
 80160c6:	462a      	mov	r2, r5
 80160c8:	4b12      	ldr	r3, [pc, #72]	@ (8016114 <_vfiprintf_r+0x228>)
 80160ca:	a904      	add	r1, sp, #16
 80160cc:	4630      	mov	r0, r6
 80160ce:	f7fc ffb3 	bl	8013038 <_printf_float>
 80160d2:	4607      	mov	r7, r0
 80160d4:	1c78      	adds	r0, r7, #1
 80160d6:	d1d6      	bne.n	8016086 <_vfiprintf_r+0x19a>
 80160d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80160da:	07d9      	lsls	r1, r3, #31
 80160dc:	d405      	bmi.n	80160ea <_vfiprintf_r+0x1fe>
 80160de:	89ab      	ldrh	r3, [r5, #12]
 80160e0:	059a      	lsls	r2, r3, #22
 80160e2:	d402      	bmi.n	80160ea <_vfiprintf_r+0x1fe>
 80160e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80160e6:	f7fd fd81 	bl	8013bec <__retarget_lock_release_recursive>
 80160ea:	89ab      	ldrh	r3, [r5, #12]
 80160ec:	065b      	lsls	r3, r3, #25
 80160ee:	f53f af1f 	bmi.w	8015f30 <_vfiprintf_r+0x44>
 80160f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160f4:	e71e      	b.n	8015f34 <_vfiprintf_r+0x48>
 80160f6:	ab03      	add	r3, sp, #12
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	462a      	mov	r2, r5
 80160fc:	4b05      	ldr	r3, [pc, #20]	@ (8016114 <_vfiprintf_r+0x228>)
 80160fe:	a904      	add	r1, sp, #16
 8016100:	4630      	mov	r0, r6
 8016102:	f7fd fa31 	bl	8013568 <_printf_i>
 8016106:	e7e4      	b.n	80160d2 <_vfiprintf_r+0x1e6>
 8016108:	08017d4e 	.word	0x08017d4e
 801610c:	08017d58 	.word	0x08017d58
 8016110:	08013039 	.word	0x08013039
 8016114:	08015ec9 	.word	0x08015ec9
 8016118:	08017d54 	.word	0x08017d54

0801611c <__swbuf_r>:
 801611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801611e:	460e      	mov	r6, r1
 8016120:	4614      	mov	r4, r2
 8016122:	4605      	mov	r5, r0
 8016124:	b118      	cbz	r0, 801612e <__swbuf_r+0x12>
 8016126:	6a03      	ldr	r3, [r0, #32]
 8016128:	b90b      	cbnz	r3, 801612e <__swbuf_r+0x12>
 801612a:	f7fd fbc7 	bl	80138bc <__sinit>
 801612e:	69a3      	ldr	r3, [r4, #24]
 8016130:	60a3      	str	r3, [r4, #8]
 8016132:	89a3      	ldrh	r3, [r4, #12]
 8016134:	071a      	lsls	r2, r3, #28
 8016136:	d501      	bpl.n	801613c <__swbuf_r+0x20>
 8016138:	6923      	ldr	r3, [r4, #16]
 801613a:	b943      	cbnz	r3, 801614e <__swbuf_r+0x32>
 801613c:	4621      	mov	r1, r4
 801613e:	4628      	mov	r0, r5
 8016140:	f000 f82a 	bl	8016198 <__swsetup_r>
 8016144:	b118      	cbz	r0, 801614e <__swbuf_r+0x32>
 8016146:	f04f 37ff 	mov.w	r7, #4294967295
 801614a:	4638      	mov	r0, r7
 801614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	6922      	ldr	r2, [r4, #16]
 8016152:	1a98      	subs	r0, r3, r2
 8016154:	6963      	ldr	r3, [r4, #20]
 8016156:	b2f6      	uxtb	r6, r6
 8016158:	4283      	cmp	r3, r0
 801615a:	4637      	mov	r7, r6
 801615c:	dc05      	bgt.n	801616a <__swbuf_r+0x4e>
 801615e:	4621      	mov	r1, r4
 8016160:	4628      	mov	r0, r5
 8016162:	f7ff fdfd 	bl	8015d60 <_fflush_r>
 8016166:	2800      	cmp	r0, #0
 8016168:	d1ed      	bne.n	8016146 <__swbuf_r+0x2a>
 801616a:	68a3      	ldr	r3, [r4, #8]
 801616c:	3b01      	subs	r3, #1
 801616e:	60a3      	str	r3, [r4, #8]
 8016170:	6823      	ldr	r3, [r4, #0]
 8016172:	1c5a      	adds	r2, r3, #1
 8016174:	6022      	str	r2, [r4, #0]
 8016176:	701e      	strb	r6, [r3, #0]
 8016178:	6962      	ldr	r2, [r4, #20]
 801617a:	1c43      	adds	r3, r0, #1
 801617c:	429a      	cmp	r2, r3
 801617e:	d004      	beq.n	801618a <__swbuf_r+0x6e>
 8016180:	89a3      	ldrh	r3, [r4, #12]
 8016182:	07db      	lsls	r3, r3, #31
 8016184:	d5e1      	bpl.n	801614a <__swbuf_r+0x2e>
 8016186:	2e0a      	cmp	r6, #10
 8016188:	d1df      	bne.n	801614a <__swbuf_r+0x2e>
 801618a:	4621      	mov	r1, r4
 801618c:	4628      	mov	r0, r5
 801618e:	f7ff fde7 	bl	8015d60 <_fflush_r>
 8016192:	2800      	cmp	r0, #0
 8016194:	d0d9      	beq.n	801614a <__swbuf_r+0x2e>
 8016196:	e7d6      	b.n	8016146 <__swbuf_r+0x2a>

08016198 <__swsetup_r>:
 8016198:	b538      	push	{r3, r4, r5, lr}
 801619a:	4b29      	ldr	r3, [pc, #164]	@ (8016240 <__swsetup_r+0xa8>)
 801619c:	4605      	mov	r5, r0
 801619e:	6818      	ldr	r0, [r3, #0]
 80161a0:	460c      	mov	r4, r1
 80161a2:	b118      	cbz	r0, 80161ac <__swsetup_r+0x14>
 80161a4:	6a03      	ldr	r3, [r0, #32]
 80161a6:	b90b      	cbnz	r3, 80161ac <__swsetup_r+0x14>
 80161a8:	f7fd fb88 	bl	80138bc <__sinit>
 80161ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161b0:	0719      	lsls	r1, r3, #28
 80161b2:	d422      	bmi.n	80161fa <__swsetup_r+0x62>
 80161b4:	06da      	lsls	r2, r3, #27
 80161b6:	d407      	bmi.n	80161c8 <__swsetup_r+0x30>
 80161b8:	2209      	movs	r2, #9
 80161ba:	602a      	str	r2, [r5, #0]
 80161bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161c0:	81a3      	strh	r3, [r4, #12]
 80161c2:	f04f 30ff 	mov.w	r0, #4294967295
 80161c6:	e033      	b.n	8016230 <__swsetup_r+0x98>
 80161c8:	0758      	lsls	r0, r3, #29
 80161ca:	d512      	bpl.n	80161f2 <__swsetup_r+0x5a>
 80161cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80161ce:	b141      	cbz	r1, 80161e2 <__swsetup_r+0x4a>
 80161d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80161d4:	4299      	cmp	r1, r3
 80161d6:	d002      	beq.n	80161de <__swsetup_r+0x46>
 80161d8:	4628      	mov	r0, r5
 80161da:	f7fe fb99 	bl	8014910 <_free_r>
 80161de:	2300      	movs	r3, #0
 80161e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80161e8:	81a3      	strh	r3, [r4, #12]
 80161ea:	2300      	movs	r3, #0
 80161ec:	6063      	str	r3, [r4, #4]
 80161ee:	6923      	ldr	r3, [r4, #16]
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	89a3      	ldrh	r3, [r4, #12]
 80161f4:	f043 0308 	orr.w	r3, r3, #8
 80161f8:	81a3      	strh	r3, [r4, #12]
 80161fa:	6923      	ldr	r3, [r4, #16]
 80161fc:	b94b      	cbnz	r3, 8016212 <__swsetup_r+0x7a>
 80161fe:	89a3      	ldrh	r3, [r4, #12]
 8016200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016208:	d003      	beq.n	8016212 <__swsetup_r+0x7a>
 801620a:	4621      	mov	r1, r4
 801620c:	4628      	mov	r0, r5
 801620e:	f000 f88b 	bl	8016328 <__smakebuf_r>
 8016212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016216:	f013 0201 	ands.w	r2, r3, #1
 801621a:	d00a      	beq.n	8016232 <__swsetup_r+0x9a>
 801621c:	2200      	movs	r2, #0
 801621e:	60a2      	str	r2, [r4, #8]
 8016220:	6962      	ldr	r2, [r4, #20]
 8016222:	4252      	negs	r2, r2
 8016224:	61a2      	str	r2, [r4, #24]
 8016226:	6922      	ldr	r2, [r4, #16]
 8016228:	b942      	cbnz	r2, 801623c <__swsetup_r+0xa4>
 801622a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801622e:	d1c5      	bne.n	80161bc <__swsetup_r+0x24>
 8016230:	bd38      	pop	{r3, r4, r5, pc}
 8016232:	0799      	lsls	r1, r3, #30
 8016234:	bf58      	it	pl
 8016236:	6962      	ldrpl	r2, [r4, #20]
 8016238:	60a2      	str	r2, [r4, #8]
 801623a:	e7f4      	b.n	8016226 <__swsetup_r+0x8e>
 801623c:	2000      	movs	r0, #0
 801623e:	e7f7      	b.n	8016230 <__swsetup_r+0x98>
 8016240:	20000284 	.word	0x20000284

08016244 <_raise_r>:
 8016244:	291f      	cmp	r1, #31
 8016246:	b538      	push	{r3, r4, r5, lr}
 8016248:	4605      	mov	r5, r0
 801624a:	460c      	mov	r4, r1
 801624c:	d904      	bls.n	8016258 <_raise_r+0x14>
 801624e:	2316      	movs	r3, #22
 8016250:	6003      	str	r3, [r0, #0]
 8016252:	f04f 30ff 	mov.w	r0, #4294967295
 8016256:	bd38      	pop	{r3, r4, r5, pc}
 8016258:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801625a:	b112      	cbz	r2, 8016262 <_raise_r+0x1e>
 801625c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016260:	b94b      	cbnz	r3, 8016276 <_raise_r+0x32>
 8016262:	4628      	mov	r0, r5
 8016264:	f000 f830 	bl	80162c8 <_getpid_r>
 8016268:	4622      	mov	r2, r4
 801626a:	4601      	mov	r1, r0
 801626c:	4628      	mov	r0, r5
 801626e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016272:	f000 b817 	b.w	80162a4 <_kill_r>
 8016276:	2b01      	cmp	r3, #1
 8016278:	d00a      	beq.n	8016290 <_raise_r+0x4c>
 801627a:	1c59      	adds	r1, r3, #1
 801627c:	d103      	bne.n	8016286 <_raise_r+0x42>
 801627e:	2316      	movs	r3, #22
 8016280:	6003      	str	r3, [r0, #0]
 8016282:	2001      	movs	r0, #1
 8016284:	e7e7      	b.n	8016256 <_raise_r+0x12>
 8016286:	2100      	movs	r1, #0
 8016288:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801628c:	4620      	mov	r0, r4
 801628e:	4798      	blx	r3
 8016290:	2000      	movs	r0, #0
 8016292:	e7e0      	b.n	8016256 <_raise_r+0x12>

08016294 <raise>:
 8016294:	4b02      	ldr	r3, [pc, #8]	@ (80162a0 <raise+0xc>)
 8016296:	4601      	mov	r1, r0
 8016298:	6818      	ldr	r0, [r3, #0]
 801629a:	f7ff bfd3 	b.w	8016244 <_raise_r>
 801629e:	bf00      	nop
 80162a0:	20000284 	.word	0x20000284

080162a4 <_kill_r>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	4d07      	ldr	r5, [pc, #28]	@ (80162c4 <_kill_r+0x20>)
 80162a8:	2300      	movs	r3, #0
 80162aa:	4604      	mov	r4, r0
 80162ac:	4608      	mov	r0, r1
 80162ae:	4611      	mov	r1, r2
 80162b0:	602b      	str	r3, [r5, #0]
 80162b2:	f7ef fbd1 	bl	8005a58 <_kill>
 80162b6:	1c43      	adds	r3, r0, #1
 80162b8:	d102      	bne.n	80162c0 <_kill_r+0x1c>
 80162ba:	682b      	ldr	r3, [r5, #0]
 80162bc:	b103      	cbz	r3, 80162c0 <_kill_r+0x1c>
 80162be:	6023      	str	r3, [r4, #0]
 80162c0:	bd38      	pop	{r3, r4, r5, pc}
 80162c2:	bf00      	nop
 80162c4:	200024f4 	.word	0x200024f4

080162c8 <_getpid_r>:
 80162c8:	f7ef bbbe 	b.w	8005a48 <_getpid>

080162cc <_malloc_usable_size_r>:
 80162cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162d0:	1f18      	subs	r0, r3, #4
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	bfbc      	itt	lt
 80162d6:	580b      	ldrlt	r3, [r1, r0]
 80162d8:	18c0      	addlt	r0, r0, r3
 80162da:	4770      	bx	lr

080162dc <__swhatbuf_r>:
 80162dc:	b570      	push	{r4, r5, r6, lr}
 80162de:	460c      	mov	r4, r1
 80162e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e4:	2900      	cmp	r1, #0
 80162e6:	b096      	sub	sp, #88	@ 0x58
 80162e8:	4615      	mov	r5, r2
 80162ea:	461e      	mov	r6, r3
 80162ec:	da0d      	bge.n	801630a <__swhatbuf_r+0x2e>
 80162ee:	89a3      	ldrh	r3, [r4, #12]
 80162f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80162f4:	f04f 0100 	mov.w	r1, #0
 80162f8:	bf14      	ite	ne
 80162fa:	2340      	movne	r3, #64	@ 0x40
 80162fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016300:	2000      	movs	r0, #0
 8016302:	6031      	str	r1, [r6, #0]
 8016304:	602b      	str	r3, [r5, #0]
 8016306:	b016      	add	sp, #88	@ 0x58
 8016308:	bd70      	pop	{r4, r5, r6, pc}
 801630a:	466a      	mov	r2, sp
 801630c:	f000 f848 	bl	80163a0 <_fstat_r>
 8016310:	2800      	cmp	r0, #0
 8016312:	dbec      	blt.n	80162ee <__swhatbuf_r+0x12>
 8016314:	9901      	ldr	r1, [sp, #4]
 8016316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801631a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801631e:	4259      	negs	r1, r3
 8016320:	4159      	adcs	r1, r3
 8016322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016326:	e7eb      	b.n	8016300 <__swhatbuf_r+0x24>

08016328 <__smakebuf_r>:
 8016328:	898b      	ldrh	r3, [r1, #12]
 801632a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801632c:	079d      	lsls	r5, r3, #30
 801632e:	4606      	mov	r6, r0
 8016330:	460c      	mov	r4, r1
 8016332:	d507      	bpl.n	8016344 <__smakebuf_r+0x1c>
 8016334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016338:	6023      	str	r3, [r4, #0]
 801633a:	6123      	str	r3, [r4, #16]
 801633c:	2301      	movs	r3, #1
 801633e:	6163      	str	r3, [r4, #20]
 8016340:	b003      	add	sp, #12
 8016342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016344:	ab01      	add	r3, sp, #4
 8016346:	466a      	mov	r2, sp
 8016348:	f7ff ffc8 	bl	80162dc <__swhatbuf_r>
 801634c:	9f00      	ldr	r7, [sp, #0]
 801634e:	4605      	mov	r5, r0
 8016350:	4639      	mov	r1, r7
 8016352:	4630      	mov	r0, r6
 8016354:	f7fb feb2 	bl	80120bc <_malloc_r>
 8016358:	b948      	cbnz	r0, 801636e <__smakebuf_r+0x46>
 801635a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801635e:	059a      	lsls	r2, r3, #22
 8016360:	d4ee      	bmi.n	8016340 <__smakebuf_r+0x18>
 8016362:	f023 0303 	bic.w	r3, r3, #3
 8016366:	f043 0302 	orr.w	r3, r3, #2
 801636a:	81a3      	strh	r3, [r4, #12]
 801636c:	e7e2      	b.n	8016334 <__smakebuf_r+0xc>
 801636e:	89a3      	ldrh	r3, [r4, #12]
 8016370:	6020      	str	r0, [r4, #0]
 8016372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016376:	81a3      	strh	r3, [r4, #12]
 8016378:	9b01      	ldr	r3, [sp, #4]
 801637a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801637e:	b15b      	cbz	r3, 8016398 <__smakebuf_r+0x70>
 8016380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016384:	4630      	mov	r0, r6
 8016386:	f000 f81d 	bl	80163c4 <_isatty_r>
 801638a:	b128      	cbz	r0, 8016398 <__smakebuf_r+0x70>
 801638c:	89a3      	ldrh	r3, [r4, #12]
 801638e:	f023 0303 	bic.w	r3, r3, #3
 8016392:	f043 0301 	orr.w	r3, r3, #1
 8016396:	81a3      	strh	r3, [r4, #12]
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	431d      	orrs	r5, r3
 801639c:	81a5      	strh	r5, [r4, #12]
 801639e:	e7cf      	b.n	8016340 <__smakebuf_r+0x18>

080163a0 <_fstat_r>:
 80163a0:	b538      	push	{r3, r4, r5, lr}
 80163a2:	4d07      	ldr	r5, [pc, #28]	@ (80163c0 <_fstat_r+0x20>)
 80163a4:	2300      	movs	r3, #0
 80163a6:	4604      	mov	r4, r0
 80163a8:	4608      	mov	r0, r1
 80163aa:	4611      	mov	r1, r2
 80163ac:	602b      	str	r3, [r5, #0]
 80163ae:	f7ef fbb3 	bl	8005b18 <_fstat>
 80163b2:	1c43      	adds	r3, r0, #1
 80163b4:	d102      	bne.n	80163bc <_fstat_r+0x1c>
 80163b6:	682b      	ldr	r3, [r5, #0]
 80163b8:	b103      	cbz	r3, 80163bc <_fstat_r+0x1c>
 80163ba:	6023      	str	r3, [r4, #0]
 80163bc:	bd38      	pop	{r3, r4, r5, pc}
 80163be:	bf00      	nop
 80163c0:	200024f4 	.word	0x200024f4

080163c4 <_isatty_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4d06      	ldr	r5, [pc, #24]	@ (80163e0 <_isatty_r+0x1c>)
 80163c8:	2300      	movs	r3, #0
 80163ca:	4604      	mov	r4, r0
 80163cc:	4608      	mov	r0, r1
 80163ce:	602b      	str	r3, [r5, #0]
 80163d0:	f7ef fbb2 	bl	8005b38 <_isatty>
 80163d4:	1c43      	adds	r3, r0, #1
 80163d6:	d102      	bne.n	80163de <_isatty_r+0x1a>
 80163d8:	682b      	ldr	r3, [r5, #0]
 80163da:	b103      	cbz	r3, 80163de <_isatty_r+0x1a>
 80163dc:	6023      	str	r3, [r4, #0]
 80163de:	bd38      	pop	{r3, r4, r5, pc}
 80163e0:	200024f4 	.word	0x200024f4

080163e4 <sqrt>:
 80163e4:	b538      	push	{r3, r4, r5, lr}
 80163e6:	ed2d 8b02 	vpush	{d8}
 80163ea:	ec55 4b10 	vmov	r4, r5, d0
 80163ee:	f000 f8e5 	bl	80165bc <__ieee754_sqrt>
 80163f2:	4622      	mov	r2, r4
 80163f4:	462b      	mov	r3, r5
 80163f6:	4620      	mov	r0, r4
 80163f8:	4629      	mov	r1, r5
 80163fa:	eeb0 8a40 	vmov.f32	s16, s0
 80163fe:	eef0 8a60 	vmov.f32	s17, s1
 8016402:	f7ea fbcb 	bl	8000b9c <__aeabi_dcmpun>
 8016406:	b990      	cbnz	r0, 801642e <sqrt+0x4a>
 8016408:	2200      	movs	r2, #0
 801640a:	2300      	movs	r3, #0
 801640c:	4620      	mov	r0, r4
 801640e:	4629      	mov	r1, r5
 8016410:	f7ea fb9c 	bl	8000b4c <__aeabi_dcmplt>
 8016414:	b158      	cbz	r0, 801642e <sqrt+0x4a>
 8016416:	f7fd fbbd 	bl	8013b94 <__errno>
 801641a:	2321      	movs	r3, #33	@ 0x21
 801641c:	6003      	str	r3, [r0, #0]
 801641e:	2200      	movs	r2, #0
 8016420:	2300      	movs	r3, #0
 8016422:	4610      	mov	r0, r2
 8016424:	4619      	mov	r1, r3
 8016426:	f7ea fa49 	bl	80008bc <__aeabi_ddiv>
 801642a:	ec41 0b18 	vmov	d8, r0, r1
 801642e:	eeb0 0a48 	vmov.f32	s0, s16
 8016432:	eef0 0a68 	vmov.f32	s1, s17
 8016436:	ecbd 8b02 	vpop	{d8}
 801643a:	bd38      	pop	{r3, r4, r5, pc}

0801643c <atan2f>:
 801643c:	f000 bb14 	b.w	8016a68 <__ieee754_atan2f>

08016440 <cosf>:
 8016440:	ee10 3a10 	vmov	r3, s0
 8016444:	b507      	push	{r0, r1, r2, lr}
 8016446:	4a1e      	ldr	r2, [pc, #120]	@ (80164c0 <cosf+0x80>)
 8016448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801644c:	4293      	cmp	r3, r2
 801644e:	d806      	bhi.n	801645e <cosf+0x1e>
 8016450:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80164c4 <cosf+0x84>
 8016454:	b003      	add	sp, #12
 8016456:	f85d eb04 	ldr.w	lr, [sp], #4
 801645a:	f000 b985 	b.w	8016768 <__kernel_cosf>
 801645e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016462:	d304      	bcc.n	801646e <cosf+0x2e>
 8016464:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016468:	b003      	add	sp, #12
 801646a:	f85d fb04 	ldr.w	pc, [sp], #4
 801646e:	4668      	mov	r0, sp
 8016470:	f000 fb9a 	bl	8016ba8 <__ieee754_rem_pio2f>
 8016474:	f000 0003 	and.w	r0, r0, #3
 8016478:	2801      	cmp	r0, #1
 801647a:	d009      	beq.n	8016490 <cosf+0x50>
 801647c:	2802      	cmp	r0, #2
 801647e:	d010      	beq.n	80164a2 <cosf+0x62>
 8016480:	b9b0      	cbnz	r0, 80164b0 <cosf+0x70>
 8016482:	eddd 0a01 	vldr	s1, [sp, #4]
 8016486:	ed9d 0a00 	vldr	s0, [sp]
 801648a:	f000 f96d 	bl	8016768 <__kernel_cosf>
 801648e:	e7eb      	b.n	8016468 <cosf+0x28>
 8016490:	eddd 0a01 	vldr	s1, [sp, #4]
 8016494:	ed9d 0a00 	vldr	s0, [sp]
 8016498:	f000 f9be 	bl	8016818 <__kernel_sinf>
 801649c:	eeb1 0a40 	vneg.f32	s0, s0
 80164a0:	e7e2      	b.n	8016468 <cosf+0x28>
 80164a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80164a6:	ed9d 0a00 	vldr	s0, [sp]
 80164aa:	f000 f95d 	bl	8016768 <__kernel_cosf>
 80164ae:	e7f5      	b.n	801649c <cosf+0x5c>
 80164b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80164b4:	ed9d 0a00 	vldr	s0, [sp]
 80164b8:	2001      	movs	r0, #1
 80164ba:	f000 f9ad 	bl	8016818 <__kernel_sinf>
 80164be:	e7d3      	b.n	8016468 <cosf+0x28>
 80164c0:	3f490fd8 	.word	0x3f490fd8
 80164c4:	00000000 	.word	0x00000000

080164c8 <fabsf>:
 80164c8:	ee10 3a10 	vmov	r3, s0
 80164cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80164d0:	ee00 3a10 	vmov	s0, r3
 80164d4:	4770      	bx	lr
	...

080164d8 <sinf>:
 80164d8:	ee10 3a10 	vmov	r3, s0
 80164dc:	b507      	push	{r0, r1, r2, lr}
 80164de:	4a1f      	ldr	r2, [pc, #124]	@ (801655c <sinf+0x84>)
 80164e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d807      	bhi.n	80164f8 <sinf+0x20>
 80164e8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8016560 <sinf+0x88>
 80164ec:	2000      	movs	r0, #0
 80164ee:	b003      	add	sp, #12
 80164f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80164f4:	f000 b990 	b.w	8016818 <__kernel_sinf>
 80164f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80164fc:	d304      	bcc.n	8016508 <sinf+0x30>
 80164fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016502:	b003      	add	sp, #12
 8016504:	f85d fb04 	ldr.w	pc, [sp], #4
 8016508:	4668      	mov	r0, sp
 801650a:	f000 fb4d 	bl	8016ba8 <__ieee754_rem_pio2f>
 801650e:	f000 0003 	and.w	r0, r0, #3
 8016512:	2801      	cmp	r0, #1
 8016514:	d00a      	beq.n	801652c <sinf+0x54>
 8016516:	2802      	cmp	r0, #2
 8016518:	d00f      	beq.n	801653a <sinf+0x62>
 801651a:	b9c0      	cbnz	r0, 801654e <sinf+0x76>
 801651c:	eddd 0a01 	vldr	s1, [sp, #4]
 8016520:	ed9d 0a00 	vldr	s0, [sp]
 8016524:	2001      	movs	r0, #1
 8016526:	f000 f977 	bl	8016818 <__kernel_sinf>
 801652a:	e7ea      	b.n	8016502 <sinf+0x2a>
 801652c:	eddd 0a01 	vldr	s1, [sp, #4]
 8016530:	ed9d 0a00 	vldr	s0, [sp]
 8016534:	f000 f918 	bl	8016768 <__kernel_cosf>
 8016538:	e7e3      	b.n	8016502 <sinf+0x2a>
 801653a:	eddd 0a01 	vldr	s1, [sp, #4]
 801653e:	ed9d 0a00 	vldr	s0, [sp]
 8016542:	2001      	movs	r0, #1
 8016544:	f000 f968 	bl	8016818 <__kernel_sinf>
 8016548:	eeb1 0a40 	vneg.f32	s0, s0
 801654c:	e7d9      	b.n	8016502 <sinf+0x2a>
 801654e:	eddd 0a01 	vldr	s1, [sp, #4]
 8016552:	ed9d 0a00 	vldr	s0, [sp]
 8016556:	f000 f907 	bl	8016768 <__kernel_cosf>
 801655a:	e7f5      	b.n	8016548 <sinf+0x70>
 801655c:	3f490fd8 	.word	0x3f490fd8
 8016560:	00000000 	.word	0x00000000

08016564 <tanf>:
 8016564:	ee10 3a10 	vmov	r3, s0
 8016568:	b507      	push	{r0, r1, r2, lr}
 801656a:	4a12      	ldr	r2, [pc, #72]	@ (80165b4 <tanf+0x50>)
 801656c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016570:	4293      	cmp	r3, r2
 8016572:	d807      	bhi.n	8016584 <tanf+0x20>
 8016574:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80165b8 <tanf+0x54>
 8016578:	2001      	movs	r0, #1
 801657a:	b003      	add	sp, #12
 801657c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016580:	f000 b992 	b.w	80168a8 <__kernel_tanf>
 8016584:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016588:	d304      	bcc.n	8016594 <tanf+0x30>
 801658a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801658e:	b003      	add	sp, #12
 8016590:	f85d fb04 	ldr.w	pc, [sp], #4
 8016594:	4668      	mov	r0, sp
 8016596:	f000 fb07 	bl	8016ba8 <__ieee754_rem_pio2f>
 801659a:	0040      	lsls	r0, r0, #1
 801659c:	f000 0002 	and.w	r0, r0, #2
 80165a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80165a4:	ed9d 0a00 	vldr	s0, [sp]
 80165a8:	f1c0 0001 	rsb	r0, r0, #1
 80165ac:	f000 f97c 	bl	80168a8 <__kernel_tanf>
 80165b0:	e7ed      	b.n	801658e <tanf+0x2a>
 80165b2:	bf00      	nop
 80165b4:	3f490fda 	.word	0x3f490fda
 80165b8:	00000000 	.word	0x00000000

080165bc <__ieee754_sqrt>:
 80165bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c0:	4a66      	ldr	r2, [pc, #408]	@ (801675c <__ieee754_sqrt+0x1a0>)
 80165c2:	ec55 4b10 	vmov	r4, r5, d0
 80165c6:	43aa      	bics	r2, r5
 80165c8:	462b      	mov	r3, r5
 80165ca:	4621      	mov	r1, r4
 80165cc:	d110      	bne.n	80165f0 <__ieee754_sqrt+0x34>
 80165ce:	4622      	mov	r2, r4
 80165d0:	4620      	mov	r0, r4
 80165d2:	4629      	mov	r1, r5
 80165d4:	f7ea f848 	bl	8000668 <__aeabi_dmul>
 80165d8:	4602      	mov	r2, r0
 80165da:	460b      	mov	r3, r1
 80165dc:	4620      	mov	r0, r4
 80165de:	4629      	mov	r1, r5
 80165e0:	f7e9 fe8c 	bl	80002fc <__adddf3>
 80165e4:	4604      	mov	r4, r0
 80165e6:	460d      	mov	r5, r1
 80165e8:	ec45 4b10 	vmov	d0, r4, r5
 80165ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f0:	2d00      	cmp	r5, #0
 80165f2:	dc0e      	bgt.n	8016612 <__ieee754_sqrt+0x56>
 80165f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80165f8:	4322      	orrs	r2, r4
 80165fa:	d0f5      	beq.n	80165e8 <__ieee754_sqrt+0x2c>
 80165fc:	b19d      	cbz	r5, 8016626 <__ieee754_sqrt+0x6a>
 80165fe:	4622      	mov	r2, r4
 8016600:	4620      	mov	r0, r4
 8016602:	4629      	mov	r1, r5
 8016604:	f7e9 fe78 	bl	80002f8 <__aeabi_dsub>
 8016608:	4602      	mov	r2, r0
 801660a:	460b      	mov	r3, r1
 801660c:	f7ea f956 	bl	80008bc <__aeabi_ddiv>
 8016610:	e7e8      	b.n	80165e4 <__ieee754_sqrt+0x28>
 8016612:	152a      	asrs	r2, r5, #20
 8016614:	d115      	bne.n	8016642 <__ieee754_sqrt+0x86>
 8016616:	2000      	movs	r0, #0
 8016618:	e009      	b.n	801662e <__ieee754_sqrt+0x72>
 801661a:	0acb      	lsrs	r3, r1, #11
 801661c:	3a15      	subs	r2, #21
 801661e:	0549      	lsls	r1, r1, #21
 8016620:	2b00      	cmp	r3, #0
 8016622:	d0fa      	beq.n	801661a <__ieee754_sqrt+0x5e>
 8016624:	e7f7      	b.n	8016616 <__ieee754_sqrt+0x5a>
 8016626:	462a      	mov	r2, r5
 8016628:	e7fa      	b.n	8016620 <__ieee754_sqrt+0x64>
 801662a:	005b      	lsls	r3, r3, #1
 801662c:	3001      	adds	r0, #1
 801662e:	02dc      	lsls	r4, r3, #11
 8016630:	d5fb      	bpl.n	801662a <__ieee754_sqrt+0x6e>
 8016632:	1e44      	subs	r4, r0, #1
 8016634:	1b12      	subs	r2, r2, r4
 8016636:	f1c0 0420 	rsb	r4, r0, #32
 801663a:	fa21 f404 	lsr.w	r4, r1, r4
 801663e:	4323      	orrs	r3, r4
 8016640:	4081      	lsls	r1, r0
 8016642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016646:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801664a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801664e:	07d2      	lsls	r2, r2, #31
 8016650:	bf5c      	itt	pl
 8016652:	005b      	lslpl	r3, r3, #1
 8016654:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016658:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801665c:	bf58      	it	pl
 801665e:	0049      	lslpl	r1, r1, #1
 8016660:	2600      	movs	r6, #0
 8016662:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016666:	107f      	asrs	r7, r7, #1
 8016668:	0049      	lsls	r1, r1, #1
 801666a:	2016      	movs	r0, #22
 801666c:	4632      	mov	r2, r6
 801666e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016672:	1915      	adds	r5, r2, r4
 8016674:	429d      	cmp	r5, r3
 8016676:	bfde      	ittt	le
 8016678:	192a      	addle	r2, r5, r4
 801667a:	1b5b      	suble	r3, r3, r5
 801667c:	1936      	addle	r6, r6, r4
 801667e:	0fcd      	lsrs	r5, r1, #31
 8016680:	3801      	subs	r0, #1
 8016682:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016686:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801668a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801668e:	d1f0      	bne.n	8016672 <__ieee754_sqrt+0xb6>
 8016690:	4605      	mov	r5, r0
 8016692:	2420      	movs	r4, #32
 8016694:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016698:	4293      	cmp	r3, r2
 801669a:	eb0c 0e00 	add.w	lr, ip, r0
 801669e:	dc02      	bgt.n	80166a6 <__ieee754_sqrt+0xea>
 80166a0:	d113      	bne.n	80166ca <__ieee754_sqrt+0x10e>
 80166a2:	458e      	cmp	lr, r1
 80166a4:	d811      	bhi.n	80166ca <__ieee754_sqrt+0x10e>
 80166a6:	f1be 0f00 	cmp.w	lr, #0
 80166aa:	eb0e 000c 	add.w	r0, lr, ip
 80166ae:	da3f      	bge.n	8016730 <__ieee754_sqrt+0x174>
 80166b0:	2800      	cmp	r0, #0
 80166b2:	db3d      	blt.n	8016730 <__ieee754_sqrt+0x174>
 80166b4:	f102 0801 	add.w	r8, r2, #1
 80166b8:	1a9b      	subs	r3, r3, r2
 80166ba:	458e      	cmp	lr, r1
 80166bc:	bf88      	it	hi
 80166be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80166c2:	eba1 010e 	sub.w	r1, r1, lr
 80166c6:	4465      	add	r5, ip
 80166c8:	4642      	mov	r2, r8
 80166ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80166ce:	3c01      	subs	r4, #1
 80166d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80166d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80166d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80166dc:	d1dc      	bne.n	8016698 <__ieee754_sqrt+0xdc>
 80166de:	4319      	orrs	r1, r3
 80166e0:	d01b      	beq.n	801671a <__ieee754_sqrt+0x15e>
 80166e2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8016760 <__ieee754_sqrt+0x1a4>
 80166e6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8016764 <__ieee754_sqrt+0x1a8>
 80166ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80166ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80166f2:	f7e9 fe01 	bl	80002f8 <__aeabi_dsub>
 80166f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	4640      	mov	r0, r8
 8016700:	4649      	mov	r1, r9
 8016702:	f7ea fa2d 	bl	8000b60 <__aeabi_dcmple>
 8016706:	b140      	cbz	r0, 801671a <__ieee754_sqrt+0x15e>
 8016708:	f1b5 3fff 	cmp.w	r5, #4294967295
 801670c:	e9da 0100 	ldrd	r0, r1, [sl]
 8016710:	e9db 2300 	ldrd	r2, r3, [fp]
 8016714:	d10e      	bne.n	8016734 <__ieee754_sqrt+0x178>
 8016716:	3601      	adds	r6, #1
 8016718:	4625      	mov	r5, r4
 801671a:	1073      	asrs	r3, r6, #1
 801671c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8016720:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016724:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8016728:	086b      	lsrs	r3, r5, #1
 801672a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801672e:	e759      	b.n	80165e4 <__ieee754_sqrt+0x28>
 8016730:	4690      	mov	r8, r2
 8016732:	e7c1      	b.n	80166b8 <__ieee754_sqrt+0xfc>
 8016734:	f7e9 fde2 	bl	80002fc <__adddf3>
 8016738:	e9da 8900 	ldrd	r8, r9, [sl]
 801673c:	4602      	mov	r2, r0
 801673e:	460b      	mov	r3, r1
 8016740:	4640      	mov	r0, r8
 8016742:	4649      	mov	r1, r9
 8016744:	f7ea fa02 	bl	8000b4c <__aeabi_dcmplt>
 8016748:	b120      	cbz	r0, 8016754 <__ieee754_sqrt+0x198>
 801674a:	1cab      	adds	r3, r5, #2
 801674c:	bf08      	it	eq
 801674e:	3601      	addeq	r6, #1
 8016750:	3502      	adds	r5, #2
 8016752:	e7e2      	b.n	801671a <__ieee754_sqrt+0x15e>
 8016754:	1c6b      	adds	r3, r5, #1
 8016756:	f023 0501 	bic.w	r5, r3, #1
 801675a:	e7de      	b.n	801671a <__ieee754_sqrt+0x15e>
 801675c:	7ff00000 	.word	0x7ff00000
 8016760:	08017fb8 	.word	0x08017fb8
 8016764:	08017fb0 	.word	0x08017fb0

08016768 <__kernel_cosf>:
 8016768:	ee10 3a10 	vmov	r3, s0
 801676c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016770:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016774:	eef0 6a40 	vmov.f32	s13, s0
 8016778:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801677c:	d204      	bcs.n	8016788 <__kernel_cosf+0x20>
 801677e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8016782:	ee17 2a90 	vmov	r2, s15
 8016786:	b342      	cbz	r2, 80167da <__kernel_cosf+0x72>
 8016788:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801678c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80167f8 <__kernel_cosf+0x90>
 8016790:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80167fc <__kernel_cosf+0x94>
 8016794:	4a1a      	ldr	r2, [pc, #104]	@ (8016800 <__kernel_cosf+0x98>)
 8016796:	eea7 6a27 	vfma.f32	s12, s14, s15
 801679a:	4293      	cmp	r3, r2
 801679c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016804 <__kernel_cosf+0x9c>
 80167a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80167a4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016808 <__kernel_cosf+0xa0>
 80167a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80167ac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801680c <__kernel_cosf+0xa4>
 80167b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80167b4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016810 <__kernel_cosf+0xa8>
 80167b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80167bc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80167c0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80167c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80167c8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80167cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167d0:	d804      	bhi.n	80167dc <__kernel_cosf+0x74>
 80167d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80167d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80167da:	4770      	bx	lr
 80167dc:	4a0d      	ldr	r2, [pc, #52]	@ (8016814 <__kernel_cosf+0xac>)
 80167de:	4293      	cmp	r3, r2
 80167e0:	bf9a      	itte	ls
 80167e2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80167e6:	ee07 3a10 	vmovls	s14, r3
 80167ea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80167ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80167f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167f6:	e7ec      	b.n	80167d2 <__kernel_cosf+0x6a>
 80167f8:	ad47d74e 	.word	0xad47d74e
 80167fc:	310f74f6 	.word	0x310f74f6
 8016800:	3e999999 	.word	0x3e999999
 8016804:	b493f27c 	.word	0xb493f27c
 8016808:	37d00d01 	.word	0x37d00d01
 801680c:	bab60b61 	.word	0xbab60b61
 8016810:	3d2aaaab 	.word	0x3d2aaaab
 8016814:	3f480000 	.word	0x3f480000

08016818 <__kernel_sinf>:
 8016818:	ee10 3a10 	vmov	r3, s0
 801681c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016820:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016824:	d204      	bcs.n	8016830 <__kernel_sinf+0x18>
 8016826:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801682a:	ee17 3a90 	vmov	r3, s15
 801682e:	b35b      	cbz	r3, 8016888 <__kernel_sinf+0x70>
 8016830:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016834:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801688c <__kernel_sinf+0x74>
 8016838:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8016890 <__kernel_sinf+0x78>
 801683c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016840:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8016894 <__kernel_sinf+0x7c>
 8016844:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016848:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8016898 <__kernel_sinf+0x80>
 801684c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016850:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801689c <__kernel_sinf+0x84>
 8016854:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016858:	eee6 7a07 	vfma.f32	s15, s12, s14
 801685c:	b930      	cbnz	r0, 801686c <__kernel_sinf+0x54>
 801685e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80168a0 <__kernel_sinf+0x88>
 8016862:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016866:	eea6 0a26 	vfma.f32	s0, s12, s13
 801686a:	4770      	bx	lr
 801686c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016870:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8016874:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016878:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801687c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80168a4 <__kernel_sinf+0x8c>
 8016880:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016884:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016888:	4770      	bx	lr
 801688a:	bf00      	nop
 801688c:	2f2ec9d3 	.word	0x2f2ec9d3
 8016890:	b2d72f34 	.word	0xb2d72f34
 8016894:	3638ef1b 	.word	0x3638ef1b
 8016898:	b9500d01 	.word	0xb9500d01
 801689c:	3c088889 	.word	0x3c088889
 80168a0:	be2aaaab 	.word	0xbe2aaaab
 80168a4:	3e2aaaab 	.word	0x3e2aaaab

080168a8 <__kernel_tanf>:
 80168a8:	b508      	push	{r3, lr}
 80168aa:	ee10 3a10 	vmov	r3, s0
 80168ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80168b2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80168b6:	eef0 7a40 	vmov.f32	s15, s0
 80168ba:	d217      	bcs.n	80168ec <__kernel_tanf+0x44>
 80168bc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80168c0:	ee17 1a10 	vmov	r1, s14
 80168c4:	bb41      	cbnz	r1, 8016918 <__kernel_tanf+0x70>
 80168c6:	1c43      	adds	r3, r0, #1
 80168c8:	4313      	orrs	r3, r2
 80168ca:	d108      	bne.n	80168de <__kernel_tanf+0x36>
 80168cc:	f7ff fdfc 	bl	80164c8 <fabsf>
 80168d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80168d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80168d8:	eeb0 0a67 	vmov.f32	s0, s15
 80168dc:	bd08      	pop	{r3, pc}
 80168de:	2801      	cmp	r0, #1
 80168e0:	d0fa      	beq.n	80168d8 <__kernel_tanf+0x30>
 80168e2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80168e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80168ea:	e7f5      	b.n	80168d8 <__kernel_tanf+0x30>
 80168ec:	494c      	ldr	r1, [pc, #304]	@ (8016a20 <__kernel_tanf+0x178>)
 80168ee:	428a      	cmp	r2, r1
 80168f0:	d312      	bcc.n	8016918 <__kernel_tanf+0x70>
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8016a24 <__kernel_tanf+0x17c>
 80168f8:	bfb8      	it	lt
 80168fa:	eef1 7a40 	vneglt.f32	s15, s0
 80168fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016902:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8016a28 <__kernel_tanf+0x180>
 8016906:	bfb8      	it	lt
 8016908:	eef1 0a60 	vneglt.f32	s1, s1
 801690c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016910:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8016a2c <__kernel_tanf+0x184>
 8016914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016918:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801691c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8016a30 <__kernel_tanf+0x188>
 8016920:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8016a34 <__kernel_tanf+0x18c>
 8016924:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8016a38 <__kernel_tanf+0x190>
 8016928:	493d      	ldr	r1, [pc, #244]	@ (8016a20 <__kernel_tanf+0x178>)
 801692a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801692e:	428a      	cmp	r2, r1
 8016930:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016934:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8016a3c <__kernel_tanf+0x194>
 8016938:	eee6 5a07 	vfma.f32	s11, s12, s14
 801693c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8016a40 <__kernel_tanf+0x198>
 8016940:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016944:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016a44 <__kernel_tanf+0x19c>
 8016948:	eee6 5a07 	vfma.f32	s11, s12, s14
 801694c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8016a48 <__kernel_tanf+0x1a0>
 8016950:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016954:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8016a4c <__kernel_tanf+0x1a4>
 8016958:	eee7 5a05 	vfma.f32	s11, s14, s10
 801695c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8016a50 <__kernel_tanf+0x1a8>
 8016960:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016964:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8016a54 <__kernel_tanf+0x1ac>
 8016968:	eee5 5a07 	vfma.f32	s11, s10, s14
 801696c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8016a58 <__kernel_tanf+0x1b0>
 8016970:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016974:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8016a5c <__kernel_tanf+0x1b4>
 8016978:	eee5 5a07 	vfma.f32	s11, s10, s14
 801697c:	eeb0 7a46 	vmov.f32	s14, s12
 8016980:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016984:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016988:	eeb0 6a60 	vmov.f32	s12, s1
 801698c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016990:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8016a60 <__kernel_tanf+0x1b8>
 8016994:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016998:	eee5 0a07 	vfma.f32	s1, s10, s14
 801699c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80169a0:	d31d      	bcc.n	80169de <__kernel_tanf+0x136>
 80169a2:	ee07 0a10 	vmov	s14, r0
 80169a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80169aa:	ee26 5a06 	vmul.f32	s10, s12, s12
 80169ae:	ee36 6a07 	vadd.f32	s12, s12, s14
 80169b2:	179b      	asrs	r3, r3, #30
 80169b4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80169b8:	f003 0302 	and.w	r3, r3, #2
 80169bc:	f1c3 0301 	rsb	r3, r3, #1
 80169c0:	ee06 3a90 	vmov	s13, r3
 80169c4:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80169c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80169cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80169d0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80169d4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80169d8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80169dc:	e77c      	b.n	80168d8 <__kernel_tanf+0x30>
 80169de:	2801      	cmp	r0, #1
 80169e0:	d01b      	beq.n	8016a1a <__kernel_tanf+0x172>
 80169e2:	4b20      	ldr	r3, [pc, #128]	@ (8016a64 <__kernel_tanf+0x1bc>)
 80169e4:	ee16 2a10 	vmov	r2, s12
 80169e8:	401a      	ands	r2, r3
 80169ea:	ee05 2a90 	vmov	s11, r2
 80169ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80169f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80169f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80169fa:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80169fe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8016a02:	ee16 2a90 	vmov	r2, s13
 8016a06:	4013      	ands	r3, r2
 8016a08:	ee07 3a90 	vmov	s15, r3
 8016a0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016a10:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016a14:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016a18:	e75e      	b.n	80168d8 <__kernel_tanf+0x30>
 8016a1a:	eef0 7a46 	vmov.f32	s15, s12
 8016a1e:	e75b      	b.n	80168d8 <__kernel_tanf+0x30>
 8016a20:	3f2ca140 	.word	0x3f2ca140
 8016a24:	3f490fda 	.word	0x3f490fda
 8016a28:	33222168 	.word	0x33222168
 8016a2c:	00000000 	.word	0x00000000
 8016a30:	b79bae5f 	.word	0xb79bae5f
 8016a34:	38a3f445 	.word	0x38a3f445
 8016a38:	37d95384 	.word	0x37d95384
 8016a3c:	3a1a26c8 	.word	0x3a1a26c8
 8016a40:	3b6b6916 	.word	0x3b6b6916
 8016a44:	3cb327a4 	.word	0x3cb327a4
 8016a48:	3e088889 	.word	0x3e088889
 8016a4c:	3895c07a 	.word	0x3895c07a
 8016a50:	398137b9 	.word	0x398137b9
 8016a54:	3abede48 	.word	0x3abede48
 8016a58:	3c11371f 	.word	0x3c11371f
 8016a5c:	3d5d0dd1 	.word	0x3d5d0dd1
 8016a60:	3eaaaaab 	.word	0x3eaaaaab
 8016a64:	fffff000 	.word	0xfffff000

08016a68 <__ieee754_atan2f>:
 8016a68:	ee10 2a90 	vmov	r2, s1
 8016a6c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8016a70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016a74:	b510      	push	{r4, lr}
 8016a76:	eef0 7a40 	vmov.f32	s15, s0
 8016a7a:	d806      	bhi.n	8016a8a <__ieee754_atan2f+0x22>
 8016a7c:	ee10 0a10 	vmov	r0, s0
 8016a80:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8016a84:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016a88:	d904      	bls.n	8016a94 <__ieee754_atan2f+0x2c>
 8016a8a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8016a92:	bd10      	pop	{r4, pc}
 8016a94:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8016a98:	d103      	bne.n	8016aa2 <__ieee754_atan2f+0x3a>
 8016a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a9e:	f000 b9b3 	b.w	8016e08 <atanf>
 8016aa2:	1794      	asrs	r4, r2, #30
 8016aa4:	f004 0402 	and.w	r4, r4, #2
 8016aa8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016aac:	b943      	cbnz	r3, 8016ac0 <__ieee754_atan2f+0x58>
 8016aae:	2c02      	cmp	r4, #2
 8016ab0:	d05e      	beq.n	8016b70 <__ieee754_atan2f+0x108>
 8016ab2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8016b84 <__ieee754_atan2f+0x11c>
 8016ab6:	2c03      	cmp	r4, #3
 8016ab8:	bf08      	it	eq
 8016aba:	eef0 7a47 	vmoveq.f32	s15, s14
 8016abe:	e7e6      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016ac0:	b941      	cbnz	r1, 8016ad4 <__ieee754_atan2f+0x6c>
 8016ac2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8016b88 <__ieee754_atan2f+0x120>
 8016ac6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8016b8c <__ieee754_atan2f+0x124>
 8016aca:	2800      	cmp	r0, #0
 8016acc:	bfa8      	it	ge
 8016ace:	eef0 7a47 	vmovge.f32	s15, s14
 8016ad2:	e7dc      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016ad4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016ad8:	d110      	bne.n	8016afc <__ieee754_atan2f+0x94>
 8016ada:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016ade:	f104 34ff 	add.w	r4, r4, #4294967295
 8016ae2:	d107      	bne.n	8016af4 <__ieee754_atan2f+0x8c>
 8016ae4:	2c02      	cmp	r4, #2
 8016ae6:	d846      	bhi.n	8016b76 <__ieee754_atan2f+0x10e>
 8016ae8:	4b29      	ldr	r3, [pc, #164]	@ (8016b90 <__ieee754_atan2f+0x128>)
 8016aea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016aee:	edd3 7a00 	vldr	s15, [r3]
 8016af2:	e7cc      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016af4:	2c02      	cmp	r4, #2
 8016af6:	d841      	bhi.n	8016b7c <__ieee754_atan2f+0x114>
 8016af8:	4b26      	ldr	r3, [pc, #152]	@ (8016b94 <__ieee754_atan2f+0x12c>)
 8016afa:	e7f6      	b.n	8016aea <__ieee754_atan2f+0x82>
 8016afc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016b00:	d0df      	beq.n	8016ac2 <__ieee754_atan2f+0x5a>
 8016b02:	1a5b      	subs	r3, r3, r1
 8016b04:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8016b08:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016b0c:	da1a      	bge.n	8016b44 <__ieee754_atan2f+0xdc>
 8016b0e:	2a00      	cmp	r2, #0
 8016b10:	da01      	bge.n	8016b16 <__ieee754_atan2f+0xae>
 8016b12:	313c      	adds	r1, #60	@ 0x3c
 8016b14:	db19      	blt.n	8016b4a <__ieee754_atan2f+0xe2>
 8016b16:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016b1a:	f7ff fcd5 	bl	80164c8 <fabsf>
 8016b1e:	f000 f973 	bl	8016e08 <atanf>
 8016b22:	eef0 7a40 	vmov.f32	s15, s0
 8016b26:	2c01      	cmp	r4, #1
 8016b28:	d012      	beq.n	8016b50 <__ieee754_atan2f+0xe8>
 8016b2a:	2c02      	cmp	r4, #2
 8016b2c:	d017      	beq.n	8016b5e <__ieee754_atan2f+0xf6>
 8016b2e:	2c00      	cmp	r4, #0
 8016b30:	d0ad      	beq.n	8016a8e <__ieee754_atan2f+0x26>
 8016b32:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8016b98 <__ieee754_atan2f+0x130>
 8016b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b3a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8016b9c <__ieee754_atan2f+0x134>
 8016b3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b42:	e7a4      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b44:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8016b8c <__ieee754_atan2f+0x124>
 8016b48:	e7ed      	b.n	8016b26 <__ieee754_atan2f+0xbe>
 8016b4a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8016ba0 <__ieee754_atan2f+0x138>
 8016b4e:	e7ea      	b.n	8016b26 <__ieee754_atan2f+0xbe>
 8016b50:	ee17 3a90 	vmov	r3, s15
 8016b54:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8016b58:	ee07 3a90 	vmov	s15, r3
 8016b5c:	e797      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8016b98 <__ieee754_atan2f+0x130>
 8016b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b66:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8016b9c <__ieee754_atan2f+0x134>
 8016b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b6e:	e78e      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b70:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8016b9c <__ieee754_atan2f+0x134>
 8016b74:	e78b      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b76:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8016ba4 <__ieee754_atan2f+0x13c>
 8016b7a:	e788      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b7c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016ba0 <__ieee754_atan2f+0x138>
 8016b80:	e785      	b.n	8016a8e <__ieee754_atan2f+0x26>
 8016b82:	bf00      	nop
 8016b84:	c0490fdb 	.word	0xc0490fdb
 8016b88:	bfc90fdb 	.word	0xbfc90fdb
 8016b8c:	3fc90fdb 	.word	0x3fc90fdb
 8016b90:	08017fcc 	.word	0x08017fcc
 8016b94:	08017fc0 	.word	0x08017fc0
 8016b98:	33bbbd2e 	.word	0x33bbbd2e
 8016b9c:	40490fdb 	.word	0x40490fdb
 8016ba0:	00000000 	.word	0x00000000
 8016ba4:	3f490fdb 	.word	0x3f490fdb

08016ba8 <__ieee754_rem_pio2f>:
 8016ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016baa:	ee10 6a10 	vmov	r6, s0
 8016bae:	4b88      	ldr	r3, [pc, #544]	@ (8016dd0 <__ieee754_rem_pio2f+0x228>)
 8016bb0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8016bb4:	429d      	cmp	r5, r3
 8016bb6:	b087      	sub	sp, #28
 8016bb8:	4604      	mov	r4, r0
 8016bba:	d805      	bhi.n	8016bc8 <__ieee754_rem_pio2f+0x20>
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	ed80 0a00 	vstr	s0, [r0]
 8016bc2:	6043      	str	r3, [r0, #4]
 8016bc4:	2000      	movs	r0, #0
 8016bc6:	e022      	b.n	8016c0e <__ieee754_rem_pio2f+0x66>
 8016bc8:	4b82      	ldr	r3, [pc, #520]	@ (8016dd4 <__ieee754_rem_pio2f+0x22c>)
 8016bca:	429d      	cmp	r5, r3
 8016bcc:	d83a      	bhi.n	8016c44 <__ieee754_rem_pio2f+0x9c>
 8016bce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8016bd2:	2e00      	cmp	r6, #0
 8016bd4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8016dd8 <__ieee754_rem_pio2f+0x230>
 8016bd8:	4a80      	ldr	r2, [pc, #512]	@ (8016ddc <__ieee754_rem_pio2f+0x234>)
 8016bda:	f023 030f 	bic.w	r3, r3, #15
 8016bde:	dd18      	ble.n	8016c12 <__ieee754_rem_pio2f+0x6a>
 8016be0:	4293      	cmp	r3, r2
 8016be2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016be6:	bf09      	itett	eq
 8016be8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8016de0 <__ieee754_rem_pio2f+0x238>
 8016bec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8016de4 <__ieee754_rem_pio2f+0x23c>
 8016bf0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8016de8 <__ieee754_rem_pio2f+0x240>
 8016bf4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016bf8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8016bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c00:	ed80 7a00 	vstr	s14, [r0]
 8016c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016c08:	edc0 7a01 	vstr	s15, [r0, #4]
 8016c0c:	2001      	movs	r0, #1
 8016c0e:	b007      	add	sp, #28
 8016c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c12:	4293      	cmp	r3, r2
 8016c14:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016c18:	bf09      	itett	eq
 8016c1a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8016de0 <__ieee754_rem_pio2f+0x238>
 8016c1e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8016de4 <__ieee754_rem_pio2f+0x23c>
 8016c22:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8016de8 <__ieee754_rem_pio2f+0x240>
 8016c26:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016c2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c32:	ed80 7a00 	vstr	s14, [r0]
 8016c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8016c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c42:	e7e4      	b.n	8016c0e <__ieee754_rem_pio2f+0x66>
 8016c44:	4b69      	ldr	r3, [pc, #420]	@ (8016dec <__ieee754_rem_pio2f+0x244>)
 8016c46:	429d      	cmp	r5, r3
 8016c48:	d873      	bhi.n	8016d32 <__ieee754_rem_pio2f+0x18a>
 8016c4a:	f7ff fc3d 	bl	80164c8 <fabsf>
 8016c4e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8016df0 <__ieee754_rem_pio2f+0x248>
 8016c52:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016c56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016c62:	ee17 0a90 	vmov	r0, s15
 8016c66:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016dd8 <__ieee754_rem_pio2f+0x230>
 8016c6a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8016c6e:	281f      	cmp	r0, #31
 8016c70:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016de4 <__ieee754_rem_pio2f+0x23c>
 8016c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c78:	eeb1 6a47 	vneg.f32	s12, s14
 8016c7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016c80:	ee16 1a90 	vmov	r1, s13
 8016c84:	dc09      	bgt.n	8016c9a <__ieee754_rem_pio2f+0xf2>
 8016c86:	4a5b      	ldr	r2, [pc, #364]	@ (8016df4 <__ieee754_rem_pio2f+0x24c>)
 8016c88:	1e47      	subs	r7, r0, #1
 8016c8a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8016c8e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8016c92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d107      	bne.n	8016caa <__ieee754_rem_pio2f+0x102>
 8016c9a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8016c9e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8016ca2:	2a08      	cmp	r2, #8
 8016ca4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016ca8:	dc14      	bgt.n	8016cd4 <__ieee754_rem_pio2f+0x12c>
 8016caa:	6021      	str	r1, [r4, #0]
 8016cac:	ed94 7a00 	vldr	s14, [r4]
 8016cb0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016cb4:	2e00      	cmp	r6, #0
 8016cb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016cba:	ed84 0a01 	vstr	s0, [r4, #4]
 8016cbe:	daa6      	bge.n	8016c0e <__ieee754_rem_pio2f+0x66>
 8016cc0:	eeb1 7a47 	vneg.f32	s14, s14
 8016cc4:	eeb1 0a40 	vneg.f32	s0, s0
 8016cc8:	ed84 7a00 	vstr	s14, [r4]
 8016ccc:	ed84 0a01 	vstr	s0, [r4, #4]
 8016cd0:	4240      	negs	r0, r0
 8016cd2:	e79c      	b.n	8016c0e <__ieee754_rem_pio2f+0x66>
 8016cd4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8016de0 <__ieee754_rem_pio2f+0x238>
 8016cd8:	eef0 6a40 	vmov.f32	s13, s0
 8016cdc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016ce0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016ce4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016ce8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016de8 <__ieee754_rem_pio2f+0x240>
 8016cec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016cf0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016cf4:	ee15 2a90 	vmov	r2, s11
 8016cf8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016cfc:	1a5b      	subs	r3, r3, r1
 8016cfe:	2b19      	cmp	r3, #25
 8016d00:	dc04      	bgt.n	8016d0c <__ieee754_rem_pio2f+0x164>
 8016d02:	edc4 5a00 	vstr	s11, [r4]
 8016d06:	eeb0 0a66 	vmov.f32	s0, s13
 8016d0a:	e7cf      	b.n	8016cac <__ieee754_rem_pio2f+0x104>
 8016d0c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8016df8 <__ieee754_rem_pio2f+0x250>
 8016d10:	eeb0 0a66 	vmov.f32	s0, s13
 8016d14:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016d18:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016d1c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8016dfc <__ieee754_rem_pio2f+0x254>
 8016d20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016d24:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016d28:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016d2c:	ed84 7a00 	vstr	s14, [r4]
 8016d30:	e7bc      	b.n	8016cac <__ieee754_rem_pio2f+0x104>
 8016d32:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8016d36:	d306      	bcc.n	8016d46 <__ieee754_rem_pio2f+0x19e>
 8016d38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016d3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8016d40:	edc0 7a00 	vstr	s15, [r0]
 8016d44:	e73e      	b.n	8016bc4 <__ieee754_rem_pio2f+0x1c>
 8016d46:	15ea      	asrs	r2, r5, #23
 8016d48:	3a86      	subs	r2, #134	@ 0x86
 8016d4a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8016d4e:	ee07 3a90 	vmov	s15, r3
 8016d52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016d56:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8016e00 <__ieee754_rem_pio2f+0x258>
 8016d5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d62:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016d66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016d6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d76:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016d7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d86:	edcd 7a05 	vstr	s15, [sp, #20]
 8016d8a:	d11e      	bne.n	8016dca <__ieee754_rem_pio2f+0x222>
 8016d8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d94:	bf0c      	ite	eq
 8016d96:	2301      	moveq	r3, #1
 8016d98:	2302      	movne	r3, #2
 8016d9a:	491a      	ldr	r1, [pc, #104]	@ (8016e04 <__ieee754_rem_pio2f+0x25c>)
 8016d9c:	9101      	str	r1, [sp, #4]
 8016d9e:	2102      	movs	r1, #2
 8016da0:	9100      	str	r1, [sp, #0]
 8016da2:	a803      	add	r0, sp, #12
 8016da4:	4621      	mov	r1, r4
 8016da6:	f000 f903 	bl	8016fb0 <__kernel_rem_pio2f>
 8016daa:	2e00      	cmp	r6, #0
 8016dac:	f6bf af2f 	bge.w	8016c0e <__ieee754_rem_pio2f+0x66>
 8016db0:	edd4 7a00 	vldr	s15, [r4]
 8016db4:	eef1 7a67 	vneg.f32	s15, s15
 8016db8:	edc4 7a00 	vstr	s15, [r4]
 8016dbc:	edd4 7a01 	vldr	s15, [r4, #4]
 8016dc0:	eef1 7a67 	vneg.f32	s15, s15
 8016dc4:	edc4 7a01 	vstr	s15, [r4, #4]
 8016dc8:	e782      	b.n	8016cd0 <__ieee754_rem_pio2f+0x128>
 8016dca:	2303      	movs	r3, #3
 8016dcc:	e7e5      	b.n	8016d9a <__ieee754_rem_pio2f+0x1f2>
 8016dce:	bf00      	nop
 8016dd0:	3f490fd8 	.word	0x3f490fd8
 8016dd4:	4016cbe3 	.word	0x4016cbe3
 8016dd8:	3fc90f80 	.word	0x3fc90f80
 8016ddc:	3fc90fd0 	.word	0x3fc90fd0
 8016de0:	37354400 	.word	0x37354400
 8016de4:	37354443 	.word	0x37354443
 8016de8:	2e85a308 	.word	0x2e85a308
 8016dec:	43490f80 	.word	0x43490f80
 8016df0:	3f22f984 	.word	0x3f22f984
 8016df4:	08017fd8 	.word	0x08017fd8
 8016df8:	2e85a300 	.word	0x2e85a300
 8016dfc:	248d3132 	.word	0x248d3132
 8016e00:	43800000 	.word	0x43800000
 8016e04:	08018058 	.word	0x08018058

08016e08 <atanf>:
 8016e08:	b538      	push	{r3, r4, r5, lr}
 8016e0a:	ee10 5a10 	vmov	r5, s0
 8016e0e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8016e12:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8016e16:	eef0 7a40 	vmov.f32	s15, s0
 8016e1a:	d310      	bcc.n	8016e3e <atanf+0x36>
 8016e1c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8016e20:	d904      	bls.n	8016e2c <atanf+0x24>
 8016e22:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016e26:	eeb0 0a67 	vmov.f32	s0, s15
 8016e2a:	bd38      	pop	{r3, r4, r5, pc}
 8016e2c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8016f64 <atanf+0x15c>
 8016e30:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8016f68 <atanf+0x160>
 8016e34:	2d00      	cmp	r5, #0
 8016e36:	bfc8      	it	gt
 8016e38:	eef0 7a47 	vmovgt.f32	s15, s14
 8016e3c:	e7f3      	b.n	8016e26 <atanf+0x1e>
 8016e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8016f6c <atanf+0x164>)
 8016e40:	429c      	cmp	r4, r3
 8016e42:	d810      	bhi.n	8016e66 <atanf+0x5e>
 8016e44:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8016e48:	d20a      	bcs.n	8016e60 <atanf+0x58>
 8016e4a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8016f70 <atanf+0x168>
 8016e4e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016e56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e5e:	dce2      	bgt.n	8016e26 <atanf+0x1e>
 8016e60:	f04f 33ff 	mov.w	r3, #4294967295
 8016e64:	e013      	b.n	8016e8e <atanf+0x86>
 8016e66:	f7ff fb2f 	bl	80164c8 <fabsf>
 8016e6a:	4b42      	ldr	r3, [pc, #264]	@ (8016f74 <atanf+0x16c>)
 8016e6c:	429c      	cmp	r4, r3
 8016e6e:	d84f      	bhi.n	8016f10 <atanf+0x108>
 8016e70:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8016e74:	429c      	cmp	r4, r3
 8016e76:	d841      	bhi.n	8016efc <atanf+0xf4>
 8016e78:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8016e7c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016e80:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016e84:	2300      	movs	r3, #0
 8016e86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016e8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016e8e:	1c5a      	adds	r2, r3, #1
 8016e90:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8016e94:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8016f78 <atanf+0x170>
 8016e98:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8016f7c <atanf+0x174>
 8016e9c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8016f80 <atanf+0x178>
 8016ea0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8016ea4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8016ea8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8016f84 <atanf+0x17c>
 8016eac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016eb0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8016f88 <atanf+0x180>
 8016eb4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016eb8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8016f8c <atanf+0x184>
 8016ebc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016ec0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8016f90 <atanf+0x188>
 8016ec4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016ec8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8016f94 <atanf+0x18c>
 8016ecc:	eea6 5a87 	vfma.f32	s10, s13, s14
 8016ed0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8016f98 <atanf+0x190>
 8016ed4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016ed8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8016f9c <atanf+0x194>
 8016edc:	eea7 5a26 	vfma.f32	s10, s14, s13
 8016ee0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8016fa0 <atanf+0x198>
 8016ee4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016ee8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016eec:	eea5 7a86 	vfma.f32	s14, s11, s12
 8016ef0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016ef4:	d121      	bne.n	8016f3a <atanf+0x132>
 8016ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016efa:	e794      	b.n	8016e26 <atanf+0x1e>
 8016efc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016f00:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016f04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016f08:	2301      	movs	r3, #1
 8016f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016f0e:	e7be      	b.n	8016e8e <atanf+0x86>
 8016f10:	4b24      	ldr	r3, [pc, #144]	@ (8016fa4 <atanf+0x19c>)
 8016f12:	429c      	cmp	r4, r3
 8016f14:	d80b      	bhi.n	8016f2e <atanf+0x126>
 8016f16:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8016f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016f1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016f22:	2302      	movs	r3, #2
 8016f24:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f2c:	e7af      	b.n	8016e8e <atanf+0x86>
 8016f2e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016f32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016f36:	2303      	movs	r3, #3
 8016f38:	e7a9      	b.n	8016e8e <atanf+0x86>
 8016f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8016fa8 <atanf+0x1a0>)
 8016f3c:	491b      	ldr	r1, [pc, #108]	@ (8016fac <atanf+0x1a4>)
 8016f3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016f42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016f46:	edd3 6a00 	vldr	s13, [r3]
 8016f4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016f4e:	2d00      	cmp	r5, #0
 8016f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016f54:	edd2 7a00 	vldr	s15, [r2]
 8016f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f5c:	bfb8      	it	lt
 8016f5e:	eef1 7a67 	vneglt.f32	s15, s15
 8016f62:	e760      	b.n	8016e26 <atanf+0x1e>
 8016f64:	bfc90fdb 	.word	0xbfc90fdb
 8016f68:	3fc90fdb 	.word	0x3fc90fdb
 8016f6c:	3edfffff 	.word	0x3edfffff
 8016f70:	7149f2ca 	.word	0x7149f2ca
 8016f74:	3f97ffff 	.word	0x3f97ffff
 8016f78:	3c8569d7 	.word	0x3c8569d7
 8016f7c:	3d4bda59 	.word	0x3d4bda59
 8016f80:	bd6ef16b 	.word	0xbd6ef16b
 8016f84:	3d886b35 	.word	0x3d886b35
 8016f88:	3dba2e6e 	.word	0x3dba2e6e
 8016f8c:	3e124925 	.word	0x3e124925
 8016f90:	3eaaaaab 	.word	0x3eaaaaab
 8016f94:	bd15a221 	.word	0xbd15a221
 8016f98:	bd9d8795 	.word	0xbd9d8795
 8016f9c:	bde38e38 	.word	0xbde38e38
 8016fa0:	be4ccccd 	.word	0xbe4ccccd
 8016fa4:	401bffff 	.word	0x401bffff
 8016fa8:	08018380 	.word	0x08018380
 8016fac:	08018370 	.word	0x08018370

08016fb0 <__kernel_rem_pio2f>:
 8016fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fb4:	ed2d 8b04 	vpush	{d8-d9}
 8016fb8:	b0d9      	sub	sp, #356	@ 0x164
 8016fba:	4690      	mov	r8, r2
 8016fbc:	9001      	str	r0, [sp, #4]
 8016fbe:	4ab6      	ldr	r2, [pc, #728]	@ (8017298 <__kernel_rem_pio2f+0x2e8>)
 8016fc0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016fc2:	f118 0f04 	cmn.w	r8, #4
 8016fc6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8016fca:	460f      	mov	r7, r1
 8016fcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8016fd0:	db26      	blt.n	8017020 <__kernel_rem_pio2f+0x70>
 8016fd2:	f1b8 0203 	subs.w	r2, r8, #3
 8016fd6:	bf48      	it	mi
 8016fd8:	f108 0204 	addmi.w	r2, r8, #4
 8016fdc:	10d2      	asrs	r2, r2, #3
 8016fde:	1c55      	adds	r5, r2, #1
 8016fe0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016fe2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 8016fe6:	00e8      	lsls	r0, r5, #3
 8016fe8:	eba2 060b 	sub.w	r6, r2, fp
 8016fec:	9002      	str	r0, [sp, #8]
 8016fee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016ff2:	eb0a 0c0b 	add.w	ip, sl, fp
 8016ff6:	ac1c      	add	r4, sp, #112	@ 0x70
 8016ff8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	4560      	cmp	r0, ip
 8017000:	dd10      	ble.n	8017024 <__kernel_rem_pio2f+0x74>
 8017002:	a91c      	add	r1, sp, #112	@ 0x70
 8017004:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017008:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801700c:	2600      	movs	r6, #0
 801700e:	4556      	cmp	r6, sl
 8017010:	dc24      	bgt.n	801705c <__kernel_rem_pio2f+0xac>
 8017012:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017016:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 801701a:	4684      	mov	ip, r0
 801701c:	2400      	movs	r4, #0
 801701e:	e016      	b.n	801704e <__kernel_rem_pio2f+0x9e>
 8017020:	2200      	movs	r2, #0
 8017022:	e7dc      	b.n	8016fde <__kernel_rem_pio2f+0x2e>
 8017024:	42c6      	cmn	r6, r0
 8017026:	bf5d      	ittte	pl
 8017028:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801702c:	ee07 1a90 	vmovpl	s15, r1
 8017030:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017034:	eef0 7a47 	vmovmi.f32	s15, s14
 8017038:	ece4 7a01 	vstmia	r4!, {s15}
 801703c:	3001      	adds	r0, #1
 801703e:	e7de      	b.n	8016ffe <__kernel_rem_pio2f+0x4e>
 8017040:	ecfe 6a01 	vldmia	lr!, {s13}
 8017044:	ed3c 7a01 	vldmdb	ip!, {s14}
 8017048:	eee6 7a87 	vfma.f32	s15, s13, s14
 801704c:	3401      	adds	r4, #1
 801704e:	455c      	cmp	r4, fp
 8017050:	ddf6      	ble.n	8017040 <__kernel_rem_pio2f+0x90>
 8017052:	ece9 7a01 	vstmia	r9!, {s15}
 8017056:	3601      	adds	r6, #1
 8017058:	3004      	adds	r0, #4
 801705a:	e7d8      	b.n	801700e <__kernel_rem_pio2f+0x5e>
 801705c:	a908      	add	r1, sp, #32
 801705e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017062:	9104      	str	r1, [sp, #16]
 8017064:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017066:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80172a4 <__kernel_rem_pio2f+0x2f4>
 801706a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80172a0 <__kernel_rem_pio2f+0x2f0>
 801706e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017072:	9203      	str	r2, [sp, #12]
 8017074:	4654      	mov	r4, sl
 8017076:	00a2      	lsls	r2, r4, #2
 8017078:	9205      	str	r2, [sp, #20]
 801707a:	aa58      	add	r2, sp, #352	@ 0x160
 801707c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017080:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017084:	a944      	add	r1, sp, #272	@ 0x110
 8017086:	aa08      	add	r2, sp, #32
 8017088:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801708c:	4694      	mov	ip, r2
 801708e:	4626      	mov	r6, r4
 8017090:	2e00      	cmp	r6, #0
 8017092:	dc4c      	bgt.n	801712e <__kernel_rem_pio2f+0x17e>
 8017094:	4628      	mov	r0, r5
 8017096:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801709a:	f000 f9f1 	bl	8017480 <scalbnf>
 801709e:	eeb0 8a40 	vmov.f32	s16, s0
 80170a2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80170a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80170aa:	f000 fa4f 	bl	801754c <floorf>
 80170ae:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80170b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80170b6:	2d00      	cmp	r5, #0
 80170b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80170bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80170c0:	ee17 9a90 	vmov	r9, s15
 80170c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170c8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80170cc:	dd41      	ble.n	8017152 <__kernel_rem_pio2f+0x1a2>
 80170ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80170d2:	a908      	add	r1, sp, #32
 80170d4:	f1c5 0e08 	rsb	lr, r5, #8
 80170d8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80170dc:	fa46 f00e 	asr.w	r0, r6, lr
 80170e0:	4481      	add	r9, r0
 80170e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80170e6:	1a36      	subs	r6, r6, r0
 80170e8:	f1c5 0007 	rsb	r0, r5, #7
 80170ec:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80170f0:	4106      	asrs	r6, r0
 80170f2:	2e00      	cmp	r6, #0
 80170f4:	dd3c      	ble.n	8017170 <__kernel_rem_pio2f+0x1c0>
 80170f6:	f04f 0e00 	mov.w	lr, #0
 80170fa:	f109 0901 	add.w	r9, r9, #1
 80170fe:	4670      	mov	r0, lr
 8017100:	4574      	cmp	r4, lr
 8017102:	dc68      	bgt.n	80171d6 <__kernel_rem_pio2f+0x226>
 8017104:	2d00      	cmp	r5, #0
 8017106:	dd03      	ble.n	8017110 <__kernel_rem_pio2f+0x160>
 8017108:	2d01      	cmp	r5, #1
 801710a:	d074      	beq.n	80171f6 <__kernel_rem_pio2f+0x246>
 801710c:	2d02      	cmp	r5, #2
 801710e:	d07d      	beq.n	801720c <__kernel_rem_pio2f+0x25c>
 8017110:	2e02      	cmp	r6, #2
 8017112:	d12d      	bne.n	8017170 <__kernel_rem_pio2f+0x1c0>
 8017114:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017118:	ee30 8a48 	vsub.f32	s16, s0, s16
 801711c:	b340      	cbz	r0, 8017170 <__kernel_rem_pio2f+0x1c0>
 801711e:	4628      	mov	r0, r5
 8017120:	9306      	str	r3, [sp, #24]
 8017122:	f000 f9ad 	bl	8017480 <scalbnf>
 8017126:	9b06      	ldr	r3, [sp, #24]
 8017128:	ee38 8a40 	vsub.f32	s16, s16, s0
 801712c:	e020      	b.n	8017170 <__kernel_rem_pio2f+0x1c0>
 801712e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017132:	3e01      	subs	r6, #1
 8017134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801713c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017140:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017144:	ecac 0a01 	vstmia	ip!, {s0}
 8017148:	ed30 0a01 	vldmdb	r0!, {s0}
 801714c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017150:	e79e      	b.n	8017090 <__kernel_rem_pio2f+0xe0>
 8017152:	d105      	bne.n	8017160 <__kernel_rem_pio2f+0x1b0>
 8017154:	1e60      	subs	r0, r4, #1
 8017156:	a908      	add	r1, sp, #32
 8017158:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801715c:	11f6      	asrs	r6, r6, #7
 801715e:	e7c8      	b.n	80170f2 <__kernel_rem_pio2f+0x142>
 8017160:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017164:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716c:	da31      	bge.n	80171d2 <__kernel_rem_pio2f+0x222>
 801716e:	2600      	movs	r6, #0
 8017170:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017178:	f040 8098 	bne.w	80172ac <__kernel_rem_pio2f+0x2fc>
 801717c:	1e60      	subs	r0, r4, #1
 801717e:	2200      	movs	r2, #0
 8017180:	4550      	cmp	r0, sl
 8017182:	da4b      	bge.n	801721c <__kernel_rem_pio2f+0x26c>
 8017184:	2a00      	cmp	r2, #0
 8017186:	d065      	beq.n	8017254 <__kernel_rem_pio2f+0x2a4>
 8017188:	3c01      	subs	r4, #1
 801718a:	ab08      	add	r3, sp, #32
 801718c:	3d08      	subs	r5, #8
 801718e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d0f8      	beq.n	8017188 <__kernel_rem_pio2f+0x1d8>
 8017196:	4628      	mov	r0, r5
 8017198:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801719c:	f000 f970 	bl	8017480 <scalbnf>
 80171a0:	1c63      	adds	r3, r4, #1
 80171a2:	aa44      	add	r2, sp, #272	@ 0x110
 80171a4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80172a4 <__kernel_rem_pio2f+0x2f4>
 80171a8:	0099      	lsls	r1, r3, #2
 80171aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80171ae:	4623      	mov	r3, r4
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f280 80a9 	bge.w	8017308 <__kernel_rem_pio2f+0x358>
 80171b6:	4623      	mov	r3, r4
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	f2c0 80c7 	blt.w	801734c <__kernel_rem_pio2f+0x39c>
 80171be:	aa44      	add	r2, sp, #272	@ 0x110
 80171c0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80171c4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801729c <__kernel_rem_pio2f+0x2ec>
 80171c8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 80171cc:	2000      	movs	r0, #0
 80171ce:	1ae2      	subs	r2, r4, r3
 80171d0:	e0b1      	b.n	8017336 <__kernel_rem_pio2f+0x386>
 80171d2:	2602      	movs	r6, #2
 80171d4:	e78f      	b.n	80170f6 <__kernel_rem_pio2f+0x146>
 80171d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80171da:	b948      	cbnz	r0, 80171f0 <__kernel_rem_pio2f+0x240>
 80171dc:	b121      	cbz	r1, 80171e8 <__kernel_rem_pio2f+0x238>
 80171de:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80171e2:	f842 1c04 	str.w	r1, [r2, #-4]
 80171e6:	2101      	movs	r1, #1
 80171e8:	f10e 0e01 	add.w	lr, lr, #1
 80171ec:	4608      	mov	r0, r1
 80171ee:	e787      	b.n	8017100 <__kernel_rem_pio2f+0x150>
 80171f0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80171f4:	e7f5      	b.n	80171e2 <__kernel_rem_pio2f+0x232>
 80171f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80171fa:	aa08      	add	r2, sp, #32
 80171fc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017200:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017204:	a908      	add	r1, sp, #32
 8017206:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801720a:	e781      	b.n	8017110 <__kernel_rem_pio2f+0x160>
 801720c:	f104 3cff 	add.w	ip, r4, #4294967295
 8017210:	aa08      	add	r2, sp, #32
 8017212:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017216:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801721a:	e7f3      	b.n	8017204 <__kernel_rem_pio2f+0x254>
 801721c:	a908      	add	r1, sp, #32
 801721e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017222:	3801      	subs	r0, #1
 8017224:	430a      	orrs	r2, r1
 8017226:	e7ab      	b.n	8017180 <__kernel_rem_pio2f+0x1d0>
 8017228:	3201      	adds	r2, #1
 801722a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801722e:	2e00      	cmp	r6, #0
 8017230:	d0fa      	beq.n	8017228 <__kernel_rem_pio2f+0x278>
 8017232:	9905      	ldr	r1, [sp, #20]
 8017234:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8017238:	eb0d 0001 	add.w	r0, sp, r1
 801723c:	18e6      	adds	r6, r4, r3
 801723e:	a91c      	add	r1, sp, #112	@ 0x70
 8017240:	f104 0c01 	add.w	ip, r4, #1
 8017244:	384c      	subs	r0, #76	@ 0x4c
 8017246:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801724a:	4422      	add	r2, r4
 801724c:	4562      	cmp	r2, ip
 801724e:	da04      	bge.n	801725a <__kernel_rem_pio2f+0x2aa>
 8017250:	4614      	mov	r4, r2
 8017252:	e710      	b.n	8017076 <__kernel_rem_pio2f+0xc6>
 8017254:	9804      	ldr	r0, [sp, #16]
 8017256:	2201      	movs	r2, #1
 8017258:	e7e7      	b.n	801722a <__kernel_rem_pio2f+0x27a>
 801725a:	9903      	ldr	r1, [sp, #12]
 801725c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017260:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017264:	9105      	str	r1, [sp, #20]
 8017266:	ee07 1a90 	vmov	s15, r1
 801726a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801726e:	2400      	movs	r4, #0
 8017270:	ece6 7a01 	vstmia	r6!, {s15}
 8017274:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 8017278:	46b1      	mov	r9, r6
 801727a:	455c      	cmp	r4, fp
 801727c:	dd04      	ble.n	8017288 <__kernel_rem_pio2f+0x2d8>
 801727e:	ece0 7a01 	vstmia	r0!, {s15}
 8017282:	f10c 0c01 	add.w	ip, ip, #1
 8017286:	e7e1      	b.n	801724c <__kernel_rem_pio2f+0x29c>
 8017288:	ecfe 6a01 	vldmia	lr!, {s13}
 801728c:	ed39 7a01 	vldmdb	r9!, {s14}
 8017290:	3401      	adds	r4, #1
 8017292:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017296:	e7f0      	b.n	801727a <__kernel_rem_pio2f+0x2ca>
 8017298:	080183bc 	.word	0x080183bc
 801729c:	08018390 	.word	0x08018390
 80172a0:	43800000 	.word	0x43800000
 80172a4:	3b800000 	.word	0x3b800000
 80172a8:	00000000 	.word	0x00000000
 80172ac:	9b02      	ldr	r3, [sp, #8]
 80172ae:	eeb0 0a48 	vmov.f32	s0, s16
 80172b2:	eba3 0008 	sub.w	r0, r3, r8
 80172b6:	f000 f8e3 	bl	8017480 <scalbnf>
 80172ba:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80172a0 <__kernel_rem_pio2f+0x2f0>
 80172be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80172c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c6:	db19      	blt.n	80172fc <__kernel_rem_pio2f+0x34c>
 80172c8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80172a4 <__kernel_rem_pio2f+0x2f4>
 80172cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80172d0:	aa08      	add	r2, sp, #32
 80172d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172d6:	3508      	adds	r5, #8
 80172d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172dc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80172e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80172e8:	ee10 3a10 	vmov	r3, s0
 80172ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80172f0:	ee17 3a90 	vmov	r3, s15
 80172f4:	3401      	adds	r4, #1
 80172f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80172fa:	e74c      	b.n	8017196 <__kernel_rem_pio2f+0x1e6>
 80172fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017300:	aa08      	add	r2, sp, #32
 8017302:	ee10 3a10 	vmov	r3, s0
 8017306:	e7f6      	b.n	80172f6 <__kernel_rem_pio2f+0x346>
 8017308:	a808      	add	r0, sp, #32
 801730a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801730e:	9001      	str	r0, [sp, #4]
 8017310:	ee07 0a90 	vmov	s15, r0
 8017314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017318:	3b01      	subs	r3, #1
 801731a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801731e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017322:	ed62 7a01 	vstmdb	r2!, {s15}
 8017326:	e743      	b.n	80171b0 <__kernel_rem_pio2f+0x200>
 8017328:	ecfc 6a01 	vldmia	ip!, {s13}
 801732c:	ecb5 7a01 	vldmia	r5!, {s14}
 8017330:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017334:	3001      	adds	r0, #1
 8017336:	4550      	cmp	r0, sl
 8017338:	dc01      	bgt.n	801733e <__kernel_rem_pio2f+0x38e>
 801733a:	4290      	cmp	r0, r2
 801733c:	ddf4      	ble.n	8017328 <__kernel_rem_pio2f+0x378>
 801733e:	a858      	add	r0, sp, #352	@ 0x160
 8017340:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017344:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8017348:	3b01      	subs	r3, #1
 801734a:	e735      	b.n	80171b8 <__kernel_rem_pio2f+0x208>
 801734c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801734e:	2b02      	cmp	r3, #2
 8017350:	dc09      	bgt.n	8017366 <__kernel_rem_pio2f+0x3b6>
 8017352:	2b00      	cmp	r3, #0
 8017354:	dc27      	bgt.n	80173a6 <__kernel_rem_pio2f+0x3f6>
 8017356:	d040      	beq.n	80173da <__kernel_rem_pio2f+0x42a>
 8017358:	f009 0007 	and.w	r0, r9, #7
 801735c:	b059      	add	sp, #356	@ 0x164
 801735e:	ecbd 8b04 	vpop	{d8-d9}
 8017362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017366:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017368:	2b03      	cmp	r3, #3
 801736a:	d1f5      	bne.n	8017358 <__kernel_rem_pio2f+0x3a8>
 801736c:	aa30      	add	r2, sp, #192	@ 0xc0
 801736e:	1f0b      	subs	r3, r1, #4
 8017370:	4413      	add	r3, r2
 8017372:	461a      	mov	r2, r3
 8017374:	4620      	mov	r0, r4
 8017376:	2800      	cmp	r0, #0
 8017378:	dc50      	bgt.n	801741c <__kernel_rem_pio2f+0x46c>
 801737a:	4622      	mov	r2, r4
 801737c:	2a01      	cmp	r2, #1
 801737e:	dc5d      	bgt.n	801743c <__kernel_rem_pio2f+0x48c>
 8017380:	ab30      	add	r3, sp, #192	@ 0xc0
 8017382:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 8017386:	440b      	add	r3, r1
 8017388:	2c01      	cmp	r4, #1
 801738a:	dc67      	bgt.n	801745c <__kernel_rem_pio2f+0x4ac>
 801738c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017390:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8017394:	2e00      	cmp	r6, #0
 8017396:	d167      	bne.n	8017468 <__kernel_rem_pio2f+0x4b8>
 8017398:	edc7 6a00 	vstr	s13, [r7]
 801739c:	ed87 7a01 	vstr	s14, [r7, #4]
 80173a0:	edc7 7a02 	vstr	s15, [r7, #8]
 80173a4:	e7d8      	b.n	8017358 <__kernel_rem_pio2f+0x3a8>
 80173a6:	ab30      	add	r3, sp, #192	@ 0xc0
 80173a8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 80173ac:	440b      	add	r3, r1
 80173ae:	4622      	mov	r2, r4
 80173b0:	2a00      	cmp	r2, #0
 80173b2:	da24      	bge.n	80173fe <__kernel_rem_pio2f+0x44e>
 80173b4:	b34e      	cbz	r6, 801740a <__kernel_rem_pio2f+0x45a>
 80173b6:	eef1 7a47 	vneg.f32	s15, s14
 80173ba:	edc7 7a00 	vstr	s15, [r7]
 80173be:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80173c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173c6:	aa31      	add	r2, sp, #196	@ 0xc4
 80173c8:	2301      	movs	r3, #1
 80173ca:	429c      	cmp	r4, r3
 80173cc:	da20      	bge.n	8017410 <__kernel_rem_pio2f+0x460>
 80173ce:	b10e      	cbz	r6, 80173d4 <__kernel_rem_pio2f+0x424>
 80173d0:	eef1 7a67 	vneg.f32	s15, s15
 80173d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80173d8:	e7be      	b.n	8017358 <__kernel_rem_pio2f+0x3a8>
 80173da:	ab30      	add	r3, sp, #192	@ 0xc0
 80173dc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80172a8 <__kernel_rem_pio2f+0x2f8>
 80173e0:	440b      	add	r3, r1
 80173e2:	2c00      	cmp	r4, #0
 80173e4:	da05      	bge.n	80173f2 <__kernel_rem_pio2f+0x442>
 80173e6:	b10e      	cbz	r6, 80173ec <__kernel_rem_pio2f+0x43c>
 80173e8:	eef1 7a67 	vneg.f32	s15, s15
 80173ec:	edc7 7a00 	vstr	s15, [r7]
 80173f0:	e7b2      	b.n	8017358 <__kernel_rem_pio2f+0x3a8>
 80173f2:	ed33 7a01 	vldmdb	r3!, {s14}
 80173f6:	3c01      	subs	r4, #1
 80173f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173fc:	e7f1      	b.n	80173e2 <__kernel_rem_pio2f+0x432>
 80173fe:	ed73 7a01 	vldmdb	r3!, {s15}
 8017402:	3a01      	subs	r2, #1
 8017404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017408:	e7d2      	b.n	80173b0 <__kernel_rem_pio2f+0x400>
 801740a:	eef0 7a47 	vmov.f32	s15, s14
 801740e:	e7d4      	b.n	80173ba <__kernel_rem_pio2f+0x40a>
 8017410:	ecb2 7a01 	vldmia	r2!, {s14}
 8017414:	3301      	adds	r3, #1
 8017416:	ee77 7a87 	vadd.f32	s15, s15, s14
 801741a:	e7d6      	b.n	80173ca <__kernel_rem_pio2f+0x41a>
 801741c:	ed72 7a01 	vldmdb	r2!, {s15}
 8017420:	edd2 6a01 	vldr	s13, [r2, #4]
 8017424:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017428:	3801      	subs	r0, #1
 801742a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801742e:	ed82 7a00 	vstr	s14, [r2]
 8017432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017436:	edc2 7a01 	vstr	s15, [r2, #4]
 801743a:	e79c      	b.n	8017376 <__kernel_rem_pio2f+0x3c6>
 801743c:	ed73 7a01 	vldmdb	r3!, {s15}
 8017440:	edd3 6a01 	vldr	s13, [r3, #4]
 8017444:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017448:	3a01      	subs	r2, #1
 801744a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801744e:	ed83 7a00 	vstr	s14, [r3]
 8017452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017456:	edc3 7a01 	vstr	s15, [r3, #4]
 801745a:	e78f      	b.n	801737c <__kernel_rem_pio2f+0x3cc>
 801745c:	ed33 7a01 	vldmdb	r3!, {s14}
 8017460:	3c01      	subs	r4, #1
 8017462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017466:	e78f      	b.n	8017388 <__kernel_rem_pio2f+0x3d8>
 8017468:	eef1 6a66 	vneg.f32	s13, s13
 801746c:	eeb1 7a47 	vneg.f32	s14, s14
 8017470:	edc7 6a00 	vstr	s13, [r7]
 8017474:	ed87 7a01 	vstr	s14, [r7, #4]
 8017478:	eef1 7a67 	vneg.f32	s15, s15
 801747c:	e790      	b.n	80173a0 <__kernel_rem_pio2f+0x3f0>
 801747e:	bf00      	nop

08017480 <scalbnf>:
 8017480:	ee10 3a10 	vmov	r3, s0
 8017484:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017488:	d02b      	beq.n	80174e2 <scalbnf+0x62>
 801748a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801748e:	d302      	bcc.n	8017496 <scalbnf+0x16>
 8017490:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017494:	4770      	bx	lr
 8017496:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801749a:	d123      	bne.n	80174e4 <scalbnf+0x64>
 801749c:	4b24      	ldr	r3, [pc, #144]	@ (8017530 <scalbnf+0xb0>)
 801749e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8017534 <scalbnf+0xb4>
 80174a2:	4298      	cmp	r0, r3
 80174a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80174a8:	db17      	blt.n	80174da <scalbnf+0x5a>
 80174aa:	ee10 3a10 	vmov	r3, s0
 80174ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80174b2:	3a19      	subs	r2, #25
 80174b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80174b8:	4288      	cmp	r0, r1
 80174ba:	dd15      	ble.n	80174e8 <scalbnf+0x68>
 80174bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8017538 <scalbnf+0xb8>
 80174c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801753c <scalbnf+0xbc>
 80174c4:	ee10 3a10 	vmov	r3, s0
 80174c8:	eeb0 7a67 	vmov.f32	s14, s15
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	bfb8      	it	lt
 80174d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80174d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80174d8:	4770      	bx	lr
 80174da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017540 <scalbnf+0xc0>
 80174de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80174e2:	4770      	bx	lr
 80174e4:	0dd2      	lsrs	r2, r2, #23
 80174e6:	e7e5      	b.n	80174b4 <scalbnf+0x34>
 80174e8:	4410      	add	r0, r2
 80174ea:	28fe      	cmp	r0, #254	@ 0xfe
 80174ec:	dce6      	bgt.n	80174bc <scalbnf+0x3c>
 80174ee:	2800      	cmp	r0, #0
 80174f0:	dd06      	ble.n	8017500 <scalbnf+0x80>
 80174f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80174f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80174fa:	ee00 3a10 	vmov	s0, r3
 80174fe:	4770      	bx	lr
 8017500:	f110 0f16 	cmn.w	r0, #22
 8017504:	da09      	bge.n	801751a <scalbnf+0x9a>
 8017506:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8017540 <scalbnf+0xc0>
 801750a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8017544 <scalbnf+0xc4>
 801750e:	ee10 3a10 	vmov	r3, s0
 8017512:	eeb0 7a67 	vmov.f32	s14, s15
 8017516:	2b00      	cmp	r3, #0
 8017518:	e7d9      	b.n	80174ce <scalbnf+0x4e>
 801751a:	3019      	adds	r0, #25
 801751c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017520:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017524:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017548 <scalbnf+0xc8>
 8017528:	ee07 3a90 	vmov	s15, r3
 801752c:	e7d7      	b.n	80174de <scalbnf+0x5e>
 801752e:	bf00      	nop
 8017530:	ffff3cb0 	.word	0xffff3cb0
 8017534:	4c000000 	.word	0x4c000000
 8017538:	7149f2ca 	.word	0x7149f2ca
 801753c:	f149f2ca 	.word	0xf149f2ca
 8017540:	0da24260 	.word	0x0da24260
 8017544:	8da24260 	.word	0x8da24260
 8017548:	33000000 	.word	0x33000000

0801754c <floorf>:
 801754c:	ee10 3a10 	vmov	r3, s0
 8017550:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017554:	3a7f      	subs	r2, #127	@ 0x7f
 8017556:	2a16      	cmp	r2, #22
 8017558:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801755c:	dc2b      	bgt.n	80175b6 <floorf+0x6a>
 801755e:	2a00      	cmp	r2, #0
 8017560:	da12      	bge.n	8017588 <floorf+0x3c>
 8017562:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80175c8 <floorf+0x7c>
 8017566:	ee30 0a27 	vadd.f32	s0, s0, s15
 801756a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017572:	dd06      	ble.n	8017582 <floorf+0x36>
 8017574:	2b00      	cmp	r3, #0
 8017576:	da24      	bge.n	80175c2 <floorf+0x76>
 8017578:	2900      	cmp	r1, #0
 801757a:	4b14      	ldr	r3, [pc, #80]	@ (80175cc <floorf+0x80>)
 801757c:	bf08      	it	eq
 801757e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8017582:	ee00 3a10 	vmov	s0, r3
 8017586:	4770      	bx	lr
 8017588:	4911      	ldr	r1, [pc, #68]	@ (80175d0 <floorf+0x84>)
 801758a:	4111      	asrs	r1, r2
 801758c:	420b      	tst	r3, r1
 801758e:	d0fa      	beq.n	8017586 <floorf+0x3a>
 8017590:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80175c8 <floorf+0x7c>
 8017594:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017598:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a0:	ddef      	ble.n	8017582 <floorf+0x36>
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	bfbe      	ittt	lt
 80175a6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80175aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80175ae:	189b      	addlt	r3, r3, r2
 80175b0:	ea23 0301 	bic.w	r3, r3, r1
 80175b4:	e7e5      	b.n	8017582 <floorf+0x36>
 80175b6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80175ba:	d3e4      	bcc.n	8017586 <floorf+0x3a>
 80175bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80175c0:	4770      	bx	lr
 80175c2:	2300      	movs	r3, #0
 80175c4:	e7dd      	b.n	8017582 <floorf+0x36>
 80175c6:	bf00      	nop
 80175c8:	7149f2ca 	.word	0x7149f2ca
 80175cc:	bf800000 	.word	0xbf800000
 80175d0:	007fffff 	.word	0x007fffff

080175d4 <_init>:
 80175d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175d6:	bf00      	nop
 80175d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175da:	bc08      	pop	{r3}
 80175dc:	469e      	mov	lr, r3
 80175de:	4770      	bx	lr

080175e0 <_fini>:
 80175e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e2:	bf00      	nop
 80175e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e6:	bc08      	pop	{r3}
 80175e8:	469e      	mov	lr, r3
 80175ea:	4770      	bx	lr

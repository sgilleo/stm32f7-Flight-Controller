
stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014054  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08014238  08014238  00015238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a40  08014a40  000162d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014a40  08014a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a48  08014a48  000162d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a48  08014a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014a4c  08014a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08014a50  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002134  200002d4  08014d24  000162d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002408  08014d24  00016408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d7b  00000000  00000000  00016304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053e7  00000000  00000000  0003b07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f1  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299f1  00000000  00000000  00043909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d58  00000000  00000000  0006d2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebea1  00000000  00000000  00097052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090bc  00000000  00000000  00182f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018bff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801421c 	.word	0x0801421c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	0801421c 	.word	0x0801421c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	0000      	movs	r0, r0
	...

08001008 <AHRS_Update_Gyro>:

#include "AHRS.h"

Vec3 attitude_gyro, euler_rates_gyro, attitude_acc, attitude = {0.0f, 0.0f, 0.0f};

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001008:	b580      	push	{r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	eef0 6a40 	vmov.f32	s13, s0
 8001016:	eeb0 7a60 	vmov.f32	s14, s1
 800101a:	eef0 7a41 	vmov.f32	s15, s2
 800101e:	edc7 1a00 	vstr	s3, [r7]
 8001022:	edc7 6a01 	vstr	s13, [r7, #4]
 8001026:	ed87 7a02 	vstr	s14, [r7, #8]
 800102a:	edc7 7a03 	vstr	s15, [r7, #12]

	euler_rates_gyro.x = gyro.x + gyro.y*sinf(attitude.x)*tanf(attitude.y) + gyro.z*cosf(attitude.x)*tanf(attitude.y);
 800102e:	ed97 8a01 	vldr	s16, [r7, #4]
 8001032:	edd7 8a02 	vldr	s17, [r7, #8]
 8001036:	4b96      	ldr	r3, [pc, #600]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	f012 f86e 	bl	8013120 <sinf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800104c:	4b90      	ldr	r3, [pc, #576]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 800104e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f012 f8a9 	bl	80131ac <tanf>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001062:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001066:	edd7 8a03 	vldr	s17, [r7, #12]
 800106a:	4b89      	ldr	r3, [pc, #548]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f012 f808 	bl	8013088 <cosf>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001080:	4b83      	ldr	r3, [pc, #524]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 8001082:	edd3 7a01 	vldr	s15, [r3, #4]
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	f012 f88f 	bl	80131ac <tanf>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001096:	ee78 7a27 	vadd.f32	s15, s16, s15
 800109a:	4b7e      	ldr	r3, [pc, #504]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
	euler_rates_gyro.y = gyro.y*cosf(attitude.x) - gyro.z*sinf(attitude.x);
 80010a0:	ed97 8a02 	vldr	s16, [r7, #8]
 80010a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	f011 ffeb 	bl	8013088 <cosf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80010ba:	edd7 8a03 	vldr	s17, [r7, #12]
 80010be:	4b74      	ldr	r3, [pc, #464]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	f012 f82a 	bl	8013120 <sinf>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010d4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80010d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 80010da:	edc3 7a01 	vstr	s15, [r3, #4]
	euler_rates_gyro.z = gyro.y*sinf(attitude.x)/cosf(attitude.y) + gyro.z*cosf(attitude.x)/cosf(attitude.y);
 80010de:	ed97 8a02 	vldr	s16, [r7, #8]
 80010e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f012 f818 	bl	8013120 <sinf>
 80010f0:	eef0 7a40 	vmov.f32	s15, s0
 80010f4:	ee68 8a27 	vmul.f32	s17, s16, s15
 80010f8:	4b65      	ldr	r3, [pc, #404]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 80010fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	f011 ffc1 	bl	8013088 <cosf>
 8001106:	eef0 7a40 	vmov.f32	s15, s0
 800110a:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800110e:	edd7 8a03 	vldr	s17, [r7, #12]
 8001112:	4b5f      	ldr	r3, [pc, #380]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f011 ffb4 	bl	8013088 <cosf>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001128:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 800112a:	edd3 7a01 	vldr	s15, [r3, #4]
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f011 ffa9 	bl	8013088 <cosf>
 8001136:	eeb0 7a40 	vmov.f32	s14, s0
 800113a:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800113e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 8001144:	edc3 7a02 	vstr	s15, [r3, #8]

	attitude_gyro.x = attitude.x + euler_rates_gyro.x * dt;
 8001148:	4b51      	ldr	r3, [pc, #324]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 8001150:	edd3 6a00 	vldr	s13, [r3]
 8001154:	edd7 7a00 	vldr	s15, [r7]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
	attitude_gyro.y = attitude.y + euler_rates_gyro.y * dt;
 8001166:	4b4a      	ldr	r3, [pc, #296]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 8001168:	ed93 7a01 	vldr	s14, [r3, #4]
 800116c:	4b49      	ldr	r3, [pc, #292]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 800116e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001172:	edd7 7a00 	vldr	s15, [r7]
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001180:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_gyro.z = attitude.z + euler_rates_gyro.z * dt;
 8001184:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <AHRS_Update_Gyro+0x288>)
 8001186:	ed93 7a02 	vldr	s14, [r3, #8]
 800118a:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <AHRS_Update_Gyro+0x28c>)
 800118c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001190:	edd7 7a00 	vldr	s15, [r7]
 8001194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	4b3e      	ldr	r3, [pc, #248]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 800119e:	edc3 7a02 	vstr	s15, [r3, #8]

	if(attitude_gyro.x > M_PI || attitude_gyro.x <= -M_PI) attitude_gyro.x = -attitude_gyro.x;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9f6 	bl	8000598 <__aeabi_f2d>
 80011ac:	a334      	add	r3, pc, #208	@ (adr r3, 8001280 <AHRS_Update_Gyro+0x278>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff fcd9 	bl	8000b68 <__aeabi_dcmpgt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10c      	bne.n	80011d6 <AHRS_Update_Gyro+0x1ce>
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9e9 	bl	8000598 <__aeabi_f2d>
 80011c6:	a330      	add	r3, pc, #192	@ (adr r3, 8001288 <AHRS_Update_Gyro+0x280>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fcb8 	bl	8000b40 <__aeabi_dcmple>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <AHRS_Update_Gyro+0x1de>
 80011d6:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eef1 7a67 	vneg.f32	s15, s15
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	if(attitude_gyro.y > M_PI || attitude_gyro.y <= -M_PI) attitude_gyro.y = -attitude_gyro.y;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9d4 	bl	8000598 <__aeabi_f2d>
 80011f0:	a323      	add	r3, pc, #140	@ (adr r3, 8001280 <AHRS_Update_Gyro+0x278>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff fcb7 	bl	8000b68 <__aeabi_dcmpgt>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10c      	bne.n	800121a <AHRS_Update_Gyro+0x212>
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9c7 	bl	8000598 <__aeabi_f2d>
 800120a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001288 <AHRS_Update_Gyro+0x280>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff fc96 	bl	8000b40 <__aeabi_dcmple>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <AHRS_Update_Gyro+0x222>
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 800121c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001220:	eef1 7a67 	vneg.f32	s15, s15
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001226:	edc3 7a01 	vstr	s15, [r3, #4]
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9b2 	bl	8000598 <__aeabi_f2d>
 8001234:	a312      	add	r3, pc, #72	@ (adr r3, 8001280 <AHRS_Update_Gyro+0x278>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff fc95 	bl	8000b68 <__aeabi_dcmpgt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10d      	bne.n	8001260 <AHRS_Update_Gyro+0x258>
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9a5 	bl	8000598 <__aeabi_f2d>
 800124e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001288 <AHRS_Update_Gyro+0x280>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fc74 	bl	8000b40 <__aeabi_dcmple>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <AHRS_Update_Gyro+0x258>

}
 800125e:	e007      	b.n	8001270 <AHRS_Update_Gyro+0x268>
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 8001262:	edd3 7a02 	vldr	s15, [r3, #8]
 8001266:	eef1 7a67 	vneg.f32	s15, s15
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <AHRS_Update_Gyro+0x290>)
 800126c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	ecbd 8b02 	vpop	{d8}
 800127a:	bd80      	pop	{r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	54442d18 	.word	0x54442d18
 8001284:	400921fb 	.word	0x400921fb
 8001288:	54442d18 	.word	0x54442d18
 800128c:	c00921fb 	.word	0xc00921fb
 8001290:	20000314 	.word	0x20000314
 8001294:	200002fc 	.word	0x200002fc
 8001298:	200002f0 	.word	0x200002f0

0800129c <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 800129c:	b580      	push	{r7, lr}
 800129e:	ed2d 8b02 	vpush	{d8}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	eef0 6a40 	vmov.f32	s13, s0
 80012aa:	eeb0 7a60 	vmov.f32	s14, s1
 80012ae:	eef0 7a41 	vmov.f32	s15, s2
 80012b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80012b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80012ba:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 80012be:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c6:	eef0 0a47 	vmov.f32	s1, s14
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	f011 fed9 	bl	8013084 <atan2f>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <AHRS_Update_Acc+0xb0>)
 80012d8:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 80012dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e0:	eeb1 8a67 	vneg.f32	s16, s15
 80012e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f948 	bl	8000598 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	ec43 2b10 	vmov	d0, r2, r3
 8001310:	f011 fe8c 	bl	801302c <sqrt>
 8001314:	ec53 2b10 	vmov	r2, r3, d0
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc8c 	bl	8000c38 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	ee00 3a90 	vmov	s1, r3
 8001326:	eeb0 0a48 	vmov.f32	s0, s16
 800132a:	f011 feab 	bl	8013084 <atan2f>
 800132e:	eef0 7a40 	vmov.f32	s15, s0
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <AHRS_Update_Acc+0xb0>)
 8001334:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <AHRS_Update_Acc+0xb4>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a03      	ldr	r2, [pc, #12]	@ (800134c <AHRS_Update_Acc+0xb0>)
 800133e:	6093      	str	r3, [r2, #8]

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	ecbd 8b02 	vpop	{d8}
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000308 	.word	0x20000308
 8001350:	200002f0 	.word	0x200002f0
 8001354:	00000000 	.word	0x00000000

08001358 <AHRS_Update_Complementary_Filter>:

//fc: Cutoff frequency for complementary filter (Hz)
void AHRS_Update_Complementary_Filter(Vec3 gyro, Vec3 acc, float fc, float dt){
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	eeb0 5a40 	vmov.f32	s10, s0
 8001362:	eef0 5a60 	vmov.f32	s11, s1
 8001366:	eeb0 6a41 	vmov.f32	s12, s2
 800136a:	eef0 6a61 	vmov.f32	s13, s3
 800136e:	eeb0 7a42 	vmov.f32	s14, s4
 8001372:	eef0 7a62 	vmov.f32	s15, s5
 8001376:	ed87 3a01 	vstr	s6, [r7, #4]
 800137a:	edc7 3a00 	vstr	s7, [r7]
 800137e:	ed87 5a05 	vstr	s10, [r7, #20]
 8001382:	edc7 5a06 	vstr	s11, [r7, #24]
 8001386:	ed87 6a07 	vstr	s12, [r7, #28]
 800138a:	edc7 6a02 	vstr	s13, [r7, #8]
 800138e:	ed87 7a03 	vstr	s14, [r7, #12]
 8001392:	edc7 7a04 	vstr	s15, [r7, #16]

	AHRS_Update_Gyro(gyro, dt);
 8001396:	edd7 6a05 	vldr	s13, [r7, #20]
 800139a:	ed97 7a06 	vldr	s14, [r7, #24]
 800139e:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a2:	edd7 1a00 	vldr	s3, [r7]
 80013a6:	eeb0 0a66 	vmov.f32	s0, s13
 80013aa:	eef0 0a47 	vmov.f32	s1, s14
 80013ae:	eeb0 1a67 	vmov.f32	s2, s15
 80013b2:	f7ff fe29 	bl	8001008 <AHRS_Update_Gyro>
	AHRS_Update_Acc(acc);
 80013b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80013ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80013be:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c2:	eeb0 0a66 	vmov.f32	s0, s13
 80013c6:	eef0 0a47 	vmov.f32	s1, s14
 80013ca:	eeb0 1a67 	vmov.f32	s2, s15
 80013ce:	f7ff ff65 	bl	800129c <AHRS_Update_Acc>

	float tau = 1/(2*M_PI*fc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff f8e0 	bl	8000598 <__aeabi_f2d>
 80013d8:	a339      	add	r3, pc, #228	@ (adr r3, 80014c0 <AHRS_Update_Complementary_Filter+0x168>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f933 	bl	8000648 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	f04f 0000 	mov.w	r0, #0
 80013ea:	4931      	ldr	r1, [pc, #196]	@ (80014b0 <AHRS_Update_Complementary_Filter+0x158>)
 80013ec:	f7ff fa56 	bl	800089c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fc1e 	bl	8000c38 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
	float gain = tau/(tau+dt); //Gain depends on dt
 8001400:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001404:	edd7 7a00 	vldr	s15, [r7]
 8001408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001414:	edc7 7a08 	vstr	s15, [r7, #32]

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <AHRS_Update_Complementary_Filter+0x15c>)
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800142a:	edd7 7a08 	vldr	s15, [r7, #32]
 800142e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <AHRS_Update_Complementary_Filter+0x160>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <AHRS_Update_Complementary_Filter+0x164>)
 8001442:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <AHRS_Update_Complementary_Filter+0x15c>)
 8001448:	ed93 7a01 	vldr	s14, [r3, #4]
 800144c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001458:	edd7 7a08 	vldr	s15, [r7, #32]
 800145c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <AHRS_Update_Complementary_Filter+0x160>)
 8001462:	edd3 7a01 	vldr	s15, [r3, #4]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <AHRS_Update_Complementary_Filter+0x164>)
 8001470:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <AHRS_Update_Complementary_Filter+0x15c>)
 8001476:	ed93 7a02 	vldr	s14, [r3, #8]
 800147a:	edd7 7a08 	vldr	s15, [r7, #32]
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001486:	edd7 7a08 	vldr	s15, [r7, #32]
 800148a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <AHRS_Update_Complementary_Filter+0x160>)
 8001490:	edd3 7a02 	vldr	s15, [r3, #8]
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <AHRS_Update_Complementary_Filter+0x164>)
 800149e:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	200002f0 	.word	0x200002f0
 80014b8:	20000308 	.word	0x20000308
 80014bc:	20000314 	.word	0x20000314
 80014c0:	54442d18 	.word	0x54442d18
 80014c4:	401921fb 	.word	0x401921fb

080014c8 <Battery_Begin>:

#include "Battery.h"

Battery battery;

HAL_StatusTypeDef Battery_Begin(ADC_HandleTypeDef *hadc){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ADC_Start_DMA(hadc, &battery.battery_raw, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <Battery_Begin+0x2c>)
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 f8d1 	bl	800467c <HAL_ADC_Start_DMA>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <Battery_Begin+0x20>
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	e000      	b.n	80014ea <Battery_Begin+0x22>

	return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000320 	.word	0x20000320

080014f8 <Battery_Update>:

void Battery_Update(){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	battery.vbat = 0.00886230468f * battery.battery_raw; // 3.3/4096*11
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <Battery_Update+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001508:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001524 <Battery_Update+0x2c>
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <Battery_Update+0x28>)
 8001512:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000320 	.word	0x20000320
 8001524:	3c113333 	.word	0x3c113333

08001528 <Stabilized_Mode>:
extern Vec3 attitude, integral;
extern float functions[10];
extern ICM42688 imu;


void Stabilized_Mode(Sbus receiver, float dt){
 8001528:	b084      	sub	sp, #16
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	f107 0c10 	add.w	ip, r7, #16
 8001534:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001538:	ed87 0a01 	vstr	s0, [r7, #4]
	//In Stabilized Mode Reference is the angle (radians)
	ref.x = (receiver.channels[ROLL_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_ROLL * DEG_TO_RAD;
 800153c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800153e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001658 <Stabilized_Mode+0x130>
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800165c <Stabilized_Mode+0x134>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	ee17 0a90 	vmov	r0, s15
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a33b      	add	r3, pc, #236	@ (adr r3, 8001650 <Stabilized_Mode+0x128>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fb60 	bl	8000c38 <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	4a39      	ldr	r2, [pc, #228]	@ (8001660 <Stabilized_Mode+0x138>)
 800157c:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[PITCH_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_PITCH * DEG_TO_RAD;
 800157e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001580:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001658 <Stabilized_Mode+0x130>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800165c <Stabilized_Mode+0x134>
 8001598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159c:	ee17 0a90 	vmov	r0, s15
 80015a0:	f7fe fffa 	bl	8000598 <__aeabi_f2d>
 80015a4:	a32a      	add	r3, pc, #168	@ (adr r3, 8001650 <Stabilized_Mode+0x128>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f84d 	bl	8000648 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fb3f 	bl	8000c38 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <Stabilized_Mode+0x138>)
 80015be:	6053      	str	r3, [r2, #4]

	PID_Stabilized_Update(ref, attitude, dt);
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <Stabilized_Mode+0x13c>)
 80015c2:	ed93 5a00 	vldr	s10, [r3]
 80015c6:	edd3 5a01 	vldr	s11, [r3, #4]
 80015ca:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <Stabilized_Mode+0x138>)
 80015d0:	edd3 6a00 	vldr	s13, [r3]
 80015d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015dc:	ed97 3a01 	vldr	s6, [r7, #4]
 80015e0:	eef0 1a45 	vmov.f32	s3, s10
 80015e4:	eeb0 2a65 	vmov.f32	s4, s11
 80015e8:	eef0 2a46 	vmov.f32	s5, s12
 80015ec:	eeb0 0a66 	vmov.f32	s0, s13
 80015f0:	eef0 0a47 	vmov.f32	s1, s14
 80015f4:	eeb0 1a67 	vmov.f32	s2, s15
 80015f8:	f000 ff3a 	bl	8002470 <PID_Stabilized_Update>

	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 80015fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001606:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001668 <Stabilized_Mode+0x140>
 800160a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800160e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800166c <Stabilized_Mode+0x144>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <Stabilized_Mode+0x148>)
 8001618:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 800161c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001668 <Stabilized_Mode+0x140>
 800162a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800162e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800166c <Stabilized_Mode+0x144>
 8001632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <Stabilized_Mode+0x148>)
 8001638:	edc3 7a03 	vstr	s15, [r3, #12]

}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001646:	b004      	add	sp, #16
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	a252dd11 	.word	0xa252dd11
 8001654:	3f91df46 	.word	0x3f91df46
 8001658:	3b03126f 	.word	0x3b03126f
 800165c:	42340000 	.word	0x42340000
 8001660:	20000328 	.word	0x20000328
 8001664:	20000314 	.word	0x20000314
 8001668:	44bb8000 	.word	0x44bb8000
 800166c:	43fa0000 	.word	0x43fa0000
 8001670:	20000348 	.word	0x20000348
 8001674:	00000000 	.word	0x00000000

08001678 <Acro_Mode>:

void Acro_Mode(Sbus receiver, float dt){
 8001678:	b084      	sub	sp, #16
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	f107 0c10 	add.w	ip, r7, #16
 8001684:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001688:	ed87 0a01 	vstr	s0, [r7, #4]
	//In Stabilized Mode Reference is the angular velocity (radians/second)
	ref.x = (receiver.channels[ROLL_CHANNEL]-1500) * 0.002f * ACRO_ROLL_RATE * DEG_TO_RAD;
 800168c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800168e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80017c8 <Acro_Mode+0x150>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80017cc <Acro_Mode+0x154>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	ee17 0a90 	vmov	r0, s15
 80016ae:	f7fe ff73 	bl	8000598 <__aeabi_f2d>
 80016b2:	a343      	add	r3, pc, #268	@ (adr r3, 80017c0 <Acro_Mode+0x148>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ffc6 	bl	8000648 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fab8 	bl	8000c38 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a41      	ldr	r2, [pc, #260]	@ (80017d0 <Acro_Mode+0x158>)
 80016cc:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[PITCH_CHANNEL]-1500) * 0.002f * ACRO_PITCH_RATE * DEG_TO_RAD;
 80016ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016d0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80017c8 <Acro_Mode+0x150>
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80017cc <Acro_Mode+0x154>
 80016e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ec:	ee17 0a90 	vmov	r0, s15
 80016f0:	f7fe ff52 	bl	8000598 <__aeabi_f2d>
 80016f4:	a332      	add	r3, pc, #200	@ (adr r3, 80017c0 <Acro_Mode+0x148>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ffa5 	bl	8000648 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa97 	bl	8000c38 <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	4a30      	ldr	r2, [pc, #192]	@ (80017d0 <Acro_Mode+0x158>)
 800170e:	6053      	str	r3, [r2, #4]
	ref.z = (receiver.channels[YAW_CHANNEL]-1500) * 0.002f * ACRO_YAW_RATE * DEG_TO_RAD;
 8001710:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001712:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80017c8 <Acro_Mode+0x150>
 8001722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001726:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80017cc <Acro_Mode+0x154>
 800172a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172e:	ee17 0a90 	vmov	r0, s15
 8001732:	f7fe ff31 	bl	8000598 <__aeabi_f2d>
 8001736:	a322      	add	r3, pc, #136	@ (adr r3, 80017c0 <Acro_Mode+0x148>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff84 	bl	8000648 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa76 	bl	8000c38 <__aeabi_d2f>
 800174c:	4603      	mov	r3, r0
 800174e:	4a20      	ldr	r2, [pc, #128]	@ (80017d0 <Acro_Mode+0x158>)
 8001750:	6093      	str	r3, [r2, #8]

	PID_Acro_Update(ref, imu.gyro, dt);
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <Acro_Mode+0x15c>)
 8001754:	ed93 5a04 	vldr	s10, [r3, #16]
 8001758:	edd3 5a05 	vldr	s11, [r3, #20]
 800175c:	ed93 6a06 	vldr	s12, [r3, #24]
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <Acro_Mode+0x158>)
 8001762:	edd3 6a00 	vldr	s13, [r3]
 8001766:	ed93 7a01 	vldr	s14, [r3, #4]
 800176a:	edd3 7a02 	vldr	s15, [r3, #8]
 800176e:	ed97 3a01 	vldr	s6, [r7, #4]
 8001772:	eef0 1a45 	vmov.f32	s3, s10
 8001776:	eeb0 2a65 	vmov.f32	s4, s11
 800177a:	eef0 2a46 	vmov.f32	s5, s12
 800177e:	eeb0 0a66 	vmov.f32	s0, s13
 8001782:	eef0 0a47 	vmov.f32	s1, s14
 8001786:	eeb0 1a67 	vmov.f32	s2, s15
 800178a:	f001 f811 	bl	80027b0 <PID_Acro_Update>

	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 800178e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001798:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80017d8 <Acro_Mode+0x160>
 800179c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017a0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80017dc <Acro_Mode+0x164>
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <Acro_Mode+0x168>)
 80017aa:	edc3 7a03 	vstr	s15, [r3, #12]

}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b8:	b004      	add	sp, #16
 80017ba:	4770      	bx	lr
 80017bc:	f3af 8000 	nop.w
 80017c0:	a252dd11 	.word	0xa252dd11
 80017c4:	3f91df46 	.word	0x3f91df46
 80017c8:	3b03126f 	.word	0x3b03126f
 80017cc:	43340000 	.word	0x43340000
 80017d0:	20000328 	.word	0x20000328
 80017d4:	20000884 	.word	0x20000884
 80017d8:	44bb8000 	.word	0x44bb8000
 80017dc:	43fa0000 	.word	0x43fa0000
 80017e0:	20000348 	.word	0x20000348

080017e4 <Manual_Mode>:

void Manual_Mode(Sbus receiver){
 80017e4:	b084      	sub	sp, #16
 80017e6:	b490      	push	{r4, r7}
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	f107 0408 	add.w	r4, r7, #8
 80017ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 80017f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800187c <Manual_Mode+0x98>
 8001800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001804:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001880 <Manual_Mode+0x9c>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <Manual_Mode+0xa0>)
 800180e:	edc3 7a03 	vstr	s15, [r3, #12]
	functions[AILERONS] = (receiver.channels[ROLL_CHANNEL]-1500.0f)/500.0f;
 8001812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800187c <Manual_Mode+0x98>
 8001820:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001824:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001880 <Manual_Mode+0x9c>
 8001828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <Manual_Mode+0xa0>)
 800182e:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = (receiver.channels[PITCH_CHANNEL]-1500.0f)/500.0f;
 8001832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800187c <Manual_Mode+0x98>
 8001840:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001844:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001880 <Manual_Mode+0x9c>
 8001848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <Manual_Mode+0xa0>)
 800184e:	edc3 7a02 	vstr	s15, [r3, #8]
	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001852:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800187c <Manual_Mode+0x98>
 8001860:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001864:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001880 <Manual_Mode+0x9c>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <Manual_Mode+0xa0>)
 800186e:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc90      	pop	{r4, r7}
 8001878:	b004      	add	sp, #16
 800187a:	4770      	bx	lr
 800187c:	44bb8000 	.word	0x44bb8000
 8001880:	43fa0000 	.word	0x43fa0000
 8001884:	20000348 	.word	0x20000348

08001888 <Process_Input>:

void Process_Input(Sbus receiver){
 8001888:	b084      	sub	sp, #16
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	f107 0c18 	add.w	ip, r7, #24
 8001894:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Configure MODES
	if(receiver.channels[FLIGHT_MODE_CHANNEL] < 1200){
 8001898:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800189a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800189e:	d203      	bcs.n	80018a8 <Process_Input+0x20>
		flight_mode = MANUAL_MODE;
 80018a0:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <Process_Input+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e00e      	b.n	80018c6 <Process_Input+0x3e>
	}
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80018a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80018aa:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80018ae:	d307      	bcc.n	80018c0 <Process_Input+0x38>
			receiver.channels[FLIGHT_MODE_CHANNEL] < 1800){
 80018b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80018b2:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80018b6:	d203      	bcs.n	80018c0 <Process_Input+0x38>
		flight_mode = STABILIZED_MODE;
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <Process_Input+0xec>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e002      	b.n	80018c6 <Process_Input+0x3e>
	}
	else{
		flight_mode = ACRO_MODE;
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <Process_Input+0xec>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
	}

	//DISARM ON FAILSAFE
	if(receiver.failsafe_status == SBUS_SIGNAL_FAILSAFE){
 80018c6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d108      	bne.n	80018e0 <Process_Input+0x58>
		flight_mode = STABILIZED_MODE;
 80018ce:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <Process_Input+0xec>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
		arming = DISARMED;
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <Process_Input+0xf0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
		functions[THROTTLE] = -1.0f;
 80018da:	4b28      	ldr	r3, [pc, #160]	@ (800197c <Process_Input+0xf4>)
 80018dc:	4a28      	ldr	r2, [pc, #160]	@ (8001980 <Process_Input+0xf8>)
 80018de:	60da      	str	r2, [r3, #12]
	}

	if(prev_flight_mode != flight_mode) { //Change in flight mode
 80018e0:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <Process_Input+0xfc>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <Process_Input+0xec>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d00b      	beq.n	8001904 <Process_Input+0x7c>
		integral = (Vec3){0.0f, 0.0f, 0.0f}; //Reset integral part of PID
 80018ec:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <Process_Input+0x100>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <Process_Input+0x100>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <Process_Input+0x100>)
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
	}


	//Set Arming

	if(arming == DISARMED &&
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <Process_Input+0xf0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d110      	bne.n	800192e <Process_Input+0xa6>
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 800190c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
	if(arming == DISARMED &&
 800190e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001912:	4293      	cmp	r3, r2
 8001914:	d90b      	bls.n	800192e <Process_Input+0xa6>
		arming_edge_detect == 1 &&
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <Process_Input+0x104>)
 8001918:	781b      	ldrb	r3, [r3, #0]
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <Process_Input+0xa6>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 800191e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
		arming_edge_detect == 1 &&
 8001920:	f240 4219 	movw	r2, #1049	@ 0x419
 8001924:	4293      	cmp	r3, r2
 8001926:	d802      	bhi.n	800192e <Process_Input+0xa6>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <Process_Input+0xf0>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
	if(arming == ARMED && receiver.channels[ARMING_CHANNEL] <= 1500) arming = DISARMED;
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <Process_Input+0xf0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <Process_Input+0xbe>
 8001936:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001938:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800193c:	4293      	cmp	r3, r2
 800193e:	d802      	bhi.n	8001946 <Process_Input+0xbe>
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <Process_Input+0xf0>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]


	arming_edge_detect = (receiver.channels[ARMING_CHANNEL] <= 1500)? 1:0;
 8001946:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001948:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <Process_Input+0x104>)
 800195a:	701a      	strb	r2, [r3, #0]
	prev_flight_mode = flight_mode;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <Process_Input+0xec>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <Process_Input+0xfc>)
 8001962:	701a      	strb	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	b004      	add	sp, #16
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000334 	.word	0x20000334
 8001978:	20000336 	.word	0x20000336
 800197c:	20000348 	.word	0x20000348
 8001980:	bf800000 	.word	0xbf800000
 8001984:	20000335 	.word	0x20000335
 8001988:	20000388 	.word	0x20000388
 800198c:	20000337 	.word	0x20000337

08001990 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 80019e0:	200a      	movs	r0, #10
 80019e2:	f002 fde3 	bl	80045ac <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 80019e6:	f107 030e 	add.w	r3, r7, #14
 80019ea:	461a      	mov	r2, r3
 80019ec:	2175      	movs	r1, #117	@ 0x75
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fa64 	bl	8001ebc <ICM42688_Read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <ICM42688_Begin+0x72>
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	e05d      	b.n	8001abe <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	2b47      	cmp	r3, #71	@ 0x47
 8001a06:	d001      	beq.n	8001a0c <ICM42688_Begin+0x7c>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e058      	b.n	8001abe <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 8001a0c:	2326      	movs	r3, #38	@ 0x26
 8001a0e:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 8001a10:	f107 030e 	add.w	r3, r7, #14
 8001a14:	461a      	mov	r2, r3
 8001a16:	214f      	movs	r1, #79	@ 0x4f
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa27 	bl	8001e6c <ICM42688_Write>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <ICM42688_Begin+0x9c>
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	e048      	b.n	8001abe <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2206      	movs	r2, #6
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 8001a3c:	2346      	movs	r3, #70	@ 0x46
 8001a3e:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001a40:	f107 030e 	add.w	r3, r7, #14
 8001a44:	461a      	mov	r2, r3
 8001a46:	2150      	movs	r1, #80	@ 0x50
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fa0f 	bl	8001e6c <ICM42688_Write>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <ICM42688_Begin+0xcc>
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	e030      	b.n	8001abe <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2206      	movs	r2, #6
 8001a68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f863 	bl	8001b38 <ICM42688_Set_Interrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <ICM42688_Begin+0xf0>
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	e01e      	b.n	8001abe <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f820 	bl	8001ac6 <ICM42688_Set_Filters>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <ICM42688_Begin+0x104>
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	e014      	b.n	8001abe <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 8001a94:	230f      	movs	r3, #15
 8001a96:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 8001a98:	f107 030e 	add.w	r3, r7, #14
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	214e      	movs	r1, #78	@ 0x4e
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f9e3 	bl	8001e6c <ICM42688_Write>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <ICM42688_Begin+0x124>
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	e004      	b.n	8001abe <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 8001ad2:	f107 030e 	add.w	r3, r7, #14
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2151      	movs	r1, #81	@ 0x51
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f9c6 	bl	8001e6c <ICM42688_Write>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <ICM42688_Set_Filters+0x28>
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	e020      	b.n	8001b30 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 8001aee:	2300      	movs	r3, #0
 8001af0:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 8001af2:	f107 030e 	add.w	r3, r7, #14
 8001af6:	461a      	mov	r2, r3
 8001af8:	2153      	movs	r1, #83	@ 0x53
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f9b6 	bl	8001e6c <ICM42688_Write>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <ICM42688_Set_Filters+0x48>
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	e010      	b.n	8001b30 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 8001b0e:	2333      	movs	r3, #51	@ 0x33
 8001b10:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 8001b12:	f107 030e 	add.w	r3, r7, #14
 8001b16:	461a      	mov	r2, r3
 8001b18:	2152      	movs	r1, #82	@ 0x52
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9a6 	bl	8001e6c <ICM42688_Write>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <ICM42688_Set_Filters+0x68>
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	e000      	b.n	8001b30 <ICM42688_Set_Filters+0x6a>

	return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001b40:	2303      	movs	r3, #3
 8001b42:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 8001b44:	f107 030e 	add.w	r3, r7, #14
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2114      	movs	r1, #20
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f98d 	bl	8001e6c <ICM42688_Write>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <ICM42688_Set_Interrupts+0x28>
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	e031      	b.n	8001bc4 <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001b60:	f107 030e 	add.w	r3, r7, #14
 8001b64:	461a      	mov	r2, r3
 8001b66:	2164      	movs	r1, #100	@ 0x64
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f9a7 	bl	8001ebc <ICM42688_Read>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <ICM42688_Set_Interrupts+0x44>
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	e023      	b.n	8001bc4 <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	f023 0310 	bic.w	r3, r3, #16
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 8001b86:	f107 030e 	add.w	r3, r7, #14
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2164      	movs	r1, #100	@ 0x64
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f96c 	bl	8001e6c <ICM42688_Write>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <ICM42688_Set_Interrupts+0x6a>
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	e010      	b.n	8001bc4 <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 8001ba6:	f107 030e 	add.w	r3, r7, #14
 8001baa:	461a      	mov	r2, r3
 8001bac:	2165      	movs	r1, #101	@ 0x65
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f95c 	bl	8001e6c <ICM42688_Write>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <ICM42688_Set_Interrupts+0x8a>
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	e000      	b.n	8001bc4 <ICM42688_Set_Interrupts+0x8c>

	return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 8001bf2:	8afb      	ldrh	r3, [r7, #22]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfc:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001e60 <ICM42688_Process_Buffer+0x290>
 8001c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c04:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001c60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001e64 <ICM42688_Process_Buffer+0x294>
 8001c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001c7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c86:	eeb1 7a67 	vneg.f32	s14, s15
 8001c8a:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001e64 <ICM42688_Process_Buffer+0x294>
 8001c8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001c98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca4:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001e64 <ICM42688_Process_Buffer+0x294>
 8001ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 8001d00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001e68 <ICM42688_Process_Buffer+0x298>
 8001d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001d1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d26:	eeb1 7a67 	vneg.f32	s14, s15
 8001d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001e68 <ICM42688_Process_Buffer+0x298>
 8001d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001d38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001e68 <ICM42688_Process_Buffer+0x298>
 8001d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -3.13812327; //Calibration
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fc1e 	bl	8000598 <__aeabi_f2d>
 8001d5c:	a338      	add	r3, pc, #224	@ (adr r3, 8001e40 <ICM42688_Process_Buffer+0x270>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fabb 	bl	80002dc <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe ff63 	bl	8000c38 <__aeabi_d2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
	device->gyro.y -= 0.0449692011;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fc0b 	bl	8000598 <__aeabi_f2d>
 8001d82:	a331      	add	r3, pc, #196	@ (adr r3, 8001e48 <ICM42688_Process_Buffer+0x278>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe faa6 	bl	80002d8 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe ff50 	bl	8000c38 <__aeabi_d2f>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.46484378;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbf8 	bl	8000598 <__aeabi_f2d>
 8001da8:	a329      	add	r3, pc, #164	@ (adr r3, 8001e50 <ICM42688_Process_Buffer+0x280>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fa93 	bl	80002d8 <__aeabi_dsub>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe ff3d 	bl	8000c38 <__aeabi_d2f>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]

	device->gyro.x *= DEG_TO_RAD;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbe5 	bl	8000598 <__aeabi_f2d>
 8001dce:	a322      	add	r3, pc, #136	@ (adr r3, 8001e58 <ICM42688_Process_Buffer+0x288>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc38 	bl	8000648 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe ff2a 	bl	8000c38 <__aeabi_d2f>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
	device->gyro.y *= DEG_TO_RAD;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbd2 	bl	8000598 <__aeabi_f2d>
 8001df4:	a318      	add	r3, pc, #96	@ (adr r3, 8001e58 <ICM42688_Process_Buffer+0x288>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fc25 	bl	8000648 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe ff17 	bl	8000c38 <__aeabi_d2f>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	615a      	str	r2, [r3, #20]
	device->gyro.z *= DEG_TO_RAD;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbbf 	bl	8000598 <__aeabi_f2d>
 8001e1a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e58 <ICM42688_Process_Buffer+0x288>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fc12 	bl	8000648 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe ff04 	bl	8000c38 <__aeabi_d2f>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]

}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	5f7bbb8d 	.word	0x5f7bbb8d
 8001e44:	40091ae0 	.word	0x40091ae0
 8001e48:	001a7e9d 	.word	0x001a7e9d
 8001e4c:	3fa70634 	.word	0x3fa70634
 8001e50:	20365653 	.word	0x20365653
 8001e54:	3fddc000 	.word	0x3fddc000
 8001e58:	a252dd11 	.word	0xa252dd11
 8001e5c:	3f91df46 	.word	0x3f91df46
 8001e60:	43047ae1 	.word	0x43047ae1
 8001e64:	46000000 	.word	0x46000000
 8001e68:	42033333 	.word	0x42033333

08001e6c <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	460b      	mov	r3, r1
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	753b      	strb	r3, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2110      	movs	r1, #16
 8001e88:	480b      	ldr	r0, [pc, #44]	@ (8001eb8 <ICM42688_Write+0x4c>)
 8001e8a:	f003 ff25 	bl	8005cd8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f107 0114 	add.w	r1, r7, #20
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f006 fc35 	bl	800870a <HAL_SPI_Transmit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <ICM42688_Write+0x4c>)
 8001eaa:	f003 ff15 	bl	8005cd8 <HAL_GPIO_WritePin>

	return status;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40020000 	.word	0x40020000

08001ebc <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4815      	ldr	r0, [pc, #84]	@ (8001f30 <ICM42688_Read+0x74>)
 8001eda:	f003 fefd 	bl	8005cd8 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	f107 0116 	add.w	r1, r7, #22
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	2201      	movs	r2, #1
 8001eec:	f006 fc0d 	bl	800870a <HAL_SPI_Transmit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <ICM42688_Read+0x42>
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	e014      	b.n	8001f28 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	2201      	movs	r2, #1
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f006 fd74 	bl	80089f6 <HAL_SPI_Receive>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <ICM42688_Read+0x60>
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	e005      	b.n	8001f28 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <ICM42688_Read+0x74>)
 8001f22:	f003 fed9 	bl	8005cd8 <HAL_GPIO_WritePin>

	return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020000 	.word	0x40020000

08001f34 <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 8001f3c:	239d      	movs	r3, #157	@ 0x9d
 8001f3e:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2110      	movs	r1, #16
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <ICM42688_Read_DMA+0x44>)
 8001f46:	f003 fec7 	bl	8005cd8 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	230f      	movs	r3, #15
 8001f5a:	f007 f8a3 	bl	80090a4 <HAL_SPI_TransmitReceive_DMA>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <ICM42688_Read_DMA+0x38>
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	e000      	b.n	8001f6e <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40020000 	.word	0x40020000

08001f7c <Output_Begin>:

uint16_t outputs[8];
float functions[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
extern Arming arming;

HAL_StatusTypeDef Output_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8001f86:	2100      	movs	r1, #0
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f007 fee5 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <Output_Begin+0x20>
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	e04d      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f007 feda 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <Output_Begin+0x36>
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	e042      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f007 fecf 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <Output_Begin+0x4c>
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	e037      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 8001fc8:	210c      	movs	r1, #12
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f007 fec4 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <Output_Begin+0x62>
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	e02c      	b.n	8002038 <Output_Begin+0xbc>

	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f007 feb9 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <Output_Begin+0x78>
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	e021      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f007 feae 	bl	8009d58 <HAL_TIM_PWM_Start>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <Output_Begin+0x8e>
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	e016      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 800200a:	2108      	movs	r1, #8
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f007 fea3 	bl	8009d58 <HAL_TIM_PWM_Start>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <Output_Begin+0xa4>
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	e00b      	b.n	8002038 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 8002020:	210c      	movs	r1, #12
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f007 fe98 	bl	8009d58 <HAL_TIM_PWM_Start>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <Output_Begin+0xba>
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	e000      	b.n	8002038 <Output_Begin+0xbc>

	return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8f;
 800204e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002052:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80020c8 <Servo_Move+0x88>
 8002056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205e:	ee17 3a90 	vmov	r3, s15
 8002062:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d104      	bne.n	8002074 <Servo_Move+0x34>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	8afa      	ldrh	r2, [r7, #22]
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002072:	e023      	b.n	80020bc <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d104      	bne.n	8002084 <Servo_Move+0x44>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002082:	e01b      	b.n	80020bc <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d104      	bne.n	8002094 <Servo_Move+0x54>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002092:	e013      	b.n	80020bc <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d104      	bne.n	80020a4 <Servo_Move+0x64>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	8afb      	ldrh	r3, [r7, #22]
 80020a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020a2:	e00b      	b.n	80020bc <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d104      	bne.n	80020b4 <Servo_Move+0x74>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80020b2:	e003      	b.n	80020bc <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	3fe66666 	.word	0x3fe66666
 80020cc:	00000000 	.word	0x00000000

080020d0 <Output_Update>:

void Output_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

	if(arming == DISARMED) functions[THROTTLE] = -1.0f;
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <Output_Update+0x20>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <Output_Update+0x18>
 80020e2:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <Output_Update+0x24>)
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <Output_Update+0x28>)
 80020e6:	60da      	str	r2, [r3, #12]

	//Clamp to [-1,1] range
	for(int i = 0; i < 10; i++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e030      	b.n	8002150 <Output_Update+0x80>
 80020ee:	bf00      	nop
 80020f0:	20000336 	.word	0x20000336
 80020f4:	20000348 	.word	0x20000348
 80020f8:	bf800000 	.word	0xbf800000
		if(functions[i]<-1.0f) functions[i] = -1.0f;
 80020fc:	4ad0      	ldr	r2, [pc, #832]	@ (8002440 <Output_Update+0x370>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	d505      	bpl.n	8002122 <Output_Update+0x52>
 8002116:	4aca      	ldr	r2, [pc, #808]	@ (8002440 <Output_Update+0x370>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	4ac9      	ldr	r2, [pc, #804]	@ (8002444 <Output_Update+0x374>)
 8002120:	601a      	str	r2, [r3, #0]
		if(functions[i]>1.0f) functions[i] = 1.0f;
 8002122:	4ac7      	ldr	r2, [pc, #796]	@ (8002440 <Output_Update+0x370>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	dd06      	ble.n	800214a <Output_Update+0x7a>
 800213c:	4ac0      	ldr	r2, [pc, #768]	@ (8002440 <Output_Update+0x370>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002148:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b09      	cmp	r3, #9
 8002154:	ddd2      	ble.n	80020fc <Output_Update+0x2c>
	}

	outputs[0] = functions[OUT1_FUNCTION] * (OUT1_MAX - OUT1_MIN)*(-OUT1_REVERSE+0.5) + OUT1_TRIM;
 8002156:	4bba      	ldr	r3, [pc, #744]	@ (8002440 <Output_Update+0x370>)
 8002158:	edd3 7a03 	vldr	s15, [r3, #12]
 800215c:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8002448 <Output_Update+0x378>
 8002160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002164:	ee17 0a90 	vmov	r0, s15
 8002168:	f7fe fa16 	bl	8000598 <__aeabi_f2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4bb6      	ldr	r3, [pc, #728]	@ (800244c <Output_Update+0x37c>)
 8002172:	f7fe fa69 	bl	8000648 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	a3ae      	add	r3, pc, #696	@ (adr r3, 8002438 <Output_Update+0x368>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe f8aa 	bl	80002dc <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd32 	bl	8000bf8 <__aeabi_d2uiz>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	4bad      	ldr	r3, [pc, #692]	@ (8002450 <Output_Update+0x380>)
 800219a:	801a      	strh	r2, [r3, #0]
	outputs[1] = functions[OUT2_FUNCTION] * (OUT2_MAX - OUT2_MIN)*(-OUT2_REVERSE+0.5) + OUT2_TRIM;
 800219c:	4ba8      	ldr	r3, [pc, #672]	@ (8002440 <Output_Update+0x370>)
 800219e:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a2:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002448 <Output_Update+0x378>
 80021a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021aa:	ee17 0a90 	vmov	r0, s15
 80021ae:	f7fe f9f3 	bl	8000598 <__aeabi_f2d>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4ba5      	ldr	r3, [pc, #660]	@ (800244c <Output_Update+0x37c>)
 80021b8:	f7fe fa46 	bl	8000648 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	a39c      	add	r3, pc, #624	@ (adr r3, 8002438 <Output_Update+0x368>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe f887 	bl	80002dc <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7fe fd0f 	bl	8000bf8 <__aeabi_d2uiz>
 80021da:	4603      	mov	r3, r0
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b9c      	ldr	r3, [pc, #624]	@ (8002450 <Output_Update+0x380>)
 80021e0:	805a      	strh	r2, [r3, #2]
	outputs[2] = functions[OUT3_FUNCTION] * (OUT3_MAX - OUT3_MIN)*(-OUT3_REVERSE+0.5) + OUT3_TRIM;
 80021e2:	4b97      	ldr	r3, [pc, #604]	@ (8002440 <Output_Update+0x370>)
 80021e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80021e8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002448 <Output_Update+0x378>
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	ee17 0a90 	vmov	r0, s15
 80021f4:	f7fe f9d0 	bl	8000598 <__aeabi_f2d>
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b93      	ldr	r3, [pc, #588]	@ (800244c <Output_Update+0x37c>)
 80021fe:	f7fe fa23 	bl	8000648 <__aeabi_dmul>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002438 <Output_Update+0x368>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f7fe f864 	bl	80002dc <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fcec 	bl	8000bf8 <__aeabi_d2uiz>
 8002220:	4603      	mov	r3, r0
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b8a      	ldr	r3, [pc, #552]	@ (8002450 <Output_Update+0x380>)
 8002226:	809a      	strh	r2, [r3, #4]
	outputs[3] = functions[OUT4_FUNCTION] * (OUT4_MAX - OUT4_MIN)*(-OUT4_REVERSE+0.5) + OUT4_TRIM;
 8002228:	4b85      	ldr	r3, [pc, #532]	@ (8002440 <Output_Update+0x370>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002448 <Output_Update+0x378>
 8002232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b82      	ldr	r3, [pc, #520]	@ (800244c <Output_Update+0x37c>)
 8002244:	f7fe fa00 	bl	8000648 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	a379      	add	r3, pc, #484	@ (adr r3, 8002438 <Output_Update+0x368>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f841 	bl	80002dc <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fcc9 	bl	8000bf8 <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b79      	ldr	r3, [pc, #484]	@ (8002450 <Output_Update+0x380>)
 800226c:	80da      	strh	r2, [r3, #6]
	outputs[4] = functions[OUT5_FUNCTION] * (OUT5_MAX - OUT5_MIN)*(-OUT5_REVERSE+0.5) + OUT5_TRIM;
 800226e:	4b74      	ldr	r3, [pc, #464]	@ (8002440 <Output_Update+0x370>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8002448 <Output_Update+0x378>
 8002278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227c:	ee17 0a90 	vmov	r0, s15
 8002280:	f7fe f98a 	bl	8000598 <__aeabi_f2d>
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	4b70      	ldr	r3, [pc, #448]	@ (800244c <Output_Update+0x37c>)
 800228a:	f7fe f9dd 	bl	8000648 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	a368      	add	r3, pc, #416	@ (adr r3, 8002438 <Output_Update+0x368>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f81e 	bl	80002dc <__adddf3>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fca6 	bl	8000bf8 <__aeabi_d2uiz>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <Output_Update+0x380>)
 80022b2:	811a      	strh	r2, [r3, #8]
	outputs[5] = functions[OUT6_FUNCTION] * (OUT6_MAX - OUT6_MIN)*(-OUT6_REVERSE+0.5) + OUT6_TRIM;
 80022b4:	4b62      	ldr	r3, [pc, #392]	@ (8002440 <Output_Update+0x370>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002448 <Output_Update+0x378>
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7fe f967 	bl	8000598 <__aeabi_f2d>
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b5f      	ldr	r3, [pc, #380]	@ (800244c <Output_Update+0x37c>)
 80022d0:	f7fe f9ba 	bl	8000648 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	a356      	add	r3, pc, #344	@ (adr r3, 8002438 <Output_Update+0x368>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fd fffb 	bl	80002dc <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fc83 	bl	8000bf8 <__aeabi_d2uiz>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b56      	ldr	r3, [pc, #344]	@ (8002450 <Output_Update+0x380>)
 80022f8:	815a      	strh	r2, [r3, #10]
	outputs[6] = functions[OUT7_FUNCTION] * (OUT7_MAX - OUT7_MIN)*(-OUT7_REVERSE+0.5) + OUT7_TRIM;
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <Output_Update+0x370>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002448 <Output_Update+0x378>
 8002304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f944 	bl	8000598 <__aeabi_f2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <Output_Update+0x37c>)
 8002316:	f7fe f997 	bl	8000648 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	a345      	add	r3, pc, #276	@ (adr r3, 8002438 <Output_Update+0x368>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fd ffd8 	bl	80002dc <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc60 	bl	8000bf8 <__aeabi_d2uiz>
 8002338:	4603      	mov	r3, r0
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <Output_Update+0x380>)
 800233e:	819a      	strh	r2, [r3, #12]
	outputs[7] = functions[OUT8_FUNCTION] * (OUT8_MAX - OUT8_MIN)*(-OUT8_REVERSE+0.5) + OUT8_TRIM;
 8002340:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <Output_Update+0x370>)
 8002342:	edd3 7a03 	vldr	s15, [r3, #12]
 8002346:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002448 <Output_Update+0x378>
 800234a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234e:	ee17 0a90 	vmov	r0, s15
 8002352:	f7fe f921 	bl	8000598 <__aeabi_f2d>
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <Output_Update+0x37c>)
 800235c:	f7fe f974 	bl	8000648 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	a333      	add	r3, pc, #204	@ (adr r3, 8002438 <Output_Update+0x368>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fd ffb5 	bl	80002dc <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fc3d 	bl	8000bf8 <__aeabi_d2uiz>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <Output_Update+0x380>)
 8002384:	81da      	strh	r2, [r3, #14]


	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 8002386:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <Output_Update+0x380>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002392:	eeb0 0a67 	vmov.f32	s0, s15
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fe51 	bl	8002040 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 800239e:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <Output_Update+0x380>)
 80023a0:	885b      	ldrh	r3, [r3, #2]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	eeb0 0a67 	vmov.f32	s0, s15
 80023ae:	2104      	movs	r1, #4
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fe45 	bl	8002040 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <Output_Update+0x380>)
 80023b8:	889b      	ldrh	r3, [r3, #4]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	2108      	movs	r1, #8
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff fe39 	bl	8002040 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <Output_Update+0x380>)
 80023d0:	88db      	ldrh	r3, [r3, #6]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023da:	eeb0 0a67 	vmov.f32	s0, s15
 80023de:	210c      	movs	r1, #12
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fe2d 	bl	8002040 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <Output_Update+0x380>)
 80023e8:	891b      	ldrh	r3, [r3, #8]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f2:	eeb0 0a67 	vmov.f32	s0, s15
 80023f6:	2100      	movs	r1, #0
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f7ff fe21 	bl	8002040 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <Output_Update+0x380>)
 8002400:	895b      	ldrh	r3, [r3, #10]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	2104      	movs	r1, #4
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f7ff fe15 	bl	8002040 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <Output_Update+0x380>)
 8002418:	899b      	ldrh	r3, [r3, #12]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	eeb0 0a67 	vmov.f32	s0, s15
 8002426:	2108      	movs	r1, #8
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f7ff fe09 	bl	8002040 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <Output_Update+0x380>)
 8002430:	89db      	ldrh	r3, [r3, #14]
 8002432:	e00f      	b.n	8002454 <Output_Update+0x384>
 8002434:	f3af 8000 	nop.w
 8002438:	00000000 	.word	0x00000000
 800243c:	40977000 	.word	0x40977000
 8002440:	20000348 	.word	0x20000348
 8002444:	bf800000 	.word	0xbf800000
 8002448:	447a0000 	.word	0x447a0000
 800244c:	3fe00000 	.word	0x3fe00000
 8002450:	20000338 	.word	0x20000338
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	210c      	movs	r1, #12
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f7ff fdec 	bl	8002040 <Servo_Move>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <PID_Stabilized_Update>:

extern float functions[10];

Vec3 ref_prev, filtered_error, filtered_error_prev, integral = {0.0f, 0.0f, 0.0f};

void PID_Stabilized_Update(Vec3 ref, Vec3 attitude, float dt){
 8002470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002474:	b090      	sub	sp, #64	@ 0x40
 8002476:	af00      	add	r7, sp, #0
 8002478:	eeb0 5a40 	vmov.f32	s10, s0
 800247c:	eef0 5a60 	vmov.f32	s11, s1
 8002480:	eeb0 6a41 	vmov.f32	s12, s2
 8002484:	eef0 6a61 	vmov.f32	s13, s3
 8002488:	eeb0 7a42 	vmov.f32	s14, s4
 800248c:	eef0 7a62 	vmov.f32	s15, s5
 8002490:	ed87 3a01 	vstr	s6, [r7, #4]
 8002494:	ed87 5a05 	vstr	s10, [r7, #20]
 8002498:	edc7 5a06 	vstr	s11, [r7, #24]
 800249c:	ed87 6a07 	vstr	s12, [r7, #28]
 80024a0:	edc7 6a02 	vstr	s13, [r7, #8]
 80024a4:	ed87 7a03 	vstr	s14, [r7, #12]
 80024a8:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 80024ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80024bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80024c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80024cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80024d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Low Pass Filter for derivative of error (rate)
	float tau = 1/(2*M_PI*2);
 80024dc:	4bae      	ldr	r3, [pc, #696]	@ (8002798 <PID_Stabilized_Update+0x328>)
 80024de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float alpha = tau/(tau+dt);
 80024e0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80024e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ec:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80024f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	filtered_error.x = (1-alpha) * error.x + alpha * filtered_error_prev.x;
 80024f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024fc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002504:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250c:	4ba3      	ldr	r3, [pc, #652]	@ (800279c <PID_Stabilized_Update+0x32c>)
 800250e:	edd3 6a00 	vldr	s13, [r3]
 8002512:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	4ba0      	ldr	r3, [pc, #640]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
	filtered_error.y = (1-alpha) * error.y + alpha * filtered_error_prev.y;
 8002524:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002528:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800252c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002530:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002538:	4b98      	ldr	r3, [pc, #608]	@ (800279c <PID_Stabilized_Update+0x32c>)
 800253a:	edd3 6a01 	vldr	s13, [r3, #4]
 800253e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	4b95      	ldr	r3, [pc, #596]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 800254c:	edc3 7a01 	vstr	s15, [r3, #4]
	filtered_error.z = (1-alpha) * error.z + alpha * filtered_error_prev.z;
 8002550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002554:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800255c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002564:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <PID_Stabilized_Update+0x32c>)
 8002566:	edd3 6a02 	vldr	s13, [r3, #8]
 800256a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	4b8a      	ldr	r3, [pc, #552]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 8002578:	edc3 7a02 	vstr	s15, [r3, #8]

	integral.x += error.x * dt;
 800257c:	4b89      	ldr	r3, [pc, #548]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002586:	edd7 7a01 	vldr	s15, [r7, #4]
 800258a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	4b84      	ldr	r3, [pc, #528]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 8002594:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 8002598:	4b82      	ldr	r3, [pc, #520]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 800259a:	ed93 7a01 	vldr	s14, [r3, #4]
 800259e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	4b7d      	ldr	r3, [pc, #500]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 80025b4:	4b7b      	ldr	r3, [pc, #492]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 80025b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80025ba:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80025be:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 80025cc:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = ROLL_KP_STABILIZED*error.x + ROLL_KD_STABILIZED*(filtered_error.x-filtered_error_prev.x)/dt + ROLL_KI_STABILIZED*integral.x;
 80025d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffe0 	bl	8000598 <__aeabi_f2d>
 80025d8:	a367      	add	r3, pc, #412	@ (adr r3, 8002778 <PID_Stabilized_Update+0x308>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f833 	bl	8000648 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	461d      	mov	r5, r3
 80025ea:	4b6d      	ldr	r3, [pc, #436]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 80025ec:	ed93 7a00 	vldr	s14, [r3]
 80025f0:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <PID_Stabilized_Update+0x32c>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffcb 	bl	8000598 <__aeabi_f2d>
 8002602:	a35f      	add	r3, pc, #380	@ (adr r3, 8002780 <PID_Stabilized_Update+0x310>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe f81e 	bl	8000648 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4690      	mov	r8, r2
 8002612:	4699      	mov	r9, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fd ffbf 	bl	8000598 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4640      	mov	r0, r8
 8002620:	4649      	mov	r1, r9
 8002622:	f7fe f93b 	bl	800089c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fd fe55 	bl	80002dc <__adddf3>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	4b5a      	ldr	r3, [pc, #360]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ffaa 	bl	8000598 <__aeabi_f2d>
 8002644:	a350      	add	r3, pc, #320	@ (adr r3, 8002788 <PID_Stabilized_Update+0x318>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fffd 	bl	8000648 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4620      	mov	r0, r4
 8002654:	4629      	mov	r1, r5
 8002656:	f7fd fe41 	bl	80002dc <__adddf3>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fae9 	bl	8000c38 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4a4f      	ldr	r2, [pc, #316]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 800266a:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] = PITCH_KP_STABILIZED*error.y + PITCH_KD_STABILIZED*(filtered_error.y-filtered_error_prev.y)/dt + PITCH_KI_STABILIZED*integral.y;
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff92 	bl	8000598 <__aeabi_f2d>
 8002674:	a340      	add	r3, pc, #256	@ (adr r3, 8002778 <PID_Stabilized_Update+0x308>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd ffe5 	bl	8000648 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4614      	mov	r4, r2
 8002684:	461d      	mov	r5, r3
 8002686:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 8002688:	ed93 7a01 	vldr	s14, [r3, #4]
 800268c:	4b43      	ldr	r3, [pc, #268]	@ (800279c <PID_Stabilized_Update+0x32c>)
 800268e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002696:	ee17 0a90 	vmov	r0, s15
 800269a:	f7fd ff7d 	bl	8000598 <__aeabi_f2d>
 800269e:	a338      	add	r3, pc, #224	@ (adr r3, 8002780 <PID_Stabilized_Update+0x310>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffd0 	bl	8000648 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fd ff71 	bl	8000598 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4640      	mov	r0, r8
 80026bc:	4649      	mov	r1, r9
 80026be:	f7fe f8ed 	bl	800089c <__aeabi_ddiv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd fe07 	bl	80002dc <__adddf3>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4614      	mov	r4, r2
 80026d4:	461d      	mov	r5, r3
 80026d6:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <PID_Stabilized_Update+0x334>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff5c 	bl	8000598 <__aeabi_f2d>
 80026e0:	a329      	add	r3, pc, #164	@ (adr r3, 8002788 <PID_Stabilized_Update+0x318>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ffaf 	bl	8000648 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fd fdf3 	bl	80002dc <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa9b 	bl	8000c38 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	4a28      	ldr	r2, [pc, #160]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 8002706:	6093      	str	r3, [r2, #8]

	functions[AILERONS] /= M_PI_2;
 8002708:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff43 	bl	8000598 <__aeabi_f2d>
 8002712:	a31f      	add	r3, pc, #124	@ (adr r3, 8002790 <PID_Stabilized_Update+0x320>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f8c0 	bl	800089c <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa88 	bl	8000c38 <__aeabi_d2f>
 8002728:	4603      	mov	r3, r0
 800272a:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 800272c:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff30 	bl	8000598 <__aeabi_f2d>
 8002738:	a315      	add	r3, pc, #84	@ (adr r3, 8002790 <PID_Stabilized_Update+0x320>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fe f8ad 	bl	800089c <__aeabi_ddiv>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa75 	bl	8000c38 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <PID_Stabilized_Update+0x338>)
 8002752:	6093      	str	r3, [r2, #8]

	filtered_error_prev = (Vec3) {filtered_error.x, filtered_error.y, filtered_error.z};
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <PID_Stabilized_Update+0x330>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	480e      	ldr	r0, [pc, #56]	@ (800279c <PID_Stabilized_Update+0x32c>)
 8002762:	6001      	str	r1, [r0, #0]
 8002764:	490d      	ldr	r1, [pc, #52]	@ (800279c <PID_Stabilized_Update+0x32c>)
 8002766:	604a      	str	r2, [r1, #4]
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <PID_Stabilized_Update+0x32c>)
 800276a:	6093      	str	r3, [r2, #8]
}
 800276c:	bf00      	nop
 800276e:	3740      	adds	r7, #64	@ 0x40
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002776:	bf00      	nop
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	3ffccccc 	.word	0x3ffccccc
 8002780:	33333333 	.word	0x33333333
 8002784:	3fe33333 	.word	0x3fe33333
 8002788:	9999999a 	.word	0x9999999a
 800278c:	3fe99999 	.word	0x3fe99999
 8002790:	54442d18 	.word	0x54442d18
 8002794:	3ff921fb 	.word	0x3ff921fb
 8002798:	3da2f983 	.word	0x3da2f983
 800279c:	2000037c 	.word	0x2000037c
 80027a0:	20000370 	.word	0x20000370
 80027a4:	20000388 	.word	0x20000388
 80027a8:	20000348 	.word	0x20000348
 80027ac:	00000000 	.word	0x00000000

080027b0 <PID_Acro_Update>:

void PID_Acro_Update(Vec3 ref, Vec3 rates, float dt){
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b090      	sub	sp, #64	@ 0x40
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	eeb0 5a40 	vmov.f32	s10, s0
 80027bc:	eef0 5a60 	vmov.f32	s11, s1
 80027c0:	eeb0 6a41 	vmov.f32	s12, s2
 80027c4:	eef0 6a61 	vmov.f32	s13, s3
 80027c8:	eeb0 7a42 	vmov.f32	s14, s4
 80027cc:	eef0 7a62 	vmov.f32	s15, s5
 80027d0:	ed87 3a01 	vstr	s6, [r7, #4]
 80027d4:	ed87 5a05 	vstr	s10, [r7, #20]
 80027d8:	edc7 5a06 	vstr	s11, [r7, #24]
 80027dc:	ed87 6a07 	vstr	s12, [r7, #28]
 80027e0:	edc7 6a02 	vstr	s13, [r7, #8]
 80027e4:	ed87 7a03 	vstr	s14, [r7, #12]
 80027e8:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - rates.x), (ref.y - rates.y), (ref.z + rates.z)};
 80027ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80027f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80027fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002800:	edd7 7a03 	vldr	s15, [r7, #12]
 8002804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002808:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 800280c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002810:	edd7 7a04 	vldr	s15, [r7, #16]
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	//Low Pass Filter for derivative of error (rate)
	float tau = 1/(2*M_PI*0.4);
 800281c:	4bd4      	ldr	r3, [pc, #848]	@ (8002b70 <PID_Acro_Update+0x3c0>)
 800281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float alpha = tau/(tau+dt);
 8002820:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002824:	edd7 7a01 	vldr	s15, [r7, #4]
 8002828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002834:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	filtered_error.x = (1-alpha) * error.x + alpha * filtered_error_prev.x;
 8002838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800283c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002840:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002844:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284c:	4bc9      	ldr	r3, [pc, #804]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 800284e:	edd3 6a00 	vldr	s13, [r3]
 8002852:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	4bc6      	ldr	r3, [pc, #792]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
	filtered_error.y = (1-alpha) * error.y + alpha * filtered_error_prev.y;
 8002864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002868:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800286c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002870:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002878:	4bbe      	ldr	r3, [pc, #760]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 800287a:	edd3 6a01 	vldr	s13, [r3, #4]
 800287e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	4bbb      	ldr	r3, [pc, #748]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 800288c:	edc3 7a01 	vstr	s15, [r3, #4]
	filtered_error.z = (1-alpha) * error.z + alpha * filtered_error_prev.z;
 8002890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002894:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a4:	4bb3      	ldr	r3, [pc, #716]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 80028a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80028aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 80028b8:	edc3 7a02 	vstr	s15, [r3, #8]

	integral.x += error.x * dt;
 80028bc:	4baf      	ldr	r3, [pc, #700]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d2:	4baa      	ldr	r3, [pc, #680]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 80028d4:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 80028d8:	4ba8      	ldr	r3, [pc, #672]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 80028da:	ed93 7a01 	vldr	s14, [r3, #4]
 80028de:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ee:	4ba3      	ldr	r3, [pc, #652]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 80028f0:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 80028f4:	4ba1      	ldr	r3, [pc, #644]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 80028f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80028fa:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290a:	4b9c      	ldr	r3, [pc, #624]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 800290c:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = ROLL_KP_ACRO*error.x + ROLL_KD_ACRO*(filtered_error.x-filtered_error_prev.x)/dt + ROLL_KI_ACRO*integral.x;
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fe40 	bl	8000598 <__aeabi_f2d>
 8002918:	a38b      	add	r3, pc, #556	@ (adr r3, 8002b48 <PID_Acro_Update+0x398>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd fe93 	bl	8000648 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	461d      	mov	r5, r3
 800292a:	4b93      	ldr	r3, [pc, #588]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	4b90      	ldr	r3, [pc, #576]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	ee17 0a90 	vmov	r0, s15
 800293e:	f7fd fe2b 	bl	8000598 <__aeabi_f2d>
 8002942:	a383      	add	r3, pc, #524	@ (adr r3, 8002b50 <PID_Acro_Update+0x3a0>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe7e 	bl	8000648 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4690      	mov	r8, r2
 8002952:	4699      	mov	r9, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7fd fe1f 	bl	8000598 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4640      	mov	r0, r8
 8002960:	4649      	mov	r1, r9
 8002962:	f7fd ff9b 	bl	800089c <__aeabi_ddiv>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4620      	mov	r0, r4
 800296c:	4629      	mov	r1, r5
 800296e:	f7fd fcb5 	bl	80002dc <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4614      	mov	r4, r2
 8002978:	461d      	mov	r5, r3
 800297a:	4b80      	ldr	r3, [pc, #512]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fe0a 	bl	8000598 <__aeabi_f2d>
 8002984:	a374      	add	r3, pc, #464	@ (adr r3, 8002b58 <PID_Acro_Update+0x3a8>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd fe5d 	bl	8000648 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fca1 	bl	80002dc <__adddf3>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f949 	bl	8000c38 <__aeabi_d2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4a75      	ldr	r2, [pc, #468]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 80029aa:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] = PITCH_KP_ACRO*error.y + PITCH_KD_ACRO*(filtered_error.y-filtered_error_prev.y)/dt + PITCH_KI_ACRO*integral.y;
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdf2 	bl	8000598 <__aeabi_f2d>
 80029b4:	a364      	add	r3, pc, #400	@ (adr r3, 8002b48 <PID_Acro_Update+0x398>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f7fd fe45 	bl	8000648 <__aeabi_dmul>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	461d      	mov	r5, r3
 80029c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 80029c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80029cc:	4b69      	ldr	r3, [pc, #420]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 80029ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	ee17 0a90 	vmov	r0, s15
 80029da:	f7fd fddd 	bl	8000598 <__aeabi_f2d>
 80029de:	a360      	add	r3, pc, #384	@ (adr r3, 8002b60 <PID_Acro_Update+0x3b0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe30 	bl	8000648 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4690      	mov	r8, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fdd1 	bl	8000598 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4640      	mov	r0, r8
 80029fc:	4649      	mov	r1, r9
 80029fe:	f7fd ff4d 	bl	800089c <__aeabi_ddiv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fc67 	bl	80002dc <__adddf3>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4614      	mov	r4, r2
 8002a14:	461d      	mov	r5, r3
 8002a16:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <PID_Acro_Update+0x3cc>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a34d      	add	r3, pc, #308	@ (adr r3, 8002b58 <PID_Acro_Update+0x3a8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fd fc53 	bl	80002dc <__adddf3>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8fb 	bl	8000c38 <__aeabi_d2f>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a4e      	ldr	r2, [pc, #312]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002a46:	6093      	str	r3, [r2, #8]
	functions[RUDDER] = YAW_KP_ACRO*error.z + YAW_KD_ACRO*(filtered_error.z-filtered_error_prev.z)/dt;
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fda4 	bl	8000598 <__aeabi_f2d>
 8002a50:	a33d      	add	r3, pc, #244	@ (adr r3, 8002b48 <PID_Acro_Update+0x398>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fdf7 	bl	8000648 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	461d      	mov	r5, r3
 8002a62:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 8002a64:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a68:	4b42      	ldr	r3, [pc, #264]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 8002a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	ee17 0a90 	vmov	r0, s15
 8002a76:	f7fd fd8f 	bl	8000598 <__aeabi_f2d>
 8002a7a:	a339      	add	r3, pc, #228	@ (adr r3, 8002b60 <PID_Acro_Update+0x3b0>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fde2 	bl	8000648 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4690      	mov	r8, r2
 8002a8a:	4699      	mov	r9, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fd fd83 	bl	8000598 <__aeabi_f2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4640      	mov	r0, r8
 8002a98:	4649      	mov	r1, r9
 8002a9a:	f7fd feff 	bl	800089c <__aeabi_ddiv>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	f7fd fc19 	bl	80002dc <__adddf3>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe f8c1 	bl	8000c38 <__aeabi_d2f>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a31      	ldr	r2, [pc, #196]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002aba:	6113      	str	r3, [r2, #16]

	functions[AILERONS] /= M_PI_2;
 8002abc:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd69 	bl	8000598 <__aeabi_f2d>
 8002ac6:	a328      	add	r3, pc, #160	@ (adr r3, 8002b68 <PID_Acro_Update+0x3b8>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fee6 	bl	800089c <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f8ae 	bl	8000c38 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a28      	ldr	r2, [pc, #160]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002ae0:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 8002ae2:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd56 	bl	8000598 <__aeabi_f2d>
 8002aec:	a31e      	add	r3, pc, #120	@ (adr r3, 8002b68 <PID_Acro_Update+0x3b8>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fed3 	bl	800089c <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f89b 	bl	8000c38 <__aeabi_d2f>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4a1e      	ldr	r2, [pc, #120]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002b06:	6093      	str	r3, [r2, #8]
	functions[RUDDER] /= M_PI_2;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd43 	bl	8000598 <__aeabi_f2d>
 8002b12:	a315      	add	r3, pc, #84	@ (adr r3, 8002b68 <PID_Acro_Update+0x3b8>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd fec0 	bl	800089c <__aeabi_ddiv>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe f888 	bl	8000c38 <__aeabi_d2f>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <PID_Acro_Update+0x3d0>)
 8002b2c:	6113      	str	r3, [r2, #16]

	filtered_error_prev = (Vec3) {filtered_error.x, filtered_error.y, filtered_error.z};
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <PID_Acro_Update+0x3c8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	480e      	ldr	r0, [pc, #56]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 8002b3c:	6001      	str	r1, [r0, #0]
 8002b3e:	490d      	ldr	r1, [pc, #52]	@ (8002b74 <PID_Acro_Update+0x3c4>)
 8002b40:	604a      	str	r2, [r1, #4]
 8002b42:	e01f      	b.n	8002b84 <PID_Acro_Update+0x3d4>
 8002b44:	f3af 8000 	nop.w
 8002b48:	33333333 	.word	0x33333333
 8002b4c:	3fe33333 	.word	0x3fe33333
 8002b50:	33333333 	.word	0x33333333
 8002b54:	3fd33333 	.word	0x3fd33333
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	3ffccccc 	.word	0x3ffccccc
 8002b60:	9999999a 	.word	0x9999999a
 8002b64:	3fd99999 	.word	0x3fd99999
 8002b68:	54442d18 	.word	0x54442d18
 8002b6c:	3ff921fb 	.word	0x3ff921fb
 8002b70:	3ecbb7e4 	.word	0x3ecbb7e4
 8002b74:	2000037c 	.word	0x2000037c
 8002b78:	20000370 	.word	0x20000370
 8002b7c:	20000388 	.word	0x20000388
 8002b80:	20000348 	.word	0x20000348
 8002b84:	4a03      	ldr	r2, [pc, #12]	@ (8002b94 <PID_Acro_Update+0x3e4>)
 8002b86:	6093      	str	r3, [r2, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	3740      	adds	r7, #64	@ 0x40
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b92:	bf00      	nop
 8002b94:	2000037c 	.word	0x2000037c

08002b98 <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	HAL_UART_AbortReceive(huart); //Sbus is already sending before initialising, cancel reception to avoid HAL_ERROR
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f008 f850 	bl	800ac48 <HAL_UART_AbortReceive>

	status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2219      	movs	r2, #25
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f009 fa65 	bl	800c07e <HAL_UARTEx_ReceiveToIdle_DMA>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <Sbus_Begin+0x2a>
		return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	e000      	b.n	8002bc4 <Sbus_Begin+0x2c>
	}

	return status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	3bc0      	subs	r3, #192	@ 0xc0
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002c44 <sbus_raw_to_us+0x78>
 8002be6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bea:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002c48 <sbus_raw_to_us+0x7c>
 8002bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c44 <sbus_raw_to_us+0x78>
 8002bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bfa:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002bfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c02:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002c44 <sbus_raw_to_us+0x78>
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	d501      	bpl.n	8002c14 <sbus_raw_to_us+0x48>
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <sbus_raw_to_us+0x80>)
 8002c12:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 8002c14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c18:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002c50 <sbus_raw_to_us+0x84>
 8002c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	dd01      	ble.n	8002c2a <sbus_raw_to_us+0x5e>
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <sbus_raw_to_us+0x88>)
 8002c28:	60fb      	str	r3, [r7, #12]
	return us;
 8002c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	ee17 3a90 	vmov	r3, s15
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	447a0000 	.word	0x447a0000
 8002c48:	44c80000 	.word	0x44c80000
 8002c4c:	447a0000 	.word	0x447a0000
 8002c50:	44fa0000 	.word	0x44fa0000
 8002c54:	44fa0000 	.word	0x44fa0000

08002c58 <Sbus_decode>:

void Sbus_decode(Sbus *receiver){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	@ 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((receiver->buffer[1]    |receiver->buffer[2]<<8)                           & 0x07FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((receiver->buffer[2]>>3 |receiver->buffer[3]<<5)                           & 0x07FF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	08db      	lsrs	r3, r3, #3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	78db      	ldrb	r3, [r3, #3]
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((receiver->buffer[3]>>6 |receiver->buffer[4]<<2 |receiver->buffer[5]<<10)  & 0x07FF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	78db      	ldrb	r3, [r3, #3]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	791b      	ldrb	r3, [r3, #4]
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	795b      	ldrb	r3, [r3, #5]
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((receiver->buffer[5]>>1 |receiver->buffer[6]<<7)                           & 0x07FF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	795b      	ldrb	r3, [r3, #5]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	799b      	ldrb	r3, [r3, #6]
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	01db      	lsls	r3, r3, #7
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((receiver->buffer[6]>>4 |receiver->buffer[7]<<4)                           & 0x07FF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	799b      	ldrb	r3, [r3, #6]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	b21a      	sxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	79db      	ldrb	r3, [r3, #7]
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((receiver->buffer[7]>>7 |receiver->buffer[8]<<1 |receiver->buffer[9]<<9)   & 0x07FF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	79db      	ldrb	r3, [r3, #7]
 8002d18:	09db      	lsrs	r3, r3, #7
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7a1b      	ldrb	r3, [r3, #8]
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21a      	sxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7a5b      	ldrb	r3, [r3, #9]
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((receiver->buffer[9]>>2 |receiver->buffer[10]<<6)                          & 0x07FF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7a5b      	ldrb	r3, [r3, #9]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7a9b      	ldrb	r3, [r3, #10]
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((receiver->buffer[10]>>5|receiver->buffer[11]<<3)                          & 0x07FF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7a9b      	ldrb	r3, [r3, #10]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7adb      	ldrb	r3, [r3, #11]
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((receiver->buffer[12]   |receiver->buffer[13]<<8)                          & 0x07FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7b1b      	ldrb	r3, [r3, #12]
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7b5b      	ldrb	r3, [r3, #13]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((receiver->buffer[13]>>3|receiver->buffer[14]<<5)                          & 0x07FF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7b5b      	ldrb	r3, [r3, #13]
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7b9b      	ldrb	r3, [r3, #14]
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	015b      	lsls	r3, r3, #5
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((receiver->buffer[14]>>6|receiver->buffer[15]<<2|receiver->buffer[16]<<10) & 0x07FF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7b9b      	ldrb	r3, [r3, #14]
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	b21a      	sxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7bdb      	ldrb	r3, [r3, #15]
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7c1b      	ldrb	r3, [r3, #16]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	029b      	lsls	r3, r3, #10
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((receiver->buffer[16]>>1|receiver->buffer[17]<<7)                          & 0x07FF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7c1b      	ldrb	r3, [r3, #16]
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7c5b      	ldrb	r3, [r3, #17]
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((receiver->buffer[17]>>4|receiver->buffer[18]<<4)                          & 0x07FF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7c5b      	ldrb	r3, [r3, #17]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7c9b      	ldrb	r3, [r3, #18]
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((receiver->buffer[18]>>7|receiver->buffer[19]<<1|receiver->buffer[20]<<9)  & 0x07FF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7c9b      	ldrb	r3, [r3, #18]
 8002e40:	09db      	lsrs	r3, r3, #7
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7cdb      	ldrb	r3, [r3, #19]
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	b21b      	sxth	r3, r3
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b21a      	sxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7d1b      	ldrb	r3, [r3, #20]
 8002e58:	b21b      	sxth	r3, r3
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((receiver->buffer[20]>>2|receiver->buffer[21]<<6)                          & 0x07FF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7d1b      	ldrb	r3, [r3, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7d5b      	ldrb	r3, [r3, #21]
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((receiver->buffer[21]>>5|receiver->buffer[22]<<3)                          & 0x07FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7d5b      	ldrb	r3, [r3, #21]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7d9b      	ldrb	r3, [r3, #22]
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (receiver->buffer[23] & (1 << 0)) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7ddb      	ldrb	r3, [r3, #23]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <Sbus_decode+0x26a>
    	raw_channels[16] = 1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002ec0:	e001      	b.n	8002ec6 <Sbus_decode+0x26e>
    }
    else {
    	raw_channels[16] = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (receiver->buffer[23] & (1 << 1)) {
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7ddb      	ldrb	r3, [r3, #23]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <Sbus_decode+0x280>
    	raw_channels[17] = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002ed6:	e001      	b.n	8002edc <Sbus_decode+0x284>
    }
    else {
    	raw_channels[17] = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    // Failsafe
	receiver->failsafe_status = SBUS_SIGNAL_OK;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	if (receiver->buffer[23] & (1 << 2)) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7ddb      	ldrb	r3, [r3, #23]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <Sbus_decode+0x2a0>
		receiver->failsafe_status = SBUS_SIGNAL_LOST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

	if (receiver->buffer[23] & (1 << 3)) {
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7ddb      	ldrb	r3, [r3, #23]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <Sbus_decode+0x2b4>
		receiver->failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2203      	movs	r2, #3
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

    for(int i = 0; i < 18; i++){
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f10:	e014      	b.n	8002f3c <Sbus_decode+0x2e4>
    	receiver->channels[i] = sbus_raw_to_us(raw_channels[i]);
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3330      	adds	r3, #48	@ 0x30
 8002f18:	443b      	add	r3, r7
 8002f1a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fe54 	bl	8002bcc <sbus_raw_to_us>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b299      	uxth	r1, r3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	460a      	mov	r2, r1
 8002f34:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 18; i++){
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	3301      	adds	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	2b11      	cmp	r3, #17
 8002f40:	dde7      	ble.n	8002f12 <Sbus_decode+0x2ba>
    }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UARTEx_RxEventCallback>:

uint32_t timer = 0;
extern Arming arming;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart4.Instance){
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_UARTEx_RxEventCallback+0x58>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d11b      	bne.n	8002f9c <HAL_UARTEx_RxEventCallback+0x50>

		if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d10b      	bne.n	8002f84 <HAL_UARTEx_RxEventCallback+0x38>
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f6e:	7e1b      	ldrb	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_UARTEx_RxEventCallback+0x38>
			Sbus_decode(&receiver);
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f76:	f7ff fe6f 	bl	8002c58 <Sbus_decode>
			receiver.dataRdy = 1;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			receiver.dataRdy = 0;
			HAL_UART_AbortReceive(&huart4);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
		}
	}
}
 8002f82:	e00b      	b.n	8002f9c <HAL_UARTEx_RxEventCallback+0x50>
			receiver.dataRdy = 0;
 8002f84:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			HAL_UART_AbortReceive(&huart4);
 8002f8c:	4805      	ldr	r0, [pc, #20]	@ (8002fa4 <HAL_UARTEx_RxEventCallback+0x58>)
 8002f8e:	f007 fe5b 	bl	800ac48 <HAL_UART_AbortReceive>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
 8002f92:	2219      	movs	r2, #25
 8002f94:	4904      	ldr	r1, [pc, #16]	@ (8002fa8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f96:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <HAL_UARTEx_RxEventCallback+0x58>)
 8002f98:	f009 f871 	bl	800c07e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000064c 	.word	0x2000064c
 8002fa8:	20000844 	.word	0x20000844

08002fac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d107      	bne.n	8002fcc <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002fbe:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 8002fc6:	4803      	ldr	r0, [pc, #12]	@ (8002fd4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002fc8:	f7fe ffb4 	bl	8001f34 <ICM42688_Read_DMA>
		}

	}

}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000884 	.word	0x20000884

08002fd8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_SPI_TxRxCpltCallback+0x34>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d10b      	bne.n	8003004 <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
 8002fee:	2110      	movs	r1, #16
 8002ff0:	4807      	ldr	r0, [pc, #28]	@ (8003010 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002ff2:	f002 fe71 	bl	8005cd8 <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 8002ff6:	4807      	ldr	r0, [pc, #28]	@ (8003014 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002ff8:	f7fe fdea 	bl	8001bd0 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000490 	.word	0x20000490
 8003010:	40020000 	.word	0x40020000
 8003014:	20000884 	.word	0x20000884

08003018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b08d      	sub	sp, #52	@ 0x34
 800301c:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800301e:	f000 fceb 	bl	80039f8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003022:	f001 fa66 	bl	80044f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003026:	f000 f915 	bl	8003254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800302a:	f000 fc59 	bl	80038e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800302e:	f000 fc15 	bl	800385c <MX_DMA_Init>
  MX_ADC1_Init();
 8003032:	f000 f97b 	bl	800332c <MX_ADC1_Init>
  MX_I2C1_Init();
 8003036:	f000 f9cb 	bl	80033d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800303a:	f000 fa09 	bl	8003450 <MX_SPI1_Init>
  MX_TIM2_Init();
 800303e:	f000 fa45 	bl	80034cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003042:	f000 fadb 	bl	80035fc <MX_TIM3_Init>
  MX_UART4_Init();
 8003046:	f000 fb71 	bl	800372c <MX_UART4_Init>
  MX_UART5_Init();
 800304a:	f000 fba7 	bl	800379c <MX_UART5_Init>
  MX_USART6_UART_Init();
 800304e:	f000 fbd5 	bl	80037fc <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8003052:	f00c fc0d 	bl	800f870 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  //Start Sbus Reception and Sync
  if(Sbus_Begin(&huart4, &receiver) != HAL_OK) {
 8003056:	4970      	ldr	r1, [pc, #448]	@ (8003218 <main+0x200>)
 8003058:	4870      	ldr	r0, [pc, #448]	@ (800321c <main+0x204>)
 800305a:	f7ff fd9d 	bl	8002b98 <Sbus_Begin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <main+0x50>
	  Error_Handler();
 8003064:	f000 fcf4 	bl	8003a50 <Error_Handler>
  }

  //Start IMU, configure ranges, filters & interrupts
  if(ICM42688_Begin(&imu, &hspi1) != HAL_OK) {
 8003068:	496d      	ldr	r1, [pc, #436]	@ (8003220 <main+0x208>)
 800306a:	486e      	ldr	r0, [pc, #440]	@ (8003224 <main+0x20c>)
 800306c:	f7fe fc90 	bl	8001990 <ICM42688_Begin>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <main+0x62>
	  Error_Handler();
 8003076:	f000 fceb 	bl	8003a50 <Error_Handler>
  }

  //Start DMA Read for Vbat ADC
  if(Battery_Begin(&hadc1) != HAL_OK) {
 800307a:	486b      	ldr	r0, [pc, #428]	@ (8003228 <main+0x210>)
 800307c:	f7fe fa24 	bl	80014c8 <Battery_Begin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <main+0x72>
	  Error_Handler();
 8003086:	f000 fce3 	bl	8003a50 <Error_Handler>
  }

  //Configure output timers
  if(Output_Begin(&htim2, &htim3) != HAL_OK) {
 800308a:	4968      	ldr	r1, [pc, #416]	@ (800322c <main+0x214>)
 800308c:	4868      	ldr	r0, [pc, #416]	@ (8003230 <main+0x218>)
 800308e:	f7fe ff75 	bl	8001f7c <Output_Begin>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <main+0x84>
	  Error_Handler();
 8003098:	f000 fcda 	bl	8003a50 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 800309c:	f001 fa7a 	bl	8004594 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b64      	ldr	r3, [pc, #400]	@ (8003234 <main+0x21c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d9f7      	bls.n	800309c <main+0x84>

		Battery_Update();
 80030ac:	f7fe fa24 	bl	80014f8 <Battery_Update>

		if(imu.dataRdy){
 80030b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003224 <main+0x20c>)
 80030b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03e      	beq.n	8003138 <main+0x120>

			AHRS_Update_Complementary_Filter(imu.gyro, imu.accel, 0.8, DELTA_T);
 80030ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003224 <main+0x20c>)
 80030bc:	ed93 5a01 	vldr	s10, [r3, #4]
 80030c0:	edd3 5a02 	vldr	s11, [r3, #8]
 80030c4:	ed93 6a03 	vldr	s12, [r3, #12]
 80030c8:	4b56      	ldr	r3, [pc, #344]	@ (8003224 <main+0x20c>)
 80030ca:	edd3 6a04 	vldr	s13, [r3, #16]
 80030ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80030d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80030d6:	eddf 3a58 	vldr	s7, [pc, #352]	@ 8003238 <main+0x220>
 80030da:	ed9f 3a58 	vldr	s6, [pc, #352]	@ 800323c <main+0x224>
 80030de:	eef0 1a45 	vmov.f32	s3, s10
 80030e2:	eeb0 2a65 	vmov.f32	s4, s11
 80030e6:	eef0 2a46 	vmov.f32	s5, s12
 80030ea:	eeb0 0a66 	vmov.f32	s0, s13
 80030ee:	eef0 0a47 	vmov.f32	s1, s14
 80030f2:	eeb0 1a67 	vmov.f32	s2, s15
 80030f6:	f7fe f92f 	bl	8001358 <AHRS_Update_Complementary_Filter>

			sprintf(usbBuffer, "%f, %f\r\n", attitude.x, attitude.y);
 80030fa:	4b51      	ldr	r3, [pc, #324]	@ (8003240 <main+0x228>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fa4a 	bl	8000598 <__aeabi_f2d>
 8003104:	4604      	mov	r4, r0
 8003106:	460d      	mov	r5, r1
 8003108:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <main+0x228>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa43 	bl	8000598 <__aeabi_f2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	e9cd 2300 	strd	r2, r3, [sp]
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	4949      	ldr	r1, [pc, #292]	@ (8003244 <main+0x22c>)
 8003120:	4849      	ldr	r0, [pc, #292]	@ (8003248 <main+0x230>)
 8003122:	f00d ff05 	bl	8010f30 <siprintf>
			CDC_Transmit_FS((uint8_t *) usbBuffer, strlen(usbBuffer));
 8003126:	4848      	ldr	r0, [pc, #288]	@ (8003248 <main+0x230>)
 8003128:	f7fd f8ca 	bl	80002c0 <strlen>
 800312c:	4603      	mov	r3, r0
 800312e:	b29b      	uxth	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	4845      	ldr	r0, [pc, #276]	@ (8003248 <main+0x230>)
 8003134:	f00c fc5a 	bl	800f9ec <CDC_Transmit_FS>

		}

		if(receiver.dataRdy){
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <main+0x200>)
 800313a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800313e:	2b00      	cmp	r3, #0
 8003140:	d051      	beq.n	80031e6 <main+0x1ce>

			Process_Input(receiver);
 8003142:	4e35      	ldr	r6, [pc, #212]	@ (8003218 <main+0x200>)
 8003144:	466d      	mov	r5, sp
 8003146:	f106 0410 	add.w	r4, r6, #16
 800314a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003156:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800315a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800315e:	f7fe fb93 	bl	8001888 <Process_Input>

			if(flight_mode == ACRO_MODE) Acro_Mode(receiver, DELTA_T);
 8003162:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <main+0x234>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d112      	bne.n	8003190 <main+0x178>
 800316a:	4e2b      	ldr	r6, [pc, #172]	@ (8003218 <main+0x200>)
 800316c:	466d      	mov	r5, sp
 800316e:	f106 0410 	add.w	r4, r6, #16
 8003172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800317e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003182:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003186:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8003238 <main+0x220>
 800318a:	f7fe fa75 	bl	8001678 <Acro_Mode>
 800318e:	e02a      	b.n	80031e6 <main+0x1ce>
			else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver, DELTA_T);
 8003190:	4b2e      	ldr	r3, [pc, #184]	@ (800324c <main+0x234>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d112      	bne.n	80031be <main+0x1a6>
 8003198:	4e1f      	ldr	r6, [pc, #124]	@ (8003218 <main+0x200>)
 800319a:	466d      	mov	r5, sp
 800319c:	f106 0410 	add.w	r4, r6, #16
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80031b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031b4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8003238 <main+0x220>
 80031b8:	f7fe f9b6 	bl	8001528 <Stabilized_Mode>
 80031bc:	e013      	b.n	80031e6 <main+0x1ce>
			else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver);
 80031be:	4b23      	ldr	r3, [pc, #140]	@ (800324c <main+0x234>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <main+0x1ce>
 80031c6:	4e14      	ldr	r6, [pc, #80]	@ (8003218 <main+0x200>)
 80031c8:	466d      	mov	r5, sp
 80031ca:	f106 0410 	add.w	r4, r6, #16
 80031ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80031de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031e2:	f7fe faff 	bl	80017e4 <Manual_Mode>

		}

		Output_Update(&htim2, &htim3);
 80031e6:	4911      	ldr	r1, [pc, #68]	@ (800322c <main+0x214>)
 80031e8:	4811      	ldr	r0, [pc, #68]	@ (8003230 <main+0x218>)
 80031ea:	f7fe ff71 	bl	80020d0 <Output_Update>



		timer += DELTA_T*1000;
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <main+0x21c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9ae 	bl	8000554 <__aeabi_ui2d>
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <main+0x238>)
 80031fe:	f7fd f86d 	bl	80002dc <__adddf3>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f7fd fcf5 	bl	8000bf8 <__aeabi_d2uiz>
 800320e:	4603      	mov	r3, r0
 8003210:	4a08      	ldr	r2, [pc, #32]	@ (8003234 <main+0x21c>)
 8003212:	6013      	str	r3, [r2, #0]
	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8003214:	e742      	b.n	800309c <main+0x84>
 8003216:	bf00      	nop
 8003218:	20000844 	.word	0x20000844
 800321c:	2000064c 	.word	0x2000064c
 8003220:	20000490 	.word	0x20000490
 8003224:	20000884 	.word	0x20000884
 8003228:	20000394 	.word	0x20000394
 800322c:	20000600 	.word	0x20000600
 8003230:	200005b4 	.word	0x200005b4
 8003234:	200008f0 	.word	0x200008f0
 8003238:	3c23d70a 	.word	0x3c23d70a
 800323c:	3f4ccccd 	.word	0x3f4ccccd
 8003240:	20000314 	.word	0x20000314
 8003244:	08014238 	.word	0x08014238
 8003248:	200008bc 	.word	0x200008bc
 800324c:	20000334 	.word	0x20000334
 8003250:	40240000 	.word	0x40240000

08003254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b094      	sub	sp, #80	@ 0x50
 8003258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325a:	f107 0320 	add.w	r3, r7, #32
 800325e:	2230      	movs	r2, #48	@ 0x30
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f00d fec9 	bl	8010ffa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <SystemClock_Config+0xd0>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	4a29      	ldr	r2, [pc, #164]	@ (8003324 <SystemClock_Config+0xd0>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	@ 0x40
 8003284:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <SystemClock_Config+0xd0>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003290:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <SystemClock_Config+0xd4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <SystemClock_Config+0xd4>)
 8003296:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <SystemClock_Config+0xd4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b2:	2302      	movs	r3, #2
 80032b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032bc:	2304      	movs	r3, #4
 80032be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80032c0:	23d8      	movs	r3, #216	@ 0xd8
 80032c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80032c8:	2309      	movs	r3, #9
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032cc:	f107 0320 	add.w	r3, r7, #32
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 f95b 	bl	800758c <HAL_RCC_OscConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80032dc:	f000 fbb8 	bl	8003a50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032e0:	f004 f904 	bl	80074ec <HAL_PWREx_EnableOverDrive>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032ea:	f000 fbb1 	bl	8003a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ee:	230f      	movs	r3, #15
 80032f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f2:	2302      	movs	r3, #2
 80032f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	2107      	movs	r1, #7
 800330c:	4618      	mov	r0, r3
 800330e:	f004 fbe1 	bl	8007ad4 <HAL_RCC_ClockConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003318:	f000 fb9a 	bl	8003a50 <Error_Handler>
  }
}
 800331c:	bf00      	nop
 800331e:	3750      	adds	r7, #80	@ 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000

0800332c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003332:	463b      	mov	r3, r7
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800333e:	4b21      	ldr	r3, [pc, #132]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003340:	4a21      	ldr	r2, [pc, #132]	@ (80033c8 <MX_ADC1_Init+0x9c>)
 8003342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003344:	4b1f      	ldr	r3, [pc, #124]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003346:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800334a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800334c:	4b1d      	ldr	r3, [pc, #116]	@ (80033c4 <MX_ADC1_Init+0x98>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003352:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003358:	4b1a      	ldr	r3, [pc, #104]	@ (80033c4 <MX_ADC1_Init+0x98>)
 800335a:	2201      	movs	r2, #1
 800335c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800335e:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003368:	2200      	movs	r2, #0
 800336a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800336c:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <MX_ADC1_Init+0x98>)
 800336e:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <MX_ADC1_Init+0xa0>)
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003372:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003378:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <MX_ADC1_Init+0x98>)
 800337a:	2201      	movs	r2, #1
 800337c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003386:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <MX_ADC1_Init+0x98>)
 8003388:	2201      	movs	r2, #1
 800338a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800338c:	480d      	ldr	r0, [pc, #52]	@ (80033c4 <MX_ADC1_Init+0x98>)
 800338e:	f001 f931 	bl	80045f4 <HAL_ADC_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003398:	f000 fb5a 	bl	8003a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800339c:	230a      	movs	r3, #10
 800339e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033a0:	2301      	movs	r3, #1
 80033a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80033a4:	2307      	movs	r3, #7
 80033a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033a8:	463b      	mov	r3, r7
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	@ (80033c4 <MX_ADC1_Init+0x98>)
 80033ae:	f001 fa81 	bl	80048b4 <HAL_ADC_ConfigChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80033b8:	f000 fb4a 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000394 	.word	0x20000394
 80033c8:	40012000 	.word	0x40012000
 80033cc:	0f000001 	.word	0x0f000001

080033d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <MX_I2C1_Init+0x78>)
 80033d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80033da:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033dc:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <MX_I2C1_Init+0x7c>)
 80033de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033e0:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033ec:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033f2:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <MX_I2C1_Init+0x74>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <MX_I2C1_Init+0x74>)
 8003400:	2200      	movs	r2, #0
 8003402:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <MX_I2C1_Init+0x74>)
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800340a:	480e      	ldr	r0, [pc, #56]	@ (8003444 <MX_I2C1_Init+0x74>)
 800340c:	f002 fcb0 	bl	8005d70 <HAL_I2C_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003416:	f000 fb1b 	bl	8003a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800341a:	2100      	movs	r1, #0
 800341c:	4809      	ldr	r0, [pc, #36]	@ (8003444 <MX_I2C1_Init+0x74>)
 800341e:	f002 fd43 	bl	8005ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003428:	f000 fb12 	bl	8003a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800342c:	2100      	movs	r1, #0
 800342e:	4805      	ldr	r0, [pc, #20]	@ (8003444 <MX_I2C1_Init+0x74>)
 8003430:	f002 fd85 	bl	8005f3e <HAL_I2CEx_ConfigDigitalFilter>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800343a:	f000 fb09 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000043c 	.word	0x2000043c
 8003448:	40005400 	.word	0x40005400
 800344c:	20404768 	.word	0x20404768

08003450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003454:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003456:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <MX_SPI1_Init+0x78>)
 8003458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800345a:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <MX_SPI1_Init+0x74>)
 800345c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003468:	4b16      	ldr	r3, [pc, #88]	@ (80034c4 <MX_SPI1_Init+0x74>)
 800346a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800346e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003470:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003476:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <MX_SPI1_Init+0x74>)
 800347e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003484:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003486:	2210      	movs	r2, #16
 8003488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800348a:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <MX_SPI1_Init+0x74>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003492:	2200      	movs	r2, #0
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003496:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <MX_SPI1_Init+0x74>)
 8003498:	2200      	movs	r2, #0
 800349a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <MX_SPI1_Init+0x74>)
 800349e:	2207      	movs	r2, #7
 80034a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <MX_SPI1_Init+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <MX_SPI1_Init+0x74>)
 80034aa:	2208      	movs	r2, #8
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034ae:	4805      	ldr	r0, [pc, #20]	@ (80034c4 <MX_SPI1_Init+0x74>)
 80034b0:	f005 f880 	bl	80085b4 <HAL_SPI_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80034ba:	f000 fac9 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000490 	.word	0x20000490
 80034c8:	40013000 	.word	0x40013000

080034cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08e      	sub	sp, #56	@ 0x38
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ec:	463b      	mov	r3, r7
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	615a      	str	r2, [r3, #20]
 80034fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034fe:	4b3e      	ldr	r3, [pc, #248]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003504:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8003506:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003508:	223b      	movs	r2, #59	@ 0x3b
 800350a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350c:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8003512:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003514:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8003518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351a:	4b37      	ldr	r3, [pc, #220]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003520:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003526:	4834      	ldr	r0, [pc, #208]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003528:	f006 fb5e 	bl	8009be8 <HAL_TIM_Base_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003532:	f000 fa8d 	bl	8003a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800353c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003540:	4619      	mov	r1, r3
 8003542:	482d      	ldr	r0, [pc, #180]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003544:	f006 fe16 	bl	800a174 <HAL_TIM_ConfigClockSource>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800354e:	f000 fa7f 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003552:	4829      	ldr	r0, [pc, #164]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003554:	f006 fb9f 	bl	8009c96 <HAL_TIM_PWM_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800355e:	f000 fa77 	bl	8003a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4821      	ldr	r0, [pc, #132]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003572:	f007 fa8d 	bl	800aa90 <HAL_TIMEx_MasterConfigSynchronization>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800357c:	f000 fa68 	bl	8003a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003580:	2360      	movs	r3, #96	@ 0x60
 8003582:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003590:	463b      	mov	r3, r7
 8003592:	2200      	movs	r2, #0
 8003594:	4619      	mov	r1, r3
 8003596:	4818      	ldr	r0, [pc, #96]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 8003598:	f006 fcd8 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80035a2:	f000 fa55 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035a6:	463b      	mov	r3, r7
 80035a8:	2204      	movs	r2, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4812      	ldr	r0, [pc, #72]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 80035ae:	f006 fccd 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80035b8:	f000 fa4a 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035bc:	463b      	mov	r3, r7
 80035be:	2208      	movs	r2, #8
 80035c0:	4619      	mov	r1, r3
 80035c2:	480d      	ldr	r0, [pc, #52]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 80035c4:	f006 fcc2 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80035ce:	f000 fa3f 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035d2:	463b      	mov	r3, r7
 80035d4:	220c      	movs	r2, #12
 80035d6:	4619      	mov	r1, r3
 80035d8:	4807      	ldr	r0, [pc, #28]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 80035da:	f006 fcb7 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80035e4:	f000 fa34 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035e8:	4803      	ldr	r0, [pc, #12]	@ (80035f8 <MX_TIM2_Init+0x12c>)
 80035ea:	f000 fc23 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 80035ee:	bf00      	nop
 80035f0:	3738      	adds	r7, #56	@ 0x38
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200005b4 	.word	0x200005b4

080035fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	@ 0x38
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361c:	463b      	mov	r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800362e:	4b3d      	ldr	r3, [pc, #244]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003630:	4a3d      	ldr	r2, [pc, #244]	@ (8003728 <MX_TIM3_Init+0x12c>)
 8003632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003636:	223b      	movs	r2, #59	@ 0x3b
 8003638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363a:	4b3a      	ldr	r3, [pc, #232]	@ (8003724 <MX_TIM3_Init+0x128>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8003640:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003642:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8003646:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003648:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <MX_TIM3_Init+0x128>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364e:	4b35      	ldr	r3, [pc, #212]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003654:	4833      	ldr	r0, [pc, #204]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003656:	f006 fac7 	bl	8009be8 <HAL_TIM_Base_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003660:	f000 f9f6 	bl	8003a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800366a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800366e:	4619      	mov	r1, r3
 8003670:	482c      	ldr	r0, [pc, #176]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003672:	f006 fd7f 	bl	800a174 <HAL_TIM_ConfigClockSource>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800367c:	f000 f9e8 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003680:	4828      	ldr	r0, [pc, #160]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003682:	f006 fb08 	bl	8009c96 <HAL_TIM_PWM_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800368c:	f000 f9e0 	bl	8003a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	4821      	ldr	r0, [pc, #132]	@ (8003724 <MX_TIM3_Init+0x128>)
 80036a0:	f007 f9f6 	bl	800aa90 <HAL_TIMEx_MasterConfigSynchronization>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80036aa:	f000 f9d1 	bl	8003a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036ae:	2360      	movs	r3, #96	@ 0x60
 80036b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036be:	463b      	mov	r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	4619      	mov	r1, r3
 80036c4:	4817      	ldr	r0, [pc, #92]	@ (8003724 <MX_TIM3_Init+0x128>)
 80036c6:	f006 fc41 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80036d0:	f000 f9be 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036d4:	463b      	mov	r3, r7
 80036d6:	2204      	movs	r2, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4812      	ldr	r0, [pc, #72]	@ (8003724 <MX_TIM3_Init+0x128>)
 80036dc:	f006 fc36 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80036e6:	f000 f9b3 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036ea:	463b      	mov	r3, r7
 80036ec:	2208      	movs	r2, #8
 80036ee:	4619      	mov	r1, r3
 80036f0:	480c      	ldr	r0, [pc, #48]	@ (8003724 <MX_TIM3_Init+0x128>)
 80036f2:	f006 fc2b 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80036fc:	f000 f9a8 	bl	8003a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003700:	463b      	mov	r3, r7
 8003702:	220c      	movs	r2, #12
 8003704:	4619      	mov	r1, r3
 8003706:	4807      	ldr	r0, [pc, #28]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003708:	f006 fc20 	bl	8009f4c <HAL_TIM_PWM_ConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003712:	f000 f99d 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003716:	4803      	ldr	r0, [pc, #12]	@ (8003724 <MX_TIM3_Init+0x128>)
 8003718:	f000 fb8c 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 800371c:	bf00      	nop
 800371e:	3738      	adds	r7, #56	@ 0x38
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000600 	.word	0x20000600
 8003728:	40000400 	.word	0x40000400

0800372c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003730:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <MX_UART4_Init+0x64>)
 8003732:	4a18      	ldr	r2, [pc, #96]	@ (8003794 <MX_UART4_Init+0x68>)
 8003734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <MX_UART4_Init+0x64>)
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <MX_UART4_Init+0x6c>)
 800373a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <MX_UART4_Init+0x64>)
 800373e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <MX_UART4_Init+0x64>)
 8003746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800374a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <MX_UART4_Init+0x64>)
 800374e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003752:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8003754:	4b0e      	ldr	r3, [pc, #56]	@ (8003790 <MX_UART4_Init+0x64>)
 8003756:	2204      	movs	r2, #4
 8003758:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <MX_UART4_Init+0x64>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <MX_UART4_Init+0x64>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <MX_UART4_Init+0x64>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <MX_UART4_Init+0x64>)
 800376e:	2202      	movs	r2, #2
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <MX_UART4_Init+0x64>)
 8003774:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800377a:	4805      	ldr	r0, [pc, #20]	@ (8003790 <MX_UART4_Init+0x64>)
 800377c:	f007 fa16 	bl	800abac <HAL_UART_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8003786:	f000 f963 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000064c 	.word	0x2000064c
 8003794:	40004c00 	.word	0x40004c00
 8003798:	000186a0 	.word	0x000186a0

0800379c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80037a0:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037a2:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <MX_UART5_Init+0x5c>)
 80037a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80037a6:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80037b4:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80037ba:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037c2:	220c      	movs	r2, #12
 80037c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80037cc:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80037de:	4805      	ldr	r0, [pc, #20]	@ (80037f4 <MX_UART5_Init+0x58>)
 80037e0:	f007 f9e4 	bl	800abac <HAL_UART_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80037ea:	f000 f931 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200006d4 	.word	0x200006d4
 80037f8:	40005000 	.word	0x40005000

080037fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003802:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <MX_USART6_UART_Init+0x5c>)
 8003804:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003806:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800380c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <MX_USART6_UART_Init+0x58>)
 8003840:	f007 f9b4 	bl	800abac <HAL_UART_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800384a:	f000 f901 	bl	8003a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000075c 	.word	0x2000075c
 8003858:	40011400 	.word	0x40011400

0800385c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <MX_DMA_Init+0x80>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <MX_DMA_Init+0x80>)
 8003868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800386c:	6313      	str	r3, [r2, #48]	@ 0x30
 800386e:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <MX_DMA_Init+0x80>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800387a:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <MX_DMA_Init+0x80>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a17      	ldr	r2, [pc, #92]	@ (80038dc <MX_DMA_Init+0x80>)
 8003880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <MX_DMA_Init+0x80>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	200d      	movs	r0, #13
 8003898:	f001 fbbd 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800389c:	200d      	movs	r0, #13
 800389e:	f001 fbd6 	bl	800504e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	2038      	movs	r0, #56	@ 0x38
 80038a8:	f001 fbb5 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80038ac:	2038      	movs	r0, #56	@ 0x38
 80038ae:	f001 fbce 	bl	800504e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	203b      	movs	r0, #59	@ 0x3b
 80038b8:	f001 fbad 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80038bc:	203b      	movs	r0, #59	@ 0x3b
 80038be:	f001 fbc6 	bl	800504e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	203c      	movs	r0, #60	@ 0x3c
 80038c8:	f001 fba5 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80038cc:	203c      	movs	r0, #60	@ 0x3c
 80038ce:	f001 fbbe 	bl	800504e <HAL_NVIC_EnableIRQ>

}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f6:	4b3d      	ldr	r3, [pc, #244]	@ (80039ec <MX_GPIO_Init+0x10c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4a3c      	ldr	r2, [pc, #240]	@ (80039ec <MX_GPIO_Init+0x10c>)
 80038fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003900:	6313      	str	r3, [r2, #48]	@ 0x30
 8003902:	4b3a      	ldr	r3, [pc, #232]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800390e:	4b37      	ldr	r3, [pc, #220]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	4a36      	ldr	r2, [pc, #216]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6313      	str	r3, [r2, #48]	@ 0x30
 800391a:	4b34      	ldr	r3, [pc, #208]	@ (80039ec <MX_GPIO_Init+0x10c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	4a30      	ldr	r2, [pc, #192]	@ (80039ec <MX_GPIO_Init+0x10c>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	@ 0x30
 8003932:	4b2e      	ldr	r3, [pc, #184]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393e:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	4a2a      	ldr	r2, [pc, #168]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	@ 0x30
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <MX_GPIO_Init+0x10c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a24      	ldr	r2, [pc, #144]	@ (80039ec <MX_GPIO_Init+0x10c>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
 8003962:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <MX_GPIO_Init+0x10c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 800396e:	2200      	movs	r2, #0
 8003970:	2108      	movs	r1, #8
 8003972:	481f      	ldr	r0, [pc, #124]	@ (80039f0 <MX_GPIO_Init+0x110>)
 8003974:	f002 f9b0 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003978:	2200      	movs	r2, #0
 800397a:	2110      	movs	r1, #16
 800397c:	481d      	ldr	r0, [pc, #116]	@ (80039f4 <MX_GPIO_Init+0x114>)
 800397e:	f002 f9ab 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8003982:	2308      	movs	r3, #8
 8003984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	4619      	mov	r1, r3
 8003998:	4815      	ldr	r0, [pc, #84]	@ (80039f0 <MX_GPIO_Init+0x110>)
 800399a:	f002 f801 	bl	80059a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800399e:	2310      	movs	r3, #16
 80039a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	480f      	ldr	r0, [pc, #60]	@ (80039f4 <MX_GPIO_Init+0x114>)
 80039b6:	f001 fff3 	bl	80059a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80039ba:	2310      	movs	r3, #16
 80039bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4619      	mov	r1, r3
 80039ce:	4808      	ldr	r0, [pc, #32]	@ (80039f0 <MX_GPIO_Init+0x110>)
 80039d0:	f001 ffe6 	bl	80059a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	200a      	movs	r0, #10
 80039da:	f001 fb1c 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80039de:	200a      	movs	r0, #10
 80039e0:	f001 fb35 	bl	800504e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80039e4:	bf00      	nop
 80039e6:	3728      	adds	r7, #40	@ 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020000 	.word	0x40020000

080039f8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80039fe:	463b      	mov	r3, r7
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003a0a:	f001 fb3b 	bl	8005084 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003a1a:	231f      	movs	r3, #31
 8003a1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003a1e:	2387      	movs	r3, #135	@ 0x87
 8003a20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003a26:	2300      	movs	r3, #0
 8003a28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fb59 	bl	80050f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003a42:	2004      	movs	r0, #4
 8003a44:	f001 fb36 	bl	80050b4 <HAL_MPU_Enable>

}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a56:	b672      	cpsid	i
}
 8003a58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 8003a5a:	2108      	movs	r1, #8
 8003a5c:	4807      	ldr	r0, [pc, #28]	@ (8003a7c <Error_Handler+0x2c>)
 8003a5e:	f002 f954 	bl	8005d0a <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++){
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	e003      	b.n	8003a70 <Error_Handler+0x20>
		  __NOP();
 8003a68:	bf00      	nop
	  for(int i = 0; i < 1000000; i++){
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a03      	ldr	r2, [pc, #12]	@ (8003a80 <Error_Handler+0x30>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	ddf7      	ble.n	8003a68 <Error_Handler+0x18>
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 8003a78:	e7ef      	b.n	8003a5a <Error_Handler+0xa>
 8003a7a:	bf00      	nop
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	000f423f 	.word	0x000f423f

08003a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_MspInit+0x44>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	@ 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <HAL_ADC_MspInit+0xd4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d153      	bne.n	8003b96 <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003aee:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003afa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b06:	4b27      	ldr	r3, [pc, #156]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_ADC_MspInit+0xd8>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b22:	2303      	movs	r3, #3
 8003b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	4619      	mov	r1, r3
 8003b30:	481d      	ldr	r0, [pc, #116]	@ (8003ba8 <HAL_ADC_MspInit+0xdc>)
 8003b32:	f001 ff35 	bl	80059a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b38:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_ADC_MspInit+0xe4>)
 8003b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b74:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b7a:	480c      	ldr	r0, [pc, #48]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b7c:	f001 fafa 	bl	8005174 <HAL_DMA_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003b86:	f7ff ff63 	bl	8003a50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a07      	ldr	r2, [pc, #28]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b90:	4a06      	ldr	r2, [pc, #24]	@ (8003bac <HAL_ADC_MspInit+0xe0>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b96:	bf00      	nop
 8003b98:	3728      	adds	r7, #40	@ 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40012000 	.word	0x40012000
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	200003dc 	.word	0x200003dc
 8003bb0:	40026470 	.word	0x40026470

08003bb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b0aa      	sub	sp, #168	@ 0xa8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f00d fa10 	bl	8010ffa <memset>
  if(hi2c->Instance==I2C1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a21      	ldr	r2, [pc, #132]	@ (8003c64 <HAL_I2C_MspInit+0xb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d13b      	bne.n	8003c5c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003be8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 f994 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bfe:	f7ff ff27 	bl	8003a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c02:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c1a:	23c0      	movs	r3, #192	@ 0xc0
 8003c1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c20:	2312      	movs	r3, #18
 8003c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c32:	2304      	movs	r3, #4
 8003c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	480b      	ldr	r0, [pc, #44]	@ (8003c6c <HAL_I2C_MspInit+0xb8>)
 8003c40:	f001 feae 	bl	80059a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c44:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	4a07      	ldr	r2, [pc, #28]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_I2C_MspInit+0xb4>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003c5c:	bf00      	nop
 8003c5e:	37a8      	adds	r7, #168	@ 0xa8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40005400 	.word	0x40005400
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40020400 	.word	0x40020400

08003c70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a49      	ldr	r2, [pc, #292]	@ (8003db4 <HAL_SPI_MspInit+0x144>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f040 808c 	bne.w	8003dac <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c94:	4b48      	ldr	r3, [pc, #288]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	4a47      	ldr	r2, [pc, #284]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003c9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca0:	4b45      	ldr	r3, [pc, #276]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cac:	4b42      	ldr	r3, [pc, #264]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	4a41      	ldr	r2, [pc, #260]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8003db8 <HAL_SPI_MspInit+0x148>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cc4:	23e0      	movs	r3, #224	@ 0xe0
 8003cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cd4:	2305      	movs	r3, #5
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4837      	ldr	r0, [pc, #220]	@ (8003dbc <HAL_SPI_MspInit+0x14c>)
 8003ce0:	f001 fe5e 	bl	80059a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003ce4:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003ce6:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <HAL_SPI_MspInit+0x154>)
 8003ce8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003cea:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003cec:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003cf0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf2:	4b33      	ldr	r3, [pc, #204]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cf8:	4b31      	ldr	r3, [pc, #196]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cfe:	4b30      	ldr	r3, [pc, #192]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d04:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d06:	4b2e      	ldr	r3, [pc, #184]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003d12:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d18:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d1e:	4b28      	ldr	r3, [pc, #160]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003d24:	4826      	ldr	r0, [pc, #152]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d26:	f001 fa25 	bl	8005174 <HAL_DMA_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003d30:	f7ff fe8e 	bl	8003a50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a22      	ldr	r2, [pc, #136]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d3a:	4a21      	ldr	r2, [pc, #132]	@ (8003dc0 <HAL_SPI_MspInit+0x150>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003d40:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d42:	4a22      	ldr	r2, [pc, #136]	@ (8003dcc <HAL_SPI_MspInit+0x15c>)
 8003d44:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d48:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003d4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d50:	2240      	movs	r2, #64	@ 0x40
 8003d52:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d54:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d60:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d62:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d68:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003d6e:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d74:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003d80:	4811      	ldr	r0, [pc, #68]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d82:	f001 f9f7 	bl	8005174 <HAL_DMA_Init>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8003d8c:	f7ff fe60 	bl	8003a50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d94:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d96:	4a0c      	ldr	r2, [pc, #48]	@ (8003dc8 <HAL_SPI_MspInit+0x158>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2100      	movs	r1, #0
 8003da0:	2023      	movs	r0, #35	@ 0x23
 8003da2:	f001 f938 	bl	8005016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003da6:	2023      	movs	r0, #35	@ 0x23
 8003da8:	f001 f951 	bl	800504e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003dac:	bf00      	nop
 8003dae:	3728      	adds	r7, #40	@ 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013000 	.word	0x40013000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	200004f4 	.word	0x200004f4
 8003dc4:	40026410 	.word	0x40026410
 8003dc8:	20000554 	.word	0x20000554
 8003dcc:	40026458 	.word	0x40026458

08003dd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003dfa:	e010      	b.n	8003e1e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0b      	ldr	r2, [pc, #44]	@ (8003e30 <HAL_TIM_Base_MspInit+0x60>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10b      	bne.n	8003e1e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a08      	ldr	r2, [pc, #32]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_TIM_Base_MspInit+0x5c>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40000400 	.word	0x40000400

08003e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	@ 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d139      	bne.n	8003eca <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e56:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e62:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6e:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7a:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003e86:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	481d      	ldr	r0, [pc, #116]	@ (8003f18 <HAL_TIM_MspPostInit+0xe4>)
 8003ea4:	f001 fd7c 	bl	80059a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4816      	ldr	r0, [pc, #88]	@ (8003f1c <HAL_TIM_MspPostInit+0xe8>)
 8003ec4:	f001 fd6c 	bl	80059a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ec8:	e020      	b.n	8003f0c <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a14      	ldr	r2, [pc, #80]	@ (8003f20 <HAL_TIM_MspPostInit+0xec>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <HAL_TIM_MspPostInit+0xe0>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003eec:	2333      	movs	r3, #51	@ 0x33
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003efc:	2302      	movs	r3, #2
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <HAL_TIM_MspPostInit+0xe8>)
 8003f08:	f001 fd4a 	bl	80059a0 <HAL_GPIO_Init>
}
 8003f0c:	bf00      	nop
 8003f0e:	3728      	adds	r7, #40	@ 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40000400 	.word	0x40000400

08003f24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b0b0      	sub	sp, #192	@ 0xc0
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f40:	2280      	movs	r2, #128	@ 0x80
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f00d f858 	bl	8010ffa <memset>
  if(huart->Instance==UART4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4aa1      	ldr	r2, [pc, #644]	@ (80041d4 <HAL_UART_MspInit+0x2b0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	f040 8096 	bne.w	8004082 <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f64:	4618      	mov	r0, r3
 8003f66:	f003 ffdb 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f70:	f7ff fd6e 	bl	8003a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f74:	4b98      	ldr	r3, [pc, #608]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	4a97      	ldr	r2, [pc, #604]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f80:	4b95      	ldr	r3, [pc, #596]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b92      	ldr	r3, [pc, #584]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	4a91      	ldr	r2, [pc, #580]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f98:	4b8f      	ldr	r3, [pc, #572]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	4a8b      	ldr	r2, [pc, #556]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb0:	4b89      	ldr	r3, [pc, #548]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003fde:	4619      	mov	r1, r3
 8003fe0:	487e      	ldr	r0, [pc, #504]	@ (80041dc <HAL_UART_MspInit+0x2b8>)
 8003fe2:	f001 fcdd 	bl	80059a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004000:	2308      	movs	r3, #8
 8004002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004006:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800400a:	4619      	mov	r1, r3
 800400c:	4874      	ldr	r0, [pc, #464]	@ (80041e0 <HAL_UART_MspInit+0x2bc>)
 800400e:	f001 fcc7 	bl	80059a0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004012:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004014:	4a74      	ldr	r2, [pc, #464]	@ (80041e8 <HAL_UART_MspInit+0x2c4>)
 8004016:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004018:	4b72      	ldr	r3, [pc, #456]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 800401a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800401e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004020:	4b70      	ldr	r3, [pc, #448]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004026:	4b6f      	ldr	r3, [pc, #444]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800402c:	4b6d      	ldr	r3, [pc, #436]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 800402e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004032:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004034:	4b6b      	ldr	r3, [pc, #428]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004036:	2200      	movs	r2, #0
 8004038:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800403a:	4b6a      	ldr	r3, [pc, #424]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8004040:	4b68      	ldr	r3, [pc, #416]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004046:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004048:	4b66      	ldr	r3, [pc, #408]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 800404a:	2200      	movs	r2, #0
 800404c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800404e:	4b65      	ldr	r3, [pc, #404]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004050:	2200      	movs	r2, #0
 8004052:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004054:	4863      	ldr	r0, [pc, #396]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004056:	f001 f88d 	bl	8005174 <HAL_DMA_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8004060:	f7ff fcf6 	bl	8003a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a5f      	ldr	r2, [pc, #380]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 8004068:	675a      	str	r2, [r3, #116]	@ 0x74
 800406a:	4a5e      	ldr	r2, [pc, #376]	@ (80041e4 <HAL_UART_MspInit+0x2c0>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	2034      	movs	r0, #52	@ 0x34
 8004076:	f000 ffce 	bl	8005016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800407a:	2034      	movs	r0, #52	@ 0x34
 800407c:	f000 ffe7 	bl	800504e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004080:	e0a4      	b.n	80041cc <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a59      	ldr	r2, [pc, #356]	@ (80041ec <HAL_UART_MspInit+0x2c8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d15e      	bne.n	800414a <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800408c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004092:	2300      	movs	r3, #0
 8004094:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004096:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800409a:	4618      	mov	r0, r3
 800409c:	f003 ff40 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_UART_MspInit+0x186>
      Error_Handler();
 80040a6:	f7ff fcd3 	bl	8003a50 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80040aa:	4b4b      	ldr	r3, [pc, #300]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	4a4a      	ldr	r2, [pc, #296]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b6:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c2:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	4a44      	ldr	r2, [pc, #272]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ce:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040da:	4b3f      	ldr	r3, [pc, #252]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	4a3e      	ldr	r2, [pc, #248]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040e0:	f043 0308 	orr.w	r3, r3, #8
 80040e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e6:	4b3c      	ldr	r3, [pc, #240]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80040f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004106:	2303      	movs	r3, #3
 8004108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800410c:	2308      	movs	r3, #8
 800410e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004112:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004116:	4619      	mov	r1, r3
 8004118:	4831      	ldr	r0, [pc, #196]	@ (80041e0 <HAL_UART_MspInit+0x2bc>)
 800411a:	f001 fc41 	bl	80059a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800411e:	2304      	movs	r3, #4
 8004120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004130:	2303      	movs	r3, #3
 8004132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004136:	2308      	movs	r3, #8
 8004138:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800413c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004140:	4619      	mov	r1, r3
 8004142:	482b      	ldr	r0, [pc, #172]	@ (80041f0 <HAL_UART_MspInit+0x2cc>)
 8004144:	f001 fc2c 	bl	80059a0 <HAL_GPIO_Init>
}
 8004148:	e040      	b.n	80041cc <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a29      	ldr	r2, [pc, #164]	@ (80041f4 <HAL_UART_MspInit+0x2d0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d13b      	bne.n	80041cc <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004154:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800415a:	2300      	movs	r3, #0
 800415c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800415e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004162:	4618      	mov	r0, r3
 8004164:	f003 fedc 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800416e:	f7ff fc6f 	bl	8003a50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004172:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	4a18      	ldr	r2, [pc, #96]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	6453      	str	r3, [r2, #68]	@ 0x44
 800417e:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6313      	str	r3, [r2, #48]	@ 0x30
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_UART_MspInit+0x2b4>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041a2:	23c0      	movs	r3, #192	@ 0xc0
 80041a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80041ba:	2308      	movs	r3, #8
 80041bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80041c4:	4619      	mov	r1, r3
 80041c6:	4806      	ldr	r0, [pc, #24]	@ (80041e0 <HAL_UART_MspInit+0x2bc>)
 80041c8:	f001 fbea 	bl	80059a0 <HAL_GPIO_Init>
}
 80041cc:	bf00      	nop
 80041ce:	37c0      	adds	r7, #192	@ 0xc0
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40004c00 	.word	0x40004c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40020800 	.word	0x40020800
 80041e4:	200007e4 	.word	0x200007e4
 80041e8:	40026040 	.word	0x40026040
 80041ec:	40005000 	.word	0x40005000
 80041f0:	40020c00 	.word	0x40020c00
 80041f4:	40011400 	.word	0x40011400

080041f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <NMI_Handler+0x4>

08004200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <HardFault_Handler+0x4>

08004208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800420c:	bf00      	nop
 800420e:	e7fd      	b.n	800420c <MemManage_Handler+0x4>

08004210 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <BusFault_Handler+0x4>

08004218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <UsageFault_Handler+0x4>

08004220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424e:	f000 f98d 	bl	800456c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}

08004256 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 800425a:	2010      	movs	r0, #16
 800425c:	f001 fd70 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004268:	4802      	ldr	r0, [pc, #8]	@ (8004274 <DMA1_Stream2_IRQHandler+0x10>)
 800426a:	f001 f923 	bl	80054b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200007e4 	.word	0x200007e4

08004278 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800427c:	4802      	ldr	r0, [pc, #8]	@ (8004288 <SPI1_IRQHandler+0x10>)
 800427e:	f005 f897 	bl	80093b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000490 	.word	0x20000490

0800428c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004290:	4802      	ldr	r0, [pc, #8]	@ (800429c <UART4_IRQHandler+0x10>)
 8004292:	f006 fd89 	bl	800ada8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	2000064c 	.word	0x2000064c

080042a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80042a4:	4802      	ldr	r0, [pc, #8]	@ (80042b0 <DMA2_Stream0_IRQHandler+0x10>)
 80042a6:	f001 f905 	bl	80054b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200004f4 	.word	0x200004f4

080042b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80042b8:	4802      	ldr	r0, [pc, #8]	@ (80042c4 <DMA2_Stream3_IRQHandler+0x10>)
 80042ba:	f001 f8fb 	bl	80054b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000554 	.word	0x20000554

080042c8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042cc:	4802      	ldr	r0, [pc, #8]	@ (80042d8 <DMA2_Stream4_IRQHandler+0x10>)
 80042ce:	f001 f8f1 	bl	80054b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200003dc 	.word	0x200003dc

080042dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80042e0:	4802      	ldr	r0, [pc, #8]	@ (80042ec <OTG_FS_IRQHandler+0x10>)
 80042e2:	f001 ffb0 	bl	8006246 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20001ddc 	.word	0x20001ddc

080042f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return 1;
 80042f4:	2301      	movs	r3, #1
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_kill>:

int _kill(int pid, int sig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800430a:	f00c fed9 	bl	80110c0 <__errno>
 800430e:	4603      	mov	r3, r0
 8004310:	2216      	movs	r2, #22
 8004312:	601a      	str	r2, [r3, #0]
  return -1;
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_exit>:

void _exit (int status)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffe7 	bl	8004300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <_exit+0x12>

08004336 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e00a      	b.n	800435e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004348:	f3af 8000 	nop.w
 800434c:	4601      	mov	r1, r0
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	60ba      	str	r2, [r7, #8]
 8004354:	b2ca      	uxtb	r2, r1
 8004356:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3301      	adds	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	dbf0      	blt.n	8004348 <_read+0x12>
  }

  return len;
 8004366:	687b      	ldr	r3, [r7, #4]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e009      	b.n	8004396 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	60ba      	str	r2, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3301      	adds	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	dbf1      	blt.n	8004382 <_write+0x12>
  }
  return len;
 800439e:	687b      	ldr	r3, [r7, #4]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_close>:

int _close(int file)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043d0:	605a      	str	r2, [r3, #4]
  return 0;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_isatty>:

int _isatty(int file)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043e8:	2301      	movs	r3, #1
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004418:	4a14      	ldr	r2, [pc, #80]	@ (800446c <_sbrk+0x5c>)
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <_sbrk+0x60>)
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <_sbrk+0x64>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <_sbrk+0x64>)
 800442e:	4a12      	ldr	r2, [pc, #72]	@ (8004478 <_sbrk+0x68>)
 8004430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <_sbrk+0x64>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004440:	f00c fe3e 	bl	80110c0 <__errno>
 8004444:	4603      	mov	r3, r0
 8004446:	220c      	movs	r2, #12
 8004448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e009      	b.n	8004464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004450:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <_sbrk+0x64>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004456:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	4a05      	ldr	r2, [pc, #20]	@ (8004474 <_sbrk+0x64>)
 8004460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004462:	68fb      	ldr	r3, [r7, #12]
 }
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20040000 	.word	0x20040000
 8004470:	00000400 	.word	0x00000400
 8004474:	200008f4 	.word	0x200008f4
 8004478:	20002408 	.word	0x20002408

0800447c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <SystemInit+0x20>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	4a05      	ldr	r2, [pc, #20]	@ (800449c <SystemInit+0x20>)
 8004488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800448c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80044a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80044a4:	f7ff ffea 	bl	800447c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044a8:	480c      	ldr	r0, [pc, #48]	@ (80044dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044aa:	490d      	ldr	r1, [pc, #52]	@ (80044e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044ac:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b0:	e002      	b.n	80044b8 <LoopCopyDataInit>

080044b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b6:	3304      	adds	r3, #4

080044b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044bc:	d3f9      	bcc.n	80044b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044be:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044c0:	4c0a      	ldr	r4, [pc, #40]	@ (80044ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c4:	e001      	b.n	80044ca <LoopFillZerobss>

080044c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c8:	3204      	adds	r2, #4

080044ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044cc:	d3fb      	bcc.n	80044c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ce:	f00c fdfd 	bl	80110cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044d2:	f7fe fda1 	bl	8003018 <main>
  bx  lr    
 80044d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044d8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80044e4:	08014a50 	.word	0x08014a50
  ldr r2, =_sbss
 80044e8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80044ec:	20002408 	.word	0x20002408

080044f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f0:	e7fe      	b.n	80044f0 <ADC_IRQHandler>

080044f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f6:	2003      	movs	r0, #3
 80044f8:	f000 fd82 	bl	8005000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044fc:	200f      	movs	r0, #15
 80044fe:	f000 f805 	bl	800450c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004502:	f7ff fabf 	bl	8003a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_InitTick+0x54>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <HAL_InitTick+0x58>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	4619      	mov	r1, r3
 800451e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004522:	fbb3 f3f1 	udiv	r3, r3, r1
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fd9d 	bl	800506a <HAL_SYSTICK_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e00e      	b.n	8004558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d80a      	bhi.n	8004556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004540:	2200      	movs	r2, #0
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	f000 fd65 	bl	8005016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800454c:	4a06      	ldr	r2, [pc, #24]	@ (8004568 <HAL_InitTick+0x5c>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000000 	.word	0x20000000
 8004564:	20000008 	.word	0x20000008
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_IncTick+0x20>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_IncTick+0x24>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4413      	add	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_IncTick+0x24>)
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000008 	.word	0x20000008
 8004590:	200008f8 	.word	0x200008f8

08004594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return uwTick;
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_GetTick+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	200008f8 	.word	0x200008f8

080045ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b4:	f7ff ffee 	bl	8004594 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d005      	beq.n	80045d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <HAL_Delay+0x44>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045d2:	bf00      	nop
 80045d4:	f7ff ffde 	bl	8004594 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d8f7      	bhi.n	80045d4 <HAL_Delay+0x28>
  {
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000008 	.word	0x20000008

080045f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e031      	b.n	800466e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fa5a 	bl	8003acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_ADC_Init+0x84>)
 8004638:	4013      	ands	r3, r2
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa90 	bl	8004b68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	@ 0x40
 800465e:	e001      	b.n	8004664 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	ffffeefd 	.word	0xffffeefd

0800467c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_ADC_Start_DMA+0x22>
 800469a:	2302      	movs	r3, #2
 800469c:	e0d6      	b.n	800484c <HAL_ADC_Start_DMA+0x1d0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d018      	beq.n	80046e6 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80046c4:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_ADC_Start_DMA+0x1d8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_ADC_Start_DMA+0x1dc>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9a      	lsrs	r2, r3, #18
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80046d8:	e002      	b.n	80046e0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	3b01      	subs	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f9      	bne.n	80046da <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 809e 	bne.w	8004832 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046fa:	4b58      	ldr	r3, [pc, #352]	@ (800485c <HAL_ADC_Start_DMA+0x1e0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004718:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800471c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004730:	d106      	bne.n	8004740 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	f023 0206 	bic.w	r2, r3, #6
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
 800473e:	e002      	b.n	8004746 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	4a43      	ldr	r2, [pc, #268]	@ (8004860 <HAL_ADC_Start_DMA+0x1e4>)
 8004754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	4a42      	ldr	r2, [pc, #264]	@ (8004864 <HAL_ADC_Start_DMA+0x1e8>)
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	4a41      	ldr	r2, [pc, #260]	@ (8004868 <HAL_ADC_Start_DMA+0x1ec>)
 8004764:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800476e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800477e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	334c      	adds	r3, #76	@ 0x4c
 800479a:	4619      	mov	r1, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f000 fd96 	bl	80052d0 <HAL_DMA_Start_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80047a8:	4b30      	ldr	r3, [pc, #192]	@ (800486c <HAL_ADC_Start_DMA+0x1f0>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d143      	bne.n	800484a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047d0:	609a      	str	r2, [r3, #8]
 80047d2:	e03a      	b.n	800484a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a25      	ldr	r2, [pc, #148]	@ (8004870 <HAL_ADC_Start_DMA+0x1f4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10e      	bne.n	80047fc <HAL_ADC_Start_DMA+0x180>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_ADC_Start_DMA+0x1f0>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d120      	bne.n	800484a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <HAL_ADC_Start_DMA+0x1f8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d11b      	bne.n	800484a <HAL_ADC_Start_DMA+0x1ce>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d114      	bne.n	800484a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	e00b      	b.n	800484a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f043 0210 	orr.w	r2, r3, #16
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000000 	.word	0x20000000
 8004858:	431bde83 	.word	0x431bde83
 800485c:	fffff8fe 	.word	0xfffff8fe
 8004860:	08004d5d 	.word	0x08004d5d
 8004864:	08004e17 	.word	0x08004e17
 8004868:	08004e33 	.word	0x08004e33
 800486c:	40012300 	.word	0x40012300
 8004870:	40012000 	.word	0x40012000
 8004874:	40012200 	.word	0x40012200

08004878 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e13a      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x292>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d93a      	bls.n	8004956 <HAL_ADC_ConfigChannel+0xa2>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048e8:	d035      	beq.n	8004956 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68d9      	ldr	r1, [r3, #12]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	3b1e      	subs	r3, #30
 8004900:	2207      	movs	r2, #7
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	400a      	ands	r2, r1
 800490e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a8f      	ldr	r2, [pc, #572]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10a      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68d9      	ldr	r1, [r3, #12]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	061a      	lsls	r2, r3, #24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800492e:	e039      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68d9      	ldr	r1, [r3, #12]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	4618      	mov	r0, r3
 8004942:	4603      	mov	r3, r0
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4403      	add	r3, r0
 8004948:	3b1e      	subs	r3, #30
 800494a:	409a      	lsls	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004954:	e026      	b.n	80049a4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6919      	ldr	r1, [r3, #16]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2207      	movs	r2, #7
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43da      	mvns	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	400a      	ands	r2, r1
 800497c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6919      	ldr	r1, [r3, #16]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	4618      	mov	r0, r3
 8004990:	4603      	mov	r3, r0
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4403      	add	r3, r0
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	409a      	lsls	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d824      	bhi.n	80049f6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	3b05      	subs	r3, #5
 80049be:	221f      	movs	r2, #31
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43da      	mvns	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	400a      	ands	r2, r1
 80049cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	3b05      	subs	r3, #5
 80049e8:	fa00 f203 	lsl.w	r2, r0, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f4:	e04c      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d824      	bhi.n	8004a48 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3b23      	subs	r3, #35	@ 0x23
 8004a10:	221f      	movs	r2, #31
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	3b23      	subs	r3, #35	@ 0x23
 8004a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a46:	e023      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	3b41      	subs	r3, #65	@ 0x41
 8004a5a:	221f      	movs	r2, #31
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43da      	mvns	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	400a      	ands	r2, r1
 8004a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	3b41      	subs	r3, #65	@ 0x41
 8004a84:	fa00 f203 	lsl.w	r2, r0, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10a      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x1fc>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa2:	d105      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004aaa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004aae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a28      	ldr	r2, [pc, #160]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10f      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x226>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b12      	cmp	r3, #18
 8004ac0:	d10b      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004ac2:	4b26      	ldr	r3, [pc, #152]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a25      	ldr	r2, [pc, #148]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004acc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ace:	4b23      	ldr	r3, [pc, #140]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ad8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d12b      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x288>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <HAL_ADC_ConfigChannel+0x242>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b11      	cmp	r3, #17
 8004af4:	d122      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004af6:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004afc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004b00:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004b02:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8004b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d111      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <HAL_ADC_ConfigChannel+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a11      	ldr	r2, [pc, #68]	@ (8004b64 <HAL_ADC_ConfigChannel+0x2b0>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0c9a      	lsrs	r2, r3, #18
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b2e:	e002      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f9      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	10000012 	.word	0x10000012
 8004b58:	40012000 	.word	0x40012000
 8004b5c:	40012300 	.word	0x40012300
 8004b60:	20000000 	.word	0x20000000
 8004b64:	431bde83 	.word	0x431bde83

08004b68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b70:	4b78      	ldr	r3, [pc, #480]	@ (8004d54 <ADC_Init+0x1ec>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a77      	ldr	r2, [pc, #476]	@ (8004d54 <ADC_Init+0x1ec>)
 8004b76:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004b7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004b7c:	4b75      	ldr	r3, [pc, #468]	@ (8004d54 <ADC_Init+0x1ec>)
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4973      	ldr	r1, [pc, #460]	@ (8004d54 <ADC_Init+0x1ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	021a      	lsls	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6899      	ldr	r1, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	4a58      	ldr	r2, [pc, #352]	@ (8004d58 <ADC_Init+0x1f0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6899      	ldr	r1, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e00f      	b.n	8004c62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0202 	bic.w	r2, r2, #2
 8004c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	005a      	lsls	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004cae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	035a      	lsls	r2, r3, #13
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e007      	b.n	8004cd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	051a      	lsls	r2, r3, #20
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d1a:	025a      	lsls	r2, r3, #9
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	029a      	lsls	r2, r3, #10
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40012300 	.word	0x40012300
 8004d58:	0f000001 	.word	0x0f000001

08004d5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d13c      	bne.n	8004df0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d12b      	bne.n	8004de8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d127      	bne.n	8004de8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d119      	bne.n	8004de8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0220 	bic.w	r2, r2, #32
 8004dc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff fd45 	bl	8004878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dee:	e00e      	b.n	8004e0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fd4f 	bl	80048a0 <HAL_ADC_ErrorCallback>
}
 8004e02:	e004      	b.n	8004e0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fd31 	bl	800488c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	f043 0204 	orr.w	r2, r3, #4
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff fd24 	bl	80048a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8e:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	60d3      	str	r3, [r2, #12]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00
 8004ea4:	05fa0000 	.word	0x05fa0000

08004ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eac:	4b04      	ldr	r3, [pc, #16]	@ (8004ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	0a1b      	lsrs	r3, r3, #8
 8004eb2:	f003 0307 	and.w	r3, r3, #7
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	db0b      	blt.n	8004eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f003 021f 	and.w	r2, r3, #31
 8004edc:	4907      	ldr	r1, [pc, #28]	@ (8004efc <__NVIC_EnableIRQ+0x38>)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	e000e100 	.word	0xe000e100

08004f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db0a      	blt.n	8004f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	490c      	ldr	r1, [pc, #48]	@ (8004f4c <__NVIC_SetPriority+0x4c>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	440b      	add	r3, r1
 8004f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f28:	e00a      	b.n	8004f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4908      	ldr	r1, [pc, #32]	@ (8004f50 <__NVIC_SetPriority+0x50>)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	3b04      	subs	r3, #4
 8004f38:	0112      	lsls	r2, r2, #4
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	761a      	strb	r2, [r3, #24]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e100 	.word	0xe000e100
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f1c3 0307 	rsb	r3, r3, #7
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	bf28      	it	cs
 8004f72:	2304      	movcs	r3, #4
 8004f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d902      	bls.n	8004f84 <NVIC_EncodePriority+0x30>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3b03      	subs	r3, #3
 8004f82:	e000      	b.n	8004f86 <NVIC_EncodePriority+0x32>
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	401a      	ands	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43d9      	mvns	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fac:	4313      	orrs	r3, r2
         );
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3724      	adds	r7, #36	@ 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fcc:	d301      	bcc.n	8004fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e00f      	b.n	8004ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <SysTick_Config+0x40>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fda:	210f      	movs	r1, #15
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	f7ff ff8e 	bl	8004f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <SysTick_Config+0x40>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fea:	4b04      	ldr	r3, [pc, #16]	@ (8004ffc <SysTick_Config+0x40>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	e000e010 	.word	0xe000e010

08005000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff29 	bl	8004e60 <__NVIC_SetPriorityGrouping>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005028:	f7ff ff3e 	bl	8004ea8 <__NVIC_GetPriorityGrouping>
 800502c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff ff8e 	bl	8004f54 <NVIC_EncodePriority>
 8005038:	4602      	mov	r2, r0
 800503a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff5d 	bl	8004f00 <__NVIC_SetPriority>
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	4603      	mov	r3, r0
 8005056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff31 	bl	8004ec4 <__NVIC_EnableIRQ>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ffa2 	bl	8004fbc <SysTick_Config>
 8005078:	4603      	mov	r3, r0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005088:	f3bf 8f5f 	dmb	sy
}
 800508c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_MPU_Disable+0x28>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	4a06      	ldr	r2, [pc, #24]	@ (80050ac <HAL_MPU_Disable+0x28>)
 8005094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005098:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800509a:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_MPU_Disable+0x2c>)
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000ed00 	.word	0xe000ed00
 80050b0:	e000ed90 	.word	0xe000ed90

080050b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80050bc:	4a0b      	ldr	r2, [pc, #44]	@ (80050ec <HAL_MPU_Enable+0x38>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_MPU_Enable+0x3c>)
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	4a09      	ldr	r2, [pc, #36]	@ (80050f0 <HAL_MPU_Enable+0x3c>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80050d2:	f3bf 8f4f 	dsb	sy
}
 80050d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050d8:	f3bf 8f6f 	isb	sy
}
 80050dc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000ed90 	.word	0xe000ed90
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	785a      	ldrb	r2, [r3, #1]
 8005100:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_MPU_ConfigRegion+0x7c>)
 8005102:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005104:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <HAL_MPU_ConfigRegion+0x7c>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <HAL_MPU_ConfigRegion+0x7c>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005110:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_MPU_ConfigRegion+0x7c>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7b1b      	ldrb	r3, [r3, #12]
 800511c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7adb      	ldrb	r3, [r3, #11]
 8005122:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7a9b      	ldrb	r3, [r3, #10]
 800512a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800512c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7b5b      	ldrb	r3, [r3, #13]
 8005132:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005134:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7b9b      	ldrb	r3, [r3, #14]
 800513a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800513c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7bdb      	ldrb	r3, [r3, #15]
 8005142:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7a5b      	ldrb	r3, [r3, #9]
 800514a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800514c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7a1b      	ldrb	r3, [r3, #8]
 8005152:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005154:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800515c:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800515e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005160:	6113      	str	r3, [r2, #16]
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000ed90 	.word	0xe000ed90

08005174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005180:	f7ff fa08 	bl	8004594 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e099      	b.n	80052c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b0:	e00f      	b.n	80051d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051b2:	f7ff f9ef 	bl	8004594 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b05      	cmp	r3, #5
 80051be:	d908      	bls.n	80051d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2203      	movs	r2, #3
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e078      	b.n	80052c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e8      	bne.n	80051b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4b38      	ldr	r3, [pc, #224]	@ (80052cc <HAL_DMA_Init+0x158>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0307 	bic.w	r3, r3, #7
 8005252:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2b04      	cmp	r3, #4
 8005264:	d117      	bne.n	8005296 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb15 	bl	80058a8 <DMA_CheckFifoParam>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2240      	movs	r2, #64	@ 0x40
 8005288:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005292:	2301      	movs	r3, #1
 8005294:	e016      	b.n	80052c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 facc 	bl	800583c <DMA_CalcBaseAndBitshift>
 80052a4:	4603      	mov	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ac:	223f      	movs	r2, #63	@ 0x3f
 80052ae:	409a      	lsls	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	e010803f 	.word	0xe010803f

080052d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Start_IT+0x26>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e048      	b.n	8005388 <HAL_DMA_Start_IT+0xb8>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d137      	bne.n	800537a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa5e 	bl	80057e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	223f      	movs	r2, #63	@ 0x3f
 800532a:	409a      	lsls	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0216 	orr.w	r2, r2, #22
 800533e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800534e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0208 	orr.w	r2, r2, #8
 8005366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e005      	b.n	8005386 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800539e:	f7ff f8f9 	bl	8004594 <HAL_GetTick>
 80053a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d008      	beq.n	80053c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2280      	movs	r2, #128	@ 0x80
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e052      	b.n	8005468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0216 	bic.w	r2, r2, #22
 80053d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <HAL_DMA_Abort+0x62>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0208 	bic.w	r2, r2, #8
 8005400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005412:	e013      	b.n	800543c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005414:	f7ff f8be 	bl	8004594 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b05      	cmp	r3, #5
 8005420:	d90c      	bls.n	800543c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2203      	movs	r2, #3
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e015      	b.n	8005468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e4      	bne.n	8005414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544e:	223f      	movs	r2, #63	@ 0x3f
 8005450:	409a      	lsls	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d004      	beq.n	800548e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2280      	movs	r2, #128	@ 0x80
 8005488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e00c      	b.n	80054a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2205      	movs	r2, #5
 8005492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80054c0:	4b8e      	ldr	r3, [pc, #568]	@ (80056fc <HAL_DMA_IRQHandler+0x248>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a8e      	ldr	r2, [pc, #568]	@ (8005700 <HAL_DMA_IRQHandler+0x24c>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	0a9b      	lsrs	r3, r3, #10
 80054cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054de:	2208      	movs	r2, #8
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01a      	beq.n	8005520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d013      	beq.n	8005520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550c:	2208      	movs	r2, #8
 800550e:	409a      	lsls	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005524:	2201      	movs	r2, #1
 8005526:	409a      	lsls	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d012      	beq.n	8005556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005542:	2201      	movs	r2, #1
 8005544:	409a      	lsls	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f043 0202 	orr.w	r2, r3, #2
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555a:	2204      	movs	r2, #4
 800555c:	409a      	lsls	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d012      	beq.n	800558c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005578:	2204      	movs	r2, #4
 800557a:	409a      	lsls	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005584:	f043 0204 	orr.w	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005590:	2210      	movs	r2, #16
 8005592:	409a      	lsls	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d043      	beq.n	8005624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03c      	beq.n	8005624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ae:	2210      	movs	r2, #16
 80055b0:	409a      	lsls	r2, r3
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d018      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d024      	beq.n	8005624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	e01f      	b.n	8005624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
 80055f4:	e016      	b.n	8005624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d107      	bne.n	8005614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0208 	bic.w	r2, r2, #8
 8005612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005628:	2220      	movs	r2, #32
 800562a:	409a      	lsls	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 808f 	beq.w	8005754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8087 	beq.w	8005754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564a:	2220      	movs	r2, #32
 800564c:	409a      	lsls	r2, r3
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b05      	cmp	r3, #5
 800565c:	d136      	bne.n	80056cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0216 	bic.w	r2, r2, #22
 800566c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800567c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <HAL_DMA_IRQHandler+0x1da>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0208 	bic.w	r2, r2, #8
 800569c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a2:	223f      	movs	r2, #63	@ 0x3f
 80056a4:	409a      	lsls	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d07e      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
        }
        return;
 80056ca:	e079      	b.n	80057c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d031      	beq.n	8005754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
 80056f8:	e02c      	b.n	8005754 <HAL_DMA_IRQHandler+0x2a0>
 80056fa:	bf00      	nop
 80056fc:	20000000 	.word	0x20000000
 8005700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d023      	beq.n	8005754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
 8005714:	e01e      	b.n	8005754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10f      	bne.n	8005744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0210 	bic.w	r2, r2, #16
 8005732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005758:	2b00      	cmp	r3, #0
 800575a:	d032      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d022      	beq.n	80057ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2205      	movs	r2, #5
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3301      	adds	r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	429a      	cmp	r2, r3
 800578a:	d307      	bcc.n	800579c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f2      	bne.n	8005780 <HAL_DMA_IRQHandler+0x2cc>
 800579a:	e000      	b.n	800579e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800579c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	e000      	b.n	80057c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057c0:	bf00      	nop
    }
  }
}
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d108      	bne.n	8005820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800581e:	e007      	b.n	8005830 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	3b10      	subs	r3, #16
 800584c:	4a13      	ldr	r2, [pc, #76]	@ (800589c <DMA_CalcBaseAndBitshift+0x60>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005856:	4a12      	ldr	r2, [pc, #72]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x64>)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d908      	bls.n	800587c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005872:	4013      	ands	r3, r2
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	659a      	str	r2, [r3, #88]	@ 0x58
 800587a:	e006      	b.n	800588a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	aaaaaaab 	.word	0xaaaaaaab
 80058a0:	080142a4 	.word	0x080142a4
 80058a4:	fffffc00 	.word	0xfffffc00

080058a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11f      	bne.n	8005902 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d856      	bhi.n	8005976 <DMA_CheckFifoParam+0xce>
 80058c8:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <DMA_CheckFifoParam+0x28>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	080058e1 	.word	0x080058e1
 80058d4:	080058f3 	.word	0x080058f3
 80058d8:	080058e1 	.word	0x080058e1
 80058dc:	08005977 	.word	0x08005977
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d046      	beq.n	800597a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f0:	e043      	b.n	800597a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058fa:	d140      	bne.n	800597e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005900:	e03d      	b.n	800597e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590a:	d121      	bne.n	8005950 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d837      	bhi.n	8005982 <DMA_CheckFifoParam+0xda>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <DMA_CheckFifoParam+0x70>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	0800592f 	.word	0x0800592f
 8005920:	08005929 	.word	0x08005929
 8005924:	08005941 	.word	0x08005941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	e030      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d025      	beq.n	8005986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593e:	e022      	b.n	8005986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005948:	d11f      	bne.n	800598a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800594e:	e01c      	b.n	800598a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d903      	bls.n	800595e <DMA_CheckFifoParam+0xb6>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d003      	beq.n	8005964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800595c:	e018      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
      break;
 8005962:	e015      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
      break;
 8005974:	e00b      	b.n	800598e <DMA_CheckFifoParam+0xe6>
      break;
 8005976:	bf00      	nop
 8005978:	e00a      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e008      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;
 800597e:	bf00      	nop
 8005980:	e006      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
 8005984:	e004      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;   
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <DMA_CheckFifoParam+0xe8>
      break;
 800598e:	bf00      	nop
    }
  } 
  
  return status; 
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b089      	sub	sp, #36	@ 0x24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e169      	b.n	8005c94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059c0:	2201      	movs	r2, #1
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4013      	ands	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	429a      	cmp	r2, r3
 80059da:	f040 8158 	bne.w	8005c8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d005      	beq.n	80059f6 <HAL_GPIO_Init+0x56>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d130      	bne.n	8005a58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 0201 	and.w	r2, r3, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0303 	and.w	r3, r3, #3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d017      	beq.n	8005a94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	2203      	movs	r2, #3
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d123      	bne.n	8005ae8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	08da      	lsrs	r2, r3, #3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3208      	adds	r2, #8
 8005aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	220f      	movs	r2, #15
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	08da      	lsrs	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3208      	adds	r2, #8
 8005ae2:	69b9      	ldr	r1, [r7, #24]
 8005ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	2203      	movs	r2, #3
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 0203 	and.w	r2, r3, #3
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80b2 	beq.w	8005c8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b2a:	4b60      	ldr	r3, [pc, #384]	@ (8005cac <HAL_GPIO_Init+0x30c>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cac <HAL_GPIO_Init+0x30c>)
 8005b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b36:	4b5d      	ldr	r3, [pc, #372]	@ (8005cac <HAL_GPIO_Init+0x30c>)
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b42:	4a5b      	ldr	r2, [pc, #364]	@ (8005cb0 <HAL_GPIO_Init+0x310>)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	3302      	adds	r3, #2
 8005b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	220f      	movs	r2, #15
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_GPIO_Init+0x314>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02b      	beq.n	8005bc6 <HAL_GPIO_Init+0x226>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a51      	ldr	r2, [pc, #324]	@ (8005cb8 <HAL_GPIO_Init+0x318>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d025      	beq.n	8005bc2 <HAL_GPIO_Init+0x222>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a50      	ldr	r2, [pc, #320]	@ (8005cbc <HAL_GPIO_Init+0x31c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01f      	beq.n	8005bbe <HAL_GPIO_Init+0x21e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc0 <HAL_GPIO_Init+0x320>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d019      	beq.n	8005bba <HAL_GPIO_Init+0x21a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4e      	ldr	r2, [pc, #312]	@ (8005cc4 <HAL_GPIO_Init+0x324>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_GPIO_Init+0x216>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4d      	ldr	r2, [pc, #308]	@ (8005cc8 <HAL_GPIO_Init+0x328>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00d      	beq.n	8005bb2 <HAL_GPIO_Init+0x212>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a4c      	ldr	r2, [pc, #304]	@ (8005ccc <HAL_GPIO_Init+0x32c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <HAL_GPIO_Init+0x20e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd0 <HAL_GPIO_Init+0x330>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_GPIO_Init+0x20a>
 8005ba6:	2307      	movs	r3, #7
 8005ba8:	e00e      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005baa:	2308      	movs	r3, #8
 8005bac:	e00c      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bae:	2306      	movs	r3, #6
 8005bb0:	e00a      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	e008      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e006      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e004      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e002      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_GPIO_Init+0x228>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	f002 0203 	and.w	r2, r2, #3
 8005bce:	0092      	lsls	r2, r2, #2
 8005bd0:	4093      	lsls	r3, r2
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bd8:	4935      	ldr	r1, [pc, #212]	@ (8005cb0 <HAL_GPIO_Init+0x310>)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	3302      	adds	r3, #2
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005be6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c0a:	4a32      	ldr	r2, [pc, #200]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c10:	4b30      	ldr	r3, [pc, #192]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c34:	4a27      	ldr	r2, [pc, #156]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c3a:	4b26      	ldr	r3, [pc, #152]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c88:	4a12      	ldr	r2, [pc, #72]	@ (8005cd4 <HAL_GPIO_Init+0x334>)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3301      	adds	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	f67f ae92 	bls.w	80059c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	3724      	adds	r7, #36	@ 0x24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40013800 	.word	0x40013800
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40020400 	.word	0x40020400
 8005cbc:	40020800 	.word	0x40020800
 8005cc0:	40020c00 	.word	0x40020c00
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40021400 	.word	0x40021400
 8005ccc:	40021800 	.word	0x40021800
 8005cd0:	40021c00 	.word	0x40021c00
 8005cd4:	40013c00 	.word	0x40013c00

08005cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ce8:	787b      	ldrb	r3, [r7, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cf4:	e003      	b.n	8005cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cf6:	887b      	ldrh	r3, [r7, #2]
 8005cf8:	041a      	lsls	r2, r3, #16
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	619a      	str	r2, [r3, #24]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d1c:	887a      	ldrh	r2, [r7, #2]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	041a      	lsls	r2, r3, #16
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	43d9      	mvns	r1, r3
 8005d28:	887b      	ldrh	r3, [r7, #2]
 8005d2a:	400b      	ands	r3, r1
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d4a:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d56:	4a05      	ldr	r2, [pc, #20]	@ (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fd f924 	bl	8002fac <HAL_GPIO_EXTI_Callback>
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40013c00 	.word	0x40013c00

08005d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e08b      	b.n	8005e9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fd ff0c 	bl	8003bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	@ 0x24
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	e006      	b.n	8005df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d108      	bne.n	8005e12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	e007      	b.n	8005e22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <HAL_I2C_Init+0x134>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	02008000 	.word	0x02008000

08005ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d138      	bne.n	8005f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e032      	b.n	8005f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	@ 0x24
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6819      	ldr	r1, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d139      	bne.n	8005fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e033      	b.n	8005fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2224      	movs	r2, #36	@ 0x24
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e108      	b.n	80061fa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f009 fe4c 	bl	800fca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2203      	movs	r2, #3
 800600c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006016:	d102      	bne.n	800601e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f006 f9bf 	bl	800c3a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	7c1a      	ldrb	r2, [r3, #16]
 8006030:	f88d 2000 	strb.w	r2, [sp]
 8006034:	3304      	adds	r3, #4
 8006036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006038:	f006 f876 	bl	800c128 <USB_CoreInit>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0d5      	b.n	80061fa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f006 f9b7 	bl	800c3c8 <USB_SetCurrentMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0c6      	b.n	80061fa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e04a      	b.n	8006108 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3315      	adds	r3, #21
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	3314      	adds	r3, #20
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	b298      	uxth	r0, r3
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	332e      	adds	r3, #46	@ 0x2e
 80060ae:	4602      	mov	r2, r0
 80060b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060b2:	7bfa      	ldrb	r2, [r7, #15]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	3318      	adds	r3, #24
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	331c      	adds	r3, #28
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060da:	7bfa      	ldrb	r2, [r7, #15]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3320      	adds	r3, #32
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	3301      	adds	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	791b      	ldrb	r3, [r3, #4]
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3af      	bcc.n	8006072 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e044      	b.n	80061a2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006170:	7bfa      	ldrb	r2, [r7, #15]
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	3301      	adds	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d3b5      	bcc.n	8006118 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7c1a      	ldrb	r2, [r3, #16]
 80061b4:	f88d 2000 	strb.w	r2, [sp]
 80061b8:	3304      	adds	r3, #4
 80061ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061bc:	f006 f950 	bl	800c460 <USB_DevInit>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e013      	b.n	80061fa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7b1b      	ldrb	r3, [r3, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f95b 	bl	80074a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f007 f9a5 	bl	800d542 <USB_DevDisconnect>

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_PCD_Start+0x16>
 8006214:	2302      	movs	r3, #2
 8006216:	e012      	b.n	800623e <HAL_PCD_Start+0x3c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f006 f8ad 	bl	800c384 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f007 f966 	bl	800d500 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006246:	b590      	push	{r4, r7, lr}
 8006248:	b08d      	sub	sp, #52	@ 0x34
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f007 fa24 	bl	800d6aa <USB_GetMode>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 84b9 	bne.w	8006bdc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f007 f988 	bl	800d584 <USB_ReadInterrupts>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 84af 	beq.w	8006bda <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f007 f975 	bl	800d584 <USB_ReadInterrupts>
 800629a:	4603      	mov	r3, r0
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d107      	bne.n	80062b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f002 0202 	and.w	r2, r2, #2
 80062b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f007 f963 	bl	800d584 <USB_ReadInterrupts>
 80062be:	4603      	mov	r3, r0
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d161      	bne.n	800638c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0210 	bic.w	r2, r2, #16
 80062d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	3304      	adds	r3, #4
 80062f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006302:	d124      	bne.n	800634e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d035      	beq.n	800637c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800631a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	6a38      	ldr	r0, [r7, #32]
 8006324:	f006 ff9a 	bl	800d25c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006334:	441a      	add	r2, r3
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006346:	441a      	add	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	615a      	str	r2, [r3, #20]
 800634c:	e016      	b.n	800637c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006354:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006358:	d110      	bne.n	800637c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006360:	2208      	movs	r2, #8
 8006362:	4619      	mov	r1, r3
 8006364:	6a38      	ldr	r0, [r7, #32]
 8006366:	f006 ff79 	bl	800d25c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006376:	441a      	add	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0210 	orr.w	r2, r2, #16
 800638a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f007 f8f7 	bl	800d584 <USB_ReadInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800639c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063a0:	f040 80a7 	bne.w	80064f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f007 f8fc 	bl	800d5aa <USB_ReadDevAllOutEpInterrupt>
 80063b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80063b4:	e099      	b.n	80064ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 808e 	beq.w	80064de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f007 f920 	bl	800d612 <USB_ReadDevOutEPInterrupt>
 80063d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ea:	461a      	mov	r2, r3
 80063ec:	2301      	movs	r3, #1
 80063ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fed0 	bl	8007198 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	2308      	movs	r3, #8
 8006412:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 ffa6 	bl	8007368 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006432:	461a      	mov	r2, r3
 8006434:	2310      	movs	r3, #16
 8006436:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d030      	beq.n	80064a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b80      	cmp	r3, #128	@ 0x80
 800644c:	d109      	bne.n	8006462 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800645c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006460:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006464:	4613      	mov	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	3304      	adds	r3, #4
 8006476:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d108      	bne.n	8006492 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2200      	movs	r2, #0
 8006484:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f009 fd2b 	bl	800fee8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649e:	461a      	mov	r2, r3
 80064a0:	2302      	movs	r3, #2
 80064a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ba:	461a      	mov	r2, r3
 80064bc:	2320      	movs	r3, #32
 80064be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d6:	461a      	mov	r2, r3
 80064d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	3301      	adds	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af62 	bne.w	80063b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f007 f844 	bl	800d584 <USB_ReadInterrupts>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006506:	f040 80db 	bne.w	80066c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f007 f865 	bl	800d5de <USB_ReadDevAllInEpInterrupt>
 8006514:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800651a:	e0cd      	b.n	80066b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80c2 	beq.w	80066ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f007 f88b 	bl	800d64e <USB_ReadDevInEPInterrupt>
 8006538:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d057      	beq.n	80065f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	2201      	movs	r2, #1
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	43db      	mvns	r3, r3
 800655e:	69f9      	ldr	r1, [r7, #28]
 8006560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006564:	4013      	ands	r3, r2
 8006566:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006574:	461a      	mov	r2, r3
 8006576:	2301      	movs	r3, #1
 8006578:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	799b      	ldrb	r3, [r3, #6]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d132      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006586:	4613      	mov	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3320      	adds	r3, #32
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4403      	add	r3, r0
 80065a2:	331c      	adds	r3, #28
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4419      	add	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4403      	add	r3, r0
 80065b6:	3320      	adds	r3, #32
 80065b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x3a2>
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c4:	4613      	mov	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	3324      	adds	r3, #36	@ 0x24
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065e0:	461a      	mov	r2, r3
 80065e2:	2101      	movs	r1, #1
 80065e4:	f007 f894 	bl	800d710 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f009 fbf5 	bl	800fdde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660a:	461a      	mov	r2, r3
 800660c:	2308      	movs	r3, #8
 800660e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	d008      	beq.n	800662c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006626:	461a      	mov	r2, r3
 8006628:	2310      	movs	r3, #16
 800662a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	2340      	movs	r3, #64	@ 0x40
 8006646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d023      	beq.n	800669a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006654:	6a38      	ldr	r0, [r7, #32]
 8006656:	f006 f873 	bl	800c740 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800665a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	3310      	adds	r3, #16
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	3304      	adds	r3, #4
 800666c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d108      	bne.n	8006688 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f009 fc42 	bl	800ff0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006694:	461a      	mov	r2, r3
 8006696:	2302      	movs	r3, #2
 8006698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80066a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fcea 	bl	8007080 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	3301      	adds	r3, #1
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f47f af2e 	bne.w	800651c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f006 ff5d 	bl	800d584 <USB_ReadInterrupts>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d4:	d122      	bne.n	800671c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d108      	bne.n	8006706 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066fc:	2100      	movs	r1, #0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f009 fdc0 	bl	8010284 <HAL_PCDEx_LPM_Callback>
 8006704:	e002      	b.n	800670c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f009 fbe0 	bl	800fecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800671a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f006 ff2f 	bl	800d584 <USB_ReadInterrupts>
 8006726:	4603      	mov	r3, r0
 8006728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006730:	d112      	bne.n	8006758 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f009 fb9c 	bl	800fe80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006756:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f006 ff11 	bl	800d584 <USB_ReadInterrupts>
 8006762:	4603      	mov	r3, r0
 8006764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800676c:	d121      	bne.n	80067b2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800677c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006784:	2b00      	cmp	r3, #0
 8006786:	d111      	bne.n	80067ac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	f003 020f 	and.w	r2, r3, #15
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80067a2:	2101      	movs	r1, #1
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f009 fd6d 	bl	8010284 <HAL_PCDEx_LPM_Callback>
 80067aa:	e002      	b.n	80067b2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f009 fb67 	bl	800fe80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f006 fee4 	bl	800d584 <USB_ReadInterrupts>
 80067bc:	4603      	mov	r3, r0
 80067be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c6:	f040 80b7 	bne.w	8006938 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2110      	movs	r1, #16
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 ffab 	bl	800c740 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ee:	e046      	b.n	800687e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fc:	461a      	mov	r2, r3
 80067fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006802:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800681e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006822:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006830:	461a      	mov	r2, r3
 8006832:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006836:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006852:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006856:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006872:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006876:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	3301      	adds	r3, #1
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	791b      	ldrb	r3, [r3, #4]
 8006882:	461a      	mov	r2, r3
 8006884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006886:	4293      	cmp	r3, r2
 8006888:	d3b2      	bcc.n	80067f0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006898:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800689c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7bdb      	ldrb	r3, [r3, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b6:	f043 030b 	orr.w	r3, r3, #11
 80068ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068cc:	f043 030b 	orr.w	r3, r3, #11
 80068d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80068d2:	e015      	b.n	8006900 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e2:	4619      	mov	r1, r3
 80068e4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80068e8:	4313      	orrs	r3, r2
 80068ea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068fa:	f043 030b 	orr.w	r3, r3, #11
 80068fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800690e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006922:	461a      	mov	r2, r3
 8006924:	f006 fef4 	bl	800d710 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f006 fe21 	bl	800d584 <USB_ReadInterrupts>
 8006942:	4603      	mov	r3, r0
 8006944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800694c:	d123      	bne.n	8006996 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f006 feb8 	bl	800d6c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f005 ff68 	bl	800c832 <USB_GetDevSpeed>
 8006962:	4603      	mov	r3, r0
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681c      	ldr	r4, [r3, #0]
 800696e:	f001 faa3 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 8006972:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006978:	461a      	mov	r2, r3
 800697a:	4620      	mov	r0, r4
 800697c:	f005 fc60 	bl	800c240 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f009 fa54 	bl	800fe2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f006 fdf2 	bl	800d584 <USB_ReadInterrupts>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d10a      	bne.n	80069c0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f009 fa31 	bl	800fe12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f002 0208 	and.w	r2, r2, #8
 80069be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f006 fddd 	bl	800d584 <USB_ReadInterrupts>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d0:	2b80      	cmp	r3, #128	@ 0x80
 80069d2:	d123      	bne.n	8006a1c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069e0:	2301      	movs	r3, #1
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e4:	e014      	b.n	8006a10 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ea:	4613      	mov	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d105      	bne.n	8006a0a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fb0a 	bl	800701e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d3e4      	bcc.n	80069e6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f006 fdaf 	bl	800d584 <USB_ReadInterrupts>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a30:	d13c      	bne.n	8006aac <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a32:	2301      	movs	r3, #1
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a36:	e02b      	b.n	8006a90 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	3318      	adds	r3, #24
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d115      	bne.n	8006a8a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006a5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da12      	bge.n	8006a8a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	3317      	adds	r3, #23
 8006a74:	2201      	movs	r2, #1
 8006a76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 faca 	bl	800701e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	791b      	ldrb	r3, [r3, #4]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d3cd      	bcc.n	8006a38 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f006 fd67 	bl	800d584 <USB_ReadInterrupts>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ac0:	d156      	bne.n	8006b70 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac6:	e045      	b.n	8006b54 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d12e      	bne.n	8006b4e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006af0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	da2b      	bge.n	8006b4e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	0c1a      	lsrs	r2, r3, #16
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006b00:	4053      	eors	r3, r2
 8006b02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d121      	bne.n	8006b4e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0e:	4613      	mov	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b4a:	6053      	str	r3, [r2, #4]
            break;
 8006b4c:	e008      	b.n	8006b60 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	3301      	adds	r3, #1
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	791b      	ldrb	r3, [r3, #4]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d3b3      	bcc.n	8006ac8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f006 fd05 	bl	800d584 <USB_ReadInterrupts>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b84:	d10a      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f009 f9d2 	bl	800ff30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f006 fcef 	bl	800d584 <USB_ReadInterrupts>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d115      	bne.n	8006bdc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f009 f9c2 	bl	800ff4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	e000      	b.n	8006bdc <HAL_PCD_IRQHandler+0x996>
      return;
 8006bda:	bf00      	nop
    }
  }
}
 8006bdc:	3734      	adds	r7, #52	@ 0x34
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd90      	pop	{r4, r7, pc}

08006be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_PCD_SetAddress+0x1a>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e012      	b.n	8006c22 <HAL_PCD_SetAddress+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f006 fc4e 	bl	800d4b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	461a      	mov	r2, r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	803b      	strh	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da0f      	bge.n	8006c70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	3310      	adds	r3, #16
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	705a      	strb	r2, [r3, #1]
 8006c6e:	e00f      	b.n	8006c90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	f003 020f 	and.w	r2, r3, #15
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	3304      	adds	r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006c9c:	883b      	ldrh	r3, [r7, #0]
 8006c9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	78ba      	ldrb	r2, [r7, #2]
 8006caa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006cbe:	78bb      	ldrb	r3, [r7, #2]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d102      	bne.n	8006cca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_PCD_EP_Open+0xae>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e00e      	b.n	8006cf6 <HAL_PCD_EP_Open+0xcc>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f005 fdc8 	bl	800c87c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da0f      	bge.n	8006d32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	4613      	mov	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	3310      	adds	r3, #16
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	705a      	strb	r2, [r3, #1]
 8006d30:	e00f      	b.n	8006d52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 020f 	and.w	r2, r3, #15
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	3304      	adds	r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_PCD_EP_Close+0x6e>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e00e      	b.n	8006d8a <HAL_PCD_EP_Close+0x8c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68f9      	ldr	r1, [r7, #12]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f005 fe06 	bl	800c98c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	3304      	adds	r3, #4
 8006dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	799b      	ldrb	r3, [r3, #6]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d102      	bne.n	8006dee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	799b      	ldrb	r3, [r3, #6]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	f005 fea3 	bl	800cb44 <USB_EPStartXfer>

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006e2a:	681b      	ldr	r3, [r3, #0]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	460b      	mov	r3, r1
 8006e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	3310      	adds	r3, #16
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2201      	movs	r2, #1
 8006e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	799b      	ldrb	r3, [r3, #6]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d102      	bne.n	8006e92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	799b      	ldrb	r3, [r3, #6]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	f005 fe51 	bl	800cb44 <USB_EPStartXfer>

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7912      	ldrb	r2, [r2, #4]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e04f      	b.n	8006f6a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	da0f      	bge.n	8006ef2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	705a      	strb	r2, [r3, #1]
 8006ef0:	e00d      	b.n	8006f0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_PCD_EP_SetStall+0x82>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e01d      	b.n	8006f6a <HAL_PCD_EP_SetStall+0xbe>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f006 f9e5 	bl	800d30c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d109      	bne.n	8006f60 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7999      	ldrb	r1, [r3, #6]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f006 fbd8 	bl	800d710 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	7912      	ldrb	r2, [r2, #4]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d901      	bls.n	8006f90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e042      	b.n	8007016 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da0f      	bge.n	8006fb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3304      	adds	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	705a      	strb	r2, [r3, #1]
 8006fb6:	e00f      	b.n	8006fd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	f003 020f 	and.w	r2, r3, #15
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	3304      	adds	r3, #4
 8006fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_PCD_EP_ClrStall+0x86>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e00e      	b.n	8007016 <HAL_PCD_EP_ClrStall+0xa4>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	4618      	mov	r0, r3
 8007008:	f006 f9ee 	bl	800d3e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800702a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800702e:	2b00      	cmp	r3, #0
 8007030:	da0c      	bge.n	800704c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	3310      	adds	r3, #16
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4413      	add	r3, r2
 8007046:	3304      	adds	r3, #4
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e00c      	b.n	8007066 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	3304      	adds	r3, #4
 8007064:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	4618      	mov	r0, r3
 800706e:	f006 f80d 	bl	800d08c <USB_EPStopXfer>
 8007072:	4603      	mov	r3, r0
 8007074:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007076:	7afb      	ldrb	r3, [r7, #11]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af02      	add	r7, sp, #8
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3310      	adds	r3, #16
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d901      	bls.n	80070b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e06b      	b.n	8007190 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d902      	bls.n	80070d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3303      	adds	r3, #3
 80070d8:	089b      	lsrs	r3, r3, #2
 80070da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070dc:	e02a      	b.n	8007134 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d902      	bls.n	80070fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	3303      	adds	r3, #3
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68d9      	ldr	r1, [r3, #12]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4603      	mov	r3, r0
 8007116:	6978      	ldr	r0, [r7, #20]
 8007118:	f006 f862 	bl	800d1e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	441a      	add	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	441a      	add	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	429a      	cmp	r2, r3
 8007148:	d809      	bhi.n	800715e <PCD_WriteEmptyTxFifo+0xde>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007152:	429a      	cmp	r2, r3
 8007154:	d203      	bcs.n	800715e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1bf      	bne.n	80070de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	429a      	cmp	r2, r3
 8007168:	d811      	bhi.n	800718e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	2201      	movs	r2, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800717e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	43db      	mvns	r3, r3
 8007184:	6939      	ldr	r1, [r7, #16]
 8007186:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800718a:	4013      	ands	r3, r2
 800718c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	333c      	adds	r3, #60	@ 0x3c
 80071b0:	3304      	adds	r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	799b      	ldrb	r3, [r3, #6]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d17b      	bne.n	80072c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d015      	beq.n	8007204 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4a61      	ldr	r2, [pc, #388]	@ (8007360 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	f240 80b9 	bls.w	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80b3 	beq.w	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fa:	461a      	mov	r2, r3
 80071fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007200:	6093      	str	r3, [r2, #8]
 8007202:	e0a7      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721a:	461a      	mov	r2, r3
 800721c:	2320      	movs	r3, #32
 800721e:	6093      	str	r3, [r2, #8]
 8007220:	e098      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 8093 	bne.w	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4a4b      	ldr	r2, [pc, #300]	@ (8007360 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d90f      	bls.n	8007256 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724c:	461a      	mov	r2, r3
 800724e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007252:	6093      	str	r3, [r2, #8]
 8007254:	e07e      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	3304      	adds	r3, #4
 800726a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	0159      	lsls	r1, r3, #5
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	440b      	add	r3, r1
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d114      	bne.n	80072b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072a0:	461a      	mov	r2, r3
 80072a2:	2101      	movs	r1, #1
 80072a4:	f006 fa34 	bl	800d710 <USB_EP0_OutStart>
 80072a8:	e006      	b.n	80072b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	441a      	add	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f008 fd72 	bl	800fda8 <HAL_PCD_DataOutStageCallback>
 80072c4:	e046      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4a26      	ldr	r2, [pc, #152]	@ (8007364 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d124      	bne.n	8007318 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e4:	461a      	mov	r2, r3
 80072e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ea:	6093      	str	r3, [r2, #8]
 80072ec:	e032      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007304:	461a      	mov	r2, r3
 8007306:	2320      	movs	r3, #32
 8007308:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f008 fd49 	bl	800fda8 <HAL_PCD_DataOutStageCallback>
 8007316:	e01d      	b.n	8007354 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d114      	bne.n	8007348 <PCD_EP_OutXfrComplete_int+0x1b0>
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007340:	461a      	mov	r2, r3
 8007342:	2100      	movs	r1, #0
 8007344:	f006 f9e4 	bl	800d710 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f008 fd2a 	bl	800fda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	4f54300a 	.word	0x4f54300a
 8007364:	4f54310a 	.word	0x4f54310a

08007368 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	333c      	adds	r3, #60	@ 0x3c
 8007380:	3304      	adds	r3, #4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a15      	ldr	r2, [pc, #84]	@ (80073f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d90e      	bls.n	80073bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f008 fce1 	bl	800fd84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a0a      	ldr	r2, [pc, #40]	@ (80073f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d90c      	bls.n	80073e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	799b      	ldrb	r3, [r3, #6]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d108      	bne.n	80073e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073dc:	461a      	mov	r2, r3
 80073de:	2101      	movs	r1, #1
 80073e0:	f006 f996 	bl	800d710 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	4f54300a 	.word	0x4f54300a

080073f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
 8007400:	4613      	mov	r3, r2
 8007402:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007412:	883b      	ldrh	r3, [r7, #0]
 8007414:	0419      	lsls	r1, r3, #16
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	430a      	orrs	r2, r1
 800741e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007420:	e028      	b.n	8007474 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	e00d      	b.n	8007452 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	3340      	adds	r3, #64	@ 0x40
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	4413      	add	r3, r2
 800744a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3301      	adds	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	7bfa      	ldrb	r2, [r7, #15]
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	3b01      	subs	r3, #1
 8007458:	429a      	cmp	r2, r3
 800745a:	d3ec      	bcc.n	8007436 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800745c:	883b      	ldrh	r3, [r7, #0]
 800745e:	0418      	lsls	r0, r3, #16
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	3b01      	subs	r3, #1
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	4302      	orrs	r2, r0
 800746c:	3340      	adds	r3, #64	@ 0x40
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	887a      	ldrh	r2, [r7, #2]
 8007494:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074d2:	4b05      	ldr	r3, [pc, #20]	@ (80074e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	10000003 	.word	0x10000003

080074ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80074f6:	4b23      	ldr	r3, [pc, #140]	@ (8007584 <HAL_PWREx_EnableOverDrive+0x98>)
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	4a22      	ldr	r2, [pc, #136]	@ (8007584 <HAL_PWREx_EnableOverDrive+0x98>)
 80074fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007500:	6413      	str	r3, [r2, #64]	@ 0x40
 8007502:	4b20      	ldr	r3, [pc, #128]	@ (8007584 <HAL_PWREx_EnableOverDrive+0x98>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800750e:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1d      	ldr	r2, [pc, #116]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007518:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800751a:	f7fd f83b 	bl	8004594 <HAL_GetTick>
 800751e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007520:	e009      	b.n	8007536 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007522:	f7fd f837 	bl	8004594 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007530:	d901      	bls.n	8007536 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e022      	b.n	800757c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007536:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007542:	d1ee      	bne.n	8007522 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007544:	4b10      	ldr	r3, [pc, #64]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a0f      	ldr	r2, [pc, #60]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800754a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800754e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007550:	f7fd f820 	bl	8004594 <HAL_GetTick>
 8007554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007556:	e009      	b.n	800756c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007558:	f7fd f81c 	bl	8004594 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007566:	d901      	bls.n	800756c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e007      	b.n	800757c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007578:	d1ee      	bne.n	8007558 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40023800 	.word	0x40023800
 8007588:	40007000 	.word	0x40007000

0800758c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007594:	2300      	movs	r3, #0
 8007596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e291      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8087 	beq.w	80076be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075b0:	4b96      	ldr	r3, [pc, #600]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 030c 	and.w	r3, r3, #12
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d00c      	beq.n	80075d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075bc:	4b93      	ldr	r3, [pc, #588]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 030c 	and.w	r3, r3, #12
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d112      	bne.n	80075ee <HAL_RCC_OscConfig+0x62>
 80075c8:	4b90      	ldr	r3, [pc, #576]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075d4:	d10b      	bne.n	80075ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d6:	4b8d      	ldr	r3, [pc, #564]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d06c      	beq.n	80076bc <HAL_RCC_OscConfig+0x130>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d168      	bne.n	80076bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e26b      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f6:	d106      	bne.n	8007606 <HAL_RCC_OscConfig+0x7a>
 80075f8:	4b84      	ldr	r3, [pc, #528]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a83      	ldr	r2, [pc, #524]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80075fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e02e      	b.n	8007664 <HAL_RCC_OscConfig+0xd8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10c      	bne.n	8007628 <HAL_RCC_OscConfig+0x9c>
 800760e:	4b7f      	ldr	r3, [pc, #508]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a7e      	ldr	r2, [pc, #504]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b7c      	ldr	r3, [pc, #496]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a7b      	ldr	r2, [pc, #492]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	e01d      	b.n	8007664 <HAL_RCC_OscConfig+0xd8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007630:	d10c      	bne.n	800764c <HAL_RCC_OscConfig+0xc0>
 8007632:	4b76      	ldr	r3, [pc, #472]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a75      	ldr	r2, [pc, #468]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4b73      	ldr	r3, [pc, #460]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a72      	ldr	r2, [pc, #456]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	e00b      	b.n	8007664 <HAL_RCC_OscConfig+0xd8>
 800764c:	4b6f      	ldr	r3, [pc, #444]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a6e      	ldr	r2, [pc, #440]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	4b6c      	ldr	r3, [pc, #432]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a6b      	ldr	r2, [pc, #428]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800765e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d013      	beq.n	8007694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fc ff92 	bl	8004594 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007674:	f7fc ff8e 	bl	8004594 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b64      	cmp	r3, #100	@ 0x64
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e21f      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007686:	4b61      	ldr	r3, [pc, #388]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCC_OscConfig+0xe8>
 8007692:	e014      	b.n	80076be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fc ff7e 	bl	8004594 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800769c:	f7fc ff7a 	bl	8004594 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b64      	cmp	r3, #100	@ 0x64
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e20b      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ae:	4b57      	ldr	r3, [pc, #348]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x110>
 80076ba:	e000      	b.n	80076be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d069      	beq.n	800779e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ca:	4b50      	ldr	r3, [pc, #320]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076d6:	4b4d      	ldr	r3, [pc, #308]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d11c      	bne.n	800771c <HAL_RCC_OscConfig+0x190>
 80076e2:	4b4a      	ldr	r3, [pc, #296]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d116      	bne.n	800771c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ee:	4b47      	ldr	r3, [pc, #284]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d005      	beq.n	8007706 <HAL_RCC_OscConfig+0x17a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d001      	beq.n	8007706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e1df      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007706:	4b41      	ldr	r3, [pc, #260]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	493d      	ldr	r1, [pc, #244]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007716:	4313      	orrs	r3, r2
 8007718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771a:	e040      	b.n	800779e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d023      	beq.n	800776c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007724:	4b39      	ldr	r3, [pc, #228]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a38      	ldr	r2, [pc, #224]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fc ff30 	bl	8004594 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007738:	f7fc ff2c 	bl	8004594 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e1bd      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800774a:	4b30      	ldr	r3, [pc, #192]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007756:	4b2d      	ldr	r3, [pc, #180]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4929      	ldr	r1, [pc, #164]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]
 800776a:	e018      	b.n	800779e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800776c:	4b27      	ldr	r3, [pc, #156]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a26      	ldr	r2, [pc, #152]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007778:	f7fc ff0c 	bl	8004594 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007780:	f7fc ff08 	bl	8004594 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e199      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007792:	4b1e      	ldr	r3, [pc, #120]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d038      	beq.n	800781c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d019      	beq.n	80077e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077b2:	4b16      	ldr	r3, [pc, #88]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80077b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b6:	4a15      	ldr	r2, [pc, #84]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fc fee9 	bl	8004594 <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077c6:	f7fc fee5 	bl	8004594 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e176      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077d8:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80077da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0f0      	beq.n	80077c6 <HAL_RCC_OscConfig+0x23a>
 80077e4:	e01a      	b.n	800781c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077e6:	4b09      	ldr	r3, [pc, #36]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80077e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ea:	4a08      	ldr	r2, [pc, #32]	@ (800780c <HAL_RCC_OscConfig+0x280>)
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f2:	f7fc fecf 	bl	8004594 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f8:	e00a      	b.n	8007810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077fa:	f7fc fecb 	bl	8004594 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d903      	bls.n	8007810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e15c      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
 800780c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007810:	4b91      	ldr	r3, [pc, #580]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1ee      	bne.n	80077fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 80a4 	beq.w	8007972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10d      	bne.n	8007852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	4b88      	ldr	r3, [pc, #544]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	4a87      	ldr	r2, [pc, #540]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007840:	6413      	str	r3, [r2, #64]	@ 0x40
 8007842:	4b85      	ldr	r3, [pc, #532]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007852:	4b82      	ldr	r3, [pc, #520]	@ (8007a5c <HAL_RCC_OscConfig+0x4d0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800785a:	2b00      	cmp	r3, #0
 800785c:	d118      	bne.n	8007890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800785e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a5c <HAL_RCC_OscConfig+0x4d0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a7e      	ldr	r2, [pc, #504]	@ (8007a5c <HAL_RCC_OscConfig+0x4d0>)
 8007864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800786a:	f7fc fe93 	bl	8004594 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007872:	f7fc fe8f 	bl	8004594 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b64      	cmp	r3, #100	@ 0x64
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e120      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007884:	4b75      	ldr	r3, [pc, #468]	@ (8007a5c <HAL_RCC_OscConfig+0x4d0>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d106      	bne.n	80078a6 <HAL_RCC_OscConfig+0x31a>
 8007898:	4b6f      	ldr	r3, [pc, #444]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789c:	4a6e      	ldr	r2, [pc, #440]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078a4:	e02d      	b.n	8007902 <HAL_RCC_OscConfig+0x376>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCC_OscConfig+0x33c>
 80078ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b2:	4a69      	ldr	r2, [pc, #420]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078ba:	4b67      	ldr	r3, [pc, #412]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078be:	4a66      	ldr	r2, [pc, #408]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078c0:	f023 0304 	bic.w	r3, r3, #4
 80078c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c6:	e01c      	b.n	8007902 <HAL_RCC_OscConfig+0x376>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d10c      	bne.n	80078ea <HAL_RCC_OscConfig+0x35e>
 80078d0:	4b61      	ldr	r3, [pc, #388]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d4:	4a60      	ldr	r2, [pc, #384]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078d6:	f043 0304 	orr.w	r3, r3, #4
 80078da:	6713      	str	r3, [r2, #112]	@ 0x70
 80078dc:	4b5e      	ldr	r3, [pc, #376]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80078e8:	e00b      	b.n	8007902 <HAL_RCC_OscConfig+0x376>
 80078ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ee:	4a5a      	ldr	r2, [pc, #360]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80078f6:	4b58      	ldr	r3, [pc, #352]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fa:	4a57      	ldr	r2, [pc, #348]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80078fc:	f023 0304 	bic.w	r3, r3, #4
 8007900:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d015      	beq.n	8007936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790a:	f7fc fe43 	bl	8004594 <HAL_GetTick>
 800790e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007910:	e00a      	b.n	8007928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007912:	f7fc fe3f 	bl	8004594 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007920:	4293      	cmp	r3, r2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e0ce      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007928:	4b4b      	ldr	r3, [pc, #300]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0ee      	beq.n	8007912 <HAL_RCC_OscConfig+0x386>
 8007934:	e014      	b.n	8007960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007936:	f7fc fe2d 	bl	8004594 <HAL_GetTick>
 800793a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800793c:	e00a      	b.n	8007954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800793e:	f7fc fe29 	bl	8004594 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800794c:	4293      	cmp	r3, r2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e0b8      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007954:	4b40      	ldr	r3, [pc, #256]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1ee      	bne.n	800793e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d105      	bne.n	8007972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007966:	4b3c      	ldr	r3, [pc, #240]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	4a3b      	ldr	r2, [pc, #236]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800796c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007970:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80a4 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800797c:	4b36      	ldr	r3, [pc, #216]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b08      	cmp	r3, #8
 8007986:	d06b      	beq.n	8007a60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d149      	bne.n	8007a24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007990:	4b31      	ldr	r3, [pc, #196]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a30      	ldr	r2, [pc, #192]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800799a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fc fdfa 	bl	8004594 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fc fdf6 	bl	8004594 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e087      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	4b28      	ldr	r3, [pc, #160]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d0:	019b      	lsls	r3, r3, #6
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	3b01      	subs	r3, #1
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	4313      	orrs	r3, r2
 80079e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80079ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079f0:	4b19      	ldr	r3, [pc, #100]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a18      	ldr	r2, [pc, #96]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 80079f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fc fdca 	bl	8004594 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a04:	f7fc fdc6 	bl	8004594 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e057      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a16:	4b10      	ldr	r3, [pc, #64]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0x478>
 8007a22:	e04f      	b.n	8007ac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a0b      	ldr	r2, [pc, #44]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fc fdb0 	bl	8004594 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a38:	f7fc fdac 	bl	8004594 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e03d      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4a:	4b03      	ldr	r3, [pc, #12]	@ (8007a58 <HAL_RCC_OscConfig+0x4cc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f0      	bne.n	8007a38 <HAL_RCC_OscConfig+0x4ac>
 8007a56:	e035      	b.n	8007ac4 <HAL_RCC_OscConfig+0x538>
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a60:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad0 <HAL_RCC_OscConfig+0x544>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d028      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d121      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d11a      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a90:	4013      	ands	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d111      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa6:	085b      	lsrs	r3, r3, #1
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d107      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d001      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800

08007ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e0d0      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aec:	4b6a      	ldr	r3, [pc, #424]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d910      	bls.n	8007b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afa:	4b67      	ldr	r3, [pc, #412]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 020f 	bic.w	r2, r3, #15
 8007b02:	4965      	ldr	r1, [pc, #404]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b63      	ldr	r3, [pc, #396]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0b8      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d020      	beq.n	8007b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b34:	4b59      	ldr	r3, [pc, #356]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4a58      	ldr	r2, [pc, #352]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b4c:	4b53      	ldr	r3, [pc, #332]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	4a52      	ldr	r2, [pc, #328]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b58:	4b50      	ldr	r3, [pc, #320]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	494d      	ldr	r1, [pc, #308]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d040      	beq.n	8007bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7e:	4b47      	ldr	r3, [pc, #284]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d115      	bne.n	8007bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e07f      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d107      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b96:	4b41      	ldr	r3, [pc, #260]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e073      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e06b      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bb6:	4b39      	ldr	r3, [pc, #228]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f023 0203 	bic.w	r2, r3, #3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	4936      	ldr	r1, [pc, #216]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc8:	f7fc fce4 	bl	8004594 <HAL_GetTick>
 8007bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bce:	e00a      	b.n	8007be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd0:	f7fc fce0 	bl	8004594 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e053      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 020c 	and.w	r2, r3, #12
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d1eb      	bne.n	8007bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bf8:	4b27      	ldr	r3, [pc, #156]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d210      	bcs.n	8007c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c06:	4b24      	ldr	r3, [pc, #144]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f023 020f 	bic.w	r2, r3, #15
 8007c0e:	4922      	ldr	r1, [pc, #136]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c16:	4b20      	ldr	r3, [pc, #128]	@ (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e032      	b.n	8007c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d008      	beq.n	8007c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c34:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4916      	ldr	r1, [pc, #88]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c52:	4b12      	ldr	r3, [pc, #72]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	490e      	ldr	r1, [pc, #56]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c66:	f000 f821 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	091b      	lsrs	r3, r3, #4
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	490a      	ldr	r1, [pc, #40]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8007c78:	5ccb      	ldrb	r3, [r1, r3]
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8007c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c82:	4b09      	ldr	r3, [pc, #36]	@ (8007ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fc fc40 	bl	800450c <HAL_InitTick>

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40023c00 	.word	0x40023c00
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	0801428c 	.word	0x0801428c
 8007ca4:	20000000 	.word	0x20000000
 8007ca8:	20000004 	.word	0x20000004

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb0:	b094      	sub	sp, #80	@ 0x50
 8007cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb8:	2300      	movs	r3, #0
 8007cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cc4:	4b79      	ldr	r3, [pc, #484]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 030c 	and.w	r3, r3, #12
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d00d      	beq.n	8007cec <HAL_RCC_GetSysClockFreq+0x40>
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	f200 80e1 	bhi.w	8007e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007cde:	e0db      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ce0:	4b73      	ldr	r3, [pc, #460]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ce4:	e0db      	b.n	8007e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ce6:	4b73      	ldr	r3, [pc, #460]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007cea:	e0d8      	b.n	8007e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cec:	4b6f      	ldr	r3, [pc, #444]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d063      	beq.n	8007dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d02:	4b6a      	ldr	r3, [pc, #424]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	099b      	lsrs	r3, r3, #6
 8007d08:	2200      	movs	r2, #0
 8007d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	0159      	lsls	r1, r3, #5
 8007d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d30:	0150      	lsls	r0, r2, #5
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4621      	mov	r1, r4
 8007d38:	1a51      	subs	r1, r2, r1
 8007d3a:	6139      	str	r1, [r7, #16]
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d50:	4659      	mov	r1, fp
 8007d52:	018b      	lsls	r3, r1, #6
 8007d54:	4651      	mov	r1, sl
 8007d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d5a:	4651      	mov	r1, sl
 8007d5c:	018a      	lsls	r2, r1, #6
 8007d5e:	4651      	mov	r1, sl
 8007d60:	ebb2 0801 	subs.w	r8, r2, r1
 8007d64:	4659      	mov	r1, fp
 8007d66:	eb63 0901 	sbc.w	r9, r3, r1
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d7e:	4690      	mov	r8, r2
 8007d80:	4699      	mov	r9, r3
 8007d82:	4623      	mov	r3, r4
 8007d84:	eb18 0303 	adds.w	r3, r8, r3
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	eb49 0303 	adc.w	r3, r9, r3
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d9e:	4629      	mov	r1, r5
 8007da0:	024b      	lsls	r3, r1, #9
 8007da2:	4621      	mov	r1, r4
 8007da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007da8:	4621      	mov	r1, r4
 8007daa:	024a      	lsls	r2, r1, #9
 8007dac:	4610      	mov	r0, r2
 8007dae:	4619      	mov	r1, r3
 8007db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db2:	2200      	movs	r2, #0
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007dbc:	f7f8 ff8c 	bl	8000cd8 <__aeabi_uldivmod>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dc8:	e058      	b.n	8007e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dca:	4b38      	ldr	r3, [pc, #224]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	099b      	lsrs	r3, r3, #6
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007dda:	623b      	str	r3, [r7, #32]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	f04f 0000 	mov.w	r0, #0
 8007dec:	f04f 0100 	mov.w	r1, #0
 8007df0:	0159      	lsls	r1, r3, #5
 8007df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007df6:	0150      	lsls	r0, r2, #5
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e02:	4649      	mov	r1, r9
 8007e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8007e20:	eb63 050b 	sbc.w	r5, r3, fp
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	00eb      	lsls	r3, r5, #3
 8007e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e32:	00e2      	lsls	r2, r4, #3
 8007e34:	4614      	mov	r4, r2
 8007e36:	461d      	mov	r5, r3
 8007e38:	4643      	mov	r3, r8
 8007e3a:	18e3      	adds	r3, r4, r3
 8007e3c:	603b      	str	r3, [r7, #0]
 8007e3e:	464b      	mov	r3, r9
 8007e40:	eb45 0303 	adc.w	r3, r5, r3
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e52:	4629      	mov	r1, r5
 8007e54:	028b      	lsls	r3, r1, #10
 8007e56:	4621      	mov	r1, r4
 8007e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	028a      	lsls	r2, r1, #10
 8007e60:	4610      	mov	r0, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e66:	2200      	movs	r2, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	61fa      	str	r2, [r7, #28]
 8007e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e70:	f7f8 ff32 	bl	8000cd8 <__aeabi_uldivmod>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4613      	mov	r3, r2
 8007e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x200>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	3301      	adds	r3, #1
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e96:	e002      	b.n	8007e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e98:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3750      	adds	r7, #80	@ 0x50
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	007a1200 	.word	0x007a1200

08007eb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ebc:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	20000000 	.word	0x20000000

08007ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ed4:	f7ff fff0 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	0a9b      	lsrs	r3, r3, #10
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	4903      	ldr	r1, [pc, #12]	@ (8007ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ee6:	5ccb      	ldrb	r3, [r1, r3]
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	0801429c 	.word	0x0801429c

08007ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007efc:	f7ff ffdc 	bl	8007eb8 <HAL_RCC_GetHCLKFreq>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4b05      	ldr	r3, [pc, #20]	@ (8007f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	0b5b      	lsrs	r3, r3, #13
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	4903      	ldr	r1, [pc, #12]	@ (8007f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f0e:	5ccb      	ldrb	r3, [r1, r3]
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40023800 	.word	0x40023800
 8007f1c:	0801429c 	.word	0x0801429c

08007f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d012      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f44:	4b65      	ldr	r3, [pc, #404]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	4a64      	ldr	r2, [pc, #400]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f4e:	6093      	str	r3, [r2, #8]
 8007f50:	4b62      	ldr	r3, [pc, #392]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	4960      	ldr	r1, [pc, #384]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d017      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f76:	4b59      	ldr	r3, [pc, #356]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f84:	4955      	ldr	r1, [pc, #340]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f94:	d101      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007f96:	2301      	movs	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d017      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	4946      	ldr	r1, [pc, #280]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fd0:	d101      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 808b 	beq.w	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	4a39      	ldr	r2, [pc, #228]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ffc:	4b37      	ldr	r3, [pc, #220]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008008:	4b35      	ldr	r3, [pc, #212]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a34      	ldr	r2, [pc, #208]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800800e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008014:	f7fc fabe 	bl	8004594 <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800801a:	e008      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801c:	f7fc faba 	bl	8004594 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b64      	cmp	r3, #100	@ 0x64
 8008028:	d901      	bls.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e2bc      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800802e:	4b2c      	ldr	r3, [pc, #176]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f0      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800803a:	4b28      	ldr	r3, [pc, #160]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008042:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d035      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d02e      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008058:	4b20      	ldr	r3, [pc, #128]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800805a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008060:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008062:	4b1e      	ldr	r3, [pc, #120]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800806c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800806e:	4b1b      	ldr	r3, [pc, #108]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008072:	4a1a      	ldr	r2, [pc, #104]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008078:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800807a:	4a18      	ldr	r2, [pc, #96]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008080:	4b16      	ldr	r3, [pc, #88]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b01      	cmp	r3, #1
 800808a:	d114      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fc fa82 	bl	8004594 <HAL_GetTick>
 8008090:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008092:	e00a      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008094:	f7fc fa7e 	bl	8004594 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e27e      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080aa:	4b0c      	ldr	r3, [pc, #48]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0ee      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080c2:	d111      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80080c4:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80080d0:	4b04      	ldr	r3, [pc, #16]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80080d2:	400b      	ands	r3, r1
 80080d4:	4901      	ldr	r1, [pc, #4]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
 80080da:	e00b      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80080dc:	40023800 	.word	0x40023800
 80080e0:	40007000 	.word	0x40007000
 80080e4:	0ffffcff 	.word	0x0ffffcff
 80080e8:	4ba4      	ldr	r3, [pc, #656]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	4aa3      	ldr	r2, [pc, #652]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080f2:	6093      	str	r3, [r2, #8]
 80080f4:	4ba1      	ldr	r3, [pc, #644]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80080f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008100:	499e      	ldr	r1, [pc, #632]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008102:	4313      	orrs	r3, r2
 8008104:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b00      	cmp	r3, #0
 8008110:	d010      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008112:	4b9a      	ldr	r3, [pc, #616]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008118:	4a98      	ldr	r2, [pc, #608]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800811a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800811e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008122:	4b96      	ldr	r3, [pc, #600]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008124:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812c:	4993      	ldr	r1, [pc, #588]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008140:	4b8e      	ldr	r3, [pc, #568]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008146:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814e:	498b      	ldr	r1, [pc, #556]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008150:	4313      	orrs	r3, r2
 8008152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008162:	4b86      	ldr	r3, [pc, #536]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008168:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008170:	4982      	ldr	r1, [pc, #520]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008184:	4b7d      	ldr	r3, [pc, #500]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008192:	497a      	ldr	r1, [pc, #488]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081a6:	4b75      	ldr	r3, [pc, #468]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ac:	f023 0203 	bic.w	r2, r3, #3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	4971      	ldr	r1, [pc, #452]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00a      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081c8:	4b6c      	ldr	r3, [pc, #432]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f023 020c 	bic.w	r2, r3, #12
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d6:	4969      	ldr	r1, [pc, #420]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081ea:	4b64      	ldr	r3, [pc, #400]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f8:	4960      	ldr	r1, [pc, #384]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00a      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800820c:	4b5b      	ldr	r3, [pc, #364]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800820e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800821a:	4958      	ldr	r1, [pc, #352]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800821c:	4313      	orrs	r3, r2
 800821e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800822e:	4b53      	ldr	r3, [pc, #332]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823c:	494f      	ldr	r1, [pc, #316]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008250:	4b4a      	ldr	r3, [pc, #296]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825e:	4947      	ldr	r1, [pc, #284]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008260:	4313      	orrs	r3, r2
 8008262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008272:	4b42      	ldr	r3, [pc, #264]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008278:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008280:	493e      	ldr	r1, [pc, #248]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008282:	4313      	orrs	r3, r2
 8008284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008294:	4b39      	ldr	r3, [pc, #228]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800829a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a2:	4936      	ldr	r1, [pc, #216]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082b6:	4b31      	ldr	r3, [pc, #196]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c4:	492d      	ldr	r1, [pc, #180]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082d4:	d101      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082e6:	4b25      	ldr	r3, [pc, #148]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f4:	4921      	ldr	r1, [pc, #132]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008308:	4b1c      	ldr	r3, [pc, #112]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008316:	4919      	ldr	r1, [pc, #100]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800832a:	4b14      	ldr	r3, [pc, #80]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008330:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008338:	4910      	ldr	r1, [pc, #64]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d006      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 809d 	beq.w	800848e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008354:	4b09      	ldr	r3, [pc, #36]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a08      	ldr	r2, [pc, #32]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800835a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800835e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008360:	f7fc f918 	bl	8004594 <HAL_GetTick>
 8008364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008366:	e00b      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008368:	f7fc f914 	bl	8004594 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b64      	cmp	r3, #100	@ 0x64
 8008374:	d904      	bls.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e116      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800837a:	bf00      	nop
 800837c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008380:	4b8b      	ldr	r3, [pc, #556]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1ed      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d017      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d113      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083a0:	4b83      	ldr	r3, [pc, #524]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a6:	0e1b      	lsrs	r3, r3, #24
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	019a      	lsls	r2, r3, #6
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	071b      	lsls	r3, r3, #28
 80083c0:	497b      	ldr	r1, [pc, #492]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d024      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083f2:	d11f      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083f4:	4b6e      	ldr	r3, [pc, #440]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80083f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fa:	0f1b      	lsrs	r3, r3, #28
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	019a      	lsls	r2, r3, #6
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	431a      	orrs	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	071b      	lsls	r3, r3, #28
 8008414:	4966      	ldr	r1, [pc, #408]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800841c:	4b64      	ldr	r3, [pc, #400]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800841e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008422:	f023 021f 	bic.w	r2, r3, #31
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	3b01      	subs	r3, #1
 800842c:	4960      	ldr	r1, [pc, #384]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00d      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	019a      	lsls	r2, r3, #6
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	061b      	lsls	r3, r3, #24
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	071b      	lsls	r3, r3, #28
 8008454:	4956      	ldr	r1, [pc, #344]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800845c:	4b54      	ldr	r3, [pc, #336]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a53      	ldr	r2, [pc, #332]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008462:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008468:	f7fc f894 	bl	8004594 <HAL_GetTick>
 800846c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008470:	f7fc f890 	bl	8004594 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b64      	cmp	r3, #100	@ 0x64
 800847c:	d901      	bls.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e092      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008482:	4b4b      	ldr	r3, [pc, #300]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f0      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b01      	cmp	r3, #1
 8008492:	f040 8088 	bne.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008496:	4b46      	ldr	r3, [pc, #280]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a45      	ldr	r2, [pc, #276]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800849c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a2:	f7fc f877 	bl	8004594 <HAL_GetTick>
 80084a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084a8:	e008      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084aa:	f7fc f873 	bl	8004594 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	2b64      	cmp	r3, #100	@ 0x64
 80084b6:	d901      	bls.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e075      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084bc:	4b3c      	ldr	r3, [pc, #240]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c8:	d0ef      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d024      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d120      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084f2:	4b2f      	ldr	r3, [pc, #188]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f8:	0c1b      	lsrs	r3, r3, #16
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	019a      	lsls	r2, r3, #6
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	041b      	lsls	r3, r3, #16
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	061b      	lsls	r3, r3, #24
 8008512:	4927      	ldr	r1, [pc, #156]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008514:	4313      	orrs	r3, r2
 8008516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800851a:	4b25      	ldr	r3, [pc, #148]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800851c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008520:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	3b01      	subs	r3, #1
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	4920      	ldr	r1, [pc, #128]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800852e:	4313      	orrs	r3, r2
 8008530:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d018      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008548:	d113      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800854a:	4b19      	ldr	r3, [pc, #100]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008550:	0e1b      	lsrs	r3, r3, #24
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	019a      	lsls	r2, r3, #6
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	431a      	orrs	r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	061b      	lsls	r3, r3, #24
 800856a:	4911      	ldr	r1, [pc, #68]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008572:	4b0f      	ldr	r3, [pc, #60]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a0e      	ldr	r2, [pc, #56]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800857c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857e:	f7fc f809 	bl	8004594 <HAL_GetTick>
 8008582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008584:	e008      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008586:	f7fc f805 	bl	8004594 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b64      	cmp	r3, #100	@ 0x64
 8008592:	d901      	bls.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e007      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	d1ef      	bne.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40023800 	.word	0x40023800

080085b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e09d      	b.n	8008702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d108      	bne.n	80085e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085d6:	d009      	beq.n	80085ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	61da      	str	r2, [r3, #28]
 80085de:	e005      	b.n	80085ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fb fb32 	bl	8003c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800862c:	d902      	bls.n	8008634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e002      	b.n	800863a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008642:	d007      	beq.n	8008654 <HAL_SPI_Init+0xa0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800864c:	d002      	beq.n	8008654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	ea42 0103 	orr.w	r1, r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	f003 0204 	and.w	r2, r3, #4
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	431a      	orrs	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80086d0:	ea42 0103 	orr.w	r1, r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69da      	ldr	r2, [r3, #28]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b088      	sub	sp, #32
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	603b      	str	r3, [r7, #0]
 8008716:	4613      	mov	r3, r2
 8008718:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800871a:	f7fb ff3b 	bl	8004594 <HAL_GetTick>
 800871e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	d001      	beq.n	8008734 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	e15c      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <HAL_SPI_Transmit+0x36>
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e154      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_SPI_Transmit+0x48>
 800874e:	2302      	movs	r3, #2
 8008750:	e14d      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2203      	movs	r2, #3
 800875e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	88fa      	ldrh	r2, [r7, #6]
 8008772:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a4:	d10f      	bne.n	80087c6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b40      	cmp	r3, #64	@ 0x40
 80087d2:	d007      	beq.n	80087e4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087ec:	d952      	bls.n	8008894 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <HAL_SPI_Transmit+0xf2>
 80087f6:	8b7b      	ldrh	r3, [r7, #26]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d145      	bne.n	8008888 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008800:	881a      	ldrh	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	1c9a      	adds	r2, r3, #2
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008820:	e032      	b.n	8008888 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b02      	cmp	r3, #2
 800882e:	d112      	bne.n	8008856 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008840:	1c9a      	adds	r2, r3, #2
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	3b01      	subs	r3, #1
 800884e:	b29a      	uxth	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008854:	e018      	b.n	8008888 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008856:	f7fb fe9d 	bl	8004594 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d803      	bhi.n	800886e <HAL_SPI_Transmit+0x164>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d102      	bne.n	8008874 <HAL_SPI_Transmit+0x16a>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e0b2      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1c7      	bne.n	8008822 <HAL_SPI_Transmit+0x118>
 8008892:	e083      	b.n	800899c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_SPI_Transmit+0x198>
 800889c:	8b7b      	ldrh	r3, [r7, #26]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d177      	bne.n	8008992 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d912      	bls.n	80088d2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	881a      	ldrh	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088bc:	1c9a      	adds	r2, r3, #2
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b02      	subs	r3, #2
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80088d0:	e05f      	b.n	8008992 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80088f8:	e04b      	b.n	8008992 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b02      	cmp	r3, #2
 8008906:	d12b      	bne.n	8008960 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	d912      	bls.n	8008938 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008916:	881a      	ldrh	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	1c9a      	adds	r2, r3, #2
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b02      	subs	r3, #2
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008936:	e02c      	b.n	8008992 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	330c      	adds	r3, #12
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800895e:	e018      	b.n	8008992 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008960:	f7fb fe18 	bl	8004594 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d803      	bhi.n	8008978 <HAL_SPI_Transmit+0x26e>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d102      	bne.n	800897e <HAL_SPI_Transmit+0x274>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e02d      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1ae      	bne.n	80088fa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 f8b7 	bl	8009b14 <SPI_EndRxTxTransaction>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2220      	movs	r2, #32
 80089b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b088      	sub	sp, #32
 80089fa:	af02      	add	r7, sp, #8
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008a12:	2302      	movs	r3, #2
 8008a14:	e123      	b.n	8008c5e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Receive+0x2c>
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e11b      	b.n	8008c5e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a2e:	d112      	bne.n	8008a56 <HAL_SPI_Receive+0x60>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10e      	bne.n	8008a56 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4613      	mov	r3, r2
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f90a 	bl	8008c66 <HAL_SPI_TransmitReceive>
 8008a52:	4603      	mov	r3, r0
 8008a54:	e103      	b.n	8008c5e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a56:	f7fb fd9d 	bl	8004594 <HAL_GetTick>
 8008a5a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_SPI_Receive+0x74>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e0f9      	b.n	8008c5e <HAL_SPI_Receive+0x268>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008abc:	d908      	bls.n	8008ad0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008acc:	605a      	str	r2, [r3, #4]
 8008ace:	e007      	b.n	8008ae0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ade:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae8:	d10f      	bne.n	8008b0a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b14:	2b40      	cmp	r3, #64	@ 0x40
 8008b16:	d007      	beq.n	8008b28 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b30:	d875      	bhi.n	8008c1e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008b32:	e037      	b.n	8008ba4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d117      	bne.n	8008b72 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f103 020c 	add.w	r2, r3, #12
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008b70:	e018      	b.n	8008ba4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b72:	f7fb fd0f 	bl	8004594 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d803      	bhi.n	8008b8a <HAL_SPI_Receive+0x194>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d102      	bne.n	8008b90 <HAL_SPI_Receive+0x19a>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e05c      	b.n	8008c5e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1c1      	bne.n	8008b34 <HAL_SPI_Receive+0x13e>
 8008bb0:	e03b      	b.n	8008c2a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d115      	bne.n	8008bec <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	b292      	uxth	r2, r2
 8008bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	1c9a      	adds	r2, r3, #2
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008bea:	e018      	b.n	8008c1e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bec:	f7fb fcd2 	bl	8004594 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d803      	bhi.n	8008c04 <HAL_SPI_Receive+0x20e>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_Receive+0x214>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e01f      	b.n	8008c5e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1c3      	bne.n	8008bb2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fef4 	bl	8009a1c <SPI_EndRxTransaction>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e000      	b.n	8008c5e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
  }
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b08a      	sub	sp, #40	@ 0x28
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
 8008c72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c74:	2301      	movs	r3, #1
 8008c76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c78:	f7fb fc8c 	bl	8004594 <HAL_GetTick>
 8008c7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008c8c:	887b      	ldrh	r3, [r7, #2]
 8008c8e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008c90:	887b      	ldrh	r3, [r7, #2]
 8008c92:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c94:	7ffb      	ldrb	r3, [r7, #31]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d00c      	beq.n	8008cb4 <HAL_SPI_TransmitReceive+0x4e>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ca0:	d106      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x4a>
 8008caa:	7ffb      	ldrb	r3, [r7, #31]
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	d001      	beq.n	8008cb4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e1f3      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <HAL_SPI_TransmitReceive+0x60>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_SPI_TransmitReceive+0x60>
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e1e8      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d101      	bne.n	8008cd8 <HAL_SPI_TransmitReceive+0x72>
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	e1e1      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d003      	beq.n	8008cf4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	887a      	ldrh	r2, [r7, #2]
 8008d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	887a      	ldrh	r2, [r7, #2]
 8008d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	887a      	ldrh	r2, [r7, #2]
 8008d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	887a      	ldrh	r2, [r7, #2]
 8008d20:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d36:	d802      	bhi.n	8008d3e <HAL_SPI_TransmitReceive+0xd8>
 8008d38:	8abb      	ldrh	r3, [r7, #20]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d908      	bls.n	8008d50 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d4c:	605a      	str	r2, [r3, #4]
 8008d4e:	e007      	b.n	8008d60 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6a:	2b40      	cmp	r3, #64	@ 0x40
 8008d6c:	d007      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d86:	f240 8083 	bls.w	8008e90 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x132>
 8008d92:	8afb      	ldrh	r3, [r7, #22]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d16f      	bne.n	8008e78 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9c:	881a      	ldrh	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	1c9a      	adds	r2, r3, #2
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dbc:	e05c      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d11b      	bne.n	8008e04 <HAL_SPI_TransmitReceive+0x19e>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <HAL_SPI_TransmitReceive+0x19e>
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d113      	bne.n	8008e04 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	881a      	ldrh	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dec:	1c9a      	adds	r2, r3, #2
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d11c      	bne.n	8008e4c <HAL_SPI_TransmitReceive+0x1e6>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d016      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e28:	b292      	uxth	r2, r2
 8008e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e4c:	f7fb fba2 	bl	8004594 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d80d      	bhi.n	8008e78 <HAL_SPI_TransmitReceive+0x212>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d009      	beq.n	8008e78 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e111      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d19d      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x158>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d197      	bne.n	8008dbe <HAL_SPI_TransmitReceive+0x158>
 8008e8e:	e0e5      	b.n	800905c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x23a>
 8008e98:	8afb      	ldrh	r3, [r7, #22]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	f040 80d1 	bne.w	8009042 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d912      	bls.n	8008ed0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	881a      	ldrh	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eba:	1c9a      	adds	r2, r3, #2
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b02      	subs	r3, #2
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ece:	e0b8      	b.n	8009042 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	330c      	adds	r3, #12
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ef6:	e0a4      	b.n	8009042 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d134      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x30a>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d02f      	beq.n	8008f70 <HAL_SPI_TransmitReceive+0x30a>
 8008f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d12c      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d912      	bls.n	8008f46 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f24:	881a      	ldrh	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	1c9a      	adds	r2, r3, #2
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b02      	subs	r3, #2
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f44:	e012      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d148      	bne.n	8009010 <HAL_SPI_TransmitReceive+0x3aa>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d042      	beq.n	8009010 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d923      	bls.n	8008fde <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa0:	b292      	uxth	r2, r2
 8008fa2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa8:	1c9a      	adds	r2, r3, #2
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b02      	subs	r3, #2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d81f      	bhi.n	800900c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008fda:	605a      	str	r2, [r3, #4]
 8008fdc:	e016      	b.n	800900c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f103 020c 	add.w	r2, r3, #12
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009000:	b29b      	uxth	r3, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800900c:	2301      	movs	r3, #1
 800900e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009010:	f7fb fac0 	bl	8004594 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901c:	429a      	cmp	r2, r3
 800901e:	d803      	bhi.n	8009028 <HAL_SPI_TransmitReceive+0x3c2>
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009026:	d102      	bne.n	800902e <HAL_SPI_TransmitReceive+0x3c8>
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e02c      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	f47f af55 	bne.w	8008ef8 <HAL_SPI_TransmitReceive+0x292>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	f47f af4e 	bne.w	8008ef8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800905c:	6a3a      	ldr	r2, [r7, #32]
 800905e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fd57 	bl	8009b14 <SPI_EndRxTxTransaction>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d008      	beq.n	800907e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e00e      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800909a:	2300      	movs	r3, #0
  }
}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	@ 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090b8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d00c      	beq.n	80090e0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090cc:	d106      	bne.n	80090dc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <HAL_SPI_TransmitReceive_DMA+0x38>
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d001      	beq.n	80090e0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80090dc:	2302      	movs	r3, #2
 80090de:	e158      	b.n	8009392 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80090ec:	887b      	ldrh	r3, [r7, #2]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e14d      	b.n	8009392 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_SPI_TransmitReceive_DMA+0x60>
 8009100:	2302      	movs	r3, #2
 8009102:	e146      	b.n	8009392 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b04      	cmp	r3, #4
 8009116:	d003      	beq.n	8009120 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2205      	movs	r2, #5
 800911c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	887a      	ldrh	r2, [r7, #2]
 8009136:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	887a      	ldrh	r2, [r7, #2]
 8009142:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	887a      	ldrh	r2, [r7, #2]
 800914a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009168:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009172:	d908      	bls.n	8009186 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009182:	605a      	str	r2, [r3, #4]
 8009184:	e06f      	b.n	8009266 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009194:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a0:	d126      	bne.n	80091f0 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10f      	bne.n	80091ce <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091bc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091cc:	e010      	b.n	80091f0 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3301      	adds	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091fa:	d134      	bne.n	8009266 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800920a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009212:	b29b      	uxth	r3, r3
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b00      	cmp	r3, #0
 800921a:	d111      	bne.n	8009240 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800922a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009232:	b29b      	uxth	r3, r3
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800923e:	e012      	b.n	8009266 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800924e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009256:	b29b      	uxth	r3, r3
 8009258:	085b      	lsrs	r3, r3, #1
 800925a:	b29b      	uxth	r3, r3
 800925c:	3301      	adds	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b04      	cmp	r3, #4
 8009270:	d108      	bne.n	8009284 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009276:	4a49      	ldr	r2, [pc, #292]	@ (800939c <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009278:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800927e:	4a48      	ldr	r2, [pc, #288]	@ (80093a0 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009280:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009282:	e007      	b.n	8009294 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009288:	4a46      	ldr	r2, [pc, #280]	@ (80093a4 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800928a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009290:	4a45      	ldr	r2, [pc, #276]	@ (80093a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009292:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009298:	4a44      	ldr	r2, [pc, #272]	@ (80093ac <HAL_SPI_TransmitReceive_DMA+0x308>)
 800929a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a0:	2200      	movs	r2, #0
 80092a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	4619      	mov	r1, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80092be:	f7fc f807 	bl	80052d0 <HAL_DMA_Start_IT>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092cc:	f043 0210 	orr.w	r2, r3, #16
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e058      	b.n	8009392 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f4:	2200      	movs	r2, #0
 80092f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fc:	2200      	movs	r2, #0
 80092fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009304:	2200      	movs	r2, #0
 8009306:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930c:	2200      	movs	r2, #0
 800930e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009318:	4619      	mov	r1, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009326:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009328:	f7fb ffd2 	bl	80052d0 <HAL_DMA_Start_IT>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009336:	f043 0210 	orr.w	r2, r3, #16
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e023      	b.n	8009392 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d007      	beq.n	8009368 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009366:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0220 	orr.w	r2, r2, #32
 800937e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0202 	orr.w	r2, r2, #2
 800938e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	0800973d 	.word	0x0800973d
 80093a0:	08009601 	.word	0x08009601
 80093a4:	08009759 	.word	0x08009759
 80093a8:	080096ab 	.word	0x080096ab
 80093ac:	08009775 	.word	0x08009775

080093b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	099b      	lsrs	r3, r3, #6
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10f      	bne.n	80093f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	099b      	lsrs	r3, r3, #6
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
    return;
 80093f2:	e0d7      	b.n	80095a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <HAL_SPI_IRQHandler+0x66>
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	09db      	lsrs	r3, r3, #7
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
    return;
 8009414:	e0c6      	b.n	80095a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10c      	bne.n	800943c <HAL_SPI_IRQHandler+0x8c>
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	099b      	lsrs	r3, r3, #6
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	0a1b      	lsrs	r3, r3, #8
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 80b4 	beq.w	80095a4 <HAL_SPI_IRQHandler+0x1f4>
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80ad 	beq.w	80095a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	099b      	lsrs	r3, r3, #6
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d023      	beq.n	800949e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d011      	beq.n	8009486 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009466:	f043 0204 	orr.w	r2, r3, #4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	e00b      	b.n	800949e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009486:	2300      	movs	r3, #0
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	613b      	str	r3, [r7, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	693b      	ldr	r3, [r7, #16]
        return;
 800949c:	e082      	b.n	80095a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ae:	f043 0201 	orr.w	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	0a1b      	lsrs	r3, r3, #8
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00c      	beq.n	80094fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e4:	f043 0208 	orr.w	r2, r3, #8
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094ec:	2300      	movs	r3, #0
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	60bb      	str	r3, [r7, #8]
 80094f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04f      	beq.n	80095a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009510:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <HAL_SPI_IRQHandler+0x17e>
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d034      	beq.n	8009598 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0203 	bic.w	r2, r2, #3
 800953c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954a:	4a18      	ldr	r2, [pc, #96]	@ (80095ac <HAL_SPI_IRQHandler+0x1fc>)
 800954c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009552:	4618      	mov	r0, r3
 8009554:	f7fb ff8c 	bl	8005470 <HAL_DMA_Abort_IT>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009562:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956e:	2b00      	cmp	r3, #0
 8009570:	d016      	beq.n	80095a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009576:	4a0d      	ldr	r2, [pc, #52]	@ (80095ac <HAL_SPI_IRQHandler+0x1fc>)
 8009578:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957e:	4618      	mov	r0, r3
 8009580:	f7fb ff76 	bl	8005470 <HAL_DMA_Abort_IT>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800958e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009596:	e003      	b.n	80095a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f827 	bl	80095ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800959e:	e000      	b.n	80095a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80095a0:	bf00      	nop
    return;
 80095a2:	bf00      	nop
  }
}
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	080097b5 	.word	0x080097b5

080095b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800960e:	f7fa ffc1 	bl	8004594 <HAL_GetTick>
 8009612:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009622:	d03c      	beq.n	800969e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0220 	bic.w	r2, r2, #32
 8009632:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10d      	bne.n	8009658 <SPI_DMAReceiveCplt+0x58>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009644:	d108      	bne.n	8009658 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0203 	bic.w	r2, r2, #3
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	e007      	b.n	8009668 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0201 	bic.w	r2, r2, #1
 8009666:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	2164      	movs	r1, #100	@ 0x64
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f9d5 	bl	8009a1c <SPI_EndRxTransaction>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff ffa8 	bl	80095ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800969c:	e002      	b.n	80096a4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff ff86 	bl	80095b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096b8:	f7fa ff6c 	bl	8004594 <HAL_GetTick>
 80096bc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096cc:	d030      	beq.n	8009730 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0220 	bic.w	r2, r2, #32
 80096dc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	2164      	movs	r1, #100	@ 0x64
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fa16 	bl	8009b14 <SPI_EndRxTxTransaction>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f2:	f043 0220 	orr.w	r2, r3, #32
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0203 	bic.w	r2, r2, #3
 8009708:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff ff5f 	bl	80095ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800972e:	e002      	b.n	8009736 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7f9 fc51 	bl	8002fd8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009748:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff ff3a 	bl	80095c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7ff ff36 	bl	80095d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0203 	bic.w	r2, r2, #3
 8009790:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009796:	f043 0210 	orr.w	r2, r3, #16
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff ff20 	bl	80095ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097ac:	bf00      	nop
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff ff0b 	bl	80095ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4613      	mov	r3, r2
 80097ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097f0:	f7fa fed0 	bl	8004594 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4413      	add	r3, r2
 80097fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009800:	f7fa fec8 	bl	8004594 <HAL_GetTick>
 8009804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009806:	4b39      	ldr	r3, [pc, #228]	@ (80098ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	015b      	lsls	r3, r3, #5
 800980c:	0d1b      	lsrs	r3, r3, #20
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	fb02 f303 	mul.w	r3, r2, r3
 8009814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009816:	e055      	b.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981e:	d051      	beq.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009820:	f7fa feb8 	bl	8004594 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	429a      	cmp	r2, r3
 800982e:	d902      	bls.n	8009836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d13d      	bne.n	80098b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800984e:	d111      	bne.n	8009874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009858:	d004      	beq.n	8009864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009862:	d107      	bne.n	8009874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800987c:	d10f      	bne.n	800989e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800989c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e018      	b.n	80098e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	61fb      	str	r3, [r7, #28]
 80098bc:	e002      	b.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4013      	ands	r3, r2
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	bf0c      	ite	eq
 80098d4:	2301      	moveq	r3, #1
 80098d6:	2300      	movne	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d19a      	bne.n	8009818 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000000 	.word	0x20000000

080098f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009902:	f7fa fe47 	bl	8004594 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	1a9b      	subs	r3, r3, r2
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	4413      	add	r3, r2
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009912:	f7fa fe3f 	bl	8004594 <HAL_GetTick>
 8009916:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009920:	4b3d      	ldr	r3, [pc, #244]	@ (8009a18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	00da      	lsls	r2, r3, #3
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	0d1b      	lsrs	r3, r3, #20
 8009930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009932:	fb02 f303 	mul.w	r3, r2, r3
 8009936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009938:	e061      	b.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009940:	d107      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009950:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d051      	beq.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800995a:	f7fa fe1b 	bl	8004594 <HAL_GetTick>
 800995e:	4602      	mov	r2, r0
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009966:	429a      	cmp	r2, r3
 8009968:	d902      	bls.n	8009970 <SPI_WaitFifoStateUntilTimeout+0x80>
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d13d      	bne.n	80099ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800997e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009988:	d111      	bne.n	80099ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009992:	d004      	beq.n	800999e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800999c:	d107      	bne.n	80099ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b6:	d10f      	bne.n	80099d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e011      	b.n	8009a10 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80099f6:	e002      	b.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4013      	ands	r3, r2
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d195      	bne.n	800993a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3728      	adds	r7, #40	@ 0x28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000000 	.word	0x20000000

08009a1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a30:	d111      	bne.n	8009a56 <SPI_EndRxTransaction+0x3a>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a3a:	d004      	beq.n	8009a46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a44:	d107      	bne.n	8009a56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5e:	d112      	bne.n	8009a86 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	2180      	movs	r1, #128	@ 0x80
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff feb8 	bl	80097e0 <SPI_WaitFlagStateUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d021      	beq.n	8009aba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a7a:	f043 0220 	orr.w	r2, r3, #32
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e03d      	b.n	8009b02 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a86:	4b21      	ldr	r3, [pc, #132]	@ (8009b0c <SPI_EndRxTransaction+0xf0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a21      	ldr	r2, [pc, #132]	@ (8009b10 <SPI_EndRxTransaction+0xf4>)
 8009a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a90:	0d5b      	lsrs	r3, r3, #21
 8009a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a96:	fb02 f303 	mul.w	r3, r2, r3
 8009a9a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab2:	2b80      	cmp	r3, #128	@ 0x80
 8009ab4:	d0f2      	beq.n	8009a9c <SPI_EndRxTransaction+0x80>
 8009ab6:	e000      	b.n	8009aba <SPI_EndRxTransaction+0x9e>
        break;
 8009ab8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ac2:	d11d      	bne.n	8009b00 <SPI_EndRxTransaction+0xe4>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009acc:	d004      	beq.n	8009ad8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ad6:	d113      	bne.n	8009b00 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ff03 	bl	80098f0 <SPI_WaitFifoStateUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d007      	beq.n	8009b00 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009af4:	f043 0220 	orr.w	r2, r3, #32
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e000      	b.n	8009b02 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000000 	.word	0x20000000
 8009b10:	165e9f81 	.word	0x165e9f81

08009b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b088      	sub	sp, #32
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fedf 	bl	80098f0 <SPI_WaitFifoStateUntilTimeout>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b3c:	f043 0220 	orr.w	r2, r3, #32
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e046      	b.n	8009bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b48:	4b25      	ldr	r3, [pc, #148]	@ (8009be0 <SPI_EndRxTxTransaction+0xcc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a25      	ldr	r2, [pc, #148]	@ (8009be4 <SPI_EndRxTxTransaction+0xd0>)
 8009b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b52:	0d5b      	lsrs	r3, r3, #21
 8009b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b58:	fb02 f303 	mul.w	r3, r2, r3
 8009b5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b66:	d112      	bne.n	8009b8e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2180      	movs	r1, #128	@ 0x80
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fe34 	bl	80097e0 <SPI_WaitFlagStateUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d016      	beq.n	8009bac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b82:	f043 0220 	orr.w	r2, r3, #32
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e023      	b.n	8009bd6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba4:	2b80      	cmp	r3, #128	@ 0x80
 8009ba6:	d0f2      	beq.n	8009b8e <SPI_EndRxTxTransaction+0x7a>
 8009ba8:	e000      	b.n	8009bac <SPI_EndRxTxTransaction+0x98>
        break;
 8009baa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f7ff fe99 	bl	80098f0 <SPI_WaitFifoStateUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d007      	beq.n	8009bd4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc8:	f043 0220 	orr.w	r2, r3, #32
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e000      	b.n	8009bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000000 	.word	0x20000000
 8009be4:	165e9f81 	.word	0x165e9f81

08009be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e049      	b.n	8009c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fa f8de 	bl	8003dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	3304      	adds	r3, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f000 fb6e 	bl	800a308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e049      	b.n	8009d3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f841 	bl	8009d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f000 fb17 	bl	800a308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d109      	bne.n	8009d7c <HAL_TIM_PWM_Start+0x24>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	bf14      	ite	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	2300      	moveq	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e03c      	b.n	8009df6 <HAL_TIM_PWM_Start+0x9e>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d109      	bne.n	8009d96 <HAL_TIM_PWM_Start+0x3e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	bf14      	ite	ne
 8009d8e:	2301      	movne	r3, #1
 8009d90:	2300      	moveq	r3, #0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	e02f      	b.n	8009df6 <HAL_TIM_PWM_Start+0x9e>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d109      	bne.n	8009db0 <HAL_TIM_PWM_Start+0x58>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	bf14      	ite	ne
 8009da8:	2301      	movne	r3, #1
 8009daa:	2300      	moveq	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	e022      	b.n	8009df6 <HAL_TIM_PWM_Start+0x9e>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b0c      	cmp	r3, #12
 8009db4:	d109      	bne.n	8009dca <HAL_TIM_PWM_Start+0x72>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	bf14      	ite	ne
 8009dc2:	2301      	movne	r3, #1
 8009dc4:	2300      	moveq	r3, #0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	e015      	b.n	8009df6 <HAL_TIM_PWM_Start+0x9e>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b10      	cmp	r3, #16
 8009dce:	d109      	bne.n	8009de4 <HAL_TIM_PWM_Start+0x8c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	bf14      	ite	ne
 8009ddc:	2301      	movne	r3, #1
 8009dde:	2300      	moveq	r3, #0
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	e008      	b.n	8009df6 <HAL_TIM_PWM_Start+0x9e>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	bf14      	ite	ne
 8009df0:	2301      	movne	r3, #1
 8009df2:	2300      	moveq	r3, #0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e092      	b.n	8009f24 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <HAL_TIM_PWM_Start+0xb6>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e0c:	e023      	b.n	8009e56 <HAL_TIM_PWM_Start+0xfe>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d104      	bne.n	8009e1e <HAL_TIM_PWM_Start+0xc6>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e1c:	e01b      	b.n	8009e56 <HAL_TIM_PWM_Start+0xfe>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d104      	bne.n	8009e2e <HAL_TIM_PWM_Start+0xd6>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e2c:	e013      	b.n	8009e56 <HAL_TIM_PWM_Start+0xfe>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b0c      	cmp	r3, #12
 8009e32:	d104      	bne.n	8009e3e <HAL_TIM_PWM_Start+0xe6>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e3c:	e00b      	b.n	8009e56 <HAL_TIM_PWM_Start+0xfe>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b10      	cmp	r3, #16
 8009e42:	d104      	bne.n	8009e4e <HAL_TIM_PWM_Start+0xf6>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e4c:	e003      	b.n	8009e56 <HAL_TIM_PWM_Start+0xfe>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2202      	movs	r2, #2
 8009e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fdf0 	bl	800aa44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a30      	ldr	r2, [pc, #192]	@ (8009f2c <HAL_TIM_PWM_Start+0x1d4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <HAL_TIM_PWM_Start+0x120>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a2f      	ldr	r2, [pc, #188]	@ (8009f30 <HAL_TIM_PWM_Start+0x1d8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_PWM_Start+0x124>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <HAL_TIM_PWM_Start+0x126>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d007      	beq.n	8009e92 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a25      	ldr	r2, [pc, #148]	@ (8009f2c <HAL_TIM_PWM_Start+0x1d4>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d022      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ea4:	d01d      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a22      	ldr	r2, [pc, #136]	@ (8009f34 <HAL_TIM_PWM_Start+0x1dc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d018      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a20      	ldr	r2, [pc, #128]	@ (8009f38 <HAL_TIM_PWM_Start+0x1e0>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d013      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8009f3c <HAL_TIM_PWM_Start+0x1e4>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00e      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	@ (8009f30 <HAL_TIM_PWM_Start+0x1d8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d009      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f40 <HAL_TIM_PWM_Start+0x1e8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d004      	beq.n	8009ee2 <HAL_TIM_PWM_Start+0x18a>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <HAL_TIM_PWM_Start+0x1ec>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d115      	bne.n	8009f0e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	4b17      	ldr	r3, [pc, #92]	@ (8009f48 <HAL_TIM_PWM_Start+0x1f0>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b06      	cmp	r3, #6
 8009ef2:	d015      	beq.n	8009f20 <HAL_TIM_PWM_Start+0x1c8>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009efa:	d011      	beq.n	8009f20 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f0c:	e008      	b.n	8009f20 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0201 	orr.w	r2, r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e000      	b.n	8009f22 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40000400 	.word	0x40000400
 8009f38:	40000800 	.word	0x40000800
 8009f3c:	40000c00 	.word	0x40000c00
 8009f40:	40014000 	.word	0x40014000
 8009f44:	40001800 	.word	0x40001800
 8009f48:	00010007 	.word	0x00010007

08009f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d101      	bne.n	8009f6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f66:	2302      	movs	r3, #2
 8009f68:	e0ff      	b.n	800a16a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b14      	cmp	r3, #20
 8009f76:	f200 80f0 	bhi.w	800a15a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	08009fd5 	.word	0x08009fd5
 8009f84:	0800a15b 	.word	0x0800a15b
 8009f88:	0800a15b 	.word	0x0800a15b
 8009f8c:	0800a15b 	.word	0x0800a15b
 8009f90:	0800a015 	.word	0x0800a015
 8009f94:	0800a15b 	.word	0x0800a15b
 8009f98:	0800a15b 	.word	0x0800a15b
 8009f9c:	0800a15b 	.word	0x0800a15b
 8009fa0:	0800a057 	.word	0x0800a057
 8009fa4:	0800a15b 	.word	0x0800a15b
 8009fa8:	0800a15b 	.word	0x0800a15b
 8009fac:	0800a15b 	.word	0x0800a15b
 8009fb0:	0800a097 	.word	0x0800a097
 8009fb4:	0800a15b 	.word	0x0800a15b
 8009fb8:	0800a15b 	.word	0x0800a15b
 8009fbc:	0800a15b 	.word	0x0800a15b
 8009fc0:	0800a0d9 	.word	0x0800a0d9
 8009fc4:	0800a15b 	.word	0x0800a15b
 8009fc8:	0800a15b 	.word	0x0800a15b
 8009fcc:	0800a15b 	.word	0x0800a15b
 8009fd0:	0800a119 	.word	0x0800a119
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fa3a 	bl	800a454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699a      	ldr	r2, [r3, #24]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0208 	orr.w	r2, r2, #8
 8009fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 0204 	bic.w	r2, r2, #4
 8009ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6999      	ldr	r1, [r3, #24]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	691a      	ldr	r2, [r3, #16]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	619a      	str	r2, [r3, #24]
      break;
 800a012:	e0a5      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fa8c 	bl	800a538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699a      	ldr	r2, [r3, #24]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a02e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699a      	ldr	r2, [r3, #24]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a03e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6999      	ldr	r1, [r3, #24]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	021a      	lsls	r2, r3, #8
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	430a      	orrs	r2, r1
 800a052:	619a      	str	r2, [r3, #24]
      break;
 800a054:	e084      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 fae3 	bl	800a628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	69da      	ldr	r2, [r3, #28]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f042 0208 	orr.w	r2, r2, #8
 800a070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69da      	ldr	r2, [r3, #28]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0204 	bic.w	r2, r2, #4
 800a080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69d9      	ldr	r1, [r3, #28]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	61da      	str	r2, [r3, #28]
      break;
 800a094:	e064      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fb39 	bl	800a714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69da      	ldr	r2, [r3, #28]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69d9      	ldr	r1, [r3, #28]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	021a      	lsls	r2, r3, #8
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	61da      	str	r2, [r3, #28]
      break;
 800a0d6:	e043      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fb70 	bl	800a7c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0208 	orr.w	r2, r2, #8
 800a0f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0204 	bic.w	r2, r2, #4
 800a102:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a116:	e023      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fba2 	bl	800a868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a132:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a142:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	021a      	lsls	r2, r3, #8
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a158:	e002      	b.n	800a160 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
      break;
 800a15e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop

0800a174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_TIM_ConfigClockSource+0x1c>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e0b4      	b.n	800a2fa <HAL_TIM_ConfigClockSource+0x186>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	4b56      	ldr	r3, [pc, #344]	@ (800a304 <HAL_TIM_ConfigClockSource+0x190>)
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c8:	d03e      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0xd4>
 800a1ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ce:	f200 8087 	bhi.w	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d6:	f000 8086 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x172>
 800a1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1de:	d87f      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e0:	2b70      	cmp	r3, #112	@ 0x70
 800a1e2:	d01a      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0xa6>
 800a1e4:	2b70      	cmp	r3, #112	@ 0x70
 800a1e6:	d87b      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ea:	d050      	beq.n	800a28e <HAL_TIM_ConfigClockSource+0x11a>
 800a1ec:	2b60      	cmp	r3, #96	@ 0x60
 800a1ee:	d877      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f0:	2b50      	cmp	r3, #80	@ 0x50
 800a1f2:	d03c      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0xfa>
 800a1f4:	2b50      	cmp	r3, #80	@ 0x50
 800a1f6:	d873      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f8:	2b40      	cmp	r3, #64	@ 0x40
 800a1fa:	d058      	beq.n	800a2ae <HAL_TIM_ConfigClockSource+0x13a>
 800a1fc:	2b40      	cmp	r3, #64	@ 0x40
 800a1fe:	d86f      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a200:	2b30      	cmp	r3, #48	@ 0x30
 800a202:	d064      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x15a>
 800a204:	2b30      	cmp	r3, #48	@ 0x30
 800a206:	d86b      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d060      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x15a>
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d867      	bhi.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d05c      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x15a>
 800a214:	2b10      	cmp	r3, #16
 800a216:	d05a      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x15a>
 800a218:	e062      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a22a:	f000 fbeb 	bl	800aa04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a23c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	609a      	str	r2, [r3, #8]
      break;
 800a246:	e04f      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a258:	f000 fbd4 	bl	800aa04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a26a:	609a      	str	r2, [r3, #8]
      break;
 800a26c:	e03c      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a27a:	461a      	mov	r2, r3
 800a27c:	f000 fb48 	bl	800a910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2150      	movs	r1, #80	@ 0x50
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fba1 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 800a28c:	e02c      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a29a:	461a      	mov	r2, r3
 800a29c:	f000 fb67 	bl	800a96e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2160      	movs	r1, #96	@ 0x60
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fb91 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 800a2ac:	e01c      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f000 fb28 	bl	800a910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2140      	movs	r1, #64	@ 0x40
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fb81 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 800a2cc:	e00c      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	4610      	mov	r0, r2
 800a2da:	f000 fb78 	bl	800a9ce <TIM_ITRx_SetConfig>
      break;
 800a2de:	e003      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e4:	e000      	b.n	800a2e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	fffeff88 	.word	0xfffeff88

0800a308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a43      	ldr	r2, [pc, #268]	@ (800a428 <TIM_Base_SetConfig+0x120>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d013      	beq.n	800a348 <TIM_Base_SetConfig+0x40>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a326:	d00f      	beq.n	800a348 <TIM_Base_SetConfig+0x40>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a40      	ldr	r2, [pc, #256]	@ (800a42c <TIM_Base_SetConfig+0x124>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d00b      	beq.n	800a348 <TIM_Base_SetConfig+0x40>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a3f      	ldr	r2, [pc, #252]	@ (800a430 <TIM_Base_SetConfig+0x128>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d007      	beq.n	800a348 <TIM_Base_SetConfig+0x40>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a3e      	ldr	r2, [pc, #248]	@ (800a434 <TIM_Base_SetConfig+0x12c>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d003      	beq.n	800a348 <TIM_Base_SetConfig+0x40>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a3d      	ldr	r2, [pc, #244]	@ (800a438 <TIM_Base_SetConfig+0x130>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d108      	bne.n	800a35a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a34e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a32      	ldr	r2, [pc, #200]	@ (800a428 <TIM_Base_SetConfig+0x120>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d02b      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a368:	d027      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a2f      	ldr	r2, [pc, #188]	@ (800a42c <TIM_Base_SetConfig+0x124>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d023      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a2e      	ldr	r2, [pc, #184]	@ (800a430 <TIM_Base_SetConfig+0x128>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d01f      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a2d      	ldr	r2, [pc, #180]	@ (800a434 <TIM_Base_SetConfig+0x12c>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d01b      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a2c      	ldr	r2, [pc, #176]	@ (800a438 <TIM_Base_SetConfig+0x130>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d017      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a2b      	ldr	r2, [pc, #172]	@ (800a43c <TIM_Base_SetConfig+0x134>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d013      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a2a      	ldr	r2, [pc, #168]	@ (800a440 <TIM_Base_SetConfig+0x138>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d00f      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a29      	ldr	r2, [pc, #164]	@ (800a444 <TIM_Base_SetConfig+0x13c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00b      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a28      	ldr	r2, [pc, #160]	@ (800a448 <TIM_Base_SetConfig+0x140>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d007      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a27      	ldr	r2, [pc, #156]	@ (800a44c <TIM_Base_SetConfig+0x144>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d003      	beq.n	800a3ba <TIM_Base_SetConfig+0xb2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a26      	ldr	r2, [pc, #152]	@ (800a450 <TIM_Base_SetConfig+0x148>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d108      	bne.n	800a3cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a0e      	ldr	r2, [pc, #56]	@ (800a428 <TIM_Base_SetConfig+0x120>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d003      	beq.n	800a3fa <TIM_Base_SetConfig+0xf2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a10      	ldr	r2, [pc, #64]	@ (800a438 <TIM_Base_SetConfig+0x130>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d103      	bne.n	800a402 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	691a      	ldr	r2, [r3, #16]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f043 0204 	orr.w	r2, r3, #4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	601a      	str	r2, [r3, #0]
}
 800a41a:	bf00      	nop
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40010000 	.word	0x40010000
 800a42c:	40000400 	.word	0x40000400
 800a430:	40000800 	.word	0x40000800
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40010400 	.word	0x40010400
 800a43c:	40014000 	.word	0x40014000
 800a440:	40014400 	.word	0x40014400
 800a444:	40014800 	.word	0x40014800
 800a448:	40001800 	.word	0x40001800
 800a44c:	40001c00 	.word	0x40001c00
 800a450:	40002000 	.word	0x40002000

0800a454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	f023 0201 	bic.w	r2, r3, #1
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4b2b      	ldr	r3, [pc, #172]	@ (800a52c <TIM_OC1_SetConfig+0xd8>)
 800a480:	4013      	ands	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4313      	orrs	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f023 0302 	bic.w	r3, r3, #2
 800a49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a21      	ldr	r2, [pc, #132]	@ (800a530 <TIM_OC1_SetConfig+0xdc>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d003      	beq.n	800a4b8 <TIM_OC1_SetConfig+0x64>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a20      	ldr	r2, [pc, #128]	@ (800a534 <TIM_OC1_SetConfig+0xe0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d10c      	bne.n	800a4d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f023 0308 	bic.w	r3, r3, #8
 800a4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f023 0304 	bic.w	r3, r3, #4
 800a4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a16      	ldr	r2, [pc, #88]	@ (800a530 <TIM_OC1_SetConfig+0xdc>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d003      	beq.n	800a4e2 <TIM_OC1_SetConfig+0x8e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a15      	ldr	r2, [pc, #84]	@ (800a534 <TIM_OC1_SetConfig+0xe0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d111      	bne.n	800a506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	621a      	str	r2, [r3, #32]
}
 800a520:	bf00      	nop
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	fffeff8f 	.word	0xfffeff8f
 800a530:	40010000 	.word	0x40010000
 800a534:	40010400 	.word	0x40010400

0800a538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	f023 0210 	bic.w	r2, r3, #16
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4b2e      	ldr	r3, [pc, #184]	@ (800a61c <TIM_OC2_SetConfig+0xe4>)
 800a564:	4013      	ands	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0320 	bic.w	r3, r3, #32
 800a582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	011b      	lsls	r3, r3, #4
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a23      	ldr	r2, [pc, #140]	@ (800a620 <TIM_OC2_SetConfig+0xe8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d003      	beq.n	800a5a0 <TIM_OC2_SetConfig+0x68>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a22      	ldr	r2, [pc, #136]	@ (800a624 <TIM_OC2_SetConfig+0xec>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d10d      	bne.n	800a5bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a18      	ldr	r2, [pc, #96]	@ (800a620 <TIM_OC2_SetConfig+0xe8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC2_SetConfig+0x94>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a17      	ldr	r2, [pc, #92]	@ (800a624 <TIM_OC2_SetConfig+0xec>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d113      	bne.n	800a5f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	feff8fff 	.word	0xfeff8fff
 800a620:	40010000 	.word	0x40010000
 800a624:	40010400 	.word	0x40010400

0800a628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <TIM_OC3_SetConfig+0xe0>)
 800a654:	4013      	ands	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0303 	bic.w	r3, r3, #3
 800a65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a22      	ldr	r2, [pc, #136]	@ (800a70c <TIM_OC3_SetConfig+0xe4>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d003      	beq.n	800a68e <TIM_OC3_SetConfig+0x66>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a21      	ldr	r2, [pc, #132]	@ (800a710 <TIM_OC3_SetConfig+0xe8>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d10d      	bne.n	800a6aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a17      	ldr	r2, [pc, #92]	@ (800a70c <TIM_OC3_SetConfig+0xe4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_OC3_SetConfig+0x92>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a16      	ldr	r2, [pc, #88]	@ (800a710 <TIM_OC3_SetConfig+0xe8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d113      	bne.n	800a6e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	621a      	str	r2, [r3, #32]
}
 800a6fc:	bf00      	nop
 800a6fe:	371c      	adds	r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	fffeff8f 	.word	0xfffeff8f
 800a70c:	40010000 	.word	0x40010000
 800a710:	40010400 	.word	0x40010400

0800a714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a714:	b480      	push	{r7}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7b8 <TIM_OC4_SetConfig+0xa4>)
 800a740:	4013      	ands	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a75e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	031b      	lsls	r3, r3, #12
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a13      	ldr	r2, [pc, #76]	@ (800a7bc <TIM_OC4_SetConfig+0xa8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d003      	beq.n	800a77c <TIM_OC4_SetConfig+0x68>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a12      	ldr	r2, [pc, #72]	@ (800a7c0 <TIM_OC4_SetConfig+0xac>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d109      	bne.n	800a790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	019b      	lsls	r3, r3, #6
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	feff8fff 	.word	0xfeff8fff
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40010400 	.word	0x40010400

0800a7c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a85c <TIM_OC5_SetConfig+0x98>)
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	041b      	lsls	r3, r3, #16
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	4313      	orrs	r3, r2
 800a810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a12      	ldr	r2, [pc, #72]	@ (800a860 <TIM_OC5_SetConfig+0x9c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d003      	beq.n	800a822 <TIM_OC5_SetConfig+0x5e>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a11      	ldr	r2, [pc, #68]	@ (800a864 <TIM_OC5_SetConfig+0xa0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d109      	bne.n	800a836 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	621a      	str	r2, [r3, #32]
}
 800a850:	bf00      	nop
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	fffeff8f 	.word	0xfffeff8f
 800a860:	40010000 	.word	0x40010000
 800a864:	40010400 	.word	0x40010400

0800a868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4b1c      	ldr	r3, [pc, #112]	@ (800a904 <TIM_OC6_SetConfig+0x9c>)
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	051b      	lsls	r3, r3, #20
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a13      	ldr	r2, [pc, #76]	@ (800a908 <TIM_OC6_SetConfig+0xa0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d003      	beq.n	800a8c8 <TIM_OC6_SetConfig+0x60>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a12      	ldr	r2, [pc, #72]	@ (800a90c <TIM_OC6_SetConfig+0xa4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d109      	bne.n	800a8dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a8ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	029b      	lsls	r3, r3, #10
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	621a      	str	r2, [r3, #32]
}
 800a8f6:	bf00      	nop
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	feff8fff 	.word	0xfeff8fff
 800a908:	40010000 	.word	0x40010000
 800a90c:	40010400 	.word	0x40010400

0800a910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	f023 0201 	bic.w	r2, r3, #1
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a93a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	011b      	lsls	r3, r3, #4
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	4313      	orrs	r3, r2
 800a944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f023 030a 	bic.w	r3, r3, #10
 800a94c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	4313      	orrs	r3, r2
 800a954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a96e:	b480      	push	{r7}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	f023 0210 	bic.w	r2, r3, #16
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	031b      	lsls	r3, r3, #12
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	621a      	str	r2, [r3, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	f043 0307 	orr.w	r3, r3, #7
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	609a      	str	r2, [r3, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	021a      	lsls	r2, r3, #8
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	609a      	str	r2, [r3, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	2201      	movs	r2, #1
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a1a      	ldr	r2, [r3, #32]
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	43db      	mvns	r3, r3
 800aa66:	401a      	ands	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f003 031f 	and.w	r3, r3, #31
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	621a      	str	r2, [r3, #32]
}
 800aa82:	bf00      	nop
 800aa84:	371c      	adds	r7, #28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d101      	bne.n	800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e06d      	b.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a30      	ldr	r2, [pc, #192]	@ (800ab90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a2f      	ldr	r2, [pc, #188]	@ (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d108      	bne.n	800aaee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a20      	ldr	r2, [pc, #128]	@ (800ab90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d022      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab1a:	d01d      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1d      	ldr	r2, [pc, #116]	@ (800ab98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d018      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1c      	ldr	r2, [pc, #112]	@ (800ab9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d013      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1a      	ldr	r2, [pc, #104]	@ (800aba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d00e      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a15      	ldr	r2, [pc, #84]	@ (800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d009      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a16      	ldr	r2, [pc, #88]	@ (800aba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d004      	beq.n	800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a15      	ldr	r2, [pc, #84]	@ (800aba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d10c      	bne.n	800ab72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40010400 	.word	0x40010400
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40014000 	.word	0x40014000
 800aba8:	40001800 	.word	0x40001800

0800abac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e040      	b.n	800ac40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7f9 f9a8 	bl	8003f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2224      	movs	r2, #36	@ 0x24
 800abd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 0201 	bic.w	r2, r2, #1
 800abe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fe50 	bl	800b898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fbe9 	bl	800b3d0 <UART_SetConfig>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d101      	bne.n	800ac08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e01b      	b.n	800ac40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689a      	ldr	r2, [r3, #8]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fecf 	bl	800b9dc <UART_CheckIdleState>
 800ac3e:	4603      	mov	r3, r0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b09a      	sub	sp, #104	@ 0x68
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac64:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac70:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ac7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e6      	bne.n	800ac50 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aca2:	643a      	str	r2, [r7, #64]	@ 0x40
 800aca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d118      	bne.n	800acf0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	e853 3f00 	ldrex	r3, [r3]
 800acca:	61fb      	str	r3, [r7, #28]
   return(result);
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f023 0310 	bic.w	r3, r3, #16
 800acd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ace2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace4:	e841 2300 	strex	r3, r2, [r1]
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e6      	bne.n	800acbe <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfa:	2b40      	cmp	r3, #64	@ 0x40
 800acfc:	d137      	bne.n	800ad6e <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad14:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad1e:	61ba      	str	r2, [r7, #24]
 800ad20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6979      	ldr	r1, [r7, #20]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e5      	bne.n	800acfe <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d019      	beq.n	800ad6e <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad3e:	2200      	movs	r2, #0
 800ad40:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fa fb22 	bl	8005390 <HAL_DMA_Abort>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00d      	beq.n	800ad6e <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fa fd36 	bl	80057c8 <HAL_DMA_GetError>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b20      	cmp	r3, #32
 800ad60:	d105      	bne.n	800ad6e <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2210      	movs	r2, #16
 800ad66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e017      	b.n	800ad9e <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	220f      	movs	r2, #15
 800ad7c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699a      	ldr	r2, [r3, #24]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f042 0208 	orr.w	r2, r2, #8
 800ad8c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3768      	adds	r7, #104	@ 0x68
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b0ba      	sub	sp, #232	@ 0xe8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800adce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800add2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800add6:	4013      	ands	r3, r2
 800add8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800addc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d115      	bne.n	800ae10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ade4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade8:	f003 0320 	and.w	r3, r3, #32
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00f      	beq.n	800ae10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 82b1 	beq.w	800b368 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
      }
      return;
 800ae0e:	e2ab      	b.n	800b368 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 8117 	beq.w	800b048 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d106      	bne.n	800ae34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ae2a:	4b85      	ldr	r3, [pc, #532]	@ (800b040 <HAL_UART_IRQHandler+0x298>)
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 810a 	beq.w	800b048 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d011      	beq.n	800ae64 <HAL_UART_IRQHandler+0xbc>
 800ae40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2201      	movs	r2, #1
 800ae52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae5a:	f043 0201 	orr.w	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d011      	beq.n	800ae94 <HAL_UART_IRQHandler+0xec>
 800ae70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2202      	movs	r2, #2
 800ae82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae8a:	f043 0204 	orr.w	r2, r3, #4
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d011      	beq.n	800aec4 <HAL_UART_IRQHandler+0x11c>
 800aea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00b      	beq.n	800aec4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2204      	movs	r2, #4
 800aeb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeba:	f043 0202 	orr.w	r2, r3, #2
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d017      	beq.n	800af00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d105      	bne.n	800aee8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aee0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2208      	movs	r2, #8
 800aeee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aef6:	f043 0208 	orr.w	r2, r3, #8
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d012      	beq.n	800af32 <HAL_UART_IRQHandler+0x18a>
 800af0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00c      	beq.n	800af32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af28:	f043 0220 	orr.w	r2, r3, #32
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8217 	beq.w	800b36c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00d      	beq.n	800af66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b00      	cmp	r3, #0
 800af54:	d007      	beq.n	800af66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7a:	2b40      	cmp	r3, #64	@ 0x40
 800af7c:	d005      	beq.n	800af8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af86:	2b00      	cmp	r3, #0
 800af88:	d04f      	beq.n	800b02a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 feb0 	bl	800bcf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9a:	2b40      	cmp	r3, #64	@ 0x40
 800af9c:	d141      	bne.n	800b022 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800afd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800afe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1d9      	bne.n	800af9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d013      	beq.n	800b01a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aff6:	4a13      	ldr	r2, [pc, #76]	@ (800b044 <HAL_UART_IRQHandler+0x29c>)
 800aff8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800affe:	4618      	mov	r0, r3
 800b000:	f7fa fa36 	bl	8005470 <HAL_DMA_Abort_IT>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d017      	beq.n	800b03a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b018:	e00f      	b.n	800b03a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f9ce 	bl	800b3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b020:	e00b      	b.n	800b03a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f9ca 	bl	800b3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b028:	e007      	b.n	800b03a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f9c6 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b038:	e198      	b.n	800b36c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b03a:	bf00      	nop
    return;
 800b03c:	e196      	b.n	800b36c <HAL_UART_IRQHandler+0x5c4>
 800b03e:	bf00      	nop
 800b040:	04000120 	.word	0x04000120
 800b044:	0800c007 	.word	0x0800c007

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	f040 8166 	bne.w	800b31e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b056:	f003 0310 	and.w	r3, r3, #16
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 815f 	beq.w	800b31e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8158 	beq.w	800b31e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2210      	movs	r2, #16
 800b074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b080:	2b40      	cmp	r3, #64	@ 0x40
 800b082:	f040 80d0 	bne.w	800b226 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b092:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 80ab 	beq.w	800b1f2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	f080 80a3 	bcs.w	800b1f2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0c0:	f000 8086 	beq.w	800b1d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1da      	bne.n	800b0c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3308      	adds	r3, #8
 800b114:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b11e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b120:	f023 0301 	bic.w	r3, r3, #1
 800b124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3308      	adds	r3, #8
 800b12e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b132:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b136:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b13a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e1      	bne.n	800b10e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3308      	adds	r3, #8
 800b150:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b15a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b15c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3308      	adds	r3, #8
 800b16a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b16e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b170:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b174:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b17c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e3      	bne.n	800b14a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b198:	e853 3f00 	ldrex	r3, [r3]
 800b19c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b19e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1a0:	f023 0310 	bic.w	r3, r3, #16
 800b1a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e4      	bne.n	800b190 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fa f8e0 	bl	8005390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7f7 feae 	bl	8002f4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b1f0:	e0be      	b.n	800b370 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b1f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	f040 80b7 	bne.w	800b370 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b20c:	f040 80b0 	bne.w	800b370 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7f7 fe94 	bl	8002f4c <HAL_UARTEx_RxEventCallback>
      return;
 800b224:	e0a4      	b.n	800b370 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b232:	b29b      	uxth	r3, r3
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b240:	b29b      	uxth	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 8096 	beq.w	800b374 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 8091 	beq.w	800b374 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b274:	647b      	str	r3, [r7, #68]	@ 0x44
 800b276:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e4      	bne.n	800b252 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3308      	adds	r3, #8
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	e853 3f00 	ldrex	r3, [r3]
 800b296:	623b      	str	r3, [r7, #32]
   return(result);
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e3      	bne.n	800b288 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f023 0310 	bic.w	r3, r3, #16
 800b2e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b2f6:	61fb      	str	r3, [r7, #28]
 800b2f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fa:	69b9      	ldr	r1, [r7, #24]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	617b      	str	r3, [r7, #20]
   return(result);
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e4      	bne.n	800b2d4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7f7 fe18 	bl	8002f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b31c:	e02a      	b.n	800b374 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00e      	beq.n	800b348 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b00      	cmp	r3, #0
 800b334:	d008      	beq.n	800b348 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d01c      	beq.n	800b378 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
    }
    return;
 800b346:	e017      	b.n	800b378 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d012      	beq.n	800b37a <HAL_UART_IRQHandler+0x5d2>
 800b354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00c      	beq.n	800b37a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fe62 	bl	800c02a <UART_EndTransmit_IT>
    return;
 800b366:	e008      	b.n	800b37a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b368:	bf00      	nop
 800b36a:	e006      	b.n	800b37a <HAL_UART_IRQHandler+0x5d2>
    return;
 800b36c:	bf00      	nop
 800b36e:	e004      	b.n	800b37a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b370:	bf00      	nop
 800b372:	e002      	b.n	800b37a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <HAL_UART_IRQHandler+0x5d2>
    return;
 800b378:	bf00      	nop
  }

}
 800b37a:	37e8      	adds	r7, #232	@ 0xe8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4ba6      	ldr	r3, [pc, #664]	@ (800b694 <UART_SetConfig+0x2c4>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	6979      	ldr	r1, [r7, #20]
 800b404:	430b      	orrs	r3, r1
 800b406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68da      	ldr	r2, [r3, #12]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	430a      	orrs	r2, r1
 800b440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a94      	ldr	r2, [pc, #592]	@ (800b698 <UART_SetConfig+0x2c8>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d120      	bne.n	800b48e <UART_SetConfig+0xbe>
 800b44c:	4b93      	ldr	r3, [pc, #588]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d816      	bhi.n	800b488 <UART_SetConfig+0xb8>
 800b45a:	a201      	add	r2, pc, #4	@ (adr r2, 800b460 <UART_SetConfig+0x90>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b471 	.word	0x0800b471
 800b464:	0800b47d 	.word	0x0800b47d
 800b468:	0800b477 	.word	0x0800b477
 800b46c:	0800b483 	.word	0x0800b483
 800b470:	2301      	movs	r3, #1
 800b472:	77fb      	strb	r3, [r7, #31]
 800b474:	e150      	b.n	800b718 <UART_SetConfig+0x348>
 800b476:	2302      	movs	r3, #2
 800b478:	77fb      	strb	r3, [r7, #31]
 800b47a:	e14d      	b.n	800b718 <UART_SetConfig+0x348>
 800b47c:	2304      	movs	r3, #4
 800b47e:	77fb      	strb	r3, [r7, #31]
 800b480:	e14a      	b.n	800b718 <UART_SetConfig+0x348>
 800b482:	2308      	movs	r3, #8
 800b484:	77fb      	strb	r3, [r7, #31]
 800b486:	e147      	b.n	800b718 <UART_SetConfig+0x348>
 800b488:	2310      	movs	r3, #16
 800b48a:	77fb      	strb	r3, [r7, #31]
 800b48c:	e144      	b.n	800b718 <UART_SetConfig+0x348>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a83      	ldr	r2, [pc, #524]	@ (800b6a0 <UART_SetConfig+0x2d0>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d132      	bne.n	800b4fe <UART_SetConfig+0x12e>
 800b498:	4b80      	ldr	r3, [pc, #512]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49e:	f003 030c 	and.w	r3, r3, #12
 800b4a2:	2b0c      	cmp	r3, #12
 800b4a4:	d828      	bhi.n	800b4f8 <UART_SetConfig+0x128>
 800b4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ac <UART_SetConfig+0xdc>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b4e1 	.word	0x0800b4e1
 800b4b0:	0800b4f9 	.word	0x0800b4f9
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4ed 	.word	0x0800b4ed
 800b4c0:	0800b4f9 	.word	0x0800b4f9
 800b4c4:	0800b4f9 	.word	0x0800b4f9
 800b4c8:	0800b4f9 	.word	0x0800b4f9
 800b4cc:	0800b4e7 	.word	0x0800b4e7
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b4f9 	.word	0x0800b4f9
 800b4dc:	0800b4f3 	.word	0x0800b4f3
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	77fb      	strb	r3, [r7, #31]
 800b4e4:	e118      	b.n	800b718 <UART_SetConfig+0x348>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	77fb      	strb	r3, [r7, #31]
 800b4ea:	e115      	b.n	800b718 <UART_SetConfig+0x348>
 800b4ec:	2304      	movs	r3, #4
 800b4ee:	77fb      	strb	r3, [r7, #31]
 800b4f0:	e112      	b.n	800b718 <UART_SetConfig+0x348>
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	77fb      	strb	r3, [r7, #31]
 800b4f6:	e10f      	b.n	800b718 <UART_SetConfig+0x348>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	77fb      	strb	r3, [r7, #31]
 800b4fc:	e10c      	b.n	800b718 <UART_SetConfig+0x348>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a68      	ldr	r2, [pc, #416]	@ (800b6a4 <UART_SetConfig+0x2d4>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d120      	bne.n	800b54a <UART_SetConfig+0x17a>
 800b508:	4b64      	ldr	r3, [pc, #400]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b50e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b512:	2b30      	cmp	r3, #48	@ 0x30
 800b514:	d013      	beq.n	800b53e <UART_SetConfig+0x16e>
 800b516:	2b30      	cmp	r3, #48	@ 0x30
 800b518:	d814      	bhi.n	800b544 <UART_SetConfig+0x174>
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d009      	beq.n	800b532 <UART_SetConfig+0x162>
 800b51e:	2b20      	cmp	r3, #32
 800b520:	d810      	bhi.n	800b544 <UART_SetConfig+0x174>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <UART_SetConfig+0x15c>
 800b526:	2b10      	cmp	r3, #16
 800b528:	d006      	beq.n	800b538 <UART_SetConfig+0x168>
 800b52a:	e00b      	b.n	800b544 <UART_SetConfig+0x174>
 800b52c:	2300      	movs	r3, #0
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	e0f2      	b.n	800b718 <UART_SetConfig+0x348>
 800b532:	2302      	movs	r3, #2
 800b534:	77fb      	strb	r3, [r7, #31]
 800b536:	e0ef      	b.n	800b718 <UART_SetConfig+0x348>
 800b538:	2304      	movs	r3, #4
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e0ec      	b.n	800b718 <UART_SetConfig+0x348>
 800b53e:	2308      	movs	r3, #8
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e0e9      	b.n	800b718 <UART_SetConfig+0x348>
 800b544:	2310      	movs	r3, #16
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e0e6      	b.n	800b718 <UART_SetConfig+0x348>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a56      	ldr	r2, [pc, #344]	@ (800b6a8 <UART_SetConfig+0x2d8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d120      	bne.n	800b596 <UART_SetConfig+0x1c6>
 800b554:	4b51      	ldr	r3, [pc, #324]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b55a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b55e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b560:	d013      	beq.n	800b58a <UART_SetConfig+0x1ba>
 800b562:	2bc0      	cmp	r3, #192	@ 0xc0
 800b564:	d814      	bhi.n	800b590 <UART_SetConfig+0x1c0>
 800b566:	2b80      	cmp	r3, #128	@ 0x80
 800b568:	d009      	beq.n	800b57e <UART_SetConfig+0x1ae>
 800b56a:	2b80      	cmp	r3, #128	@ 0x80
 800b56c:	d810      	bhi.n	800b590 <UART_SetConfig+0x1c0>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <UART_SetConfig+0x1a8>
 800b572:	2b40      	cmp	r3, #64	@ 0x40
 800b574:	d006      	beq.n	800b584 <UART_SetConfig+0x1b4>
 800b576:	e00b      	b.n	800b590 <UART_SetConfig+0x1c0>
 800b578:	2300      	movs	r3, #0
 800b57a:	77fb      	strb	r3, [r7, #31]
 800b57c:	e0cc      	b.n	800b718 <UART_SetConfig+0x348>
 800b57e:	2302      	movs	r3, #2
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	e0c9      	b.n	800b718 <UART_SetConfig+0x348>
 800b584:	2304      	movs	r3, #4
 800b586:	77fb      	strb	r3, [r7, #31]
 800b588:	e0c6      	b.n	800b718 <UART_SetConfig+0x348>
 800b58a:	2308      	movs	r3, #8
 800b58c:	77fb      	strb	r3, [r7, #31]
 800b58e:	e0c3      	b.n	800b718 <UART_SetConfig+0x348>
 800b590:	2310      	movs	r3, #16
 800b592:	77fb      	strb	r3, [r7, #31]
 800b594:	e0c0      	b.n	800b718 <UART_SetConfig+0x348>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a44      	ldr	r2, [pc, #272]	@ (800b6ac <UART_SetConfig+0x2dc>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d125      	bne.n	800b5ec <UART_SetConfig+0x21c>
 800b5a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5ae:	d017      	beq.n	800b5e0 <UART_SetConfig+0x210>
 800b5b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5b4:	d817      	bhi.n	800b5e6 <UART_SetConfig+0x216>
 800b5b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ba:	d00b      	beq.n	800b5d4 <UART_SetConfig+0x204>
 800b5bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5c0:	d811      	bhi.n	800b5e6 <UART_SetConfig+0x216>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <UART_SetConfig+0x1fe>
 800b5c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ca:	d006      	beq.n	800b5da <UART_SetConfig+0x20a>
 800b5cc:	e00b      	b.n	800b5e6 <UART_SetConfig+0x216>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	77fb      	strb	r3, [r7, #31]
 800b5d2:	e0a1      	b.n	800b718 <UART_SetConfig+0x348>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	77fb      	strb	r3, [r7, #31]
 800b5d8:	e09e      	b.n	800b718 <UART_SetConfig+0x348>
 800b5da:	2304      	movs	r3, #4
 800b5dc:	77fb      	strb	r3, [r7, #31]
 800b5de:	e09b      	b.n	800b718 <UART_SetConfig+0x348>
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	77fb      	strb	r3, [r7, #31]
 800b5e4:	e098      	b.n	800b718 <UART_SetConfig+0x348>
 800b5e6:	2310      	movs	r3, #16
 800b5e8:	77fb      	strb	r3, [r7, #31]
 800b5ea:	e095      	b.n	800b718 <UART_SetConfig+0x348>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a2f      	ldr	r2, [pc, #188]	@ (800b6b0 <UART_SetConfig+0x2e0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d125      	bne.n	800b642 <UART_SetConfig+0x272>
 800b5f6:	4b29      	ldr	r3, [pc, #164]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b600:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b604:	d017      	beq.n	800b636 <UART_SetConfig+0x266>
 800b606:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b60a:	d817      	bhi.n	800b63c <UART_SetConfig+0x26c>
 800b60c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b610:	d00b      	beq.n	800b62a <UART_SetConfig+0x25a>
 800b612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b616:	d811      	bhi.n	800b63c <UART_SetConfig+0x26c>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <UART_SetConfig+0x254>
 800b61c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b620:	d006      	beq.n	800b630 <UART_SetConfig+0x260>
 800b622:	e00b      	b.n	800b63c <UART_SetConfig+0x26c>
 800b624:	2301      	movs	r3, #1
 800b626:	77fb      	strb	r3, [r7, #31]
 800b628:	e076      	b.n	800b718 <UART_SetConfig+0x348>
 800b62a:	2302      	movs	r3, #2
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e073      	b.n	800b718 <UART_SetConfig+0x348>
 800b630:	2304      	movs	r3, #4
 800b632:	77fb      	strb	r3, [r7, #31]
 800b634:	e070      	b.n	800b718 <UART_SetConfig+0x348>
 800b636:	2308      	movs	r3, #8
 800b638:	77fb      	strb	r3, [r7, #31]
 800b63a:	e06d      	b.n	800b718 <UART_SetConfig+0x348>
 800b63c:	2310      	movs	r3, #16
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e06a      	b.n	800b718 <UART_SetConfig+0x348>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a1b      	ldr	r2, [pc, #108]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d138      	bne.n	800b6be <UART_SetConfig+0x2ee>
 800b64c:	4b13      	ldr	r3, [pc, #76]	@ (800b69c <UART_SetConfig+0x2cc>)
 800b64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b652:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b65a:	d017      	beq.n	800b68c <UART_SetConfig+0x2bc>
 800b65c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b660:	d82a      	bhi.n	800b6b8 <UART_SetConfig+0x2e8>
 800b662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b666:	d00b      	beq.n	800b680 <UART_SetConfig+0x2b0>
 800b668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b66c:	d824      	bhi.n	800b6b8 <UART_SetConfig+0x2e8>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <UART_SetConfig+0x2aa>
 800b672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b676:	d006      	beq.n	800b686 <UART_SetConfig+0x2b6>
 800b678:	e01e      	b.n	800b6b8 <UART_SetConfig+0x2e8>
 800b67a:	2300      	movs	r3, #0
 800b67c:	77fb      	strb	r3, [r7, #31]
 800b67e:	e04b      	b.n	800b718 <UART_SetConfig+0x348>
 800b680:	2302      	movs	r3, #2
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e048      	b.n	800b718 <UART_SetConfig+0x348>
 800b686:	2304      	movs	r3, #4
 800b688:	77fb      	strb	r3, [r7, #31]
 800b68a:	e045      	b.n	800b718 <UART_SetConfig+0x348>
 800b68c:	2308      	movs	r3, #8
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e042      	b.n	800b718 <UART_SetConfig+0x348>
 800b692:	bf00      	nop
 800b694:	efff69f3 	.word	0xefff69f3
 800b698:	40011000 	.word	0x40011000
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	40004400 	.word	0x40004400
 800b6a4:	40004800 	.word	0x40004800
 800b6a8:	40004c00 	.word	0x40004c00
 800b6ac:	40005000 	.word	0x40005000
 800b6b0:	40011400 	.word	0x40011400
 800b6b4:	40007800 	.word	0x40007800
 800b6b8:	2310      	movs	r3, #16
 800b6ba:	77fb      	strb	r3, [r7, #31]
 800b6bc:	e02c      	b.n	800b718 <UART_SetConfig+0x348>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a72      	ldr	r2, [pc, #456]	@ (800b88c <UART_SetConfig+0x4bc>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d125      	bne.n	800b714 <UART_SetConfig+0x344>
 800b6c8:	4b71      	ldr	r3, [pc, #452]	@ (800b890 <UART_SetConfig+0x4c0>)
 800b6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b6d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b6d6:	d017      	beq.n	800b708 <UART_SetConfig+0x338>
 800b6d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b6dc:	d817      	bhi.n	800b70e <UART_SetConfig+0x33e>
 800b6de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6e2:	d00b      	beq.n	800b6fc <UART_SetConfig+0x32c>
 800b6e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6e8:	d811      	bhi.n	800b70e <UART_SetConfig+0x33e>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <UART_SetConfig+0x326>
 800b6ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6f2:	d006      	beq.n	800b702 <UART_SetConfig+0x332>
 800b6f4:	e00b      	b.n	800b70e <UART_SetConfig+0x33e>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	77fb      	strb	r3, [r7, #31]
 800b6fa:	e00d      	b.n	800b718 <UART_SetConfig+0x348>
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	77fb      	strb	r3, [r7, #31]
 800b700:	e00a      	b.n	800b718 <UART_SetConfig+0x348>
 800b702:	2304      	movs	r3, #4
 800b704:	77fb      	strb	r3, [r7, #31]
 800b706:	e007      	b.n	800b718 <UART_SetConfig+0x348>
 800b708:	2308      	movs	r3, #8
 800b70a:	77fb      	strb	r3, [r7, #31]
 800b70c:	e004      	b.n	800b718 <UART_SetConfig+0x348>
 800b70e:	2310      	movs	r3, #16
 800b710:	77fb      	strb	r3, [r7, #31]
 800b712:	e001      	b.n	800b718 <UART_SetConfig+0x348>
 800b714:	2310      	movs	r3, #16
 800b716:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b720:	d15b      	bne.n	800b7da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b722:	7ffb      	ldrb	r3, [r7, #31]
 800b724:	2b08      	cmp	r3, #8
 800b726:	d828      	bhi.n	800b77a <UART_SetConfig+0x3aa>
 800b728:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <UART_SetConfig+0x360>)
 800b72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b755 	.word	0x0800b755
 800b734:	0800b75d 	.word	0x0800b75d
 800b738:	0800b765 	.word	0x0800b765
 800b73c:	0800b77b 	.word	0x0800b77b
 800b740:	0800b76b 	.word	0x0800b76b
 800b744:	0800b77b 	.word	0x0800b77b
 800b748:	0800b77b 	.word	0x0800b77b
 800b74c:	0800b77b 	.word	0x0800b77b
 800b750:	0800b773 	.word	0x0800b773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b754:	f7fc fbbc 	bl	8007ed0 <HAL_RCC_GetPCLK1Freq>
 800b758:	61b8      	str	r0, [r7, #24]
        break;
 800b75a:	e013      	b.n	800b784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b75c:	f7fc fbcc 	bl	8007ef8 <HAL_RCC_GetPCLK2Freq>
 800b760:	61b8      	str	r0, [r7, #24]
        break;
 800b762:	e00f      	b.n	800b784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b764:	4b4b      	ldr	r3, [pc, #300]	@ (800b894 <UART_SetConfig+0x4c4>)
 800b766:	61bb      	str	r3, [r7, #24]
        break;
 800b768:	e00c      	b.n	800b784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b76a:	f7fc fa9f 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800b76e:	61b8      	str	r0, [r7, #24]
        break;
 800b770:	e008      	b.n	800b784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b776:	61bb      	str	r3, [r7, #24]
        break;
 800b778:	e004      	b.n	800b784 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	77bb      	strb	r3, [r7, #30]
        break;
 800b782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d074      	beq.n	800b874 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	005a      	lsls	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	085b      	lsrs	r3, r3, #1
 800b794:	441a      	add	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	2b0f      	cmp	r3, #15
 800b7a4:	d916      	bls.n	800b7d4 <UART_SetConfig+0x404>
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7ac:	d212      	bcs.n	800b7d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f023 030f 	bic.w	r3, r3, #15
 800b7b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	89fb      	ldrh	r3, [r7, #14]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	89fa      	ldrh	r2, [r7, #14]
 800b7d0:	60da      	str	r2, [r3, #12]
 800b7d2:	e04f      	b.n	800b874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	77bb      	strb	r3, [r7, #30]
 800b7d8:	e04c      	b.n	800b874 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7da:	7ffb      	ldrb	r3, [r7, #31]
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d828      	bhi.n	800b832 <UART_SetConfig+0x462>
 800b7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e8 <UART_SetConfig+0x418>)
 800b7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e6:	bf00      	nop
 800b7e8:	0800b80d 	.word	0x0800b80d
 800b7ec:	0800b815 	.word	0x0800b815
 800b7f0:	0800b81d 	.word	0x0800b81d
 800b7f4:	0800b833 	.word	0x0800b833
 800b7f8:	0800b823 	.word	0x0800b823
 800b7fc:	0800b833 	.word	0x0800b833
 800b800:	0800b833 	.word	0x0800b833
 800b804:	0800b833 	.word	0x0800b833
 800b808:	0800b82b 	.word	0x0800b82b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b80c:	f7fc fb60 	bl	8007ed0 <HAL_RCC_GetPCLK1Freq>
 800b810:	61b8      	str	r0, [r7, #24]
        break;
 800b812:	e013      	b.n	800b83c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b814:	f7fc fb70 	bl	8007ef8 <HAL_RCC_GetPCLK2Freq>
 800b818:	61b8      	str	r0, [r7, #24]
        break;
 800b81a:	e00f      	b.n	800b83c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b81c:	4b1d      	ldr	r3, [pc, #116]	@ (800b894 <UART_SetConfig+0x4c4>)
 800b81e:	61bb      	str	r3, [r7, #24]
        break;
 800b820:	e00c      	b.n	800b83c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b822:	f7fc fa43 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800b826:	61b8      	str	r0, [r7, #24]
        break;
 800b828:	e008      	b.n	800b83c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b82a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b82e:	61bb      	str	r3, [r7, #24]
        break;
 800b830:	e004      	b.n	800b83c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	77bb      	strb	r3, [r7, #30]
        break;
 800b83a:	bf00      	nop
    }

    if (pclk != 0U)
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d018      	beq.n	800b874 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	085a      	lsrs	r2, r3, #1
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	441a      	add	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	fbb2 f3f3 	udiv	r3, r2, r3
 800b854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2b0f      	cmp	r3, #15
 800b85a:	d909      	bls.n	800b870 <UART_SetConfig+0x4a0>
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b862:	d205      	bcs.n	800b870 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60da      	str	r2, [r3, #12]
 800b86e:	e001      	b.n	800b874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b880:	7fbb      	ldrb	r3, [r7, #30]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3720      	adds	r7, #32
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	40007c00 	.word	0x40007c00
 800b890:	40023800 	.word	0x40023800
 800b894:	00f42400 	.word	0x00f42400

0800b898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a4:	f003 0308 	and.w	r3, r3, #8
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90a:	f003 0304 	and.w	r3, r3, #4
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94e:	f003 0320 	and.w	r3, r3, #32
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01a      	beq.n	800b9ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b996:	d10a      	bne.n	800b9ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	605a      	str	r2, [r3, #4]
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08c      	sub	sp, #48	@ 0x30
 800b9e0:	af02      	add	r7, sp, #8
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9ec:	f7f8 fdd2 	bl	8004594 <HAL_GetTick>
 800b9f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0308 	and.w	r3, r3, #8
 800b9fc:	2b08      	cmp	r3, #8
 800b9fe:	d12e      	bne.n	800ba5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f83b 	bl	800ba8a <UART_WaitOnFlagUntilTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d021      	beq.n	800ba5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba2e:	623b      	str	r3, [r7, #32]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3c:	69b9      	ldr	r1, [r7, #24]
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	e841 2300 	strex	r3, r2, [r1]
 800ba44:	617b      	str	r3, [r7, #20]
   return(result);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e6      	bne.n	800ba1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e011      	b.n	800ba82 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3728      	adds	r7, #40	@ 0x28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	603b      	str	r3, [r7, #0]
 800ba96:	4613      	mov	r3, r2
 800ba98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba9a:	e04f      	b.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d04b      	beq.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baa4:	f7f8 fd76 	bl	8004594 <HAL_GetTick>
 800baa8:	4602      	mov	r2, r0
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d302      	bcc.n	800baba <UART_WaitOnFlagUntilTimeout+0x30>
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e04e      	b.n	800bb5c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d037      	beq.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b80      	cmp	r3, #128	@ 0x80
 800bad0:	d034      	beq.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2b40      	cmp	r3, #64	@ 0x40
 800bad6:	d031      	beq.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b08      	cmp	r3, #8
 800bae4:	d110      	bne.n	800bb08 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2208      	movs	r2, #8
 800baec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f8fe 	bl	800bcf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2208      	movs	r2, #8
 800baf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e029      	b.n	800bb5c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb16:	d111      	bne.n	800bb3c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 f8e4 	bl	800bcf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e00f      	b.n	800bb5c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69da      	ldr	r2, [r3, #28]
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	4013      	ands	r3, r2
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2301      	moveq	r3, #1
 800bb4e:	2300      	movne	r3, #0
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	79fb      	ldrb	r3, [r7, #7]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d0a0      	beq.n	800ba9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b096      	sub	sp, #88	@ 0x58
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	88fa      	ldrh	r2, [r7, #6]
 800bb7c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2222      	movs	r2, #34	@ 0x22
 800bb8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d028      	beq.n	800bbea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb9c:	4a3e      	ldr	r2, [pc, #248]	@ (800bc98 <UART_Start_Receive_DMA+0x134>)
 800bb9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bba4:	4a3d      	ldr	r2, [pc, #244]	@ (800bc9c <UART_Start_Receive_DMA+0x138>)
 800bba6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbac:	4a3c      	ldr	r2, [pc, #240]	@ (800bca0 <UART_Start_Receive_DMA+0x13c>)
 800bbae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3324      	adds	r3, #36	@ 0x24
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc8:	461a      	mov	r2, r3
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	f7f9 fb80 	bl	80052d0 <HAL_DMA_Start_IT>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2210      	movs	r2, #16
 800bbda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e051      	b.n	800bc8e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d018      	beq.n	800bc24 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc06:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bc1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e6      	bne.n	800bbf2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc36:	f043 0301 	orr.w	r3, r3, #1
 800bc3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3308      	adds	r3, #8
 800bc42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc44:	637a      	str	r2, [r7, #52]	@ 0x34
 800bc46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e5      	bne.n	800bc24 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	613b      	str	r3, [r7, #16]
   return(result);
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3308      	adds	r3, #8
 800bc76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc78:	623a      	str	r2, [r7, #32]
 800bc7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7c:	69f9      	ldr	r1, [r7, #28]
 800bc7e:	6a3a      	ldr	r2, [r7, #32]
 800bc80:	e841 2300 	strex	r3, r2, [r1]
 800bc84:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e5      	bne.n	800bc58 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3758      	adds	r7, #88	@ 0x58
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0800bdb9 	.word	0x0800bdb9
 800bc9c:	0800bf17 	.word	0x0800bf17
 800bca0:	0800bf89 	.word	0x0800bf89

0800bca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b089      	sub	sp, #36	@ 0x24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	e853 3f00 	ldrex	r3, [r3]
 800bcb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bcc0:	61fb      	str	r3, [r7, #28]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	61bb      	str	r3, [r7, #24]
 800bccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcce:	6979      	ldr	r1, [r7, #20]
 800bcd0:	69ba      	ldr	r2, [r7, #24]
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	613b      	str	r3, [r7, #16]
   return(result);
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1e6      	bne.n	800bcac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bce4:	bf00      	nop
 800bce6:	3724      	adds	r7, #36	@ 0x24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b095      	sub	sp, #84	@ 0x54
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd00:	e853 3f00 	ldrex	r3, [r3]
 800bd04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd16:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd1e:	e841 2300 	strex	r3, r2, [r1]
 800bd22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1e6      	bne.n	800bcf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3308      	adds	r3, #8
 800bd30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	e853 3f00 	ldrex	r3, [r3]
 800bd38:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	f023 0301 	bic.w	r3, r3, #1
 800bd40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3308      	adds	r3, #8
 800bd48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd52:	e841 2300 	strex	r3, r2, [r1]
 800bd56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e5      	bne.n	800bd2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d118      	bne.n	800bd98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f023 0310 	bic.w	r3, r3, #16
 800bd7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd84:	61bb      	str	r3, [r7, #24]
 800bd86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6979      	ldr	r1, [r7, #20]
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	613b      	str	r3, [r7, #16]
   return(result);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e6      	bne.n	800bd66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bdac:	bf00      	nop
 800bdae:	3754      	adds	r7, #84	@ 0x54
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b09c      	sub	sp, #112	@ 0x70
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdce:	d071      	beq.n	800beb4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bdd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bde6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdf8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bdfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e6      	bne.n	800bdd8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3308      	adds	r3, #8
 800be10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	f023 0301 	bic.w	r3, r3, #1
 800be20:	667b      	str	r3, [r7, #100]	@ 0x64
 800be22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3308      	adds	r3, #8
 800be28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800be2a:	643a      	str	r2, [r7, #64]	@ 0x40
 800be2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e5      	bne.n	800be0a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3308      	adds	r3, #8
 800be44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be54:	663b      	str	r3, [r7, #96]	@ 0x60
 800be56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3308      	adds	r3, #8
 800be5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be66:	e841 2300 	strex	r3, r2, [r1]
 800be6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1e5      	bne.n	800be3e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be74:	2220      	movs	r2, #32
 800be76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d118      	bne.n	800beb4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f023 0310 	bic.w	r3, r3, #16
 800be96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	461a      	mov	r2, r3
 800be9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea4:	6979      	ldr	r1, [r7, #20]
 800bea6:	69ba      	ldr	r2, [r7, #24]
 800bea8:	e841 2300 	strex	r3, r2, [r1]
 800beac:	613b      	str	r3, [r7, #16]
   return(result);
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e6      	bne.n	800be82 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beb6:	2200      	movs	r2, #0
 800beb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d122      	bne.n	800bf08 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800beda:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bede:	429a      	cmp	r2, r3
 800bee0:	d204      	bcs.n	800beec <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bee4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bee8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bef8:	b29b      	uxth	r3, r3
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	b29b      	uxth	r3, r3
 800befe:	4619      	mov	r1, r3
 800bf00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf02:	f7f7 f823 	bl	8002f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf06:	e002      	b.n	800bf0e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bf08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf0a:	f7ff fa43 	bl	800b394 <HAL_UART_RxCpltCallback>
}
 800bf0e:	bf00      	nop
 800bf10:	3770      	adds	r7, #112	@ 0x70
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2201      	movs	r2, #1
 800bf28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d123      	bne.n	800bf7a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf50:	897a      	ldrh	r2, [r7, #10]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d803      	bhi.n	800bf5e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	897a      	ldrh	r2, [r7, #10]
 800bf5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	4619      	mov	r1, r3
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f7f6 ffea 	bl	8002f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf78:	e002      	b.n	800bf80 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fa14 	bl	800b3a8 <HAL_UART_RxHalfCpltCallback>
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfae:	2b80      	cmp	r3, #128	@ 0x80
 800bfb0:	d109      	bne.n	800bfc6 <UART_DMAError+0x3e>
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b21      	cmp	r3, #33	@ 0x21
 800bfb6:	d106      	bne.n	800bfc6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bfc0:	6978      	ldr	r0, [r7, #20]
 800bfc2:	f7ff fe6f 	bl	800bca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd0:	2b40      	cmp	r3, #64	@ 0x40
 800bfd2:	d109      	bne.n	800bfe8 <UART_DMAError+0x60>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b22      	cmp	r3, #34	@ 0x22
 800bfd8:	d106      	bne.n	800bfe8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bfe2:	6978      	ldr	r0, [r7, #20]
 800bfe4:	f7ff fe84 	bl	800bcf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfee:	f043 0210 	orr.w	r2, r3, #16
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bff8:	6978      	ldr	r0, [r7, #20]
 800bffa:	f7ff f9df 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bffe:	bf00      	nop
 800c000:	3718      	adds	r7, #24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff f9cd 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c022:	bf00      	nop
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b088      	sub	sp, #32
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	6979      	ldr	r1, [r7, #20]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	613b      	str	r3, [r7, #16]
   return(result);
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e6      	bne.n	800c032 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2220      	movs	r2, #32
 800c068:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff f985 	bl	800b380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c076:	bf00      	nop
 800c078:	3720      	adds	r7, #32
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b08c      	sub	sp, #48	@ 0x30
 800c082:	af00      	add	r7, sp, #0
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	4613      	mov	r3, r2
 800c08a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c092:	2b20      	cmp	r3, #32
 800c094:	d142      	bne.n	800c11c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d002      	beq.n	800c0a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e03b      	b.n	800c11e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f7ff fd53 	bl	800bb64 <UART_Start_Receive_DMA>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d124      	bne.n	800c116 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d11d      	bne.n	800c110 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2210      	movs	r2, #16
 800c0da:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	617b      	str	r3, [r7, #20]
   return(result);
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f043 0310 	orr.w	r3, r3, #16
 800c0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0fc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6a39      	ldr	r1, [r7, #32]
 800c100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	61fb      	str	r3, [r7, #28]
   return(result);
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e6      	bne.n	800c0dc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c10e:	e002      	b.n	800c116 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c11a:	e000      	b.n	800c11e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c11c:	2302      	movs	r3, #2
  }
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3730      	adds	r7, #48	@ 0x30
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c128:	b084      	sub	sp, #16
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	f107 001c 	add.w	r0, r7, #28
 800c136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c13a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d127      	bne.n	800c192 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c146:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	4b3a      	ldr	r3, [pc, #232]	@ (800c23c <USB_CoreInit+0x114>)
 800c154:	4013      	ands	r3, r2
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	f043 0210 	orr.w	r2, r3, #16
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c176:	2b01      	cmp	r3, #1
 800c178:	d105      	bne.n	800c186 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f001 fb20 	bl	800d7cc <USB_CoreReset>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
 800c190:	e03c      	b.n	800c20c <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c192:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c196:	2b03      	cmp	r3, #3
 800c198:	d127      	bne.n	800c1ea <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68da      	ldr	r2, [r3, #12]
 800c1aa:	4b24      	ldr	r3, [pc, #144]	@ (800c23c <USB_CoreInit+0x114>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	f023 0210 	bic.w	r2, r3, #16
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800c1ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d105      	bne.n	800c1de <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f001 faf4 	bl	800d7cc <USB_CoreReset>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
 800c1e8:	e010      	b.n	800c20c <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 fae8 	bl	800d7cc <USB_CoreReset>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c204:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800c20c:	7fbb      	ldrb	r3, [r7, #30]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d10b      	bne.n	800c22a <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f043 0206 	orr.w	r2, r3, #6
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f043 0220 	orr.w	r2, r3, #32
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c236:	b004      	add	sp, #16
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	ffbdffbf 	.word	0xffbdffbf

0800c240 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c24e:	79fb      	ldrb	r3, [r7, #7]
 800c250:	2b02      	cmp	r3, #2
 800c252:	d165      	bne.n	800c320 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	4a41      	ldr	r2, [pc, #260]	@ (800c35c <USB_SetTurnaroundTime+0x11c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d906      	bls.n	800c26a <USB_SetTurnaroundTime+0x2a>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4a40      	ldr	r2, [pc, #256]	@ (800c360 <USB_SetTurnaroundTime+0x120>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d202      	bcs.n	800c26a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c264:	230f      	movs	r3, #15
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	e062      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	4a3c      	ldr	r2, [pc, #240]	@ (800c360 <USB_SetTurnaroundTime+0x120>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d306      	bcc.n	800c280 <USB_SetTurnaroundTime+0x40>
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	4a3b      	ldr	r2, [pc, #236]	@ (800c364 <USB_SetTurnaroundTime+0x124>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d202      	bcs.n	800c280 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c27a:	230e      	movs	r3, #14
 800c27c:	617b      	str	r3, [r7, #20]
 800c27e:	e057      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	4a38      	ldr	r2, [pc, #224]	@ (800c364 <USB_SetTurnaroundTime+0x124>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d306      	bcc.n	800c296 <USB_SetTurnaroundTime+0x56>
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	4a37      	ldr	r2, [pc, #220]	@ (800c368 <USB_SetTurnaroundTime+0x128>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d202      	bcs.n	800c296 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c290:	230d      	movs	r3, #13
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e04c      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	4a33      	ldr	r2, [pc, #204]	@ (800c368 <USB_SetTurnaroundTime+0x128>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d306      	bcc.n	800c2ac <USB_SetTurnaroundTime+0x6c>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	4a32      	ldr	r2, [pc, #200]	@ (800c36c <USB_SetTurnaroundTime+0x12c>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d802      	bhi.n	800c2ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	617b      	str	r3, [r7, #20]
 800c2aa:	e041      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4a2f      	ldr	r2, [pc, #188]	@ (800c36c <USB_SetTurnaroundTime+0x12c>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d906      	bls.n	800c2c2 <USB_SetTurnaroundTime+0x82>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	4a2e      	ldr	r2, [pc, #184]	@ (800c370 <USB_SetTurnaroundTime+0x130>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d802      	bhi.n	800c2c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c2bc:	230b      	movs	r3, #11
 800c2be:	617b      	str	r3, [r7, #20]
 800c2c0:	e036      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	4a2a      	ldr	r2, [pc, #168]	@ (800c370 <USB_SetTurnaroundTime+0x130>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d906      	bls.n	800c2d8 <USB_SetTurnaroundTime+0x98>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4a29      	ldr	r2, [pc, #164]	@ (800c374 <USB_SetTurnaroundTime+0x134>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d802      	bhi.n	800c2d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c2d2:	230a      	movs	r3, #10
 800c2d4:	617b      	str	r3, [r7, #20]
 800c2d6:	e02b      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	4a26      	ldr	r2, [pc, #152]	@ (800c374 <USB_SetTurnaroundTime+0x134>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d906      	bls.n	800c2ee <USB_SetTurnaroundTime+0xae>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	4a25      	ldr	r2, [pc, #148]	@ (800c378 <USB_SetTurnaroundTime+0x138>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d202      	bcs.n	800c2ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c2e8:	2309      	movs	r3, #9
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	e020      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	4a21      	ldr	r2, [pc, #132]	@ (800c378 <USB_SetTurnaroundTime+0x138>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d306      	bcc.n	800c304 <USB_SetTurnaroundTime+0xc4>
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4a20      	ldr	r2, [pc, #128]	@ (800c37c <USB_SetTurnaroundTime+0x13c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d802      	bhi.n	800c304 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c2fe:	2308      	movs	r3, #8
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	e015      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4a1d      	ldr	r2, [pc, #116]	@ (800c37c <USB_SetTurnaroundTime+0x13c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d906      	bls.n	800c31a <USB_SetTurnaroundTime+0xda>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	4a1c      	ldr	r2, [pc, #112]	@ (800c380 <USB_SetTurnaroundTime+0x140>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d202      	bcs.n	800c31a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c314:	2307      	movs	r3, #7
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e00a      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c31a:	2306      	movs	r3, #6
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	e007      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c326:	2309      	movs	r3, #9
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	e001      	b.n	800c330 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c32c:	2309      	movs	r3, #9
 800c32e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	029b      	lsls	r3, r3, #10
 800c344:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c348:	431a      	orrs	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	00d8acbf 	.word	0x00d8acbf
 800c360:	00e4e1c0 	.word	0x00e4e1c0
 800c364:	00f42400 	.word	0x00f42400
 800c368:	01067380 	.word	0x01067380
 800c36c:	011a499f 	.word	0x011a499f
 800c370:	01312cff 	.word	0x01312cff
 800c374:	014ca43f 	.word	0x014ca43f
 800c378:	016e3600 	.word	0x016e3600
 800c37c:	01a6ab1f 	.word	0x01a6ab1f
 800c380:	01e84800 	.word	0x01e84800

0800c384 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f043 0201 	orr.w	r2, r3, #1
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f023 0201 	bic.w	r2, r3, #1
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d115      	bne.n	800c416 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c3f6:	200a      	movs	r0, #10
 800c3f8:	f7f8 f8d8 	bl	80045ac <HAL_Delay>
      ms += 10U;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	330a      	adds	r3, #10
 800c400:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f001 f951 	bl	800d6aa <USB_GetMode>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d01e      	beq.n	800c44c <USB_SetCurrentMode+0x84>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2bc7      	cmp	r3, #199	@ 0xc7
 800c412:	d9f0      	bls.n	800c3f6 <USB_SetCurrentMode+0x2e>
 800c414:	e01a      	b.n	800c44c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d115      	bne.n	800c448 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c428:	200a      	movs	r0, #10
 800c42a:	f7f8 f8bf 	bl	80045ac <HAL_Delay>
      ms += 10U;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	330a      	adds	r3, #10
 800c432:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f001 f938 	bl	800d6aa <USB_GetMode>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <USB_SetCurrentMode+0x84>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2bc7      	cmp	r3, #199	@ 0xc7
 800c444:	d9f0      	bls.n	800c428 <USB_SetCurrentMode+0x60>
 800c446:	e001      	b.n	800c44c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e005      	b.n	800c458 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2bc8      	cmp	r3, #200	@ 0xc8
 800c450:	d101      	bne.n	800c456 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c460:	b084      	sub	sp, #16
 800c462:	b580      	push	{r7, lr}
 800c464:	b086      	sub	sp, #24
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c46e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c47a:	2300      	movs	r3, #0
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	e009      	b.n	800c494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	3340      	adds	r3, #64	@ 0x40
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	4413      	add	r3, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	613b      	str	r3, [r7, #16]
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2b0e      	cmp	r3, #14
 800c498:	d9f2      	bls.n	800c480 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c49a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d11c      	bne.n	800c4dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4b0:	f043 0302 	orr.w	r3, r3, #2
 800c4b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	601a      	str	r2, [r3, #0]
 800c4da:	e005      	b.n	800c4e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d10d      	bne.n	800c518 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c500:	2b00      	cmp	r3, #0
 800c502:	d104      	bne.n	800c50e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c504:	2100      	movs	r1, #0
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f97a 	bl	800c800 <USB_SetDevSpeed>
 800c50c:	e01a      	b.n	800c544 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c50e:	2101      	movs	r1, #1
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f975 	bl	800c800 <USB_SetDevSpeed>
 800c516:	e015      	b.n	800c544 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c518:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c51c:	2b03      	cmp	r3, #3
 800c51e:	d10d      	bne.n	800c53c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c524:	2b00      	cmp	r3, #0
 800c526:	d104      	bne.n	800c532 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c528:	2100      	movs	r1, #0
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f968 	bl	800c800 <USB_SetDevSpeed>
 800c530:	e008      	b.n	800c544 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c532:	2101      	movs	r1, #1
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f963 	bl	800c800 <USB_SetDevSpeed>
 800c53a:	e003      	b.n	800c544 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c53c:	2103      	movs	r1, #3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f95e 	bl	800c800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c544:	2110      	movs	r1, #16
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f8fa 	bl	800c740 <USB_FlushTxFifo>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f924 	bl	800c7a4 <USB_FlushRxFifo>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c56c:	461a      	mov	r2, r3
 800c56e:	2300      	movs	r3, #0
 800c570:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c578:	461a      	mov	r2, r3
 800c57a:	2300      	movs	r3, #0
 800c57c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c584:	461a      	mov	r2, r3
 800c586:	2300      	movs	r3, #0
 800c588:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c58a:	2300      	movs	r3, #0
 800c58c:	613b      	str	r3, [r7, #16]
 800c58e:	e043      	b.n	800c618 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5a6:	d118      	bne.n	800c5da <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	015a      	lsls	r2, r3, #5
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	e013      	b.n	800c5ec <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	e008      	b.n	800c5ec <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	015a      	lsls	r2, r3, #5
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c60a:	461a      	mov	r2, r3
 800c60c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	3301      	adds	r3, #1
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c61c:	461a      	mov	r2, r3
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	4293      	cmp	r3, r2
 800c622:	d3b5      	bcc.n	800c590 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
 800c628:	e043      	b.n	800c6b2 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c63c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c640:	d118      	bne.n	800c674 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10a      	bne.n	800c65e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c654:	461a      	mov	r2, r3
 800c656:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c65a:	6013      	str	r3, [r2, #0]
 800c65c:	e013      	b.n	800c686 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c66a:	461a      	mov	r2, r3
 800c66c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c670:	6013      	str	r3, [r2, #0]
 800c672:	e008      	b.n	800c686 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	015a      	lsls	r2, r3, #5
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c680:	461a      	mov	r2, r3
 800c682:	2300      	movs	r3, #0
 800c684:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c692:	461a      	mov	r2, r3
 800c694:	2300      	movs	r3, #0
 800c696:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c6aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d3b5      	bcc.n	800c62a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c6de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c6e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d105      	bne.n	800c6f4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f043 0210 	orr.w	r2, r3, #16
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	699a      	ldr	r2, [r3, #24]
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <USB_DevInit+0x2d8>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c700:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	f043 0208 	orr.w	r2, r3, #8
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c714:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d105      	bne.n	800c728 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699a      	ldr	r2, [r3, #24]
 800c720:	4b06      	ldr	r3, [pc, #24]	@ (800c73c <USB_DevInit+0x2dc>)
 800c722:	4313      	orrs	r3, r2
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c728:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c734:	b004      	add	sp, #16
 800c736:	4770      	bx	lr
 800c738:	803c3800 	.word	0x803c3800
 800c73c:	40000004 	.word	0x40000004

0800c740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c75a:	d901      	bls.n	800c760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e01b      	b.n	800c798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	daf2      	bge.n	800c74e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c768:	2300      	movs	r3, #0
 800c76a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	019b      	lsls	r3, r3, #6
 800c770:	f043 0220 	orr.w	r2, r3, #32
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3301      	adds	r3, #1
 800c77c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c784:	d901      	bls.n	800c78a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e006      	b.n	800c798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b20      	cmp	r3, #32
 800c794:	d0f0      	beq.n	800c778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7bc:	d901      	bls.n	800c7c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e018      	b.n	800c7f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	daf2      	bge.n	800c7b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2210      	movs	r2, #16
 800c7d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7e0:	d901      	bls.n	800c7e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e006      	b.n	800c7f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	f003 0310 	and.w	r3, r3, #16
 800c7ee:	2b10      	cmp	r3, #16
 800c7f0:	d0f0      	beq.n	800c7d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	68f9      	ldr	r1, [r7, #12]
 800c81c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c820:	4313      	orrs	r3, r2
 800c822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c832:	b480      	push	{r7}
 800c834:	b087      	sub	sp, #28
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	f003 0306 	and.w	r3, r3, #6
 800c84a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d102      	bne.n	800c858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c852:	2300      	movs	r3, #0
 800c854:	75fb      	strb	r3, [r7, #23]
 800c856:	e00a      	b.n	800c86e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d002      	beq.n	800c864 <USB_GetDevSpeed+0x32>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b06      	cmp	r3, #6
 800c862:	d102      	bne.n	800c86a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c864:	2302      	movs	r3, #2
 800c866:	75fb      	strb	r3, [r7, #23]
 800c868:	e001      	b.n	800c86e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c86a:	230f      	movs	r3, #15
 800c86c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c870:	4618      	mov	r0, r3
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d139      	bne.n	800c90c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c89e:	69da      	ldr	r2, [r3, #28]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	f003 030f 	and.w	r3, r3, #15
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	68f9      	ldr	r1, [r7, #12]
 800c8b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d153      	bne.n	800c978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	015a      	lsls	r2, r3, #5
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	791b      	ldrb	r3, [r3, #4]
 800c8ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c8ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	059b      	lsls	r3, r3, #22
 800c8f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c8f4:	431a      	orrs	r2, r3
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	0159      	lsls	r1, r3, #5
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	440b      	add	r3, r1
 800c8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c902:	4619      	mov	r1, r3
 800c904:	4b20      	ldr	r3, [pc, #128]	@ (800c988 <USB_ActivateEndpoint+0x10c>)
 800c906:	4313      	orrs	r3, r2
 800c908:	600b      	str	r3, [r1, #0]
 800c90a:	e035      	b.n	800c978 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c912:	69da      	ldr	r2, [r3, #28]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 030f 	and.w	r3, r3, #15
 800c91c:	2101      	movs	r1, #1
 800c91e:	fa01 f303 	lsl.w	r3, r1, r3
 800c922:	041b      	lsls	r3, r3, #16
 800c924:	68f9      	ldr	r1, [r7, #12]
 800c926:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c92a:	4313      	orrs	r3, r2
 800c92c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d119      	bne.n	800c978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	791b      	ldrb	r3, [r3, #4]
 800c95e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c960:	430b      	orrs	r3, r1
 800c962:	431a      	orrs	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	0159      	lsls	r1, r3, #5
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	440b      	add	r3, r1
 800c96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c970:	4619      	mov	r1, r3
 800c972:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <USB_ActivateEndpoint+0x10c>)
 800c974:	4313      	orrs	r3, r2
 800c976:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3714      	adds	r7, #20
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	10008000 	.word	0x10008000

0800c98c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	785b      	ldrb	r3, [r3, #1]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d161      	bne.n	800ca6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9be:	d11f      	bne.n	800ca00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	0151      	lsls	r1, r2, #5
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	440a      	add	r2, r1
 800c9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c9de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	0151      	lsls	r1, r2, #5
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	440a      	add	r2, r1
 800c9f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c9fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	f003 030f 	and.w	r3, r3, #15
 800ca10:	2101      	movs	r1, #1
 800ca12:	fa01 f303 	lsl.w	r3, r1, r3
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	43db      	mvns	r3, r3
 800ca1a:	68f9      	ldr	r1, [r7, #12]
 800ca1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca20:	4013      	ands	r3, r2
 800ca22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca2a:	69da      	ldr	r2, [r3, #28]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f003 030f 	and.w	r3, r3, #15
 800ca34:	2101      	movs	r1, #1
 800ca36:	fa01 f303 	lsl.w	r3, r1, r3
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	43db      	mvns	r3, r3
 800ca3e:	68f9      	ldr	r1, [r7, #12]
 800ca40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca44:	4013      	ands	r3, r2
 800ca46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	0159      	lsls	r1, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca62:	4619      	mov	r1, r3
 800ca64:	4b35      	ldr	r3, [pc, #212]	@ (800cb3c <USB_DeactivateEndpoint+0x1b0>)
 800ca66:	4013      	ands	r3, r2
 800ca68:	600b      	str	r3, [r1, #0]
 800ca6a:	e060      	b.n	800cb2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca82:	d11f      	bne.n	800cac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	0151      	lsls	r1, r2, #5
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	440a      	add	r2, r1
 800ca9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800caa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	0151      	lsls	r1, r2, #5
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	440a      	add	r2, r1
 800caba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cabe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 030f 	and.w	r3, r3, #15
 800cad4:	2101      	movs	r1, #1
 800cad6:	fa01 f303 	lsl.w	r3, r1, r3
 800cada:	041b      	lsls	r3, r3, #16
 800cadc:	43db      	mvns	r3, r3
 800cade:	68f9      	ldr	r1, [r7, #12]
 800cae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cae4:	4013      	ands	r3, r2
 800cae6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caee:	69da      	ldr	r2, [r3, #28]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 030f 	and.w	r3, r3, #15
 800caf8:	2101      	movs	r1, #1
 800cafa:	fa01 f303 	lsl.w	r3, r1, r3
 800cafe:	041b      	lsls	r3, r3, #16
 800cb00:	43db      	mvns	r3, r3
 800cb02:	68f9      	ldr	r1, [r7, #12]
 800cb04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb08:	4013      	ands	r3, r2
 800cb0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	015a      	lsls	r2, r3, #5
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4413      	add	r3, r2
 800cb14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	0159      	lsls	r1, r3, #5
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	440b      	add	r3, r1
 800cb22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb26:	4619      	mov	r1, r3
 800cb28:	4b05      	ldr	r3, [pc, #20]	@ (800cb40 <USB_DeactivateEndpoint+0x1b4>)
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr
 800cb3c:	ec337800 	.word	0xec337800
 800cb40:	eff37800 	.word	0xeff37800

0800cb44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08a      	sub	sp, #40	@ 0x28
 800cb48:	af02      	add	r7, sp, #8
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	f040 8185 	bne.w	800ce70 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d132      	bne.n	800cbd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb7a:	691a      	ldr	r2, [r3, #16]
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	0159      	lsls	r1, r3, #5
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	440b      	add	r3, r1
 800cb84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4ba7      	ldr	r3, [pc, #668]	@ (800ce28 <USB_EPStartXfer+0x2e4>)
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	0151      	lsls	r1, r2, #5
 800cba2:	69fa      	ldr	r2, [r7, #28]
 800cba4:	440a      	add	r2, r1
 800cba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cbaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cbae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbbc:	691a      	ldr	r2, [r3, #16]
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	0159      	lsls	r1, r3, #5
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	440b      	add	r3, r1
 800cbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4b97      	ldr	r3, [pc, #604]	@ (800ce2c <USB_EPStartXfer+0x2e8>)
 800cbce:	4013      	ands	r3, r2
 800cbd0:	610b      	str	r3, [r1, #16]
 800cbd2:	e097      	b.n	800cd04 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbe0:	691a      	ldr	r2, [r3, #16]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	0159      	lsls	r1, r3, #5
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	440b      	add	r3, r1
 800cbea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbee:	4619      	mov	r1, r3
 800cbf0:	4b8e      	ldr	r3, [pc, #568]	@ (800ce2c <USB_EPStartXfer+0x2e8>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	015a      	lsls	r2, r3, #5
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc02:	691a      	ldr	r2, [r3, #16]
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	0159      	lsls	r1, r3, #5
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	440b      	add	r3, r1
 800cc0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc10:	4619      	mov	r1, r3
 800cc12:	4b85      	ldr	r3, [pc, #532]	@ (800ce28 <USB_EPStartXfer+0x2e4>)
 800cc14:	4013      	ands	r3, r2
 800cc16:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d11a      	bne.n	800cc54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d903      	bls.n	800cc32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	689a      	ldr	r2, [r3, #8]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	015a      	lsls	r2, r3, #5
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	4413      	add	r3, r2
 800cc3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	69ba      	ldr	r2, [r7, #24]
 800cc42:	0151      	lsls	r1, r2, #5
 800cc44:	69fa      	ldr	r2, [r7, #28]
 800cc46:	440a      	add	r2, r1
 800cc48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc50:	6113      	str	r3, [r2, #16]
 800cc52:	e044      	b.n	800ccde <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	691a      	ldr	r2, [r3, #16]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	1e5a      	subs	r2, r3, #1
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc68:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc76:	691a      	ldr	r2, [r3, #16]
 800cc78:	8afb      	ldrh	r3, [r7, #22]
 800cc7a:	04d9      	lsls	r1, r3, #19
 800cc7c:	4b6c      	ldr	r3, [pc, #432]	@ (800ce30 <USB_EPStartXfer+0x2ec>)
 800cc7e:	400b      	ands	r3, r1
 800cc80:	69b9      	ldr	r1, [r7, #24]
 800cc82:	0148      	lsls	r0, r1, #5
 800cc84:	69f9      	ldr	r1, [r7, #28]
 800cc86:	4401      	add	r1, r0
 800cc88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	791b      	ldrb	r3, [r3, #4]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d122      	bne.n	800ccde <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ccb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ccb6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccc4:	691a      	ldr	r2, [r3, #16]
 800ccc6:	8afb      	ldrh	r3, [r7, #22]
 800ccc8:	075b      	lsls	r3, r3, #29
 800ccca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ccce:	69b9      	ldr	r1, [r7, #24]
 800ccd0:	0148      	lsls	r0, r1, #5
 800ccd2:	69f9      	ldr	r1, [r7, #28]
 800ccd4:	4401      	add	r1, r0
 800ccd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	015a      	lsls	r2, r3, #5
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	4413      	add	r3, r2
 800cce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccf4:	69b9      	ldr	r1, [r7, #24]
 800ccf6:	0148      	lsls	r0, r1, #5
 800ccf8:	69f9      	ldr	r1, [r7, #28]
 800ccfa:	4401      	add	r1, r0
 800ccfc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cd00:	4313      	orrs	r3, r2
 800cd02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d14b      	bne.n	800cda2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd1e:	461a      	mov	r2, r3
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	791b      	ldrb	r3, [r3, #4]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d128      	bne.n	800cd80 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d110      	bne.n	800cd60 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	0151      	lsls	r1, r2, #5
 800cd50:	69fa      	ldr	r2, [r7, #28]
 800cd52:	440a      	add	r2, r1
 800cd54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cd5c:	6013      	str	r3, [r2, #0]
 800cd5e:	e00f      	b.n	800cd80 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	015a      	lsls	r2, r3, #5
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	0151      	lsls	r1, r2, #5
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	440a      	add	r2, r1
 800cd76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd7e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	015a      	lsls	r2, r3, #5
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	4413      	add	r3, r2
 800cd88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	69ba      	ldr	r2, [r7, #24]
 800cd90:	0151      	lsls	r1, r2, #5
 800cd92:	69fa      	ldr	r2, [r7, #28]
 800cd94:	440a      	add	r2, r1
 800cd96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	e169      	b.n	800d076 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	0151      	lsls	r1, r2, #5
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	440a      	add	r2, r1
 800cdb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cdbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cdc0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	791b      	ldrb	r3, [r3, #4]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d015      	beq.n	800cdf6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 8151 	beq.w	800d076 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	2101      	movs	r1, #1
 800cde6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdea:	69f9      	ldr	r1, [r7, #28]
 800cdec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	634b      	str	r3, [r1, #52]	@ 0x34
 800cdf4:	e13f      	b.n	800d076 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d116      	bne.n	800ce34 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	015a      	lsls	r2, r3, #5
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	0151      	lsls	r1, r2, #5
 800ce18:	69fa      	ldr	r2, [r7, #28]
 800ce1a:	440a      	add	r2, r1
 800ce1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	e015      	b.n	800ce54 <USB_EPStartXfer+0x310>
 800ce28:	e007ffff 	.word	0xe007ffff
 800ce2c:	fff80000 	.word	0xfff80000
 800ce30:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	0151      	lsls	r1, r2, #5
 800ce46:	69fa      	ldr	r2, [r7, #28]
 800ce48:	440a      	add	r2, r1
 800ce4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce52:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	68d9      	ldr	r1, [r3, #12]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	781a      	ldrb	r2, [r3, #0]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	b298      	uxth	r0, r3
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	4603      	mov	r3, r0
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 f9b9 	bl	800d1e0 <USB_WritePacket>
 800ce6e:	e102      	b.n	800d076 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7c:	691a      	ldr	r2, [r3, #16]
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	0159      	lsls	r1, r3, #5
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	440b      	add	r3, r1
 800ce86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4b7c      	ldr	r3, [pc, #496]	@ (800d080 <USB_EPStartXfer+0x53c>)
 800ce8e:	4013      	ands	r3, r2
 800ce90:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce9e:	691a      	ldr	r2, [r3, #16]
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	0159      	lsls	r1, r3, #5
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	440b      	add	r3, r1
 800cea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceac:	4619      	mov	r1, r3
 800ceae:	4b75      	ldr	r3, [pc, #468]	@ (800d084 <USB_EPStartXfer+0x540>)
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d12f      	bne.n	800cf1a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d003      	beq.n	800ceca <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	689a      	ldr	r2, [r3, #8]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	689a      	ldr	r2, [r3, #8]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	015a      	lsls	r2, r3, #5
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	4413      	add	r3, r2
 800ceda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cee8:	69b9      	ldr	r1, [r7, #24]
 800ceea:	0148      	lsls	r0, r1, #5
 800ceec:	69f9      	ldr	r1, [r7, #28]
 800ceee:	4401      	add	r1, r0
 800cef0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cef4:	4313      	orrs	r3, r2
 800cef6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	015a      	lsls	r2, r3, #5
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	4413      	add	r3, r2
 800cf00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	0151      	lsls	r1, r2, #5
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	440a      	add	r2, r1
 800cf0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf16:	6113      	str	r3, [r2, #16]
 800cf18:	e05f      	b.n	800cfda <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d123      	bne.n	800cf6a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf2e:	691a      	ldr	r2, [r3, #16]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf38:	69b9      	ldr	r1, [r7, #24]
 800cf3a:	0148      	lsls	r0, r1, #5
 800cf3c:	69f9      	ldr	r1, [r7, #28]
 800cf3e:	4401      	add	r1, r0
 800cf40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cf44:	4313      	orrs	r3, r2
 800cf46:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	015a      	lsls	r2, r3, #5
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	4413      	add	r3, r2
 800cf50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	0151      	lsls	r1, r2, #5
 800cf5a:	69fa      	ldr	r2, [r7, #28]
 800cf5c:	440a      	add	r2, r1
 800cf5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf66:	6113      	str	r3, [r2, #16]
 800cf68:	e037      	b.n	800cfda <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	4413      	add	r3, r2
 800cf74:	1e5a      	subs	r2, r3, #1
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf7e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	8afa      	ldrh	r2, [r7, #22]
 800cf86:	fb03 f202 	mul.w	r2, r3, r2
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	015a      	lsls	r2, r3, #5
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	4413      	add	r3, r2
 800cf96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf9a:	691a      	ldr	r2, [r3, #16]
 800cf9c:	8afb      	ldrh	r3, [r7, #22]
 800cf9e:	04d9      	lsls	r1, r3, #19
 800cfa0:	4b39      	ldr	r3, [pc, #228]	@ (800d088 <USB_EPStartXfer+0x544>)
 800cfa2:	400b      	ands	r3, r1
 800cfa4:	69b9      	ldr	r1, [r7, #24]
 800cfa6:	0148      	lsls	r0, r1, #5
 800cfa8:	69f9      	ldr	r1, [r7, #28]
 800cfaa:	4401      	add	r1, r0
 800cfac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfc0:	691a      	ldr	r2, [r3, #16]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfca:	69b9      	ldr	r1, [r7, #24]
 800cfcc:	0148      	lsls	r0, r1, #5
 800cfce:	69f9      	ldr	r1, [r7, #28]
 800cfd0:	4401      	add	r1, r0
 800cfd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d10d      	bne.n	800cffc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d009      	beq.n	800cffc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	68d9      	ldr	r1, [r3, #12]
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cff8:	460a      	mov	r2, r1
 800cffa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	791b      	ldrb	r3, [r3, #4]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d128      	bne.n	800d056 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d010:	2b00      	cmp	r3, #0
 800d012:	d110      	bne.n	800d036 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	0151      	lsls	r1, r2, #5
 800d026:	69fa      	ldr	r2, [r7, #28]
 800d028:	440a      	add	r2, r1
 800d02a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d02e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	e00f      	b.n	800d056 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	015a      	lsls	r2, r3, #5
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	4413      	add	r3, r2
 800d03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	0151      	lsls	r1, r2, #5
 800d048:	69fa      	ldr	r2, [r7, #28]
 800d04a:	440a      	add	r2, r1
 800d04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d054:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	015a      	lsls	r2, r3, #5
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	4413      	add	r3, r2
 800d05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	0151      	lsls	r1, r2, #5
 800d068:	69fa      	ldr	r2, [r7, #28]
 800d06a:	440a      	add	r2, r1
 800d06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d070:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3720      	adds	r7, #32
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	fff80000 	.word	0xfff80000
 800d084:	e007ffff 	.word	0xe007ffff
 800d088:	1ff80000 	.word	0x1ff80000

0800d08c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	785b      	ldrb	r3, [r3, #1]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d14a      	bne.n	800d140 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d0be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d0c2:	f040 8086 	bne.w	800d1d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	7812      	ldrb	r2, [r2, #0]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d0e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	015a      	lsls	r2, r3, #5
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	7812      	ldrb	r2, [r2, #0]
 800d0fe:	0151      	lsls	r1, r2, #5
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	440a      	add	r2, r1
 800d104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d108:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d10c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d902      	bls.n	800d124 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	75fb      	strb	r3, [r7, #23]
          break;
 800d122:	e056      	b.n	800d1d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d13c:	d0e7      	beq.n	800d10e <USB_EPStopXfer+0x82>
 800d13e:	e048      	b.n	800d1d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	015a      	lsls	r2, r3, #5
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	4413      	add	r3, r2
 800d14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d158:	d13b      	bne.n	800d1d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	015a      	lsls	r2, r3, #5
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	4413      	add	r3, r2
 800d164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	0151      	lsls	r1, r2, #5
 800d170:	693a      	ldr	r2, [r7, #16]
 800d172:	440a      	add	r2, r1
 800d174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d178:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d17c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	7812      	ldrb	r2, [r2, #0]
 800d192:	0151      	lsls	r1, r2, #5
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	440a      	add	r2, r1
 800d198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d19c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d1a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d902      	bls.n	800d1b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1b6:	e00c      	b.n	800d1d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d1cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1d0:	d0e7      	beq.n	800d1a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	371c      	adds	r7, #28
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b089      	sub	sp, #36	@ 0x24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	71fb      	strb	r3, [r7, #7]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d1fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d202:	2b00      	cmp	r3, #0
 800d204:	d123      	bne.n	800d24e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d206:	88bb      	ldrh	r3, [r7, #4]
 800d208:	3303      	adds	r3, #3
 800d20a:	089b      	lsrs	r3, r3, #2
 800d20c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d20e:	2300      	movs	r3, #0
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	e018      	b.n	800d246 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	031a      	lsls	r2, r3, #12
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	4413      	add	r3, r2
 800d21c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d220:	461a      	mov	r2, r3
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	3301      	adds	r3, #1
 800d22c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	3301      	adds	r3, #1
 800d232:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	3301      	adds	r3, #1
 800d238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	3301      	adds	r3, #1
 800d23e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	3301      	adds	r3, #1
 800d244:	61bb      	str	r3, [r7, #24]
 800d246:	69ba      	ldr	r2, [r7, #24]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d3e2      	bcc.n	800d214 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3724      	adds	r7, #36	@ 0x24
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b08b      	sub	sp, #44	@ 0x2c
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d272:	88fb      	ldrh	r3, [r7, #6]
 800d274:	089b      	lsrs	r3, r3, #2
 800d276:	b29b      	uxth	r3, r3
 800d278:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d27a:	88fb      	ldrh	r3, [r7, #6]
 800d27c:	f003 0303 	and.w	r3, r3, #3
 800d280:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d282:	2300      	movs	r3, #0
 800d284:	623b      	str	r3, [r7, #32]
 800d286:	e014      	b.n	800d2b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	601a      	str	r2, [r3, #0]
    pDest++;
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	3301      	adds	r3, #1
 800d298:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29c:	3301      	adds	r3, #1
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	623b      	str	r3, [r7, #32]
 800d2b2:	6a3a      	ldr	r2, [r7, #32]
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d3e6      	bcc.n	800d288 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d2ba:	8bfb      	ldrh	r3, [r7, #30]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01e      	beq.n	800d2fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f107 0310 	add.w	r3, r7, #16
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	701a      	strb	r2, [r3, #0]
      i++;
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	623b      	str	r3, [r7, #32]
      pDest++;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d2f2:	8bfb      	ldrh	r3, [r7, #30]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d2f8:	8bfb      	ldrh	r3, [r7, #30]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1ea      	bne.n	800d2d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d300:	4618      	mov	r0, r3
 800d302:	372c      	adds	r7, #44	@ 0x2c
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d12c      	bne.n	800d382 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	db12      	blt.n	800d360 <USB_EPSetStall+0x54>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00f      	beq.n	800d360 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	0151      	lsls	r1, r2, #5
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	440a      	add	r2, r1
 800d356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d35a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d35e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	0151      	lsls	r1, r2, #5
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	440a      	add	r2, r1
 800d376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d37a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	e02b      	b.n	800d3da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	db12      	blt.n	800d3ba <USB_EPSetStall+0xae>
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00f      	beq.n	800d3ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	0151      	lsls	r1, r2, #5
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	440a      	add	r2, r1
 800d3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d3b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	0151      	lsls	r1, r2, #5
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	440a      	add	r2, r1
 800d3d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d3d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	785b      	ldrb	r3, [r3, #1]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d128      	bne.n	800d456 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	015a      	lsls	r2, r3, #5
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	0151      	lsls	r1, r2, #5
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	440a      	add	r2, r1
 800d41a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d41e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d422:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	791b      	ldrb	r3, [r3, #4]
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d003      	beq.n	800d434 <USB_EPClearStall+0x4c>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	791b      	ldrb	r3, [r3, #4]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d138      	bne.n	800d4a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	0151      	lsls	r1, r2, #5
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	440a      	add	r2, r1
 800d44a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d44e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	e027      	b.n	800d4a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	0151      	lsls	r1, r2, #5
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	440a      	add	r2, r1
 800d46c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d470:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d474:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	791b      	ldrb	r3, [r3, #4]
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d003      	beq.n	800d486 <USB_EPClearStall+0x9e>
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	791b      	ldrb	r3, [r3, #4]
 800d482:	2b02      	cmp	r3, #2
 800d484:	d10f      	bne.n	800d4a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	0151      	lsls	r1, r2, #5
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	440a      	add	r2, r1
 800d49c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d4d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d4e8:	68f9      	ldr	r1, [r7, #12]
 800d4ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d52e:	f023 0302 	bic.w	r3, r3, #2
 800d532:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d542:	b480      	push	{r7}
 800d544:	b085      	sub	sp, #20
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d55c:	f023 0303 	bic.w	r3, r3, #3
 800d560:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d570:	f043 0302 	orr.w	r3, r3, #2
 800d574:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	4013      	ands	r3, r2
 800d59a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d59c:	68fb      	ldr	r3, [r7, #12]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b085      	sub	sp, #20
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5c6:	69db      	ldr	r3, [r3, #28]
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	0c1b      	lsrs	r3, r3, #16
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b085      	sub	sp, #20
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5fa:	69db      	ldr	r3, [r3, #28]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	4013      	ands	r3, r2
 800d600:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	b29b      	uxth	r3, r3
}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d612:	b480      	push	{r7}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	460b      	mov	r3, r1
 800d61c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d622:	78fb      	ldrb	r3, [r7, #3]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	4013      	ands	r3, r2
 800d63e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d640:	68bb      	ldr	r3, [r7, #8]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d64e:	b480      	push	{r7}
 800d650:	b087      	sub	sp, #28
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d670:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d672:	78fb      	ldrb	r3, [r7, #3]
 800d674:	f003 030f 	and.w	r3, r3, #15
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	fa22 f303 	lsr.w	r3, r2, r3
 800d67e:	01db      	lsls	r3, r3, #7
 800d680:	b2db      	uxtb	r3, r3
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	4313      	orrs	r3, r2
 800d686:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	015a      	lsls	r2, r3, #5
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	4413      	add	r3, r2
 800d690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	4013      	ands	r3, r2
 800d69a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d69c:	68bb      	ldr	r3, [r7, #8]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	371c      	adds	r7, #28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b083      	sub	sp, #12
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4b09      	ldr	r3, [pc, #36]	@ (800d70c <USB_ActivateSetup+0x44>)
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d6f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	fffff800 	.word	0xfffff800

0800d710 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d710:	b480      	push	{r7}
 800d712:	b087      	sub	sp, #28
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	460b      	mov	r3, r1
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	333c      	adds	r3, #60	@ 0x3c
 800d726:	3304      	adds	r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	4a26      	ldr	r2, [pc, #152]	@ (800d7c8 <USB_EP0_OutStart+0xb8>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d90a      	bls.n	800d74a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d744:	d101      	bne.n	800d74a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	e037      	b.n	800d7ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d750:	461a      	mov	r2, r3
 800d752:	2300      	movs	r3, #0
 800d754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d778:	f043 0318 	orr.w	r3, r3, #24
 800d77c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d78c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d790:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d10f      	bne.n	800d7b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d79e:	461a      	mov	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7b2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d7b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	4f54300a 	.word	0x4f54300a

0800d7cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7e4:	d901      	bls.n	800d7ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e022      	b.n	800d830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	daf2      	bge.n	800d7d8 <USB_CoreReset+0xc>

  count = 10U;
 800d7f2:	230a      	movs	r3, #10
 800d7f4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d7f6:	e002      	b.n	800d7fe <USB_CoreReset+0x32>
  {
    count--;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1f9      	bne.n	800d7f8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	f043 0201 	orr.w	r2, r3, #1
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	3301      	adds	r3, #1
 800d814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d81c:	d901      	bls.n	800d822 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d81e:	2303      	movs	r3, #3
 800d820:	e006      	b.n	800d830 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d0f0      	beq.n	800d810 <USB_CoreReset+0x44>

  return HAL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	460b      	mov	r3, r1
 800d846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d848:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d84c:	f002 fd9a 	bl	8010384 <malloc>
 800d850:	4603      	mov	r3, r0
 800d852:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	32b0      	adds	r2, #176	@ 0xb0
 800d864:	2100      	movs	r1, #0
 800d866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d86a:	2302      	movs	r3, #2
 800d86c:	e0d4      	b.n	800da18 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d86e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d872:	2100      	movs	r1, #0
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f003 fbc0 	bl	8010ffa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	32b0      	adds	r2, #176	@ 0xb0
 800d884:	68f9      	ldr	r1, [r7, #12]
 800d886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	32b0      	adds	r2, #176	@ 0xb0
 800d894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	7c1b      	ldrb	r3, [r3, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d138      	bne.n	800d918 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d8a6:	4b5e      	ldr	r3, [pc, #376]	@ (800da20 <USBD_CDC_Init+0x1e4>)
 800d8a8:	7819      	ldrb	r1, [r3, #0]
 800d8aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f002 fbc4 	bl	801003e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d8b6:	4b5a      	ldr	r3, [pc, #360]	@ (800da20 <USBD_CDC_Init+0x1e4>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	f003 020f 	and.w	r2, r3, #15
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	440b      	add	r3, r1
 800d8ca:	3323      	adds	r3, #35	@ 0x23
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d8d0:	4b54      	ldr	r3, [pc, #336]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800d8d2:	7819      	ldrb	r1, [r3, #0]
 800d8d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8d8:	2202      	movs	r2, #2
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f002 fbaf 	bl	801003e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d8e0:	4b50      	ldr	r3, [pc, #320]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	f003 020f 	and.w	r2, r3, #15
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	440b      	add	r3, r1
 800d8f4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d8fc:	4b4a      	ldr	r3, [pc, #296]	@ (800da28 <USBD_CDC_Init+0x1ec>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	f003 020f 	and.w	r2, r3, #15
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	331c      	adds	r3, #28
 800d912:	2210      	movs	r2, #16
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	e035      	b.n	800d984 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d918:	4b41      	ldr	r3, [pc, #260]	@ (800da20 <USBD_CDC_Init+0x1e4>)
 800d91a:	7819      	ldrb	r1, [r3, #0]
 800d91c:	2340      	movs	r3, #64	@ 0x40
 800d91e:	2202      	movs	r2, #2
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f002 fb8c 	bl	801003e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d926:	4b3e      	ldr	r3, [pc, #248]	@ (800da20 <USBD_CDC_Init+0x1e4>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	f003 020f 	and.w	r2, r3, #15
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	4613      	mov	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	3323      	adds	r3, #35	@ 0x23
 800d93c:	2201      	movs	r2, #1
 800d93e:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d940:	4b38      	ldr	r3, [pc, #224]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800d942:	7819      	ldrb	r1, [r3, #0]
 800d944:	2340      	movs	r3, #64	@ 0x40
 800d946:	2202      	movs	r2, #2
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f002 fb78 	bl	801003e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d94e:	4b35      	ldr	r3, [pc, #212]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	f003 020f 	and.w	r2, r3, #15
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	4613      	mov	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	440b      	add	r3, r1
 800d962:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d966:	2201      	movs	r2, #1
 800d968:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d96a:	4b2f      	ldr	r3, [pc, #188]	@ (800da28 <USBD_CDC_Init+0x1ec>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	f003 020f 	and.w	r2, r3, #15
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	440b      	add	r3, r1
 800d97e:	331c      	adds	r3, #28
 800d980:	2210      	movs	r2, #16
 800d982:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d984:	4b28      	ldr	r3, [pc, #160]	@ (800da28 <USBD_CDC_Init+0x1ec>)
 800d986:	7819      	ldrb	r1, [r3, #0]
 800d988:	2308      	movs	r3, #8
 800d98a:	2203      	movs	r2, #3
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f002 fb56 	bl	801003e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d992:	4b25      	ldr	r3, [pc, #148]	@ (800da28 <USBD_CDC_Init+0x1ec>)
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	f003 020f 	and.w	r2, r3, #15
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	4613      	mov	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	440b      	add	r3, r1
 800d9a6:	3323      	adds	r3, #35	@ 0x23
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	33b0      	adds	r3, #176	@ 0xb0
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	e018      	b.n	800da18 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10a      	bne.n	800da04 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800d9f0:	7819      	ldrb	r1, [r3, #0]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f002 fc0d 	bl	801021c <USBD_LL_PrepareReceive>
 800da02:	e008      	b.n	800da16 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da04:	4b07      	ldr	r3, [pc, #28]	@ (800da24 <USBD_CDC_Init+0x1e8>)
 800da06:	7819      	ldrb	r1, [r3, #0]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da0e:	2340      	movs	r3, #64	@ 0x40
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f002 fc03 	bl	801021c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	20000093 	.word	0x20000093
 800da24:	20000094 	.word	0x20000094
 800da28:	20000095 	.word	0x20000095

0800da2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800da38:	4b3a      	ldr	r3, [pc, #232]	@ (800db24 <USBD_CDC_DeInit+0xf8>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f002 fb23 	bl	801008a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800da44:	4b37      	ldr	r3, [pc, #220]	@ (800db24 <USBD_CDC_DeInit+0xf8>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	f003 020f 	and.w	r2, r3, #15
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	4613      	mov	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4413      	add	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	440b      	add	r3, r1
 800da58:	3323      	adds	r3, #35	@ 0x23
 800da5a:	2200      	movs	r2, #0
 800da5c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800da5e:	4b32      	ldr	r3, [pc, #200]	@ (800db28 <USBD_CDC_DeInit+0xfc>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f002 fb10 	bl	801008a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800da6a:	4b2f      	ldr	r3, [pc, #188]	@ (800db28 <USBD_CDC_DeInit+0xfc>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	f003 020f 	and.w	r2, r3, #15
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	4613      	mov	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800da86:	4b29      	ldr	r3, [pc, #164]	@ (800db2c <USBD_CDC_DeInit+0x100>)
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f002 fafc 	bl	801008a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800da92:	4b26      	ldr	r3, [pc, #152]	@ (800db2c <USBD_CDC_DeInit+0x100>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	f003 020f 	and.w	r2, r3, #15
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	440b      	add	r3, r1
 800daa6:	3323      	adds	r3, #35	@ 0x23
 800daa8:	2200      	movs	r2, #0
 800daaa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800daac:	4b1f      	ldr	r3, [pc, #124]	@ (800db2c <USBD_CDC_DeInit+0x100>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	f003 020f 	and.w	r2, r3, #15
 800dab4:	6879      	ldr	r1, [r7, #4]
 800dab6:	4613      	mov	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	440b      	add	r3, r1
 800dac0:	331c      	adds	r3, #28
 800dac2:	2200      	movs	r2, #0
 800dac4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	32b0      	adds	r2, #176	@ 0xb0
 800dad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d01f      	beq.n	800db18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	33b0      	adds	r3, #176	@ 0xb0
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	32b0      	adds	r2, #176	@ 0xb0
 800daf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f002 fc4a 	bl	8010394 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	32b0      	adds	r2, #176	@ 0xb0
 800db0a:	2100      	movs	r1, #0
 800db0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	20000093 	.word	0x20000093
 800db28:	20000094 	.word	0x20000094
 800db2c:	20000095 	.word	0x20000095

0800db30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	32b0      	adds	r2, #176	@ 0xb0
 800db44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800db4a:	2300      	movs	r3, #0
 800db4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800db4e:	2300      	movs	r3, #0
 800db50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d101      	bne.n	800db60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e0bf      	b.n	800dce0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d050      	beq.n	800dc0e <USBD_CDC_Setup+0xde>
 800db6c:	2b20      	cmp	r3, #32
 800db6e:	f040 80af 	bne.w	800dcd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	88db      	ldrh	r3, [r3, #6]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d03a      	beq.n	800dbf0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b25b      	sxtb	r3, r3
 800db80:	2b00      	cmp	r3, #0
 800db82:	da1b      	bge.n	800dbbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	33b0      	adds	r3, #176	@ 0xb0
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	4413      	add	r3, r2
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800db9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	88d2      	ldrh	r2, [r2, #6]
 800dba0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	2b07      	cmp	r3, #7
 800dba8:	bf28      	it	cs
 800dbaa:	2307      	movcs	r3, #7
 800dbac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	89fa      	ldrh	r2, [r7, #14]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fdd3 	bl	800f760 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800dbba:	e090      	b.n	800dcde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	785a      	ldrb	r2, [r3, #1]
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	88db      	ldrh	r3, [r3, #6]
 800dbca:	2b3f      	cmp	r3, #63	@ 0x3f
 800dbcc:	d803      	bhi.n	800dbd6 <USBD_CDC_Setup+0xa6>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	88db      	ldrh	r3, [r3, #6]
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	e000      	b.n	800dbd8 <USBD_CDC_Setup+0xa8>
 800dbd6:	2240      	movs	r2, #64	@ 0x40
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dbde:	6939      	ldr	r1, [r7, #16]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 fde8 	bl	800f7be <USBD_CtlPrepareRx>
      break;
 800dbee:	e076      	b.n	800dcde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	33b0      	adds	r3, #176	@ 0xb0
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	7850      	ldrb	r0, [r2, #1]
 800dc06:	2200      	movs	r2, #0
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	4798      	blx	r3
      break;
 800dc0c:	e067      	b.n	800dcde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	785b      	ldrb	r3, [r3, #1]
 800dc12:	2b0b      	cmp	r3, #11
 800dc14:	d851      	bhi.n	800dcba <USBD_CDC_Setup+0x18a>
 800dc16:	a201      	add	r2, pc, #4	@ (adr r2, 800dc1c <USBD_CDC_Setup+0xec>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc4d 	.word	0x0800dc4d
 800dc20:	0800dcc9 	.word	0x0800dcc9
 800dc24:	0800dcbb 	.word	0x0800dcbb
 800dc28:	0800dcbb 	.word	0x0800dcbb
 800dc2c:	0800dcbb 	.word	0x0800dcbb
 800dc30:	0800dcbb 	.word	0x0800dcbb
 800dc34:	0800dcbb 	.word	0x0800dcbb
 800dc38:	0800dcbb 	.word	0x0800dcbb
 800dc3c:	0800dcbb 	.word	0x0800dcbb
 800dc40:	0800dcbb 	.word	0x0800dcbb
 800dc44:	0800dc77 	.word	0x0800dc77
 800dc48:	0800dca1 	.word	0x0800dca1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d107      	bne.n	800dc68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dc58:	f107 030a 	add.w	r3, r7, #10
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f001 fd7d 	bl	800f760 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc66:	e032      	b.n	800dcce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f001 fcfb 	bl	800f666 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc70:	2303      	movs	r3, #3
 800dc72:	75fb      	strb	r3, [r7, #23]
          break;
 800dc74:	e02b      	b.n	800dcce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d107      	bne.n	800dc92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc82:	f107 030d 	add.w	r3, r7, #13
 800dc86:	2201      	movs	r2, #1
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f001 fd68 	bl	800f760 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc90:	e01d      	b.n	800dcce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 fce6 	bl	800f666 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	75fb      	strb	r3, [r7, #23]
          break;
 800dc9e:	e016      	b.n	800dcce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	d00f      	beq.n	800dccc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f001 fcd9 	bl	800f666 <USBD_CtlError>
            ret = USBD_FAIL;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dcb8:	e008      	b.n	800dccc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f001 fcd2 	bl	800f666 <USBD_CtlError>
          ret = USBD_FAIL;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	75fb      	strb	r3, [r7, #23]
          break;
 800dcc6:	e002      	b.n	800dcce <USBD_CDC_Setup+0x19e>
          break;
 800dcc8:	bf00      	nop
 800dcca:	e008      	b.n	800dcde <USBD_CDC_Setup+0x1ae>
          break;
 800dccc:	bf00      	nop
      }
      break;
 800dcce:	e006      	b.n	800dcde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f001 fcc7 	bl	800f666 <USBD_CtlError>
      ret = USBD_FAIL;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	75fb      	strb	r3, [r7, #23]
      break;
 800dcdc:	bf00      	nop
  }

  return (uint8_t)ret;
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	32b0      	adds	r2, #176	@ 0xb0
 800dd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e065      	b.n	800ddde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	32b0      	adds	r2, #176	@ 0xb0
 800dd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dd22:	78fb      	ldrb	r3, [r7, #3]
 800dd24:	f003 020f 	and.w	r2, r3, #15
 800dd28:	6879      	ldr	r1, [r7, #4]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	440b      	add	r3, r1
 800dd34:	3314      	adds	r3, #20
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d02f      	beq.n	800dd9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	f003 020f 	and.w	r2, r3, #15
 800dd42:	6879      	ldr	r1, [r7, #4]
 800dd44:	4613      	mov	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	440b      	add	r3, r1
 800dd4e:	3314      	adds	r3, #20
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	78fb      	ldrb	r3, [r7, #3]
 800dd54:	f003 010f 	and.w	r1, r3, #15
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	00db      	lsls	r3, r3, #3
 800dd5e:	440b      	add	r3, r1
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4403      	add	r3, r0
 800dd64:	331c      	adds	r3, #28
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd6c:	fb01 f303 	mul.w	r3, r1, r3
 800dd70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d112      	bne.n	800dd9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dd76:	78fb      	ldrb	r3, [r7, #3]
 800dd78:	f003 020f 	and.w	r2, r3, #15
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	440b      	add	r3, r1
 800dd88:	3314      	adds	r3, #20
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd8e:	78f9      	ldrb	r1, [r7, #3]
 800dd90:	2300      	movs	r3, #0
 800dd92:	2200      	movs	r2, #0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f002 fa20 	bl	80101da <USBD_LL_Transmit>
 800dd9a:	e01f      	b.n	800dddc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	33b0      	adds	r3, #176	@ 0xb0
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d010      	beq.n	800dddc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	33b0      	adds	r3, #176	@ 0xb0
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	68ba      	ldr	r2, [r7, #8]
 800ddce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ddd8:	78fa      	ldrb	r2, [r7, #3]
 800ddda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	32b0      	adds	r2, #176	@ 0xb0
 800ddfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	32b0      	adds	r2, #176	@ 0xb0
 800de0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800de14:	2303      	movs	r3, #3
 800de16:	e01a      	b.n	800de4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de18:	78fb      	ldrb	r3, [r7, #3]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f002 fa1e 	bl	801025e <USBD_LL_GetRxDataSize>
 800de22:	4602      	mov	r2, r0
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	33b0      	adds	r3, #176	@ 0xb0
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800de48:	4611      	mov	r1, r2
 800de4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b084      	sub	sp, #16
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	32b0      	adds	r2, #176	@ 0xb0
 800de68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de74:	2303      	movs	r3, #3
 800de76:	e024      	b.n	800dec2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	33b0      	adds	r3, #176	@ 0xb0
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d019      	beq.n	800dec0 <USBD_CDC_EP0_RxReady+0x6a>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de92:	2bff      	cmp	r3, #255	@ 0xff
 800de94:	d014      	beq.n	800dec0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	33b0      	adds	r3, #176	@ 0xb0
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800deae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800deb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	22ff      	movs	r2, #255	@ 0xff
 800debc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ded4:	2182      	movs	r1, #130	@ 0x82
 800ded6:	4818      	ldr	r0, [pc, #96]	@ (800df38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ded8:	f000 fd62 	bl	800e9a0 <USBD_GetEpDesc>
 800dedc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dede:	2101      	movs	r1, #1
 800dee0:	4815      	ldr	r0, [pc, #84]	@ (800df38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dee2:	f000 fd5d 	bl	800e9a0 <USBD_GetEpDesc>
 800dee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dee8:	2181      	movs	r1, #129	@ 0x81
 800deea:	4813      	ldr	r0, [pc, #76]	@ (800df38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800deec:	f000 fd58 	bl	800e9a0 <USBD_GetEpDesc>
 800def0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2210      	movs	r2, #16
 800defc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d006      	beq.n	800df12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	2200      	movs	r2, #0
 800df08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df0c:	711a      	strb	r2, [r3, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d006      	beq.n	800df26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df20:	711a      	strb	r2, [r3, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2243      	movs	r2, #67	@ 0x43
 800df2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df2c:	4b02      	ldr	r3, [pc, #8]	@ (800df38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20000050 	.word	0x20000050

0800df3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df44:	2182      	movs	r1, #130	@ 0x82
 800df46:	4818      	ldr	r0, [pc, #96]	@ (800dfa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df48:	f000 fd2a 	bl	800e9a0 <USBD_GetEpDesc>
 800df4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df4e:	2101      	movs	r1, #1
 800df50:	4815      	ldr	r0, [pc, #84]	@ (800dfa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df52:	f000 fd25 	bl	800e9a0 <USBD_GetEpDesc>
 800df56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800df58:	2181      	movs	r1, #129	@ 0x81
 800df5a:	4813      	ldr	r0, [pc, #76]	@ (800dfa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df5c:	f000 fd20 	bl	800e9a0 <USBD_GetEpDesc>
 800df60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2210      	movs	r2, #16
 800df6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d006      	beq.n	800df82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2200      	movs	r2, #0
 800df78:	711a      	strb	r2, [r3, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f042 0202 	orr.w	r2, r2, #2
 800df80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	711a      	strb	r2, [r3, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	f042 0202 	orr.w	r2, r2, #2
 800df94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2243      	movs	r2, #67	@ 0x43
 800df9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df9c:	4b02      	ldr	r3, [pc, #8]	@ (800dfa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3718      	adds	r7, #24
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20000050 	.word	0x20000050

0800dfac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dfb4:	2182      	movs	r1, #130	@ 0x82
 800dfb6:	4818      	ldr	r0, [pc, #96]	@ (800e018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dfb8:	f000 fcf2 	bl	800e9a0 <USBD_GetEpDesc>
 800dfbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	4815      	ldr	r0, [pc, #84]	@ (800e018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dfc2:	f000 fced 	bl	800e9a0 <USBD_GetEpDesc>
 800dfc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dfc8:	2181      	movs	r1, #129	@ 0x81
 800dfca:	4813      	ldr	r0, [pc, #76]	@ (800e018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dfcc:	f000 fce8 	bl	800e9a0 <USBD_GetEpDesc>
 800dfd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	2210      	movs	r2, #16
 800dfdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfec:	711a      	strb	r2, [r3, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d006      	beq.n	800e006 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e000:	711a      	strb	r2, [r3, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2243      	movs	r2, #67	@ 0x43
 800e00a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e00c:	4b02      	ldr	r3, [pc, #8]	@ (800e018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20000050 	.word	0x20000050

0800e01c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	220a      	movs	r2, #10
 800e028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e02a:	4b03      	ldr	r3, [pc, #12]	@ (800e038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	2000000c 	.word	0x2000000c

0800e03c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e009      	b.n	800e064 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	33b0      	adds	r3, #176	@ 0xb0
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e070:	b480      	push	{r7}
 800e072:	b087      	sub	sp, #28
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	32b0      	adds	r2, #176	@ 0xb0
 800e086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e092:	2303      	movs	r3, #3
 800e094:	e008      	b.n	800e0a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	371c      	adds	r7, #28
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	32b0      	adds	r2, #176	@ 0xb0
 800e0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e004      	b.n	800e0e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
	...

0800e0f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	32b0      	adds	r2, #176	@ 0xb0
 800e102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e106:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e108:	2301      	movs	r3, #1
 800e10a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e112:	2303      	movs	r3, #3
 800e114:	e025      	b.n	800e162 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d11f      	bne.n	800e160 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2201      	movs	r2, #1
 800e124:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e128:	4b10      	ldr	r3, [pc, #64]	@ (800e16c <USBD_CDC_TransmitPacket+0x7c>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 020f 	and.w	r2, r3, #15
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	4613      	mov	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4403      	add	r3, r0
 800e142:	3314      	adds	r3, #20
 800e144:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e146:	4b09      	ldr	r3, [pc, #36]	@ (800e16c <USBD_CDC_TransmitPacket+0x7c>)
 800e148:	7819      	ldrb	r1, [r3, #0]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f002 f83f 	bl	80101da <USBD_LL_Transmit>

    ret = USBD_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20000093 	.word	0x20000093

0800e170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	32b0      	adds	r2, #176	@ 0xb0
 800e182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e186:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	32b0      	adds	r2, #176	@ 0xb0
 800e192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e018      	b.n	800e1d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	7c1b      	ldrb	r3, [r3, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e1d8 <USBD_CDC_ReceivePacket+0x68>)
 800e1a8:	7819      	ldrb	r1, [r3, #0]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e1b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f002 f831 	bl	801021c <USBD_LL_PrepareReceive>
 800e1ba:	e008      	b.n	800e1ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e1bc:	4b06      	ldr	r3, [pc, #24]	@ (800e1d8 <USBD_CDC_ReceivePacket+0x68>)
 800e1be:	7819      	ldrb	r1, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e1c6:	2340      	movs	r3, #64	@ 0x40
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f002 f827 	bl	801021c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	20000094 	.word	0x20000094

0800e1dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e01f      	b.n	800e234 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	79fa      	ldrb	r2, [r7, #7]
 800e226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f001 fe9d 	bl	800ff68 <USBD_LL_Init>
 800e22e:	4603      	mov	r3, r0
 800e230:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e232:	7dfb      	ldrb	r3, [r7, #23]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e246:	2300      	movs	r3, #0
 800e248:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e250:	2303      	movs	r3, #3
 800e252:	e025      	b.n	800e2a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	32ae      	adds	r2, #174	@ 0xae
 800e266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00f      	beq.n	800e290 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	32ae      	adds	r2, #174	@ 0xae
 800e27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e280:	f107 020e 	add.w	r2, r7, #14
 800e284:	4610      	mov	r0, r2
 800e286:	4798      	blx	r3
 800e288:	4602      	mov	r2, r0
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f001 fea9 	bl	8010008 <USBD_LL_Start>
 800e2b6:	4603      	mov	r3, r0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	460b      	mov	r3, r1
 800e2e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d009      	beq.n	800e304 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	78fa      	ldrb	r2, [r7, #3]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	4798      	blx	r3
 800e300:	4603      	mov	r3, r0
 800e302:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e304:	7bfb      	ldrb	r3, [r7, #15]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	78fa      	ldrb	r2, [r7, #3]
 800e328:	4611      	mov	r1, r2
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e334:	2303      	movs	r3, #3
 800e336:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e338:	7bfb      	ldrb	r3, [r7, #15]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	4618      	mov	r0, r3
 800e356:	f001 f94c 	bl	800f5f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e368:	461a      	mov	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e376:	f003 031f 	and.w	r3, r3, #31
 800e37a:	2b02      	cmp	r3, #2
 800e37c:	d01a      	beq.n	800e3b4 <USBD_LL_SetupStage+0x72>
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d822      	bhi.n	800e3c8 <USBD_LL_SetupStage+0x86>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d002      	beq.n	800e38c <USBD_LL_SetupStage+0x4a>
 800e386:	2b01      	cmp	r3, #1
 800e388:	d00a      	beq.n	800e3a0 <USBD_LL_SetupStage+0x5e>
 800e38a:	e01d      	b.n	800e3c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fb77 	bl	800ea88 <USBD_StdDevReq>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73fb      	strb	r3, [r7, #15]
      break;
 800e39e:	e020      	b.n	800e3e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fbdf 	bl	800eb6c <USBD_StdItfReq>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e3b2:	e016      	b.n	800e3e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fc41 	bl	800ec44 <USBD_StdEPReq>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800e3c6:	e00c      	b.n	800e3e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 fe76 	bl	80100c8 <USBD_LL_StallEP>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]
      break;
 800e3e0:	bf00      	nop
  }

  return ret;
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e3fe:	7afb      	ldrb	r3, [r7, #11]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d177      	bne.n	800e4f4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e40a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e412:	2b03      	cmp	r3, #3
 800e414:	f040 80a1 	bne.w	800e55a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	8992      	ldrh	r2, [r2, #12]
 800e420:	4293      	cmp	r3, r2
 800e422:	d91c      	bls.n	800e45e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	693a      	ldr	r2, [r7, #16]
 800e42a:	8992      	ldrh	r2, [r2, #12]
 800e42c:	1a9a      	subs	r2, r3, r2
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	8992      	ldrh	r2, [r2, #12]
 800e43a:	441a      	add	r2, r3
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	6919      	ldr	r1, [r3, #16]
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	899b      	ldrh	r3, [r3, #12]
 800e448:	461a      	mov	r2, r3
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	4293      	cmp	r3, r2
 800e450:	bf38      	it	cc
 800e452:	4613      	movcc	r3, r2
 800e454:	461a      	mov	r2, r3
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f001 f9d2 	bl	800f800 <USBD_CtlContinueRx>
 800e45c:	e07d      	b.n	800e55a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e464:	f003 031f 	and.w	r3, r3, #31
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d014      	beq.n	800e496 <USBD_LL_DataOutStage+0xaa>
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d81d      	bhi.n	800e4ac <USBD_LL_DataOutStage+0xc0>
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <USBD_LL_DataOutStage+0x8e>
 800e474:	2b01      	cmp	r3, #1
 800e476:	d003      	beq.n	800e480 <USBD_LL_DataOutStage+0x94>
 800e478:	e018      	b.n	800e4ac <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e47a:	2300      	movs	r3, #0
 800e47c:	75bb      	strb	r3, [r7, #22]
            break;
 800e47e:	e018      	b.n	800e4b2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e486:	b2db      	uxtb	r3, r3
 800e488:	4619      	mov	r1, r3
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f000 fa6e 	bl	800e96c <USBD_CoreFindIF>
 800e490:	4603      	mov	r3, r0
 800e492:	75bb      	strb	r3, [r7, #22]
            break;
 800e494:	e00d      	b.n	800e4b2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	4619      	mov	r1, r3
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f000 fa70 	bl	800e986 <USBD_CoreFindEP>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	75bb      	strb	r3, [r7, #22]
            break;
 800e4aa:	e002      	b.n	800e4b2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75bb      	strb	r3, [r7, #22]
            break;
 800e4b0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e4b2:	7dbb      	ldrb	r3, [r7, #22]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d119      	bne.n	800e4ec <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d113      	bne.n	800e4ec <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e4c4:	7dba      	ldrb	r2, [r7, #22]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	32ae      	adds	r2, #174	@ 0xae
 800e4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00b      	beq.n	800e4ec <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e4d4:	7dba      	ldrb	r2, [r7, #22]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e4dc:	7dba      	ldrb	r2, [r7, #22]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	32ae      	adds	r2, #174	@ 0xae
 800e4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f001 f998 	bl	800f822 <USBD_CtlSendStatus>
 800e4f2:	e032      	b.n	800e55a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e4f4:	7afb      	ldrb	r3, [r7, #11]
 800e4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fa41 	bl	800e986 <USBD_CoreFindEP>
 800e504:	4603      	mov	r3, r0
 800e506:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e508:	7dbb      	ldrb	r3, [r7, #22]
 800e50a:	2bff      	cmp	r3, #255	@ 0xff
 800e50c:	d025      	beq.n	800e55a <USBD_LL_DataOutStage+0x16e>
 800e50e:	7dbb      	ldrb	r3, [r7, #22]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d122      	bne.n	800e55a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d117      	bne.n	800e550 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e520:	7dba      	ldrb	r2, [r7, #22]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	32ae      	adds	r2, #174	@ 0xae
 800e526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00f      	beq.n	800e550 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e530:	7dba      	ldrb	r2, [r7, #22]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e538:	7dba      	ldrb	r2, [r7, #22]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	32ae      	adds	r2, #174	@ 0xae
 800e53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e542:	699b      	ldr	r3, [r3, #24]
 800e544:	7afa      	ldrb	r2, [r7, #11]
 800e546:	4611      	mov	r1, r2
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	4798      	blx	r3
 800e54c:	4603      	mov	r3, r0
 800e54e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	e000      	b.n	800e55c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3718      	adds	r7, #24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	460b      	mov	r3, r1
 800e56e:	607a      	str	r2, [r7, #4]
 800e570:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e572:	7afb      	ldrb	r3, [r7, #11]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d178      	bne.n	800e66a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	3314      	adds	r3, #20
 800e57c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e584:	2b02      	cmp	r3, #2
 800e586:	d163      	bne.n	800e650 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	693a      	ldr	r2, [r7, #16]
 800e58e:	8992      	ldrh	r2, [r2, #12]
 800e590:	4293      	cmp	r3, r2
 800e592:	d91c      	bls.n	800e5ce <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	693a      	ldr	r2, [r7, #16]
 800e59a:	8992      	ldrh	r2, [r2, #12]
 800e59c:	1a9a      	subs	r2, r3, r2
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	8992      	ldrh	r2, [r2, #12]
 800e5aa:	441a      	add	r2, r3
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	6919      	ldr	r1, [r3, #16]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f001 f8ee 	bl	800f79c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f001 fe28 	bl	801021c <USBD_LL_PrepareReceive>
 800e5cc:	e040      	b.n	800e650 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	899b      	ldrh	r3, [r3, #12]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d11c      	bne.n	800e616 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	693a      	ldr	r2, [r7, #16]
 800e5e2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d316      	bcc.n	800e616 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d20f      	bcs.n	800e616 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f001 f8ce 	bl	800f79c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e608:	2300      	movs	r3, #0
 800e60a:	2200      	movs	r2, #0
 800e60c:	2100      	movs	r1, #0
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f001 fe04 	bl	801021c <USBD_LL_PrepareReceive>
 800e614:	e01c      	b.n	800e650 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d10f      	bne.n	800e642 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d009      	beq.n	800e642 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e642:	2180      	movs	r1, #128	@ 0x80
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f001 fd3f 	bl	80100c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f001 f8fc 	bl	800f848 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d03a      	beq.n	800e6d0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff fe30 	bl	800e2c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e668:	e032      	b.n	800e6d0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e66a:	7afb      	ldrb	r3, [r7, #11]
 800e66c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e670:	b2db      	uxtb	r3, r3
 800e672:	4619      	mov	r1, r3
 800e674:	68f8      	ldr	r0, [r7, #12]
 800e676:	f000 f986 	bl	800e986 <USBD_CoreFindEP>
 800e67a:	4603      	mov	r3, r0
 800e67c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
 800e680:	2bff      	cmp	r3, #255	@ 0xff
 800e682:	d025      	beq.n	800e6d0 <USBD_LL_DataInStage+0x16c>
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d122      	bne.n	800e6d0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b03      	cmp	r3, #3
 800e694:	d11c      	bne.n	800e6d0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e696:	7dfa      	ldrb	r2, [r7, #23]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	32ae      	adds	r2, #174	@ 0xae
 800e69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d014      	beq.n	800e6d0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e6a6:	7dfa      	ldrb	r2, [r7, #23]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e6ae:	7dfa      	ldrb	r2, [r7, #23]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	32ae      	adds	r2, #174	@ 0xae
 800e6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	7afa      	ldrb	r2, [r7, #11]
 800e6bc:	4611      	mov	r1, r2
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	4798      	blx	r3
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e6c6:	7dbb      	ldrb	r3, [r7, #22]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e6cc:	7dbb      	ldrb	r3, [r7, #22]
 800e6ce:	e000      	b.n	800e6d2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b084      	sub	sp, #16
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e712:	2b00      	cmp	r3, #0
 800e714:	d014      	beq.n	800e740 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00e      	beq.n	800e740 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	6852      	ldr	r2, [r2, #4]
 800e72e:	b2d2      	uxtb	r2, r2
 800e730:	4611      	mov	r1, r2
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	4798      	blx	r3
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d001      	beq.n	800e740 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e740:	2340      	movs	r3, #64	@ 0x40
 800e742:	2200      	movs	r2, #0
 800e744:	2100      	movs	r1, #0
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f001 fc79 	bl	801003e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2240      	movs	r2, #64	@ 0x40
 800e758:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e75c:	2340      	movs	r3, #64	@ 0x40
 800e75e:	2200      	movs	r2, #0
 800e760:	2180      	movs	r1, #128	@ 0x80
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f001 fc6b 	bl	801003e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2240      	movs	r2, #64	@ 0x40
 800e774:	841a      	strh	r2, [r3, #32]

  return ret;
 800e776:	7bfb      	ldrb	r3, [r7, #15]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	78fa      	ldrb	r2, [r7, #3]
 800e790:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	2b04      	cmp	r3, #4
 800e7b2:	d006      	beq.n	800e7c2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2204      	movs	r2, #4
 800e7c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b04      	cmp	r3, #4
 800e7ea:	d106      	bne.n	800e7fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d110      	bne.n	800e83e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00b      	beq.n	800e83e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e82c:	69db      	ldr	r3, [r3, #28]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d005      	beq.n	800e83e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	460b      	mov	r3, r1
 800e852:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	32ae      	adds	r2, #174	@ 0xae
 800e85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e866:	2303      	movs	r3, #3
 800e868:	e01c      	b.n	800e8a4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e870:	b2db      	uxtb	r3, r3
 800e872:	2b03      	cmp	r3, #3
 800e874:	d115      	bne.n	800e8a2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	32ae      	adds	r2, #174	@ 0xae
 800e880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00b      	beq.n	800e8a2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	32ae      	adds	r2, #174	@ 0xae
 800e894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	78fa      	ldrb	r2, [r7, #3]
 800e89c:	4611      	mov	r1, r2
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	32ae      	adds	r2, #174	@ 0xae
 800e8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d101      	bne.n	800e8ce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e01c      	b.n	800e908 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d115      	bne.n	800e906 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	32ae      	adds	r2, #174	@ 0xae
 800e8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00b      	beq.n	800e906 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	32ae      	adds	r2, #174	@ 0xae
 800e8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8fe:	78fa      	ldrb	r2, [r7, #3]
 800e900:	4611      	mov	r1, r2
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00e      	beq.n	800e962 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	6852      	ldr	r2, [r2, #4]
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	4611      	mov	r1, r2
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	4798      	blx	r3
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e95e:	2303      	movs	r3, #3
 800e960:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e962:	7bfb      	ldrb	r3, [r7, #15]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e978:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	370c      	adds	r7, #12
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e986:	b480      	push	{r7}
 800e988:	b083      	sub	sp, #12
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e992:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e994:	4618      	mov	r0, r3
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	885b      	ldrh	r3, [r3, #2]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	7812      	ldrb	r2, [r2, #0]
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d91f      	bls.n	800ea06 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e9cc:	e013      	b.n	800e9f6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e9ce:	f107 030a 	add.w	r3, r7, #10
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6978      	ldr	r0, [r7, #20]
 800e9d6:	f000 f81b 	bl	800ea10 <USBD_GetNextDesc>
 800e9da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	2b05      	cmp	r3, #5
 800e9e2:	d108      	bne.n	800e9f6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	789b      	ldrb	r3, [r3, #2]
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d008      	beq.n	800ea04 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	885b      	ldrh	r3, [r3, #2]
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	897b      	ldrh	r3, [r7, #10]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d8e5      	bhi.n	800e9ce <USBD_GetEpDesc+0x2e>
 800ea02:	e000      	b.n	800ea06 <USBD_GetEpDesc+0x66>
          break;
 800ea04:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ea06:	693b      	ldr	r3, [r7, #16]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	881b      	ldrh	r3, [r3, #0]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	7812      	ldrb	r2, [r2, #0]
 800ea26:	4413      	add	r3, r2
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	461a      	mov	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4413      	add	r3, r2
 800ea38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3714      	adds	r7, #20
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ea6a:	021b      	lsls	r3, r3, #8
 800ea6c:	b21a      	sxth	r2, r3
 800ea6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea72:	4313      	orrs	r3, r2
 800ea74:	b21b      	sxth	r3, r3
 800ea76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea78:	89fb      	ldrh	r3, [r7, #14]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	371c      	adds	r7, #28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
	...

0800ea88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea9e:	2b40      	cmp	r3, #64	@ 0x40
 800eaa0:	d005      	beq.n	800eaae <USBD_StdDevReq+0x26>
 800eaa2:	2b40      	cmp	r3, #64	@ 0x40
 800eaa4:	d857      	bhi.n	800eb56 <USBD_StdDevReq+0xce>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00f      	beq.n	800eaca <USBD_StdDevReq+0x42>
 800eaaa:	2b20      	cmp	r3, #32
 800eaac:	d153      	bne.n	800eb56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	32ae      	adds	r2, #174	@ 0xae
 800eab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	4798      	blx	r3
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
      break;
 800eac8:	e04a      	b.n	800eb60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	785b      	ldrb	r3, [r3, #1]
 800eace:	2b09      	cmp	r3, #9
 800ead0:	d83b      	bhi.n	800eb4a <USBD_StdDevReq+0xc2>
 800ead2:	a201      	add	r2, pc, #4	@ (adr r2, 800ead8 <USBD_StdDevReq+0x50>)
 800ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead8:	0800eb2d 	.word	0x0800eb2d
 800eadc:	0800eb41 	.word	0x0800eb41
 800eae0:	0800eb4b 	.word	0x0800eb4b
 800eae4:	0800eb37 	.word	0x0800eb37
 800eae8:	0800eb4b 	.word	0x0800eb4b
 800eaec:	0800eb0b 	.word	0x0800eb0b
 800eaf0:	0800eb01 	.word	0x0800eb01
 800eaf4:	0800eb4b 	.word	0x0800eb4b
 800eaf8:	0800eb23 	.word	0x0800eb23
 800eafc:	0800eb15 	.word	0x0800eb15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fa3e 	bl	800ef84 <USBD_GetDescriptor>
          break;
 800eb08:	e024      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fbcd 	bl	800f2ac <USBD_SetAddress>
          break;
 800eb12:	e01f      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 fc0c 	bl	800f334 <USBD_SetConfig>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73fb      	strb	r3, [r7, #15]
          break;
 800eb20:	e018      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fcaf 	bl	800f488 <USBD_GetConfig>
          break;
 800eb2a:	e013      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fce0 	bl	800f4f4 <USBD_GetStatus>
          break;
 800eb34:	e00e      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 fd0f 	bl	800f55c <USBD_SetFeature>
          break;
 800eb3e:	e009      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 fd33 	bl	800f5ae <USBD_ClrFeature>
          break;
 800eb48:	e004      	b.n	800eb54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eb4a:	6839      	ldr	r1, [r7, #0]
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 fd8a 	bl	800f666 <USBD_CtlError>
          break;
 800eb52:	bf00      	nop
      }
      break;
 800eb54:	e004      	b.n	800eb60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 fd84 	bl	800f666 <USBD_CtlError>
      break;
 800eb5e:	bf00      	nop
  }

  return ret;
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop

0800eb6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb76:	2300      	movs	r3, #0
 800eb78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb82:	2b40      	cmp	r3, #64	@ 0x40
 800eb84:	d005      	beq.n	800eb92 <USBD_StdItfReq+0x26>
 800eb86:	2b40      	cmp	r3, #64	@ 0x40
 800eb88:	d852      	bhi.n	800ec30 <USBD_StdItfReq+0xc4>
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <USBD_StdItfReq+0x26>
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	d14e      	bne.n	800ec30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d840      	bhi.n	800ec22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	889b      	ldrh	r3, [r3, #4]
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d836      	bhi.n	800ec18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	889b      	ldrh	r3, [r3, #4]
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff feda 	bl	800e96c <USBD_CoreFindIF>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebbc:	7bbb      	ldrb	r3, [r7, #14]
 800ebbe:	2bff      	cmp	r3, #255	@ 0xff
 800ebc0:	d01d      	beq.n	800ebfe <USBD_StdItfReq+0x92>
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d11a      	bne.n	800ebfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ebc8:	7bba      	ldrb	r2, [r7, #14]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	32ae      	adds	r2, #174	@ 0xae
 800ebce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00f      	beq.n	800ebf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ebd8:	7bba      	ldrb	r2, [r7, #14]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebe0:	7bba      	ldrb	r2, [r7, #14]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	32ae      	adds	r2, #174	@ 0xae
 800ebe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	4798      	blx	r3
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebf6:	e004      	b.n	800ec02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebfc:	e001      	b.n	800ec02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ebfe:	2303      	movs	r3, #3
 800ec00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	88db      	ldrh	r3, [r3, #6]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d110      	bne.n	800ec2c <USBD_StdItfReq+0xc0>
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10d      	bne.n	800ec2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 fe06 	bl	800f822 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ec16:	e009      	b.n	800ec2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fd23 	bl	800f666 <USBD_CtlError>
          break;
 800ec20:	e004      	b.n	800ec2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fd1e 	bl	800f666 <USBD_CtlError>
          break;
 800ec2a:	e000      	b.n	800ec2e <USBD_StdItfReq+0xc2>
          break;
 800ec2c:	bf00      	nop
      }
      break;
 800ec2e:	e004      	b.n	800ec3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ec30:	6839      	ldr	r1, [r7, #0]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 fd17 	bl	800f666 <USBD_CtlError>
      break;
 800ec38:	bf00      	nop
  }

  return ret;
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	889b      	ldrh	r3, [r3, #4]
 800ec56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec60:	2b40      	cmp	r3, #64	@ 0x40
 800ec62:	d007      	beq.n	800ec74 <USBD_StdEPReq+0x30>
 800ec64:	2b40      	cmp	r3, #64	@ 0x40
 800ec66:	f200 8181 	bhi.w	800ef6c <USBD_StdEPReq+0x328>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d02a      	beq.n	800ecc4 <USBD_StdEPReq+0x80>
 800ec6e:	2b20      	cmp	r3, #32
 800ec70:	f040 817c 	bne.w	800ef6c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ec74:	7bbb      	ldrb	r3, [r7, #14]
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff fe84 	bl	800e986 <USBD_CoreFindEP>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec82:	7b7b      	ldrb	r3, [r7, #13]
 800ec84:	2bff      	cmp	r3, #255	@ 0xff
 800ec86:	f000 8176 	beq.w	800ef76 <USBD_StdEPReq+0x332>
 800ec8a:	7b7b      	ldrb	r3, [r7, #13]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f040 8172 	bne.w	800ef76 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ec92:	7b7a      	ldrb	r2, [r7, #13]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ec9a:	7b7a      	ldrb	r2, [r7, #13]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	32ae      	adds	r2, #174	@ 0xae
 800eca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 8165 	beq.w	800ef76 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ecac:	7b7a      	ldrb	r2, [r7, #13]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	32ae      	adds	r2, #174	@ 0xae
 800ecb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	6839      	ldr	r1, [r7, #0]
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	4798      	blx	r3
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ecc2:	e158      	b.n	800ef76 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	785b      	ldrb	r3, [r3, #1]
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	d008      	beq.n	800ecde <USBD_StdEPReq+0x9a>
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	f300 8147 	bgt.w	800ef60 <USBD_StdEPReq+0x31c>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 809b 	beq.w	800ee0e <USBD_StdEPReq+0x1ca>
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d03c      	beq.n	800ed56 <USBD_StdEPReq+0x112>
 800ecdc:	e140      	b.n	800ef60 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d002      	beq.n	800ecf0 <USBD_StdEPReq+0xac>
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d016      	beq.n	800ed1c <USBD_StdEPReq+0xd8>
 800ecee:	e02c      	b.n	800ed4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecf0:	7bbb      	ldrb	r3, [r7, #14]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00d      	beq.n	800ed12 <USBD_StdEPReq+0xce>
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
 800ecf8:	2b80      	cmp	r3, #128	@ 0x80
 800ecfa:	d00a      	beq.n	800ed12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecfc:	7bbb      	ldrb	r3, [r7, #14]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f001 f9e1 	bl	80100c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed06:	2180      	movs	r1, #128	@ 0x80
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f001 f9dd 	bl	80100c8 <USBD_LL_StallEP>
 800ed0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed10:	e020      	b.n	800ed54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fca6 	bl	800f666 <USBD_CtlError>
              break;
 800ed1a:	e01b      	b.n	800ed54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	885b      	ldrh	r3, [r3, #2]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10e      	bne.n	800ed42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00b      	beq.n	800ed42 <USBD_StdEPReq+0xfe>
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
 800ed2c:	2b80      	cmp	r3, #128	@ 0x80
 800ed2e:	d008      	beq.n	800ed42 <USBD_StdEPReq+0xfe>
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	88db      	ldrh	r3, [r3, #6]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d104      	bne.n	800ed42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed38:	7bbb      	ldrb	r3, [r7, #14]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f001 f9c3 	bl	80100c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fd6d 	bl	800f822 <USBD_CtlSendStatus>

              break;
 800ed48:	e004      	b.n	800ed54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ed4a:	6839      	ldr	r1, [r7, #0]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fc8a 	bl	800f666 <USBD_CtlError>
              break;
 800ed52:	bf00      	nop
          }
          break;
 800ed54:	e109      	b.n	800ef6a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d002      	beq.n	800ed68 <USBD_StdEPReq+0x124>
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d016      	beq.n	800ed94 <USBD_StdEPReq+0x150>
 800ed66:	e04b      	b.n	800ee00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed68:	7bbb      	ldrb	r3, [r7, #14]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00d      	beq.n	800ed8a <USBD_StdEPReq+0x146>
 800ed6e:	7bbb      	ldrb	r3, [r7, #14]
 800ed70:	2b80      	cmp	r3, #128	@ 0x80
 800ed72:	d00a      	beq.n	800ed8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f001 f9a5 	bl	80100c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed7e:	2180      	movs	r1, #128	@ 0x80
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f001 f9a1 	bl	80100c8 <USBD_LL_StallEP>
 800ed86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed88:	e040      	b.n	800ee0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fc6a 	bl	800f666 <USBD_CtlError>
              break;
 800ed92:	e03b      	b.n	800ee0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	885b      	ldrh	r3, [r3, #2]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d136      	bne.n	800ee0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
 800ed9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d004      	beq.n	800edb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eda6:	7bbb      	ldrb	r3, [r7, #14]
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f001 f9ab 	bl	8010106 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fd36 	bl	800f822 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800edb6:	7bbb      	ldrb	r3, [r7, #14]
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fde3 	bl	800e986 <USBD_CoreFindEP>
 800edc0:	4603      	mov	r3, r0
 800edc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edc4:	7b7b      	ldrb	r3, [r7, #13]
 800edc6:	2bff      	cmp	r3, #255	@ 0xff
 800edc8:	d01f      	beq.n	800ee0a <USBD_StdEPReq+0x1c6>
 800edca:	7b7b      	ldrb	r3, [r7, #13]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d11c      	bne.n	800ee0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800edd0:	7b7a      	ldrb	r2, [r7, #13]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800edd8:	7b7a      	ldrb	r2, [r7, #13]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	32ae      	adds	r2, #174	@ 0xae
 800edde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d010      	beq.n	800ee0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ede8:	7b7a      	ldrb	r2, [r7, #13]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	32ae      	adds	r2, #174	@ 0xae
 800edee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	6839      	ldr	r1, [r7, #0]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	4798      	blx	r3
 800edfa:	4603      	mov	r3, r0
 800edfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800edfe:	e004      	b.n	800ee0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fc2f 	bl	800f666 <USBD_CtlError>
              break;
 800ee08:	e000      	b.n	800ee0c <USBD_StdEPReq+0x1c8>
              break;
 800ee0a:	bf00      	nop
          }
          break;
 800ee0c:	e0ad      	b.n	800ef6a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d002      	beq.n	800ee20 <USBD_StdEPReq+0x1dc>
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d033      	beq.n	800ee86 <USBD_StdEPReq+0x242>
 800ee1e:	e099      	b.n	800ef54 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d007      	beq.n	800ee36 <USBD_StdEPReq+0x1f2>
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	2b80      	cmp	r3, #128	@ 0x80
 800ee2a:	d004      	beq.n	800ee36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ee2c:	6839      	ldr	r1, [r7, #0]
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 fc19 	bl	800f666 <USBD_CtlError>
                break;
 800ee34:	e093      	b.n	800ef5e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	da0b      	bge.n	800ee56 <USBD_StdEPReq+0x212>
 800ee3e:	7bbb      	ldrb	r3, [r7, #14]
 800ee40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee44:	4613      	mov	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	3310      	adds	r3, #16
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	4413      	add	r3, r2
 800ee52:	3304      	adds	r3, #4
 800ee54:	e00b      	b.n	800ee6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
 800ee58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2200      	movs	r2, #0
 800ee74:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	330e      	adds	r3, #14
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fc6e 	bl	800f760 <USBD_CtlSendData>
              break;
 800ee84:	e06b      	b.n	800ef5e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ee86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	da11      	bge.n	800eeb2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	f003 020f 	and.w	r2, r3, #15
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	440b      	add	r3, r1
 800eea0:	3323      	adds	r3, #35	@ 0x23
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d117      	bne.n	800eed8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fbdb 	bl	800f666 <USBD_CtlError>
                  break;
 800eeb0:	e055      	b.n	800ef5e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eeb2:	7bbb      	ldrb	r3, [r7, #14]
 800eeb4:	f003 020f 	and.w	r2, r3, #15
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	4613      	mov	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	4413      	add	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	440b      	add	r3, r1
 800eec4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d104      	bne.n	800eed8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fbc8 	bl	800f666 <USBD_CtlError>
                  break;
 800eed6:	e042      	b.n	800ef5e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da0b      	bge.n	800eef8 <USBD_StdEPReq+0x2b4>
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
 800eee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	3310      	adds	r3, #16
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	4413      	add	r3, r2
 800eef4:	3304      	adds	r3, #4
 800eef6:	e00b      	b.n	800ef10 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eefe:	4613      	mov	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4413      	add	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	3304      	adds	r3, #4
 800ef10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef12:	7bbb      	ldrb	r3, [r7, #14]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <USBD_StdEPReq+0x2da>
 800ef18:	7bbb      	ldrb	r3, [r7, #14]
 800ef1a:	2b80      	cmp	r3, #128	@ 0x80
 800ef1c:	d103      	bne.n	800ef26 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2200      	movs	r2, #0
 800ef22:	739a      	strb	r2, [r3, #14]
 800ef24:	e00e      	b.n	800ef44 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f001 f90a 	bl	8010144 <USBD_LL_IsStallEP>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	739a      	strb	r2, [r3, #14]
 800ef3c:	e002      	b.n	800ef44 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2200      	movs	r2, #0
 800ef42:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	330e      	adds	r3, #14
 800ef48:	2202      	movs	r2, #2
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fc07 	bl	800f760 <USBD_CtlSendData>
              break;
 800ef52:	e004      	b.n	800ef5e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fb85 	bl	800f666 <USBD_CtlError>
              break;
 800ef5c:	bf00      	nop
          }
          break;
 800ef5e:	e004      	b.n	800ef6a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ef60:	6839      	ldr	r1, [r7, #0]
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 fb7f 	bl	800f666 <USBD_CtlError>
          break;
 800ef68:	bf00      	nop
      }
      break;
 800ef6a:	e005      	b.n	800ef78 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fb79 	bl	800f666 <USBD_CtlError>
      break;
 800ef74:	e000      	b.n	800ef78 <USBD_StdEPReq+0x334>
      break;
 800ef76:	bf00      	nop
  }

  return ret;
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef92:	2300      	movs	r3, #0
 800ef94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef96:	2300      	movs	r3, #0
 800ef98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	885b      	ldrh	r3, [r3, #2]
 800ef9e:	0a1b      	lsrs	r3, r3, #8
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	3b01      	subs	r3, #1
 800efa4:	2b0e      	cmp	r3, #14
 800efa6:	f200 8152 	bhi.w	800f24e <USBD_GetDescriptor+0x2ca>
 800efaa:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <USBD_GetDescriptor+0x2c>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800f021 	.word	0x0800f021
 800efb4:	0800f039 	.word	0x0800f039
 800efb8:	0800f079 	.word	0x0800f079
 800efbc:	0800f24f 	.word	0x0800f24f
 800efc0:	0800f24f 	.word	0x0800f24f
 800efc4:	0800f1ef 	.word	0x0800f1ef
 800efc8:	0800f21b 	.word	0x0800f21b
 800efcc:	0800f24f 	.word	0x0800f24f
 800efd0:	0800f24f 	.word	0x0800f24f
 800efd4:	0800f24f 	.word	0x0800f24f
 800efd8:	0800f24f 	.word	0x0800f24f
 800efdc:	0800f24f 	.word	0x0800f24f
 800efe0:	0800f24f 	.word	0x0800f24f
 800efe4:	0800f24f 	.word	0x0800f24f
 800efe8:	0800efed 	.word	0x0800efed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eff2:	69db      	ldr	r3, [r3, #28]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00b      	beq.n	800f010 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800effe:	69db      	ldr	r3, [r3, #28]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	7c12      	ldrb	r2, [r2, #16]
 800f004:	f107 0108 	add.w	r1, r7, #8
 800f008:	4610      	mov	r0, r2
 800f00a:	4798      	blx	r3
 800f00c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f00e:	e126      	b.n	800f25e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f010:	6839      	ldr	r1, [r7, #0]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fb27 	bl	800f666 <USBD_CtlError>
        err++;
 800f018:	7afb      	ldrb	r3, [r7, #11]
 800f01a:	3301      	adds	r3, #1
 800f01c:	72fb      	strb	r3, [r7, #11]
      break;
 800f01e:	e11e      	b.n	800f25e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	7c12      	ldrb	r2, [r2, #16]
 800f02c:	f107 0108 	add.w	r1, r7, #8
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
 800f034:	60f8      	str	r0, [r7, #12]
      break;
 800f036:	e112      	b.n	800f25e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	7c1b      	ldrb	r3, [r3, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10d      	bne.n	800f05c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f048:	f107 0208 	add.w	r2, r7, #8
 800f04c:	4610      	mov	r0, r2
 800f04e:	4798      	blx	r3
 800f050:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	3301      	adds	r3, #1
 800f056:	2202      	movs	r2, #2
 800f058:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f05a:	e100      	b.n	800f25e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f064:	f107 0208 	add.w	r2, r7, #8
 800f068:	4610      	mov	r0, r2
 800f06a:	4798      	blx	r3
 800f06c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3301      	adds	r3, #1
 800f072:	2202      	movs	r2, #2
 800f074:	701a      	strb	r2, [r3, #0]
      break;
 800f076:	e0f2      	b.n	800f25e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	885b      	ldrh	r3, [r3, #2]
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b05      	cmp	r3, #5
 800f080:	f200 80ac 	bhi.w	800f1dc <USBD_GetDescriptor+0x258>
 800f084:	a201      	add	r2, pc, #4	@ (adr r2, 800f08c <USBD_GetDescriptor+0x108>)
 800f086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08a:	bf00      	nop
 800f08c:	0800f0a5 	.word	0x0800f0a5
 800f090:	0800f0d9 	.word	0x0800f0d9
 800f094:	0800f10d 	.word	0x0800f10d
 800f098:	0800f141 	.word	0x0800f141
 800f09c:	0800f175 	.word	0x0800f175
 800f0a0:	0800f1a9 	.word	0x0800f1a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00b      	beq.n	800f0c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	7c12      	ldrb	r2, [r2, #16]
 800f0bc:	f107 0108 	add.w	r1, r7, #8
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	4798      	blx	r3
 800f0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0c6:	e091      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 facb 	bl	800f666 <USBD_CtlError>
            err++;
 800f0d0:	7afb      	ldrb	r3, [r7, #11]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f0d6:	e089      	b.n	800f1ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00b      	beq.n	800f0fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	7c12      	ldrb	r2, [r2, #16]
 800f0f0:	f107 0108 	add.w	r1, r7, #8
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
 800f0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0fa:	e077      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f0fc:	6839      	ldr	r1, [r7, #0]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fab1 	bl	800f666 <USBD_CtlError>
            err++;
 800f104:	7afb      	ldrb	r3, [r7, #11]
 800f106:	3301      	adds	r3, #1
 800f108:	72fb      	strb	r3, [r7, #11]
          break;
 800f10a:	e06f      	b.n	800f1ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00b      	beq.n	800f130 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	7c12      	ldrb	r2, [r2, #16]
 800f124:	f107 0108 	add.w	r1, r7, #8
 800f128:	4610      	mov	r0, r2
 800f12a:	4798      	blx	r3
 800f12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f12e:	e05d      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fa97 	bl	800f666 <USBD_CtlError>
            err++;
 800f138:	7afb      	ldrb	r3, [r7, #11]
 800f13a:	3301      	adds	r3, #1
 800f13c:	72fb      	strb	r3, [r7, #11]
          break;
 800f13e:	e055      	b.n	800f1ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00b      	beq.n	800f164 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	7c12      	ldrb	r2, [r2, #16]
 800f158:	f107 0108 	add.w	r1, r7, #8
 800f15c:	4610      	mov	r0, r2
 800f15e:	4798      	blx	r3
 800f160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f162:	e043      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fa7d 	bl	800f666 <USBD_CtlError>
            err++;
 800f16c:	7afb      	ldrb	r3, [r7, #11]
 800f16e:	3301      	adds	r3, #1
 800f170:	72fb      	strb	r3, [r7, #11]
          break;
 800f172:	e03b      	b.n	800f1ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00b      	beq.n	800f198 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f186:	695b      	ldr	r3, [r3, #20]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	7c12      	ldrb	r2, [r2, #16]
 800f18c:	f107 0108 	add.w	r1, r7, #8
 800f190:	4610      	mov	r0, r2
 800f192:	4798      	blx	r3
 800f194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f196:	e029      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fa63 	bl	800f666 <USBD_CtlError>
            err++;
 800f1a0:	7afb      	ldrb	r3, [r7, #11]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800f1a6:	e021      	b.n	800f1ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ae:	699b      	ldr	r3, [r3, #24]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00b      	beq.n	800f1cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	7c12      	ldrb	r2, [r2, #16]
 800f1c0:	f107 0108 	add.w	r1, r7, #8
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	4798      	blx	r3
 800f1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1ca:	e00f      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fa49 	bl	800f666 <USBD_CtlError>
            err++;
 800f1d4:	7afb      	ldrb	r3, [r7, #11]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f1da:	e007      	b.n	800f1ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f1dc:	6839      	ldr	r1, [r7, #0]
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 fa41 	bl	800f666 <USBD_CtlError>
          err++;
 800f1e4:	7afb      	ldrb	r3, [r7, #11]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f1ea:	bf00      	nop
      }
      break;
 800f1ec:	e037      	b.n	800f25e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7c1b      	ldrb	r3, [r3, #16]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1fe:	f107 0208 	add.w	r2, r7, #8
 800f202:	4610      	mov	r0, r2
 800f204:	4798      	blx	r3
 800f206:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f208:	e029      	b.n	800f25e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fa2a 	bl	800f666 <USBD_CtlError>
        err++;
 800f212:	7afb      	ldrb	r3, [r7, #11]
 800f214:	3301      	adds	r3, #1
 800f216:	72fb      	strb	r3, [r7, #11]
      break;
 800f218:	e021      	b.n	800f25e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7c1b      	ldrb	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d10d      	bne.n	800f23e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f22a:	f107 0208 	add.w	r2, r7, #8
 800f22e:	4610      	mov	r0, r2
 800f230:	4798      	blx	r3
 800f232:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3301      	adds	r3, #1
 800f238:	2207      	movs	r2, #7
 800f23a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f23c:	e00f      	b.n	800f25e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fa10 	bl	800f666 <USBD_CtlError>
        err++;
 800f246:	7afb      	ldrb	r3, [r7, #11]
 800f248:	3301      	adds	r3, #1
 800f24a:	72fb      	strb	r3, [r7, #11]
      break;
 800f24c:	e007      	b.n	800f25e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fa08 	bl	800f666 <USBD_CtlError>
      err++;
 800f256:	7afb      	ldrb	r3, [r7, #11]
 800f258:	3301      	adds	r3, #1
 800f25a:	72fb      	strb	r3, [r7, #11]
      break;
 800f25c:	bf00      	nop
  }

  if (err != 0U)
 800f25e:	7afb      	ldrb	r3, [r7, #11]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d11e      	bne.n	800f2a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	88db      	ldrh	r3, [r3, #6]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d016      	beq.n	800f29a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f26c:	893b      	ldrh	r3, [r7, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00e      	beq.n	800f290 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	88da      	ldrh	r2, [r3, #6]
 800f276:	893b      	ldrh	r3, [r7, #8]
 800f278:	4293      	cmp	r3, r2
 800f27a:	bf28      	it	cs
 800f27c:	4613      	movcs	r3, r2
 800f27e:	b29b      	uxth	r3, r3
 800f280:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f282:	893b      	ldrh	r3, [r7, #8]
 800f284:	461a      	mov	r2, r3
 800f286:	68f9      	ldr	r1, [r7, #12]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fa69 	bl	800f760 <USBD_CtlSendData>
 800f28e:	e009      	b.n	800f2a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 f9e7 	bl	800f666 <USBD_CtlError>
 800f298:	e004      	b.n	800f2a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fac1 	bl	800f822 <USBD_CtlSendStatus>
 800f2a0:	e000      	b.n	800f2a4 <USBD_GetDescriptor+0x320>
    return;
 800f2a2:	bf00      	nop
  }
}
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop

0800f2ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	889b      	ldrh	r3, [r3, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d131      	bne.n	800f322 <USBD_SetAddress+0x76>
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	88db      	ldrh	r3, [r3, #6]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d12d      	bne.n	800f322 <USBD_SetAddress+0x76>
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	885b      	ldrh	r3, [r3, #2]
 800f2ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2cc:	d829      	bhi.n	800f322 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d104      	bne.n	800f2f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f9bc 	bl	800f666 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ee:	e01d      	b.n	800f32c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7bfa      	ldrb	r2, [r7, #15]
 800f2f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 ff4d 	bl	801019c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fa8d 	bl	800f822 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d004      	beq.n	800f318 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2202      	movs	r2, #2
 800f312:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f316:	e009      	b.n	800f32c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f320:	e004      	b.n	800f32c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f99e 	bl	800f666 <USBD_CtlError>
  }
}
 800f32a:	bf00      	nop
 800f32c:	bf00      	nop
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	885b      	ldrh	r3, [r3, #2]
 800f346:	b2da      	uxtb	r2, r3
 800f348:	4b4e      	ldr	r3, [pc, #312]	@ (800f484 <USBD_SetConfig+0x150>)
 800f34a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f34c:	4b4d      	ldr	r3, [pc, #308]	@ (800f484 <USBD_SetConfig+0x150>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b01      	cmp	r3, #1
 800f352:	d905      	bls.n	800f360 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f354:	6839      	ldr	r1, [r7, #0]
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f985 	bl	800f666 <USBD_CtlError>
    return USBD_FAIL;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e08c      	b.n	800f47a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f366:	b2db      	uxtb	r3, r3
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d002      	beq.n	800f372 <USBD_SetConfig+0x3e>
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d029      	beq.n	800f3c4 <USBD_SetConfig+0x90>
 800f370:	e075      	b.n	800f45e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f372:	4b44      	ldr	r3, [pc, #272]	@ (800f484 <USBD_SetConfig+0x150>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d020      	beq.n	800f3bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f37a:	4b42      	ldr	r3, [pc, #264]	@ (800f484 <USBD_SetConfig+0x150>)
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f384:	4b3f      	ldr	r3, [pc, #252]	@ (800f484 <USBD_SetConfig+0x150>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7fe ffa3 	bl	800e2d6 <USBD_SetClassConfig>
 800f390:	4603      	mov	r3, r0
 800f392:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f394:	7bfb      	ldrb	r3, [r7, #15]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d008      	beq.n	800f3ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 f962 	bl	800f666 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3aa:	e065      	b.n	800f478 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fa38 	bl	800f822 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2203      	movs	r2, #3
 800f3b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f3ba:	e05d      	b.n	800f478 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fa30 	bl	800f822 <USBD_CtlSendStatus>
      break;
 800f3c2:	e059      	b.n	800f478 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f3c4:	4b2f      	ldr	r3, [pc, #188]	@ (800f484 <USBD_SetConfig+0x150>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d112      	bne.n	800f3f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f3d4:	4b2b      	ldr	r3, [pc, #172]	@ (800f484 <USBD_SetConfig+0x150>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3de:	4b29      	ldr	r3, [pc, #164]	@ (800f484 <USBD_SetConfig+0x150>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7fe ff92 	bl	800e30e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fa19 	bl	800f822 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3f0:	e042      	b.n	800f478 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f3f2:	4b24      	ldr	r3, [pc, #144]	@ (800f484 <USBD_SetConfig+0x150>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d02a      	beq.n	800f456 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	b2db      	uxtb	r3, r3
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7fe ff80 	bl	800e30e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f40e:	4b1d      	ldr	r3, [pc, #116]	@ (800f484 <USBD_SetConfig+0x150>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f418:	4b1a      	ldr	r3, [pc, #104]	@ (800f484 <USBD_SetConfig+0x150>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	4619      	mov	r1, r3
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7fe ff59 	bl	800e2d6 <USBD_SetClassConfig>
 800f424:	4603      	mov	r3, r0
 800f426:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f428:	7bfb      	ldrb	r3, [r7, #15]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00f      	beq.n	800f44e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f918 	bl	800f666 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7fe ff65 	bl	800e30e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2202      	movs	r2, #2
 800f448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f44c:	e014      	b.n	800f478 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 f9e7 	bl	800f822 <USBD_CtlSendStatus>
      break;
 800f454:	e010      	b.n	800f478 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f9e3 	bl	800f822 <USBD_CtlSendStatus>
      break;
 800f45c:	e00c      	b.n	800f478 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f900 	bl	800f666 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f466:	4b07      	ldr	r3, [pc, #28]	@ (800f484 <USBD_SetConfig+0x150>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7fe ff4e 	bl	800e30e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f472:	2303      	movs	r3, #3
 800f474:	73fb      	strb	r3, [r7, #15]
      break;
 800f476:	bf00      	nop
  }

  return ret;
 800f478:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	200008fc 	.word	0x200008fc

0800f488 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	88db      	ldrh	r3, [r3, #6]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d004      	beq.n	800f4a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f49a:	6839      	ldr	r1, [r7, #0]
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f8e2 	bl	800f666 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f4a2:	e023      	b.n	800f4ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	dc02      	bgt.n	800f4b6 <USBD_GetConfig+0x2e>
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	dc03      	bgt.n	800f4bc <USBD_GetConfig+0x34>
 800f4b4:	e015      	b.n	800f4e2 <USBD_GetConfig+0x5a>
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d00b      	beq.n	800f4d2 <USBD_GetConfig+0x4a>
 800f4ba:	e012      	b.n	800f4e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	3308      	adds	r3, #8
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f948 	bl	800f760 <USBD_CtlSendData>
        break;
 800f4d0:	e00c      	b.n	800f4ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f940 	bl	800f760 <USBD_CtlSendData>
        break;
 800f4e0:	e004      	b.n	800f4ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f8be 	bl	800f666 <USBD_CtlError>
        break;
 800f4ea:	bf00      	nop
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f504:	b2db      	uxtb	r3, r3
 800f506:	3b01      	subs	r3, #1
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d81e      	bhi.n	800f54a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	88db      	ldrh	r3, [r3, #6]
 800f510:	2b02      	cmp	r3, #2
 800f512:	d004      	beq.n	800f51e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f8a5 	bl	800f666 <USBD_CtlError>
        break;
 800f51c:	e01a      	b.n	800f554 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2201      	movs	r2, #1
 800f522:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d005      	beq.n	800f53a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f043 0202 	orr.w	r2, r3, #2
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	330c      	adds	r3, #12
 800f53e:	2202      	movs	r2, #2
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f90c 	bl	800f760 <USBD_CtlSendData>
      break;
 800f548:	e004      	b.n	800f554 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f88a 	bl	800f666 <USBD_CtlError>
      break;
 800f552:	bf00      	nop
  }
}
 800f554:	bf00      	nop
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	885b      	ldrh	r3, [r3, #2]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d107      	bne.n	800f57e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f953 	bl	800f822 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f57c:	e013      	b.n	800f5a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	885b      	ldrh	r3, [r3, #2]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d10b      	bne.n	800f59e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	889b      	ldrh	r3, [r3, #4]
 800f58a:	0a1b      	lsrs	r3, r3, #8
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f943 	bl	800f822 <USBD_CtlSendStatus>
}
 800f59c:	e003      	b.n	800f5a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f860 	bl	800f666 <USBD_CtlError>
}
 800f5a6:	bf00      	nop
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b082      	sub	sp, #8
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
 800f5b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d80b      	bhi.n	800f5de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	885b      	ldrh	r3, [r3, #2]
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d10c      	bne.n	800f5e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f923 	bl	800f822 <USBD_CtlSendStatus>
      }
      break;
 800f5dc:	e004      	b.n	800f5e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 f840 	bl	800f666 <USBD_CtlError>
      break;
 800f5e6:	e000      	b.n	800f5ea <USBD_ClrFeature+0x3c>
      break;
 800f5e8:	bf00      	nop
  }
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	781a      	ldrb	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	3301      	adds	r3, #1
 800f60c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	781a      	ldrb	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7ff fa13 	bl	800ea48 <SWAPBYTE>
 800f622:	4603      	mov	r3, r0
 800f624:	461a      	mov	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3301      	adds	r3, #1
 800f634:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fa06 	bl	800ea48 <SWAPBYTE>
 800f63c:	4603      	mov	r3, r0
 800f63e:	461a      	mov	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3301      	adds	r3, #1
 800f648:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	3301      	adds	r3, #1
 800f64e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f7ff f9f9 	bl	800ea48 <SWAPBYTE>
 800f656:	4603      	mov	r3, r0
 800f658:	461a      	mov	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	80da      	strh	r2, [r3, #6]
}
 800f65e:	bf00      	nop
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b082      	sub	sp, #8
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f670:	2180      	movs	r1, #128	@ 0x80
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fd28 	bl	80100c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f678:	2100      	movs	r1, #0
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 fd24 	bl	80100c8 <USBD_LL_StallEP>
}
 800f680:	bf00      	nop
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d042      	beq.n	800f724 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f6a2:	6938      	ldr	r0, [r7, #16]
 800f6a4:	f000 f842 	bl	800f72c <USBD_GetLen>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6b2:	d808      	bhi.n	800f6c6 <USBD_GetString+0x3e>
 800f6b4:	6938      	ldr	r0, [r7, #16]
 800f6b6:	f000 f839 	bl	800f72c <USBD_GetLen>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	3301      	adds	r3, #1
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	005b      	lsls	r3, r3, #1
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	e001      	b.n	800f6ca <USBD_GetString+0x42>
 800f6c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	7812      	ldrb	r2, [r2, #0]
 800f6d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6da:	7dfb      	ldrb	r3, [r7, #23]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	2203      	movs	r2, #3
 800f6e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6ea:	7dfb      	ldrb	r3, [r7, #23]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6f0:	e013      	b.n	800f71a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f6f2:	7dfb      	ldrb	r3, [r7, #23]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	4413      	add	r3, r2
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	7812      	ldrb	r2, [r2, #0]
 800f6fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	3301      	adds	r3, #1
 800f702:	613b      	str	r3, [r7, #16]
    idx++;
 800f704:	7dfb      	ldrb	r3, [r7, #23]
 800f706:	3301      	adds	r3, #1
 800f708:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	4413      	add	r3, r2
 800f710:	2200      	movs	r2, #0
 800f712:	701a      	strb	r2, [r3, #0]
    idx++;
 800f714:	7dfb      	ldrb	r3, [r7, #23]
 800f716:	3301      	adds	r3, #1
 800f718:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e7      	bne.n	800f6f2 <USBD_GetString+0x6a>
 800f722:	e000      	b.n	800f726 <USBD_GetString+0x9e>
    return;
 800f724:	bf00      	nop
  }
}
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f734:	2300      	movs	r3, #0
 800f736:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f73c:	e005      	b.n	800f74a <USBD_GetLen+0x1e>
  {
    len++;
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	3301      	adds	r3, #1
 800f742:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	3301      	adds	r3, #1
 800f748:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1f5      	bne.n	800f73e <USBD_GetLen+0x12>
  }

  return len;
 800f752:	7bfb      	ldrb	r3, [r7, #15]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3714      	adds	r7, #20
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2202      	movs	r2, #2
 800f770:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	2100      	movs	r1, #0
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f000 fd24 	bl	80101da <USBD_LL_Transmit>

  return USBD_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f000 fd13 	bl	80101da <USBD_LL_Transmit>

  return USBD_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b084      	sub	sp, #16
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	60f8      	str	r0, [r7, #12]
 800f7c6:	60b9      	str	r1, [r7, #8]
 800f7c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2203      	movs	r2, #3
 800f7ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 fd13 	bl	801021c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	2100      	movs	r1, #0
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 fd02 	bl	801021c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b082      	sub	sp, #8
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2204      	movs	r2, #4
 800f82e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f832:	2300      	movs	r3, #0
 800f834:	2200      	movs	r2, #0
 800f836:	2100      	movs	r1, #0
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fcce 	bl	80101da <USBD_LL_Transmit>

  return USBD_OK;
 800f83e:	2300      	movs	r3, #0
}
 800f840:	4618      	mov	r0, r3
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2205      	movs	r2, #5
 800f854:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f858:	2300      	movs	r3, #0
 800f85a:	2200      	movs	r2, #0
 800f85c:	2100      	movs	r1, #0
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fcdc 	bl	801021c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
	...

0800f870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f874:	2200      	movs	r2, #0
 800f876:	4912      	ldr	r1, [pc, #72]	@ (800f8c0 <MX_USB_DEVICE_Init+0x50>)
 800f878:	4812      	ldr	r0, [pc, #72]	@ (800f8c4 <MX_USB_DEVICE_Init+0x54>)
 800f87a:	f7fe fcaf 	bl	800e1dc <USBD_Init>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f884:	f7f4 f8e4 	bl	8003a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f888:	490f      	ldr	r1, [pc, #60]	@ (800f8c8 <MX_USB_DEVICE_Init+0x58>)
 800f88a:	480e      	ldr	r0, [pc, #56]	@ (800f8c4 <MX_USB_DEVICE_Init+0x54>)
 800f88c:	f7fe fcd6 	bl	800e23c <USBD_RegisterClass>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f896:	f7f4 f8db 	bl	8003a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f89a:	490c      	ldr	r1, [pc, #48]	@ (800f8cc <MX_USB_DEVICE_Init+0x5c>)
 800f89c:	4809      	ldr	r0, [pc, #36]	@ (800f8c4 <MX_USB_DEVICE_Init+0x54>)
 800f89e:	f7fe fbcd 	bl	800e03c <USBD_CDC_RegisterInterface>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d001      	beq.n	800f8ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f8a8:	f7f4 f8d2 	bl	8003a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f8ac:	4805      	ldr	r0, [pc, #20]	@ (800f8c4 <MX_USB_DEVICE_Init+0x54>)
 800f8ae:	f7fe fcfb 	bl	800e2a8 <USBD_Start>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f8b8:	f7f4 f8ca 	bl	8003a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f8bc:	bf00      	nop
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	200000ac 	.word	0x200000ac
 800f8c4:	20000900 	.word	0x20000900
 800f8c8:	20000018 	.word	0x20000018
 800f8cc:	20000098 	.word	0x20000098

0800f8d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	4905      	ldr	r1, [pc, #20]	@ (800f8ec <CDC_Init_FS+0x1c>)
 800f8d8:	4805      	ldr	r0, [pc, #20]	@ (800f8f0 <CDC_Init_FS+0x20>)
 800f8da:	f7fe fbc9 	bl	800e070 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f8de:	4905      	ldr	r1, [pc, #20]	@ (800f8f4 <CDC_Init_FS+0x24>)
 800f8e0:	4803      	ldr	r0, [pc, #12]	@ (800f8f0 <CDC_Init_FS+0x20>)
 800f8e2:	f7fe fbe7 	bl	800e0b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f8e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	200013dc 	.word	0x200013dc
 800f8f0:	20000900 	.word	0x20000900
 800f8f4:	20000bdc 	.word	0x20000bdc

0800f8f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	6039      	str	r1, [r7, #0]
 800f912:	71fb      	strb	r3, [r7, #7]
 800f914:	4613      	mov	r3, r2
 800f916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f918:	79fb      	ldrb	r3, [r7, #7]
 800f91a:	2b23      	cmp	r3, #35	@ 0x23
 800f91c:	d84a      	bhi.n	800f9b4 <CDC_Control_FS+0xac>
 800f91e:	a201      	add	r2, pc, #4	@ (adr r2, 800f924 <CDC_Control_FS+0x1c>)
 800f920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f924:	0800f9b5 	.word	0x0800f9b5
 800f928:	0800f9b5 	.word	0x0800f9b5
 800f92c:	0800f9b5 	.word	0x0800f9b5
 800f930:	0800f9b5 	.word	0x0800f9b5
 800f934:	0800f9b5 	.word	0x0800f9b5
 800f938:	0800f9b5 	.word	0x0800f9b5
 800f93c:	0800f9b5 	.word	0x0800f9b5
 800f940:	0800f9b5 	.word	0x0800f9b5
 800f944:	0800f9b5 	.word	0x0800f9b5
 800f948:	0800f9b5 	.word	0x0800f9b5
 800f94c:	0800f9b5 	.word	0x0800f9b5
 800f950:	0800f9b5 	.word	0x0800f9b5
 800f954:	0800f9b5 	.word	0x0800f9b5
 800f958:	0800f9b5 	.word	0x0800f9b5
 800f95c:	0800f9b5 	.word	0x0800f9b5
 800f960:	0800f9b5 	.word	0x0800f9b5
 800f964:	0800f9b5 	.word	0x0800f9b5
 800f968:	0800f9b5 	.word	0x0800f9b5
 800f96c:	0800f9b5 	.word	0x0800f9b5
 800f970:	0800f9b5 	.word	0x0800f9b5
 800f974:	0800f9b5 	.word	0x0800f9b5
 800f978:	0800f9b5 	.word	0x0800f9b5
 800f97c:	0800f9b5 	.word	0x0800f9b5
 800f980:	0800f9b5 	.word	0x0800f9b5
 800f984:	0800f9b5 	.word	0x0800f9b5
 800f988:	0800f9b5 	.word	0x0800f9b5
 800f98c:	0800f9b5 	.word	0x0800f9b5
 800f990:	0800f9b5 	.word	0x0800f9b5
 800f994:	0800f9b5 	.word	0x0800f9b5
 800f998:	0800f9b5 	.word	0x0800f9b5
 800f99c:	0800f9b5 	.word	0x0800f9b5
 800f9a0:	0800f9b5 	.word	0x0800f9b5
 800f9a4:	0800f9b5 	.word	0x0800f9b5
 800f9a8:	0800f9b5 	.word	0x0800f9b5
 800f9ac:	0800f9b5 	.word	0x0800f9b5
 800f9b0:	0800f9b5 	.word	0x0800f9b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f9b4:	bf00      	nop
  }

  return (USBD_OK);
 800f9b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f9ce:	6879      	ldr	r1, [r7, #4]
 800f9d0:	4805      	ldr	r0, [pc, #20]	@ (800f9e8 <CDC_Receive_FS+0x24>)
 800f9d2:	f7fe fb6f 	bl	800e0b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f9d6:	4804      	ldr	r0, [pc, #16]	@ (800f9e8 <CDC_Receive_FS+0x24>)
 800f9d8:	f7fe fbca 	bl	800e170 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f9dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	20000900 	.word	0x20000900

0800f9ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <CDC_Transmit_FS+0x48>)
 800f9fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e00b      	b.n	800fa2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fa12:	887b      	ldrh	r3, [r7, #2]
 800fa14:	461a      	mov	r2, r3
 800fa16:	6879      	ldr	r1, [r7, #4]
 800fa18:	4806      	ldr	r0, [pc, #24]	@ (800fa34 <CDC_Transmit_FS+0x48>)
 800fa1a:	f7fe fb29 	bl	800e070 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa1e:	4805      	ldr	r0, [pc, #20]	@ (800fa34 <CDC_Transmit_FS+0x48>)
 800fa20:	f7fe fb66 	bl	800e0f0 <USBD_CDC_TransmitPacket>
 800fa24:	4603      	mov	r3, r0
 800fa26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	20000900 	.word	0x20000900

0800fa38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b087      	sub	sp, #28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	4613      	mov	r3, r2
 800fa44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	371c      	adds	r7, #28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
	...

0800fa5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4603      	mov	r3, r0
 800fa64:	6039      	str	r1, [r7, #0]
 800fa66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	2212      	movs	r2, #18
 800fa6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa6e:	4b03      	ldr	r3, [pc, #12]	@ (800fa7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	200000cc 	.word	0x200000cc

0800fa80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	6039      	str	r1, [r7, #0]
 800fa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2204      	movs	r2, #4
 800fa90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa92:	4b03      	ldr	r3, [pc, #12]	@ (800faa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr
 800faa0:	200000ec 	.word	0x200000ec

0800faa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	6039      	str	r1, [r7, #0]
 800faae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d105      	bne.n	800fac2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fab6:	683a      	ldr	r2, [r7, #0]
 800fab8:	4907      	ldr	r1, [pc, #28]	@ (800fad8 <USBD_FS_ProductStrDescriptor+0x34>)
 800faba:	4808      	ldr	r0, [pc, #32]	@ (800fadc <USBD_FS_ProductStrDescriptor+0x38>)
 800fabc:	f7ff fde4 	bl	800f688 <USBD_GetString>
 800fac0:	e004      	b.n	800facc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fac2:	683a      	ldr	r2, [r7, #0]
 800fac4:	4904      	ldr	r1, [pc, #16]	@ (800fad8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fac6:	4805      	ldr	r0, [pc, #20]	@ (800fadc <USBD_FS_ProductStrDescriptor+0x38>)
 800fac8:	f7ff fdde 	bl	800f688 <USBD_GetString>
  }
  return USBD_StrDesc;
 800facc:	4b02      	ldr	r3, [pc, #8]	@ (800fad8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20001bdc 	.word	0x20001bdc
 800fadc:	08014244 	.word	0x08014244

0800fae0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	6039      	str	r1, [r7, #0]
 800faea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	4904      	ldr	r1, [pc, #16]	@ (800fb00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800faf0:	4804      	ldr	r0, [pc, #16]	@ (800fb04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800faf2:	f7ff fdc9 	bl	800f688 <USBD_GetString>
  return USBD_StrDesc;
 800faf6:	4b02      	ldr	r3, [pc, #8]	@ (800fb00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	20001bdc 	.word	0x20001bdc
 800fb04:	0801425c 	.word	0x0801425c

0800fb08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	6039      	str	r1, [r7, #0]
 800fb12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	221a      	movs	r2, #26
 800fb18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb1a:	f000 f855 	bl	800fbc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb1e:	4b02      	ldr	r3, [pc, #8]	@ (800fb28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	200000f0 	.word	0x200000f0

0800fb2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	4603      	mov	r3, r0
 800fb34:	6039      	str	r1, [r7, #0]
 800fb36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d105      	bne.n	800fb4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	4907      	ldr	r1, [pc, #28]	@ (800fb60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb42:	4808      	ldr	r0, [pc, #32]	@ (800fb64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb44:	f7ff fda0 	bl	800f688 <USBD_GetString>
 800fb48:	e004      	b.n	800fb54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	4904      	ldr	r1, [pc, #16]	@ (800fb60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb4e:	4805      	ldr	r0, [pc, #20]	@ (800fb64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb50:	f7ff fd9a 	bl	800f688 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb54:	4b02      	ldr	r3, [pc, #8]	@ (800fb60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20001bdc 	.word	0x20001bdc
 800fb64:	08014270 	.word	0x08014270

0800fb68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	4603      	mov	r3, r0
 800fb70:	6039      	str	r1, [r7, #0]
 800fb72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d105      	bne.n	800fb86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	4907      	ldr	r1, [pc, #28]	@ (800fb9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb7e:	4808      	ldr	r0, [pc, #32]	@ (800fba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb80:	f7ff fd82 	bl	800f688 <USBD_GetString>
 800fb84:	e004      	b.n	800fb90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	4904      	ldr	r1, [pc, #16]	@ (800fb9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb8a:	4805      	ldr	r0, [pc, #20]	@ (800fba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb8c:	f7ff fd7c 	bl	800f688 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb90:	4b02      	ldr	r3, [pc, #8]	@ (800fb9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20001bdc 	.word	0x20001bdc
 800fba0:	0801427c 	.word	0x0801427c

0800fba4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	6039      	str	r1, [r7, #0]
 800fbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	220c      	movs	r2, #12
 800fbb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fbb6:	4b03      	ldr	r3, [pc, #12]	@ (800fbc4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	200000e0 	.word	0x200000e0

0800fbc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbce:	4b0f      	ldr	r3, [pc, #60]	@ (800fc0c <Get_SerialNum+0x44>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbd4:	4b0e      	ldr	r3, [pc, #56]	@ (800fc10 <Get_SerialNum+0x48>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbda:	4b0e      	ldr	r3, [pc, #56]	@ (800fc14 <Get_SerialNum+0x4c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbee:	2208      	movs	r2, #8
 800fbf0:	4909      	ldr	r1, [pc, #36]	@ (800fc18 <Get_SerialNum+0x50>)
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f000 f814 	bl	800fc20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbf8:	2204      	movs	r2, #4
 800fbfa:	4908      	ldr	r1, [pc, #32]	@ (800fc1c <Get_SerialNum+0x54>)
 800fbfc:	68b8      	ldr	r0, [r7, #8]
 800fbfe:	f000 f80f 	bl	800fc20 <IntToUnicode>
  }
}
 800fc02:	bf00      	nop
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	1ff07a10 	.word	0x1ff07a10
 800fc10:	1ff07a14 	.word	0x1ff07a14
 800fc14:	1ff07a18 	.word	0x1ff07a18
 800fc18:	200000f2 	.word	0x200000f2
 800fc1c:	20000102 	.word	0x20000102

0800fc20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b087      	sub	sp, #28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc32:	2300      	movs	r3, #0
 800fc34:	75fb      	strb	r3, [r7, #23]
 800fc36:	e027      	b.n	800fc88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	0f1b      	lsrs	r3, r3, #28
 800fc3c:	2b09      	cmp	r3, #9
 800fc3e:	d80b      	bhi.n	800fc58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	0f1b      	lsrs	r3, r3, #28
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	005b      	lsls	r3, r3, #1
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	440b      	add	r3, r1
 800fc50:	3230      	adds	r2, #48	@ 0x30
 800fc52:	b2d2      	uxtb	r2, r2
 800fc54:	701a      	strb	r2, [r3, #0]
 800fc56:	e00a      	b.n	800fc6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	0f1b      	lsrs	r3, r3, #28
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4619      	mov	r1, r3
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	440b      	add	r3, r1
 800fc68:	3237      	adds	r2, #55	@ 0x37
 800fc6a:	b2d2      	uxtb	r2, r2
 800fc6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	011b      	lsls	r3, r3, #4
 800fc72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc74:	7dfb      	ldrb	r3, [r7, #23]
 800fc76:	005b      	lsls	r3, r3, #1
 800fc78:	3301      	adds	r3, #1
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	2200      	movs	r2, #0
 800fc80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc82:	7dfb      	ldrb	r3, [r7, #23]
 800fc84:	3301      	adds	r3, #1
 800fc86:	75fb      	strb	r3, [r7, #23]
 800fc88:	7dfa      	ldrb	r2, [r7, #23]
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d3d3      	bcc.n	800fc38 <IntToUnicode+0x18>
  }
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	371c      	adds	r7, #28
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
	...

0800fca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b0aa      	sub	sp, #168	@ 0xa8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fca8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800fcac:	2200      	movs	r2, #0
 800fcae:	601a      	str	r2, [r3, #0]
 800fcb0:	605a      	str	r2, [r3, #4]
 800fcb2:	609a      	str	r2, [r3, #8]
 800fcb4:	60da      	str	r2, [r3, #12]
 800fcb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fcb8:	f107 0314 	add.w	r3, r7, #20
 800fcbc:	2280      	movs	r2, #128	@ 0x80
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f001 f99a 	bl	8010ffa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fcce:	d151      	bne.n	800fd74 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fcd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fcd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fcdc:	f107 0314 	add.w	r3, r7, #20
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7f8 f91d 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d001      	beq.n	800fcf0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fcec:	f7f3 feb0 	bl	8003a50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcf0:	4b22      	ldr	r3, [pc, #136]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fcf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcf4:	4a21      	ldr	r2, [pc, #132]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fcf6:	f043 0301 	orr.w	r3, r3, #1
 800fcfa:	6313      	str	r3, [r2, #48]	@ 0x30
 800fcfc:	4b1f      	ldr	r3, [pc, #124]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd00:	f003 0301 	and.w	r3, r3, #1
 800fd04:	613b      	str	r3, [r7, #16]
 800fd06:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fd08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fd0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd10:	2302      	movs	r3, #2
 800fd12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd22:	230a      	movs	r3, #10
 800fd24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	4814      	ldr	r0, [pc, #80]	@ (800fd80 <HAL_PCD_MspInit+0xe0>)
 800fd30:	f7f5 fe36 	bl	80059a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd34:	4b11      	ldr	r3, [pc, #68]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd38:	4a10      	ldr	r2, [pc, #64]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd3e:	6353      	str	r3, [r2, #52]	@ 0x34
 800fd40:	4b0e      	ldr	r3, [pc, #56]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd48:	60fb      	str	r3, [r7, #12]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd50:	4a0a      	ldr	r2, [pc, #40]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fd56:	6453      	str	r3, [r2, #68]	@ 0x44
 800fd58:	4b08      	ldr	r3, [pc, #32]	@ (800fd7c <HAL_PCD_MspInit+0xdc>)
 800fd5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd60:	60bb      	str	r3, [r7, #8]
 800fd62:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd64:	2200      	movs	r2, #0
 800fd66:	2100      	movs	r1, #0
 800fd68:	2043      	movs	r0, #67	@ 0x43
 800fd6a:	f7f5 f954 	bl	8005016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd6e:	2043      	movs	r0, #67	@ 0x43
 800fd70:	f7f5 f96d 	bl	800504e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd74:	bf00      	nop
 800fd76:	37a8      	adds	r7, #168	@ 0xa8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	40023800 	.word	0x40023800
 800fd80:	40020000 	.word	0x40020000

0800fd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	f7fe fad1 	bl	800e342 <USBD_LL_SetupStage>
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800fdba:	78fa      	ldrb	r2, [r7, #3]
 800fdbc:	6879      	ldr	r1, [r7, #4]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	440b      	add	r3, r1
 800fdc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	78fb      	ldrb	r3, [r7, #3]
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	f7fe fb0b 	bl	800e3ec <USBD_LL_DataOutStage>
}
 800fdd6:	bf00      	nop
 800fdd8:	3708      	adds	r7, #8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b082      	sub	sp, #8
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	460b      	mov	r3, r1
 800fde8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800fdf0:	78fa      	ldrb	r2, [r7, #3]
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	4413      	add	r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	440b      	add	r3, r1
 800fdfe:	3320      	adds	r3, #32
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	78fb      	ldrb	r3, [r7, #3]
 800fe04:	4619      	mov	r1, r3
 800fe06:	f7fe fbad 	bl	800e564 <USBD_LL_DataInStage>
}
 800fe0a:	bf00      	nop
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe fcf1 	bl	800e808 <USBD_LL_SOF>
}
 800fe26:	bf00      	nop
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b084      	sub	sp, #16
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe36:	2301      	movs	r3, #1
 800fe38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	79db      	ldrb	r3, [r3, #7]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d102      	bne.n	800fe48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fe42:	2300      	movs	r3, #0
 800fe44:	73fb      	strb	r3, [r7, #15]
 800fe46:	e008      	b.n	800fe5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	79db      	ldrb	r3, [r3, #7]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d102      	bne.n	800fe56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe50:	2301      	movs	r3, #1
 800fe52:	73fb      	strb	r3, [r7, #15]
 800fe54:	e001      	b.n	800fe5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe56:	f7f3 fdfb 	bl	8003a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fe60:	7bfa      	ldrb	r2, [r7, #15]
 800fe62:	4611      	mov	r1, r2
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe fc8b 	bl	800e780 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fe fc32 	bl	800e6da <USBD_LL_Reset>
}
 800fe76:	bf00      	nop
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
	...

0800fe80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe fc86 	bl	800e7a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	6812      	ldr	r2, [r2, #0]
 800fea2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fea6:	f043 0301 	orr.w	r3, r3, #1
 800feaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	7adb      	ldrb	r3, [r3, #11]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d005      	beq.n	800fec0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800feb4:	4b04      	ldr	r3, [pc, #16]	@ (800fec8 <HAL_PCD_SuspendCallback+0x48>)
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	4a03      	ldr	r2, [pc, #12]	@ (800fec8 <HAL_PCD_SuspendCallback+0x48>)
 800feba:	f043 0306 	orr.w	r3, r3, #6
 800febe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	e000ed00 	.word	0xe000ed00

0800fecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe fc7c 	bl	800e7d8 <USBD_LL_Resume>
}
 800fee0:	bf00      	nop
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fefa:	78fa      	ldrb	r2, [r7, #3]
 800fefc:	4611      	mov	r1, r2
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe fcd4 	bl	800e8ac <USBD_LL_IsoOUTIncomplete>
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	460b      	mov	r3, r1
 800ff16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ff1e:	78fa      	ldrb	r2, [r7, #3]
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fe fc90 	bl	800e848 <USBD_LL_IsoINIncomplete>
}
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fce6 	bl	800e910 <USBD_LL_DevConnected>
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe fce3 	bl	800e926 <USBD_LL_DevDisconnected>
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d13f      	bne.n	800fff8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff78:	4a22      	ldr	r2, [pc, #136]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	4a20      	ldr	r2, [pc, #128]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff88:	4b1e      	ldr	r3, [pc, #120]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ff8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ff90:	4b1c      	ldr	r3, [pc, #112]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff92:	2206      	movs	r2, #6
 800ff94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff96:	4b1b      	ldr	r3, [pc, #108]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff98:	2202      	movs	r2, #2
 800ff9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff9c:	4b19      	ldr	r3, [pc, #100]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ffa2:	4b18      	ldr	r3, [pc, #96]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffa4:	2202      	movs	r2, #2
 800ffa6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ffa8:	4b16      	ldr	r3, [pc, #88]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ffae:	4b15      	ldr	r3, [pc, #84]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ffb4:	4b13      	ldr	r3, [pc, #76]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ffba:	4b12      	ldr	r3, [pc, #72]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ffc0:	4b10      	ldr	r3, [pc, #64]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ffc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ffcc:	480d      	ldr	r0, [pc, #52]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffce:	f7f6 f802 	bl	8005fd6 <HAL_PCD_Init>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d001      	beq.n	800ffdc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ffd8:	f7f3 fd3a 	bl	8003a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ffdc:	2180      	movs	r1, #128	@ 0x80
 800ffde:	4809      	ldr	r0, [pc, #36]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffe0:	f7f7 fa4f 	bl	8007482 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ffe4:	2240      	movs	r2, #64	@ 0x40
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4806      	ldr	r0, [pc, #24]	@ (8010004 <USBD_LL_Init+0x9c>)
 800ffea:	f7f7 fa03 	bl	80073f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ffee:	2280      	movs	r2, #128	@ 0x80
 800fff0:	2101      	movs	r1, #1
 800fff2:	4804      	ldr	r0, [pc, #16]	@ (8010004 <USBD_LL_Init+0x9c>)
 800fff4:	f7f7 f9fe 	bl	80073f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20001ddc 	.word	0x20001ddc

08010008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010010:	2300      	movs	r3, #0
 8010012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801001e:	4618      	mov	r0, r3
 8010020:	f7f6 f8ef 	bl	8006202 <HAL_PCD_Start>
 8010024:	4603      	mov	r3, r0
 8010026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010028:	7bfb      	ldrb	r3, [r7, #15]
 801002a:	4618      	mov	r0, r3
 801002c:	f000 f97e 	bl	801032c <USBD_Get_USB_Status>
 8010030:	4603      	mov	r3, r0
 8010032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010034:	7bbb      	ldrb	r3, [r7, #14]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	4608      	mov	r0, r1
 8010048:	4611      	mov	r1, r2
 801004a:	461a      	mov	r2, r3
 801004c:	4603      	mov	r3, r0
 801004e:	70fb      	strb	r3, [r7, #3]
 8010050:	460b      	mov	r3, r1
 8010052:	70bb      	strb	r3, [r7, #2]
 8010054:	4613      	mov	r3, r2
 8010056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010058:	2300      	movs	r3, #0
 801005a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801005c:	2300      	movs	r3, #0
 801005e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010066:	78bb      	ldrb	r3, [r7, #2]
 8010068:	883a      	ldrh	r2, [r7, #0]
 801006a:	78f9      	ldrb	r1, [r7, #3]
 801006c:	f7f6 fddd 	bl	8006c2a <HAL_PCD_EP_Open>
 8010070:	4603      	mov	r3, r0
 8010072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010074:	7bfb      	ldrb	r3, [r7, #15]
 8010076:	4618      	mov	r0, r3
 8010078:	f000 f958 	bl	801032c <USBD_Get_USB_Status>
 801007c:	4603      	mov	r3, r0
 801007e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010080:	7bbb      	ldrb	r3, [r7, #14]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b084      	sub	sp, #16
 801008e:	af00      	add	r7, sp, #0
 8010090:	6078      	str	r0, [r7, #4]
 8010092:	460b      	mov	r3, r1
 8010094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010096:	2300      	movs	r3, #0
 8010098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801009a:	2300      	movs	r3, #0
 801009c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100a4:	78fa      	ldrb	r2, [r7, #3]
 80100a6:	4611      	mov	r1, r2
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7f6 fe28 	bl	8006cfe <HAL_PCD_EP_Close>
 80100ae:	4603      	mov	r3, r0
 80100b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100b2:	7bfb      	ldrb	r3, [r7, #15]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f000 f939 	bl	801032c <USBD_Get_USB_Status>
 80100ba:	4603      	mov	r3, r0
 80100bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100be:	7bbb      	ldrb	r3, [r7, #14]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	460b      	mov	r3, r1
 80100d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100e2:	78fa      	ldrb	r2, [r7, #3]
 80100e4:	4611      	mov	r1, r2
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7f6 fee0 	bl	8006eac <HAL_PCD_EP_SetStall>
 80100ec:	4603      	mov	r3, r0
 80100ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f000 f91a 	bl	801032c <USBD_Get_USB_Status>
 80100f8:	4603      	mov	r3, r0
 80100fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b084      	sub	sp, #16
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	460b      	mov	r3, r1
 8010110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010120:	78fa      	ldrb	r2, [r7, #3]
 8010122:	4611      	mov	r1, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f7f6 ff24 	bl	8006f72 <HAL_PCD_EP_ClrStall>
 801012a:	4603      	mov	r3, r0
 801012c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801012e:	7bfb      	ldrb	r3, [r7, #15]
 8010130:	4618      	mov	r0, r3
 8010132:	f000 f8fb 	bl	801032c <USBD_Get_USB_Status>
 8010136:	4603      	mov	r3, r0
 8010138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801013a:	7bbb      	ldrb	r3, [r7, #14]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	460b      	mov	r3, r1
 801014e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010156:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801015c:	2b00      	cmp	r3, #0
 801015e:	da0b      	bge.n	8010178 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010160:	78fb      	ldrb	r3, [r7, #3]
 8010162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010166:	68f9      	ldr	r1, [r7, #12]
 8010168:	4613      	mov	r3, r2
 801016a:	00db      	lsls	r3, r3, #3
 801016c:	4413      	add	r3, r2
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	440b      	add	r3, r1
 8010172:	3316      	adds	r3, #22
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	e00b      	b.n	8010190 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010178:	78fb      	ldrb	r3, [r7, #3]
 801017a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801017e:	68f9      	ldr	r1, [r7, #12]
 8010180:	4613      	mov	r3, r2
 8010182:	00db      	lsls	r3, r3, #3
 8010184:	4413      	add	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	440b      	add	r3, r1
 801018a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801018e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010190:	4618      	mov	r0, r3
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101a8:	2300      	movs	r3, #0
 80101aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101ac:	2300      	movs	r3, #0
 80101ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101b6:	78fa      	ldrb	r2, [r7, #3]
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7f6 fd11 	bl	8006be2 <HAL_PCD_SetAddress>
 80101c0:	4603      	mov	r3, r0
 80101c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f000 f8b0 	bl	801032c <USBD_Get_USB_Status>
 80101cc:	4603      	mov	r3, r0
 80101ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b086      	sub	sp, #24
 80101de:	af00      	add	r7, sp, #0
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	603b      	str	r3, [r7, #0]
 80101e6:	460b      	mov	r3, r1
 80101e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80101f8:	7af9      	ldrb	r1, [r7, #11]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	f7f6 fe1b 	bl	8006e38 <HAL_PCD_EP_Transmit>
 8010202:	4603      	mov	r3, r0
 8010204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010206:	7dfb      	ldrb	r3, [r7, #23]
 8010208:	4618      	mov	r0, r3
 801020a:	f000 f88f 	bl	801032c <USBD_Get_USB_Status>
 801020e:	4603      	mov	r3, r0
 8010210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010212:	7dbb      	ldrb	r3, [r7, #22]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b086      	sub	sp, #24
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	607a      	str	r2, [r7, #4]
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	460b      	mov	r3, r1
 801022a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801022c:	2300      	movs	r3, #0
 801022e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010230:	2300      	movs	r3, #0
 8010232:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801023a:	7af9      	ldrb	r1, [r7, #11]
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	f7f6 fda7 	bl	8006d92 <HAL_PCD_EP_Receive>
 8010244:	4603      	mov	r3, r0
 8010246:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010248:	7dfb      	ldrb	r3, [r7, #23]
 801024a:	4618      	mov	r0, r3
 801024c:	f000 f86e 	bl	801032c <USBD_Get_USB_Status>
 8010250:	4603      	mov	r3, r0
 8010252:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010254:	7dbb      	ldrb	r3, [r7, #22]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	460b      	mov	r3, r1
 8010268:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010270:	78fa      	ldrb	r2, [r7, #3]
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f7f6 fdc7 	bl	8006e08 <HAL_PCD_EP_GetRxCount>
 801027a:	4603      	mov	r3, r0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <HAL_PCDEx_LPM_Callback+0x18>
 8010296:	2b01      	cmp	r3, #1
 8010298:	d01f      	beq.n	80102da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801029a:	e03b      	b.n	8010314 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	7adb      	ldrb	r3, [r3, #11]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d007      	beq.n	80102b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80102a4:	f000 f83c 	bl	8010320 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102a8:	4b1c      	ldr	r3, [pc, #112]	@ (801031c <HAL_PCDEx_LPM_Callback+0x98>)
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	4a1b      	ldr	r2, [pc, #108]	@ (801031c <HAL_PCDEx_LPM_Callback+0x98>)
 80102ae:	f023 0306 	bic.w	r3, r3, #6
 80102b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	6812      	ldr	r2, [r2, #0]
 80102c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80102c6:	f023 0301 	bic.w	r3, r3, #1
 80102ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fa80 	bl	800e7d8 <USBD_LL_Resume>
    break;
 80102d8:	e01c      	b.n	8010314 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	6812      	ldr	r2, [r2, #0]
 80102e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80102ec:	f043 0301 	orr.w	r3, r3, #1
 80102f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fe fa51 	bl	800e7a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	7adb      	ldrb	r3, [r3, #11]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d005      	beq.n	8010312 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010306:	4b05      	ldr	r3, [pc, #20]	@ (801031c <HAL_PCDEx_LPM_Callback+0x98>)
 8010308:	691b      	ldr	r3, [r3, #16]
 801030a:	4a04      	ldr	r2, [pc, #16]	@ (801031c <HAL_PCDEx_LPM_Callback+0x98>)
 801030c:	f043 0306 	orr.w	r3, r3, #6
 8010310:	6113      	str	r3, [r2, #16]
    break;
 8010312:	bf00      	nop
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	e000ed00 	.word	0xe000ed00

08010320 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010324:	f7f2 ff96 	bl	8003254 <SystemClock_Config>
}
 8010328:	bf00      	nop
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	4603      	mov	r3, r0
 8010334:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010336:	2300      	movs	r3, #0
 8010338:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	2b03      	cmp	r3, #3
 801033e:	d817      	bhi.n	8010370 <USBD_Get_USB_Status+0x44>
 8010340:	a201      	add	r2, pc, #4	@ (adr r2, 8010348 <USBD_Get_USB_Status+0x1c>)
 8010342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010346:	bf00      	nop
 8010348:	08010359 	.word	0x08010359
 801034c:	0801035f 	.word	0x0801035f
 8010350:	08010365 	.word	0x08010365
 8010354:	0801036b 	.word	0x0801036b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010358:	2300      	movs	r3, #0
 801035a:	73fb      	strb	r3, [r7, #15]
    break;
 801035c:	e00b      	b.n	8010376 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801035e:	2303      	movs	r3, #3
 8010360:	73fb      	strb	r3, [r7, #15]
    break;
 8010362:	e008      	b.n	8010376 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010364:	2301      	movs	r3, #1
 8010366:	73fb      	strb	r3, [r7, #15]
    break;
 8010368:	e005      	b.n	8010376 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801036a:	2303      	movs	r3, #3
 801036c:	73fb      	strb	r3, [r7, #15]
    break;
 801036e:	e002      	b.n	8010376 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010370:	2303      	movs	r3, #3
 8010372:	73fb      	strb	r3, [r7, #15]
    break;
 8010374:	bf00      	nop
  }
  return usb_status;
 8010376:	7bfb      	ldrb	r3, [r7, #15]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <malloc>:
 8010384:	4b02      	ldr	r3, [pc, #8]	@ (8010390 <malloc+0xc>)
 8010386:	4601      	mov	r1, r0
 8010388:	6818      	ldr	r0, [r3, #0]
 801038a:	f000 b82d 	b.w	80103e8 <_malloc_r>
 801038e:	bf00      	nop
 8010390:	20000118 	.word	0x20000118

08010394 <free>:
 8010394:	4b02      	ldr	r3, [pc, #8]	@ (80103a0 <free+0xc>)
 8010396:	4601      	mov	r1, r0
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	f001 bd19 	b.w	8011dd0 <_free_r>
 801039e:	bf00      	nop
 80103a0:	20000118 	.word	0x20000118

080103a4 <sbrk_aligned>:
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	4e0f      	ldr	r6, [pc, #60]	@ (80103e4 <sbrk_aligned+0x40>)
 80103a8:	460c      	mov	r4, r1
 80103aa:	6831      	ldr	r1, [r6, #0]
 80103ac:	4605      	mov	r5, r0
 80103ae:	b911      	cbnz	r1, 80103b6 <sbrk_aligned+0x12>
 80103b0:	f000 fe64 	bl	801107c <_sbrk_r>
 80103b4:	6030      	str	r0, [r6, #0]
 80103b6:	4621      	mov	r1, r4
 80103b8:	4628      	mov	r0, r5
 80103ba:	f000 fe5f 	bl	801107c <_sbrk_r>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	d103      	bne.n	80103ca <sbrk_aligned+0x26>
 80103c2:	f04f 34ff 	mov.w	r4, #4294967295
 80103c6:	4620      	mov	r0, r4
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
 80103ca:	1cc4      	adds	r4, r0, #3
 80103cc:	f024 0403 	bic.w	r4, r4, #3
 80103d0:	42a0      	cmp	r0, r4
 80103d2:	d0f8      	beq.n	80103c6 <sbrk_aligned+0x22>
 80103d4:	1a21      	subs	r1, r4, r0
 80103d6:	4628      	mov	r0, r5
 80103d8:	f000 fe50 	bl	801107c <_sbrk_r>
 80103dc:	3001      	adds	r0, #1
 80103de:	d1f2      	bne.n	80103c6 <sbrk_aligned+0x22>
 80103e0:	e7ef      	b.n	80103c2 <sbrk_aligned+0x1e>
 80103e2:	bf00      	nop
 80103e4:	200022bc 	.word	0x200022bc

080103e8 <_malloc_r>:
 80103e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ec:	1ccd      	adds	r5, r1, #3
 80103ee:	f025 0503 	bic.w	r5, r5, #3
 80103f2:	3508      	adds	r5, #8
 80103f4:	2d0c      	cmp	r5, #12
 80103f6:	bf38      	it	cc
 80103f8:	250c      	movcc	r5, #12
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	4606      	mov	r6, r0
 80103fe:	db01      	blt.n	8010404 <_malloc_r+0x1c>
 8010400:	42a9      	cmp	r1, r5
 8010402:	d904      	bls.n	801040e <_malloc_r+0x26>
 8010404:	230c      	movs	r3, #12
 8010406:	6033      	str	r3, [r6, #0]
 8010408:	2000      	movs	r0, #0
 801040a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801040e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80104e4 <_malloc_r+0xfc>
 8010412:	f000 f869 	bl	80104e8 <__malloc_lock>
 8010416:	f8d8 3000 	ldr.w	r3, [r8]
 801041a:	461c      	mov	r4, r3
 801041c:	bb44      	cbnz	r4, 8010470 <_malloc_r+0x88>
 801041e:	4629      	mov	r1, r5
 8010420:	4630      	mov	r0, r6
 8010422:	f7ff ffbf 	bl	80103a4 <sbrk_aligned>
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	4604      	mov	r4, r0
 801042a:	d158      	bne.n	80104de <_malloc_r+0xf6>
 801042c:	f8d8 4000 	ldr.w	r4, [r8]
 8010430:	4627      	mov	r7, r4
 8010432:	2f00      	cmp	r7, #0
 8010434:	d143      	bne.n	80104be <_malloc_r+0xd6>
 8010436:	2c00      	cmp	r4, #0
 8010438:	d04b      	beq.n	80104d2 <_malloc_r+0xea>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	4639      	mov	r1, r7
 801043e:	4630      	mov	r0, r6
 8010440:	eb04 0903 	add.w	r9, r4, r3
 8010444:	f000 fe1a 	bl	801107c <_sbrk_r>
 8010448:	4581      	cmp	r9, r0
 801044a:	d142      	bne.n	80104d2 <_malloc_r+0xea>
 801044c:	6821      	ldr	r1, [r4, #0]
 801044e:	1a6d      	subs	r5, r5, r1
 8010450:	4629      	mov	r1, r5
 8010452:	4630      	mov	r0, r6
 8010454:	f7ff ffa6 	bl	80103a4 <sbrk_aligned>
 8010458:	3001      	adds	r0, #1
 801045a:	d03a      	beq.n	80104d2 <_malloc_r+0xea>
 801045c:	6823      	ldr	r3, [r4, #0]
 801045e:	442b      	add	r3, r5
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	f8d8 3000 	ldr.w	r3, [r8]
 8010466:	685a      	ldr	r2, [r3, #4]
 8010468:	bb62      	cbnz	r2, 80104c4 <_malloc_r+0xdc>
 801046a:	f8c8 7000 	str.w	r7, [r8]
 801046e:	e00f      	b.n	8010490 <_malloc_r+0xa8>
 8010470:	6822      	ldr	r2, [r4, #0]
 8010472:	1b52      	subs	r2, r2, r5
 8010474:	d420      	bmi.n	80104b8 <_malloc_r+0xd0>
 8010476:	2a0b      	cmp	r2, #11
 8010478:	d917      	bls.n	80104aa <_malloc_r+0xc2>
 801047a:	1961      	adds	r1, r4, r5
 801047c:	42a3      	cmp	r3, r4
 801047e:	6025      	str	r5, [r4, #0]
 8010480:	bf18      	it	ne
 8010482:	6059      	strne	r1, [r3, #4]
 8010484:	6863      	ldr	r3, [r4, #4]
 8010486:	bf08      	it	eq
 8010488:	f8c8 1000 	streq.w	r1, [r8]
 801048c:	5162      	str	r2, [r4, r5]
 801048e:	604b      	str	r3, [r1, #4]
 8010490:	4630      	mov	r0, r6
 8010492:	f000 f82f 	bl	80104f4 <__malloc_unlock>
 8010496:	f104 000b 	add.w	r0, r4, #11
 801049a:	1d23      	adds	r3, r4, #4
 801049c:	f020 0007 	bic.w	r0, r0, #7
 80104a0:	1ac2      	subs	r2, r0, r3
 80104a2:	bf1c      	itt	ne
 80104a4:	1a1b      	subne	r3, r3, r0
 80104a6:	50a3      	strne	r3, [r4, r2]
 80104a8:	e7af      	b.n	801040a <_malloc_r+0x22>
 80104aa:	6862      	ldr	r2, [r4, #4]
 80104ac:	42a3      	cmp	r3, r4
 80104ae:	bf0c      	ite	eq
 80104b0:	f8c8 2000 	streq.w	r2, [r8]
 80104b4:	605a      	strne	r2, [r3, #4]
 80104b6:	e7eb      	b.n	8010490 <_malloc_r+0xa8>
 80104b8:	4623      	mov	r3, r4
 80104ba:	6864      	ldr	r4, [r4, #4]
 80104bc:	e7ae      	b.n	801041c <_malloc_r+0x34>
 80104be:	463c      	mov	r4, r7
 80104c0:	687f      	ldr	r7, [r7, #4]
 80104c2:	e7b6      	b.n	8010432 <_malloc_r+0x4a>
 80104c4:	461a      	mov	r2, r3
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	42a3      	cmp	r3, r4
 80104ca:	d1fb      	bne.n	80104c4 <_malloc_r+0xdc>
 80104cc:	2300      	movs	r3, #0
 80104ce:	6053      	str	r3, [r2, #4]
 80104d0:	e7de      	b.n	8010490 <_malloc_r+0xa8>
 80104d2:	230c      	movs	r3, #12
 80104d4:	6033      	str	r3, [r6, #0]
 80104d6:	4630      	mov	r0, r6
 80104d8:	f000 f80c 	bl	80104f4 <__malloc_unlock>
 80104dc:	e794      	b.n	8010408 <_malloc_r+0x20>
 80104de:	6005      	str	r5, [r0, #0]
 80104e0:	e7d6      	b.n	8010490 <_malloc_r+0xa8>
 80104e2:	bf00      	nop
 80104e4:	200022c0 	.word	0x200022c0

080104e8 <__malloc_lock>:
 80104e8:	4801      	ldr	r0, [pc, #4]	@ (80104f0 <__malloc_lock+0x8>)
 80104ea:	f000 be14 	b.w	8011116 <__retarget_lock_acquire_recursive>
 80104ee:	bf00      	nop
 80104f0:	20002404 	.word	0x20002404

080104f4 <__malloc_unlock>:
 80104f4:	4801      	ldr	r0, [pc, #4]	@ (80104fc <__malloc_unlock+0x8>)
 80104f6:	f000 be0f 	b.w	8011118 <__retarget_lock_release_recursive>
 80104fa:	bf00      	nop
 80104fc:	20002404 	.word	0x20002404

08010500 <__cvt>:
 8010500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010504:	ec57 6b10 	vmov	r6, r7, d0
 8010508:	2f00      	cmp	r7, #0
 801050a:	460c      	mov	r4, r1
 801050c:	4619      	mov	r1, r3
 801050e:	463b      	mov	r3, r7
 8010510:	bfbb      	ittet	lt
 8010512:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010516:	461f      	movlt	r7, r3
 8010518:	2300      	movge	r3, #0
 801051a:	232d      	movlt	r3, #45	@ 0x2d
 801051c:	700b      	strb	r3, [r1, #0]
 801051e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010520:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010524:	4691      	mov	r9, r2
 8010526:	f023 0820 	bic.w	r8, r3, #32
 801052a:	bfbc      	itt	lt
 801052c:	4632      	movlt	r2, r6
 801052e:	4616      	movlt	r6, r2
 8010530:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010534:	d005      	beq.n	8010542 <__cvt+0x42>
 8010536:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801053a:	d100      	bne.n	801053e <__cvt+0x3e>
 801053c:	3401      	adds	r4, #1
 801053e:	2102      	movs	r1, #2
 8010540:	e000      	b.n	8010544 <__cvt+0x44>
 8010542:	2103      	movs	r1, #3
 8010544:	ab03      	add	r3, sp, #12
 8010546:	9301      	str	r3, [sp, #4]
 8010548:	ab02      	add	r3, sp, #8
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	ec47 6b10 	vmov	d0, r6, r7
 8010550:	4653      	mov	r3, sl
 8010552:	4622      	mov	r2, r4
 8010554:	f000 fe6c 	bl	8011230 <_dtoa_r>
 8010558:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801055c:	4605      	mov	r5, r0
 801055e:	d119      	bne.n	8010594 <__cvt+0x94>
 8010560:	f019 0f01 	tst.w	r9, #1
 8010564:	d00e      	beq.n	8010584 <__cvt+0x84>
 8010566:	eb00 0904 	add.w	r9, r0, r4
 801056a:	2200      	movs	r2, #0
 801056c:	2300      	movs	r3, #0
 801056e:	4630      	mov	r0, r6
 8010570:	4639      	mov	r1, r7
 8010572:	f7f0 fad1 	bl	8000b18 <__aeabi_dcmpeq>
 8010576:	b108      	cbz	r0, 801057c <__cvt+0x7c>
 8010578:	f8cd 900c 	str.w	r9, [sp, #12]
 801057c:	2230      	movs	r2, #48	@ 0x30
 801057e:	9b03      	ldr	r3, [sp, #12]
 8010580:	454b      	cmp	r3, r9
 8010582:	d31e      	bcc.n	80105c2 <__cvt+0xc2>
 8010584:	9b03      	ldr	r3, [sp, #12]
 8010586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010588:	1b5b      	subs	r3, r3, r5
 801058a:	4628      	mov	r0, r5
 801058c:	6013      	str	r3, [r2, #0]
 801058e:	b004      	add	sp, #16
 8010590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010594:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010598:	eb00 0904 	add.w	r9, r0, r4
 801059c:	d1e5      	bne.n	801056a <__cvt+0x6a>
 801059e:	7803      	ldrb	r3, [r0, #0]
 80105a0:	2b30      	cmp	r3, #48	@ 0x30
 80105a2:	d10a      	bne.n	80105ba <__cvt+0xba>
 80105a4:	2200      	movs	r2, #0
 80105a6:	2300      	movs	r3, #0
 80105a8:	4630      	mov	r0, r6
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7f0 fab4 	bl	8000b18 <__aeabi_dcmpeq>
 80105b0:	b918      	cbnz	r0, 80105ba <__cvt+0xba>
 80105b2:	f1c4 0401 	rsb	r4, r4, #1
 80105b6:	f8ca 4000 	str.w	r4, [sl]
 80105ba:	f8da 3000 	ldr.w	r3, [sl]
 80105be:	4499      	add	r9, r3
 80105c0:	e7d3      	b.n	801056a <__cvt+0x6a>
 80105c2:	1c59      	adds	r1, r3, #1
 80105c4:	9103      	str	r1, [sp, #12]
 80105c6:	701a      	strb	r2, [r3, #0]
 80105c8:	e7d9      	b.n	801057e <__cvt+0x7e>

080105ca <__exponent>:
 80105ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105cc:	2900      	cmp	r1, #0
 80105ce:	bfba      	itte	lt
 80105d0:	4249      	neglt	r1, r1
 80105d2:	232d      	movlt	r3, #45	@ 0x2d
 80105d4:	232b      	movge	r3, #43	@ 0x2b
 80105d6:	2909      	cmp	r1, #9
 80105d8:	7002      	strb	r2, [r0, #0]
 80105da:	7043      	strb	r3, [r0, #1]
 80105dc:	dd29      	ble.n	8010632 <__exponent+0x68>
 80105de:	f10d 0307 	add.w	r3, sp, #7
 80105e2:	461d      	mov	r5, r3
 80105e4:	270a      	movs	r7, #10
 80105e6:	461a      	mov	r2, r3
 80105e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80105ec:	fb07 1416 	mls	r4, r7, r6, r1
 80105f0:	3430      	adds	r4, #48	@ 0x30
 80105f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80105f6:	460c      	mov	r4, r1
 80105f8:	2c63      	cmp	r4, #99	@ 0x63
 80105fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80105fe:	4631      	mov	r1, r6
 8010600:	dcf1      	bgt.n	80105e6 <__exponent+0x1c>
 8010602:	3130      	adds	r1, #48	@ 0x30
 8010604:	1e94      	subs	r4, r2, #2
 8010606:	f803 1c01 	strb.w	r1, [r3, #-1]
 801060a:	1c41      	adds	r1, r0, #1
 801060c:	4623      	mov	r3, r4
 801060e:	42ab      	cmp	r3, r5
 8010610:	d30a      	bcc.n	8010628 <__exponent+0x5e>
 8010612:	f10d 0309 	add.w	r3, sp, #9
 8010616:	1a9b      	subs	r3, r3, r2
 8010618:	42ac      	cmp	r4, r5
 801061a:	bf88      	it	hi
 801061c:	2300      	movhi	r3, #0
 801061e:	3302      	adds	r3, #2
 8010620:	4403      	add	r3, r0
 8010622:	1a18      	subs	r0, r3, r0
 8010624:	b003      	add	sp, #12
 8010626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010628:	f813 6b01 	ldrb.w	r6, [r3], #1
 801062c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010630:	e7ed      	b.n	801060e <__exponent+0x44>
 8010632:	2330      	movs	r3, #48	@ 0x30
 8010634:	3130      	adds	r1, #48	@ 0x30
 8010636:	7083      	strb	r3, [r0, #2]
 8010638:	70c1      	strb	r1, [r0, #3]
 801063a:	1d03      	adds	r3, r0, #4
 801063c:	e7f1      	b.n	8010622 <__exponent+0x58>
	...

08010640 <_printf_float>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	b08d      	sub	sp, #52	@ 0x34
 8010646:	460c      	mov	r4, r1
 8010648:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801064c:	4616      	mov	r6, r2
 801064e:	461f      	mov	r7, r3
 8010650:	4605      	mov	r5, r0
 8010652:	f000 fcdb 	bl	801100c <_localeconv_r>
 8010656:	6803      	ldr	r3, [r0, #0]
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	4618      	mov	r0, r3
 801065c:	f7ef fe30 	bl	80002c0 <strlen>
 8010660:	2300      	movs	r3, #0
 8010662:	930a      	str	r3, [sp, #40]	@ 0x28
 8010664:	f8d8 3000 	ldr.w	r3, [r8]
 8010668:	9005      	str	r0, [sp, #20]
 801066a:	3307      	adds	r3, #7
 801066c:	f023 0307 	bic.w	r3, r3, #7
 8010670:	f103 0208 	add.w	r2, r3, #8
 8010674:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010678:	f8d4 b000 	ldr.w	fp, [r4]
 801067c:	f8c8 2000 	str.w	r2, [r8]
 8010680:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010684:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010688:	9307      	str	r3, [sp, #28]
 801068a:	f8cd 8018 	str.w	r8, [sp, #24]
 801068e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010696:	4b9c      	ldr	r3, [pc, #624]	@ (8010908 <_printf_float+0x2c8>)
 8010698:	f04f 32ff 	mov.w	r2, #4294967295
 801069c:	f7f0 fa6e 	bl	8000b7c <__aeabi_dcmpun>
 80106a0:	bb70      	cbnz	r0, 8010700 <_printf_float+0xc0>
 80106a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106a6:	4b98      	ldr	r3, [pc, #608]	@ (8010908 <_printf_float+0x2c8>)
 80106a8:	f04f 32ff 	mov.w	r2, #4294967295
 80106ac:	f7f0 fa48 	bl	8000b40 <__aeabi_dcmple>
 80106b0:	bb30      	cbnz	r0, 8010700 <_printf_float+0xc0>
 80106b2:	2200      	movs	r2, #0
 80106b4:	2300      	movs	r3, #0
 80106b6:	4640      	mov	r0, r8
 80106b8:	4649      	mov	r1, r9
 80106ba:	f7f0 fa37 	bl	8000b2c <__aeabi_dcmplt>
 80106be:	b110      	cbz	r0, 80106c6 <_printf_float+0x86>
 80106c0:	232d      	movs	r3, #45	@ 0x2d
 80106c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106c6:	4a91      	ldr	r2, [pc, #580]	@ (801090c <_printf_float+0x2cc>)
 80106c8:	4b91      	ldr	r3, [pc, #580]	@ (8010910 <_printf_float+0x2d0>)
 80106ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80106ce:	bf8c      	ite	hi
 80106d0:	4690      	movhi	r8, r2
 80106d2:	4698      	movls	r8, r3
 80106d4:	2303      	movs	r3, #3
 80106d6:	6123      	str	r3, [r4, #16]
 80106d8:	f02b 0304 	bic.w	r3, fp, #4
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	f04f 0900 	mov.w	r9, #0
 80106e2:	9700      	str	r7, [sp, #0]
 80106e4:	4633      	mov	r3, r6
 80106e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80106e8:	4621      	mov	r1, r4
 80106ea:	4628      	mov	r0, r5
 80106ec:	f000 f9d2 	bl	8010a94 <_printf_common>
 80106f0:	3001      	adds	r0, #1
 80106f2:	f040 808d 	bne.w	8010810 <_printf_float+0x1d0>
 80106f6:	f04f 30ff 	mov.w	r0, #4294967295
 80106fa:	b00d      	add	sp, #52	@ 0x34
 80106fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010700:	4642      	mov	r2, r8
 8010702:	464b      	mov	r3, r9
 8010704:	4640      	mov	r0, r8
 8010706:	4649      	mov	r1, r9
 8010708:	f7f0 fa38 	bl	8000b7c <__aeabi_dcmpun>
 801070c:	b140      	cbz	r0, 8010720 <_printf_float+0xe0>
 801070e:	464b      	mov	r3, r9
 8010710:	2b00      	cmp	r3, #0
 8010712:	bfbc      	itt	lt
 8010714:	232d      	movlt	r3, #45	@ 0x2d
 8010716:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801071a:	4a7e      	ldr	r2, [pc, #504]	@ (8010914 <_printf_float+0x2d4>)
 801071c:	4b7e      	ldr	r3, [pc, #504]	@ (8010918 <_printf_float+0x2d8>)
 801071e:	e7d4      	b.n	80106ca <_printf_float+0x8a>
 8010720:	6863      	ldr	r3, [r4, #4]
 8010722:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010726:	9206      	str	r2, [sp, #24]
 8010728:	1c5a      	adds	r2, r3, #1
 801072a:	d13b      	bne.n	80107a4 <_printf_float+0x164>
 801072c:	2306      	movs	r3, #6
 801072e:	6063      	str	r3, [r4, #4]
 8010730:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010734:	2300      	movs	r3, #0
 8010736:	6022      	str	r2, [r4, #0]
 8010738:	9303      	str	r3, [sp, #12]
 801073a:	ab0a      	add	r3, sp, #40	@ 0x28
 801073c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010740:	ab09      	add	r3, sp, #36	@ 0x24
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	6861      	ldr	r1, [r4, #4]
 8010746:	ec49 8b10 	vmov	d0, r8, r9
 801074a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801074e:	4628      	mov	r0, r5
 8010750:	f7ff fed6 	bl	8010500 <__cvt>
 8010754:	9b06      	ldr	r3, [sp, #24]
 8010756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010758:	2b47      	cmp	r3, #71	@ 0x47
 801075a:	4680      	mov	r8, r0
 801075c:	d129      	bne.n	80107b2 <_printf_float+0x172>
 801075e:	1cc8      	adds	r0, r1, #3
 8010760:	db02      	blt.n	8010768 <_printf_float+0x128>
 8010762:	6863      	ldr	r3, [r4, #4]
 8010764:	4299      	cmp	r1, r3
 8010766:	dd41      	ble.n	80107ec <_printf_float+0x1ac>
 8010768:	f1aa 0a02 	sub.w	sl, sl, #2
 801076c:	fa5f fa8a 	uxtb.w	sl, sl
 8010770:	3901      	subs	r1, #1
 8010772:	4652      	mov	r2, sl
 8010774:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010778:	9109      	str	r1, [sp, #36]	@ 0x24
 801077a:	f7ff ff26 	bl	80105ca <__exponent>
 801077e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010780:	1813      	adds	r3, r2, r0
 8010782:	2a01      	cmp	r2, #1
 8010784:	4681      	mov	r9, r0
 8010786:	6123      	str	r3, [r4, #16]
 8010788:	dc02      	bgt.n	8010790 <_printf_float+0x150>
 801078a:	6822      	ldr	r2, [r4, #0]
 801078c:	07d2      	lsls	r2, r2, #31
 801078e:	d501      	bpl.n	8010794 <_printf_float+0x154>
 8010790:	3301      	adds	r3, #1
 8010792:	6123      	str	r3, [r4, #16]
 8010794:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010798:	2b00      	cmp	r3, #0
 801079a:	d0a2      	beq.n	80106e2 <_printf_float+0xa2>
 801079c:	232d      	movs	r3, #45	@ 0x2d
 801079e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80107a2:	e79e      	b.n	80106e2 <_printf_float+0xa2>
 80107a4:	9a06      	ldr	r2, [sp, #24]
 80107a6:	2a47      	cmp	r2, #71	@ 0x47
 80107a8:	d1c2      	bne.n	8010730 <_printf_float+0xf0>
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1c0      	bne.n	8010730 <_printf_float+0xf0>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e7bd      	b.n	801072e <_printf_float+0xee>
 80107b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80107b6:	d9db      	bls.n	8010770 <_printf_float+0x130>
 80107b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80107bc:	d118      	bne.n	80107f0 <_printf_float+0x1b0>
 80107be:	2900      	cmp	r1, #0
 80107c0:	6863      	ldr	r3, [r4, #4]
 80107c2:	dd0b      	ble.n	80107dc <_printf_float+0x19c>
 80107c4:	6121      	str	r1, [r4, #16]
 80107c6:	b913      	cbnz	r3, 80107ce <_printf_float+0x18e>
 80107c8:	6822      	ldr	r2, [r4, #0]
 80107ca:	07d0      	lsls	r0, r2, #31
 80107cc:	d502      	bpl.n	80107d4 <_printf_float+0x194>
 80107ce:	3301      	adds	r3, #1
 80107d0:	440b      	add	r3, r1
 80107d2:	6123      	str	r3, [r4, #16]
 80107d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80107d6:	f04f 0900 	mov.w	r9, #0
 80107da:	e7db      	b.n	8010794 <_printf_float+0x154>
 80107dc:	b913      	cbnz	r3, 80107e4 <_printf_float+0x1a4>
 80107de:	6822      	ldr	r2, [r4, #0]
 80107e0:	07d2      	lsls	r2, r2, #31
 80107e2:	d501      	bpl.n	80107e8 <_printf_float+0x1a8>
 80107e4:	3302      	adds	r3, #2
 80107e6:	e7f4      	b.n	80107d2 <_printf_float+0x192>
 80107e8:	2301      	movs	r3, #1
 80107ea:	e7f2      	b.n	80107d2 <_printf_float+0x192>
 80107ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80107f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107f2:	4299      	cmp	r1, r3
 80107f4:	db05      	blt.n	8010802 <_printf_float+0x1c2>
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	6121      	str	r1, [r4, #16]
 80107fa:	07d8      	lsls	r0, r3, #31
 80107fc:	d5ea      	bpl.n	80107d4 <_printf_float+0x194>
 80107fe:	1c4b      	adds	r3, r1, #1
 8010800:	e7e7      	b.n	80107d2 <_printf_float+0x192>
 8010802:	2900      	cmp	r1, #0
 8010804:	bfd4      	ite	le
 8010806:	f1c1 0202 	rsble	r2, r1, #2
 801080a:	2201      	movgt	r2, #1
 801080c:	4413      	add	r3, r2
 801080e:	e7e0      	b.n	80107d2 <_printf_float+0x192>
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	055a      	lsls	r2, r3, #21
 8010814:	d407      	bmi.n	8010826 <_printf_float+0x1e6>
 8010816:	6923      	ldr	r3, [r4, #16]
 8010818:	4642      	mov	r2, r8
 801081a:	4631      	mov	r1, r6
 801081c:	4628      	mov	r0, r5
 801081e:	47b8      	blx	r7
 8010820:	3001      	adds	r0, #1
 8010822:	d12b      	bne.n	801087c <_printf_float+0x23c>
 8010824:	e767      	b.n	80106f6 <_printf_float+0xb6>
 8010826:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801082a:	f240 80dd 	bls.w	80109e8 <_printf_float+0x3a8>
 801082e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010832:	2200      	movs	r2, #0
 8010834:	2300      	movs	r3, #0
 8010836:	f7f0 f96f 	bl	8000b18 <__aeabi_dcmpeq>
 801083a:	2800      	cmp	r0, #0
 801083c:	d033      	beq.n	80108a6 <_printf_float+0x266>
 801083e:	4a37      	ldr	r2, [pc, #220]	@ (801091c <_printf_float+0x2dc>)
 8010840:	2301      	movs	r3, #1
 8010842:	4631      	mov	r1, r6
 8010844:	4628      	mov	r0, r5
 8010846:	47b8      	blx	r7
 8010848:	3001      	adds	r0, #1
 801084a:	f43f af54 	beq.w	80106f6 <_printf_float+0xb6>
 801084e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010852:	4543      	cmp	r3, r8
 8010854:	db02      	blt.n	801085c <_printf_float+0x21c>
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	07d8      	lsls	r0, r3, #31
 801085a:	d50f      	bpl.n	801087c <_printf_float+0x23c>
 801085c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010860:	4631      	mov	r1, r6
 8010862:	4628      	mov	r0, r5
 8010864:	47b8      	blx	r7
 8010866:	3001      	adds	r0, #1
 8010868:	f43f af45 	beq.w	80106f6 <_printf_float+0xb6>
 801086c:	f04f 0900 	mov.w	r9, #0
 8010870:	f108 38ff 	add.w	r8, r8, #4294967295
 8010874:	f104 0a1a 	add.w	sl, r4, #26
 8010878:	45c8      	cmp	r8, r9
 801087a:	dc09      	bgt.n	8010890 <_printf_float+0x250>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	079b      	lsls	r3, r3, #30
 8010880:	f100 8103 	bmi.w	8010a8a <_printf_float+0x44a>
 8010884:	68e0      	ldr	r0, [r4, #12]
 8010886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010888:	4298      	cmp	r0, r3
 801088a:	bfb8      	it	lt
 801088c:	4618      	movlt	r0, r3
 801088e:	e734      	b.n	80106fa <_printf_float+0xba>
 8010890:	2301      	movs	r3, #1
 8010892:	4652      	mov	r2, sl
 8010894:	4631      	mov	r1, r6
 8010896:	4628      	mov	r0, r5
 8010898:	47b8      	blx	r7
 801089a:	3001      	adds	r0, #1
 801089c:	f43f af2b 	beq.w	80106f6 <_printf_float+0xb6>
 80108a0:	f109 0901 	add.w	r9, r9, #1
 80108a4:	e7e8      	b.n	8010878 <_printf_float+0x238>
 80108a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	dc39      	bgt.n	8010920 <_printf_float+0x2e0>
 80108ac:	4a1b      	ldr	r2, [pc, #108]	@ (801091c <_printf_float+0x2dc>)
 80108ae:	2301      	movs	r3, #1
 80108b0:	4631      	mov	r1, r6
 80108b2:	4628      	mov	r0, r5
 80108b4:	47b8      	blx	r7
 80108b6:	3001      	adds	r0, #1
 80108b8:	f43f af1d 	beq.w	80106f6 <_printf_float+0xb6>
 80108bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80108c0:	ea59 0303 	orrs.w	r3, r9, r3
 80108c4:	d102      	bne.n	80108cc <_printf_float+0x28c>
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	07d9      	lsls	r1, r3, #31
 80108ca:	d5d7      	bpl.n	801087c <_printf_float+0x23c>
 80108cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108d0:	4631      	mov	r1, r6
 80108d2:	4628      	mov	r0, r5
 80108d4:	47b8      	blx	r7
 80108d6:	3001      	adds	r0, #1
 80108d8:	f43f af0d 	beq.w	80106f6 <_printf_float+0xb6>
 80108dc:	f04f 0a00 	mov.w	sl, #0
 80108e0:	f104 0b1a 	add.w	fp, r4, #26
 80108e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108e6:	425b      	negs	r3, r3
 80108e8:	4553      	cmp	r3, sl
 80108ea:	dc01      	bgt.n	80108f0 <_printf_float+0x2b0>
 80108ec:	464b      	mov	r3, r9
 80108ee:	e793      	b.n	8010818 <_printf_float+0x1d8>
 80108f0:	2301      	movs	r3, #1
 80108f2:	465a      	mov	r2, fp
 80108f4:	4631      	mov	r1, r6
 80108f6:	4628      	mov	r0, r5
 80108f8:	47b8      	blx	r7
 80108fa:	3001      	adds	r0, #1
 80108fc:	f43f aefb 	beq.w	80106f6 <_printf_float+0xb6>
 8010900:	f10a 0a01 	add.w	sl, sl, #1
 8010904:	e7ee      	b.n	80108e4 <_printf_float+0x2a4>
 8010906:	bf00      	nop
 8010908:	7fefffff 	.word	0x7fefffff
 801090c:	080142b0 	.word	0x080142b0
 8010910:	080142ac 	.word	0x080142ac
 8010914:	080142b8 	.word	0x080142b8
 8010918:	080142b4 	.word	0x080142b4
 801091c:	080142bc 	.word	0x080142bc
 8010920:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010922:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010926:	4553      	cmp	r3, sl
 8010928:	bfa8      	it	ge
 801092a:	4653      	movge	r3, sl
 801092c:	2b00      	cmp	r3, #0
 801092e:	4699      	mov	r9, r3
 8010930:	dc36      	bgt.n	80109a0 <_printf_float+0x360>
 8010932:	f04f 0b00 	mov.w	fp, #0
 8010936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801093a:	f104 021a 	add.w	r2, r4, #26
 801093e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010940:	9306      	str	r3, [sp, #24]
 8010942:	eba3 0309 	sub.w	r3, r3, r9
 8010946:	455b      	cmp	r3, fp
 8010948:	dc31      	bgt.n	80109ae <_printf_float+0x36e>
 801094a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801094c:	459a      	cmp	sl, r3
 801094e:	dc3a      	bgt.n	80109c6 <_printf_float+0x386>
 8010950:	6823      	ldr	r3, [r4, #0]
 8010952:	07da      	lsls	r2, r3, #31
 8010954:	d437      	bmi.n	80109c6 <_printf_float+0x386>
 8010956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010958:	ebaa 0903 	sub.w	r9, sl, r3
 801095c:	9b06      	ldr	r3, [sp, #24]
 801095e:	ebaa 0303 	sub.w	r3, sl, r3
 8010962:	4599      	cmp	r9, r3
 8010964:	bfa8      	it	ge
 8010966:	4699      	movge	r9, r3
 8010968:	f1b9 0f00 	cmp.w	r9, #0
 801096c:	dc33      	bgt.n	80109d6 <_printf_float+0x396>
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010976:	f104 0b1a 	add.w	fp, r4, #26
 801097a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801097c:	ebaa 0303 	sub.w	r3, sl, r3
 8010980:	eba3 0309 	sub.w	r3, r3, r9
 8010984:	4543      	cmp	r3, r8
 8010986:	f77f af79 	ble.w	801087c <_printf_float+0x23c>
 801098a:	2301      	movs	r3, #1
 801098c:	465a      	mov	r2, fp
 801098e:	4631      	mov	r1, r6
 8010990:	4628      	mov	r0, r5
 8010992:	47b8      	blx	r7
 8010994:	3001      	adds	r0, #1
 8010996:	f43f aeae 	beq.w	80106f6 <_printf_float+0xb6>
 801099a:	f108 0801 	add.w	r8, r8, #1
 801099e:	e7ec      	b.n	801097a <_printf_float+0x33a>
 80109a0:	4642      	mov	r2, r8
 80109a2:	4631      	mov	r1, r6
 80109a4:	4628      	mov	r0, r5
 80109a6:	47b8      	blx	r7
 80109a8:	3001      	adds	r0, #1
 80109aa:	d1c2      	bne.n	8010932 <_printf_float+0x2f2>
 80109ac:	e6a3      	b.n	80106f6 <_printf_float+0xb6>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4631      	mov	r1, r6
 80109b2:	4628      	mov	r0, r5
 80109b4:	9206      	str	r2, [sp, #24]
 80109b6:	47b8      	blx	r7
 80109b8:	3001      	adds	r0, #1
 80109ba:	f43f ae9c 	beq.w	80106f6 <_printf_float+0xb6>
 80109be:	9a06      	ldr	r2, [sp, #24]
 80109c0:	f10b 0b01 	add.w	fp, fp, #1
 80109c4:	e7bb      	b.n	801093e <_printf_float+0x2fe>
 80109c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109ca:	4631      	mov	r1, r6
 80109cc:	4628      	mov	r0, r5
 80109ce:	47b8      	blx	r7
 80109d0:	3001      	adds	r0, #1
 80109d2:	d1c0      	bne.n	8010956 <_printf_float+0x316>
 80109d4:	e68f      	b.n	80106f6 <_printf_float+0xb6>
 80109d6:	9a06      	ldr	r2, [sp, #24]
 80109d8:	464b      	mov	r3, r9
 80109da:	4442      	add	r2, r8
 80109dc:	4631      	mov	r1, r6
 80109de:	4628      	mov	r0, r5
 80109e0:	47b8      	blx	r7
 80109e2:	3001      	adds	r0, #1
 80109e4:	d1c3      	bne.n	801096e <_printf_float+0x32e>
 80109e6:	e686      	b.n	80106f6 <_printf_float+0xb6>
 80109e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80109ec:	f1ba 0f01 	cmp.w	sl, #1
 80109f0:	dc01      	bgt.n	80109f6 <_printf_float+0x3b6>
 80109f2:	07db      	lsls	r3, r3, #31
 80109f4:	d536      	bpl.n	8010a64 <_printf_float+0x424>
 80109f6:	2301      	movs	r3, #1
 80109f8:	4642      	mov	r2, r8
 80109fa:	4631      	mov	r1, r6
 80109fc:	4628      	mov	r0, r5
 80109fe:	47b8      	blx	r7
 8010a00:	3001      	adds	r0, #1
 8010a02:	f43f ae78 	beq.w	80106f6 <_printf_float+0xb6>
 8010a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	47b8      	blx	r7
 8010a10:	3001      	adds	r0, #1
 8010a12:	f43f ae70 	beq.w	80106f6 <_printf_float+0xb6>
 8010a16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a22:	f7f0 f879 	bl	8000b18 <__aeabi_dcmpeq>
 8010a26:	b9c0      	cbnz	r0, 8010a5a <_printf_float+0x41a>
 8010a28:	4653      	mov	r3, sl
 8010a2a:	f108 0201 	add.w	r2, r8, #1
 8010a2e:	4631      	mov	r1, r6
 8010a30:	4628      	mov	r0, r5
 8010a32:	47b8      	blx	r7
 8010a34:	3001      	adds	r0, #1
 8010a36:	d10c      	bne.n	8010a52 <_printf_float+0x412>
 8010a38:	e65d      	b.n	80106f6 <_printf_float+0xb6>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	465a      	mov	r2, fp
 8010a3e:	4631      	mov	r1, r6
 8010a40:	4628      	mov	r0, r5
 8010a42:	47b8      	blx	r7
 8010a44:	3001      	adds	r0, #1
 8010a46:	f43f ae56 	beq.w	80106f6 <_printf_float+0xb6>
 8010a4a:	f108 0801 	add.w	r8, r8, #1
 8010a4e:	45d0      	cmp	r8, sl
 8010a50:	dbf3      	blt.n	8010a3a <_printf_float+0x3fa>
 8010a52:	464b      	mov	r3, r9
 8010a54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010a58:	e6df      	b.n	801081a <_printf_float+0x1da>
 8010a5a:	f04f 0800 	mov.w	r8, #0
 8010a5e:	f104 0b1a 	add.w	fp, r4, #26
 8010a62:	e7f4      	b.n	8010a4e <_printf_float+0x40e>
 8010a64:	2301      	movs	r3, #1
 8010a66:	4642      	mov	r2, r8
 8010a68:	e7e1      	b.n	8010a2e <_printf_float+0x3ee>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	464a      	mov	r2, r9
 8010a6e:	4631      	mov	r1, r6
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b8      	blx	r7
 8010a74:	3001      	adds	r0, #1
 8010a76:	f43f ae3e 	beq.w	80106f6 <_printf_float+0xb6>
 8010a7a:	f108 0801 	add.w	r8, r8, #1
 8010a7e:	68e3      	ldr	r3, [r4, #12]
 8010a80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a82:	1a5b      	subs	r3, r3, r1
 8010a84:	4543      	cmp	r3, r8
 8010a86:	dcf0      	bgt.n	8010a6a <_printf_float+0x42a>
 8010a88:	e6fc      	b.n	8010884 <_printf_float+0x244>
 8010a8a:	f04f 0800 	mov.w	r8, #0
 8010a8e:	f104 0919 	add.w	r9, r4, #25
 8010a92:	e7f4      	b.n	8010a7e <_printf_float+0x43e>

08010a94 <_printf_common>:
 8010a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a98:	4616      	mov	r6, r2
 8010a9a:	4698      	mov	r8, r3
 8010a9c:	688a      	ldr	r2, [r1, #8]
 8010a9e:	690b      	ldr	r3, [r1, #16]
 8010aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	bfb8      	it	lt
 8010aa8:	4613      	movlt	r3, r2
 8010aaa:	6033      	str	r3, [r6, #0]
 8010aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ab0:	4607      	mov	r7, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	b10a      	cbz	r2, 8010aba <_printf_common+0x26>
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	6033      	str	r3, [r6, #0]
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	0699      	lsls	r1, r3, #26
 8010abe:	bf42      	ittt	mi
 8010ac0:	6833      	ldrmi	r3, [r6, #0]
 8010ac2:	3302      	addmi	r3, #2
 8010ac4:	6033      	strmi	r3, [r6, #0]
 8010ac6:	6825      	ldr	r5, [r4, #0]
 8010ac8:	f015 0506 	ands.w	r5, r5, #6
 8010acc:	d106      	bne.n	8010adc <_printf_common+0x48>
 8010ace:	f104 0a19 	add.w	sl, r4, #25
 8010ad2:	68e3      	ldr	r3, [r4, #12]
 8010ad4:	6832      	ldr	r2, [r6, #0]
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	42ab      	cmp	r3, r5
 8010ada:	dc26      	bgt.n	8010b2a <_printf_common+0x96>
 8010adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	3b00      	subs	r3, #0
 8010ae4:	bf18      	it	ne
 8010ae6:	2301      	movne	r3, #1
 8010ae8:	0692      	lsls	r2, r2, #26
 8010aea:	d42b      	bmi.n	8010b44 <_printf_common+0xb0>
 8010aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010af0:	4641      	mov	r1, r8
 8010af2:	4638      	mov	r0, r7
 8010af4:	47c8      	blx	r9
 8010af6:	3001      	adds	r0, #1
 8010af8:	d01e      	beq.n	8010b38 <_printf_common+0xa4>
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	6922      	ldr	r2, [r4, #16]
 8010afe:	f003 0306 	and.w	r3, r3, #6
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	bf02      	ittt	eq
 8010b06:	68e5      	ldreq	r5, [r4, #12]
 8010b08:	6833      	ldreq	r3, [r6, #0]
 8010b0a:	1aed      	subeq	r5, r5, r3
 8010b0c:	68a3      	ldr	r3, [r4, #8]
 8010b0e:	bf0c      	ite	eq
 8010b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b14:	2500      	movne	r5, #0
 8010b16:	4293      	cmp	r3, r2
 8010b18:	bfc4      	itt	gt
 8010b1a:	1a9b      	subgt	r3, r3, r2
 8010b1c:	18ed      	addgt	r5, r5, r3
 8010b1e:	2600      	movs	r6, #0
 8010b20:	341a      	adds	r4, #26
 8010b22:	42b5      	cmp	r5, r6
 8010b24:	d11a      	bne.n	8010b5c <_printf_common+0xc8>
 8010b26:	2000      	movs	r0, #0
 8010b28:	e008      	b.n	8010b3c <_printf_common+0xa8>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4641      	mov	r1, r8
 8010b30:	4638      	mov	r0, r7
 8010b32:	47c8      	blx	r9
 8010b34:	3001      	adds	r0, #1
 8010b36:	d103      	bne.n	8010b40 <_printf_common+0xac>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b40:	3501      	adds	r5, #1
 8010b42:	e7c6      	b.n	8010ad2 <_printf_common+0x3e>
 8010b44:	18e1      	adds	r1, r4, r3
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	2030      	movs	r0, #48	@ 0x30
 8010b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010b4e:	4422      	add	r2, r4
 8010b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010b58:	3302      	adds	r3, #2
 8010b5a:	e7c7      	b.n	8010aec <_printf_common+0x58>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	4622      	mov	r2, r4
 8010b60:	4641      	mov	r1, r8
 8010b62:	4638      	mov	r0, r7
 8010b64:	47c8      	blx	r9
 8010b66:	3001      	adds	r0, #1
 8010b68:	d0e6      	beq.n	8010b38 <_printf_common+0xa4>
 8010b6a:	3601      	adds	r6, #1
 8010b6c:	e7d9      	b.n	8010b22 <_printf_common+0x8e>
	...

08010b70 <_printf_i>:
 8010b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b74:	7e0f      	ldrb	r7, [r1, #24]
 8010b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b78:	2f78      	cmp	r7, #120	@ 0x78
 8010b7a:	4691      	mov	r9, r2
 8010b7c:	4680      	mov	r8, r0
 8010b7e:	460c      	mov	r4, r1
 8010b80:	469a      	mov	sl, r3
 8010b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b86:	d807      	bhi.n	8010b98 <_printf_i+0x28>
 8010b88:	2f62      	cmp	r7, #98	@ 0x62
 8010b8a:	d80a      	bhi.n	8010ba2 <_printf_i+0x32>
 8010b8c:	2f00      	cmp	r7, #0
 8010b8e:	f000 80d1 	beq.w	8010d34 <_printf_i+0x1c4>
 8010b92:	2f58      	cmp	r7, #88	@ 0x58
 8010b94:	f000 80b8 	beq.w	8010d08 <_printf_i+0x198>
 8010b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ba0:	e03a      	b.n	8010c18 <_printf_i+0xa8>
 8010ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ba6:	2b15      	cmp	r3, #21
 8010ba8:	d8f6      	bhi.n	8010b98 <_printf_i+0x28>
 8010baa:	a101      	add	r1, pc, #4	@ (adr r1, 8010bb0 <_printf_i+0x40>)
 8010bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010bb0:	08010c09 	.word	0x08010c09
 8010bb4:	08010c1d 	.word	0x08010c1d
 8010bb8:	08010b99 	.word	0x08010b99
 8010bbc:	08010b99 	.word	0x08010b99
 8010bc0:	08010b99 	.word	0x08010b99
 8010bc4:	08010b99 	.word	0x08010b99
 8010bc8:	08010c1d 	.word	0x08010c1d
 8010bcc:	08010b99 	.word	0x08010b99
 8010bd0:	08010b99 	.word	0x08010b99
 8010bd4:	08010b99 	.word	0x08010b99
 8010bd8:	08010b99 	.word	0x08010b99
 8010bdc:	08010d1b 	.word	0x08010d1b
 8010be0:	08010c47 	.word	0x08010c47
 8010be4:	08010cd5 	.word	0x08010cd5
 8010be8:	08010b99 	.word	0x08010b99
 8010bec:	08010b99 	.word	0x08010b99
 8010bf0:	08010d3d 	.word	0x08010d3d
 8010bf4:	08010b99 	.word	0x08010b99
 8010bf8:	08010c47 	.word	0x08010c47
 8010bfc:	08010b99 	.word	0x08010b99
 8010c00:	08010b99 	.word	0x08010b99
 8010c04:	08010cdd 	.word	0x08010cdd
 8010c08:	6833      	ldr	r3, [r6, #0]
 8010c0a:	1d1a      	adds	r2, r3, #4
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6032      	str	r2, [r6, #0]
 8010c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e09c      	b.n	8010d56 <_printf_i+0x1e6>
 8010c1c:	6833      	ldr	r3, [r6, #0]
 8010c1e:	6820      	ldr	r0, [r4, #0]
 8010c20:	1d19      	adds	r1, r3, #4
 8010c22:	6031      	str	r1, [r6, #0]
 8010c24:	0606      	lsls	r6, r0, #24
 8010c26:	d501      	bpl.n	8010c2c <_printf_i+0xbc>
 8010c28:	681d      	ldr	r5, [r3, #0]
 8010c2a:	e003      	b.n	8010c34 <_printf_i+0xc4>
 8010c2c:	0645      	lsls	r5, r0, #25
 8010c2e:	d5fb      	bpl.n	8010c28 <_printf_i+0xb8>
 8010c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010c34:	2d00      	cmp	r5, #0
 8010c36:	da03      	bge.n	8010c40 <_printf_i+0xd0>
 8010c38:	232d      	movs	r3, #45	@ 0x2d
 8010c3a:	426d      	negs	r5, r5
 8010c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c40:	4858      	ldr	r0, [pc, #352]	@ (8010da4 <_printf_i+0x234>)
 8010c42:	230a      	movs	r3, #10
 8010c44:	e011      	b.n	8010c6a <_printf_i+0xfa>
 8010c46:	6821      	ldr	r1, [r4, #0]
 8010c48:	6833      	ldr	r3, [r6, #0]
 8010c4a:	0608      	lsls	r0, r1, #24
 8010c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010c50:	d402      	bmi.n	8010c58 <_printf_i+0xe8>
 8010c52:	0649      	lsls	r1, r1, #25
 8010c54:	bf48      	it	mi
 8010c56:	b2ad      	uxthmi	r5, r5
 8010c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8010c5a:	4852      	ldr	r0, [pc, #328]	@ (8010da4 <_printf_i+0x234>)
 8010c5c:	6033      	str	r3, [r6, #0]
 8010c5e:	bf14      	ite	ne
 8010c60:	230a      	movne	r3, #10
 8010c62:	2308      	moveq	r3, #8
 8010c64:	2100      	movs	r1, #0
 8010c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010c6a:	6866      	ldr	r6, [r4, #4]
 8010c6c:	60a6      	str	r6, [r4, #8]
 8010c6e:	2e00      	cmp	r6, #0
 8010c70:	db05      	blt.n	8010c7e <_printf_i+0x10e>
 8010c72:	6821      	ldr	r1, [r4, #0]
 8010c74:	432e      	orrs	r6, r5
 8010c76:	f021 0104 	bic.w	r1, r1, #4
 8010c7a:	6021      	str	r1, [r4, #0]
 8010c7c:	d04b      	beq.n	8010d16 <_printf_i+0x1a6>
 8010c7e:	4616      	mov	r6, r2
 8010c80:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c84:	fb03 5711 	mls	r7, r3, r1, r5
 8010c88:	5dc7      	ldrb	r7, [r0, r7]
 8010c8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c8e:	462f      	mov	r7, r5
 8010c90:	42bb      	cmp	r3, r7
 8010c92:	460d      	mov	r5, r1
 8010c94:	d9f4      	bls.n	8010c80 <_printf_i+0x110>
 8010c96:	2b08      	cmp	r3, #8
 8010c98:	d10b      	bne.n	8010cb2 <_printf_i+0x142>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	07df      	lsls	r7, r3, #31
 8010c9e:	d508      	bpl.n	8010cb2 <_printf_i+0x142>
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	6861      	ldr	r1, [r4, #4]
 8010ca4:	4299      	cmp	r1, r3
 8010ca6:	bfde      	ittt	le
 8010ca8:	2330      	movle	r3, #48	@ 0x30
 8010caa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010cae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010cb2:	1b92      	subs	r2, r2, r6
 8010cb4:	6122      	str	r2, [r4, #16]
 8010cb6:	f8cd a000 	str.w	sl, [sp]
 8010cba:	464b      	mov	r3, r9
 8010cbc:	aa03      	add	r2, sp, #12
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4640      	mov	r0, r8
 8010cc2:	f7ff fee7 	bl	8010a94 <_printf_common>
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	d14a      	bne.n	8010d60 <_printf_i+0x1f0>
 8010cca:	f04f 30ff 	mov.w	r0, #4294967295
 8010cce:	b004      	add	sp, #16
 8010cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	f043 0320 	orr.w	r3, r3, #32
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	4832      	ldr	r0, [pc, #200]	@ (8010da8 <_printf_i+0x238>)
 8010cde:	2778      	movs	r7, #120	@ 0x78
 8010ce0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ce4:	6823      	ldr	r3, [r4, #0]
 8010ce6:	6831      	ldr	r1, [r6, #0]
 8010ce8:	061f      	lsls	r7, r3, #24
 8010cea:	f851 5b04 	ldr.w	r5, [r1], #4
 8010cee:	d402      	bmi.n	8010cf6 <_printf_i+0x186>
 8010cf0:	065f      	lsls	r7, r3, #25
 8010cf2:	bf48      	it	mi
 8010cf4:	b2ad      	uxthmi	r5, r5
 8010cf6:	6031      	str	r1, [r6, #0]
 8010cf8:	07d9      	lsls	r1, r3, #31
 8010cfa:	bf44      	itt	mi
 8010cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8010d00:	6023      	strmi	r3, [r4, #0]
 8010d02:	b11d      	cbz	r5, 8010d0c <_printf_i+0x19c>
 8010d04:	2310      	movs	r3, #16
 8010d06:	e7ad      	b.n	8010c64 <_printf_i+0xf4>
 8010d08:	4826      	ldr	r0, [pc, #152]	@ (8010da4 <_printf_i+0x234>)
 8010d0a:	e7e9      	b.n	8010ce0 <_printf_i+0x170>
 8010d0c:	6823      	ldr	r3, [r4, #0]
 8010d0e:	f023 0320 	bic.w	r3, r3, #32
 8010d12:	6023      	str	r3, [r4, #0]
 8010d14:	e7f6      	b.n	8010d04 <_printf_i+0x194>
 8010d16:	4616      	mov	r6, r2
 8010d18:	e7bd      	b.n	8010c96 <_printf_i+0x126>
 8010d1a:	6833      	ldr	r3, [r6, #0]
 8010d1c:	6825      	ldr	r5, [r4, #0]
 8010d1e:	6961      	ldr	r1, [r4, #20]
 8010d20:	1d18      	adds	r0, r3, #4
 8010d22:	6030      	str	r0, [r6, #0]
 8010d24:	062e      	lsls	r6, r5, #24
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	d501      	bpl.n	8010d2e <_printf_i+0x1be>
 8010d2a:	6019      	str	r1, [r3, #0]
 8010d2c:	e002      	b.n	8010d34 <_printf_i+0x1c4>
 8010d2e:	0668      	lsls	r0, r5, #25
 8010d30:	d5fb      	bpl.n	8010d2a <_printf_i+0x1ba>
 8010d32:	8019      	strh	r1, [r3, #0]
 8010d34:	2300      	movs	r3, #0
 8010d36:	6123      	str	r3, [r4, #16]
 8010d38:	4616      	mov	r6, r2
 8010d3a:	e7bc      	b.n	8010cb6 <_printf_i+0x146>
 8010d3c:	6833      	ldr	r3, [r6, #0]
 8010d3e:	1d1a      	adds	r2, r3, #4
 8010d40:	6032      	str	r2, [r6, #0]
 8010d42:	681e      	ldr	r6, [r3, #0]
 8010d44:	6862      	ldr	r2, [r4, #4]
 8010d46:	2100      	movs	r1, #0
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f7ef fa69 	bl	8000220 <memchr>
 8010d4e:	b108      	cbz	r0, 8010d54 <_printf_i+0x1e4>
 8010d50:	1b80      	subs	r0, r0, r6
 8010d52:	6060      	str	r0, [r4, #4]
 8010d54:	6863      	ldr	r3, [r4, #4]
 8010d56:	6123      	str	r3, [r4, #16]
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d5e:	e7aa      	b.n	8010cb6 <_printf_i+0x146>
 8010d60:	6923      	ldr	r3, [r4, #16]
 8010d62:	4632      	mov	r2, r6
 8010d64:	4649      	mov	r1, r9
 8010d66:	4640      	mov	r0, r8
 8010d68:	47d0      	blx	sl
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	d0ad      	beq.n	8010cca <_printf_i+0x15a>
 8010d6e:	6823      	ldr	r3, [r4, #0]
 8010d70:	079b      	lsls	r3, r3, #30
 8010d72:	d413      	bmi.n	8010d9c <_printf_i+0x22c>
 8010d74:	68e0      	ldr	r0, [r4, #12]
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	4298      	cmp	r0, r3
 8010d7a:	bfb8      	it	lt
 8010d7c:	4618      	movlt	r0, r3
 8010d7e:	e7a6      	b.n	8010cce <_printf_i+0x15e>
 8010d80:	2301      	movs	r3, #1
 8010d82:	4632      	mov	r2, r6
 8010d84:	4649      	mov	r1, r9
 8010d86:	4640      	mov	r0, r8
 8010d88:	47d0      	blx	sl
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	d09d      	beq.n	8010cca <_printf_i+0x15a>
 8010d8e:	3501      	adds	r5, #1
 8010d90:	68e3      	ldr	r3, [r4, #12]
 8010d92:	9903      	ldr	r1, [sp, #12]
 8010d94:	1a5b      	subs	r3, r3, r1
 8010d96:	42ab      	cmp	r3, r5
 8010d98:	dcf2      	bgt.n	8010d80 <_printf_i+0x210>
 8010d9a:	e7eb      	b.n	8010d74 <_printf_i+0x204>
 8010d9c:	2500      	movs	r5, #0
 8010d9e:	f104 0619 	add.w	r6, r4, #25
 8010da2:	e7f5      	b.n	8010d90 <_printf_i+0x220>
 8010da4:	080142be 	.word	0x080142be
 8010da8:	080142cf 	.word	0x080142cf

08010dac <std>:
 8010dac:	2300      	movs	r3, #0
 8010dae:	b510      	push	{r4, lr}
 8010db0:	4604      	mov	r4, r0
 8010db2:	e9c0 3300 	strd	r3, r3, [r0]
 8010db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dba:	6083      	str	r3, [r0, #8]
 8010dbc:	8181      	strh	r1, [r0, #12]
 8010dbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010dc0:	81c2      	strh	r2, [r0, #14]
 8010dc2:	6183      	str	r3, [r0, #24]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	2208      	movs	r2, #8
 8010dc8:	305c      	adds	r0, #92	@ 0x5c
 8010dca:	f000 f916 	bl	8010ffa <memset>
 8010dce:	4b0d      	ldr	r3, [pc, #52]	@ (8010e04 <std+0x58>)
 8010dd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8010dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010e08 <std+0x5c>)
 8010dd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8010e0c <std+0x60>)
 8010dd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010dda:	4b0d      	ldr	r3, [pc, #52]	@ (8010e10 <std+0x64>)
 8010ddc:	6323      	str	r3, [r4, #48]	@ 0x30
 8010dde:	4b0d      	ldr	r3, [pc, #52]	@ (8010e14 <std+0x68>)
 8010de0:	6224      	str	r4, [r4, #32]
 8010de2:	429c      	cmp	r4, r3
 8010de4:	d006      	beq.n	8010df4 <std+0x48>
 8010de6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010dea:	4294      	cmp	r4, r2
 8010dec:	d002      	beq.n	8010df4 <std+0x48>
 8010dee:	33d0      	adds	r3, #208	@ 0xd0
 8010df0:	429c      	cmp	r4, r3
 8010df2:	d105      	bne.n	8010e00 <std+0x54>
 8010df4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dfc:	f000 b98a 	b.w	8011114 <__retarget_lock_init_recursive>
 8010e00:	bd10      	pop	{r4, pc}
 8010e02:	bf00      	nop
 8010e04:	08010f75 	.word	0x08010f75
 8010e08:	08010f97 	.word	0x08010f97
 8010e0c:	08010fcf 	.word	0x08010fcf
 8010e10:	08010ff3 	.word	0x08010ff3
 8010e14:	200022c4 	.word	0x200022c4

08010e18 <stdio_exit_handler>:
 8010e18:	4a02      	ldr	r2, [pc, #8]	@ (8010e24 <stdio_exit_handler+0xc>)
 8010e1a:	4903      	ldr	r1, [pc, #12]	@ (8010e28 <stdio_exit_handler+0x10>)
 8010e1c:	4803      	ldr	r0, [pc, #12]	@ (8010e2c <stdio_exit_handler+0x14>)
 8010e1e:	f000 b869 	b.w	8010ef4 <_fwalk_sglue>
 8010e22:	bf00      	nop
 8010e24:	2000010c 	.word	0x2000010c
 8010e28:	08012911 	.word	0x08012911
 8010e2c:	2000011c 	.word	0x2000011c

08010e30 <cleanup_stdio>:
 8010e30:	6841      	ldr	r1, [r0, #4]
 8010e32:	4b0c      	ldr	r3, [pc, #48]	@ (8010e64 <cleanup_stdio+0x34>)
 8010e34:	4299      	cmp	r1, r3
 8010e36:	b510      	push	{r4, lr}
 8010e38:	4604      	mov	r4, r0
 8010e3a:	d001      	beq.n	8010e40 <cleanup_stdio+0x10>
 8010e3c:	f001 fd68 	bl	8012910 <_fflush_r>
 8010e40:	68a1      	ldr	r1, [r4, #8]
 8010e42:	4b09      	ldr	r3, [pc, #36]	@ (8010e68 <cleanup_stdio+0x38>)
 8010e44:	4299      	cmp	r1, r3
 8010e46:	d002      	beq.n	8010e4e <cleanup_stdio+0x1e>
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f001 fd61 	bl	8012910 <_fflush_r>
 8010e4e:	68e1      	ldr	r1, [r4, #12]
 8010e50:	4b06      	ldr	r3, [pc, #24]	@ (8010e6c <cleanup_stdio+0x3c>)
 8010e52:	4299      	cmp	r1, r3
 8010e54:	d004      	beq.n	8010e60 <cleanup_stdio+0x30>
 8010e56:	4620      	mov	r0, r4
 8010e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e5c:	f001 bd58 	b.w	8012910 <_fflush_r>
 8010e60:	bd10      	pop	{r4, pc}
 8010e62:	bf00      	nop
 8010e64:	200022c4 	.word	0x200022c4
 8010e68:	2000232c 	.word	0x2000232c
 8010e6c:	20002394 	.word	0x20002394

08010e70 <global_stdio_init.part.0>:
 8010e70:	b510      	push	{r4, lr}
 8010e72:	4b0b      	ldr	r3, [pc, #44]	@ (8010ea0 <global_stdio_init.part.0+0x30>)
 8010e74:	4c0b      	ldr	r4, [pc, #44]	@ (8010ea4 <global_stdio_init.part.0+0x34>)
 8010e76:	4a0c      	ldr	r2, [pc, #48]	@ (8010ea8 <global_stdio_init.part.0+0x38>)
 8010e78:	601a      	str	r2, [r3, #0]
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	2104      	movs	r1, #4
 8010e80:	f7ff ff94 	bl	8010dac <std>
 8010e84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e88:	2201      	movs	r2, #1
 8010e8a:	2109      	movs	r1, #9
 8010e8c:	f7ff ff8e 	bl	8010dac <std>
 8010e90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e94:	2202      	movs	r2, #2
 8010e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e9a:	2112      	movs	r1, #18
 8010e9c:	f7ff bf86 	b.w	8010dac <std>
 8010ea0:	200023fc 	.word	0x200023fc
 8010ea4:	200022c4 	.word	0x200022c4
 8010ea8:	08010e19 	.word	0x08010e19

08010eac <__sfp_lock_acquire>:
 8010eac:	4801      	ldr	r0, [pc, #4]	@ (8010eb4 <__sfp_lock_acquire+0x8>)
 8010eae:	f000 b932 	b.w	8011116 <__retarget_lock_acquire_recursive>
 8010eb2:	bf00      	nop
 8010eb4:	20002405 	.word	0x20002405

08010eb8 <__sfp_lock_release>:
 8010eb8:	4801      	ldr	r0, [pc, #4]	@ (8010ec0 <__sfp_lock_release+0x8>)
 8010eba:	f000 b92d 	b.w	8011118 <__retarget_lock_release_recursive>
 8010ebe:	bf00      	nop
 8010ec0:	20002405 	.word	0x20002405

08010ec4 <__sinit>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	f7ff fff0 	bl	8010eac <__sfp_lock_acquire>
 8010ecc:	6a23      	ldr	r3, [r4, #32]
 8010ece:	b11b      	cbz	r3, 8010ed8 <__sinit+0x14>
 8010ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ed4:	f7ff bff0 	b.w	8010eb8 <__sfp_lock_release>
 8010ed8:	4b04      	ldr	r3, [pc, #16]	@ (8010eec <__sinit+0x28>)
 8010eda:	6223      	str	r3, [r4, #32]
 8010edc:	4b04      	ldr	r3, [pc, #16]	@ (8010ef0 <__sinit+0x2c>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1f5      	bne.n	8010ed0 <__sinit+0xc>
 8010ee4:	f7ff ffc4 	bl	8010e70 <global_stdio_init.part.0>
 8010ee8:	e7f2      	b.n	8010ed0 <__sinit+0xc>
 8010eea:	bf00      	nop
 8010eec:	08010e31 	.word	0x08010e31
 8010ef0:	200023fc 	.word	0x200023fc

08010ef4 <_fwalk_sglue>:
 8010ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ef8:	4607      	mov	r7, r0
 8010efa:	4688      	mov	r8, r1
 8010efc:	4614      	mov	r4, r2
 8010efe:	2600      	movs	r6, #0
 8010f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f04:	f1b9 0901 	subs.w	r9, r9, #1
 8010f08:	d505      	bpl.n	8010f16 <_fwalk_sglue+0x22>
 8010f0a:	6824      	ldr	r4, [r4, #0]
 8010f0c:	2c00      	cmp	r4, #0
 8010f0e:	d1f7      	bne.n	8010f00 <_fwalk_sglue+0xc>
 8010f10:	4630      	mov	r0, r6
 8010f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f16:	89ab      	ldrh	r3, [r5, #12]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d907      	bls.n	8010f2c <_fwalk_sglue+0x38>
 8010f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f20:	3301      	adds	r3, #1
 8010f22:	d003      	beq.n	8010f2c <_fwalk_sglue+0x38>
 8010f24:	4629      	mov	r1, r5
 8010f26:	4638      	mov	r0, r7
 8010f28:	47c0      	blx	r8
 8010f2a:	4306      	orrs	r6, r0
 8010f2c:	3568      	adds	r5, #104	@ 0x68
 8010f2e:	e7e9      	b.n	8010f04 <_fwalk_sglue+0x10>

08010f30 <siprintf>:
 8010f30:	b40e      	push	{r1, r2, r3}
 8010f32:	b510      	push	{r4, lr}
 8010f34:	b09d      	sub	sp, #116	@ 0x74
 8010f36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010f38:	9002      	str	r0, [sp, #8]
 8010f3a:	9006      	str	r0, [sp, #24]
 8010f3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010f40:	480a      	ldr	r0, [pc, #40]	@ (8010f6c <siprintf+0x3c>)
 8010f42:	9107      	str	r1, [sp, #28]
 8010f44:	9104      	str	r1, [sp, #16]
 8010f46:	490a      	ldr	r1, [pc, #40]	@ (8010f70 <siprintf+0x40>)
 8010f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f4c:	9105      	str	r1, [sp, #20]
 8010f4e:	2400      	movs	r4, #0
 8010f50:	a902      	add	r1, sp, #8
 8010f52:	6800      	ldr	r0, [r0, #0]
 8010f54:	9301      	str	r3, [sp, #4]
 8010f56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010f58:	f001 fb5a 	bl	8012610 <_svfiprintf_r>
 8010f5c:	9b02      	ldr	r3, [sp, #8]
 8010f5e:	701c      	strb	r4, [r3, #0]
 8010f60:	b01d      	add	sp, #116	@ 0x74
 8010f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f66:	b003      	add	sp, #12
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	20000118 	.word	0x20000118
 8010f70:	ffff0208 	.word	0xffff0208

08010f74 <__sread>:
 8010f74:	b510      	push	{r4, lr}
 8010f76:	460c      	mov	r4, r1
 8010f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f7c:	f000 f86c 	bl	8011058 <_read_r>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	bfab      	itete	ge
 8010f84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f86:	89a3      	ldrhlt	r3, [r4, #12]
 8010f88:	181b      	addge	r3, r3, r0
 8010f8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f8e:	bfac      	ite	ge
 8010f90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f92:	81a3      	strhlt	r3, [r4, #12]
 8010f94:	bd10      	pop	{r4, pc}

08010f96 <__swrite>:
 8010f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f9a:	461f      	mov	r7, r3
 8010f9c:	898b      	ldrh	r3, [r1, #12]
 8010f9e:	05db      	lsls	r3, r3, #23
 8010fa0:	4605      	mov	r5, r0
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	4616      	mov	r6, r2
 8010fa6:	d505      	bpl.n	8010fb4 <__swrite+0x1e>
 8010fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fac:	2302      	movs	r3, #2
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f000 f840 	bl	8011034 <_lseek_r>
 8010fb4:	89a3      	ldrh	r3, [r4, #12]
 8010fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fbe:	81a3      	strh	r3, [r4, #12]
 8010fc0:	4632      	mov	r2, r6
 8010fc2:	463b      	mov	r3, r7
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fca:	f000 b867 	b.w	801109c <_write_r>

08010fce <__sseek>:
 8010fce:	b510      	push	{r4, lr}
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd6:	f000 f82d 	bl	8011034 <_lseek_r>
 8010fda:	1c43      	adds	r3, r0, #1
 8010fdc:	89a3      	ldrh	r3, [r4, #12]
 8010fde:	bf15      	itete	ne
 8010fe0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010fe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010fe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010fea:	81a3      	strheq	r3, [r4, #12]
 8010fec:	bf18      	it	ne
 8010fee:	81a3      	strhne	r3, [r4, #12]
 8010ff0:	bd10      	pop	{r4, pc}

08010ff2 <__sclose>:
 8010ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff6:	f000 b80d 	b.w	8011014 <_close_r>

08010ffa <memset>:
 8010ffa:	4402      	add	r2, r0
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d100      	bne.n	8011004 <memset+0xa>
 8011002:	4770      	bx	lr
 8011004:	f803 1b01 	strb.w	r1, [r3], #1
 8011008:	e7f9      	b.n	8010ffe <memset+0x4>
	...

0801100c <_localeconv_r>:
 801100c:	4800      	ldr	r0, [pc, #0]	@ (8011010 <_localeconv_r+0x4>)
 801100e:	4770      	bx	lr
 8011010:	20000258 	.word	0x20000258

08011014 <_close_r>:
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	4d06      	ldr	r5, [pc, #24]	@ (8011030 <_close_r+0x1c>)
 8011018:	2300      	movs	r3, #0
 801101a:	4604      	mov	r4, r0
 801101c:	4608      	mov	r0, r1
 801101e:	602b      	str	r3, [r5, #0]
 8011020:	f7f3 f9c2 	bl	80043a8 <_close>
 8011024:	1c43      	adds	r3, r0, #1
 8011026:	d102      	bne.n	801102e <_close_r+0x1a>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	b103      	cbz	r3, 801102e <_close_r+0x1a>
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	bd38      	pop	{r3, r4, r5, pc}
 8011030:	20002400 	.word	0x20002400

08011034 <_lseek_r>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	4d07      	ldr	r5, [pc, #28]	@ (8011054 <_lseek_r+0x20>)
 8011038:	4604      	mov	r4, r0
 801103a:	4608      	mov	r0, r1
 801103c:	4611      	mov	r1, r2
 801103e:	2200      	movs	r2, #0
 8011040:	602a      	str	r2, [r5, #0]
 8011042:	461a      	mov	r2, r3
 8011044:	f7f3 f9d7 	bl	80043f6 <_lseek>
 8011048:	1c43      	adds	r3, r0, #1
 801104a:	d102      	bne.n	8011052 <_lseek_r+0x1e>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	b103      	cbz	r3, 8011052 <_lseek_r+0x1e>
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	20002400 	.word	0x20002400

08011058 <_read_r>:
 8011058:	b538      	push	{r3, r4, r5, lr}
 801105a:	4d07      	ldr	r5, [pc, #28]	@ (8011078 <_read_r+0x20>)
 801105c:	4604      	mov	r4, r0
 801105e:	4608      	mov	r0, r1
 8011060:	4611      	mov	r1, r2
 8011062:	2200      	movs	r2, #0
 8011064:	602a      	str	r2, [r5, #0]
 8011066:	461a      	mov	r2, r3
 8011068:	f7f3 f965 	bl	8004336 <_read>
 801106c:	1c43      	adds	r3, r0, #1
 801106e:	d102      	bne.n	8011076 <_read_r+0x1e>
 8011070:	682b      	ldr	r3, [r5, #0]
 8011072:	b103      	cbz	r3, 8011076 <_read_r+0x1e>
 8011074:	6023      	str	r3, [r4, #0]
 8011076:	bd38      	pop	{r3, r4, r5, pc}
 8011078:	20002400 	.word	0x20002400

0801107c <_sbrk_r>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4d06      	ldr	r5, [pc, #24]	@ (8011098 <_sbrk_r+0x1c>)
 8011080:	2300      	movs	r3, #0
 8011082:	4604      	mov	r4, r0
 8011084:	4608      	mov	r0, r1
 8011086:	602b      	str	r3, [r5, #0]
 8011088:	f7f3 f9c2 	bl	8004410 <_sbrk>
 801108c:	1c43      	adds	r3, r0, #1
 801108e:	d102      	bne.n	8011096 <_sbrk_r+0x1a>
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	b103      	cbz	r3, 8011096 <_sbrk_r+0x1a>
 8011094:	6023      	str	r3, [r4, #0]
 8011096:	bd38      	pop	{r3, r4, r5, pc}
 8011098:	20002400 	.word	0x20002400

0801109c <_write_r>:
 801109c:	b538      	push	{r3, r4, r5, lr}
 801109e:	4d07      	ldr	r5, [pc, #28]	@ (80110bc <_write_r+0x20>)
 80110a0:	4604      	mov	r4, r0
 80110a2:	4608      	mov	r0, r1
 80110a4:	4611      	mov	r1, r2
 80110a6:	2200      	movs	r2, #0
 80110a8:	602a      	str	r2, [r5, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	f7f3 f960 	bl	8004370 <_write>
 80110b0:	1c43      	adds	r3, r0, #1
 80110b2:	d102      	bne.n	80110ba <_write_r+0x1e>
 80110b4:	682b      	ldr	r3, [r5, #0]
 80110b6:	b103      	cbz	r3, 80110ba <_write_r+0x1e>
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	bd38      	pop	{r3, r4, r5, pc}
 80110bc:	20002400 	.word	0x20002400

080110c0 <__errno>:
 80110c0:	4b01      	ldr	r3, [pc, #4]	@ (80110c8 <__errno+0x8>)
 80110c2:	6818      	ldr	r0, [r3, #0]
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	20000118 	.word	0x20000118

080110cc <__libc_init_array>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	4d0d      	ldr	r5, [pc, #52]	@ (8011104 <__libc_init_array+0x38>)
 80110d0:	4c0d      	ldr	r4, [pc, #52]	@ (8011108 <__libc_init_array+0x3c>)
 80110d2:	1b64      	subs	r4, r4, r5
 80110d4:	10a4      	asrs	r4, r4, #2
 80110d6:	2600      	movs	r6, #0
 80110d8:	42a6      	cmp	r6, r4
 80110da:	d109      	bne.n	80110f0 <__libc_init_array+0x24>
 80110dc:	4d0b      	ldr	r5, [pc, #44]	@ (801110c <__libc_init_array+0x40>)
 80110de:	4c0c      	ldr	r4, [pc, #48]	@ (8011110 <__libc_init_array+0x44>)
 80110e0:	f003 f89c 	bl	801421c <_init>
 80110e4:	1b64      	subs	r4, r4, r5
 80110e6:	10a4      	asrs	r4, r4, #2
 80110e8:	2600      	movs	r6, #0
 80110ea:	42a6      	cmp	r6, r4
 80110ec:	d105      	bne.n	80110fa <__libc_init_array+0x2e>
 80110ee:	bd70      	pop	{r4, r5, r6, pc}
 80110f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110f4:	4798      	blx	r3
 80110f6:	3601      	adds	r6, #1
 80110f8:	e7ee      	b.n	80110d8 <__libc_init_array+0xc>
 80110fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80110fe:	4798      	blx	r3
 8011100:	3601      	adds	r6, #1
 8011102:	e7f2      	b.n	80110ea <__libc_init_array+0x1e>
 8011104:	08014a48 	.word	0x08014a48
 8011108:	08014a48 	.word	0x08014a48
 801110c:	08014a48 	.word	0x08014a48
 8011110:	08014a4c 	.word	0x08014a4c

08011114 <__retarget_lock_init_recursive>:
 8011114:	4770      	bx	lr

08011116 <__retarget_lock_acquire_recursive>:
 8011116:	4770      	bx	lr

08011118 <__retarget_lock_release_recursive>:
 8011118:	4770      	bx	lr

0801111a <quorem>:
 801111a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111e:	6903      	ldr	r3, [r0, #16]
 8011120:	690c      	ldr	r4, [r1, #16]
 8011122:	42a3      	cmp	r3, r4
 8011124:	4607      	mov	r7, r0
 8011126:	db7e      	blt.n	8011226 <quorem+0x10c>
 8011128:	3c01      	subs	r4, #1
 801112a:	f101 0814 	add.w	r8, r1, #20
 801112e:	00a3      	lsls	r3, r4, #2
 8011130:	f100 0514 	add.w	r5, r0, #20
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801113a:	9301      	str	r3, [sp, #4]
 801113c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011144:	3301      	adds	r3, #1
 8011146:	429a      	cmp	r2, r3
 8011148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801114c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011150:	d32e      	bcc.n	80111b0 <quorem+0x96>
 8011152:	f04f 0a00 	mov.w	sl, #0
 8011156:	46c4      	mov	ip, r8
 8011158:	46ae      	mov	lr, r5
 801115a:	46d3      	mov	fp, sl
 801115c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011160:	b298      	uxth	r0, r3
 8011162:	fb06 a000 	mla	r0, r6, r0, sl
 8011166:	0c02      	lsrs	r2, r0, #16
 8011168:	0c1b      	lsrs	r3, r3, #16
 801116a:	fb06 2303 	mla	r3, r6, r3, r2
 801116e:	f8de 2000 	ldr.w	r2, [lr]
 8011172:	b280      	uxth	r0, r0
 8011174:	b292      	uxth	r2, r2
 8011176:	1a12      	subs	r2, r2, r0
 8011178:	445a      	add	r2, fp
 801117a:	f8de 0000 	ldr.w	r0, [lr]
 801117e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011182:	b29b      	uxth	r3, r3
 8011184:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011188:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801118c:	b292      	uxth	r2, r2
 801118e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011192:	45e1      	cmp	r9, ip
 8011194:	f84e 2b04 	str.w	r2, [lr], #4
 8011198:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801119c:	d2de      	bcs.n	801115c <quorem+0x42>
 801119e:	9b00      	ldr	r3, [sp, #0]
 80111a0:	58eb      	ldr	r3, [r5, r3]
 80111a2:	b92b      	cbnz	r3, 80111b0 <quorem+0x96>
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	3b04      	subs	r3, #4
 80111a8:	429d      	cmp	r5, r3
 80111aa:	461a      	mov	r2, r3
 80111ac:	d32f      	bcc.n	801120e <quorem+0xf4>
 80111ae:	613c      	str	r4, [r7, #16]
 80111b0:	4638      	mov	r0, r7
 80111b2:	f001 f8c9 	bl	8012348 <__mcmp>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	db25      	blt.n	8011206 <quorem+0xec>
 80111ba:	4629      	mov	r1, r5
 80111bc:	2000      	movs	r0, #0
 80111be:	f858 2b04 	ldr.w	r2, [r8], #4
 80111c2:	f8d1 c000 	ldr.w	ip, [r1]
 80111c6:	fa1f fe82 	uxth.w	lr, r2
 80111ca:	fa1f f38c 	uxth.w	r3, ip
 80111ce:	eba3 030e 	sub.w	r3, r3, lr
 80111d2:	4403      	add	r3, r0
 80111d4:	0c12      	lsrs	r2, r2, #16
 80111d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80111da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80111de:	b29b      	uxth	r3, r3
 80111e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111e4:	45c1      	cmp	r9, r8
 80111e6:	f841 3b04 	str.w	r3, [r1], #4
 80111ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80111ee:	d2e6      	bcs.n	80111be <quorem+0xa4>
 80111f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111f8:	b922      	cbnz	r2, 8011204 <quorem+0xea>
 80111fa:	3b04      	subs	r3, #4
 80111fc:	429d      	cmp	r5, r3
 80111fe:	461a      	mov	r2, r3
 8011200:	d30b      	bcc.n	801121a <quorem+0x100>
 8011202:	613c      	str	r4, [r7, #16]
 8011204:	3601      	adds	r6, #1
 8011206:	4630      	mov	r0, r6
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120e:	6812      	ldr	r2, [r2, #0]
 8011210:	3b04      	subs	r3, #4
 8011212:	2a00      	cmp	r2, #0
 8011214:	d1cb      	bne.n	80111ae <quorem+0x94>
 8011216:	3c01      	subs	r4, #1
 8011218:	e7c6      	b.n	80111a8 <quorem+0x8e>
 801121a:	6812      	ldr	r2, [r2, #0]
 801121c:	3b04      	subs	r3, #4
 801121e:	2a00      	cmp	r2, #0
 8011220:	d1ef      	bne.n	8011202 <quorem+0xe8>
 8011222:	3c01      	subs	r4, #1
 8011224:	e7ea      	b.n	80111fc <quorem+0xe2>
 8011226:	2000      	movs	r0, #0
 8011228:	e7ee      	b.n	8011208 <quorem+0xee>
 801122a:	0000      	movs	r0, r0
 801122c:	0000      	movs	r0, r0
	...

08011230 <_dtoa_r>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	69c7      	ldr	r7, [r0, #28]
 8011236:	b097      	sub	sp, #92	@ 0x5c
 8011238:	ed8d 0b04 	vstr	d0, [sp, #16]
 801123c:	ec55 4b10 	vmov	r4, r5, d0
 8011240:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011242:	9107      	str	r1, [sp, #28]
 8011244:	4681      	mov	r9, r0
 8011246:	920c      	str	r2, [sp, #48]	@ 0x30
 8011248:	9311      	str	r3, [sp, #68]	@ 0x44
 801124a:	b97f      	cbnz	r7, 801126c <_dtoa_r+0x3c>
 801124c:	2010      	movs	r0, #16
 801124e:	f7ff f899 	bl	8010384 <malloc>
 8011252:	4602      	mov	r2, r0
 8011254:	f8c9 001c 	str.w	r0, [r9, #28]
 8011258:	b920      	cbnz	r0, 8011264 <_dtoa_r+0x34>
 801125a:	4ba9      	ldr	r3, [pc, #676]	@ (8011500 <_dtoa_r+0x2d0>)
 801125c:	21ef      	movs	r1, #239	@ 0xef
 801125e:	48a9      	ldr	r0, [pc, #676]	@ (8011504 <_dtoa_r+0x2d4>)
 8011260:	f001 fba6 	bl	80129b0 <__assert_func>
 8011264:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011268:	6007      	str	r7, [r0, #0]
 801126a:	60c7      	str	r7, [r0, #12]
 801126c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011270:	6819      	ldr	r1, [r3, #0]
 8011272:	b159      	cbz	r1, 801128c <_dtoa_r+0x5c>
 8011274:	685a      	ldr	r2, [r3, #4]
 8011276:	604a      	str	r2, [r1, #4]
 8011278:	2301      	movs	r3, #1
 801127a:	4093      	lsls	r3, r2
 801127c:	608b      	str	r3, [r1, #8]
 801127e:	4648      	mov	r0, r9
 8011280:	f000 fe30 	bl	8011ee4 <_Bfree>
 8011284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011288:	2200      	movs	r2, #0
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	1e2b      	subs	r3, r5, #0
 801128e:	bfb9      	ittee	lt
 8011290:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011294:	9305      	strlt	r3, [sp, #20]
 8011296:	2300      	movge	r3, #0
 8011298:	6033      	strge	r3, [r6, #0]
 801129a:	9f05      	ldr	r7, [sp, #20]
 801129c:	4b9a      	ldr	r3, [pc, #616]	@ (8011508 <_dtoa_r+0x2d8>)
 801129e:	bfbc      	itt	lt
 80112a0:	2201      	movlt	r2, #1
 80112a2:	6032      	strlt	r2, [r6, #0]
 80112a4:	43bb      	bics	r3, r7
 80112a6:	d112      	bne.n	80112ce <_dtoa_r+0x9e>
 80112a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80112aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80112ae:	6013      	str	r3, [r2, #0]
 80112b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80112b4:	4323      	orrs	r3, r4
 80112b6:	f000 855a 	beq.w	8011d6e <_dtoa_r+0xb3e>
 80112ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80112bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801151c <_dtoa_r+0x2ec>
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 855c 	beq.w	8011d7e <_dtoa_r+0xb4e>
 80112c6:	f10a 0303 	add.w	r3, sl, #3
 80112ca:	f000 bd56 	b.w	8011d7a <_dtoa_r+0xb4a>
 80112ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80112d2:	2200      	movs	r2, #0
 80112d4:	ec51 0b17 	vmov	r0, r1, d7
 80112d8:	2300      	movs	r3, #0
 80112da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80112de:	f7ef fc1b 	bl	8000b18 <__aeabi_dcmpeq>
 80112e2:	4680      	mov	r8, r0
 80112e4:	b158      	cbz	r0, 80112fe <_dtoa_r+0xce>
 80112e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80112e8:	2301      	movs	r3, #1
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80112ee:	b113      	cbz	r3, 80112f6 <_dtoa_r+0xc6>
 80112f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80112f2:	4b86      	ldr	r3, [pc, #536]	@ (801150c <_dtoa_r+0x2dc>)
 80112f4:	6013      	str	r3, [r2, #0]
 80112f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011520 <_dtoa_r+0x2f0>
 80112fa:	f000 bd40 	b.w	8011d7e <_dtoa_r+0xb4e>
 80112fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011302:	aa14      	add	r2, sp, #80	@ 0x50
 8011304:	a915      	add	r1, sp, #84	@ 0x54
 8011306:	4648      	mov	r0, r9
 8011308:	f001 f8ce 	bl	80124a8 <__d2b>
 801130c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011310:	9002      	str	r0, [sp, #8]
 8011312:	2e00      	cmp	r6, #0
 8011314:	d078      	beq.n	8011408 <_dtoa_r+0x1d8>
 8011316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011318:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801131c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011324:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011328:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801132c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011330:	4619      	mov	r1, r3
 8011332:	2200      	movs	r2, #0
 8011334:	4b76      	ldr	r3, [pc, #472]	@ (8011510 <_dtoa_r+0x2e0>)
 8011336:	f7ee ffcf 	bl	80002d8 <__aeabi_dsub>
 801133a:	a36b      	add	r3, pc, #428	@ (adr r3, 80114e8 <_dtoa_r+0x2b8>)
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	f7ef f982 	bl	8000648 <__aeabi_dmul>
 8011344:	a36a      	add	r3, pc, #424	@ (adr r3, 80114f0 <_dtoa_r+0x2c0>)
 8011346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134a:	f7ee ffc7 	bl	80002dc <__adddf3>
 801134e:	4604      	mov	r4, r0
 8011350:	4630      	mov	r0, r6
 8011352:	460d      	mov	r5, r1
 8011354:	f7ef f90e 	bl	8000574 <__aeabi_i2d>
 8011358:	a367      	add	r3, pc, #412	@ (adr r3, 80114f8 <_dtoa_r+0x2c8>)
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	f7ef f973 	bl	8000648 <__aeabi_dmul>
 8011362:	4602      	mov	r2, r0
 8011364:	460b      	mov	r3, r1
 8011366:	4620      	mov	r0, r4
 8011368:	4629      	mov	r1, r5
 801136a:	f7ee ffb7 	bl	80002dc <__adddf3>
 801136e:	4604      	mov	r4, r0
 8011370:	460d      	mov	r5, r1
 8011372:	f7ef fc19 	bl	8000ba8 <__aeabi_d2iz>
 8011376:	2200      	movs	r2, #0
 8011378:	4607      	mov	r7, r0
 801137a:	2300      	movs	r3, #0
 801137c:	4620      	mov	r0, r4
 801137e:	4629      	mov	r1, r5
 8011380:	f7ef fbd4 	bl	8000b2c <__aeabi_dcmplt>
 8011384:	b140      	cbz	r0, 8011398 <_dtoa_r+0x168>
 8011386:	4638      	mov	r0, r7
 8011388:	f7ef f8f4 	bl	8000574 <__aeabi_i2d>
 801138c:	4622      	mov	r2, r4
 801138e:	462b      	mov	r3, r5
 8011390:	f7ef fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8011394:	b900      	cbnz	r0, 8011398 <_dtoa_r+0x168>
 8011396:	3f01      	subs	r7, #1
 8011398:	2f16      	cmp	r7, #22
 801139a:	d852      	bhi.n	8011442 <_dtoa_r+0x212>
 801139c:	4b5d      	ldr	r3, [pc, #372]	@ (8011514 <_dtoa_r+0x2e4>)
 801139e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80113aa:	f7ef fbbf 	bl	8000b2c <__aeabi_dcmplt>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d049      	beq.n	8011446 <_dtoa_r+0x216>
 80113b2:	3f01      	subs	r7, #1
 80113b4:	2300      	movs	r3, #0
 80113b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80113b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80113ba:	1b9b      	subs	r3, r3, r6
 80113bc:	1e5a      	subs	r2, r3, #1
 80113be:	bf45      	ittet	mi
 80113c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80113c4:	9300      	strmi	r3, [sp, #0]
 80113c6:	2300      	movpl	r3, #0
 80113c8:	2300      	movmi	r3, #0
 80113ca:	9206      	str	r2, [sp, #24]
 80113cc:	bf54      	ite	pl
 80113ce:	9300      	strpl	r3, [sp, #0]
 80113d0:	9306      	strmi	r3, [sp, #24]
 80113d2:	2f00      	cmp	r7, #0
 80113d4:	db39      	blt.n	801144a <_dtoa_r+0x21a>
 80113d6:	9b06      	ldr	r3, [sp, #24]
 80113d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80113da:	443b      	add	r3, r7
 80113dc:	9306      	str	r3, [sp, #24]
 80113de:	2300      	movs	r3, #0
 80113e0:	9308      	str	r3, [sp, #32]
 80113e2:	9b07      	ldr	r3, [sp, #28]
 80113e4:	2b09      	cmp	r3, #9
 80113e6:	d863      	bhi.n	80114b0 <_dtoa_r+0x280>
 80113e8:	2b05      	cmp	r3, #5
 80113ea:	bfc4      	itt	gt
 80113ec:	3b04      	subgt	r3, #4
 80113ee:	9307      	strgt	r3, [sp, #28]
 80113f0:	9b07      	ldr	r3, [sp, #28]
 80113f2:	f1a3 0302 	sub.w	r3, r3, #2
 80113f6:	bfcc      	ite	gt
 80113f8:	2400      	movgt	r4, #0
 80113fa:	2401      	movle	r4, #1
 80113fc:	2b03      	cmp	r3, #3
 80113fe:	d863      	bhi.n	80114c8 <_dtoa_r+0x298>
 8011400:	e8df f003 	tbb	[pc, r3]
 8011404:	2b375452 	.word	0x2b375452
 8011408:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801140c:	441e      	add	r6, r3
 801140e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011412:	2b20      	cmp	r3, #32
 8011414:	bfc1      	itttt	gt
 8011416:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801141a:	409f      	lslgt	r7, r3
 801141c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011420:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011424:	bfd6      	itet	le
 8011426:	f1c3 0320 	rsble	r3, r3, #32
 801142a:	ea47 0003 	orrgt.w	r0, r7, r3
 801142e:	fa04 f003 	lslle.w	r0, r4, r3
 8011432:	f7ef f88f 	bl	8000554 <__aeabi_ui2d>
 8011436:	2201      	movs	r2, #1
 8011438:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801143c:	3e01      	subs	r6, #1
 801143e:	9212      	str	r2, [sp, #72]	@ 0x48
 8011440:	e776      	b.n	8011330 <_dtoa_r+0x100>
 8011442:	2301      	movs	r3, #1
 8011444:	e7b7      	b.n	80113b6 <_dtoa_r+0x186>
 8011446:	9010      	str	r0, [sp, #64]	@ 0x40
 8011448:	e7b6      	b.n	80113b8 <_dtoa_r+0x188>
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	1bdb      	subs	r3, r3, r7
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	427b      	negs	r3, r7
 8011452:	9308      	str	r3, [sp, #32]
 8011454:	2300      	movs	r3, #0
 8011456:	930d      	str	r3, [sp, #52]	@ 0x34
 8011458:	e7c3      	b.n	80113e2 <_dtoa_r+0x1b2>
 801145a:	2301      	movs	r3, #1
 801145c:	9309      	str	r3, [sp, #36]	@ 0x24
 801145e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011460:	eb07 0b03 	add.w	fp, r7, r3
 8011464:	f10b 0301 	add.w	r3, fp, #1
 8011468:	2b01      	cmp	r3, #1
 801146a:	9303      	str	r3, [sp, #12]
 801146c:	bfb8      	it	lt
 801146e:	2301      	movlt	r3, #1
 8011470:	e006      	b.n	8011480 <_dtoa_r+0x250>
 8011472:	2301      	movs	r3, #1
 8011474:	9309      	str	r3, [sp, #36]	@ 0x24
 8011476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011478:	2b00      	cmp	r3, #0
 801147a:	dd28      	ble.n	80114ce <_dtoa_r+0x29e>
 801147c:	469b      	mov	fp, r3
 801147e:	9303      	str	r3, [sp, #12]
 8011480:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011484:	2100      	movs	r1, #0
 8011486:	2204      	movs	r2, #4
 8011488:	f102 0514 	add.w	r5, r2, #20
 801148c:	429d      	cmp	r5, r3
 801148e:	d926      	bls.n	80114de <_dtoa_r+0x2ae>
 8011490:	6041      	str	r1, [r0, #4]
 8011492:	4648      	mov	r0, r9
 8011494:	f000 fce6 	bl	8011e64 <_Balloc>
 8011498:	4682      	mov	sl, r0
 801149a:	2800      	cmp	r0, #0
 801149c:	d142      	bne.n	8011524 <_dtoa_r+0x2f4>
 801149e:	4b1e      	ldr	r3, [pc, #120]	@ (8011518 <_dtoa_r+0x2e8>)
 80114a0:	4602      	mov	r2, r0
 80114a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80114a6:	e6da      	b.n	801125e <_dtoa_r+0x2e>
 80114a8:	2300      	movs	r3, #0
 80114aa:	e7e3      	b.n	8011474 <_dtoa_r+0x244>
 80114ac:	2300      	movs	r3, #0
 80114ae:	e7d5      	b.n	801145c <_dtoa_r+0x22c>
 80114b0:	2401      	movs	r4, #1
 80114b2:	2300      	movs	r3, #0
 80114b4:	9307      	str	r3, [sp, #28]
 80114b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80114b8:	f04f 3bff 	mov.w	fp, #4294967295
 80114bc:	2200      	movs	r2, #0
 80114be:	f8cd b00c 	str.w	fp, [sp, #12]
 80114c2:	2312      	movs	r3, #18
 80114c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80114c6:	e7db      	b.n	8011480 <_dtoa_r+0x250>
 80114c8:	2301      	movs	r3, #1
 80114ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80114cc:	e7f4      	b.n	80114b8 <_dtoa_r+0x288>
 80114ce:	f04f 0b01 	mov.w	fp, #1
 80114d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80114d6:	465b      	mov	r3, fp
 80114d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80114dc:	e7d0      	b.n	8011480 <_dtoa_r+0x250>
 80114de:	3101      	adds	r1, #1
 80114e0:	0052      	lsls	r2, r2, #1
 80114e2:	e7d1      	b.n	8011488 <_dtoa_r+0x258>
 80114e4:	f3af 8000 	nop.w
 80114e8:	636f4361 	.word	0x636f4361
 80114ec:	3fd287a7 	.word	0x3fd287a7
 80114f0:	8b60c8b3 	.word	0x8b60c8b3
 80114f4:	3fc68a28 	.word	0x3fc68a28
 80114f8:	509f79fb 	.word	0x509f79fb
 80114fc:	3fd34413 	.word	0x3fd34413
 8011500:	080142ed 	.word	0x080142ed
 8011504:	08014304 	.word	0x08014304
 8011508:	7ff00000 	.word	0x7ff00000
 801150c:	080142bd 	.word	0x080142bd
 8011510:	3ff80000 	.word	0x3ff80000
 8011514:	08014458 	.word	0x08014458
 8011518:	0801435c 	.word	0x0801435c
 801151c:	080142e9 	.word	0x080142e9
 8011520:	080142bc 	.word	0x080142bc
 8011524:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011528:	6018      	str	r0, [r3, #0]
 801152a:	9b03      	ldr	r3, [sp, #12]
 801152c:	2b0e      	cmp	r3, #14
 801152e:	f200 80a1 	bhi.w	8011674 <_dtoa_r+0x444>
 8011532:	2c00      	cmp	r4, #0
 8011534:	f000 809e 	beq.w	8011674 <_dtoa_r+0x444>
 8011538:	2f00      	cmp	r7, #0
 801153a:	dd33      	ble.n	80115a4 <_dtoa_r+0x374>
 801153c:	4b9c      	ldr	r3, [pc, #624]	@ (80117b0 <_dtoa_r+0x580>)
 801153e:	f007 020f 	and.w	r2, r7, #15
 8011542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011546:	ed93 7b00 	vldr	d7, [r3]
 801154a:	05f8      	lsls	r0, r7, #23
 801154c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011550:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011554:	d516      	bpl.n	8011584 <_dtoa_r+0x354>
 8011556:	4b97      	ldr	r3, [pc, #604]	@ (80117b4 <_dtoa_r+0x584>)
 8011558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801155c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011560:	f7ef f99c 	bl	800089c <__aeabi_ddiv>
 8011564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011568:	f004 040f 	and.w	r4, r4, #15
 801156c:	2603      	movs	r6, #3
 801156e:	4d91      	ldr	r5, [pc, #580]	@ (80117b4 <_dtoa_r+0x584>)
 8011570:	b954      	cbnz	r4, 8011588 <_dtoa_r+0x358>
 8011572:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801157a:	f7ef f98f 	bl	800089c <__aeabi_ddiv>
 801157e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011582:	e028      	b.n	80115d6 <_dtoa_r+0x3a6>
 8011584:	2602      	movs	r6, #2
 8011586:	e7f2      	b.n	801156e <_dtoa_r+0x33e>
 8011588:	07e1      	lsls	r1, r4, #31
 801158a:	d508      	bpl.n	801159e <_dtoa_r+0x36e>
 801158c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011594:	f7ef f858 	bl	8000648 <__aeabi_dmul>
 8011598:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801159c:	3601      	adds	r6, #1
 801159e:	1064      	asrs	r4, r4, #1
 80115a0:	3508      	adds	r5, #8
 80115a2:	e7e5      	b.n	8011570 <_dtoa_r+0x340>
 80115a4:	f000 80af 	beq.w	8011706 <_dtoa_r+0x4d6>
 80115a8:	427c      	negs	r4, r7
 80115aa:	4b81      	ldr	r3, [pc, #516]	@ (80117b0 <_dtoa_r+0x580>)
 80115ac:	4d81      	ldr	r5, [pc, #516]	@ (80117b4 <_dtoa_r+0x584>)
 80115ae:	f004 020f 	and.w	r2, r4, #15
 80115b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80115be:	f7ef f843 	bl	8000648 <__aeabi_dmul>
 80115c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115c6:	1124      	asrs	r4, r4, #4
 80115c8:	2300      	movs	r3, #0
 80115ca:	2602      	movs	r6, #2
 80115cc:	2c00      	cmp	r4, #0
 80115ce:	f040 808f 	bne.w	80116f0 <_dtoa_r+0x4c0>
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1d3      	bne.n	801157e <_dtoa_r+0x34e>
 80115d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f000 8094 	beq.w	801170a <_dtoa_r+0x4da>
 80115e2:	4b75      	ldr	r3, [pc, #468]	@ (80117b8 <_dtoa_r+0x588>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	4620      	mov	r0, r4
 80115e8:	4629      	mov	r1, r5
 80115ea:	f7ef fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	f000 808b 	beq.w	801170a <_dtoa_r+0x4da>
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8087 	beq.w	801170a <_dtoa_r+0x4da>
 80115fc:	f1bb 0f00 	cmp.w	fp, #0
 8011600:	dd34      	ble.n	801166c <_dtoa_r+0x43c>
 8011602:	4620      	mov	r0, r4
 8011604:	4b6d      	ldr	r3, [pc, #436]	@ (80117bc <_dtoa_r+0x58c>)
 8011606:	2200      	movs	r2, #0
 8011608:	4629      	mov	r1, r5
 801160a:	f7ef f81d 	bl	8000648 <__aeabi_dmul>
 801160e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011612:	f107 38ff 	add.w	r8, r7, #4294967295
 8011616:	3601      	adds	r6, #1
 8011618:	465c      	mov	r4, fp
 801161a:	4630      	mov	r0, r6
 801161c:	f7ee ffaa 	bl	8000574 <__aeabi_i2d>
 8011620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011624:	f7ef f810 	bl	8000648 <__aeabi_dmul>
 8011628:	4b65      	ldr	r3, [pc, #404]	@ (80117c0 <_dtoa_r+0x590>)
 801162a:	2200      	movs	r2, #0
 801162c:	f7ee fe56 	bl	80002dc <__adddf3>
 8011630:	4605      	mov	r5, r0
 8011632:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011636:	2c00      	cmp	r4, #0
 8011638:	d16a      	bne.n	8011710 <_dtoa_r+0x4e0>
 801163a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801163e:	4b61      	ldr	r3, [pc, #388]	@ (80117c4 <_dtoa_r+0x594>)
 8011640:	2200      	movs	r2, #0
 8011642:	f7ee fe49 	bl	80002d8 <__aeabi_dsub>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801164e:	462a      	mov	r2, r5
 8011650:	4633      	mov	r3, r6
 8011652:	f7ef fa89 	bl	8000b68 <__aeabi_dcmpgt>
 8011656:	2800      	cmp	r0, #0
 8011658:	f040 8298 	bne.w	8011b8c <_dtoa_r+0x95c>
 801165c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011660:	462a      	mov	r2, r5
 8011662:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011666:	f7ef fa61 	bl	8000b2c <__aeabi_dcmplt>
 801166a:	bb38      	cbnz	r0, 80116bc <_dtoa_r+0x48c>
 801166c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011670:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011674:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011676:	2b00      	cmp	r3, #0
 8011678:	f2c0 8157 	blt.w	801192a <_dtoa_r+0x6fa>
 801167c:	2f0e      	cmp	r7, #14
 801167e:	f300 8154 	bgt.w	801192a <_dtoa_r+0x6fa>
 8011682:	4b4b      	ldr	r3, [pc, #300]	@ (80117b0 <_dtoa_r+0x580>)
 8011684:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011688:	ed93 7b00 	vldr	d7, [r3]
 801168c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801168e:	2b00      	cmp	r3, #0
 8011690:	ed8d 7b00 	vstr	d7, [sp]
 8011694:	f280 80e5 	bge.w	8011862 <_dtoa_r+0x632>
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	2b00      	cmp	r3, #0
 801169c:	f300 80e1 	bgt.w	8011862 <_dtoa_r+0x632>
 80116a0:	d10c      	bne.n	80116bc <_dtoa_r+0x48c>
 80116a2:	4b48      	ldr	r3, [pc, #288]	@ (80117c4 <_dtoa_r+0x594>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	ec51 0b17 	vmov	r0, r1, d7
 80116aa:	f7ee ffcd 	bl	8000648 <__aeabi_dmul>
 80116ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116b2:	f7ef fa4f 	bl	8000b54 <__aeabi_dcmpge>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	f000 8266 	beq.w	8011b88 <_dtoa_r+0x958>
 80116bc:	2400      	movs	r4, #0
 80116be:	4625      	mov	r5, r4
 80116c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116c2:	4656      	mov	r6, sl
 80116c4:	ea6f 0803 	mvn.w	r8, r3
 80116c8:	2700      	movs	r7, #0
 80116ca:	4621      	mov	r1, r4
 80116cc:	4648      	mov	r0, r9
 80116ce:	f000 fc09 	bl	8011ee4 <_Bfree>
 80116d2:	2d00      	cmp	r5, #0
 80116d4:	f000 80bd 	beq.w	8011852 <_dtoa_r+0x622>
 80116d8:	b12f      	cbz	r7, 80116e6 <_dtoa_r+0x4b6>
 80116da:	42af      	cmp	r7, r5
 80116dc:	d003      	beq.n	80116e6 <_dtoa_r+0x4b6>
 80116de:	4639      	mov	r1, r7
 80116e0:	4648      	mov	r0, r9
 80116e2:	f000 fbff 	bl	8011ee4 <_Bfree>
 80116e6:	4629      	mov	r1, r5
 80116e8:	4648      	mov	r0, r9
 80116ea:	f000 fbfb 	bl	8011ee4 <_Bfree>
 80116ee:	e0b0      	b.n	8011852 <_dtoa_r+0x622>
 80116f0:	07e2      	lsls	r2, r4, #31
 80116f2:	d505      	bpl.n	8011700 <_dtoa_r+0x4d0>
 80116f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80116f8:	f7ee ffa6 	bl	8000648 <__aeabi_dmul>
 80116fc:	3601      	adds	r6, #1
 80116fe:	2301      	movs	r3, #1
 8011700:	1064      	asrs	r4, r4, #1
 8011702:	3508      	adds	r5, #8
 8011704:	e762      	b.n	80115cc <_dtoa_r+0x39c>
 8011706:	2602      	movs	r6, #2
 8011708:	e765      	b.n	80115d6 <_dtoa_r+0x3a6>
 801170a:	9c03      	ldr	r4, [sp, #12]
 801170c:	46b8      	mov	r8, r7
 801170e:	e784      	b.n	801161a <_dtoa_r+0x3ea>
 8011710:	4b27      	ldr	r3, [pc, #156]	@ (80117b0 <_dtoa_r+0x580>)
 8011712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011718:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801171c:	4454      	add	r4, sl
 801171e:	2900      	cmp	r1, #0
 8011720:	d054      	beq.n	80117cc <_dtoa_r+0x59c>
 8011722:	4929      	ldr	r1, [pc, #164]	@ (80117c8 <_dtoa_r+0x598>)
 8011724:	2000      	movs	r0, #0
 8011726:	f7ef f8b9 	bl	800089c <__aeabi_ddiv>
 801172a:	4633      	mov	r3, r6
 801172c:	462a      	mov	r2, r5
 801172e:	f7ee fdd3 	bl	80002d8 <__aeabi_dsub>
 8011732:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011736:	4656      	mov	r6, sl
 8011738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801173c:	f7ef fa34 	bl	8000ba8 <__aeabi_d2iz>
 8011740:	4605      	mov	r5, r0
 8011742:	f7ee ff17 	bl	8000574 <__aeabi_i2d>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801174e:	f7ee fdc3 	bl	80002d8 <__aeabi_dsub>
 8011752:	3530      	adds	r5, #48	@ 0x30
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801175c:	f806 5b01 	strb.w	r5, [r6], #1
 8011760:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011764:	f7ef f9e2 	bl	8000b2c <__aeabi_dcmplt>
 8011768:	2800      	cmp	r0, #0
 801176a:	d172      	bne.n	8011852 <_dtoa_r+0x622>
 801176c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011770:	4911      	ldr	r1, [pc, #68]	@ (80117b8 <_dtoa_r+0x588>)
 8011772:	2000      	movs	r0, #0
 8011774:	f7ee fdb0 	bl	80002d8 <__aeabi_dsub>
 8011778:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801177c:	f7ef f9d6 	bl	8000b2c <__aeabi_dcmplt>
 8011780:	2800      	cmp	r0, #0
 8011782:	f040 80b4 	bne.w	80118ee <_dtoa_r+0x6be>
 8011786:	42a6      	cmp	r6, r4
 8011788:	f43f af70 	beq.w	801166c <_dtoa_r+0x43c>
 801178c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011790:	4b0a      	ldr	r3, [pc, #40]	@ (80117bc <_dtoa_r+0x58c>)
 8011792:	2200      	movs	r2, #0
 8011794:	f7ee ff58 	bl	8000648 <__aeabi_dmul>
 8011798:	4b08      	ldr	r3, [pc, #32]	@ (80117bc <_dtoa_r+0x58c>)
 801179a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801179e:	2200      	movs	r2, #0
 80117a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117a4:	f7ee ff50 	bl	8000648 <__aeabi_dmul>
 80117a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117ac:	e7c4      	b.n	8011738 <_dtoa_r+0x508>
 80117ae:	bf00      	nop
 80117b0:	08014458 	.word	0x08014458
 80117b4:	08014430 	.word	0x08014430
 80117b8:	3ff00000 	.word	0x3ff00000
 80117bc:	40240000 	.word	0x40240000
 80117c0:	401c0000 	.word	0x401c0000
 80117c4:	40140000 	.word	0x40140000
 80117c8:	3fe00000 	.word	0x3fe00000
 80117cc:	4631      	mov	r1, r6
 80117ce:	4628      	mov	r0, r5
 80117d0:	f7ee ff3a 	bl	8000648 <__aeabi_dmul>
 80117d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80117d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80117da:	4656      	mov	r6, sl
 80117dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117e0:	f7ef f9e2 	bl	8000ba8 <__aeabi_d2iz>
 80117e4:	4605      	mov	r5, r0
 80117e6:	f7ee fec5 	bl	8000574 <__aeabi_i2d>
 80117ea:	4602      	mov	r2, r0
 80117ec:	460b      	mov	r3, r1
 80117ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117f2:	f7ee fd71 	bl	80002d8 <__aeabi_dsub>
 80117f6:	3530      	adds	r5, #48	@ 0x30
 80117f8:	f806 5b01 	strb.w	r5, [r6], #1
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	42a6      	cmp	r6, r4
 8011802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011806:	f04f 0200 	mov.w	r2, #0
 801180a:	d124      	bne.n	8011856 <_dtoa_r+0x626>
 801180c:	4baf      	ldr	r3, [pc, #700]	@ (8011acc <_dtoa_r+0x89c>)
 801180e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011812:	f7ee fd63 	bl	80002dc <__adddf3>
 8011816:	4602      	mov	r2, r0
 8011818:	460b      	mov	r3, r1
 801181a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801181e:	f7ef f9a3 	bl	8000b68 <__aeabi_dcmpgt>
 8011822:	2800      	cmp	r0, #0
 8011824:	d163      	bne.n	80118ee <_dtoa_r+0x6be>
 8011826:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801182a:	49a8      	ldr	r1, [pc, #672]	@ (8011acc <_dtoa_r+0x89c>)
 801182c:	2000      	movs	r0, #0
 801182e:	f7ee fd53 	bl	80002d8 <__aeabi_dsub>
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801183a:	f7ef f977 	bl	8000b2c <__aeabi_dcmplt>
 801183e:	2800      	cmp	r0, #0
 8011840:	f43f af14 	beq.w	801166c <_dtoa_r+0x43c>
 8011844:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011846:	1e73      	subs	r3, r6, #1
 8011848:	9313      	str	r3, [sp, #76]	@ 0x4c
 801184a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801184e:	2b30      	cmp	r3, #48	@ 0x30
 8011850:	d0f8      	beq.n	8011844 <_dtoa_r+0x614>
 8011852:	4647      	mov	r7, r8
 8011854:	e03b      	b.n	80118ce <_dtoa_r+0x69e>
 8011856:	4b9e      	ldr	r3, [pc, #632]	@ (8011ad0 <_dtoa_r+0x8a0>)
 8011858:	f7ee fef6 	bl	8000648 <__aeabi_dmul>
 801185c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011860:	e7bc      	b.n	80117dc <_dtoa_r+0x5ac>
 8011862:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011866:	4656      	mov	r6, sl
 8011868:	e9dd 2300 	ldrd	r2, r3, [sp]
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ef f814 	bl	800089c <__aeabi_ddiv>
 8011874:	f7ef f998 	bl	8000ba8 <__aeabi_d2iz>
 8011878:	4680      	mov	r8, r0
 801187a:	f7ee fe7b 	bl	8000574 <__aeabi_i2d>
 801187e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011882:	f7ee fee1 	bl	8000648 <__aeabi_dmul>
 8011886:	4602      	mov	r2, r0
 8011888:	460b      	mov	r3, r1
 801188a:	4620      	mov	r0, r4
 801188c:	4629      	mov	r1, r5
 801188e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011892:	f7ee fd21 	bl	80002d8 <__aeabi_dsub>
 8011896:	f806 4b01 	strb.w	r4, [r6], #1
 801189a:	9d03      	ldr	r5, [sp, #12]
 801189c:	eba6 040a 	sub.w	r4, r6, sl
 80118a0:	42a5      	cmp	r5, r4
 80118a2:	4602      	mov	r2, r0
 80118a4:	460b      	mov	r3, r1
 80118a6:	d133      	bne.n	8011910 <_dtoa_r+0x6e0>
 80118a8:	f7ee fd18 	bl	80002dc <__adddf3>
 80118ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118b0:	4604      	mov	r4, r0
 80118b2:	460d      	mov	r5, r1
 80118b4:	f7ef f958 	bl	8000b68 <__aeabi_dcmpgt>
 80118b8:	b9c0      	cbnz	r0, 80118ec <_dtoa_r+0x6bc>
 80118ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	f7ef f929 	bl	8000b18 <__aeabi_dcmpeq>
 80118c6:	b110      	cbz	r0, 80118ce <_dtoa_r+0x69e>
 80118c8:	f018 0f01 	tst.w	r8, #1
 80118cc:	d10e      	bne.n	80118ec <_dtoa_r+0x6bc>
 80118ce:	9902      	ldr	r1, [sp, #8]
 80118d0:	4648      	mov	r0, r9
 80118d2:	f000 fb07 	bl	8011ee4 <_Bfree>
 80118d6:	2300      	movs	r3, #0
 80118d8:	7033      	strb	r3, [r6, #0]
 80118da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80118dc:	3701      	adds	r7, #1
 80118de:	601f      	str	r7, [r3, #0]
 80118e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 824b 	beq.w	8011d7e <_dtoa_r+0xb4e>
 80118e8:	601e      	str	r6, [r3, #0]
 80118ea:	e248      	b.n	8011d7e <_dtoa_r+0xb4e>
 80118ec:	46b8      	mov	r8, r7
 80118ee:	4633      	mov	r3, r6
 80118f0:	461e      	mov	r6, r3
 80118f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118f6:	2a39      	cmp	r2, #57	@ 0x39
 80118f8:	d106      	bne.n	8011908 <_dtoa_r+0x6d8>
 80118fa:	459a      	cmp	sl, r3
 80118fc:	d1f8      	bne.n	80118f0 <_dtoa_r+0x6c0>
 80118fe:	2230      	movs	r2, #48	@ 0x30
 8011900:	f108 0801 	add.w	r8, r8, #1
 8011904:	f88a 2000 	strb.w	r2, [sl]
 8011908:	781a      	ldrb	r2, [r3, #0]
 801190a:	3201      	adds	r2, #1
 801190c:	701a      	strb	r2, [r3, #0]
 801190e:	e7a0      	b.n	8011852 <_dtoa_r+0x622>
 8011910:	4b6f      	ldr	r3, [pc, #444]	@ (8011ad0 <_dtoa_r+0x8a0>)
 8011912:	2200      	movs	r2, #0
 8011914:	f7ee fe98 	bl	8000648 <__aeabi_dmul>
 8011918:	2200      	movs	r2, #0
 801191a:	2300      	movs	r3, #0
 801191c:	4604      	mov	r4, r0
 801191e:	460d      	mov	r5, r1
 8011920:	f7ef f8fa 	bl	8000b18 <__aeabi_dcmpeq>
 8011924:	2800      	cmp	r0, #0
 8011926:	d09f      	beq.n	8011868 <_dtoa_r+0x638>
 8011928:	e7d1      	b.n	80118ce <_dtoa_r+0x69e>
 801192a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801192c:	2a00      	cmp	r2, #0
 801192e:	f000 80ea 	beq.w	8011b06 <_dtoa_r+0x8d6>
 8011932:	9a07      	ldr	r2, [sp, #28]
 8011934:	2a01      	cmp	r2, #1
 8011936:	f300 80cd 	bgt.w	8011ad4 <_dtoa_r+0x8a4>
 801193a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801193c:	2a00      	cmp	r2, #0
 801193e:	f000 80c1 	beq.w	8011ac4 <_dtoa_r+0x894>
 8011942:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011946:	9c08      	ldr	r4, [sp, #32]
 8011948:	9e00      	ldr	r6, [sp, #0]
 801194a:	9a00      	ldr	r2, [sp, #0]
 801194c:	441a      	add	r2, r3
 801194e:	9200      	str	r2, [sp, #0]
 8011950:	9a06      	ldr	r2, [sp, #24]
 8011952:	2101      	movs	r1, #1
 8011954:	441a      	add	r2, r3
 8011956:	4648      	mov	r0, r9
 8011958:	9206      	str	r2, [sp, #24]
 801195a:	f000 fb77 	bl	801204c <__i2b>
 801195e:	4605      	mov	r5, r0
 8011960:	b166      	cbz	r6, 801197c <_dtoa_r+0x74c>
 8011962:	9b06      	ldr	r3, [sp, #24]
 8011964:	2b00      	cmp	r3, #0
 8011966:	dd09      	ble.n	801197c <_dtoa_r+0x74c>
 8011968:	42b3      	cmp	r3, r6
 801196a:	9a00      	ldr	r2, [sp, #0]
 801196c:	bfa8      	it	ge
 801196e:	4633      	movge	r3, r6
 8011970:	1ad2      	subs	r2, r2, r3
 8011972:	9200      	str	r2, [sp, #0]
 8011974:	9a06      	ldr	r2, [sp, #24]
 8011976:	1af6      	subs	r6, r6, r3
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	9306      	str	r3, [sp, #24]
 801197c:	9b08      	ldr	r3, [sp, #32]
 801197e:	b30b      	cbz	r3, 80119c4 <_dtoa_r+0x794>
 8011980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011982:	2b00      	cmp	r3, #0
 8011984:	f000 80c6 	beq.w	8011b14 <_dtoa_r+0x8e4>
 8011988:	2c00      	cmp	r4, #0
 801198a:	f000 80c0 	beq.w	8011b0e <_dtoa_r+0x8de>
 801198e:	4629      	mov	r1, r5
 8011990:	4622      	mov	r2, r4
 8011992:	4648      	mov	r0, r9
 8011994:	f000 fc12 	bl	80121bc <__pow5mult>
 8011998:	9a02      	ldr	r2, [sp, #8]
 801199a:	4601      	mov	r1, r0
 801199c:	4605      	mov	r5, r0
 801199e:	4648      	mov	r0, r9
 80119a0:	f000 fb6a 	bl	8012078 <__multiply>
 80119a4:	9902      	ldr	r1, [sp, #8]
 80119a6:	4680      	mov	r8, r0
 80119a8:	4648      	mov	r0, r9
 80119aa:	f000 fa9b 	bl	8011ee4 <_Bfree>
 80119ae:	9b08      	ldr	r3, [sp, #32]
 80119b0:	1b1b      	subs	r3, r3, r4
 80119b2:	9308      	str	r3, [sp, #32]
 80119b4:	f000 80b1 	beq.w	8011b1a <_dtoa_r+0x8ea>
 80119b8:	9a08      	ldr	r2, [sp, #32]
 80119ba:	4641      	mov	r1, r8
 80119bc:	4648      	mov	r0, r9
 80119be:	f000 fbfd 	bl	80121bc <__pow5mult>
 80119c2:	9002      	str	r0, [sp, #8]
 80119c4:	2101      	movs	r1, #1
 80119c6:	4648      	mov	r0, r9
 80119c8:	f000 fb40 	bl	801204c <__i2b>
 80119cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119ce:	4604      	mov	r4, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f000 81d8 	beq.w	8011d86 <_dtoa_r+0xb56>
 80119d6:	461a      	mov	r2, r3
 80119d8:	4601      	mov	r1, r0
 80119da:	4648      	mov	r0, r9
 80119dc:	f000 fbee 	bl	80121bc <__pow5mult>
 80119e0:	9b07      	ldr	r3, [sp, #28]
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	4604      	mov	r4, r0
 80119e6:	f300 809f 	bgt.w	8011b28 <_dtoa_r+0x8f8>
 80119ea:	9b04      	ldr	r3, [sp, #16]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f040 8097 	bne.w	8011b20 <_dtoa_r+0x8f0>
 80119f2:	9b05      	ldr	r3, [sp, #20]
 80119f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f040 8093 	bne.w	8011b24 <_dtoa_r+0x8f4>
 80119fe:	9b05      	ldr	r3, [sp, #20]
 8011a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a04:	0d1b      	lsrs	r3, r3, #20
 8011a06:	051b      	lsls	r3, r3, #20
 8011a08:	b133      	cbz	r3, 8011a18 <_dtoa_r+0x7e8>
 8011a0a:	9b00      	ldr	r3, [sp, #0]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	9b06      	ldr	r3, [sp, #24]
 8011a12:	3301      	adds	r3, #1
 8011a14:	9306      	str	r3, [sp, #24]
 8011a16:	2301      	movs	r3, #1
 8011a18:	9308      	str	r3, [sp, #32]
 8011a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 81b8 	beq.w	8011d92 <_dtoa_r+0xb62>
 8011a22:	6923      	ldr	r3, [r4, #16]
 8011a24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a28:	6918      	ldr	r0, [r3, #16]
 8011a2a:	f000 fac3 	bl	8011fb4 <__hi0bits>
 8011a2e:	f1c0 0020 	rsb	r0, r0, #32
 8011a32:	9b06      	ldr	r3, [sp, #24]
 8011a34:	4418      	add	r0, r3
 8011a36:	f010 001f 	ands.w	r0, r0, #31
 8011a3a:	f000 8082 	beq.w	8011b42 <_dtoa_r+0x912>
 8011a3e:	f1c0 0320 	rsb	r3, r0, #32
 8011a42:	2b04      	cmp	r3, #4
 8011a44:	dd73      	ble.n	8011b2e <_dtoa_r+0x8fe>
 8011a46:	9b00      	ldr	r3, [sp, #0]
 8011a48:	f1c0 001c 	rsb	r0, r0, #28
 8011a4c:	4403      	add	r3, r0
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	9b06      	ldr	r3, [sp, #24]
 8011a52:	4403      	add	r3, r0
 8011a54:	4406      	add	r6, r0
 8011a56:	9306      	str	r3, [sp, #24]
 8011a58:	9b00      	ldr	r3, [sp, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	dd05      	ble.n	8011a6a <_dtoa_r+0x83a>
 8011a5e:	9902      	ldr	r1, [sp, #8]
 8011a60:	461a      	mov	r2, r3
 8011a62:	4648      	mov	r0, r9
 8011a64:	f000 fc04 	bl	8012270 <__lshift>
 8011a68:	9002      	str	r0, [sp, #8]
 8011a6a:	9b06      	ldr	r3, [sp, #24]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dd05      	ble.n	8011a7c <_dtoa_r+0x84c>
 8011a70:	4621      	mov	r1, r4
 8011a72:	461a      	mov	r2, r3
 8011a74:	4648      	mov	r0, r9
 8011a76:	f000 fbfb 	bl	8012270 <__lshift>
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d061      	beq.n	8011b46 <_dtoa_r+0x916>
 8011a82:	9802      	ldr	r0, [sp, #8]
 8011a84:	4621      	mov	r1, r4
 8011a86:	f000 fc5f 	bl	8012348 <__mcmp>
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	da5b      	bge.n	8011b46 <_dtoa_r+0x916>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	9902      	ldr	r1, [sp, #8]
 8011a92:	220a      	movs	r2, #10
 8011a94:	4648      	mov	r0, r9
 8011a96:	f000 fa47 	bl	8011f28 <__multadd>
 8011a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a9c:	9002      	str	r0, [sp, #8]
 8011a9e:	f107 38ff 	add.w	r8, r7, #4294967295
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f000 8177 	beq.w	8011d96 <_dtoa_r+0xb66>
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	2300      	movs	r3, #0
 8011aac:	220a      	movs	r2, #10
 8011aae:	4648      	mov	r0, r9
 8011ab0:	f000 fa3a 	bl	8011f28 <__multadd>
 8011ab4:	f1bb 0f00 	cmp.w	fp, #0
 8011ab8:	4605      	mov	r5, r0
 8011aba:	dc6f      	bgt.n	8011b9c <_dtoa_r+0x96c>
 8011abc:	9b07      	ldr	r3, [sp, #28]
 8011abe:	2b02      	cmp	r3, #2
 8011ac0:	dc49      	bgt.n	8011b56 <_dtoa_r+0x926>
 8011ac2:	e06b      	b.n	8011b9c <_dtoa_r+0x96c>
 8011ac4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011aca:	e73c      	b.n	8011946 <_dtoa_r+0x716>
 8011acc:	3fe00000 	.word	0x3fe00000
 8011ad0:	40240000 	.word	0x40240000
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	1e5c      	subs	r4, r3, #1
 8011ad8:	9b08      	ldr	r3, [sp, #32]
 8011ada:	42a3      	cmp	r3, r4
 8011adc:	db09      	blt.n	8011af2 <_dtoa_r+0x8c2>
 8011ade:	1b1c      	subs	r4, r3, r4
 8011ae0:	9b03      	ldr	r3, [sp, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f6bf af30 	bge.w	8011948 <_dtoa_r+0x718>
 8011ae8:	9b00      	ldr	r3, [sp, #0]
 8011aea:	9a03      	ldr	r2, [sp, #12]
 8011aec:	1a9e      	subs	r6, r3, r2
 8011aee:	2300      	movs	r3, #0
 8011af0:	e72b      	b.n	801194a <_dtoa_r+0x71a>
 8011af2:	9b08      	ldr	r3, [sp, #32]
 8011af4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011af6:	9408      	str	r4, [sp, #32]
 8011af8:	1ae3      	subs	r3, r4, r3
 8011afa:	441a      	add	r2, r3
 8011afc:	9e00      	ldr	r6, [sp, #0]
 8011afe:	9b03      	ldr	r3, [sp, #12]
 8011b00:	920d      	str	r2, [sp, #52]	@ 0x34
 8011b02:	2400      	movs	r4, #0
 8011b04:	e721      	b.n	801194a <_dtoa_r+0x71a>
 8011b06:	9c08      	ldr	r4, [sp, #32]
 8011b08:	9e00      	ldr	r6, [sp, #0]
 8011b0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011b0c:	e728      	b.n	8011960 <_dtoa_r+0x730>
 8011b0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011b12:	e751      	b.n	80119b8 <_dtoa_r+0x788>
 8011b14:	9a08      	ldr	r2, [sp, #32]
 8011b16:	9902      	ldr	r1, [sp, #8]
 8011b18:	e750      	b.n	80119bc <_dtoa_r+0x78c>
 8011b1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8011b1e:	e751      	b.n	80119c4 <_dtoa_r+0x794>
 8011b20:	2300      	movs	r3, #0
 8011b22:	e779      	b.n	8011a18 <_dtoa_r+0x7e8>
 8011b24:	9b04      	ldr	r3, [sp, #16]
 8011b26:	e777      	b.n	8011a18 <_dtoa_r+0x7e8>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	9308      	str	r3, [sp, #32]
 8011b2c:	e779      	b.n	8011a22 <_dtoa_r+0x7f2>
 8011b2e:	d093      	beq.n	8011a58 <_dtoa_r+0x828>
 8011b30:	9a00      	ldr	r2, [sp, #0]
 8011b32:	331c      	adds	r3, #28
 8011b34:	441a      	add	r2, r3
 8011b36:	9200      	str	r2, [sp, #0]
 8011b38:	9a06      	ldr	r2, [sp, #24]
 8011b3a:	441a      	add	r2, r3
 8011b3c:	441e      	add	r6, r3
 8011b3e:	9206      	str	r2, [sp, #24]
 8011b40:	e78a      	b.n	8011a58 <_dtoa_r+0x828>
 8011b42:	4603      	mov	r3, r0
 8011b44:	e7f4      	b.n	8011b30 <_dtoa_r+0x900>
 8011b46:	9b03      	ldr	r3, [sp, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	46b8      	mov	r8, r7
 8011b4c:	dc20      	bgt.n	8011b90 <_dtoa_r+0x960>
 8011b4e:	469b      	mov	fp, r3
 8011b50:	9b07      	ldr	r3, [sp, #28]
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	dd1e      	ble.n	8011b94 <_dtoa_r+0x964>
 8011b56:	f1bb 0f00 	cmp.w	fp, #0
 8011b5a:	f47f adb1 	bne.w	80116c0 <_dtoa_r+0x490>
 8011b5e:	4621      	mov	r1, r4
 8011b60:	465b      	mov	r3, fp
 8011b62:	2205      	movs	r2, #5
 8011b64:	4648      	mov	r0, r9
 8011b66:	f000 f9df 	bl	8011f28 <__multadd>
 8011b6a:	4601      	mov	r1, r0
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	9802      	ldr	r0, [sp, #8]
 8011b70:	f000 fbea 	bl	8012348 <__mcmp>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	f77f ada3 	ble.w	80116c0 <_dtoa_r+0x490>
 8011b7a:	4656      	mov	r6, sl
 8011b7c:	2331      	movs	r3, #49	@ 0x31
 8011b7e:	f806 3b01 	strb.w	r3, [r6], #1
 8011b82:	f108 0801 	add.w	r8, r8, #1
 8011b86:	e59f      	b.n	80116c8 <_dtoa_r+0x498>
 8011b88:	9c03      	ldr	r4, [sp, #12]
 8011b8a:	46b8      	mov	r8, r7
 8011b8c:	4625      	mov	r5, r4
 8011b8e:	e7f4      	b.n	8011b7a <_dtoa_r+0x94a>
 8011b90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f000 8101 	beq.w	8011d9e <_dtoa_r+0xb6e>
 8011b9c:	2e00      	cmp	r6, #0
 8011b9e:	dd05      	ble.n	8011bac <_dtoa_r+0x97c>
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	4632      	mov	r2, r6
 8011ba4:	4648      	mov	r0, r9
 8011ba6:	f000 fb63 	bl	8012270 <__lshift>
 8011baa:	4605      	mov	r5, r0
 8011bac:	9b08      	ldr	r3, [sp, #32]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d05c      	beq.n	8011c6c <_dtoa_r+0xa3c>
 8011bb2:	6869      	ldr	r1, [r5, #4]
 8011bb4:	4648      	mov	r0, r9
 8011bb6:	f000 f955 	bl	8011e64 <_Balloc>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	b928      	cbnz	r0, 8011bca <_dtoa_r+0x99a>
 8011bbe:	4b82      	ldr	r3, [pc, #520]	@ (8011dc8 <_dtoa_r+0xb98>)
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011bc6:	f7ff bb4a 	b.w	801125e <_dtoa_r+0x2e>
 8011bca:	692a      	ldr	r2, [r5, #16]
 8011bcc:	3202      	adds	r2, #2
 8011bce:	0092      	lsls	r2, r2, #2
 8011bd0:	f105 010c 	add.w	r1, r5, #12
 8011bd4:	300c      	adds	r0, #12
 8011bd6:	f000 fedd 	bl	8012994 <memcpy>
 8011bda:	2201      	movs	r2, #1
 8011bdc:	4631      	mov	r1, r6
 8011bde:	4648      	mov	r0, r9
 8011be0:	f000 fb46 	bl	8012270 <__lshift>
 8011be4:	f10a 0301 	add.w	r3, sl, #1
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	eb0a 030b 	add.w	r3, sl, fp
 8011bee:	9308      	str	r3, [sp, #32]
 8011bf0:	9b04      	ldr	r3, [sp, #16]
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	462f      	mov	r7, r5
 8011bf8:	9306      	str	r3, [sp, #24]
 8011bfa:	4605      	mov	r5, r0
 8011bfc:	9b00      	ldr	r3, [sp, #0]
 8011bfe:	9802      	ldr	r0, [sp, #8]
 8011c00:	4621      	mov	r1, r4
 8011c02:	f103 3bff 	add.w	fp, r3, #4294967295
 8011c06:	f7ff fa88 	bl	801111a <quorem>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	3330      	adds	r3, #48	@ 0x30
 8011c0e:	9003      	str	r0, [sp, #12]
 8011c10:	4639      	mov	r1, r7
 8011c12:	9802      	ldr	r0, [sp, #8]
 8011c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c16:	f000 fb97 	bl	8012348 <__mcmp>
 8011c1a:	462a      	mov	r2, r5
 8011c1c:	9004      	str	r0, [sp, #16]
 8011c1e:	4621      	mov	r1, r4
 8011c20:	4648      	mov	r0, r9
 8011c22:	f000 fbad 	bl	8012380 <__mdiff>
 8011c26:	68c2      	ldr	r2, [r0, #12]
 8011c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	bb02      	cbnz	r2, 8011c70 <_dtoa_r+0xa40>
 8011c2e:	4601      	mov	r1, r0
 8011c30:	9802      	ldr	r0, [sp, #8]
 8011c32:	f000 fb89 	bl	8012348 <__mcmp>
 8011c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c38:	4602      	mov	r2, r0
 8011c3a:	4631      	mov	r1, r6
 8011c3c:	4648      	mov	r0, r9
 8011c3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c42:	f000 f94f 	bl	8011ee4 <_Bfree>
 8011c46:	9b07      	ldr	r3, [sp, #28]
 8011c48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011c4a:	9e00      	ldr	r6, [sp, #0]
 8011c4c:	ea42 0103 	orr.w	r1, r2, r3
 8011c50:	9b06      	ldr	r3, [sp, #24]
 8011c52:	4319      	orrs	r1, r3
 8011c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c56:	d10d      	bne.n	8011c74 <_dtoa_r+0xa44>
 8011c58:	2b39      	cmp	r3, #57	@ 0x39
 8011c5a:	d027      	beq.n	8011cac <_dtoa_r+0xa7c>
 8011c5c:	9a04      	ldr	r2, [sp, #16]
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	dd01      	ble.n	8011c66 <_dtoa_r+0xa36>
 8011c62:	9b03      	ldr	r3, [sp, #12]
 8011c64:	3331      	adds	r3, #49	@ 0x31
 8011c66:	f88b 3000 	strb.w	r3, [fp]
 8011c6a:	e52e      	b.n	80116ca <_dtoa_r+0x49a>
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	e7b9      	b.n	8011be4 <_dtoa_r+0x9b4>
 8011c70:	2201      	movs	r2, #1
 8011c72:	e7e2      	b.n	8011c3a <_dtoa_r+0xa0a>
 8011c74:	9904      	ldr	r1, [sp, #16]
 8011c76:	2900      	cmp	r1, #0
 8011c78:	db04      	blt.n	8011c84 <_dtoa_r+0xa54>
 8011c7a:	9807      	ldr	r0, [sp, #28]
 8011c7c:	4301      	orrs	r1, r0
 8011c7e:	9806      	ldr	r0, [sp, #24]
 8011c80:	4301      	orrs	r1, r0
 8011c82:	d120      	bne.n	8011cc6 <_dtoa_r+0xa96>
 8011c84:	2a00      	cmp	r2, #0
 8011c86:	ddee      	ble.n	8011c66 <_dtoa_r+0xa36>
 8011c88:	9902      	ldr	r1, [sp, #8]
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	4648      	mov	r0, r9
 8011c90:	f000 faee 	bl	8012270 <__lshift>
 8011c94:	4621      	mov	r1, r4
 8011c96:	9002      	str	r0, [sp, #8]
 8011c98:	f000 fb56 	bl	8012348 <__mcmp>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	9b00      	ldr	r3, [sp, #0]
 8011ca0:	dc02      	bgt.n	8011ca8 <_dtoa_r+0xa78>
 8011ca2:	d1e0      	bne.n	8011c66 <_dtoa_r+0xa36>
 8011ca4:	07da      	lsls	r2, r3, #31
 8011ca6:	d5de      	bpl.n	8011c66 <_dtoa_r+0xa36>
 8011ca8:	2b39      	cmp	r3, #57	@ 0x39
 8011caa:	d1da      	bne.n	8011c62 <_dtoa_r+0xa32>
 8011cac:	2339      	movs	r3, #57	@ 0x39
 8011cae:	f88b 3000 	strb.w	r3, [fp]
 8011cb2:	4633      	mov	r3, r6
 8011cb4:	461e      	mov	r6, r3
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011cbc:	2a39      	cmp	r2, #57	@ 0x39
 8011cbe:	d04e      	beq.n	8011d5e <_dtoa_r+0xb2e>
 8011cc0:	3201      	adds	r2, #1
 8011cc2:	701a      	strb	r2, [r3, #0]
 8011cc4:	e501      	b.n	80116ca <_dtoa_r+0x49a>
 8011cc6:	2a00      	cmp	r2, #0
 8011cc8:	dd03      	ble.n	8011cd2 <_dtoa_r+0xaa2>
 8011cca:	2b39      	cmp	r3, #57	@ 0x39
 8011ccc:	d0ee      	beq.n	8011cac <_dtoa_r+0xa7c>
 8011cce:	3301      	adds	r3, #1
 8011cd0:	e7c9      	b.n	8011c66 <_dtoa_r+0xa36>
 8011cd2:	9a00      	ldr	r2, [sp, #0]
 8011cd4:	9908      	ldr	r1, [sp, #32]
 8011cd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011cda:	428a      	cmp	r2, r1
 8011cdc:	d028      	beq.n	8011d30 <_dtoa_r+0xb00>
 8011cde:	9902      	ldr	r1, [sp, #8]
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	220a      	movs	r2, #10
 8011ce4:	4648      	mov	r0, r9
 8011ce6:	f000 f91f 	bl	8011f28 <__multadd>
 8011cea:	42af      	cmp	r7, r5
 8011cec:	9002      	str	r0, [sp, #8]
 8011cee:	f04f 0300 	mov.w	r3, #0
 8011cf2:	f04f 020a 	mov.w	r2, #10
 8011cf6:	4639      	mov	r1, r7
 8011cf8:	4648      	mov	r0, r9
 8011cfa:	d107      	bne.n	8011d0c <_dtoa_r+0xadc>
 8011cfc:	f000 f914 	bl	8011f28 <__multadd>
 8011d00:	4607      	mov	r7, r0
 8011d02:	4605      	mov	r5, r0
 8011d04:	9b00      	ldr	r3, [sp, #0]
 8011d06:	3301      	adds	r3, #1
 8011d08:	9300      	str	r3, [sp, #0]
 8011d0a:	e777      	b.n	8011bfc <_dtoa_r+0x9cc>
 8011d0c:	f000 f90c 	bl	8011f28 <__multadd>
 8011d10:	4629      	mov	r1, r5
 8011d12:	4607      	mov	r7, r0
 8011d14:	2300      	movs	r3, #0
 8011d16:	220a      	movs	r2, #10
 8011d18:	4648      	mov	r0, r9
 8011d1a:	f000 f905 	bl	8011f28 <__multadd>
 8011d1e:	4605      	mov	r5, r0
 8011d20:	e7f0      	b.n	8011d04 <_dtoa_r+0xad4>
 8011d22:	f1bb 0f00 	cmp.w	fp, #0
 8011d26:	bfcc      	ite	gt
 8011d28:	465e      	movgt	r6, fp
 8011d2a:	2601      	movle	r6, #1
 8011d2c:	4456      	add	r6, sl
 8011d2e:	2700      	movs	r7, #0
 8011d30:	9902      	ldr	r1, [sp, #8]
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	2201      	movs	r2, #1
 8011d36:	4648      	mov	r0, r9
 8011d38:	f000 fa9a 	bl	8012270 <__lshift>
 8011d3c:	4621      	mov	r1, r4
 8011d3e:	9002      	str	r0, [sp, #8]
 8011d40:	f000 fb02 	bl	8012348 <__mcmp>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	dcb4      	bgt.n	8011cb2 <_dtoa_r+0xa82>
 8011d48:	d102      	bne.n	8011d50 <_dtoa_r+0xb20>
 8011d4a:	9b00      	ldr	r3, [sp, #0]
 8011d4c:	07db      	lsls	r3, r3, #31
 8011d4e:	d4b0      	bmi.n	8011cb2 <_dtoa_r+0xa82>
 8011d50:	4633      	mov	r3, r6
 8011d52:	461e      	mov	r6, r3
 8011d54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d58:	2a30      	cmp	r2, #48	@ 0x30
 8011d5a:	d0fa      	beq.n	8011d52 <_dtoa_r+0xb22>
 8011d5c:	e4b5      	b.n	80116ca <_dtoa_r+0x49a>
 8011d5e:	459a      	cmp	sl, r3
 8011d60:	d1a8      	bne.n	8011cb4 <_dtoa_r+0xa84>
 8011d62:	2331      	movs	r3, #49	@ 0x31
 8011d64:	f108 0801 	add.w	r8, r8, #1
 8011d68:	f88a 3000 	strb.w	r3, [sl]
 8011d6c:	e4ad      	b.n	80116ca <_dtoa_r+0x49a>
 8011d6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011d70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011dcc <_dtoa_r+0xb9c>
 8011d74:	b11b      	cbz	r3, 8011d7e <_dtoa_r+0xb4e>
 8011d76:	f10a 0308 	add.w	r3, sl, #8
 8011d7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011d7c:	6013      	str	r3, [r2, #0]
 8011d7e:	4650      	mov	r0, sl
 8011d80:	b017      	add	sp, #92	@ 0x5c
 8011d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d86:	9b07      	ldr	r3, [sp, #28]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	f77f ae2e 	ble.w	80119ea <_dtoa_r+0x7ba>
 8011d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d90:	9308      	str	r3, [sp, #32]
 8011d92:	2001      	movs	r0, #1
 8011d94:	e64d      	b.n	8011a32 <_dtoa_r+0x802>
 8011d96:	f1bb 0f00 	cmp.w	fp, #0
 8011d9a:	f77f aed9 	ble.w	8011b50 <_dtoa_r+0x920>
 8011d9e:	4656      	mov	r6, sl
 8011da0:	9802      	ldr	r0, [sp, #8]
 8011da2:	4621      	mov	r1, r4
 8011da4:	f7ff f9b9 	bl	801111a <quorem>
 8011da8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011dac:	f806 3b01 	strb.w	r3, [r6], #1
 8011db0:	eba6 020a 	sub.w	r2, r6, sl
 8011db4:	4593      	cmp	fp, r2
 8011db6:	ddb4      	ble.n	8011d22 <_dtoa_r+0xaf2>
 8011db8:	9902      	ldr	r1, [sp, #8]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	220a      	movs	r2, #10
 8011dbe:	4648      	mov	r0, r9
 8011dc0:	f000 f8b2 	bl	8011f28 <__multadd>
 8011dc4:	9002      	str	r0, [sp, #8]
 8011dc6:	e7eb      	b.n	8011da0 <_dtoa_r+0xb70>
 8011dc8:	0801435c 	.word	0x0801435c
 8011dcc:	080142e0 	.word	0x080142e0

08011dd0 <_free_r>:
 8011dd0:	b538      	push	{r3, r4, r5, lr}
 8011dd2:	4605      	mov	r5, r0
 8011dd4:	2900      	cmp	r1, #0
 8011dd6:	d041      	beq.n	8011e5c <_free_r+0x8c>
 8011dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ddc:	1f0c      	subs	r4, r1, #4
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	bfb8      	it	lt
 8011de2:	18e4      	addlt	r4, r4, r3
 8011de4:	f7fe fb80 	bl	80104e8 <__malloc_lock>
 8011de8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e60 <_free_r+0x90>)
 8011dea:	6813      	ldr	r3, [r2, #0]
 8011dec:	b933      	cbnz	r3, 8011dfc <_free_r+0x2c>
 8011dee:	6063      	str	r3, [r4, #4]
 8011df0:	6014      	str	r4, [r2, #0]
 8011df2:	4628      	mov	r0, r5
 8011df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011df8:	f7fe bb7c 	b.w	80104f4 <__malloc_unlock>
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	d908      	bls.n	8011e12 <_free_r+0x42>
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	1821      	adds	r1, r4, r0
 8011e04:	428b      	cmp	r3, r1
 8011e06:	bf01      	itttt	eq
 8011e08:	6819      	ldreq	r1, [r3, #0]
 8011e0a:	685b      	ldreq	r3, [r3, #4]
 8011e0c:	1809      	addeq	r1, r1, r0
 8011e0e:	6021      	streq	r1, [r4, #0]
 8011e10:	e7ed      	b.n	8011dee <_free_r+0x1e>
 8011e12:	461a      	mov	r2, r3
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	b10b      	cbz	r3, 8011e1c <_free_r+0x4c>
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	d9fa      	bls.n	8011e12 <_free_r+0x42>
 8011e1c:	6811      	ldr	r1, [r2, #0]
 8011e1e:	1850      	adds	r0, r2, r1
 8011e20:	42a0      	cmp	r0, r4
 8011e22:	d10b      	bne.n	8011e3c <_free_r+0x6c>
 8011e24:	6820      	ldr	r0, [r4, #0]
 8011e26:	4401      	add	r1, r0
 8011e28:	1850      	adds	r0, r2, r1
 8011e2a:	4283      	cmp	r3, r0
 8011e2c:	6011      	str	r1, [r2, #0]
 8011e2e:	d1e0      	bne.n	8011df2 <_free_r+0x22>
 8011e30:	6818      	ldr	r0, [r3, #0]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	6053      	str	r3, [r2, #4]
 8011e36:	4408      	add	r0, r1
 8011e38:	6010      	str	r0, [r2, #0]
 8011e3a:	e7da      	b.n	8011df2 <_free_r+0x22>
 8011e3c:	d902      	bls.n	8011e44 <_free_r+0x74>
 8011e3e:	230c      	movs	r3, #12
 8011e40:	602b      	str	r3, [r5, #0]
 8011e42:	e7d6      	b.n	8011df2 <_free_r+0x22>
 8011e44:	6820      	ldr	r0, [r4, #0]
 8011e46:	1821      	adds	r1, r4, r0
 8011e48:	428b      	cmp	r3, r1
 8011e4a:	bf04      	itt	eq
 8011e4c:	6819      	ldreq	r1, [r3, #0]
 8011e4e:	685b      	ldreq	r3, [r3, #4]
 8011e50:	6063      	str	r3, [r4, #4]
 8011e52:	bf04      	itt	eq
 8011e54:	1809      	addeq	r1, r1, r0
 8011e56:	6021      	streq	r1, [r4, #0]
 8011e58:	6054      	str	r4, [r2, #4]
 8011e5a:	e7ca      	b.n	8011df2 <_free_r+0x22>
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
 8011e5e:	bf00      	nop
 8011e60:	200022c0 	.word	0x200022c0

08011e64 <_Balloc>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	69c6      	ldr	r6, [r0, #28]
 8011e68:	4604      	mov	r4, r0
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	b976      	cbnz	r6, 8011e8c <_Balloc+0x28>
 8011e6e:	2010      	movs	r0, #16
 8011e70:	f7fe fa88 	bl	8010384 <malloc>
 8011e74:	4602      	mov	r2, r0
 8011e76:	61e0      	str	r0, [r4, #28]
 8011e78:	b920      	cbnz	r0, 8011e84 <_Balloc+0x20>
 8011e7a:	4b18      	ldr	r3, [pc, #96]	@ (8011edc <_Balloc+0x78>)
 8011e7c:	4818      	ldr	r0, [pc, #96]	@ (8011ee0 <_Balloc+0x7c>)
 8011e7e:	216b      	movs	r1, #107	@ 0x6b
 8011e80:	f000 fd96 	bl	80129b0 <__assert_func>
 8011e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e88:	6006      	str	r6, [r0, #0]
 8011e8a:	60c6      	str	r6, [r0, #12]
 8011e8c:	69e6      	ldr	r6, [r4, #28]
 8011e8e:	68f3      	ldr	r3, [r6, #12]
 8011e90:	b183      	cbz	r3, 8011eb4 <_Balloc+0x50>
 8011e92:	69e3      	ldr	r3, [r4, #28]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e9a:	b9b8      	cbnz	r0, 8011ecc <_Balloc+0x68>
 8011e9c:	2101      	movs	r1, #1
 8011e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8011ea2:	1d72      	adds	r2, r6, #5
 8011ea4:	0092      	lsls	r2, r2, #2
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f000 fda0 	bl	80129ec <_calloc_r>
 8011eac:	b160      	cbz	r0, 8011ec8 <_Balloc+0x64>
 8011eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011eb2:	e00e      	b.n	8011ed2 <_Balloc+0x6e>
 8011eb4:	2221      	movs	r2, #33	@ 0x21
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f000 fd97 	bl	80129ec <_calloc_r>
 8011ebe:	69e3      	ldr	r3, [r4, #28]
 8011ec0:	60f0      	str	r0, [r6, #12]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1e4      	bne.n	8011e92 <_Balloc+0x2e>
 8011ec8:	2000      	movs	r0, #0
 8011eca:	bd70      	pop	{r4, r5, r6, pc}
 8011ecc:	6802      	ldr	r2, [r0, #0]
 8011ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ed8:	e7f7      	b.n	8011eca <_Balloc+0x66>
 8011eda:	bf00      	nop
 8011edc:	080142ed 	.word	0x080142ed
 8011ee0:	0801436d 	.word	0x0801436d

08011ee4 <_Bfree>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	69c6      	ldr	r6, [r0, #28]
 8011ee8:	4605      	mov	r5, r0
 8011eea:	460c      	mov	r4, r1
 8011eec:	b976      	cbnz	r6, 8011f0c <_Bfree+0x28>
 8011eee:	2010      	movs	r0, #16
 8011ef0:	f7fe fa48 	bl	8010384 <malloc>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	61e8      	str	r0, [r5, #28]
 8011ef8:	b920      	cbnz	r0, 8011f04 <_Bfree+0x20>
 8011efa:	4b09      	ldr	r3, [pc, #36]	@ (8011f20 <_Bfree+0x3c>)
 8011efc:	4809      	ldr	r0, [pc, #36]	@ (8011f24 <_Bfree+0x40>)
 8011efe:	218f      	movs	r1, #143	@ 0x8f
 8011f00:	f000 fd56 	bl	80129b0 <__assert_func>
 8011f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f08:	6006      	str	r6, [r0, #0]
 8011f0a:	60c6      	str	r6, [r0, #12]
 8011f0c:	b13c      	cbz	r4, 8011f1e <_Bfree+0x3a>
 8011f0e:	69eb      	ldr	r3, [r5, #28]
 8011f10:	6862      	ldr	r2, [r4, #4]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f18:	6021      	str	r1, [r4, #0]
 8011f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	080142ed 	.word	0x080142ed
 8011f24:	0801436d 	.word	0x0801436d

08011f28 <__multadd>:
 8011f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2c:	690d      	ldr	r5, [r1, #16]
 8011f2e:	4607      	mov	r7, r0
 8011f30:	460c      	mov	r4, r1
 8011f32:	461e      	mov	r6, r3
 8011f34:	f101 0c14 	add.w	ip, r1, #20
 8011f38:	2000      	movs	r0, #0
 8011f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f3e:	b299      	uxth	r1, r3
 8011f40:	fb02 6101 	mla	r1, r2, r1, r6
 8011f44:	0c1e      	lsrs	r6, r3, #16
 8011f46:	0c0b      	lsrs	r3, r1, #16
 8011f48:	fb02 3306 	mla	r3, r2, r6, r3
 8011f4c:	b289      	uxth	r1, r1
 8011f4e:	3001      	adds	r0, #1
 8011f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011f54:	4285      	cmp	r5, r0
 8011f56:	f84c 1b04 	str.w	r1, [ip], #4
 8011f5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011f5e:	dcec      	bgt.n	8011f3a <__multadd+0x12>
 8011f60:	b30e      	cbz	r6, 8011fa6 <__multadd+0x7e>
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	42ab      	cmp	r3, r5
 8011f66:	dc19      	bgt.n	8011f9c <__multadd+0x74>
 8011f68:	6861      	ldr	r1, [r4, #4]
 8011f6a:	4638      	mov	r0, r7
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	f7ff ff79 	bl	8011e64 <_Balloc>
 8011f72:	4680      	mov	r8, r0
 8011f74:	b928      	cbnz	r0, 8011f82 <__multadd+0x5a>
 8011f76:	4602      	mov	r2, r0
 8011f78:	4b0c      	ldr	r3, [pc, #48]	@ (8011fac <__multadd+0x84>)
 8011f7a:	480d      	ldr	r0, [pc, #52]	@ (8011fb0 <__multadd+0x88>)
 8011f7c:	21ba      	movs	r1, #186	@ 0xba
 8011f7e:	f000 fd17 	bl	80129b0 <__assert_func>
 8011f82:	6922      	ldr	r2, [r4, #16]
 8011f84:	3202      	adds	r2, #2
 8011f86:	f104 010c 	add.w	r1, r4, #12
 8011f8a:	0092      	lsls	r2, r2, #2
 8011f8c:	300c      	adds	r0, #12
 8011f8e:	f000 fd01 	bl	8012994 <memcpy>
 8011f92:	4621      	mov	r1, r4
 8011f94:	4638      	mov	r0, r7
 8011f96:	f7ff ffa5 	bl	8011ee4 <_Bfree>
 8011f9a:	4644      	mov	r4, r8
 8011f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011fa0:	3501      	adds	r5, #1
 8011fa2:	615e      	str	r6, [r3, #20]
 8011fa4:	6125      	str	r5, [r4, #16]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fac:	0801435c 	.word	0x0801435c
 8011fb0:	0801436d 	.word	0x0801436d

08011fb4 <__hi0bits>:
 8011fb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011fb8:	4603      	mov	r3, r0
 8011fba:	bf36      	itet	cc
 8011fbc:	0403      	lslcc	r3, r0, #16
 8011fbe:	2000      	movcs	r0, #0
 8011fc0:	2010      	movcc	r0, #16
 8011fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011fc6:	bf3c      	itt	cc
 8011fc8:	021b      	lslcc	r3, r3, #8
 8011fca:	3008      	addcc	r0, #8
 8011fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011fd0:	bf3c      	itt	cc
 8011fd2:	011b      	lslcc	r3, r3, #4
 8011fd4:	3004      	addcc	r0, #4
 8011fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fda:	bf3c      	itt	cc
 8011fdc:	009b      	lslcc	r3, r3, #2
 8011fde:	3002      	addcc	r0, #2
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	db05      	blt.n	8011ff0 <__hi0bits+0x3c>
 8011fe4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011fe8:	f100 0001 	add.w	r0, r0, #1
 8011fec:	bf08      	it	eq
 8011fee:	2020      	moveq	r0, #32
 8011ff0:	4770      	bx	lr

08011ff2 <__lo0bits>:
 8011ff2:	6803      	ldr	r3, [r0, #0]
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	f013 0007 	ands.w	r0, r3, #7
 8011ffa:	d00b      	beq.n	8012014 <__lo0bits+0x22>
 8011ffc:	07d9      	lsls	r1, r3, #31
 8011ffe:	d421      	bmi.n	8012044 <__lo0bits+0x52>
 8012000:	0798      	lsls	r0, r3, #30
 8012002:	bf49      	itett	mi
 8012004:	085b      	lsrmi	r3, r3, #1
 8012006:	089b      	lsrpl	r3, r3, #2
 8012008:	2001      	movmi	r0, #1
 801200a:	6013      	strmi	r3, [r2, #0]
 801200c:	bf5c      	itt	pl
 801200e:	6013      	strpl	r3, [r2, #0]
 8012010:	2002      	movpl	r0, #2
 8012012:	4770      	bx	lr
 8012014:	b299      	uxth	r1, r3
 8012016:	b909      	cbnz	r1, 801201c <__lo0bits+0x2a>
 8012018:	0c1b      	lsrs	r3, r3, #16
 801201a:	2010      	movs	r0, #16
 801201c:	b2d9      	uxtb	r1, r3
 801201e:	b909      	cbnz	r1, 8012024 <__lo0bits+0x32>
 8012020:	3008      	adds	r0, #8
 8012022:	0a1b      	lsrs	r3, r3, #8
 8012024:	0719      	lsls	r1, r3, #28
 8012026:	bf04      	itt	eq
 8012028:	091b      	lsreq	r3, r3, #4
 801202a:	3004      	addeq	r0, #4
 801202c:	0799      	lsls	r1, r3, #30
 801202e:	bf04      	itt	eq
 8012030:	089b      	lsreq	r3, r3, #2
 8012032:	3002      	addeq	r0, #2
 8012034:	07d9      	lsls	r1, r3, #31
 8012036:	d403      	bmi.n	8012040 <__lo0bits+0x4e>
 8012038:	085b      	lsrs	r3, r3, #1
 801203a:	f100 0001 	add.w	r0, r0, #1
 801203e:	d003      	beq.n	8012048 <__lo0bits+0x56>
 8012040:	6013      	str	r3, [r2, #0]
 8012042:	4770      	bx	lr
 8012044:	2000      	movs	r0, #0
 8012046:	4770      	bx	lr
 8012048:	2020      	movs	r0, #32
 801204a:	4770      	bx	lr

0801204c <__i2b>:
 801204c:	b510      	push	{r4, lr}
 801204e:	460c      	mov	r4, r1
 8012050:	2101      	movs	r1, #1
 8012052:	f7ff ff07 	bl	8011e64 <_Balloc>
 8012056:	4602      	mov	r2, r0
 8012058:	b928      	cbnz	r0, 8012066 <__i2b+0x1a>
 801205a:	4b05      	ldr	r3, [pc, #20]	@ (8012070 <__i2b+0x24>)
 801205c:	4805      	ldr	r0, [pc, #20]	@ (8012074 <__i2b+0x28>)
 801205e:	f240 1145 	movw	r1, #325	@ 0x145
 8012062:	f000 fca5 	bl	80129b0 <__assert_func>
 8012066:	2301      	movs	r3, #1
 8012068:	6144      	str	r4, [r0, #20]
 801206a:	6103      	str	r3, [r0, #16]
 801206c:	bd10      	pop	{r4, pc}
 801206e:	bf00      	nop
 8012070:	0801435c 	.word	0x0801435c
 8012074:	0801436d 	.word	0x0801436d

08012078 <__multiply>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	4617      	mov	r7, r2
 801207e:	690a      	ldr	r2, [r1, #16]
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	429a      	cmp	r2, r3
 8012084:	bfa8      	it	ge
 8012086:	463b      	movge	r3, r7
 8012088:	4689      	mov	r9, r1
 801208a:	bfa4      	itt	ge
 801208c:	460f      	movge	r7, r1
 801208e:	4699      	movge	r9, r3
 8012090:	693d      	ldr	r5, [r7, #16]
 8012092:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	6879      	ldr	r1, [r7, #4]
 801209a:	eb05 060a 	add.w	r6, r5, sl
 801209e:	42b3      	cmp	r3, r6
 80120a0:	b085      	sub	sp, #20
 80120a2:	bfb8      	it	lt
 80120a4:	3101      	addlt	r1, #1
 80120a6:	f7ff fedd 	bl	8011e64 <_Balloc>
 80120aa:	b930      	cbnz	r0, 80120ba <__multiply+0x42>
 80120ac:	4602      	mov	r2, r0
 80120ae:	4b41      	ldr	r3, [pc, #260]	@ (80121b4 <__multiply+0x13c>)
 80120b0:	4841      	ldr	r0, [pc, #260]	@ (80121b8 <__multiply+0x140>)
 80120b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80120b6:	f000 fc7b 	bl	80129b0 <__assert_func>
 80120ba:	f100 0414 	add.w	r4, r0, #20
 80120be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80120c2:	4623      	mov	r3, r4
 80120c4:	2200      	movs	r2, #0
 80120c6:	4573      	cmp	r3, lr
 80120c8:	d320      	bcc.n	801210c <__multiply+0x94>
 80120ca:	f107 0814 	add.w	r8, r7, #20
 80120ce:	f109 0114 	add.w	r1, r9, #20
 80120d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80120d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80120da:	9302      	str	r3, [sp, #8]
 80120dc:	1beb      	subs	r3, r5, r7
 80120de:	3b15      	subs	r3, #21
 80120e0:	f023 0303 	bic.w	r3, r3, #3
 80120e4:	3304      	adds	r3, #4
 80120e6:	3715      	adds	r7, #21
 80120e8:	42bd      	cmp	r5, r7
 80120ea:	bf38      	it	cc
 80120ec:	2304      	movcc	r3, #4
 80120ee:	9301      	str	r3, [sp, #4]
 80120f0:	9b02      	ldr	r3, [sp, #8]
 80120f2:	9103      	str	r1, [sp, #12]
 80120f4:	428b      	cmp	r3, r1
 80120f6:	d80c      	bhi.n	8012112 <__multiply+0x9a>
 80120f8:	2e00      	cmp	r6, #0
 80120fa:	dd03      	ble.n	8012104 <__multiply+0x8c>
 80120fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012100:	2b00      	cmp	r3, #0
 8012102:	d055      	beq.n	80121b0 <__multiply+0x138>
 8012104:	6106      	str	r6, [r0, #16]
 8012106:	b005      	add	sp, #20
 8012108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801210c:	f843 2b04 	str.w	r2, [r3], #4
 8012110:	e7d9      	b.n	80120c6 <__multiply+0x4e>
 8012112:	f8b1 a000 	ldrh.w	sl, [r1]
 8012116:	f1ba 0f00 	cmp.w	sl, #0
 801211a:	d01f      	beq.n	801215c <__multiply+0xe4>
 801211c:	46c4      	mov	ip, r8
 801211e:	46a1      	mov	r9, r4
 8012120:	2700      	movs	r7, #0
 8012122:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012126:	f8d9 3000 	ldr.w	r3, [r9]
 801212a:	fa1f fb82 	uxth.w	fp, r2
 801212e:	b29b      	uxth	r3, r3
 8012130:	fb0a 330b 	mla	r3, sl, fp, r3
 8012134:	443b      	add	r3, r7
 8012136:	f8d9 7000 	ldr.w	r7, [r9]
 801213a:	0c12      	lsrs	r2, r2, #16
 801213c:	0c3f      	lsrs	r7, r7, #16
 801213e:	fb0a 7202 	mla	r2, sl, r2, r7
 8012142:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012146:	b29b      	uxth	r3, r3
 8012148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801214c:	4565      	cmp	r5, ip
 801214e:	f849 3b04 	str.w	r3, [r9], #4
 8012152:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012156:	d8e4      	bhi.n	8012122 <__multiply+0xaa>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	50e7      	str	r7, [r4, r3]
 801215c:	9b03      	ldr	r3, [sp, #12]
 801215e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012162:	3104      	adds	r1, #4
 8012164:	f1b9 0f00 	cmp.w	r9, #0
 8012168:	d020      	beq.n	80121ac <__multiply+0x134>
 801216a:	6823      	ldr	r3, [r4, #0]
 801216c:	4647      	mov	r7, r8
 801216e:	46a4      	mov	ip, r4
 8012170:	f04f 0a00 	mov.w	sl, #0
 8012174:	f8b7 b000 	ldrh.w	fp, [r7]
 8012178:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801217c:	fb09 220b 	mla	r2, r9, fp, r2
 8012180:	4452      	add	r2, sl
 8012182:	b29b      	uxth	r3, r3
 8012184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012188:	f84c 3b04 	str.w	r3, [ip], #4
 801218c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012194:	f8bc 3000 	ldrh.w	r3, [ip]
 8012198:	fb09 330a 	mla	r3, r9, sl, r3
 801219c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80121a0:	42bd      	cmp	r5, r7
 80121a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80121a6:	d8e5      	bhi.n	8012174 <__multiply+0xfc>
 80121a8:	9a01      	ldr	r2, [sp, #4]
 80121aa:	50a3      	str	r3, [r4, r2]
 80121ac:	3404      	adds	r4, #4
 80121ae:	e79f      	b.n	80120f0 <__multiply+0x78>
 80121b0:	3e01      	subs	r6, #1
 80121b2:	e7a1      	b.n	80120f8 <__multiply+0x80>
 80121b4:	0801435c 	.word	0x0801435c
 80121b8:	0801436d 	.word	0x0801436d

080121bc <__pow5mult>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	4615      	mov	r5, r2
 80121c2:	f012 0203 	ands.w	r2, r2, #3
 80121c6:	4607      	mov	r7, r0
 80121c8:	460e      	mov	r6, r1
 80121ca:	d007      	beq.n	80121dc <__pow5mult+0x20>
 80121cc:	4c25      	ldr	r4, [pc, #148]	@ (8012264 <__pow5mult+0xa8>)
 80121ce:	3a01      	subs	r2, #1
 80121d0:	2300      	movs	r3, #0
 80121d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121d6:	f7ff fea7 	bl	8011f28 <__multadd>
 80121da:	4606      	mov	r6, r0
 80121dc:	10ad      	asrs	r5, r5, #2
 80121de:	d03d      	beq.n	801225c <__pow5mult+0xa0>
 80121e0:	69fc      	ldr	r4, [r7, #28]
 80121e2:	b97c      	cbnz	r4, 8012204 <__pow5mult+0x48>
 80121e4:	2010      	movs	r0, #16
 80121e6:	f7fe f8cd 	bl	8010384 <malloc>
 80121ea:	4602      	mov	r2, r0
 80121ec:	61f8      	str	r0, [r7, #28]
 80121ee:	b928      	cbnz	r0, 80121fc <__pow5mult+0x40>
 80121f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012268 <__pow5mult+0xac>)
 80121f2:	481e      	ldr	r0, [pc, #120]	@ (801226c <__pow5mult+0xb0>)
 80121f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80121f8:	f000 fbda 	bl	80129b0 <__assert_func>
 80121fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012200:	6004      	str	r4, [r0, #0]
 8012202:	60c4      	str	r4, [r0, #12]
 8012204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801220c:	b94c      	cbnz	r4, 8012222 <__pow5mult+0x66>
 801220e:	f240 2171 	movw	r1, #625	@ 0x271
 8012212:	4638      	mov	r0, r7
 8012214:	f7ff ff1a 	bl	801204c <__i2b>
 8012218:	2300      	movs	r3, #0
 801221a:	f8c8 0008 	str.w	r0, [r8, #8]
 801221e:	4604      	mov	r4, r0
 8012220:	6003      	str	r3, [r0, #0]
 8012222:	f04f 0900 	mov.w	r9, #0
 8012226:	07eb      	lsls	r3, r5, #31
 8012228:	d50a      	bpl.n	8012240 <__pow5mult+0x84>
 801222a:	4631      	mov	r1, r6
 801222c:	4622      	mov	r2, r4
 801222e:	4638      	mov	r0, r7
 8012230:	f7ff ff22 	bl	8012078 <__multiply>
 8012234:	4631      	mov	r1, r6
 8012236:	4680      	mov	r8, r0
 8012238:	4638      	mov	r0, r7
 801223a:	f7ff fe53 	bl	8011ee4 <_Bfree>
 801223e:	4646      	mov	r6, r8
 8012240:	106d      	asrs	r5, r5, #1
 8012242:	d00b      	beq.n	801225c <__pow5mult+0xa0>
 8012244:	6820      	ldr	r0, [r4, #0]
 8012246:	b938      	cbnz	r0, 8012258 <__pow5mult+0x9c>
 8012248:	4622      	mov	r2, r4
 801224a:	4621      	mov	r1, r4
 801224c:	4638      	mov	r0, r7
 801224e:	f7ff ff13 	bl	8012078 <__multiply>
 8012252:	6020      	str	r0, [r4, #0]
 8012254:	f8c0 9000 	str.w	r9, [r0]
 8012258:	4604      	mov	r4, r0
 801225a:	e7e4      	b.n	8012226 <__pow5mult+0x6a>
 801225c:	4630      	mov	r0, r6
 801225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012262:	bf00      	nop
 8012264:	08014420 	.word	0x08014420
 8012268:	080142ed 	.word	0x080142ed
 801226c:	0801436d 	.word	0x0801436d

08012270 <__lshift>:
 8012270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012274:	460c      	mov	r4, r1
 8012276:	6849      	ldr	r1, [r1, #4]
 8012278:	6923      	ldr	r3, [r4, #16]
 801227a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801227e:	68a3      	ldr	r3, [r4, #8]
 8012280:	4607      	mov	r7, r0
 8012282:	4691      	mov	r9, r2
 8012284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012288:	f108 0601 	add.w	r6, r8, #1
 801228c:	42b3      	cmp	r3, r6
 801228e:	db0b      	blt.n	80122a8 <__lshift+0x38>
 8012290:	4638      	mov	r0, r7
 8012292:	f7ff fde7 	bl	8011e64 <_Balloc>
 8012296:	4605      	mov	r5, r0
 8012298:	b948      	cbnz	r0, 80122ae <__lshift+0x3e>
 801229a:	4602      	mov	r2, r0
 801229c:	4b28      	ldr	r3, [pc, #160]	@ (8012340 <__lshift+0xd0>)
 801229e:	4829      	ldr	r0, [pc, #164]	@ (8012344 <__lshift+0xd4>)
 80122a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80122a4:	f000 fb84 	bl	80129b0 <__assert_func>
 80122a8:	3101      	adds	r1, #1
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	e7ee      	b.n	801228c <__lshift+0x1c>
 80122ae:	2300      	movs	r3, #0
 80122b0:	f100 0114 	add.w	r1, r0, #20
 80122b4:	f100 0210 	add.w	r2, r0, #16
 80122b8:	4618      	mov	r0, r3
 80122ba:	4553      	cmp	r3, sl
 80122bc:	db33      	blt.n	8012326 <__lshift+0xb6>
 80122be:	6920      	ldr	r0, [r4, #16]
 80122c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122c4:	f104 0314 	add.w	r3, r4, #20
 80122c8:	f019 091f 	ands.w	r9, r9, #31
 80122cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80122d4:	d02b      	beq.n	801232e <__lshift+0xbe>
 80122d6:	f1c9 0e20 	rsb	lr, r9, #32
 80122da:	468a      	mov	sl, r1
 80122dc:	2200      	movs	r2, #0
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	fa00 f009 	lsl.w	r0, r0, r9
 80122e4:	4310      	orrs	r0, r2
 80122e6:	f84a 0b04 	str.w	r0, [sl], #4
 80122ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ee:	459c      	cmp	ip, r3
 80122f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80122f4:	d8f3      	bhi.n	80122de <__lshift+0x6e>
 80122f6:	ebac 0304 	sub.w	r3, ip, r4
 80122fa:	3b15      	subs	r3, #21
 80122fc:	f023 0303 	bic.w	r3, r3, #3
 8012300:	3304      	adds	r3, #4
 8012302:	f104 0015 	add.w	r0, r4, #21
 8012306:	4560      	cmp	r0, ip
 8012308:	bf88      	it	hi
 801230a:	2304      	movhi	r3, #4
 801230c:	50ca      	str	r2, [r1, r3]
 801230e:	b10a      	cbz	r2, 8012314 <__lshift+0xa4>
 8012310:	f108 0602 	add.w	r6, r8, #2
 8012314:	3e01      	subs	r6, #1
 8012316:	4638      	mov	r0, r7
 8012318:	612e      	str	r6, [r5, #16]
 801231a:	4621      	mov	r1, r4
 801231c:	f7ff fde2 	bl	8011ee4 <_Bfree>
 8012320:	4628      	mov	r0, r5
 8012322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012326:	f842 0f04 	str.w	r0, [r2, #4]!
 801232a:	3301      	adds	r3, #1
 801232c:	e7c5      	b.n	80122ba <__lshift+0x4a>
 801232e:	3904      	subs	r1, #4
 8012330:	f853 2b04 	ldr.w	r2, [r3], #4
 8012334:	f841 2f04 	str.w	r2, [r1, #4]!
 8012338:	459c      	cmp	ip, r3
 801233a:	d8f9      	bhi.n	8012330 <__lshift+0xc0>
 801233c:	e7ea      	b.n	8012314 <__lshift+0xa4>
 801233e:	bf00      	nop
 8012340:	0801435c 	.word	0x0801435c
 8012344:	0801436d 	.word	0x0801436d

08012348 <__mcmp>:
 8012348:	690a      	ldr	r2, [r1, #16]
 801234a:	4603      	mov	r3, r0
 801234c:	6900      	ldr	r0, [r0, #16]
 801234e:	1a80      	subs	r0, r0, r2
 8012350:	b530      	push	{r4, r5, lr}
 8012352:	d10e      	bne.n	8012372 <__mcmp+0x2a>
 8012354:	3314      	adds	r3, #20
 8012356:	3114      	adds	r1, #20
 8012358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801235c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012368:	4295      	cmp	r5, r2
 801236a:	d003      	beq.n	8012374 <__mcmp+0x2c>
 801236c:	d205      	bcs.n	801237a <__mcmp+0x32>
 801236e:	f04f 30ff 	mov.w	r0, #4294967295
 8012372:	bd30      	pop	{r4, r5, pc}
 8012374:	42a3      	cmp	r3, r4
 8012376:	d3f3      	bcc.n	8012360 <__mcmp+0x18>
 8012378:	e7fb      	b.n	8012372 <__mcmp+0x2a>
 801237a:	2001      	movs	r0, #1
 801237c:	e7f9      	b.n	8012372 <__mcmp+0x2a>
	...

08012380 <__mdiff>:
 8012380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012384:	4689      	mov	r9, r1
 8012386:	4606      	mov	r6, r0
 8012388:	4611      	mov	r1, r2
 801238a:	4648      	mov	r0, r9
 801238c:	4614      	mov	r4, r2
 801238e:	f7ff ffdb 	bl	8012348 <__mcmp>
 8012392:	1e05      	subs	r5, r0, #0
 8012394:	d112      	bne.n	80123bc <__mdiff+0x3c>
 8012396:	4629      	mov	r1, r5
 8012398:	4630      	mov	r0, r6
 801239a:	f7ff fd63 	bl	8011e64 <_Balloc>
 801239e:	4602      	mov	r2, r0
 80123a0:	b928      	cbnz	r0, 80123ae <__mdiff+0x2e>
 80123a2:	4b3f      	ldr	r3, [pc, #252]	@ (80124a0 <__mdiff+0x120>)
 80123a4:	f240 2137 	movw	r1, #567	@ 0x237
 80123a8:	483e      	ldr	r0, [pc, #248]	@ (80124a4 <__mdiff+0x124>)
 80123aa:	f000 fb01 	bl	80129b0 <__assert_func>
 80123ae:	2301      	movs	r3, #1
 80123b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80123b4:	4610      	mov	r0, r2
 80123b6:	b003      	add	sp, #12
 80123b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123bc:	bfbc      	itt	lt
 80123be:	464b      	movlt	r3, r9
 80123c0:	46a1      	movlt	r9, r4
 80123c2:	4630      	mov	r0, r6
 80123c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80123c8:	bfba      	itte	lt
 80123ca:	461c      	movlt	r4, r3
 80123cc:	2501      	movlt	r5, #1
 80123ce:	2500      	movge	r5, #0
 80123d0:	f7ff fd48 	bl	8011e64 <_Balloc>
 80123d4:	4602      	mov	r2, r0
 80123d6:	b918      	cbnz	r0, 80123e0 <__mdiff+0x60>
 80123d8:	4b31      	ldr	r3, [pc, #196]	@ (80124a0 <__mdiff+0x120>)
 80123da:	f240 2145 	movw	r1, #581	@ 0x245
 80123de:	e7e3      	b.n	80123a8 <__mdiff+0x28>
 80123e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80123e4:	6926      	ldr	r6, [r4, #16]
 80123e6:	60c5      	str	r5, [r0, #12]
 80123e8:	f109 0310 	add.w	r3, r9, #16
 80123ec:	f109 0514 	add.w	r5, r9, #20
 80123f0:	f104 0e14 	add.w	lr, r4, #20
 80123f4:	f100 0b14 	add.w	fp, r0, #20
 80123f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80123fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012400:	9301      	str	r3, [sp, #4]
 8012402:	46d9      	mov	r9, fp
 8012404:	f04f 0c00 	mov.w	ip, #0
 8012408:	9b01      	ldr	r3, [sp, #4]
 801240a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801240e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012412:	9301      	str	r3, [sp, #4]
 8012414:	fa1f f38a 	uxth.w	r3, sl
 8012418:	4619      	mov	r1, r3
 801241a:	b283      	uxth	r3, r0
 801241c:	1acb      	subs	r3, r1, r3
 801241e:	0c00      	lsrs	r0, r0, #16
 8012420:	4463      	add	r3, ip
 8012422:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012426:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801242a:	b29b      	uxth	r3, r3
 801242c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012430:	4576      	cmp	r6, lr
 8012432:	f849 3b04 	str.w	r3, [r9], #4
 8012436:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801243a:	d8e5      	bhi.n	8012408 <__mdiff+0x88>
 801243c:	1b33      	subs	r3, r6, r4
 801243e:	3b15      	subs	r3, #21
 8012440:	f023 0303 	bic.w	r3, r3, #3
 8012444:	3415      	adds	r4, #21
 8012446:	3304      	adds	r3, #4
 8012448:	42a6      	cmp	r6, r4
 801244a:	bf38      	it	cc
 801244c:	2304      	movcc	r3, #4
 801244e:	441d      	add	r5, r3
 8012450:	445b      	add	r3, fp
 8012452:	461e      	mov	r6, r3
 8012454:	462c      	mov	r4, r5
 8012456:	4544      	cmp	r4, r8
 8012458:	d30e      	bcc.n	8012478 <__mdiff+0xf8>
 801245a:	f108 0103 	add.w	r1, r8, #3
 801245e:	1b49      	subs	r1, r1, r5
 8012460:	f021 0103 	bic.w	r1, r1, #3
 8012464:	3d03      	subs	r5, #3
 8012466:	45a8      	cmp	r8, r5
 8012468:	bf38      	it	cc
 801246a:	2100      	movcc	r1, #0
 801246c:	440b      	add	r3, r1
 801246e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012472:	b191      	cbz	r1, 801249a <__mdiff+0x11a>
 8012474:	6117      	str	r7, [r2, #16]
 8012476:	e79d      	b.n	80123b4 <__mdiff+0x34>
 8012478:	f854 1b04 	ldr.w	r1, [r4], #4
 801247c:	46e6      	mov	lr, ip
 801247e:	0c08      	lsrs	r0, r1, #16
 8012480:	fa1c fc81 	uxtah	ip, ip, r1
 8012484:	4471      	add	r1, lr
 8012486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801248a:	b289      	uxth	r1, r1
 801248c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012490:	f846 1b04 	str.w	r1, [r6], #4
 8012494:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012498:	e7dd      	b.n	8012456 <__mdiff+0xd6>
 801249a:	3f01      	subs	r7, #1
 801249c:	e7e7      	b.n	801246e <__mdiff+0xee>
 801249e:	bf00      	nop
 80124a0:	0801435c 	.word	0x0801435c
 80124a4:	0801436d 	.word	0x0801436d

080124a8 <__d2b>:
 80124a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124ac:	460f      	mov	r7, r1
 80124ae:	2101      	movs	r1, #1
 80124b0:	ec59 8b10 	vmov	r8, r9, d0
 80124b4:	4616      	mov	r6, r2
 80124b6:	f7ff fcd5 	bl	8011e64 <_Balloc>
 80124ba:	4604      	mov	r4, r0
 80124bc:	b930      	cbnz	r0, 80124cc <__d2b+0x24>
 80124be:	4602      	mov	r2, r0
 80124c0:	4b23      	ldr	r3, [pc, #140]	@ (8012550 <__d2b+0xa8>)
 80124c2:	4824      	ldr	r0, [pc, #144]	@ (8012554 <__d2b+0xac>)
 80124c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80124c8:	f000 fa72 	bl	80129b0 <__assert_func>
 80124cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80124d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124d4:	b10d      	cbz	r5, 80124da <__d2b+0x32>
 80124d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80124da:	9301      	str	r3, [sp, #4]
 80124dc:	f1b8 0300 	subs.w	r3, r8, #0
 80124e0:	d023      	beq.n	801252a <__d2b+0x82>
 80124e2:	4668      	mov	r0, sp
 80124e4:	9300      	str	r3, [sp, #0]
 80124e6:	f7ff fd84 	bl	8011ff2 <__lo0bits>
 80124ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80124ee:	b1d0      	cbz	r0, 8012526 <__d2b+0x7e>
 80124f0:	f1c0 0320 	rsb	r3, r0, #32
 80124f4:	fa02 f303 	lsl.w	r3, r2, r3
 80124f8:	430b      	orrs	r3, r1
 80124fa:	40c2      	lsrs	r2, r0
 80124fc:	6163      	str	r3, [r4, #20]
 80124fe:	9201      	str	r2, [sp, #4]
 8012500:	9b01      	ldr	r3, [sp, #4]
 8012502:	61a3      	str	r3, [r4, #24]
 8012504:	2b00      	cmp	r3, #0
 8012506:	bf0c      	ite	eq
 8012508:	2201      	moveq	r2, #1
 801250a:	2202      	movne	r2, #2
 801250c:	6122      	str	r2, [r4, #16]
 801250e:	b1a5      	cbz	r5, 801253a <__d2b+0x92>
 8012510:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012514:	4405      	add	r5, r0
 8012516:	603d      	str	r5, [r7, #0]
 8012518:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801251c:	6030      	str	r0, [r6, #0]
 801251e:	4620      	mov	r0, r4
 8012520:	b003      	add	sp, #12
 8012522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012526:	6161      	str	r1, [r4, #20]
 8012528:	e7ea      	b.n	8012500 <__d2b+0x58>
 801252a:	a801      	add	r0, sp, #4
 801252c:	f7ff fd61 	bl	8011ff2 <__lo0bits>
 8012530:	9b01      	ldr	r3, [sp, #4]
 8012532:	6163      	str	r3, [r4, #20]
 8012534:	3020      	adds	r0, #32
 8012536:	2201      	movs	r2, #1
 8012538:	e7e8      	b.n	801250c <__d2b+0x64>
 801253a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801253e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012542:	6038      	str	r0, [r7, #0]
 8012544:	6918      	ldr	r0, [r3, #16]
 8012546:	f7ff fd35 	bl	8011fb4 <__hi0bits>
 801254a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801254e:	e7e5      	b.n	801251c <__d2b+0x74>
 8012550:	0801435c 	.word	0x0801435c
 8012554:	0801436d 	.word	0x0801436d

08012558 <__ssputs_r>:
 8012558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801255c:	688e      	ldr	r6, [r1, #8]
 801255e:	461f      	mov	r7, r3
 8012560:	42be      	cmp	r6, r7
 8012562:	680b      	ldr	r3, [r1, #0]
 8012564:	4682      	mov	sl, r0
 8012566:	460c      	mov	r4, r1
 8012568:	4690      	mov	r8, r2
 801256a:	d82d      	bhi.n	80125c8 <__ssputs_r+0x70>
 801256c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012570:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012574:	d026      	beq.n	80125c4 <__ssputs_r+0x6c>
 8012576:	6965      	ldr	r5, [r4, #20]
 8012578:	6909      	ldr	r1, [r1, #16]
 801257a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801257e:	eba3 0901 	sub.w	r9, r3, r1
 8012582:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012586:	1c7b      	adds	r3, r7, #1
 8012588:	444b      	add	r3, r9
 801258a:	106d      	asrs	r5, r5, #1
 801258c:	429d      	cmp	r5, r3
 801258e:	bf38      	it	cc
 8012590:	461d      	movcc	r5, r3
 8012592:	0553      	lsls	r3, r2, #21
 8012594:	d527      	bpl.n	80125e6 <__ssputs_r+0x8e>
 8012596:	4629      	mov	r1, r5
 8012598:	f7fd ff26 	bl	80103e8 <_malloc_r>
 801259c:	4606      	mov	r6, r0
 801259e:	b360      	cbz	r0, 80125fa <__ssputs_r+0xa2>
 80125a0:	6921      	ldr	r1, [r4, #16]
 80125a2:	464a      	mov	r2, r9
 80125a4:	f000 f9f6 	bl	8012994 <memcpy>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80125ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125b2:	81a3      	strh	r3, [r4, #12]
 80125b4:	6126      	str	r6, [r4, #16]
 80125b6:	6165      	str	r5, [r4, #20]
 80125b8:	444e      	add	r6, r9
 80125ba:	eba5 0509 	sub.w	r5, r5, r9
 80125be:	6026      	str	r6, [r4, #0]
 80125c0:	60a5      	str	r5, [r4, #8]
 80125c2:	463e      	mov	r6, r7
 80125c4:	42be      	cmp	r6, r7
 80125c6:	d900      	bls.n	80125ca <__ssputs_r+0x72>
 80125c8:	463e      	mov	r6, r7
 80125ca:	6820      	ldr	r0, [r4, #0]
 80125cc:	4632      	mov	r2, r6
 80125ce:	4641      	mov	r1, r8
 80125d0:	f000 f9c6 	bl	8012960 <memmove>
 80125d4:	68a3      	ldr	r3, [r4, #8]
 80125d6:	1b9b      	subs	r3, r3, r6
 80125d8:	60a3      	str	r3, [r4, #8]
 80125da:	6823      	ldr	r3, [r4, #0]
 80125dc:	4433      	add	r3, r6
 80125de:	6023      	str	r3, [r4, #0]
 80125e0:	2000      	movs	r0, #0
 80125e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e6:	462a      	mov	r2, r5
 80125e8:	f000 fa26 	bl	8012a38 <_realloc_r>
 80125ec:	4606      	mov	r6, r0
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d1e0      	bne.n	80125b4 <__ssputs_r+0x5c>
 80125f2:	6921      	ldr	r1, [r4, #16]
 80125f4:	4650      	mov	r0, sl
 80125f6:	f7ff fbeb 	bl	8011dd0 <_free_r>
 80125fa:	230c      	movs	r3, #12
 80125fc:	f8ca 3000 	str.w	r3, [sl]
 8012600:	89a3      	ldrh	r3, [r4, #12]
 8012602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012606:	81a3      	strh	r3, [r4, #12]
 8012608:	f04f 30ff 	mov.w	r0, #4294967295
 801260c:	e7e9      	b.n	80125e2 <__ssputs_r+0x8a>
	...

08012610 <_svfiprintf_r>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	4698      	mov	r8, r3
 8012616:	898b      	ldrh	r3, [r1, #12]
 8012618:	061b      	lsls	r3, r3, #24
 801261a:	b09d      	sub	sp, #116	@ 0x74
 801261c:	4607      	mov	r7, r0
 801261e:	460d      	mov	r5, r1
 8012620:	4614      	mov	r4, r2
 8012622:	d510      	bpl.n	8012646 <_svfiprintf_r+0x36>
 8012624:	690b      	ldr	r3, [r1, #16]
 8012626:	b973      	cbnz	r3, 8012646 <_svfiprintf_r+0x36>
 8012628:	2140      	movs	r1, #64	@ 0x40
 801262a:	f7fd fedd 	bl	80103e8 <_malloc_r>
 801262e:	6028      	str	r0, [r5, #0]
 8012630:	6128      	str	r0, [r5, #16]
 8012632:	b930      	cbnz	r0, 8012642 <_svfiprintf_r+0x32>
 8012634:	230c      	movs	r3, #12
 8012636:	603b      	str	r3, [r7, #0]
 8012638:	f04f 30ff 	mov.w	r0, #4294967295
 801263c:	b01d      	add	sp, #116	@ 0x74
 801263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012642:	2340      	movs	r3, #64	@ 0x40
 8012644:	616b      	str	r3, [r5, #20]
 8012646:	2300      	movs	r3, #0
 8012648:	9309      	str	r3, [sp, #36]	@ 0x24
 801264a:	2320      	movs	r3, #32
 801264c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012650:	f8cd 800c 	str.w	r8, [sp, #12]
 8012654:	2330      	movs	r3, #48	@ 0x30
 8012656:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80127f4 <_svfiprintf_r+0x1e4>
 801265a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801265e:	f04f 0901 	mov.w	r9, #1
 8012662:	4623      	mov	r3, r4
 8012664:	469a      	mov	sl, r3
 8012666:	f813 2b01 	ldrb.w	r2, [r3], #1
 801266a:	b10a      	cbz	r2, 8012670 <_svfiprintf_r+0x60>
 801266c:	2a25      	cmp	r2, #37	@ 0x25
 801266e:	d1f9      	bne.n	8012664 <_svfiprintf_r+0x54>
 8012670:	ebba 0b04 	subs.w	fp, sl, r4
 8012674:	d00b      	beq.n	801268e <_svfiprintf_r+0x7e>
 8012676:	465b      	mov	r3, fp
 8012678:	4622      	mov	r2, r4
 801267a:	4629      	mov	r1, r5
 801267c:	4638      	mov	r0, r7
 801267e:	f7ff ff6b 	bl	8012558 <__ssputs_r>
 8012682:	3001      	adds	r0, #1
 8012684:	f000 80a7 	beq.w	80127d6 <_svfiprintf_r+0x1c6>
 8012688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801268a:	445a      	add	r2, fp
 801268c:	9209      	str	r2, [sp, #36]	@ 0x24
 801268e:	f89a 3000 	ldrb.w	r3, [sl]
 8012692:	2b00      	cmp	r3, #0
 8012694:	f000 809f 	beq.w	80127d6 <_svfiprintf_r+0x1c6>
 8012698:	2300      	movs	r3, #0
 801269a:	f04f 32ff 	mov.w	r2, #4294967295
 801269e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126a2:	f10a 0a01 	add.w	sl, sl, #1
 80126a6:	9304      	str	r3, [sp, #16]
 80126a8:	9307      	str	r3, [sp, #28]
 80126aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80126b0:	4654      	mov	r4, sl
 80126b2:	2205      	movs	r2, #5
 80126b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126b8:	484e      	ldr	r0, [pc, #312]	@ (80127f4 <_svfiprintf_r+0x1e4>)
 80126ba:	f7ed fdb1 	bl	8000220 <memchr>
 80126be:	9a04      	ldr	r2, [sp, #16]
 80126c0:	b9d8      	cbnz	r0, 80126fa <_svfiprintf_r+0xea>
 80126c2:	06d0      	lsls	r0, r2, #27
 80126c4:	bf44      	itt	mi
 80126c6:	2320      	movmi	r3, #32
 80126c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126cc:	0711      	lsls	r1, r2, #28
 80126ce:	bf44      	itt	mi
 80126d0:	232b      	movmi	r3, #43	@ 0x2b
 80126d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80126d6:	f89a 3000 	ldrb.w	r3, [sl]
 80126da:	2b2a      	cmp	r3, #42	@ 0x2a
 80126dc:	d015      	beq.n	801270a <_svfiprintf_r+0xfa>
 80126de:	9a07      	ldr	r2, [sp, #28]
 80126e0:	4654      	mov	r4, sl
 80126e2:	2000      	movs	r0, #0
 80126e4:	f04f 0c0a 	mov.w	ip, #10
 80126e8:	4621      	mov	r1, r4
 80126ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126ee:	3b30      	subs	r3, #48	@ 0x30
 80126f0:	2b09      	cmp	r3, #9
 80126f2:	d94b      	bls.n	801278c <_svfiprintf_r+0x17c>
 80126f4:	b1b0      	cbz	r0, 8012724 <_svfiprintf_r+0x114>
 80126f6:	9207      	str	r2, [sp, #28]
 80126f8:	e014      	b.n	8012724 <_svfiprintf_r+0x114>
 80126fa:	eba0 0308 	sub.w	r3, r0, r8
 80126fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012702:	4313      	orrs	r3, r2
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	46a2      	mov	sl, r4
 8012708:	e7d2      	b.n	80126b0 <_svfiprintf_r+0xa0>
 801270a:	9b03      	ldr	r3, [sp, #12]
 801270c:	1d19      	adds	r1, r3, #4
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	9103      	str	r1, [sp, #12]
 8012712:	2b00      	cmp	r3, #0
 8012714:	bfbb      	ittet	lt
 8012716:	425b      	neglt	r3, r3
 8012718:	f042 0202 	orrlt.w	r2, r2, #2
 801271c:	9307      	strge	r3, [sp, #28]
 801271e:	9307      	strlt	r3, [sp, #28]
 8012720:	bfb8      	it	lt
 8012722:	9204      	strlt	r2, [sp, #16]
 8012724:	7823      	ldrb	r3, [r4, #0]
 8012726:	2b2e      	cmp	r3, #46	@ 0x2e
 8012728:	d10a      	bne.n	8012740 <_svfiprintf_r+0x130>
 801272a:	7863      	ldrb	r3, [r4, #1]
 801272c:	2b2a      	cmp	r3, #42	@ 0x2a
 801272e:	d132      	bne.n	8012796 <_svfiprintf_r+0x186>
 8012730:	9b03      	ldr	r3, [sp, #12]
 8012732:	1d1a      	adds	r2, r3, #4
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	9203      	str	r2, [sp, #12]
 8012738:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801273c:	3402      	adds	r4, #2
 801273e:	9305      	str	r3, [sp, #20]
 8012740:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012804 <_svfiprintf_r+0x1f4>
 8012744:	7821      	ldrb	r1, [r4, #0]
 8012746:	2203      	movs	r2, #3
 8012748:	4650      	mov	r0, sl
 801274a:	f7ed fd69 	bl	8000220 <memchr>
 801274e:	b138      	cbz	r0, 8012760 <_svfiprintf_r+0x150>
 8012750:	9b04      	ldr	r3, [sp, #16]
 8012752:	eba0 000a 	sub.w	r0, r0, sl
 8012756:	2240      	movs	r2, #64	@ 0x40
 8012758:	4082      	lsls	r2, r0
 801275a:	4313      	orrs	r3, r2
 801275c:	3401      	adds	r4, #1
 801275e:	9304      	str	r3, [sp, #16]
 8012760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012764:	4824      	ldr	r0, [pc, #144]	@ (80127f8 <_svfiprintf_r+0x1e8>)
 8012766:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801276a:	2206      	movs	r2, #6
 801276c:	f7ed fd58 	bl	8000220 <memchr>
 8012770:	2800      	cmp	r0, #0
 8012772:	d036      	beq.n	80127e2 <_svfiprintf_r+0x1d2>
 8012774:	4b21      	ldr	r3, [pc, #132]	@ (80127fc <_svfiprintf_r+0x1ec>)
 8012776:	bb1b      	cbnz	r3, 80127c0 <_svfiprintf_r+0x1b0>
 8012778:	9b03      	ldr	r3, [sp, #12]
 801277a:	3307      	adds	r3, #7
 801277c:	f023 0307 	bic.w	r3, r3, #7
 8012780:	3308      	adds	r3, #8
 8012782:	9303      	str	r3, [sp, #12]
 8012784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012786:	4433      	add	r3, r6
 8012788:	9309      	str	r3, [sp, #36]	@ 0x24
 801278a:	e76a      	b.n	8012662 <_svfiprintf_r+0x52>
 801278c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012790:	460c      	mov	r4, r1
 8012792:	2001      	movs	r0, #1
 8012794:	e7a8      	b.n	80126e8 <_svfiprintf_r+0xd8>
 8012796:	2300      	movs	r3, #0
 8012798:	3401      	adds	r4, #1
 801279a:	9305      	str	r3, [sp, #20]
 801279c:	4619      	mov	r1, r3
 801279e:	f04f 0c0a 	mov.w	ip, #10
 80127a2:	4620      	mov	r0, r4
 80127a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127a8:	3a30      	subs	r2, #48	@ 0x30
 80127aa:	2a09      	cmp	r2, #9
 80127ac:	d903      	bls.n	80127b6 <_svfiprintf_r+0x1a6>
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d0c6      	beq.n	8012740 <_svfiprintf_r+0x130>
 80127b2:	9105      	str	r1, [sp, #20]
 80127b4:	e7c4      	b.n	8012740 <_svfiprintf_r+0x130>
 80127b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80127ba:	4604      	mov	r4, r0
 80127bc:	2301      	movs	r3, #1
 80127be:	e7f0      	b.n	80127a2 <_svfiprintf_r+0x192>
 80127c0:	ab03      	add	r3, sp, #12
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	462a      	mov	r2, r5
 80127c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012800 <_svfiprintf_r+0x1f0>)
 80127c8:	a904      	add	r1, sp, #16
 80127ca:	4638      	mov	r0, r7
 80127cc:	f7fd ff38 	bl	8010640 <_printf_float>
 80127d0:	1c42      	adds	r2, r0, #1
 80127d2:	4606      	mov	r6, r0
 80127d4:	d1d6      	bne.n	8012784 <_svfiprintf_r+0x174>
 80127d6:	89ab      	ldrh	r3, [r5, #12]
 80127d8:	065b      	lsls	r3, r3, #25
 80127da:	f53f af2d 	bmi.w	8012638 <_svfiprintf_r+0x28>
 80127de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127e0:	e72c      	b.n	801263c <_svfiprintf_r+0x2c>
 80127e2:	ab03      	add	r3, sp, #12
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	462a      	mov	r2, r5
 80127e8:	4b05      	ldr	r3, [pc, #20]	@ (8012800 <_svfiprintf_r+0x1f0>)
 80127ea:	a904      	add	r1, sp, #16
 80127ec:	4638      	mov	r0, r7
 80127ee:	f7fe f9bf 	bl	8010b70 <_printf_i>
 80127f2:	e7ed      	b.n	80127d0 <_svfiprintf_r+0x1c0>
 80127f4:	080143c6 	.word	0x080143c6
 80127f8:	080143d0 	.word	0x080143d0
 80127fc:	08010641 	.word	0x08010641
 8012800:	08012559 	.word	0x08012559
 8012804:	080143cc 	.word	0x080143cc

08012808 <__sflush_r>:
 8012808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	0716      	lsls	r6, r2, #28
 8012812:	4605      	mov	r5, r0
 8012814:	460c      	mov	r4, r1
 8012816:	d454      	bmi.n	80128c2 <__sflush_r+0xba>
 8012818:	684b      	ldr	r3, [r1, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	dc02      	bgt.n	8012824 <__sflush_r+0x1c>
 801281e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012820:	2b00      	cmp	r3, #0
 8012822:	dd48      	ble.n	80128b6 <__sflush_r+0xae>
 8012824:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012826:	2e00      	cmp	r6, #0
 8012828:	d045      	beq.n	80128b6 <__sflush_r+0xae>
 801282a:	2300      	movs	r3, #0
 801282c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012830:	682f      	ldr	r7, [r5, #0]
 8012832:	6a21      	ldr	r1, [r4, #32]
 8012834:	602b      	str	r3, [r5, #0]
 8012836:	d030      	beq.n	801289a <__sflush_r+0x92>
 8012838:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801283a:	89a3      	ldrh	r3, [r4, #12]
 801283c:	0759      	lsls	r1, r3, #29
 801283e:	d505      	bpl.n	801284c <__sflush_r+0x44>
 8012840:	6863      	ldr	r3, [r4, #4]
 8012842:	1ad2      	subs	r2, r2, r3
 8012844:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012846:	b10b      	cbz	r3, 801284c <__sflush_r+0x44>
 8012848:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801284a:	1ad2      	subs	r2, r2, r3
 801284c:	2300      	movs	r3, #0
 801284e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012850:	6a21      	ldr	r1, [r4, #32]
 8012852:	4628      	mov	r0, r5
 8012854:	47b0      	blx	r6
 8012856:	1c43      	adds	r3, r0, #1
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	d106      	bne.n	801286a <__sflush_r+0x62>
 801285c:	6829      	ldr	r1, [r5, #0]
 801285e:	291d      	cmp	r1, #29
 8012860:	d82b      	bhi.n	80128ba <__sflush_r+0xb2>
 8012862:	4a2a      	ldr	r2, [pc, #168]	@ (801290c <__sflush_r+0x104>)
 8012864:	40ca      	lsrs	r2, r1
 8012866:	07d6      	lsls	r6, r2, #31
 8012868:	d527      	bpl.n	80128ba <__sflush_r+0xb2>
 801286a:	2200      	movs	r2, #0
 801286c:	6062      	str	r2, [r4, #4]
 801286e:	04d9      	lsls	r1, r3, #19
 8012870:	6922      	ldr	r2, [r4, #16]
 8012872:	6022      	str	r2, [r4, #0]
 8012874:	d504      	bpl.n	8012880 <__sflush_r+0x78>
 8012876:	1c42      	adds	r2, r0, #1
 8012878:	d101      	bne.n	801287e <__sflush_r+0x76>
 801287a:	682b      	ldr	r3, [r5, #0]
 801287c:	b903      	cbnz	r3, 8012880 <__sflush_r+0x78>
 801287e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012882:	602f      	str	r7, [r5, #0]
 8012884:	b1b9      	cbz	r1, 80128b6 <__sflush_r+0xae>
 8012886:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801288a:	4299      	cmp	r1, r3
 801288c:	d002      	beq.n	8012894 <__sflush_r+0x8c>
 801288e:	4628      	mov	r0, r5
 8012890:	f7ff fa9e 	bl	8011dd0 <_free_r>
 8012894:	2300      	movs	r3, #0
 8012896:	6363      	str	r3, [r4, #52]	@ 0x34
 8012898:	e00d      	b.n	80128b6 <__sflush_r+0xae>
 801289a:	2301      	movs	r3, #1
 801289c:	4628      	mov	r0, r5
 801289e:	47b0      	blx	r6
 80128a0:	4602      	mov	r2, r0
 80128a2:	1c50      	adds	r0, r2, #1
 80128a4:	d1c9      	bne.n	801283a <__sflush_r+0x32>
 80128a6:	682b      	ldr	r3, [r5, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d0c6      	beq.n	801283a <__sflush_r+0x32>
 80128ac:	2b1d      	cmp	r3, #29
 80128ae:	d001      	beq.n	80128b4 <__sflush_r+0xac>
 80128b0:	2b16      	cmp	r3, #22
 80128b2:	d11e      	bne.n	80128f2 <__sflush_r+0xea>
 80128b4:	602f      	str	r7, [r5, #0]
 80128b6:	2000      	movs	r0, #0
 80128b8:	e022      	b.n	8012900 <__sflush_r+0xf8>
 80128ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128be:	b21b      	sxth	r3, r3
 80128c0:	e01b      	b.n	80128fa <__sflush_r+0xf2>
 80128c2:	690f      	ldr	r7, [r1, #16]
 80128c4:	2f00      	cmp	r7, #0
 80128c6:	d0f6      	beq.n	80128b6 <__sflush_r+0xae>
 80128c8:	0793      	lsls	r3, r2, #30
 80128ca:	680e      	ldr	r6, [r1, #0]
 80128cc:	bf08      	it	eq
 80128ce:	694b      	ldreq	r3, [r1, #20]
 80128d0:	600f      	str	r7, [r1, #0]
 80128d2:	bf18      	it	ne
 80128d4:	2300      	movne	r3, #0
 80128d6:	eba6 0807 	sub.w	r8, r6, r7
 80128da:	608b      	str	r3, [r1, #8]
 80128dc:	f1b8 0f00 	cmp.w	r8, #0
 80128e0:	dde9      	ble.n	80128b6 <__sflush_r+0xae>
 80128e2:	6a21      	ldr	r1, [r4, #32]
 80128e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80128e6:	4643      	mov	r3, r8
 80128e8:	463a      	mov	r2, r7
 80128ea:	4628      	mov	r0, r5
 80128ec:	47b0      	blx	r6
 80128ee:	2800      	cmp	r0, #0
 80128f0:	dc08      	bgt.n	8012904 <__sflush_r+0xfc>
 80128f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128fa:	81a3      	strh	r3, [r4, #12]
 80128fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012904:	4407      	add	r7, r0
 8012906:	eba8 0800 	sub.w	r8, r8, r0
 801290a:	e7e7      	b.n	80128dc <__sflush_r+0xd4>
 801290c:	20400001 	.word	0x20400001

08012910 <_fflush_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	690b      	ldr	r3, [r1, #16]
 8012914:	4605      	mov	r5, r0
 8012916:	460c      	mov	r4, r1
 8012918:	b913      	cbnz	r3, 8012920 <_fflush_r+0x10>
 801291a:	2500      	movs	r5, #0
 801291c:	4628      	mov	r0, r5
 801291e:	bd38      	pop	{r3, r4, r5, pc}
 8012920:	b118      	cbz	r0, 801292a <_fflush_r+0x1a>
 8012922:	6a03      	ldr	r3, [r0, #32]
 8012924:	b90b      	cbnz	r3, 801292a <_fflush_r+0x1a>
 8012926:	f7fe facd 	bl	8010ec4 <__sinit>
 801292a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d0f3      	beq.n	801291a <_fflush_r+0xa>
 8012932:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012934:	07d0      	lsls	r0, r2, #31
 8012936:	d404      	bmi.n	8012942 <_fflush_r+0x32>
 8012938:	0599      	lsls	r1, r3, #22
 801293a:	d402      	bmi.n	8012942 <_fflush_r+0x32>
 801293c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801293e:	f7fe fbea 	bl	8011116 <__retarget_lock_acquire_recursive>
 8012942:	4628      	mov	r0, r5
 8012944:	4621      	mov	r1, r4
 8012946:	f7ff ff5f 	bl	8012808 <__sflush_r>
 801294a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801294c:	07da      	lsls	r2, r3, #31
 801294e:	4605      	mov	r5, r0
 8012950:	d4e4      	bmi.n	801291c <_fflush_r+0xc>
 8012952:	89a3      	ldrh	r3, [r4, #12]
 8012954:	059b      	lsls	r3, r3, #22
 8012956:	d4e1      	bmi.n	801291c <_fflush_r+0xc>
 8012958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801295a:	f7fe fbdd 	bl	8011118 <__retarget_lock_release_recursive>
 801295e:	e7dd      	b.n	801291c <_fflush_r+0xc>

08012960 <memmove>:
 8012960:	4288      	cmp	r0, r1
 8012962:	b510      	push	{r4, lr}
 8012964:	eb01 0402 	add.w	r4, r1, r2
 8012968:	d902      	bls.n	8012970 <memmove+0x10>
 801296a:	4284      	cmp	r4, r0
 801296c:	4623      	mov	r3, r4
 801296e:	d807      	bhi.n	8012980 <memmove+0x20>
 8012970:	1e43      	subs	r3, r0, #1
 8012972:	42a1      	cmp	r1, r4
 8012974:	d008      	beq.n	8012988 <memmove+0x28>
 8012976:	f811 2b01 	ldrb.w	r2, [r1], #1
 801297a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801297e:	e7f8      	b.n	8012972 <memmove+0x12>
 8012980:	4402      	add	r2, r0
 8012982:	4601      	mov	r1, r0
 8012984:	428a      	cmp	r2, r1
 8012986:	d100      	bne.n	801298a <memmove+0x2a>
 8012988:	bd10      	pop	{r4, pc}
 801298a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801298e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012992:	e7f7      	b.n	8012984 <memmove+0x24>

08012994 <memcpy>:
 8012994:	440a      	add	r2, r1
 8012996:	4291      	cmp	r1, r2
 8012998:	f100 33ff 	add.w	r3, r0, #4294967295
 801299c:	d100      	bne.n	80129a0 <memcpy+0xc>
 801299e:	4770      	bx	lr
 80129a0:	b510      	push	{r4, lr}
 80129a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129aa:	4291      	cmp	r1, r2
 80129ac:	d1f9      	bne.n	80129a2 <memcpy+0xe>
 80129ae:	bd10      	pop	{r4, pc}

080129b0 <__assert_func>:
 80129b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129b2:	4614      	mov	r4, r2
 80129b4:	461a      	mov	r2, r3
 80129b6:	4b09      	ldr	r3, [pc, #36]	@ (80129dc <__assert_func+0x2c>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4605      	mov	r5, r0
 80129bc:	68d8      	ldr	r0, [r3, #12]
 80129be:	b14c      	cbz	r4, 80129d4 <__assert_func+0x24>
 80129c0:	4b07      	ldr	r3, [pc, #28]	@ (80129e0 <__assert_func+0x30>)
 80129c2:	9100      	str	r1, [sp, #0]
 80129c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129c8:	4906      	ldr	r1, [pc, #24]	@ (80129e4 <__assert_func+0x34>)
 80129ca:	462b      	mov	r3, r5
 80129cc:	f000 f870 	bl	8012ab0 <fiprintf>
 80129d0:	f000 f880 	bl	8012ad4 <abort>
 80129d4:	4b04      	ldr	r3, [pc, #16]	@ (80129e8 <__assert_func+0x38>)
 80129d6:	461c      	mov	r4, r3
 80129d8:	e7f3      	b.n	80129c2 <__assert_func+0x12>
 80129da:	bf00      	nop
 80129dc:	20000118 	.word	0x20000118
 80129e0:	080143e1 	.word	0x080143e1
 80129e4:	080143ee 	.word	0x080143ee
 80129e8:	0801441c 	.word	0x0801441c

080129ec <_calloc_r>:
 80129ec:	b570      	push	{r4, r5, r6, lr}
 80129ee:	fba1 5402 	umull	r5, r4, r1, r2
 80129f2:	b934      	cbnz	r4, 8012a02 <_calloc_r+0x16>
 80129f4:	4629      	mov	r1, r5
 80129f6:	f7fd fcf7 	bl	80103e8 <_malloc_r>
 80129fa:	4606      	mov	r6, r0
 80129fc:	b928      	cbnz	r0, 8012a0a <_calloc_r+0x1e>
 80129fe:	4630      	mov	r0, r6
 8012a00:	bd70      	pop	{r4, r5, r6, pc}
 8012a02:	220c      	movs	r2, #12
 8012a04:	6002      	str	r2, [r0, #0]
 8012a06:	2600      	movs	r6, #0
 8012a08:	e7f9      	b.n	80129fe <_calloc_r+0x12>
 8012a0a:	462a      	mov	r2, r5
 8012a0c:	4621      	mov	r1, r4
 8012a0e:	f7fe faf4 	bl	8010ffa <memset>
 8012a12:	e7f4      	b.n	80129fe <_calloc_r+0x12>

08012a14 <__ascii_mbtowc>:
 8012a14:	b082      	sub	sp, #8
 8012a16:	b901      	cbnz	r1, 8012a1a <__ascii_mbtowc+0x6>
 8012a18:	a901      	add	r1, sp, #4
 8012a1a:	b142      	cbz	r2, 8012a2e <__ascii_mbtowc+0x1a>
 8012a1c:	b14b      	cbz	r3, 8012a32 <__ascii_mbtowc+0x1e>
 8012a1e:	7813      	ldrb	r3, [r2, #0]
 8012a20:	600b      	str	r3, [r1, #0]
 8012a22:	7812      	ldrb	r2, [r2, #0]
 8012a24:	1e10      	subs	r0, r2, #0
 8012a26:	bf18      	it	ne
 8012a28:	2001      	movne	r0, #1
 8012a2a:	b002      	add	sp, #8
 8012a2c:	4770      	bx	lr
 8012a2e:	4610      	mov	r0, r2
 8012a30:	e7fb      	b.n	8012a2a <__ascii_mbtowc+0x16>
 8012a32:	f06f 0001 	mvn.w	r0, #1
 8012a36:	e7f8      	b.n	8012a2a <__ascii_mbtowc+0x16>

08012a38 <_realloc_r>:
 8012a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	4614      	mov	r4, r2
 8012a40:	460d      	mov	r5, r1
 8012a42:	b921      	cbnz	r1, 8012a4e <_realloc_r+0x16>
 8012a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a48:	4611      	mov	r1, r2
 8012a4a:	f7fd bccd 	b.w	80103e8 <_malloc_r>
 8012a4e:	b92a      	cbnz	r2, 8012a5c <_realloc_r+0x24>
 8012a50:	f7ff f9be 	bl	8011dd0 <_free_r>
 8012a54:	4625      	mov	r5, r4
 8012a56:	4628      	mov	r0, r5
 8012a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a5c:	f000 f841 	bl	8012ae2 <_malloc_usable_size_r>
 8012a60:	4284      	cmp	r4, r0
 8012a62:	4606      	mov	r6, r0
 8012a64:	d802      	bhi.n	8012a6c <_realloc_r+0x34>
 8012a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a6a:	d8f4      	bhi.n	8012a56 <_realloc_r+0x1e>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4638      	mov	r0, r7
 8012a70:	f7fd fcba 	bl	80103e8 <_malloc_r>
 8012a74:	4680      	mov	r8, r0
 8012a76:	b908      	cbnz	r0, 8012a7c <_realloc_r+0x44>
 8012a78:	4645      	mov	r5, r8
 8012a7a:	e7ec      	b.n	8012a56 <_realloc_r+0x1e>
 8012a7c:	42b4      	cmp	r4, r6
 8012a7e:	4622      	mov	r2, r4
 8012a80:	4629      	mov	r1, r5
 8012a82:	bf28      	it	cs
 8012a84:	4632      	movcs	r2, r6
 8012a86:	f7ff ff85 	bl	8012994 <memcpy>
 8012a8a:	4629      	mov	r1, r5
 8012a8c:	4638      	mov	r0, r7
 8012a8e:	f7ff f99f 	bl	8011dd0 <_free_r>
 8012a92:	e7f1      	b.n	8012a78 <_realloc_r+0x40>

08012a94 <__ascii_wctomb>:
 8012a94:	4603      	mov	r3, r0
 8012a96:	4608      	mov	r0, r1
 8012a98:	b141      	cbz	r1, 8012aac <__ascii_wctomb+0x18>
 8012a9a:	2aff      	cmp	r2, #255	@ 0xff
 8012a9c:	d904      	bls.n	8012aa8 <__ascii_wctomb+0x14>
 8012a9e:	228a      	movs	r2, #138	@ 0x8a
 8012aa0:	601a      	str	r2, [r3, #0]
 8012aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa6:	4770      	bx	lr
 8012aa8:	700a      	strb	r2, [r1, #0]
 8012aaa:	2001      	movs	r0, #1
 8012aac:	4770      	bx	lr
	...

08012ab0 <fiprintf>:
 8012ab0:	b40e      	push	{r1, r2, r3}
 8012ab2:	b503      	push	{r0, r1, lr}
 8012ab4:	4601      	mov	r1, r0
 8012ab6:	ab03      	add	r3, sp, #12
 8012ab8:	4805      	ldr	r0, [pc, #20]	@ (8012ad0 <fiprintf+0x20>)
 8012aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8012abe:	6800      	ldr	r0, [r0, #0]
 8012ac0:	9301      	str	r3, [sp, #4]
 8012ac2:	f000 f83f 	bl	8012b44 <_vfiprintf_r>
 8012ac6:	b002      	add	sp, #8
 8012ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012acc:	b003      	add	sp, #12
 8012ace:	4770      	bx	lr
 8012ad0:	20000118 	.word	0x20000118

08012ad4 <abort>:
 8012ad4:	b508      	push	{r3, lr}
 8012ad6:	2006      	movs	r0, #6
 8012ad8:	f000 fa08 	bl	8012eec <raise>
 8012adc:	2001      	movs	r0, #1
 8012ade:	f7f1 fc1f 	bl	8004320 <_exit>

08012ae2 <_malloc_usable_size_r>:
 8012ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ae6:	1f18      	subs	r0, r3, #4
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	bfbc      	itt	lt
 8012aec:	580b      	ldrlt	r3, [r1, r0]
 8012aee:	18c0      	addlt	r0, r0, r3
 8012af0:	4770      	bx	lr

08012af2 <__sfputc_r>:
 8012af2:	6893      	ldr	r3, [r2, #8]
 8012af4:	3b01      	subs	r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	b410      	push	{r4}
 8012afa:	6093      	str	r3, [r2, #8]
 8012afc:	da08      	bge.n	8012b10 <__sfputc_r+0x1e>
 8012afe:	6994      	ldr	r4, [r2, #24]
 8012b00:	42a3      	cmp	r3, r4
 8012b02:	db01      	blt.n	8012b08 <__sfputc_r+0x16>
 8012b04:	290a      	cmp	r1, #10
 8012b06:	d103      	bne.n	8012b10 <__sfputc_r+0x1e>
 8012b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b0c:	f000 b932 	b.w	8012d74 <__swbuf_r>
 8012b10:	6813      	ldr	r3, [r2, #0]
 8012b12:	1c58      	adds	r0, r3, #1
 8012b14:	6010      	str	r0, [r2, #0]
 8012b16:	7019      	strb	r1, [r3, #0]
 8012b18:	4608      	mov	r0, r1
 8012b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <__sfputs_r>:
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	4606      	mov	r6, r0
 8012b24:	460f      	mov	r7, r1
 8012b26:	4614      	mov	r4, r2
 8012b28:	18d5      	adds	r5, r2, r3
 8012b2a:	42ac      	cmp	r4, r5
 8012b2c:	d101      	bne.n	8012b32 <__sfputs_r+0x12>
 8012b2e:	2000      	movs	r0, #0
 8012b30:	e007      	b.n	8012b42 <__sfputs_r+0x22>
 8012b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b36:	463a      	mov	r2, r7
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7ff ffda 	bl	8012af2 <__sfputc_r>
 8012b3e:	1c43      	adds	r3, r0, #1
 8012b40:	d1f3      	bne.n	8012b2a <__sfputs_r+0xa>
 8012b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b44 <_vfiprintf_r>:
 8012b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b48:	460d      	mov	r5, r1
 8012b4a:	b09d      	sub	sp, #116	@ 0x74
 8012b4c:	4614      	mov	r4, r2
 8012b4e:	4698      	mov	r8, r3
 8012b50:	4606      	mov	r6, r0
 8012b52:	b118      	cbz	r0, 8012b5c <_vfiprintf_r+0x18>
 8012b54:	6a03      	ldr	r3, [r0, #32]
 8012b56:	b90b      	cbnz	r3, 8012b5c <_vfiprintf_r+0x18>
 8012b58:	f7fe f9b4 	bl	8010ec4 <__sinit>
 8012b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b5e:	07d9      	lsls	r1, r3, #31
 8012b60:	d405      	bmi.n	8012b6e <_vfiprintf_r+0x2a>
 8012b62:	89ab      	ldrh	r3, [r5, #12]
 8012b64:	059a      	lsls	r2, r3, #22
 8012b66:	d402      	bmi.n	8012b6e <_vfiprintf_r+0x2a>
 8012b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b6a:	f7fe fad4 	bl	8011116 <__retarget_lock_acquire_recursive>
 8012b6e:	89ab      	ldrh	r3, [r5, #12]
 8012b70:	071b      	lsls	r3, r3, #28
 8012b72:	d501      	bpl.n	8012b78 <_vfiprintf_r+0x34>
 8012b74:	692b      	ldr	r3, [r5, #16]
 8012b76:	b99b      	cbnz	r3, 8012ba0 <_vfiprintf_r+0x5c>
 8012b78:	4629      	mov	r1, r5
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f000 f938 	bl	8012df0 <__swsetup_r>
 8012b80:	b170      	cbz	r0, 8012ba0 <_vfiprintf_r+0x5c>
 8012b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b84:	07dc      	lsls	r4, r3, #31
 8012b86:	d504      	bpl.n	8012b92 <_vfiprintf_r+0x4e>
 8012b88:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8c:	b01d      	add	sp, #116	@ 0x74
 8012b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b92:	89ab      	ldrh	r3, [r5, #12]
 8012b94:	0598      	lsls	r0, r3, #22
 8012b96:	d4f7      	bmi.n	8012b88 <_vfiprintf_r+0x44>
 8012b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b9a:	f7fe fabd 	bl	8011118 <__retarget_lock_release_recursive>
 8012b9e:	e7f3      	b.n	8012b88 <_vfiprintf_r+0x44>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ba4:	2320      	movs	r3, #32
 8012ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bae:	2330      	movs	r3, #48	@ 0x30
 8012bb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d60 <_vfiprintf_r+0x21c>
 8012bb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012bb8:	f04f 0901 	mov.w	r9, #1
 8012bbc:	4623      	mov	r3, r4
 8012bbe:	469a      	mov	sl, r3
 8012bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bc4:	b10a      	cbz	r2, 8012bca <_vfiprintf_r+0x86>
 8012bc6:	2a25      	cmp	r2, #37	@ 0x25
 8012bc8:	d1f9      	bne.n	8012bbe <_vfiprintf_r+0x7a>
 8012bca:	ebba 0b04 	subs.w	fp, sl, r4
 8012bce:	d00b      	beq.n	8012be8 <_vfiprintf_r+0xa4>
 8012bd0:	465b      	mov	r3, fp
 8012bd2:	4622      	mov	r2, r4
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f7ff ffa2 	bl	8012b20 <__sfputs_r>
 8012bdc:	3001      	adds	r0, #1
 8012bde:	f000 80a7 	beq.w	8012d30 <_vfiprintf_r+0x1ec>
 8012be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012be4:	445a      	add	r2, fp
 8012be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012be8:	f89a 3000 	ldrb.w	r3, [sl]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f000 809f 	beq.w	8012d30 <_vfiprintf_r+0x1ec>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bfc:	f10a 0a01 	add.w	sl, sl, #1
 8012c00:	9304      	str	r3, [sp, #16]
 8012c02:	9307      	str	r3, [sp, #28]
 8012c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c0a:	4654      	mov	r4, sl
 8012c0c:	2205      	movs	r2, #5
 8012c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c12:	4853      	ldr	r0, [pc, #332]	@ (8012d60 <_vfiprintf_r+0x21c>)
 8012c14:	f7ed fb04 	bl	8000220 <memchr>
 8012c18:	9a04      	ldr	r2, [sp, #16]
 8012c1a:	b9d8      	cbnz	r0, 8012c54 <_vfiprintf_r+0x110>
 8012c1c:	06d1      	lsls	r1, r2, #27
 8012c1e:	bf44      	itt	mi
 8012c20:	2320      	movmi	r3, #32
 8012c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c26:	0713      	lsls	r3, r2, #28
 8012c28:	bf44      	itt	mi
 8012c2a:	232b      	movmi	r3, #43	@ 0x2b
 8012c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c30:	f89a 3000 	ldrb.w	r3, [sl]
 8012c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c36:	d015      	beq.n	8012c64 <_vfiprintf_r+0x120>
 8012c38:	9a07      	ldr	r2, [sp, #28]
 8012c3a:	4654      	mov	r4, sl
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	f04f 0c0a 	mov.w	ip, #10
 8012c42:	4621      	mov	r1, r4
 8012c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c48:	3b30      	subs	r3, #48	@ 0x30
 8012c4a:	2b09      	cmp	r3, #9
 8012c4c:	d94b      	bls.n	8012ce6 <_vfiprintf_r+0x1a2>
 8012c4e:	b1b0      	cbz	r0, 8012c7e <_vfiprintf_r+0x13a>
 8012c50:	9207      	str	r2, [sp, #28]
 8012c52:	e014      	b.n	8012c7e <_vfiprintf_r+0x13a>
 8012c54:	eba0 0308 	sub.w	r3, r0, r8
 8012c58:	fa09 f303 	lsl.w	r3, r9, r3
 8012c5c:	4313      	orrs	r3, r2
 8012c5e:	9304      	str	r3, [sp, #16]
 8012c60:	46a2      	mov	sl, r4
 8012c62:	e7d2      	b.n	8012c0a <_vfiprintf_r+0xc6>
 8012c64:	9b03      	ldr	r3, [sp, #12]
 8012c66:	1d19      	adds	r1, r3, #4
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	9103      	str	r1, [sp, #12]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	bfbb      	ittet	lt
 8012c70:	425b      	neglt	r3, r3
 8012c72:	f042 0202 	orrlt.w	r2, r2, #2
 8012c76:	9307      	strge	r3, [sp, #28]
 8012c78:	9307      	strlt	r3, [sp, #28]
 8012c7a:	bfb8      	it	lt
 8012c7c:	9204      	strlt	r2, [sp, #16]
 8012c7e:	7823      	ldrb	r3, [r4, #0]
 8012c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c82:	d10a      	bne.n	8012c9a <_vfiprintf_r+0x156>
 8012c84:	7863      	ldrb	r3, [r4, #1]
 8012c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c88:	d132      	bne.n	8012cf0 <_vfiprintf_r+0x1ac>
 8012c8a:	9b03      	ldr	r3, [sp, #12]
 8012c8c:	1d1a      	adds	r2, r3, #4
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	9203      	str	r2, [sp, #12]
 8012c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c96:	3402      	adds	r4, #2
 8012c98:	9305      	str	r3, [sp, #20]
 8012c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d70 <_vfiprintf_r+0x22c>
 8012c9e:	7821      	ldrb	r1, [r4, #0]
 8012ca0:	2203      	movs	r2, #3
 8012ca2:	4650      	mov	r0, sl
 8012ca4:	f7ed fabc 	bl	8000220 <memchr>
 8012ca8:	b138      	cbz	r0, 8012cba <_vfiprintf_r+0x176>
 8012caa:	9b04      	ldr	r3, [sp, #16]
 8012cac:	eba0 000a 	sub.w	r0, r0, sl
 8012cb0:	2240      	movs	r2, #64	@ 0x40
 8012cb2:	4082      	lsls	r2, r0
 8012cb4:	4313      	orrs	r3, r2
 8012cb6:	3401      	adds	r4, #1
 8012cb8:	9304      	str	r3, [sp, #16]
 8012cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cbe:	4829      	ldr	r0, [pc, #164]	@ (8012d64 <_vfiprintf_r+0x220>)
 8012cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012cc4:	2206      	movs	r2, #6
 8012cc6:	f7ed faab 	bl	8000220 <memchr>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d03f      	beq.n	8012d4e <_vfiprintf_r+0x20a>
 8012cce:	4b26      	ldr	r3, [pc, #152]	@ (8012d68 <_vfiprintf_r+0x224>)
 8012cd0:	bb1b      	cbnz	r3, 8012d1a <_vfiprintf_r+0x1d6>
 8012cd2:	9b03      	ldr	r3, [sp, #12]
 8012cd4:	3307      	adds	r3, #7
 8012cd6:	f023 0307 	bic.w	r3, r3, #7
 8012cda:	3308      	adds	r3, #8
 8012cdc:	9303      	str	r3, [sp, #12]
 8012cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ce0:	443b      	add	r3, r7
 8012ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ce4:	e76a      	b.n	8012bbc <_vfiprintf_r+0x78>
 8012ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cea:	460c      	mov	r4, r1
 8012cec:	2001      	movs	r0, #1
 8012cee:	e7a8      	b.n	8012c42 <_vfiprintf_r+0xfe>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	3401      	adds	r4, #1
 8012cf4:	9305      	str	r3, [sp, #20]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	f04f 0c0a 	mov.w	ip, #10
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d02:	3a30      	subs	r2, #48	@ 0x30
 8012d04:	2a09      	cmp	r2, #9
 8012d06:	d903      	bls.n	8012d10 <_vfiprintf_r+0x1cc>
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d0c6      	beq.n	8012c9a <_vfiprintf_r+0x156>
 8012d0c:	9105      	str	r1, [sp, #20]
 8012d0e:	e7c4      	b.n	8012c9a <_vfiprintf_r+0x156>
 8012d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d14:	4604      	mov	r4, r0
 8012d16:	2301      	movs	r3, #1
 8012d18:	e7f0      	b.n	8012cfc <_vfiprintf_r+0x1b8>
 8012d1a:	ab03      	add	r3, sp, #12
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	462a      	mov	r2, r5
 8012d20:	4b12      	ldr	r3, [pc, #72]	@ (8012d6c <_vfiprintf_r+0x228>)
 8012d22:	a904      	add	r1, sp, #16
 8012d24:	4630      	mov	r0, r6
 8012d26:	f7fd fc8b 	bl	8010640 <_printf_float>
 8012d2a:	4607      	mov	r7, r0
 8012d2c:	1c78      	adds	r0, r7, #1
 8012d2e:	d1d6      	bne.n	8012cde <_vfiprintf_r+0x19a>
 8012d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d32:	07d9      	lsls	r1, r3, #31
 8012d34:	d405      	bmi.n	8012d42 <_vfiprintf_r+0x1fe>
 8012d36:	89ab      	ldrh	r3, [r5, #12]
 8012d38:	059a      	lsls	r2, r3, #22
 8012d3a:	d402      	bmi.n	8012d42 <_vfiprintf_r+0x1fe>
 8012d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d3e:	f7fe f9eb 	bl	8011118 <__retarget_lock_release_recursive>
 8012d42:	89ab      	ldrh	r3, [r5, #12]
 8012d44:	065b      	lsls	r3, r3, #25
 8012d46:	f53f af1f 	bmi.w	8012b88 <_vfiprintf_r+0x44>
 8012d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d4c:	e71e      	b.n	8012b8c <_vfiprintf_r+0x48>
 8012d4e:	ab03      	add	r3, sp, #12
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	462a      	mov	r2, r5
 8012d54:	4b05      	ldr	r3, [pc, #20]	@ (8012d6c <_vfiprintf_r+0x228>)
 8012d56:	a904      	add	r1, sp, #16
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7fd ff09 	bl	8010b70 <_printf_i>
 8012d5e:	e7e4      	b.n	8012d2a <_vfiprintf_r+0x1e6>
 8012d60:	080143c6 	.word	0x080143c6
 8012d64:	080143d0 	.word	0x080143d0
 8012d68:	08010641 	.word	0x08010641
 8012d6c:	08012b21 	.word	0x08012b21
 8012d70:	080143cc 	.word	0x080143cc

08012d74 <__swbuf_r>:
 8012d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d76:	460e      	mov	r6, r1
 8012d78:	4614      	mov	r4, r2
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	b118      	cbz	r0, 8012d86 <__swbuf_r+0x12>
 8012d7e:	6a03      	ldr	r3, [r0, #32]
 8012d80:	b90b      	cbnz	r3, 8012d86 <__swbuf_r+0x12>
 8012d82:	f7fe f89f 	bl	8010ec4 <__sinit>
 8012d86:	69a3      	ldr	r3, [r4, #24]
 8012d88:	60a3      	str	r3, [r4, #8]
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	071a      	lsls	r2, r3, #28
 8012d8e:	d501      	bpl.n	8012d94 <__swbuf_r+0x20>
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	b943      	cbnz	r3, 8012da6 <__swbuf_r+0x32>
 8012d94:	4621      	mov	r1, r4
 8012d96:	4628      	mov	r0, r5
 8012d98:	f000 f82a 	bl	8012df0 <__swsetup_r>
 8012d9c:	b118      	cbz	r0, 8012da6 <__swbuf_r+0x32>
 8012d9e:	f04f 37ff 	mov.w	r7, #4294967295
 8012da2:	4638      	mov	r0, r7
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da6:	6823      	ldr	r3, [r4, #0]
 8012da8:	6922      	ldr	r2, [r4, #16]
 8012daa:	1a98      	subs	r0, r3, r2
 8012dac:	6963      	ldr	r3, [r4, #20]
 8012dae:	b2f6      	uxtb	r6, r6
 8012db0:	4283      	cmp	r3, r0
 8012db2:	4637      	mov	r7, r6
 8012db4:	dc05      	bgt.n	8012dc2 <__swbuf_r+0x4e>
 8012db6:	4621      	mov	r1, r4
 8012db8:	4628      	mov	r0, r5
 8012dba:	f7ff fda9 	bl	8012910 <_fflush_r>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d1ed      	bne.n	8012d9e <__swbuf_r+0x2a>
 8012dc2:	68a3      	ldr	r3, [r4, #8]
 8012dc4:	3b01      	subs	r3, #1
 8012dc6:	60a3      	str	r3, [r4, #8]
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	1c5a      	adds	r2, r3, #1
 8012dcc:	6022      	str	r2, [r4, #0]
 8012dce:	701e      	strb	r6, [r3, #0]
 8012dd0:	6962      	ldr	r2, [r4, #20]
 8012dd2:	1c43      	adds	r3, r0, #1
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d004      	beq.n	8012de2 <__swbuf_r+0x6e>
 8012dd8:	89a3      	ldrh	r3, [r4, #12]
 8012dda:	07db      	lsls	r3, r3, #31
 8012ddc:	d5e1      	bpl.n	8012da2 <__swbuf_r+0x2e>
 8012dde:	2e0a      	cmp	r6, #10
 8012de0:	d1df      	bne.n	8012da2 <__swbuf_r+0x2e>
 8012de2:	4621      	mov	r1, r4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7ff fd93 	bl	8012910 <_fflush_r>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d0d9      	beq.n	8012da2 <__swbuf_r+0x2e>
 8012dee:	e7d6      	b.n	8012d9e <__swbuf_r+0x2a>

08012df0 <__swsetup_r>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4b29      	ldr	r3, [pc, #164]	@ (8012e98 <__swsetup_r+0xa8>)
 8012df4:	4605      	mov	r5, r0
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	460c      	mov	r4, r1
 8012dfa:	b118      	cbz	r0, 8012e04 <__swsetup_r+0x14>
 8012dfc:	6a03      	ldr	r3, [r0, #32]
 8012dfe:	b90b      	cbnz	r3, 8012e04 <__swsetup_r+0x14>
 8012e00:	f7fe f860 	bl	8010ec4 <__sinit>
 8012e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e08:	0719      	lsls	r1, r3, #28
 8012e0a:	d422      	bmi.n	8012e52 <__swsetup_r+0x62>
 8012e0c:	06da      	lsls	r2, r3, #27
 8012e0e:	d407      	bmi.n	8012e20 <__swsetup_r+0x30>
 8012e10:	2209      	movs	r2, #9
 8012e12:	602a      	str	r2, [r5, #0]
 8012e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e18:	81a3      	strh	r3, [r4, #12]
 8012e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e1e:	e033      	b.n	8012e88 <__swsetup_r+0x98>
 8012e20:	0758      	lsls	r0, r3, #29
 8012e22:	d512      	bpl.n	8012e4a <__swsetup_r+0x5a>
 8012e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e26:	b141      	cbz	r1, 8012e3a <__swsetup_r+0x4a>
 8012e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d002      	beq.n	8012e36 <__swsetup_r+0x46>
 8012e30:	4628      	mov	r0, r5
 8012e32:	f7fe ffcd 	bl	8011dd0 <_free_r>
 8012e36:	2300      	movs	r3, #0
 8012e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e3a:	89a3      	ldrh	r3, [r4, #12]
 8012e3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012e40:	81a3      	strh	r3, [r4, #12]
 8012e42:	2300      	movs	r3, #0
 8012e44:	6063      	str	r3, [r4, #4]
 8012e46:	6923      	ldr	r3, [r4, #16]
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	89a3      	ldrh	r3, [r4, #12]
 8012e4c:	f043 0308 	orr.w	r3, r3, #8
 8012e50:	81a3      	strh	r3, [r4, #12]
 8012e52:	6923      	ldr	r3, [r4, #16]
 8012e54:	b94b      	cbnz	r3, 8012e6a <__swsetup_r+0x7a>
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e60:	d003      	beq.n	8012e6a <__swsetup_r+0x7a>
 8012e62:	4621      	mov	r1, r4
 8012e64:	4628      	mov	r0, r5
 8012e66:	f000 f883 	bl	8012f70 <__smakebuf_r>
 8012e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e6e:	f013 0201 	ands.w	r2, r3, #1
 8012e72:	d00a      	beq.n	8012e8a <__swsetup_r+0x9a>
 8012e74:	2200      	movs	r2, #0
 8012e76:	60a2      	str	r2, [r4, #8]
 8012e78:	6962      	ldr	r2, [r4, #20]
 8012e7a:	4252      	negs	r2, r2
 8012e7c:	61a2      	str	r2, [r4, #24]
 8012e7e:	6922      	ldr	r2, [r4, #16]
 8012e80:	b942      	cbnz	r2, 8012e94 <__swsetup_r+0xa4>
 8012e82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012e86:	d1c5      	bne.n	8012e14 <__swsetup_r+0x24>
 8012e88:	bd38      	pop	{r3, r4, r5, pc}
 8012e8a:	0799      	lsls	r1, r3, #30
 8012e8c:	bf58      	it	pl
 8012e8e:	6962      	ldrpl	r2, [r4, #20]
 8012e90:	60a2      	str	r2, [r4, #8]
 8012e92:	e7f4      	b.n	8012e7e <__swsetup_r+0x8e>
 8012e94:	2000      	movs	r0, #0
 8012e96:	e7f7      	b.n	8012e88 <__swsetup_r+0x98>
 8012e98:	20000118 	.word	0x20000118

08012e9c <_raise_r>:
 8012e9c:	291f      	cmp	r1, #31
 8012e9e:	b538      	push	{r3, r4, r5, lr}
 8012ea0:	4605      	mov	r5, r0
 8012ea2:	460c      	mov	r4, r1
 8012ea4:	d904      	bls.n	8012eb0 <_raise_r+0x14>
 8012ea6:	2316      	movs	r3, #22
 8012ea8:	6003      	str	r3, [r0, #0]
 8012eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8012eae:	bd38      	pop	{r3, r4, r5, pc}
 8012eb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012eb2:	b112      	cbz	r2, 8012eba <_raise_r+0x1e>
 8012eb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012eb8:	b94b      	cbnz	r3, 8012ece <_raise_r+0x32>
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f000 f830 	bl	8012f20 <_getpid_r>
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4601      	mov	r1, r0
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eca:	f000 b817 	b.w	8012efc <_kill_r>
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d00a      	beq.n	8012ee8 <_raise_r+0x4c>
 8012ed2:	1c59      	adds	r1, r3, #1
 8012ed4:	d103      	bne.n	8012ede <_raise_r+0x42>
 8012ed6:	2316      	movs	r3, #22
 8012ed8:	6003      	str	r3, [r0, #0]
 8012eda:	2001      	movs	r0, #1
 8012edc:	e7e7      	b.n	8012eae <_raise_r+0x12>
 8012ede:	2100      	movs	r1, #0
 8012ee0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	4798      	blx	r3
 8012ee8:	2000      	movs	r0, #0
 8012eea:	e7e0      	b.n	8012eae <_raise_r+0x12>

08012eec <raise>:
 8012eec:	4b02      	ldr	r3, [pc, #8]	@ (8012ef8 <raise+0xc>)
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f7ff bfd3 	b.w	8012e9c <_raise_r>
 8012ef6:	bf00      	nop
 8012ef8:	20000118 	.word	0x20000118

08012efc <_kill_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4d07      	ldr	r5, [pc, #28]	@ (8012f1c <_kill_r+0x20>)
 8012f00:	2300      	movs	r3, #0
 8012f02:	4604      	mov	r4, r0
 8012f04:	4608      	mov	r0, r1
 8012f06:	4611      	mov	r1, r2
 8012f08:	602b      	str	r3, [r5, #0]
 8012f0a:	f7f1 f9f9 	bl	8004300 <_kill>
 8012f0e:	1c43      	adds	r3, r0, #1
 8012f10:	d102      	bne.n	8012f18 <_kill_r+0x1c>
 8012f12:	682b      	ldr	r3, [r5, #0]
 8012f14:	b103      	cbz	r3, 8012f18 <_kill_r+0x1c>
 8012f16:	6023      	str	r3, [r4, #0]
 8012f18:	bd38      	pop	{r3, r4, r5, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20002400 	.word	0x20002400

08012f20 <_getpid_r>:
 8012f20:	f7f1 b9e6 	b.w	80042f0 <_getpid>

08012f24 <__swhatbuf_r>:
 8012f24:	b570      	push	{r4, r5, r6, lr}
 8012f26:	460c      	mov	r4, r1
 8012f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f2c:	2900      	cmp	r1, #0
 8012f2e:	b096      	sub	sp, #88	@ 0x58
 8012f30:	4615      	mov	r5, r2
 8012f32:	461e      	mov	r6, r3
 8012f34:	da0d      	bge.n	8012f52 <__swhatbuf_r+0x2e>
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f3c:	f04f 0100 	mov.w	r1, #0
 8012f40:	bf14      	ite	ne
 8012f42:	2340      	movne	r3, #64	@ 0x40
 8012f44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012f48:	2000      	movs	r0, #0
 8012f4a:	6031      	str	r1, [r6, #0]
 8012f4c:	602b      	str	r3, [r5, #0]
 8012f4e:	b016      	add	sp, #88	@ 0x58
 8012f50:	bd70      	pop	{r4, r5, r6, pc}
 8012f52:	466a      	mov	r2, sp
 8012f54:	f000 f848 	bl	8012fe8 <_fstat_r>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	dbec      	blt.n	8012f36 <__swhatbuf_r+0x12>
 8012f5c:	9901      	ldr	r1, [sp, #4]
 8012f5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012f62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012f66:	4259      	negs	r1, r3
 8012f68:	4159      	adcs	r1, r3
 8012f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f6e:	e7eb      	b.n	8012f48 <__swhatbuf_r+0x24>

08012f70 <__smakebuf_r>:
 8012f70:	898b      	ldrh	r3, [r1, #12]
 8012f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f74:	079d      	lsls	r5, r3, #30
 8012f76:	4606      	mov	r6, r0
 8012f78:	460c      	mov	r4, r1
 8012f7a:	d507      	bpl.n	8012f8c <__smakebuf_r+0x1c>
 8012f7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	6123      	str	r3, [r4, #16]
 8012f84:	2301      	movs	r3, #1
 8012f86:	6163      	str	r3, [r4, #20]
 8012f88:	b003      	add	sp, #12
 8012f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f8c:	ab01      	add	r3, sp, #4
 8012f8e:	466a      	mov	r2, sp
 8012f90:	f7ff ffc8 	bl	8012f24 <__swhatbuf_r>
 8012f94:	9f00      	ldr	r7, [sp, #0]
 8012f96:	4605      	mov	r5, r0
 8012f98:	4639      	mov	r1, r7
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	f7fd fa24 	bl	80103e8 <_malloc_r>
 8012fa0:	b948      	cbnz	r0, 8012fb6 <__smakebuf_r+0x46>
 8012fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fa6:	059a      	lsls	r2, r3, #22
 8012fa8:	d4ee      	bmi.n	8012f88 <__smakebuf_r+0x18>
 8012faa:	f023 0303 	bic.w	r3, r3, #3
 8012fae:	f043 0302 	orr.w	r3, r3, #2
 8012fb2:	81a3      	strh	r3, [r4, #12]
 8012fb4:	e7e2      	b.n	8012f7c <__smakebuf_r+0xc>
 8012fb6:	89a3      	ldrh	r3, [r4, #12]
 8012fb8:	6020      	str	r0, [r4, #0]
 8012fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fbe:	81a3      	strh	r3, [r4, #12]
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012fc6:	b15b      	cbz	r3, 8012fe0 <__smakebuf_r+0x70>
 8012fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f000 f81d 	bl	801300c <_isatty_r>
 8012fd2:	b128      	cbz	r0, 8012fe0 <__smakebuf_r+0x70>
 8012fd4:	89a3      	ldrh	r3, [r4, #12]
 8012fd6:	f023 0303 	bic.w	r3, r3, #3
 8012fda:	f043 0301 	orr.w	r3, r3, #1
 8012fde:	81a3      	strh	r3, [r4, #12]
 8012fe0:	89a3      	ldrh	r3, [r4, #12]
 8012fe2:	431d      	orrs	r5, r3
 8012fe4:	81a5      	strh	r5, [r4, #12]
 8012fe6:	e7cf      	b.n	8012f88 <__smakebuf_r+0x18>

08012fe8 <_fstat_r>:
 8012fe8:	b538      	push	{r3, r4, r5, lr}
 8012fea:	4d07      	ldr	r5, [pc, #28]	@ (8013008 <_fstat_r+0x20>)
 8012fec:	2300      	movs	r3, #0
 8012fee:	4604      	mov	r4, r0
 8012ff0:	4608      	mov	r0, r1
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	602b      	str	r3, [r5, #0]
 8012ff6:	f7f1 f9e3 	bl	80043c0 <_fstat>
 8012ffa:	1c43      	adds	r3, r0, #1
 8012ffc:	d102      	bne.n	8013004 <_fstat_r+0x1c>
 8012ffe:	682b      	ldr	r3, [r5, #0]
 8013000:	b103      	cbz	r3, 8013004 <_fstat_r+0x1c>
 8013002:	6023      	str	r3, [r4, #0]
 8013004:	bd38      	pop	{r3, r4, r5, pc}
 8013006:	bf00      	nop
 8013008:	20002400 	.word	0x20002400

0801300c <_isatty_r>:
 801300c:	b538      	push	{r3, r4, r5, lr}
 801300e:	4d06      	ldr	r5, [pc, #24]	@ (8013028 <_isatty_r+0x1c>)
 8013010:	2300      	movs	r3, #0
 8013012:	4604      	mov	r4, r0
 8013014:	4608      	mov	r0, r1
 8013016:	602b      	str	r3, [r5, #0]
 8013018:	f7f1 f9e2 	bl	80043e0 <_isatty>
 801301c:	1c43      	adds	r3, r0, #1
 801301e:	d102      	bne.n	8013026 <_isatty_r+0x1a>
 8013020:	682b      	ldr	r3, [r5, #0]
 8013022:	b103      	cbz	r3, 8013026 <_isatty_r+0x1a>
 8013024:	6023      	str	r3, [r4, #0]
 8013026:	bd38      	pop	{r3, r4, r5, pc}
 8013028:	20002400 	.word	0x20002400

0801302c <sqrt>:
 801302c:	b538      	push	{r3, r4, r5, lr}
 801302e:	ed2d 8b02 	vpush	{d8}
 8013032:	ec55 4b10 	vmov	r4, r5, d0
 8013036:	f000 f8e5 	bl	8013204 <__ieee754_sqrt>
 801303a:	4622      	mov	r2, r4
 801303c:	462b      	mov	r3, r5
 801303e:	4620      	mov	r0, r4
 8013040:	4629      	mov	r1, r5
 8013042:	eeb0 8a40 	vmov.f32	s16, s0
 8013046:	eef0 8a60 	vmov.f32	s17, s1
 801304a:	f7ed fd97 	bl	8000b7c <__aeabi_dcmpun>
 801304e:	b990      	cbnz	r0, 8013076 <sqrt+0x4a>
 8013050:	2200      	movs	r2, #0
 8013052:	2300      	movs	r3, #0
 8013054:	4620      	mov	r0, r4
 8013056:	4629      	mov	r1, r5
 8013058:	f7ed fd68 	bl	8000b2c <__aeabi_dcmplt>
 801305c:	b158      	cbz	r0, 8013076 <sqrt+0x4a>
 801305e:	f7fe f82f 	bl	80110c0 <__errno>
 8013062:	2321      	movs	r3, #33	@ 0x21
 8013064:	6003      	str	r3, [r0, #0]
 8013066:	2200      	movs	r2, #0
 8013068:	2300      	movs	r3, #0
 801306a:	4610      	mov	r0, r2
 801306c:	4619      	mov	r1, r3
 801306e:	f7ed fc15 	bl	800089c <__aeabi_ddiv>
 8013072:	ec41 0b18 	vmov	d8, r0, r1
 8013076:	eeb0 0a48 	vmov.f32	s0, s16
 801307a:	eef0 0a68 	vmov.f32	s1, s17
 801307e:	ecbd 8b02 	vpop	{d8}
 8013082:	bd38      	pop	{r3, r4, r5, pc}

08013084 <atan2f>:
 8013084:	f000 bb14 	b.w	80136b0 <__ieee754_atan2f>

08013088 <cosf>:
 8013088:	ee10 3a10 	vmov	r3, s0
 801308c:	b507      	push	{r0, r1, r2, lr}
 801308e:	4a1e      	ldr	r2, [pc, #120]	@ (8013108 <cosf+0x80>)
 8013090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013094:	4293      	cmp	r3, r2
 8013096:	d806      	bhi.n	80130a6 <cosf+0x1e>
 8013098:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801310c <cosf+0x84>
 801309c:	b003      	add	sp, #12
 801309e:	f85d eb04 	ldr.w	lr, [sp], #4
 80130a2:	f000 b985 	b.w	80133b0 <__kernel_cosf>
 80130a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80130aa:	d304      	bcc.n	80130b6 <cosf+0x2e>
 80130ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 80130b0:	b003      	add	sp, #12
 80130b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80130b6:	4668      	mov	r0, sp
 80130b8:	f000 fb9a 	bl	80137f0 <__ieee754_rem_pio2f>
 80130bc:	f000 0003 	and.w	r0, r0, #3
 80130c0:	2801      	cmp	r0, #1
 80130c2:	d009      	beq.n	80130d8 <cosf+0x50>
 80130c4:	2802      	cmp	r0, #2
 80130c6:	d010      	beq.n	80130ea <cosf+0x62>
 80130c8:	b9b0      	cbnz	r0, 80130f8 <cosf+0x70>
 80130ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80130ce:	ed9d 0a00 	vldr	s0, [sp]
 80130d2:	f000 f96d 	bl	80133b0 <__kernel_cosf>
 80130d6:	e7eb      	b.n	80130b0 <cosf+0x28>
 80130d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80130dc:	ed9d 0a00 	vldr	s0, [sp]
 80130e0:	f000 f9be 	bl	8013460 <__kernel_sinf>
 80130e4:	eeb1 0a40 	vneg.f32	s0, s0
 80130e8:	e7e2      	b.n	80130b0 <cosf+0x28>
 80130ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80130ee:	ed9d 0a00 	vldr	s0, [sp]
 80130f2:	f000 f95d 	bl	80133b0 <__kernel_cosf>
 80130f6:	e7f5      	b.n	80130e4 <cosf+0x5c>
 80130f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80130fc:	ed9d 0a00 	vldr	s0, [sp]
 8013100:	2001      	movs	r0, #1
 8013102:	f000 f9ad 	bl	8013460 <__kernel_sinf>
 8013106:	e7d3      	b.n	80130b0 <cosf+0x28>
 8013108:	3f490fd8 	.word	0x3f490fd8
 801310c:	00000000 	.word	0x00000000

08013110 <fabsf>:
 8013110:	ee10 3a10 	vmov	r3, s0
 8013114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013118:	ee00 3a10 	vmov	s0, r3
 801311c:	4770      	bx	lr
	...

08013120 <sinf>:
 8013120:	ee10 3a10 	vmov	r3, s0
 8013124:	b507      	push	{r0, r1, r2, lr}
 8013126:	4a1f      	ldr	r2, [pc, #124]	@ (80131a4 <sinf+0x84>)
 8013128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801312c:	4293      	cmp	r3, r2
 801312e:	d807      	bhi.n	8013140 <sinf+0x20>
 8013130:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80131a8 <sinf+0x88>
 8013134:	2000      	movs	r0, #0
 8013136:	b003      	add	sp, #12
 8013138:	f85d eb04 	ldr.w	lr, [sp], #4
 801313c:	f000 b990 	b.w	8013460 <__kernel_sinf>
 8013140:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013144:	d304      	bcc.n	8013150 <sinf+0x30>
 8013146:	ee30 0a40 	vsub.f32	s0, s0, s0
 801314a:	b003      	add	sp, #12
 801314c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013150:	4668      	mov	r0, sp
 8013152:	f000 fb4d 	bl	80137f0 <__ieee754_rem_pio2f>
 8013156:	f000 0003 	and.w	r0, r0, #3
 801315a:	2801      	cmp	r0, #1
 801315c:	d00a      	beq.n	8013174 <sinf+0x54>
 801315e:	2802      	cmp	r0, #2
 8013160:	d00f      	beq.n	8013182 <sinf+0x62>
 8013162:	b9c0      	cbnz	r0, 8013196 <sinf+0x76>
 8013164:	eddd 0a01 	vldr	s1, [sp, #4]
 8013168:	ed9d 0a00 	vldr	s0, [sp]
 801316c:	2001      	movs	r0, #1
 801316e:	f000 f977 	bl	8013460 <__kernel_sinf>
 8013172:	e7ea      	b.n	801314a <sinf+0x2a>
 8013174:	eddd 0a01 	vldr	s1, [sp, #4]
 8013178:	ed9d 0a00 	vldr	s0, [sp]
 801317c:	f000 f918 	bl	80133b0 <__kernel_cosf>
 8013180:	e7e3      	b.n	801314a <sinf+0x2a>
 8013182:	eddd 0a01 	vldr	s1, [sp, #4]
 8013186:	ed9d 0a00 	vldr	s0, [sp]
 801318a:	2001      	movs	r0, #1
 801318c:	f000 f968 	bl	8013460 <__kernel_sinf>
 8013190:	eeb1 0a40 	vneg.f32	s0, s0
 8013194:	e7d9      	b.n	801314a <sinf+0x2a>
 8013196:	eddd 0a01 	vldr	s1, [sp, #4]
 801319a:	ed9d 0a00 	vldr	s0, [sp]
 801319e:	f000 f907 	bl	80133b0 <__kernel_cosf>
 80131a2:	e7f5      	b.n	8013190 <sinf+0x70>
 80131a4:	3f490fd8 	.word	0x3f490fd8
 80131a8:	00000000 	.word	0x00000000

080131ac <tanf>:
 80131ac:	ee10 3a10 	vmov	r3, s0
 80131b0:	b507      	push	{r0, r1, r2, lr}
 80131b2:	4a12      	ldr	r2, [pc, #72]	@ (80131fc <tanf+0x50>)
 80131b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d807      	bhi.n	80131cc <tanf+0x20>
 80131bc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8013200 <tanf+0x54>
 80131c0:	2001      	movs	r0, #1
 80131c2:	b003      	add	sp, #12
 80131c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80131c8:	f000 b992 	b.w	80134f0 <__kernel_tanf>
 80131cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80131d0:	d304      	bcc.n	80131dc <tanf+0x30>
 80131d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80131d6:	b003      	add	sp, #12
 80131d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80131dc:	4668      	mov	r0, sp
 80131de:	f000 fb07 	bl	80137f0 <__ieee754_rem_pio2f>
 80131e2:	0040      	lsls	r0, r0, #1
 80131e4:	f000 0002 	and.w	r0, r0, #2
 80131e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80131ec:	ed9d 0a00 	vldr	s0, [sp]
 80131f0:	f1c0 0001 	rsb	r0, r0, #1
 80131f4:	f000 f97c 	bl	80134f0 <__kernel_tanf>
 80131f8:	e7ed      	b.n	80131d6 <tanf+0x2a>
 80131fa:	bf00      	nop
 80131fc:	3f490fda 	.word	0x3f490fda
 8013200:	00000000 	.word	0x00000000

08013204 <__ieee754_sqrt>:
 8013204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013208:	4a66      	ldr	r2, [pc, #408]	@ (80133a4 <__ieee754_sqrt+0x1a0>)
 801320a:	ec55 4b10 	vmov	r4, r5, d0
 801320e:	43aa      	bics	r2, r5
 8013210:	462b      	mov	r3, r5
 8013212:	4621      	mov	r1, r4
 8013214:	d110      	bne.n	8013238 <__ieee754_sqrt+0x34>
 8013216:	4622      	mov	r2, r4
 8013218:	4620      	mov	r0, r4
 801321a:	4629      	mov	r1, r5
 801321c:	f7ed fa14 	bl	8000648 <__aeabi_dmul>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4620      	mov	r0, r4
 8013226:	4629      	mov	r1, r5
 8013228:	f7ed f858 	bl	80002dc <__adddf3>
 801322c:	4604      	mov	r4, r0
 801322e:	460d      	mov	r5, r1
 8013230:	ec45 4b10 	vmov	d0, r4, r5
 8013234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013238:	2d00      	cmp	r5, #0
 801323a:	dc0e      	bgt.n	801325a <__ieee754_sqrt+0x56>
 801323c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013240:	4322      	orrs	r2, r4
 8013242:	d0f5      	beq.n	8013230 <__ieee754_sqrt+0x2c>
 8013244:	b19d      	cbz	r5, 801326e <__ieee754_sqrt+0x6a>
 8013246:	4622      	mov	r2, r4
 8013248:	4620      	mov	r0, r4
 801324a:	4629      	mov	r1, r5
 801324c:	f7ed f844 	bl	80002d8 <__aeabi_dsub>
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	f7ed fb22 	bl	800089c <__aeabi_ddiv>
 8013258:	e7e8      	b.n	801322c <__ieee754_sqrt+0x28>
 801325a:	152a      	asrs	r2, r5, #20
 801325c:	d115      	bne.n	801328a <__ieee754_sqrt+0x86>
 801325e:	2000      	movs	r0, #0
 8013260:	e009      	b.n	8013276 <__ieee754_sqrt+0x72>
 8013262:	0acb      	lsrs	r3, r1, #11
 8013264:	3a15      	subs	r2, #21
 8013266:	0549      	lsls	r1, r1, #21
 8013268:	2b00      	cmp	r3, #0
 801326a:	d0fa      	beq.n	8013262 <__ieee754_sqrt+0x5e>
 801326c:	e7f7      	b.n	801325e <__ieee754_sqrt+0x5a>
 801326e:	462a      	mov	r2, r5
 8013270:	e7fa      	b.n	8013268 <__ieee754_sqrt+0x64>
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	3001      	adds	r0, #1
 8013276:	02dc      	lsls	r4, r3, #11
 8013278:	d5fb      	bpl.n	8013272 <__ieee754_sqrt+0x6e>
 801327a:	1e44      	subs	r4, r0, #1
 801327c:	1b12      	subs	r2, r2, r4
 801327e:	f1c0 0420 	rsb	r4, r0, #32
 8013282:	fa21 f404 	lsr.w	r4, r1, r4
 8013286:	4323      	orrs	r3, r4
 8013288:	4081      	lsls	r1, r0
 801328a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801328e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013296:	07d2      	lsls	r2, r2, #31
 8013298:	bf5c      	itt	pl
 801329a:	005b      	lslpl	r3, r3, #1
 801329c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80132a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80132a4:	bf58      	it	pl
 80132a6:	0049      	lslpl	r1, r1, #1
 80132a8:	2600      	movs	r6, #0
 80132aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80132ae:	107f      	asrs	r7, r7, #1
 80132b0:	0049      	lsls	r1, r1, #1
 80132b2:	2016      	movs	r0, #22
 80132b4:	4632      	mov	r2, r6
 80132b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80132ba:	1915      	adds	r5, r2, r4
 80132bc:	429d      	cmp	r5, r3
 80132be:	bfde      	ittt	le
 80132c0:	192a      	addle	r2, r5, r4
 80132c2:	1b5b      	suble	r3, r3, r5
 80132c4:	1936      	addle	r6, r6, r4
 80132c6:	0fcd      	lsrs	r5, r1, #31
 80132c8:	3801      	subs	r0, #1
 80132ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80132ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80132d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80132d6:	d1f0      	bne.n	80132ba <__ieee754_sqrt+0xb6>
 80132d8:	4605      	mov	r5, r0
 80132da:	2420      	movs	r4, #32
 80132dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80132e0:	4293      	cmp	r3, r2
 80132e2:	eb0c 0e00 	add.w	lr, ip, r0
 80132e6:	dc02      	bgt.n	80132ee <__ieee754_sqrt+0xea>
 80132e8:	d113      	bne.n	8013312 <__ieee754_sqrt+0x10e>
 80132ea:	458e      	cmp	lr, r1
 80132ec:	d811      	bhi.n	8013312 <__ieee754_sqrt+0x10e>
 80132ee:	f1be 0f00 	cmp.w	lr, #0
 80132f2:	eb0e 000c 	add.w	r0, lr, ip
 80132f6:	da3f      	bge.n	8013378 <__ieee754_sqrt+0x174>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	db3d      	blt.n	8013378 <__ieee754_sqrt+0x174>
 80132fc:	f102 0801 	add.w	r8, r2, #1
 8013300:	1a9b      	subs	r3, r3, r2
 8013302:	458e      	cmp	lr, r1
 8013304:	bf88      	it	hi
 8013306:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801330a:	eba1 010e 	sub.w	r1, r1, lr
 801330e:	4465      	add	r5, ip
 8013310:	4642      	mov	r2, r8
 8013312:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013316:	3c01      	subs	r4, #1
 8013318:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801331c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013320:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013324:	d1dc      	bne.n	80132e0 <__ieee754_sqrt+0xdc>
 8013326:	4319      	orrs	r1, r3
 8013328:	d01b      	beq.n	8013362 <__ieee754_sqrt+0x15e>
 801332a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80133a8 <__ieee754_sqrt+0x1a4>
 801332e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80133ac <__ieee754_sqrt+0x1a8>
 8013332:	e9da 0100 	ldrd	r0, r1, [sl]
 8013336:	e9db 2300 	ldrd	r2, r3, [fp]
 801333a:	f7ec ffcd 	bl	80002d8 <__aeabi_dsub>
 801333e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013342:	4602      	mov	r2, r0
 8013344:	460b      	mov	r3, r1
 8013346:	4640      	mov	r0, r8
 8013348:	4649      	mov	r1, r9
 801334a:	f7ed fbf9 	bl	8000b40 <__aeabi_dcmple>
 801334e:	b140      	cbz	r0, 8013362 <__ieee754_sqrt+0x15e>
 8013350:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013354:	e9da 0100 	ldrd	r0, r1, [sl]
 8013358:	e9db 2300 	ldrd	r2, r3, [fp]
 801335c:	d10e      	bne.n	801337c <__ieee754_sqrt+0x178>
 801335e:	3601      	adds	r6, #1
 8013360:	4625      	mov	r5, r4
 8013362:	1073      	asrs	r3, r6, #1
 8013364:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8013368:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801336c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8013370:	086b      	lsrs	r3, r5, #1
 8013372:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8013376:	e759      	b.n	801322c <__ieee754_sqrt+0x28>
 8013378:	4690      	mov	r8, r2
 801337a:	e7c1      	b.n	8013300 <__ieee754_sqrt+0xfc>
 801337c:	f7ec ffae 	bl	80002dc <__adddf3>
 8013380:	e9da 8900 	ldrd	r8, r9, [sl]
 8013384:	4602      	mov	r2, r0
 8013386:	460b      	mov	r3, r1
 8013388:	4640      	mov	r0, r8
 801338a:	4649      	mov	r1, r9
 801338c:	f7ed fbce 	bl	8000b2c <__aeabi_dcmplt>
 8013390:	b120      	cbz	r0, 801339c <__ieee754_sqrt+0x198>
 8013392:	1cab      	adds	r3, r5, #2
 8013394:	bf08      	it	eq
 8013396:	3601      	addeq	r6, #1
 8013398:	3502      	adds	r5, #2
 801339a:	e7e2      	b.n	8013362 <__ieee754_sqrt+0x15e>
 801339c:	1c6b      	adds	r3, r5, #1
 801339e:	f023 0501 	bic.w	r5, r3, #1
 80133a2:	e7de      	b.n	8013362 <__ieee754_sqrt+0x15e>
 80133a4:	7ff00000 	.word	0x7ff00000
 80133a8:	08014630 	.word	0x08014630
 80133ac:	08014628 	.word	0x08014628

080133b0 <__kernel_cosf>:
 80133b0:	ee10 3a10 	vmov	r3, s0
 80133b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80133b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80133bc:	eef0 6a40 	vmov.f32	s13, s0
 80133c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80133c4:	d204      	bcs.n	80133d0 <__kernel_cosf+0x20>
 80133c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80133ca:	ee17 2a90 	vmov	r2, s15
 80133ce:	b342      	cbz	r2, 8013422 <__kernel_cosf+0x72>
 80133d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80133d4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013440 <__kernel_cosf+0x90>
 80133d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013444 <__kernel_cosf+0x94>
 80133dc:	4a1a      	ldr	r2, [pc, #104]	@ (8013448 <__kernel_cosf+0x98>)
 80133de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80133e2:	4293      	cmp	r3, r2
 80133e4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801344c <__kernel_cosf+0x9c>
 80133e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80133ec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013450 <__kernel_cosf+0xa0>
 80133f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80133f4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013454 <__kernel_cosf+0xa4>
 80133f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80133fc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013458 <__kernel_cosf+0xa8>
 8013400:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013404:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013408:	ee26 6a07 	vmul.f32	s12, s12, s14
 801340c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013410:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013418:	d804      	bhi.n	8013424 <__kernel_cosf+0x74>
 801341a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801341e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013422:	4770      	bx	lr
 8013424:	4a0d      	ldr	r2, [pc, #52]	@ (801345c <__kernel_cosf+0xac>)
 8013426:	4293      	cmp	r3, r2
 8013428:	bf9a      	itte	ls
 801342a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801342e:	ee07 3a10 	vmovls	s14, r3
 8013432:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013436:	ee30 0a47 	vsub.f32	s0, s0, s14
 801343a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801343e:	e7ec      	b.n	801341a <__kernel_cosf+0x6a>
 8013440:	ad47d74e 	.word	0xad47d74e
 8013444:	310f74f6 	.word	0x310f74f6
 8013448:	3e999999 	.word	0x3e999999
 801344c:	b493f27c 	.word	0xb493f27c
 8013450:	37d00d01 	.word	0x37d00d01
 8013454:	bab60b61 	.word	0xbab60b61
 8013458:	3d2aaaab 	.word	0x3d2aaaab
 801345c:	3f480000 	.word	0x3f480000

08013460 <__kernel_sinf>:
 8013460:	ee10 3a10 	vmov	r3, s0
 8013464:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013468:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801346c:	d204      	bcs.n	8013478 <__kernel_sinf+0x18>
 801346e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013472:	ee17 3a90 	vmov	r3, s15
 8013476:	b35b      	cbz	r3, 80134d0 <__kernel_sinf+0x70>
 8013478:	ee20 7a00 	vmul.f32	s14, s0, s0
 801347c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80134d4 <__kernel_sinf+0x74>
 8013480:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80134d8 <__kernel_sinf+0x78>
 8013484:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013488:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80134dc <__kernel_sinf+0x7c>
 801348c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013490:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80134e0 <__kernel_sinf+0x80>
 8013494:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013498:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80134e4 <__kernel_sinf+0x84>
 801349c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80134a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134a4:	b930      	cbnz	r0, 80134b4 <__kernel_sinf+0x54>
 80134a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80134e8 <__kernel_sinf+0x88>
 80134aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80134ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80134b2:	4770      	bx	lr
 80134b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80134b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80134bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80134c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80134c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80134ec <__kernel_sinf+0x8c>
 80134c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80134cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80134d0:	4770      	bx	lr
 80134d2:	bf00      	nop
 80134d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80134d8:	b2d72f34 	.word	0xb2d72f34
 80134dc:	3638ef1b 	.word	0x3638ef1b
 80134e0:	b9500d01 	.word	0xb9500d01
 80134e4:	3c088889 	.word	0x3c088889
 80134e8:	be2aaaab 	.word	0xbe2aaaab
 80134ec:	3e2aaaab 	.word	0x3e2aaaab

080134f0 <__kernel_tanf>:
 80134f0:	b508      	push	{r3, lr}
 80134f2:	ee10 3a10 	vmov	r3, s0
 80134f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80134fa:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80134fe:	eef0 7a40 	vmov.f32	s15, s0
 8013502:	d217      	bcs.n	8013534 <__kernel_tanf+0x44>
 8013504:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013508:	ee17 1a10 	vmov	r1, s14
 801350c:	bb41      	cbnz	r1, 8013560 <__kernel_tanf+0x70>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	4313      	orrs	r3, r2
 8013512:	d108      	bne.n	8013526 <__kernel_tanf+0x36>
 8013514:	f7ff fdfc 	bl	8013110 <fabsf>
 8013518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801351c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013520:	eeb0 0a67 	vmov.f32	s0, s15
 8013524:	bd08      	pop	{r3, pc}
 8013526:	2801      	cmp	r0, #1
 8013528:	d0fa      	beq.n	8013520 <__kernel_tanf+0x30>
 801352a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801352e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013532:	e7f5      	b.n	8013520 <__kernel_tanf+0x30>
 8013534:	494c      	ldr	r1, [pc, #304]	@ (8013668 <__kernel_tanf+0x178>)
 8013536:	428a      	cmp	r2, r1
 8013538:	d312      	bcc.n	8013560 <__kernel_tanf+0x70>
 801353a:	2b00      	cmp	r3, #0
 801353c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801366c <__kernel_tanf+0x17c>
 8013540:	bfb8      	it	lt
 8013542:	eef1 7a40 	vneglt.f32	s15, s0
 8013546:	ee37 7a67 	vsub.f32	s14, s14, s15
 801354a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8013670 <__kernel_tanf+0x180>
 801354e:	bfb8      	it	lt
 8013550:	eef1 0a60 	vneglt.f32	s1, s1
 8013554:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013558:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8013674 <__kernel_tanf+0x184>
 801355c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013560:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013564:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013678 <__kernel_tanf+0x188>
 8013568:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801367c <__kernel_tanf+0x18c>
 801356c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8013680 <__kernel_tanf+0x190>
 8013570:	493d      	ldr	r1, [pc, #244]	@ (8013668 <__kernel_tanf+0x178>)
 8013572:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013576:	428a      	cmp	r2, r1
 8013578:	eea7 6a25 	vfma.f32	s12, s14, s11
 801357c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8013684 <__kernel_tanf+0x194>
 8013580:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013584:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8013688 <__kernel_tanf+0x198>
 8013588:	eea5 6a87 	vfma.f32	s12, s11, s14
 801358c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801368c <__kernel_tanf+0x19c>
 8013590:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013594:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8013690 <__kernel_tanf+0x1a0>
 8013598:	eea5 6a87 	vfma.f32	s12, s11, s14
 801359c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8013694 <__kernel_tanf+0x1a4>
 80135a0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80135a4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8013698 <__kernel_tanf+0x1a8>
 80135a8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80135ac:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801369c <__kernel_tanf+0x1ac>
 80135b0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80135b4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80136a0 <__kernel_tanf+0x1b0>
 80135b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80135bc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80136a4 <__kernel_tanf+0x1b4>
 80135c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80135c4:	eeb0 7a46 	vmov.f32	s14, s12
 80135c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80135cc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80135d0:	eeb0 6a60 	vmov.f32	s12, s1
 80135d4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80135d8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80136a8 <__kernel_tanf+0x1b8>
 80135dc:	eee6 0a26 	vfma.f32	s1, s12, s13
 80135e0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80135e4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80135e8:	d31d      	bcc.n	8013626 <__kernel_tanf+0x136>
 80135ea:	ee07 0a10 	vmov	s14, r0
 80135ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135f2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80135f6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80135fa:	179b      	asrs	r3, r3, #30
 80135fc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	f1c3 0301 	rsb	r3, r3, #1
 8013608:	ee06 3a90 	vmov	s13, r3
 801360c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8013610:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013614:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013618:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801361c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8013620:	ee66 7a87 	vmul.f32	s15, s13, s14
 8013624:	e77c      	b.n	8013520 <__kernel_tanf+0x30>
 8013626:	2801      	cmp	r0, #1
 8013628:	d01b      	beq.n	8013662 <__kernel_tanf+0x172>
 801362a:	4b20      	ldr	r3, [pc, #128]	@ (80136ac <__kernel_tanf+0x1bc>)
 801362c:	ee16 2a10 	vmov	r2, s12
 8013630:	401a      	ands	r2, r3
 8013632:	ee05 2a90 	vmov	s11, r2
 8013636:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801363a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801363e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013642:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8013646:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801364a:	ee16 2a90 	vmov	r2, s13
 801364e:	4013      	ands	r3, r2
 8013650:	ee07 3a90 	vmov	s15, r3
 8013654:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013658:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801365c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013660:	e75e      	b.n	8013520 <__kernel_tanf+0x30>
 8013662:	eef0 7a46 	vmov.f32	s15, s12
 8013666:	e75b      	b.n	8013520 <__kernel_tanf+0x30>
 8013668:	3f2ca140 	.word	0x3f2ca140
 801366c:	3f490fda 	.word	0x3f490fda
 8013670:	33222168 	.word	0x33222168
 8013674:	00000000 	.word	0x00000000
 8013678:	b79bae5f 	.word	0xb79bae5f
 801367c:	38a3f445 	.word	0x38a3f445
 8013680:	37d95384 	.word	0x37d95384
 8013684:	3a1a26c8 	.word	0x3a1a26c8
 8013688:	3b6b6916 	.word	0x3b6b6916
 801368c:	3cb327a4 	.word	0x3cb327a4
 8013690:	3e088889 	.word	0x3e088889
 8013694:	3895c07a 	.word	0x3895c07a
 8013698:	398137b9 	.word	0x398137b9
 801369c:	3abede48 	.word	0x3abede48
 80136a0:	3c11371f 	.word	0x3c11371f
 80136a4:	3d5d0dd1 	.word	0x3d5d0dd1
 80136a8:	3eaaaaab 	.word	0x3eaaaaab
 80136ac:	fffff000 	.word	0xfffff000

080136b0 <__ieee754_atan2f>:
 80136b0:	ee10 2a90 	vmov	r2, s1
 80136b4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80136b8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80136bc:	b510      	push	{r4, lr}
 80136be:	eef0 7a40 	vmov.f32	s15, s0
 80136c2:	d806      	bhi.n	80136d2 <__ieee754_atan2f+0x22>
 80136c4:	ee10 0a10 	vmov	r0, s0
 80136c8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80136cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80136d0:	d904      	bls.n	80136dc <__ieee754_atan2f+0x2c>
 80136d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80136d6:	eeb0 0a67 	vmov.f32	s0, s15
 80136da:	bd10      	pop	{r4, pc}
 80136dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80136e0:	d103      	bne.n	80136ea <__ieee754_atan2f+0x3a>
 80136e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136e6:	f000 b9b3 	b.w	8013a50 <atanf>
 80136ea:	1794      	asrs	r4, r2, #30
 80136ec:	f004 0402 	and.w	r4, r4, #2
 80136f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80136f4:	b943      	cbnz	r3, 8013708 <__ieee754_atan2f+0x58>
 80136f6:	2c02      	cmp	r4, #2
 80136f8:	d05e      	beq.n	80137b8 <__ieee754_atan2f+0x108>
 80136fa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80137cc <__ieee754_atan2f+0x11c>
 80136fe:	2c03      	cmp	r4, #3
 8013700:	bf08      	it	eq
 8013702:	eef0 7a47 	vmoveq.f32	s15, s14
 8013706:	e7e6      	b.n	80136d6 <__ieee754_atan2f+0x26>
 8013708:	b941      	cbnz	r1, 801371c <__ieee754_atan2f+0x6c>
 801370a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80137d0 <__ieee754_atan2f+0x120>
 801370e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80137d4 <__ieee754_atan2f+0x124>
 8013712:	2800      	cmp	r0, #0
 8013714:	bfa8      	it	ge
 8013716:	eef0 7a47 	vmovge.f32	s15, s14
 801371a:	e7dc      	b.n	80136d6 <__ieee754_atan2f+0x26>
 801371c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013720:	d110      	bne.n	8013744 <__ieee754_atan2f+0x94>
 8013722:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013726:	f104 34ff 	add.w	r4, r4, #4294967295
 801372a:	d107      	bne.n	801373c <__ieee754_atan2f+0x8c>
 801372c:	2c02      	cmp	r4, #2
 801372e:	d846      	bhi.n	80137be <__ieee754_atan2f+0x10e>
 8013730:	4b29      	ldr	r3, [pc, #164]	@ (80137d8 <__ieee754_atan2f+0x128>)
 8013732:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013736:	edd3 7a00 	vldr	s15, [r3]
 801373a:	e7cc      	b.n	80136d6 <__ieee754_atan2f+0x26>
 801373c:	2c02      	cmp	r4, #2
 801373e:	d841      	bhi.n	80137c4 <__ieee754_atan2f+0x114>
 8013740:	4b26      	ldr	r3, [pc, #152]	@ (80137dc <__ieee754_atan2f+0x12c>)
 8013742:	e7f6      	b.n	8013732 <__ieee754_atan2f+0x82>
 8013744:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013748:	d0df      	beq.n	801370a <__ieee754_atan2f+0x5a>
 801374a:	1a5b      	subs	r3, r3, r1
 801374c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8013750:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013754:	da1a      	bge.n	801378c <__ieee754_atan2f+0xdc>
 8013756:	2a00      	cmp	r2, #0
 8013758:	da01      	bge.n	801375e <__ieee754_atan2f+0xae>
 801375a:	313c      	adds	r1, #60	@ 0x3c
 801375c:	db19      	blt.n	8013792 <__ieee754_atan2f+0xe2>
 801375e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013762:	f7ff fcd5 	bl	8013110 <fabsf>
 8013766:	f000 f973 	bl	8013a50 <atanf>
 801376a:	eef0 7a40 	vmov.f32	s15, s0
 801376e:	2c01      	cmp	r4, #1
 8013770:	d012      	beq.n	8013798 <__ieee754_atan2f+0xe8>
 8013772:	2c02      	cmp	r4, #2
 8013774:	d017      	beq.n	80137a6 <__ieee754_atan2f+0xf6>
 8013776:	2c00      	cmp	r4, #0
 8013778:	d0ad      	beq.n	80136d6 <__ieee754_atan2f+0x26>
 801377a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80137e0 <__ieee754_atan2f+0x130>
 801377e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013782:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80137e4 <__ieee754_atan2f+0x134>
 8013786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801378a:	e7a4      	b.n	80136d6 <__ieee754_atan2f+0x26>
 801378c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80137d4 <__ieee754_atan2f+0x124>
 8013790:	e7ed      	b.n	801376e <__ieee754_atan2f+0xbe>
 8013792:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80137e8 <__ieee754_atan2f+0x138>
 8013796:	e7ea      	b.n	801376e <__ieee754_atan2f+0xbe>
 8013798:	ee17 3a90 	vmov	r3, s15
 801379c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80137a0:	ee07 3a90 	vmov	s15, r3
 80137a4:	e797      	b.n	80136d6 <__ieee754_atan2f+0x26>
 80137a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80137e0 <__ieee754_atan2f+0x130>
 80137aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80137e4 <__ieee754_atan2f+0x134>
 80137b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137b6:	e78e      	b.n	80136d6 <__ieee754_atan2f+0x26>
 80137b8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80137e4 <__ieee754_atan2f+0x134>
 80137bc:	e78b      	b.n	80136d6 <__ieee754_atan2f+0x26>
 80137be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80137ec <__ieee754_atan2f+0x13c>
 80137c2:	e788      	b.n	80136d6 <__ieee754_atan2f+0x26>
 80137c4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80137e8 <__ieee754_atan2f+0x138>
 80137c8:	e785      	b.n	80136d6 <__ieee754_atan2f+0x26>
 80137ca:	bf00      	nop
 80137cc:	c0490fdb 	.word	0xc0490fdb
 80137d0:	bfc90fdb 	.word	0xbfc90fdb
 80137d4:	3fc90fdb 	.word	0x3fc90fdb
 80137d8:	08014644 	.word	0x08014644
 80137dc:	08014638 	.word	0x08014638
 80137e0:	33bbbd2e 	.word	0x33bbbd2e
 80137e4:	40490fdb 	.word	0x40490fdb
 80137e8:	00000000 	.word	0x00000000
 80137ec:	3f490fdb 	.word	0x3f490fdb

080137f0 <__ieee754_rem_pio2f>:
 80137f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137f2:	ee10 6a10 	vmov	r6, s0
 80137f6:	4b88      	ldr	r3, [pc, #544]	@ (8013a18 <__ieee754_rem_pio2f+0x228>)
 80137f8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80137fc:	429d      	cmp	r5, r3
 80137fe:	b087      	sub	sp, #28
 8013800:	4604      	mov	r4, r0
 8013802:	d805      	bhi.n	8013810 <__ieee754_rem_pio2f+0x20>
 8013804:	2300      	movs	r3, #0
 8013806:	ed80 0a00 	vstr	s0, [r0]
 801380a:	6043      	str	r3, [r0, #4]
 801380c:	2000      	movs	r0, #0
 801380e:	e022      	b.n	8013856 <__ieee754_rem_pio2f+0x66>
 8013810:	4b82      	ldr	r3, [pc, #520]	@ (8013a1c <__ieee754_rem_pio2f+0x22c>)
 8013812:	429d      	cmp	r5, r3
 8013814:	d83a      	bhi.n	801388c <__ieee754_rem_pio2f+0x9c>
 8013816:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801381a:	2e00      	cmp	r6, #0
 801381c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013a20 <__ieee754_rem_pio2f+0x230>
 8013820:	4a80      	ldr	r2, [pc, #512]	@ (8013a24 <__ieee754_rem_pio2f+0x234>)
 8013822:	f023 030f 	bic.w	r3, r3, #15
 8013826:	dd18      	ble.n	801385a <__ieee754_rem_pio2f+0x6a>
 8013828:	4293      	cmp	r3, r2
 801382a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801382e:	bf09      	itett	eq
 8013830:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013a28 <__ieee754_rem_pio2f+0x238>
 8013834:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013a2c <__ieee754_rem_pio2f+0x23c>
 8013838:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013a30 <__ieee754_rem_pio2f+0x240>
 801383c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013840:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013848:	ed80 7a00 	vstr	s14, [r0]
 801384c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013850:	edc0 7a01 	vstr	s15, [r0, #4]
 8013854:	2001      	movs	r0, #1
 8013856:	b007      	add	sp, #28
 8013858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801385a:	4293      	cmp	r3, r2
 801385c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013860:	bf09      	itett	eq
 8013862:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013a28 <__ieee754_rem_pio2f+0x238>
 8013866:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013a2c <__ieee754_rem_pio2f+0x23c>
 801386a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013a30 <__ieee754_rem_pio2f+0x240>
 801386e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013872:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801387a:	ed80 7a00 	vstr	s14, [r0]
 801387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013882:	edc0 7a01 	vstr	s15, [r0, #4]
 8013886:	f04f 30ff 	mov.w	r0, #4294967295
 801388a:	e7e4      	b.n	8013856 <__ieee754_rem_pio2f+0x66>
 801388c:	4b69      	ldr	r3, [pc, #420]	@ (8013a34 <__ieee754_rem_pio2f+0x244>)
 801388e:	429d      	cmp	r5, r3
 8013890:	d873      	bhi.n	801397a <__ieee754_rem_pio2f+0x18a>
 8013892:	f7ff fc3d 	bl	8013110 <fabsf>
 8013896:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013a38 <__ieee754_rem_pio2f+0x248>
 801389a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801389e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80138a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138aa:	ee17 0a90 	vmov	r0, s15
 80138ae:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013a20 <__ieee754_rem_pio2f+0x230>
 80138b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80138b6:	281f      	cmp	r0, #31
 80138b8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013a2c <__ieee754_rem_pio2f+0x23c>
 80138bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138c0:	eeb1 6a47 	vneg.f32	s12, s14
 80138c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80138c8:	ee16 1a90 	vmov	r1, s13
 80138cc:	dc09      	bgt.n	80138e2 <__ieee754_rem_pio2f+0xf2>
 80138ce:	4a5b      	ldr	r2, [pc, #364]	@ (8013a3c <__ieee754_rem_pio2f+0x24c>)
 80138d0:	1e47      	subs	r7, r0, #1
 80138d2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80138d6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80138da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80138de:	4293      	cmp	r3, r2
 80138e0:	d107      	bne.n	80138f2 <__ieee754_rem_pio2f+0x102>
 80138e2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80138e6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80138ea:	2a08      	cmp	r2, #8
 80138ec:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80138f0:	dc14      	bgt.n	801391c <__ieee754_rem_pio2f+0x12c>
 80138f2:	6021      	str	r1, [r4, #0]
 80138f4:	ed94 7a00 	vldr	s14, [r4]
 80138f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80138fc:	2e00      	cmp	r6, #0
 80138fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013902:	ed84 0a01 	vstr	s0, [r4, #4]
 8013906:	daa6      	bge.n	8013856 <__ieee754_rem_pio2f+0x66>
 8013908:	eeb1 7a47 	vneg.f32	s14, s14
 801390c:	eeb1 0a40 	vneg.f32	s0, s0
 8013910:	ed84 7a00 	vstr	s14, [r4]
 8013914:	ed84 0a01 	vstr	s0, [r4, #4]
 8013918:	4240      	negs	r0, r0
 801391a:	e79c      	b.n	8013856 <__ieee754_rem_pio2f+0x66>
 801391c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013a28 <__ieee754_rem_pio2f+0x238>
 8013920:	eef0 6a40 	vmov.f32	s13, s0
 8013924:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013928:	ee70 7a66 	vsub.f32	s15, s0, s13
 801392c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013930:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013a30 <__ieee754_rem_pio2f+0x240>
 8013934:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013938:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801393c:	ee15 2a90 	vmov	r2, s11
 8013940:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013944:	1a5b      	subs	r3, r3, r1
 8013946:	2b19      	cmp	r3, #25
 8013948:	dc04      	bgt.n	8013954 <__ieee754_rem_pio2f+0x164>
 801394a:	edc4 5a00 	vstr	s11, [r4]
 801394e:	eeb0 0a66 	vmov.f32	s0, s13
 8013952:	e7cf      	b.n	80138f4 <__ieee754_rem_pio2f+0x104>
 8013954:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013a40 <__ieee754_rem_pio2f+0x250>
 8013958:	eeb0 0a66 	vmov.f32	s0, s13
 801395c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013960:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013964:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013a44 <__ieee754_rem_pio2f+0x254>
 8013968:	eee6 7a25 	vfma.f32	s15, s12, s11
 801396c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013970:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013974:	ed84 7a00 	vstr	s14, [r4]
 8013978:	e7bc      	b.n	80138f4 <__ieee754_rem_pio2f+0x104>
 801397a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801397e:	d306      	bcc.n	801398e <__ieee754_rem_pio2f+0x19e>
 8013980:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013984:	edc0 7a01 	vstr	s15, [r0, #4]
 8013988:	edc0 7a00 	vstr	s15, [r0]
 801398c:	e73e      	b.n	801380c <__ieee754_rem_pio2f+0x1c>
 801398e:	15ea      	asrs	r2, r5, #23
 8013990:	3a86      	subs	r2, #134	@ 0x86
 8013992:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013996:	ee07 3a90 	vmov	s15, r3
 801399a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801399e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013a48 <__ieee754_rem_pio2f+0x258>
 80139a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139aa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80139ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80139b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139be:	ed8d 7a04 	vstr	s14, [sp, #16]
 80139c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ce:	edcd 7a05 	vstr	s15, [sp, #20]
 80139d2:	d11e      	bne.n	8013a12 <__ieee754_rem_pio2f+0x222>
 80139d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139dc:	bf0c      	ite	eq
 80139de:	2301      	moveq	r3, #1
 80139e0:	2302      	movne	r3, #2
 80139e2:	491a      	ldr	r1, [pc, #104]	@ (8013a4c <__ieee754_rem_pio2f+0x25c>)
 80139e4:	9101      	str	r1, [sp, #4]
 80139e6:	2102      	movs	r1, #2
 80139e8:	9100      	str	r1, [sp, #0]
 80139ea:	a803      	add	r0, sp, #12
 80139ec:	4621      	mov	r1, r4
 80139ee:	f000 f903 	bl	8013bf8 <__kernel_rem_pio2f>
 80139f2:	2e00      	cmp	r6, #0
 80139f4:	f6bf af2f 	bge.w	8013856 <__ieee754_rem_pio2f+0x66>
 80139f8:	edd4 7a00 	vldr	s15, [r4]
 80139fc:	eef1 7a67 	vneg.f32	s15, s15
 8013a00:	edc4 7a00 	vstr	s15, [r4]
 8013a04:	edd4 7a01 	vldr	s15, [r4, #4]
 8013a08:	eef1 7a67 	vneg.f32	s15, s15
 8013a0c:	edc4 7a01 	vstr	s15, [r4, #4]
 8013a10:	e782      	b.n	8013918 <__ieee754_rem_pio2f+0x128>
 8013a12:	2303      	movs	r3, #3
 8013a14:	e7e5      	b.n	80139e2 <__ieee754_rem_pio2f+0x1f2>
 8013a16:	bf00      	nop
 8013a18:	3f490fd8 	.word	0x3f490fd8
 8013a1c:	4016cbe3 	.word	0x4016cbe3
 8013a20:	3fc90f80 	.word	0x3fc90f80
 8013a24:	3fc90fd0 	.word	0x3fc90fd0
 8013a28:	37354400 	.word	0x37354400
 8013a2c:	37354443 	.word	0x37354443
 8013a30:	2e85a308 	.word	0x2e85a308
 8013a34:	43490f80 	.word	0x43490f80
 8013a38:	3f22f984 	.word	0x3f22f984
 8013a3c:	08014650 	.word	0x08014650
 8013a40:	2e85a300 	.word	0x2e85a300
 8013a44:	248d3132 	.word	0x248d3132
 8013a48:	43800000 	.word	0x43800000
 8013a4c:	080146d0 	.word	0x080146d0

08013a50 <atanf>:
 8013a50:	b538      	push	{r3, r4, r5, lr}
 8013a52:	ee10 5a10 	vmov	r5, s0
 8013a56:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8013a5a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8013a5e:	eef0 7a40 	vmov.f32	s15, s0
 8013a62:	d310      	bcc.n	8013a86 <atanf+0x36>
 8013a64:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8013a68:	d904      	bls.n	8013a74 <atanf+0x24>
 8013a6a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8013a72:	bd38      	pop	{r3, r4, r5, pc}
 8013a74:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8013bac <atanf+0x15c>
 8013a78:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8013bb0 <atanf+0x160>
 8013a7c:	2d00      	cmp	r5, #0
 8013a7e:	bfc8      	it	gt
 8013a80:	eef0 7a47 	vmovgt.f32	s15, s14
 8013a84:	e7f3      	b.n	8013a6e <atanf+0x1e>
 8013a86:	4b4b      	ldr	r3, [pc, #300]	@ (8013bb4 <atanf+0x164>)
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	d810      	bhi.n	8013aae <atanf+0x5e>
 8013a8c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8013a90:	d20a      	bcs.n	8013aa8 <atanf+0x58>
 8013a92:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8013bb8 <atanf+0x168>
 8013a96:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa6:	dce2      	bgt.n	8013a6e <atanf+0x1e>
 8013aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8013aac:	e013      	b.n	8013ad6 <atanf+0x86>
 8013aae:	f7ff fb2f 	bl	8013110 <fabsf>
 8013ab2:	4b42      	ldr	r3, [pc, #264]	@ (8013bbc <atanf+0x16c>)
 8013ab4:	429c      	cmp	r4, r3
 8013ab6:	d84f      	bhi.n	8013b58 <atanf+0x108>
 8013ab8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8013abc:	429c      	cmp	r4, r3
 8013abe:	d841      	bhi.n	8013b44 <atanf+0xf4>
 8013ac0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8013ac4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8013ac8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013acc:	2300      	movs	r3, #0
 8013ace:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ad6:	1c5a      	adds	r2, r3, #1
 8013ad8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013adc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8013bc0 <atanf+0x170>
 8013ae0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8013bc4 <atanf+0x174>
 8013ae4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8013bc8 <atanf+0x178>
 8013ae8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013aec:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013af0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8013bcc <atanf+0x17c>
 8013af4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013af8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8013bd0 <atanf+0x180>
 8013afc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013b00:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8013bd4 <atanf+0x184>
 8013b04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013b08:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013bd8 <atanf+0x188>
 8013b0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013b10:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8013bdc <atanf+0x18c>
 8013b14:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013b18:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8013be0 <atanf+0x190>
 8013b1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013b20:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8013be4 <atanf+0x194>
 8013b24:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013b28:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8013be8 <atanf+0x198>
 8013b2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013b30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013b34:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013b38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013b3c:	d121      	bne.n	8013b82 <atanf+0x132>
 8013b3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b42:	e794      	b.n	8013a6e <atanf+0x1e>
 8013b44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013b4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b50:	2301      	movs	r3, #1
 8013b52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b56:	e7be      	b.n	8013ad6 <atanf+0x86>
 8013b58:	4b24      	ldr	r3, [pc, #144]	@ (8013bec <atanf+0x19c>)
 8013b5a:	429c      	cmp	r4, r3
 8013b5c:	d80b      	bhi.n	8013b76 <atanf+0x126>
 8013b5e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8013b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013b66:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013b6a:	2302      	movs	r3, #2
 8013b6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b74:	e7af      	b.n	8013ad6 <atanf+0x86>
 8013b76:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8013b7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b7e:	2303      	movs	r3, #3
 8013b80:	e7a9      	b.n	8013ad6 <atanf+0x86>
 8013b82:	4a1b      	ldr	r2, [pc, #108]	@ (8013bf0 <atanf+0x1a0>)
 8013b84:	491b      	ldr	r1, [pc, #108]	@ (8013bf4 <atanf+0x1a4>)
 8013b86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013b8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013b8e:	edd3 6a00 	vldr	s13, [r3]
 8013b92:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013b96:	2d00      	cmp	r5, #0
 8013b98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013b9c:	edd2 7a00 	vldr	s15, [r2]
 8013ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ba4:	bfb8      	it	lt
 8013ba6:	eef1 7a67 	vneglt.f32	s15, s15
 8013baa:	e760      	b.n	8013a6e <atanf+0x1e>
 8013bac:	bfc90fdb 	.word	0xbfc90fdb
 8013bb0:	3fc90fdb 	.word	0x3fc90fdb
 8013bb4:	3edfffff 	.word	0x3edfffff
 8013bb8:	7149f2ca 	.word	0x7149f2ca
 8013bbc:	3f97ffff 	.word	0x3f97ffff
 8013bc0:	3c8569d7 	.word	0x3c8569d7
 8013bc4:	3d4bda59 	.word	0x3d4bda59
 8013bc8:	bd6ef16b 	.word	0xbd6ef16b
 8013bcc:	3d886b35 	.word	0x3d886b35
 8013bd0:	3dba2e6e 	.word	0x3dba2e6e
 8013bd4:	3e124925 	.word	0x3e124925
 8013bd8:	3eaaaaab 	.word	0x3eaaaaab
 8013bdc:	bd15a221 	.word	0xbd15a221
 8013be0:	bd9d8795 	.word	0xbd9d8795
 8013be4:	bde38e38 	.word	0xbde38e38
 8013be8:	be4ccccd 	.word	0xbe4ccccd
 8013bec:	401bffff 	.word	0x401bffff
 8013bf0:	080149f8 	.word	0x080149f8
 8013bf4:	080149e8 	.word	0x080149e8

08013bf8 <__kernel_rem_pio2f>:
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	ed2d 8b04 	vpush	{d8-d9}
 8013c00:	b0d9      	sub	sp, #356	@ 0x164
 8013c02:	4690      	mov	r8, r2
 8013c04:	9001      	str	r0, [sp, #4]
 8013c06:	4ab6      	ldr	r2, [pc, #728]	@ (8013ee0 <__kernel_rem_pio2f+0x2e8>)
 8013c08:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013c0a:	f118 0f04 	cmn.w	r8, #4
 8013c0e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013c12:	460f      	mov	r7, r1
 8013c14:	f103 3bff 	add.w	fp, r3, #4294967295
 8013c18:	db26      	blt.n	8013c68 <__kernel_rem_pio2f+0x70>
 8013c1a:	f1b8 0203 	subs.w	r2, r8, #3
 8013c1e:	bf48      	it	mi
 8013c20:	f108 0204 	addmi.w	r2, r8, #4
 8013c24:	10d2      	asrs	r2, r2, #3
 8013c26:	1c55      	adds	r5, r2, #1
 8013c28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013c2a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013c2e:	00e8      	lsls	r0, r5, #3
 8013c30:	eba2 060b 	sub.w	r6, r2, fp
 8013c34:	9002      	str	r0, [sp, #8]
 8013c36:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013c3a:	eb0a 0c0b 	add.w	ip, sl, fp
 8013c3e:	ac1c      	add	r4, sp, #112	@ 0x70
 8013c40:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013c44:	2000      	movs	r0, #0
 8013c46:	4560      	cmp	r0, ip
 8013c48:	dd10      	ble.n	8013c6c <__kernel_rem_pio2f+0x74>
 8013c4a:	a91c      	add	r1, sp, #112	@ 0x70
 8013c4c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013c50:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013c54:	2600      	movs	r6, #0
 8013c56:	4556      	cmp	r6, sl
 8013c58:	dc24      	bgt.n	8013ca4 <__kernel_rem_pio2f+0xac>
 8013c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013c5e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013c62:	4684      	mov	ip, r0
 8013c64:	2400      	movs	r4, #0
 8013c66:	e016      	b.n	8013c96 <__kernel_rem_pio2f+0x9e>
 8013c68:	2200      	movs	r2, #0
 8013c6a:	e7dc      	b.n	8013c26 <__kernel_rem_pio2f+0x2e>
 8013c6c:	42c6      	cmn	r6, r0
 8013c6e:	bf5d      	ittte	pl
 8013c70:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013c74:	ee07 1a90 	vmovpl	s15, r1
 8013c78:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013c7c:	eef0 7a47 	vmovmi.f32	s15, s14
 8013c80:	ece4 7a01 	vstmia	r4!, {s15}
 8013c84:	3001      	adds	r0, #1
 8013c86:	e7de      	b.n	8013c46 <__kernel_rem_pio2f+0x4e>
 8013c88:	ecfe 6a01 	vldmia	lr!, {s13}
 8013c8c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013c90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013c94:	3401      	adds	r4, #1
 8013c96:	455c      	cmp	r4, fp
 8013c98:	ddf6      	ble.n	8013c88 <__kernel_rem_pio2f+0x90>
 8013c9a:	ece9 7a01 	vstmia	r9!, {s15}
 8013c9e:	3601      	adds	r6, #1
 8013ca0:	3004      	adds	r0, #4
 8013ca2:	e7d8      	b.n	8013c56 <__kernel_rem_pio2f+0x5e>
 8013ca4:	a908      	add	r1, sp, #32
 8013ca6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013caa:	9104      	str	r1, [sp, #16]
 8013cac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013cae:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8013eec <__kernel_rem_pio2f+0x2f4>
 8013cb2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013ee8 <__kernel_rem_pio2f+0x2f0>
 8013cb6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013cba:	9203      	str	r2, [sp, #12]
 8013cbc:	4654      	mov	r4, sl
 8013cbe:	00a2      	lsls	r2, r4, #2
 8013cc0:	9205      	str	r2, [sp, #20]
 8013cc2:	aa58      	add	r2, sp, #352	@ 0x160
 8013cc4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013cc8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013ccc:	a944      	add	r1, sp, #272	@ 0x110
 8013cce:	aa08      	add	r2, sp, #32
 8013cd0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013cd4:	4694      	mov	ip, r2
 8013cd6:	4626      	mov	r6, r4
 8013cd8:	2e00      	cmp	r6, #0
 8013cda:	dc4c      	bgt.n	8013d76 <__kernel_rem_pio2f+0x17e>
 8013cdc:	4628      	mov	r0, r5
 8013cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ce2:	f000 f9f1 	bl	80140c8 <scalbnf>
 8013ce6:	eeb0 8a40 	vmov.f32	s16, s0
 8013cea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013cee:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013cf2:	f000 fa4f 	bl	8014194 <floorf>
 8013cf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013cfa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013cfe:	2d00      	cmp	r5, #0
 8013d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013d08:	ee17 9a90 	vmov	r9, s15
 8013d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d10:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013d14:	dd41      	ble.n	8013d9a <__kernel_rem_pio2f+0x1a2>
 8013d16:	f104 3cff 	add.w	ip, r4, #4294967295
 8013d1a:	a908      	add	r1, sp, #32
 8013d1c:	f1c5 0e08 	rsb	lr, r5, #8
 8013d20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013d24:	fa46 f00e 	asr.w	r0, r6, lr
 8013d28:	4481      	add	r9, r0
 8013d2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8013d2e:	1a36      	subs	r6, r6, r0
 8013d30:	f1c5 0007 	rsb	r0, r5, #7
 8013d34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013d38:	4106      	asrs	r6, r0
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	dd3c      	ble.n	8013db8 <__kernel_rem_pio2f+0x1c0>
 8013d3e:	f04f 0e00 	mov.w	lr, #0
 8013d42:	f109 0901 	add.w	r9, r9, #1
 8013d46:	4670      	mov	r0, lr
 8013d48:	4574      	cmp	r4, lr
 8013d4a:	dc68      	bgt.n	8013e1e <__kernel_rem_pio2f+0x226>
 8013d4c:	2d00      	cmp	r5, #0
 8013d4e:	dd03      	ble.n	8013d58 <__kernel_rem_pio2f+0x160>
 8013d50:	2d01      	cmp	r5, #1
 8013d52:	d074      	beq.n	8013e3e <__kernel_rem_pio2f+0x246>
 8013d54:	2d02      	cmp	r5, #2
 8013d56:	d07d      	beq.n	8013e54 <__kernel_rem_pio2f+0x25c>
 8013d58:	2e02      	cmp	r6, #2
 8013d5a:	d12d      	bne.n	8013db8 <__kernel_rem_pio2f+0x1c0>
 8013d5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013d60:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013d64:	b340      	cbz	r0, 8013db8 <__kernel_rem_pio2f+0x1c0>
 8013d66:	4628      	mov	r0, r5
 8013d68:	9306      	str	r3, [sp, #24]
 8013d6a:	f000 f9ad 	bl	80140c8 <scalbnf>
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013d74:	e020      	b.n	8013db8 <__kernel_rem_pio2f+0x1c0>
 8013d76:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013d7a:	3e01      	subs	r6, #1
 8013d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013d88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013d8c:	ecac 0a01 	vstmia	ip!, {s0}
 8013d90:	ed30 0a01 	vldmdb	r0!, {s0}
 8013d94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013d98:	e79e      	b.n	8013cd8 <__kernel_rem_pio2f+0xe0>
 8013d9a:	d105      	bne.n	8013da8 <__kernel_rem_pio2f+0x1b0>
 8013d9c:	1e60      	subs	r0, r4, #1
 8013d9e:	a908      	add	r1, sp, #32
 8013da0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013da4:	11f6      	asrs	r6, r6, #7
 8013da6:	e7c8      	b.n	8013d3a <__kernel_rem_pio2f+0x142>
 8013da8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013dac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	da31      	bge.n	8013e1a <__kernel_rem_pio2f+0x222>
 8013db6:	2600      	movs	r6, #0
 8013db8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc0:	f040 8098 	bne.w	8013ef4 <__kernel_rem_pio2f+0x2fc>
 8013dc4:	1e60      	subs	r0, r4, #1
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	4550      	cmp	r0, sl
 8013dca:	da4b      	bge.n	8013e64 <__kernel_rem_pio2f+0x26c>
 8013dcc:	2a00      	cmp	r2, #0
 8013dce:	d065      	beq.n	8013e9c <__kernel_rem_pio2f+0x2a4>
 8013dd0:	3c01      	subs	r4, #1
 8013dd2:	ab08      	add	r3, sp, #32
 8013dd4:	3d08      	subs	r5, #8
 8013dd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d0f8      	beq.n	8013dd0 <__kernel_rem_pio2f+0x1d8>
 8013dde:	4628      	mov	r0, r5
 8013de0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013de4:	f000 f970 	bl	80140c8 <scalbnf>
 8013de8:	1c63      	adds	r3, r4, #1
 8013dea:	aa44      	add	r2, sp, #272	@ 0x110
 8013dec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013eec <__kernel_rem_pio2f+0x2f4>
 8013df0:	0099      	lsls	r1, r3, #2
 8013df2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013df6:	4623      	mov	r3, r4
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f280 80a9 	bge.w	8013f50 <__kernel_rem_pio2f+0x358>
 8013dfe:	4623      	mov	r3, r4
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f2c0 80c7 	blt.w	8013f94 <__kernel_rem_pio2f+0x39c>
 8013e06:	aa44      	add	r2, sp, #272	@ 0x110
 8013e08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013e0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013ee4 <__kernel_rem_pio2f+0x2ec>
 8013e10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013e14:	2000      	movs	r0, #0
 8013e16:	1ae2      	subs	r2, r4, r3
 8013e18:	e0b1      	b.n	8013f7e <__kernel_rem_pio2f+0x386>
 8013e1a:	2602      	movs	r6, #2
 8013e1c:	e78f      	b.n	8013d3e <__kernel_rem_pio2f+0x146>
 8013e1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013e22:	b948      	cbnz	r0, 8013e38 <__kernel_rem_pio2f+0x240>
 8013e24:	b121      	cbz	r1, 8013e30 <__kernel_rem_pio2f+0x238>
 8013e26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013e2a:	f842 1c04 	str.w	r1, [r2, #-4]
 8013e2e:	2101      	movs	r1, #1
 8013e30:	f10e 0e01 	add.w	lr, lr, #1
 8013e34:	4608      	mov	r0, r1
 8013e36:	e787      	b.n	8013d48 <__kernel_rem_pio2f+0x150>
 8013e38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013e3c:	e7f5      	b.n	8013e2a <__kernel_rem_pio2f+0x232>
 8013e3e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013e42:	aa08      	add	r2, sp, #32
 8013e44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013e48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013e4c:	a908      	add	r1, sp, #32
 8013e4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013e52:	e781      	b.n	8013d58 <__kernel_rem_pio2f+0x160>
 8013e54:	f104 3cff 	add.w	ip, r4, #4294967295
 8013e58:	aa08      	add	r2, sp, #32
 8013e5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013e5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013e62:	e7f3      	b.n	8013e4c <__kernel_rem_pio2f+0x254>
 8013e64:	a908      	add	r1, sp, #32
 8013e66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013e6a:	3801      	subs	r0, #1
 8013e6c:	430a      	orrs	r2, r1
 8013e6e:	e7ab      	b.n	8013dc8 <__kernel_rem_pio2f+0x1d0>
 8013e70:	3201      	adds	r2, #1
 8013e72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8013e76:	2e00      	cmp	r6, #0
 8013e78:	d0fa      	beq.n	8013e70 <__kernel_rem_pio2f+0x278>
 8013e7a:	9905      	ldr	r1, [sp, #20]
 8013e7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013e80:	eb0d 0001 	add.w	r0, sp, r1
 8013e84:	18e6      	adds	r6, r4, r3
 8013e86:	a91c      	add	r1, sp, #112	@ 0x70
 8013e88:	f104 0c01 	add.w	ip, r4, #1
 8013e8c:	384c      	subs	r0, #76	@ 0x4c
 8013e8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013e92:	4422      	add	r2, r4
 8013e94:	4562      	cmp	r2, ip
 8013e96:	da04      	bge.n	8013ea2 <__kernel_rem_pio2f+0x2aa>
 8013e98:	4614      	mov	r4, r2
 8013e9a:	e710      	b.n	8013cbe <__kernel_rem_pio2f+0xc6>
 8013e9c:	9804      	ldr	r0, [sp, #16]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	e7e7      	b.n	8013e72 <__kernel_rem_pio2f+0x27a>
 8013ea2:	9903      	ldr	r1, [sp, #12]
 8013ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013ea8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013eac:	9105      	str	r1, [sp, #20]
 8013eae:	ee07 1a90 	vmov	s15, r1
 8013eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eb6:	2400      	movs	r4, #0
 8013eb8:	ece6 7a01 	vstmia	r6!, {s15}
 8013ebc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013ec0:	46b1      	mov	r9, r6
 8013ec2:	455c      	cmp	r4, fp
 8013ec4:	dd04      	ble.n	8013ed0 <__kernel_rem_pio2f+0x2d8>
 8013ec6:	ece0 7a01 	vstmia	r0!, {s15}
 8013eca:	f10c 0c01 	add.w	ip, ip, #1
 8013ece:	e7e1      	b.n	8013e94 <__kernel_rem_pio2f+0x29c>
 8013ed0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013ed4:	ed39 7a01 	vldmdb	r9!, {s14}
 8013ed8:	3401      	adds	r4, #1
 8013eda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013ede:	e7f0      	b.n	8013ec2 <__kernel_rem_pio2f+0x2ca>
 8013ee0:	08014a34 	.word	0x08014a34
 8013ee4:	08014a08 	.word	0x08014a08
 8013ee8:	43800000 	.word	0x43800000
 8013eec:	3b800000 	.word	0x3b800000
 8013ef0:	00000000 	.word	0x00000000
 8013ef4:	9b02      	ldr	r3, [sp, #8]
 8013ef6:	eeb0 0a48 	vmov.f32	s0, s16
 8013efa:	eba3 0008 	sub.w	r0, r3, r8
 8013efe:	f000 f8e3 	bl	80140c8 <scalbnf>
 8013f02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013ee8 <__kernel_rem_pio2f+0x2f0>
 8013f06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0e:	db19      	blt.n	8013f44 <__kernel_rem_pio2f+0x34c>
 8013f10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013eec <__kernel_rem_pio2f+0x2f4>
 8013f14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013f18:	aa08      	add	r2, sp, #32
 8013f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f1e:	3508      	adds	r5, #8
 8013f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f30:	ee10 3a10 	vmov	r3, s0
 8013f34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013f38:	ee17 3a90 	vmov	r3, s15
 8013f3c:	3401      	adds	r4, #1
 8013f3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013f42:	e74c      	b.n	8013dde <__kernel_rem_pio2f+0x1e6>
 8013f44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f48:	aa08      	add	r2, sp, #32
 8013f4a:	ee10 3a10 	vmov	r3, s0
 8013f4e:	e7f6      	b.n	8013f3e <__kernel_rem_pio2f+0x346>
 8013f50:	a808      	add	r0, sp, #32
 8013f52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013f56:	9001      	str	r0, [sp, #4]
 8013f58:	ee07 0a90 	vmov	s15, r0
 8013f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f60:	3b01      	subs	r3, #1
 8013f62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013f66:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013f6a:	ed62 7a01 	vstmdb	r2!, {s15}
 8013f6e:	e743      	b.n	8013df8 <__kernel_rem_pio2f+0x200>
 8013f70:	ecfc 6a01 	vldmia	ip!, {s13}
 8013f74:	ecb5 7a01 	vldmia	r5!, {s14}
 8013f78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f7c:	3001      	adds	r0, #1
 8013f7e:	4550      	cmp	r0, sl
 8013f80:	dc01      	bgt.n	8013f86 <__kernel_rem_pio2f+0x38e>
 8013f82:	4290      	cmp	r0, r2
 8013f84:	ddf4      	ble.n	8013f70 <__kernel_rem_pio2f+0x378>
 8013f86:	a858      	add	r0, sp, #352	@ 0x160
 8013f88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013f8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013f90:	3b01      	subs	r3, #1
 8013f92:	e735      	b.n	8013e00 <__kernel_rem_pio2f+0x208>
 8013f94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013f96:	2b02      	cmp	r3, #2
 8013f98:	dc09      	bgt.n	8013fae <__kernel_rem_pio2f+0x3b6>
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	dc27      	bgt.n	8013fee <__kernel_rem_pio2f+0x3f6>
 8013f9e:	d040      	beq.n	8014022 <__kernel_rem_pio2f+0x42a>
 8013fa0:	f009 0007 	and.w	r0, r9, #7
 8013fa4:	b059      	add	sp, #356	@ 0x164
 8013fa6:	ecbd 8b04 	vpop	{d8-d9}
 8013faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013fb0:	2b03      	cmp	r3, #3
 8013fb2:	d1f5      	bne.n	8013fa0 <__kernel_rem_pio2f+0x3a8>
 8013fb4:	aa30      	add	r2, sp, #192	@ 0xc0
 8013fb6:	1f0b      	subs	r3, r1, #4
 8013fb8:	4413      	add	r3, r2
 8013fba:	461a      	mov	r2, r3
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	dc50      	bgt.n	8014064 <__kernel_rem_pio2f+0x46c>
 8013fc2:	4622      	mov	r2, r4
 8013fc4:	2a01      	cmp	r2, #1
 8013fc6:	dc5d      	bgt.n	8014084 <__kernel_rem_pio2f+0x48c>
 8013fc8:	ab30      	add	r3, sp, #192	@ 0xc0
 8013fca:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013fce:	440b      	add	r3, r1
 8013fd0:	2c01      	cmp	r4, #1
 8013fd2:	dc67      	bgt.n	80140a4 <__kernel_rem_pio2f+0x4ac>
 8013fd4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013fd8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013fdc:	2e00      	cmp	r6, #0
 8013fde:	d167      	bne.n	80140b0 <__kernel_rem_pio2f+0x4b8>
 8013fe0:	edc7 6a00 	vstr	s13, [r7]
 8013fe4:	ed87 7a01 	vstr	s14, [r7, #4]
 8013fe8:	edc7 7a02 	vstr	s15, [r7, #8]
 8013fec:	e7d8      	b.n	8013fa0 <__kernel_rem_pio2f+0x3a8>
 8013fee:	ab30      	add	r3, sp, #192	@ 0xc0
 8013ff0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8013ff4:	440b      	add	r3, r1
 8013ff6:	4622      	mov	r2, r4
 8013ff8:	2a00      	cmp	r2, #0
 8013ffa:	da24      	bge.n	8014046 <__kernel_rem_pio2f+0x44e>
 8013ffc:	b34e      	cbz	r6, 8014052 <__kernel_rem_pio2f+0x45a>
 8013ffe:	eef1 7a47 	vneg.f32	s15, s14
 8014002:	edc7 7a00 	vstr	s15, [r7]
 8014006:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801400a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801400e:	aa31      	add	r2, sp, #196	@ 0xc4
 8014010:	2301      	movs	r3, #1
 8014012:	429c      	cmp	r4, r3
 8014014:	da20      	bge.n	8014058 <__kernel_rem_pio2f+0x460>
 8014016:	b10e      	cbz	r6, 801401c <__kernel_rem_pio2f+0x424>
 8014018:	eef1 7a67 	vneg.f32	s15, s15
 801401c:	edc7 7a01 	vstr	s15, [r7, #4]
 8014020:	e7be      	b.n	8013fa0 <__kernel_rem_pio2f+0x3a8>
 8014022:	ab30      	add	r3, sp, #192	@ 0xc0
 8014024:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013ef0 <__kernel_rem_pio2f+0x2f8>
 8014028:	440b      	add	r3, r1
 801402a:	2c00      	cmp	r4, #0
 801402c:	da05      	bge.n	801403a <__kernel_rem_pio2f+0x442>
 801402e:	b10e      	cbz	r6, 8014034 <__kernel_rem_pio2f+0x43c>
 8014030:	eef1 7a67 	vneg.f32	s15, s15
 8014034:	edc7 7a00 	vstr	s15, [r7]
 8014038:	e7b2      	b.n	8013fa0 <__kernel_rem_pio2f+0x3a8>
 801403a:	ed33 7a01 	vldmdb	r3!, {s14}
 801403e:	3c01      	subs	r4, #1
 8014040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014044:	e7f1      	b.n	801402a <__kernel_rem_pio2f+0x432>
 8014046:	ed73 7a01 	vldmdb	r3!, {s15}
 801404a:	3a01      	subs	r2, #1
 801404c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014050:	e7d2      	b.n	8013ff8 <__kernel_rem_pio2f+0x400>
 8014052:	eef0 7a47 	vmov.f32	s15, s14
 8014056:	e7d4      	b.n	8014002 <__kernel_rem_pio2f+0x40a>
 8014058:	ecb2 7a01 	vldmia	r2!, {s14}
 801405c:	3301      	adds	r3, #1
 801405e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014062:	e7d6      	b.n	8014012 <__kernel_rem_pio2f+0x41a>
 8014064:	ed72 7a01 	vldmdb	r2!, {s15}
 8014068:	edd2 6a01 	vldr	s13, [r2, #4]
 801406c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014070:	3801      	subs	r0, #1
 8014072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014076:	ed82 7a00 	vstr	s14, [r2]
 801407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801407e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014082:	e79c      	b.n	8013fbe <__kernel_rem_pio2f+0x3c6>
 8014084:	ed73 7a01 	vldmdb	r3!, {s15}
 8014088:	edd3 6a01 	vldr	s13, [r3, #4]
 801408c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014090:	3a01      	subs	r2, #1
 8014092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014096:	ed83 7a00 	vstr	s14, [r3]
 801409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801409e:	edc3 7a01 	vstr	s15, [r3, #4]
 80140a2:	e78f      	b.n	8013fc4 <__kernel_rem_pio2f+0x3cc>
 80140a4:	ed33 7a01 	vldmdb	r3!, {s14}
 80140a8:	3c01      	subs	r4, #1
 80140aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140ae:	e78f      	b.n	8013fd0 <__kernel_rem_pio2f+0x3d8>
 80140b0:	eef1 6a66 	vneg.f32	s13, s13
 80140b4:	eeb1 7a47 	vneg.f32	s14, s14
 80140b8:	edc7 6a00 	vstr	s13, [r7]
 80140bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80140c0:	eef1 7a67 	vneg.f32	s15, s15
 80140c4:	e790      	b.n	8013fe8 <__kernel_rem_pio2f+0x3f0>
 80140c6:	bf00      	nop

080140c8 <scalbnf>:
 80140c8:	ee10 3a10 	vmov	r3, s0
 80140cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80140d0:	d02b      	beq.n	801412a <scalbnf+0x62>
 80140d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80140d6:	d302      	bcc.n	80140de <scalbnf+0x16>
 80140d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80140dc:	4770      	bx	lr
 80140de:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80140e2:	d123      	bne.n	801412c <scalbnf+0x64>
 80140e4:	4b24      	ldr	r3, [pc, #144]	@ (8014178 <scalbnf+0xb0>)
 80140e6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801417c <scalbnf+0xb4>
 80140ea:	4298      	cmp	r0, r3
 80140ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80140f0:	db17      	blt.n	8014122 <scalbnf+0x5a>
 80140f2:	ee10 3a10 	vmov	r3, s0
 80140f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80140fa:	3a19      	subs	r2, #25
 80140fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014100:	4288      	cmp	r0, r1
 8014102:	dd15      	ble.n	8014130 <scalbnf+0x68>
 8014104:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014180 <scalbnf+0xb8>
 8014108:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014184 <scalbnf+0xbc>
 801410c:	ee10 3a10 	vmov	r3, s0
 8014110:	eeb0 7a67 	vmov.f32	s14, s15
 8014114:	2b00      	cmp	r3, #0
 8014116:	bfb8      	it	lt
 8014118:	eef0 7a66 	vmovlt.f32	s15, s13
 801411c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014120:	4770      	bx	lr
 8014122:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014188 <scalbnf+0xc0>
 8014126:	ee27 0a80 	vmul.f32	s0, s15, s0
 801412a:	4770      	bx	lr
 801412c:	0dd2      	lsrs	r2, r2, #23
 801412e:	e7e5      	b.n	80140fc <scalbnf+0x34>
 8014130:	4410      	add	r0, r2
 8014132:	28fe      	cmp	r0, #254	@ 0xfe
 8014134:	dce6      	bgt.n	8014104 <scalbnf+0x3c>
 8014136:	2800      	cmp	r0, #0
 8014138:	dd06      	ble.n	8014148 <scalbnf+0x80>
 801413a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801413e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014142:	ee00 3a10 	vmov	s0, r3
 8014146:	4770      	bx	lr
 8014148:	f110 0f16 	cmn.w	r0, #22
 801414c:	da09      	bge.n	8014162 <scalbnf+0x9a>
 801414e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014188 <scalbnf+0xc0>
 8014152:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801418c <scalbnf+0xc4>
 8014156:	ee10 3a10 	vmov	r3, s0
 801415a:	eeb0 7a67 	vmov.f32	s14, s15
 801415e:	2b00      	cmp	r3, #0
 8014160:	e7d9      	b.n	8014116 <scalbnf+0x4e>
 8014162:	3019      	adds	r0, #25
 8014164:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014168:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801416c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014190 <scalbnf+0xc8>
 8014170:	ee07 3a90 	vmov	s15, r3
 8014174:	e7d7      	b.n	8014126 <scalbnf+0x5e>
 8014176:	bf00      	nop
 8014178:	ffff3cb0 	.word	0xffff3cb0
 801417c:	4c000000 	.word	0x4c000000
 8014180:	7149f2ca 	.word	0x7149f2ca
 8014184:	f149f2ca 	.word	0xf149f2ca
 8014188:	0da24260 	.word	0x0da24260
 801418c:	8da24260 	.word	0x8da24260
 8014190:	33000000 	.word	0x33000000

08014194 <floorf>:
 8014194:	ee10 3a10 	vmov	r3, s0
 8014198:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801419c:	3a7f      	subs	r2, #127	@ 0x7f
 801419e:	2a16      	cmp	r2, #22
 80141a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80141a4:	dc2b      	bgt.n	80141fe <floorf+0x6a>
 80141a6:	2a00      	cmp	r2, #0
 80141a8:	da12      	bge.n	80141d0 <floorf+0x3c>
 80141aa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014210 <floorf+0x7c>
 80141ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ba:	dd06      	ble.n	80141ca <floorf+0x36>
 80141bc:	2b00      	cmp	r3, #0
 80141be:	da24      	bge.n	801420a <floorf+0x76>
 80141c0:	2900      	cmp	r1, #0
 80141c2:	4b14      	ldr	r3, [pc, #80]	@ (8014214 <floorf+0x80>)
 80141c4:	bf08      	it	eq
 80141c6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80141ca:	ee00 3a10 	vmov	s0, r3
 80141ce:	4770      	bx	lr
 80141d0:	4911      	ldr	r1, [pc, #68]	@ (8014218 <floorf+0x84>)
 80141d2:	4111      	asrs	r1, r2
 80141d4:	420b      	tst	r3, r1
 80141d6:	d0fa      	beq.n	80141ce <floorf+0x3a>
 80141d8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014210 <floorf+0x7c>
 80141dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e8:	ddef      	ble.n	80141ca <floorf+0x36>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	bfbe      	ittt	lt
 80141ee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80141f2:	fa40 f202 	asrlt.w	r2, r0, r2
 80141f6:	189b      	addlt	r3, r3, r2
 80141f8:	ea23 0301 	bic.w	r3, r3, r1
 80141fc:	e7e5      	b.n	80141ca <floorf+0x36>
 80141fe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014202:	d3e4      	bcc.n	80141ce <floorf+0x3a>
 8014204:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014208:	4770      	bx	lr
 801420a:	2300      	movs	r3, #0
 801420c:	e7dd      	b.n	80141ca <floorf+0x36>
 801420e:	bf00      	nop
 8014210:	7149f2ca 	.word	0x7149f2ca
 8014214:	bf800000 	.word	0xbf800000
 8014218:	007fffff 	.word	0x007fffff

0801421c <_init>:
 801421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801421e:	bf00      	nop
 8014220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014222:	bc08      	pop	{r3}
 8014224:	469e      	mov	lr, r3
 8014226:	4770      	bx	lr

08014228 <_fini>:
 8014228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801422a:	bf00      	nop
 801422c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801422e:	bc08      	pop	{r3}
 8014230:	469e      	mov	lr, r3
 8014232:	4770      	bx	lr


stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c54  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08013e38  08013e38  00014e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014640  08014640  000162d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014640  08014640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014648  08014648  000162d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014648  08014648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801464c  0801464c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08014650  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002128  200002d4  08014924  000162d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  08014924  000163fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002456c  00000000  00000000  00016304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005303  00000000  00000000  0003a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  0003fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ea  00000000  00000000  00041920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002998b  00000000  00000000  0004300a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c21  00000000  00000000  0006c995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebd80  00000000  00000000  000965b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009098  00000000  00000000  0018237c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018b414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013e1c 	.word	0x08013e1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	08013e1c 	.word	0x08013e1c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	0000      	movs	r0, r0
	...

08001008 <AHRS_Update_Gyro>:

#include "AHRS.h"

Vec3 attitude_gyro, euler_rates_gyro, attitude_acc, attitude = {0.0f, 0.0f, 0.0f};

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	eef0 6a40 	vmov.f32	s13, s0
 8001016:	eeb0 7a60 	vmov.f32	s14, s1
 800101a:	eef0 7a41 	vmov.f32	s15, s2
 800101e:	edc7 1a00 	vstr	s3, [r7]
 8001022:	edc7 6a01 	vstr	s13, [r7, #4]
 8001026:	ed87 7a02 	vstr	s14, [r7, #8]
 800102a:	edc7 7a03 	vstr	s15, [r7, #12]

	euler_rates_gyro.x = gyro.x + gyro.y*sinf(attitude.x)*tanf(attitude.y) + gyro.z*cosf(attitude.x)*tanf(attitude.y);
 800102e:	ed97 8a01 	vldr	s16, [r7, #4]
 8001032:	edd7 8a02 	vldr	s17, [r7, #8]
 8001036:	4bba      	ldr	r3, [pc, #744]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	f011 fe6e 	bl	8012d20 <sinf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800104c:	4bb4      	ldr	r3, [pc, #720]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 800104e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f011 fea9 	bl	8012dac <tanf>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001062:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001066:	edd7 8a03 	vldr	s17, [r7, #12]
 800106a:	4bad      	ldr	r3, [pc, #692]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f011 fe08 	bl	8012c88 <cosf>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001080:	4ba7      	ldr	r3, [pc, #668]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 8001082:	edd3 7a01 	vldr	s15, [r3, #4]
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	f011 fe8f 	bl	8012dac <tanf>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001096:	ee78 7a27 	vadd.f32	s15, s16, s15
 800109a:	4ba2      	ldr	r3, [pc, #648]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
	euler_rates_gyro.y = gyro.y*cosf(attitude.x) - gyro.z*sinf(attitude.x);
 80010a0:	ed97 8a02 	vldr	s16, [r7, #8]
 80010a4:	4b9e      	ldr	r3, [pc, #632]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	f011 fdeb 	bl	8012c88 <cosf>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80010ba:	edd7 8a03 	vldr	s17, [r7, #12]
 80010be:	4b98      	ldr	r3, [pc, #608]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	f011 fe2a 	bl	8012d20 <sinf>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010d4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80010d8:	4b92      	ldr	r3, [pc, #584]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 80010da:	edc3 7a01 	vstr	s15, [r3, #4]
	euler_rates_gyro.z = gyro.y*sinf(attitude.x)/cosf(attitude.y) + gyro.z*cosf(attitude.x)/cosf(attitude.y);
 80010de:	ed97 8a02 	vldr	s16, [r7, #8]
 80010e2:	4b8f      	ldr	r3, [pc, #572]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f011 fe18 	bl	8012d20 <sinf>
 80010f0:	eef0 7a40 	vmov.f32	s15, s0
 80010f4:	ee68 8a27 	vmul.f32	s17, s16, s15
 80010f8:	4b89      	ldr	r3, [pc, #548]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 80010fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	f011 fdc1 	bl	8012c88 <cosf>
 8001106:	eef0 7a40 	vmov.f32	s15, s0
 800110a:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800110e:	edd7 8a03 	vldr	s17, [r7, #12]
 8001112:	4b83      	ldr	r3, [pc, #524]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f011 fdb4 	bl	8012c88 <cosf>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001128:	4b7d      	ldr	r3, [pc, #500]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 800112a:	edd3 7a01 	vldr	s15, [r3, #4]
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f011 fda9 	bl	8012c88 <cosf>
 8001136:	eeb0 7a40 	vmov.f32	s14, s0
 800113a:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800113e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001142:	4b78      	ldr	r3, [pc, #480]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 8001144:	edc3 7a02 	vstr	s15, [r3, #8]

	attitude_gyro.x = attitude.x + euler_rates_gyro.x * dt * DEG_TO_RAD;
 8001148:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa23 	bl	8000598 <__aeabi_f2d>
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	4b73      	ldr	r3, [pc, #460]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	edd7 7a00 	vldr	s15, [r7]
 8001160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001164:	ee17 0a90 	vmov	r0, s15
 8001168:	f7ff fa16 	bl	8000598 <__aeabi_f2d>
 800116c:	a366      	add	r3, pc, #408	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x300>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fa69 	bl	8000648 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff f8ad 	bl	80002dc <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd55 	bl	8000c38 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	4a65      	ldr	r2, [pc, #404]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 8001192:	6013      	str	r3, [r2, #0]
	attitude_gyro.y = attitude.y + euler_rates_gyro.y * dt * DEG_TO_RAD;
 8001194:	4b62      	ldr	r3, [pc, #392]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9fd 	bl	8000598 <__aeabi_f2d>
 800119e:	4604      	mov	r4, r0
 80011a0:	460d      	mov	r5, r1
 80011a2:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 80011a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80011a8:	edd7 7a00 	vldr	s15, [r7]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	ee17 0a90 	vmov	r0, s15
 80011b4:	f7ff f9f0 	bl	8000598 <__aeabi_f2d>
 80011b8:	a353      	add	r3, pc, #332	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x300>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa43 	bl	8000648 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff f887 	bl	80002dc <__adddf3>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fd2f 	bl	8000c38 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80011de:	6053      	str	r3, [r2, #4]
	attitude_gyro.z = attitude.z + euler_rates_gyro.z * dt * DEG_TO_RAD;
 80011e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001320 <AHRS_Update_Gyro+0x318>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9d7 	bl	8000598 <__aeabi_f2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
 80011ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <AHRS_Update_Gyro+0x31c>)
 80011f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f4:	edd7 7a00 	vldr	s15, [r7]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f7ff f9ca 	bl	8000598 <__aeabi_f2d>
 8001204:	a340      	add	r3, pc, #256	@ (adr r3, 8001308 <AHRS_Update_Gyro+0x300>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fa1d 	bl	8000648 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff f861 	bl	80002dc <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fd09 	bl	8000c38 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4a3f      	ldr	r2, [pc, #252]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 800122a:	6093      	str	r3, [r2, #8]

	if(attitude_gyro.x > M_PI || attitude_gyro.x <= -M_PI) attitude_gyro.x = -attitude_gyro.x;
 800122c:	4b3e      	ldr	r3, [pc, #248]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9b1 	bl	8000598 <__aeabi_f2d>
 8001236:	a336      	add	r3, pc, #216	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x308>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <AHRS_Update_Gyro+0x258>
 8001246:	4b38      	ldr	r3, [pc, #224]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9a4 	bl	8000598 <__aeabi_f2d>
 8001250:	a331      	add	r3, pc, #196	@ (adr r3, 8001318 <AHRS_Update_Gyro+0x310>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff fc73 	bl	8000b40 <__aeabi_dcmple>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <AHRS_Update_Gyro+0x268>
 8001260:	4b31      	ldr	r3, [pc, #196]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eef1 7a67 	vneg.f32	s15, s15
 800126a:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 800126c:	edc3 7a00 	vstr	s15, [r3]
	if(attitude_gyro.y > M_PI || attitude_gyro.y <= -M_PI) attitude_gyro.y = -attitude_gyro.y;
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f98f 	bl	8000598 <__aeabi_f2d>
 800127a:	a325      	add	r3, pc, #148	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x308>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff fc72 	bl	8000b68 <__aeabi_dcmpgt>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <AHRS_Update_Gyro+0x29c>
 800128a:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f982 	bl	8000598 <__aeabi_f2d>
 8001294:	a320      	add	r3, pc, #128	@ (adr r3, 8001318 <AHRS_Update_Gyro+0x310>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fc51 	bl	8000b40 <__aeabi_dcmple>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <AHRS_Update_Gyro+0x2ac>
 80012a4:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012aa:	eef1 7a67 	vneg.f32	s15, s15
 80012ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f96d 	bl	8000598 <__aeabi_f2d>
 80012be:	a314      	add	r3, pc, #80	@ (adr r3, 8001310 <AHRS_Update_Gyro+0x308>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fc50 	bl	8000b68 <__aeabi_dcmpgt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <AHRS_Update_Gyro+0x2e2>
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f960 	bl	8000598 <__aeabi_f2d>
 80012d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001318 <AHRS_Update_Gyro+0x310>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff fc2f 	bl	8000b40 <__aeabi_dcmple>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <AHRS_Update_Gyro+0x2e2>

}
 80012e8:	e007      	b.n	80012fa <AHRS_Update_Gyro+0x2f2>
	if(attitude_gyro.z > M_PI || attitude_gyro.z <= -M_PI) attitude_gyro.z = -attitude_gyro.z;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f0:	eef1 7a67 	vneg.f32	s15, s15
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <AHRS_Update_Gyro+0x320>)
 80012f6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	ecbd 8b02 	vpop	{d8}
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	a252dd11 	.word	0xa252dd11
 800130c:	3f91df46 	.word	0x3f91df46
 8001310:	54442d18 	.word	0x54442d18
 8001314:	400921fb 	.word	0x400921fb
 8001318:	54442d18 	.word	0x54442d18
 800131c:	c00921fb 	.word	0xc00921fb
 8001320:	20000314 	.word	0x20000314
 8001324:	200002fc 	.word	0x200002fc
 8001328:	200002f0 	.word	0x200002f0

0800132c <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 800132c:	b580      	push	{r7, lr}
 800132e:	ed2d 8b02 	vpush	{d8}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	eef0 6a40 	vmov.f32	s13, s0
 800133a:	eeb0 7a60 	vmov.f32	s14, s1
 800133e:	eef0 7a41 	vmov.f32	s15, s2
 8001342:	edc7 6a01 	vstr	s13, [r7, #4]
 8001346:	ed87 7a02 	vstr	s14, [r7, #8]
 800134a:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 800134e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001352:	ed97 7a03 	vldr	s14, [r7, #12]
 8001356:	eef0 0a47 	vmov.f32	s1, s14
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	f011 fc91 	bl	8012c84 <atan2f>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <AHRS_Update_Acc+0xb0>)
 8001368:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 800136c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001370:	eeb1 8a67 	vneg.f32	s16, s15
 8001374:	ed97 7a02 	vldr	s14, [r7, #8]
 8001378:	edd7 7a02 	vldr	s15, [r7, #8]
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	edd7 6a03 	vldr	s13, [r7, #12]
 8001384:	edd7 7a03 	vldr	s15, [r7, #12]
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001390:	ee17 0a90 	vmov	r0, s15
 8001394:	f7ff f900 	bl	8000598 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b10 	vmov	d0, r2, r3
 80013a0:	f011 fc44 	bl	8012c2c <sqrt>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fc44 	bl	8000c38 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	ee00 3a90 	vmov	s1, r3
 80013b6:	eeb0 0a48 	vmov.f32	s0, s16
 80013ba:	f011 fc63 	bl	8012c84 <atan2f>
 80013be:	eef0 7a40 	vmov.f32	s15, s0
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <AHRS_Update_Acc+0xb0>)
 80013c4:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <AHRS_Update_Acc+0xb4>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a03      	ldr	r2, [pc, #12]	@ (80013dc <AHRS_Update_Acc+0xb0>)
 80013ce:	6093      	str	r3, [r2, #8]

}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	ecbd 8b02 	vpop	{d8}
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000308 	.word	0x20000308
 80013e0:	200002f0 	.word	0x200002f0

080013e4 <AHRS_Update_Complementary_Filter>:

void AHRS_Update_Complementary_Filter(Vec3 gyro, Vec3 acc, float gain, float dt){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	eeb0 5a40 	vmov.f32	s10, s0
 80013ee:	eef0 5a60 	vmov.f32	s11, s1
 80013f2:	eeb0 6a41 	vmov.f32	s12, s2
 80013f6:	eef0 6a61 	vmov.f32	s13, s3
 80013fa:	eeb0 7a42 	vmov.f32	s14, s4
 80013fe:	eef0 7a62 	vmov.f32	s15, s5
 8001402:	ed87 3a01 	vstr	s6, [r7, #4]
 8001406:	edc7 3a00 	vstr	s7, [r7]
 800140a:	ed87 5a05 	vstr	s10, [r7, #20]
 800140e:	edc7 5a06 	vstr	s11, [r7, #24]
 8001412:	ed87 6a07 	vstr	s12, [r7, #28]
 8001416:	edc7 6a02 	vstr	s13, [r7, #8]
 800141a:	ed87 7a03 	vstr	s14, [r7, #12]
 800141e:	edc7 7a04 	vstr	s15, [r7, #16]

	AHRS_Update_Gyro(gyro, dt);
 8001422:	edd7 6a05 	vldr	s13, [r7, #20]
 8001426:	ed97 7a06 	vldr	s14, [r7, #24]
 800142a:	edd7 7a07 	vldr	s15, [r7, #28]
 800142e:	edd7 1a00 	vldr	s3, [r7]
 8001432:	eeb0 0a66 	vmov.f32	s0, s13
 8001436:	eef0 0a47 	vmov.f32	s1, s14
 800143a:	eeb0 1a67 	vmov.f32	s2, s15
 800143e:	f7ff fde3 	bl	8001008 <AHRS_Update_Gyro>
	AHRS_Update_Acc(acc);
 8001442:	edd7 6a02 	vldr	s13, [r7, #8]
 8001446:	ed97 7a03 	vldr	s14, [r7, #12]
 800144a:	edd7 7a04 	vldr	s15, [r7, #16]
 800144e:	eeb0 0a66 	vmov.f32	s0, s13
 8001452:	eef0 0a47 	vmov.f32	s1, s14
 8001456:	eeb0 1a67 	vmov.f32	s2, s15
 800145a:	f7ff ff67 	bl	800132c <AHRS_Update_Acc>

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <AHRS_Update_Complementary_Filter+0x10c>)
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	edd7 7a01 	vldr	s15, [r7, #4]
 8001468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <AHRS_Update_Complementary_Filter+0x110>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <AHRS_Update_Complementary_Filter+0x114>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <AHRS_Update_Complementary_Filter+0x10c>)
 800148e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001492:	edd7 7a01 	vldr	s15, [r7, #4]
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <AHRS_Update_Complementary_Filter+0x110>)
 80014a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <AHRS_Update_Complementary_Filter+0x114>)
 80014b6:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <AHRS_Update_Complementary_Filter+0x10c>)
 80014bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <AHRS_Update_Complementary_Filter+0x110>)
 80014d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <AHRS_Update_Complementary_Filter+0x114>)
 80014e4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200002f0 	.word	0x200002f0
 80014f4:	20000308 	.word	0x20000308
 80014f8:	20000314 	.word	0x20000314

080014fc <Battery_Begin>:

#include "Battery.h"

Battery battery;

HAL_StatusTypeDef Battery_Begin(ADC_HandleTypeDef *hadc){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ADC_Start_DMA(hadc, &battery.battery_raw, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <Battery_Begin+0x2c>)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f002 feb9 	bl	8004280 <HAL_ADC_Start_DMA>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <Battery_Begin+0x20>
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	e000      	b.n	800151e <Battery_Begin+0x22>

	return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000320 	.word	0x20000320

0800152c <Battery_Update>:

void Battery_Update(){
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	battery.vbat = 0.00886230468f * battery.battery_raw; // 3.3/4096*11
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <Battery_Update+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001558 <Battery_Update+0x2c>
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <Battery_Update+0x28>)
 8001546:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000320 	.word	0x20000320
 8001558:	3c113333 	.word	0x3c113333
 800155c:	00000000 	.word	0x00000000

08001560 <Stabilized_Mode>:

extern Vec3 attitude, integral;
extern float functions[10];


void Stabilized_Mode(Sbus receiver, float dt){
 8001560:	b084      	sub	sp, #16
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	f107 0c10 	add.w	ip, r7, #16
 800156c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001570:	ed87 0a01 	vstr	s0, [r7, #4]
	ref.x = (receiver.channels[ROLL_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_ROLL * DEG_TO_RAD;
 8001574:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001576:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001690 <Stabilized_Mode+0x130>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001694 <Stabilized_Mode+0x134>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	ee17 0a90 	vmov	r0, s15
 8001596:	f7fe ffff 	bl	8000598 <__aeabi_f2d>
 800159a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001688 <Stabilized_Mode+0x128>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f852 	bl	8000648 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb44 	bl	8000c38 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a39      	ldr	r2, [pc, #228]	@ (8001698 <Stabilized_Mode+0x138>)
 80015b4:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[PITCH_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_PITCH * DEG_TO_RAD;
 80015b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015b8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001690 <Stabilized_Mode+0x130>
 80015c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015cc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001694 <Stabilized_Mode+0x134>
 80015d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d4:	ee17 0a90 	vmov	r0, s15
 80015d8:	f7fe ffde 	bl	8000598 <__aeabi_f2d>
 80015dc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001688 <Stabilized_Mode+0x128>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f831 	bl	8000648 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fb23 	bl	8000c38 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <Stabilized_Mode+0x138>)
 80015f6:	6053      	str	r3, [r2, #4]

	PID_Update(ref, attitude, dt);
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <Stabilized_Mode+0x13c>)
 80015fa:	ed93 5a00 	vldr	s10, [r3]
 80015fe:	edd3 5a01 	vldr	s11, [r3, #4]
 8001602:	ed93 6a02 	vldr	s12, [r3, #8]
 8001606:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <Stabilized_Mode+0x138>)
 8001608:	edd3 6a00 	vldr	s13, [r3]
 800160c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001610:	edd3 7a02 	vldr	s15, [r3, #8]
 8001614:	ed97 3a01 	vldr	s6, [r7, #4]
 8001618:	eef0 1a45 	vmov.f32	s3, s10
 800161c:	eeb0 2a65 	vmov.f32	s4, s11
 8001620:	eef0 2a46 	vmov.f32	s5, s12
 8001624:	eeb0 0a66 	vmov.f32	s0, s13
 8001628:	eef0 0a47 	vmov.f32	s1, s14
 800162c:	eeb0 1a67 	vmov.f32	s2, s15
 8001630:	f000 ff6e 	bl	8002510 <PID_Update>

	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001634:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80016a0 <Stabilized_Mode+0x140>
 8001642:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001646:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80016a4 <Stabilized_Mode+0x144>
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <Stabilized_Mode+0x148>)
 8001650:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 8001654:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80016a0 <Stabilized_Mode+0x140>
 8001662:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001666:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80016a4 <Stabilized_Mode+0x144>
 800166a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <Stabilized_Mode+0x148>)
 8001670:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800167e:	b004      	add	sp, #16
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	a252dd11 	.word	0xa252dd11
 800168c:	3f91df46 	.word	0x3f91df46
 8001690:	3b03126f 	.word	0x3b03126f
 8001694:	42340000 	.word	0x42340000
 8001698:	20000328 	.word	0x20000328
 800169c:	20000314 	.word	0x20000314
 80016a0:	44bb8000 	.word	0x44bb8000
 80016a4:	43fa0000 	.word	0x43fa0000
 80016a8:	20000348 	.word	0x20000348
 80016ac:	00000000 	.word	0x00000000

080016b0 <Acro_Mode>:

void Acro_Mode(Sbus receiver, float dt){
 80016b0:	b084      	sub	sp, #16
 80016b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	f107 0420 	add.w	r4, r7, #32
 80016be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016c2:	ed87 0a01 	vstr	s0, [r7, #4]
	ref.x += (receiver.channels[ROLL_CHANNEL]-1500) * 0.002f * ACRO_ROLL_RATE * DEG_TO_RAD * dt;
 80016c6:	4b86      	ldr	r3, [pc, #536]	@ (80018e0 <Acro_Mode+0x230>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff64 	bl	8000598 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80016d6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80018e4 <Acro_Mode+0x234>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80018e8 <Acro_Mode+0x238>
 80016ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff4f 	bl	8000598 <__aeabi_f2d>
 80016fa:	a373      	add	r3, pc, #460	@ (adr r3, 80018c8 <Acro_Mode+0x218>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7fe ff43 	bl	8000598 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4640      	mov	r0, r8
 8001718:	4649      	mov	r1, r9
 800171a:	f7fe ff95 	bl	8000648 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	f7fe fdd9 	bl	80002dc <__adddf3>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa81 	bl	8000c38 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4a69      	ldr	r2, [pc, #420]	@ (80018e0 <Acro_Mode+0x230>)
 800173a:	6013      	str	r3, [r2, #0]
	ref.y += (receiver.channels[PITCH_CHANNEL]-1500) * 0.002f * ACRO_PITCH_RATE * DEG_TO_RAD * dt;
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <Acro_Mode+0x230>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff29 	bl	8000598 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800174c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001758:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80018e4 <Acro_Mode+0x234>
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80018e8 <Acro_Mode+0x238>
 8001764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001768:	ee17 0a90 	vmov	r0, s15
 800176c:	f7fe ff14 	bl	8000598 <__aeabi_f2d>
 8001770:	a355      	add	r3, pc, #340	@ (adr r3, 80018c8 <Acro_Mode+0x218>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff67 	bl	8000648 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4690      	mov	r8, r2
 8001780:	4699      	mov	r9, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe ff08 	bl	8000598 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4640      	mov	r0, r8
 800178e:	4649      	mov	r1, r9
 8001790:	f7fe ff5a 	bl	8000648 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd9e 	bl	80002dc <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff fa46 	bl	8000c38 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a4c      	ldr	r2, [pc, #304]	@ (80018e0 <Acro_Mode+0x230>)
 80017b0:	6053      	str	r3, [r2, #4]

	if(ref.x > M_PI || ref.x <= -M_PI) ref.x = -ref.x;
 80017b2:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <Acro_Mode+0x230>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe feee 	bl	8000598 <__aeabi_f2d>
 80017bc:	a344      	add	r3, pc, #272	@ (adr r3, 80018d0 <Acro_Mode+0x220>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7ff f9d1 	bl	8000b68 <__aeabi_dcmpgt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10c      	bne.n	80017e6 <Acro_Mode+0x136>
 80017cc:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <Acro_Mode+0x230>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fee1 	bl	8000598 <__aeabi_f2d>
 80017d6:	a340      	add	r3, pc, #256	@ (adr r3, 80018d8 <Acro_Mode+0x228>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f9b0 	bl	8000b40 <__aeabi_dcmple>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <Acro_Mode+0x146>
 80017e6:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <Acro_Mode+0x230>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eef1 7a67 	vneg.f32	s15, s15
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <Acro_Mode+0x230>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]
	if(ref.y > M_PI || ref.y <= -M_PI) ref.y = -ref.y;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <Acro_Mode+0x230>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fecc 	bl	8000598 <__aeabi_f2d>
 8001800:	a333      	add	r3, pc, #204	@ (adr r3, 80018d0 <Acro_Mode+0x220>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7ff f9af 	bl	8000b68 <__aeabi_dcmpgt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10c      	bne.n	800182a <Acro_Mode+0x17a>
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <Acro_Mode+0x230>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe febf 	bl	8000598 <__aeabi_f2d>
 800181a:	a32f      	add	r3, pc, #188	@ (adr r3, 80018d8 <Acro_Mode+0x228>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7ff f98e 	bl	8000b40 <__aeabi_dcmple>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <Acro_Mode+0x18a>
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <Acro_Mode+0x230>)
 800182c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001830:	eef1 7a67 	vneg.f32	s15, s15
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Acro_Mode+0x230>)
 8001836:	edc3 7a01 	vstr	s15, [r3, #4]

	PID_Update(ref, attitude, dt);
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <Acro_Mode+0x23c>)
 800183c:	ed93 5a00 	vldr	s10, [r3]
 8001840:	edd3 5a01 	vldr	s11, [r3, #4]
 8001844:	ed93 6a02 	vldr	s12, [r3, #8]
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <Acro_Mode+0x230>)
 800184a:	edd3 6a00 	vldr	s13, [r3]
 800184e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001852:	edd3 7a02 	vldr	s15, [r3, #8]
 8001856:	ed97 3a01 	vldr	s6, [r7, #4]
 800185a:	eef0 1a45 	vmov.f32	s3, s10
 800185e:	eeb0 2a65 	vmov.f32	s4, s11
 8001862:	eef0 2a46 	vmov.f32	s5, s12
 8001866:	eeb0 0a66 	vmov.f32	s0, s13
 800186a:	eef0 0a47 	vmov.f32	s1, s14
 800186e:	eeb0 1a67 	vmov.f32	s2, s15
 8001872:	f000 fe4d 	bl	8002510 <PID_Update>

	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001876:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80018f0 <Acro_Mode+0x240>
 8001886:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800188a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80018f4 <Acro_Mode+0x244>
 800188e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <Acro_Mode+0x248>)
 8001894:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 8001898:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80018f0 <Acro_Mode+0x240>
 80018a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018aa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80018f4 <Acro_Mode+0x244>
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <Acro_Mode+0x248>)
 80018b4:	edc3 7a03 	vstr	s15, [r3, #12]

}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 80018c2:	b004      	add	sp, #16
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	a252dd11 	.word	0xa252dd11
 80018cc:	3f91df46 	.word	0x3f91df46
 80018d0:	54442d18 	.word	0x54442d18
 80018d4:	400921fb 	.word	0x400921fb
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	c00921fb 	.word	0xc00921fb
 80018e0:	20000328 	.word	0x20000328
 80018e4:	3b03126f 	.word	0x3b03126f
 80018e8:	43340000 	.word	0x43340000
 80018ec:	20000314 	.word	0x20000314
 80018f0:	44bb8000 	.word	0x44bb8000
 80018f4:	43fa0000 	.word	0x43fa0000
 80018f8:	20000348 	.word	0x20000348

080018fc <Manual_Mode>:

void Manual_Mode(Sbus receiver){
 80018fc:	b084      	sub	sp, #16
 80018fe:	b490      	push	{r4, r7}
 8001900:	af00      	add	r7, sp, #0
 8001902:	f107 0408 	add.w	r4, r7, #8
 8001906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 800190a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001914:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001994 <Manual_Mode+0x98>
 8001918:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800191c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001998 <Manual_Mode+0x9c>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <Manual_Mode+0xa0>)
 8001926:	edc3 7a03 	vstr	s15, [r3, #12]
	functions[AILERONS] = (receiver.channels[ROLL_CHANNEL]-1500.0f)/500.0f;
 800192a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001994 <Manual_Mode+0x98>
 8001938:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800193c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001998 <Manual_Mode+0x9c>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <Manual_Mode+0xa0>)
 8001946:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = (receiver.channels[PITCH_CHANNEL]-1500.0f)/500.0f;
 800194a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001994 <Manual_Mode+0x98>
 8001958:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800195c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001998 <Manual_Mode+0x9c>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <Manual_Mode+0xa0>)
 8001966:	edc3 7a02 	vstr	s15, [r3, #8]
	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 800196a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001994 <Manual_Mode+0x98>
 8001978:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800197c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001998 <Manual_Mode+0x9c>
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <Manual_Mode+0xa0>)
 8001986:	edc3 7a04 	vstr	s15, [r3, #16]

}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc90      	pop	{r4, r7}
 8001990:	b004      	add	sp, #16
 8001992:	4770      	bx	lr
 8001994:	44bb8000 	.word	0x44bb8000
 8001998:	43fa0000 	.word	0x43fa0000
 800199c:	20000348 	.word	0x20000348

080019a0 <Process_Input>:

void Process_Input(Sbus receiver){
 80019a0:	b084      	sub	sp, #16
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	f107 0c18 	add.w	ip, r7, #24
 80019ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Configure MODES
	if(receiver.channels[FLIGHT_MODE_CHANNEL] < 1200){
 80019b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019b2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80019b6:	d203      	bcs.n	80019c0 <Process_Input+0x20>
		flight_mode = MANUAL_MODE;
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <Process_Input+0xec>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e00e      	b.n	80019de <Process_Input+0x3e>
	}
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80019c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019c2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80019c6:	d307      	bcc.n	80019d8 <Process_Input+0x38>
			receiver.channels[FLIGHT_MODE_CHANNEL] < 1800){
 80019c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80019ca:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80019ce:	d203      	bcs.n	80019d8 <Process_Input+0x38>
		flight_mode = STABILIZED_MODE;
 80019d0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <Process_Input+0xec>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e002      	b.n	80019de <Process_Input+0x3e>
	}
	else{
		flight_mode = ACRO_MODE;
 80019d8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <Process_Input+0xec>)
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
	}

	//DISARM ON FAILSAFE
	if(receiver.failsafe_status == SBUS_SIGNAL_FAILSAFE){
 80019de:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d108      	bne.n	80019f8 <Process_Input+0x58>
		flight_mode = STABILIZED_MODE;
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <Process_Input+0xec>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		arming = DISARMED;
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <Process_Input+0xf0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
		functions[THROTTLE] = -1.0f;
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <Process_Input+0xf4>)
 80019f4:	4a28      	ldr	r2, [pc, #160]	@ (8001a98 <Process_Input+0xf8>)
 80019f6:	60da      	str	r2, [r3, #12]
	}

	if(prev_flight_mode != flight_mode) { //Change in flight mode
 80019f8:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <Process_Input+0xfc>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <Process_Input+0xec>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d00b      	beq.n	8001a1c <Process_Input+0x7c>
		integral = (Vec3){0.0f, 0.0f, 0.0f}; //Reset integral part of PID
 8001a04:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <Process_Input+0x100>)
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <Process_Input+0x100>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <Process_Input+0x100>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
	}


	//Set Arming

	if(arming == DISARMED &&
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <Process_Input+0xf0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <Process_Input+0xa6>
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 8001a24:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
	if(arming == DISARMED &&
 8001a26:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d90b      	bls.n	8001a46 <Process_Input+0xa6>
		arming_edge_detect == 1 &&
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <Process_Input+0x104>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <Process_Input+0xa6>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001a36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
		arming_edge_detect == 1 &&
 8001a38:	f240 4219 	movw	r2, #1049	@ 0x419
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d802      	bhi.n	8001a46 <Process_Input+0xa6>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <Process_Input+0xf0>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
	if(arming == ARMED && receiver.channels[ARMING_CHANNEL] <= 1500) arming = DISARMED;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <Process_Input+0xf0>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <Process_Input+0xbe>
 8001a4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001a50:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d802      	bhi.n	8001a5e <Process_Input+0xbe>
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <Process_Input+0xf0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]


	arming_edge_detect = (receiver.channels[ARMING_CHANNEL] <= 1500)? 1:0;
 8001a5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001a60:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bf94      	ite	ls
 8001a68:	2301      	movls	r3, #1
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <Process_Input+0x104>)
 8001a72:	701a      	strb	r2, [r3, #0]
	prev_flight_mode = flight_mode;
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <Process_Input+0xec>)
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <Process_Input+0xfc>)
 8001a7a:	701a      	strb	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	b004      	add	sp, #16
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000334 	.word	0x20000334
 8001a90:	20000336 	.word	0x20000336
 8001a94:	20000348 	.word	0x20000348
 8001a98:	bf800000 	.word	0xbf800000
 8001a9c:	20000335 	.word	0x20000335
 8001aa0:	2000037c 	.word	0x2000037c
 8001aa4:	20000337 	.word	0x20000337

08001aa8 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 8001af8:	200a      	movs	r0, #10
 8001afa:	f002 fb59 	bl	80041b0 <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 8001afe:	f107 030e 	add.w	r3, r7, #14
 8001b02:	461a      	mov	r2, r3
 8001b04:	2175      	movs	r1, #117	@ 0x75
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa28 	bl	8001f5c <ICM42688_Read>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <ICM42688_Begin+0x72>
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	e05d      	b.n	8001bd6 <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	2b47      	cmp	r3, #71	@ 0x47
 8001b1e:	d001      	beq.n	8001b24 <ICM42688_Begin+0x7c>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e058      	b.n	8001bd6 <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 8001b24:	2326      	movs	r3, #38	@ 0x26
 8001b26:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 8001b28:	f107 030e 	add.w	r3, r7, #14
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	214f      	movs	r1, #79	@ 0x4f
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f9eb 	bl	8001f0c <ICM42688_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <ICM42688_Begin+0x9c>
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	e048      	b.n	8001bd6 <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2206      	movs	r2, #6
 8001b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 8001b54:	2346      	movs	r3, #70	@ 0x46
 8001b56:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001b58:	f107 030e 	add.w	r3, r7, #14
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2150      	movs	r1, #80	@ 0x50
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f9d3 	bl	8001f0c <ICM42688_Write>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <ICM42688_Begin+0xcc>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	e030      	b.n	8001bd6 <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2206      	movs	r2, #6
 8001b80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f863 	bl	8001c50 <ICM42688_Set_Interrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <ICM42688_Begin+0xf0>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	e01e      	b.n	8001bd6 <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f820 	bl	8001bde <ICM42688_Set_Filters>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <ICM42688_Begin+0x104>
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	e014      	b.n	8001bd6 <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 8001bac:	230f      	movs	r3, #15
 8001bae:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 8001bb0:	f107 030e 	add.w	r3, r7, #14
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	214e      	movs	r1, #78	@ 0x4e
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f9a7 	bl	8001f0c <ICM42688_Write>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <ICM42688_Begin+0x124>
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	e004      	b.n	8001bd6 <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 8001be6:	2300      	movs	r3, #0
 8001be8:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 8001bea:	f107 030e 	add.w	r3, r7, #14
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2151      	movs	r1, #81	@ 0x51
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f98a 	bl	8001f0c <ICM42688_Write>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <ICM42688_Set_Filters+0x28>
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	e020      	b.n	8001c48 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 8001c0a:	f107 030e 	add.w	r3, r7, #14
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2153      	movs	r1, #83	@ 0x53
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f97a 	bl	8001f0c <ICM42688_Write>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <ICM42688_Set_Filters+0x48>
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	e010      	b.n	8001c48 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 8001c26:	2333      	movs	r3, #51	@ 0x33
 8001c28:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 8001c2a:	f107 030e 	add.w	r3, r7, #14
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2152      	movs	r1, #82	@ 0x52
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f96a 	bl	8001f0c <ICM42688_Write>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <ICM42688_Set_Filters+0x68>
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	e000      	b.n	8001c48 <ICM42688_Set_Filters+0x6a>

	return status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001c58:	2303      	movs	r3, #3
 8001c5a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 8001c5c:	f107 030e 	add.w	r3, r7, #14
 8001c60:	461a      	mov	r2, r3
 8001c62:	2114      	movs	r1, #20
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f951 	bl	8001f0c <ICM42688_Write>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <ICM42688_Set_Interrupts+0x28>
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	e031      	b.n	8001cdc <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001c78:	f107 030e 	add.w	r3, r7, #14
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2164      	movs	r1, #100	@ 0x64
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f96b 	bl	8001f5c <ICM42688_Read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <ICM42688_Set_Interrupts+0x44>
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	e023      	b.n	8001cdc <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	f023 0310 	bic.w	r3, r3, #16
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 8001c9e:	f107 030e 	add.w	r3, r7, #14
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2164      	movs	r1, #100	@ 0x64
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f930 	bl	8001f0c <ICM42688_Write>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <ICM42688_Set_Interrupts+0x6a>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	e010      	b.n	8001cdc <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001cba:	2308      	movs	r3, #8
 8001cbc:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 8001cbe:	f107 030e 	add.w	r3, r7, #14
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2165      	movs	r1, #101	@ 0x65
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f920 	bl	8001f0c <ICM42688_Write>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <ICM42688_Set_Interrupts+0x8a>
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	e000      	b.n	8001cdc <ICM42688_Set_Interrupts+0x8c>

	return status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0000      	movs	r0, r0
	...

08001ce8 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 8001d0a:	8afb      	ldrh	r3, [r7, #22]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d14:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001f00 <ICM42688_Process_Buffer+0x218>
 8001d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001d78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001f04 <ICM42688_Process_Buffer+0x21c>
 8001d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001d92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	eeb1 7a67 	vneg.f32	s14, s15
 8001da2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001f04 <ICM42688_Process_Buffer+0x21c>
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001db0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbc:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001f04 <ICM42688_Process_Buffer+0x21c>
 8001dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 8001e18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e24:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001f08 <ICM42688_Process_Buffer+0x220>
 8001e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001e32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3e:	eeb1 7a67 	vneg.f32	s14, s15
 8001e42:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001f08 <ICM42688_Process_Buffer+0x220>
 8001e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001f08 <ICM42688_Process_Buffer+0x220>
 8001e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -3.13812327; //Calibration
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb92 	bl	8000598 <__aeabi_f2d>
 8001e74:	a31c      	add	r3, pc, #112	@ (adr r3, 8001ee8 <ICM42688_Process_Buffer+0x200>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fa2f 	bl	80002dc <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fed7 	bl	8000c38 <__aeabi_d2f>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
	device->gyro.y -= 0.0449692011;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb7f 	bl	8000598 <__aeabi_f2d>
 8001e9a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ef0 <ICM42688_Process_Buffer+0x208>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fa1a 	bl	80002d8 <__aeabi_dsub>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fec4 	bl	8000c38 <__aeabi_d2f>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.46484378;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb6c 	bl	8000598 <__aeabi_f2d>
 8001ec0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ef8 <ICM42688_Process_Buffer+0x210>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fa07 	bl	80002d8 <__aeabi_dsub>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe feb1 	bl	8000c38 <__aeabi_d2f>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]

	//device->gyro.x *= DEG_TO_RAD;
	//device->gyro.y *= DEG_TO_RAD;
	//device->gyro.z *= DEG_TO_RAD;

}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	5f7bbb8d 	.word	0x5f7bbb8d
 8001eec:	40091ae0 	.word	0x40091ae0
 8001ef0:	001a7e9d 	.word	0x001a7e9d
 8001ef4:	3fa70634 	.word	0x3fa70634
 8001ef8:	20365653 	.word	0x20365653
 8001efc:	3fddc000 	.word	0x3fddc000
 8001f00:	43047ae1 	.word	0x43047ae1
 8001f04:	46000000 	.word	0x46000000
 8001f08:	42033333 	.word	0x42033333

08001f0c <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	460b      	mov	r3, r1
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	753b      	strb	r3, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2110      	movs	r1, #16
 8001f28:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <ICM42688_Write+0x4c>)
 8001f2a:	f003 fcd7 	bl	80058dc <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f107 0114 	add.w	r1, r7, #20
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f006 f9e7 	bl	800830e <HAL_SPI_Transmit>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001f44:	2201      	movs	r2, #1
 8001f46:	2110      	movs	r1, #16
 8001f48:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <ICM42688_Write+0x4c>)
 8001f4a:	f003 fcc7 	bl	80058dc <HAL_GPIO_WritePin>

	return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020000 	.word	0x40020000

08001f5c <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	460b      	mov	r3, r1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2110      	movs	r1, #16
 8001f78:	4815      	ldr	r0, [pc, #84]	@ (8001fd0 <ICM42688_Read+0x74>)
 8001f7a:	f003 fcaf 	bl	80058dc <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	f107 0116 	add.w	r1, r7, #22
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f006 f9bf 	bl	800830e <HAL_SPI_Transmit>
 8001f90:	4603      	mov	r3, r0
 8001f92:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <ICM42688_Read+0x42>
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	e014      	b.n	8001fc8 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	f006 fb26 	bl	80085fa <HAL_SPI_Receive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <ICM42688_Read+0x60>
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	e005      	b.n	8001fc8 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <ICM42688_Read+0x74>)
 8001fc2:	f003 fc8b 	bl	80058dc <HAL_GPIO_WritePin>

	return status;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 8001fdc:	239d      	movs	r3, #157	@ 0x9d
 8001fde:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <ICM42688_Read_DMA+0x44>)
 8001fe6:	f003 fc79 	bl	80058dc <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001ff4:	f107 0108 	add.w	r1, r7, #8
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	f006 fe55 	bl	8008ca8 <HAL_SPI_TransmitReceive_DMA>
 8001ffe:	4603      	mov	r3, r0
 8002000:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <ICM42688_Read_DMA+0x38>
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	e000      	b.n	800200e <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 800200c:	7dfb      	ldrb	r3, [r7, #23]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40020000 	.word	0x40020000

0800201c <Output_Begin>:

uint16_t outputs[8];
float functions[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
extern Arming arming;

HAL_StatusTypeDef Output_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8002026:	2100      	movs	r1, #0
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f007 fc97 	bl	800995c <HAL_TIM_PWM_Start>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <Output_Begin+0x20>
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	e04d      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 800203c:	2104      	movs	r1, #4
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f007 fc8c 	bl	800995c <HAL_TIM_PWM_Start>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <Output_Begin+0x36>
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	e042      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 8002052:	2108      	movs	r1, #8
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f007 fc81 	bl	800995c <HAL_TIM_PWM_Start>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <Output_Begin+0x4c>
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	e037      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 8002068:	210c      	movs	r1, #12
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f007 fc76 	bl	800995c <HAL_TIM_PWM_Start>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <Output_Begin+0x62>
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	e02c      	b.n	80020d8 <Output_Begin+0xbc>

	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 800207e:	2100      	movs	r1, #0
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f007 fc6b 	bl	800995c <HAL_TIM_PWM_Start>
 8002086:	4603      	mov	r3, r0
 8002088:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <Output_Begin+0x78>
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	e021      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8002094:	2104      	movs	r1, #4
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f007 fc60 	bl	800995c <HAL_TIM_PWM_Start>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <Output_Begin+0x8e>
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	e016      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80020aa:	2108      	movs	r1, #8
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f007 fc55 	bl	800995c <HAL_TIM_PWM_Start>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <Output_Begin+0xa4>
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	e00b      	b.n	80020d8 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80020c0:	210c      	movs	r1, #12
 80020c2:	6838      	ldr	r0, [r7, #0]
 80020c4:	f007 fc4a 	bl	800995c <HAL_TIM_PWM_Start>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <Output_Begin+0xba>
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	e000      	b.n	80020d8 <Output_Begin+0xbc>

	return status;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8f;
 80020ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002168 <Servo_Move+0x88>
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fe:	ee17 3a90 	vmov	r3, s15
 8002102:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <Servo_Move+0x34>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	8afa      	ldrh	r2, [r7, #22]
 8002110:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002112:	e023      	b.n	800215c <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d104      	bne.n	8002124 <Servo_Move+0x44>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	8afb      	ldrh	r3, [r7, #22]
 8002120:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002122:	e01b      	b.n	800215c <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d104      	bne.n	8002134 <Servo_Move+0x54>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	8afb      	ldrh	r3, [r7, #22]
 8002130:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002132:	e013      	b.n	800215c <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d104      	bne.n	8002144 <Servo_Move+0x64>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	8afb      	ldrh	r3, [r7, #22]
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002142:	e00b      	b.n	800215c <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b10      	cmp	r3, #16
 8002148:	d104      	bne.n	8002154 <Servo_Move+0x74>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	8afb      	ldrh	r3, [r7, #22]
 8002150:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002152:	e003      	b.n	800215c <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	8afb      	ldrh	r3, [r7, #22]
 800215a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	3fe66666 	.word	0x3fe66666
 800216c:	00000000 	.word	0x00000000

08002170 <Output_Update>:

void Output_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]

	if(arming == DISARMED) functions[THROTTLE] = -1.0f;
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <Output_Update+0x20>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <Output_Update+0x18>
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <Output_Update+0x24>)
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <Output_Update+0x28>)
 8002186:	60da      	str	r2, [r3, #12]

	//Clamp to [-1,1] range
	for(int i = 0; i < 10; i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e030      	b.n	80021f0 <Output_Update+0x80>
 800218e:	bf00      	nop
 8002190:	20000336 	.word	0x20000336
 8002194:	20000348 	.word	0x20000348
 8002198:	bf800000 	.word	0xbf800000
		if(functions[i]<-1.0f) functions[i] = -1.0f;
 800219c:	4ad0      	ldr	r2, [pc, #832]	@ (80024e0 <Output_Update+0x370>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d505      	bpl.n	80021c2 <Output_Update+0x52>
 80021b6:	4aca      	ldr	r2, [pc, #808]	@ (80024e0 <Output_Update+0x370>)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	4ac9      	ldr	r2, [pc, #804]	@ (80024e4 <Output_Update+0x374>)
 80021c0:	601a      	str	r2, [r3, #0]
		if(functions[i]>1.0f) functions[i] = 1.0f;
 80021c2:	4ac7      	ldr	r2, [pc, #796]	@ (80024e0 <Output_Update+0x370>)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	dd06      	ble.n	80021ea <Output_Update+0x7a>
 80021dc:	4ac0      	ldr	r2, [pc, #768]	@ (80024e0 <Output_Update+0x370>)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80021e8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b09      	cmp	r3, #9
 80021f4:	ddd2      	ble.n	800219c <Output_Update+0x2c>
	}

	outputs[0] = functions[OUT1_FUNCTION] * (OUT1_MAX - OUT1_MIN)*(-OUT1_REVERSE+0.5) + OUT1_TRIM;
 80021f6:	4bba      	ldr	r3, [pc, #744]	@ (80024e0 <Output_Update+0x370>)
 80021f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021fc:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80024e8 <Output_Update+0x378>
 8002200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002204:	ee17 0a90 	vmov	r0, s15
 8002208:	f7fe f9c6 	bl	8000598 <__aeabi_f2d>
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4bb6      	ldr	r3, [pc, #728]	@ (80024ec <Output_Update+0x37c>)
 8002212:	f7fe fa19 	bl	8000648 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	a3ae      	add	r3, pc, #696	@ (adr r3, 80024d8 <Output_Update+0x368>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe f85a 	bl	80002dc <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fce2 	bl	8000bf8 <__aeabi_d2uiz>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	4bad      	ldr	r3, [pc, #692]	@ (80024f0 <Output_Update+0x380>)
 800223a:	801a      	strh	r2, [r3, #0]
	outputs[1] = functions[OUT2_FUNCTION] * (OUT2_MAX - OUT2_MIN)*(-OUT2_REVERSE+0.5) + OUT2_TRIM;
 800223c:	4ba8      	ldr	r3, [pc, #672]	@ (80024e0 <Output_Update+0x370>)
 800223e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002242:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80024e8 <Output_Update+0x378>
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	ee17 0a90 	vmov	r0, s15
 800224e:	f7fe f9a3 	bl	8000598 <__aeabi_f2d>
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4ba5      	ldr	r3, [pc, #660]	@ (80024ec <Output_Update+0x37c>)
 8002258:	f7fe f9f6 	bl	8000648 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	a39c      	add	r3, pc, #624	@ (adr r3, 80024d8 <Output_Update+0x368>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f837 	bl	80002dc <__adddf3>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fcbf 	bl	8000bf8 <__aeabi_d2uiz>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b9c      	ldr	r3, [pc, #624]	@ (80024f0 <Output_Update+0x380>)
 8002280:	805a      	strh	r2, [r3, #2]
	outputs[2] = functions[OUT3_FUNCTION] * (OUT3_MAX - OUT3_MIN)*(-OUT3_REVERSE+0.5) + OUT3_TRIM;
 8002282:	4b97      	ldr	r3, [pc, #604]	@ (80024e0 <Output_Update+0x370>)
 8002284:	edd3 7a02 	vldr	s15, [r3, #8]
 8002288:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80024e8 <Output_Update+0x378>
 800228c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002290:	ee17 0a90 	vmov	r0, s15
 8002294:	f7fe f980 	bl	8000598 <__aeabi_f2d>
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b93      	ldr	r3, [pc, #588]	@ (80024ec <Output_Update+0x37c>)
 800229e:	f7fe f9d3 	bl	8000648 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	a38b      	add	r3, pc, #556	@ (adr r3, 80024d8 <Output_Update+0x368>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f814 	bl	80002dc <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc9c 	bl	8000bf8 <__aeabi_d2uiz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b8a      	ldr	r3, [pc, #552]	@ (80024f0 <Output_Update+0x380>)
 80022c6:	809a      	strh	r2, [r3, #4]
	outputs[3] = functions[OUT4_FUNCTION] * (OUT4_MAX - OUT4_MIN)*(-OUT4_REVERSE+0.5) + OUT4_TRIM;
 80022c8:	4b85      	ldr	r3, [pc, #532]	@ (80024e0 <Output_Update+0x370>)
 80022ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ce:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80024e8 <Output_Update+0x378>
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	ee17 0a90 	vmov	r0, s15
 80022da:	f7fe f95d 	bl	8000598 <__aeabi_f2d>
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <Output_Update+0x37c>)
 80022e4:	f7fe f9b0 	bl	8000648 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	a379      	add	r3, pc, #484	@ (adr r3, 80024d8 <Output_Update+0x368>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fd fff1 	bl	80002dc <__adddf3>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f7fe fc79 	bl	8000bf8 <__aeabi_d2uiz>
 8002306:	4603      	mov	r3, r0
 8002308:	b29a      	uxth	r2, r3
 800230a:	4b79      	ldr	r3, [pc, #484]	@ (80024f0 <Output_Update+0x380>)
 800230c:	80da      	strh	r2, [r3, #6]
	outputs[4] = functions[OUT5_FUNCTION] * (OUT5_MAX - OUT5_MIN)*(-OUT5_REVERSE+0.5) + OUT5_TRIM;
 800230e:	4b74      	ldr	r3, [pc, #464]	@ (80024e0 <Output_Update+0x370>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80024e8 <Output_Update+0x378>
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f7fe f93a 	bl	8000598 <__aeabi_f2d>
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <Output_Update+0x37c>)
 800232a:	f7fe f98d 	bl	8000648 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	a368      	add	r3, pc, #416	@ (adr r3, 80024d8 <Output_Update+0x368>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fd ffce 	bl	80002dc <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc56 	bl	8000bf8 <__aeabi_d2uiz>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b67      	ldr	r3, [pc, #412]	@ (80024f0 <Output_Update+0x380>)
 8002352:	811a      	strh	r2, [r3, #8]
	outputs[5] = functions[OUT6_FUNCTION] * (OUT6_MAX - OUT6_MIN)*(-OUT6_REVERSE+0.5) + OUT6_TRIM;
 8002354:	4b62      	ldr	r3, [pc, #392]	@ (80024e0 <Output_Update+0x370>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80024e8 <Output_Update+0x378>
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	ee17 0a90 	vmov	r0, s15
 8002366:	f7fe f917 	bl	8000598 <__aeabi_f2d>
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <Output_Update+0x37c>)
 8002370:	f7fe f96a 	bl	8000648 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	a356      	add	r3, pc, #344	@ (adr r3, 80024d8 <Output_Update+0x368>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fd ffab 	bl	80002dc <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fc33 	bl	8000bf8 <__aeabi_d2uiz>
 8002392:	4603      	mov	r3, r0
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b56      	ldr	r3, [pc, #344]	@ (80024f0 <Output_Update+0x380>)
 8002398:	815a      	strh	r2, [r3, #10]
	outputs[6] = functions[OUT7_FUNCTION] * (OUT7_MAX - OUT7_MIN)*(-OUT7_REVERSE+0.5) + OUT7_TRIM;
 800239a:	4b51      	ldr	r3, [pc, #324]	@ (80024e0 <Output_Update+0x370>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80024e8 <Output_Update+0x378>
 80023a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a8:	ee17 0a90 	vmov	r0, s15
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	4b4d      	ldr	r3, [pc, #308]	@ (80024ec <Output_Update+0x37c>)
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	a345      	add	r3, pc, #276	@ (adr r3, 80024d8 <Output_Update+0x368>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd ff88 	bl	80002dc <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fc10 	bl	8000bf8 <__aeabi_d2uiz>
 80023d8:	4603      	mov	r3, r0
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <Output_Update+0x380>)
 80023de:	819a      	strh	r2, [r3, #12]
	outputs[7] = functions[OUT8_FUNCTION] * (OUT8_MAX - OUT8_MIN)*(-OUT8_REVERSE+0.5) + OUT8_TRIM;
 80023e0:	4b3f      	ldr	r3, [pc, #252]	@ (80024e0 <Output_Update+0x370>)
 80023e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80024e8 <Output_Update+0x378>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	ee17 0a90 	vmov	r0, s15
 80023f2:	f7fe f8d1 	bl	8000598 <__aeabi_f2d>
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <Output_Update+0x37c>)
 80023fc:	f7fe f924 	bl	8000648 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	a333      	add	r3, pc, #204	@ (adr r3, 80024d8 <Output_Update+0x368>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fd ff65 	bl	80002dc <__adddf3>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbed 	bl	8000bf8 <__aeabi_d2uiz>
 800241e:	4603      	mov	r3, r0
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b33      	ldr	r3, [pc, #204]	@ (80024f0 <Output_Update+0x380>)
 8002424:	81da      	strh	r2, [r3, #14]


	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 8002426:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <Output_Update+0x380>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002432:	eeb0 0a67 	vmov.f32	s0, s15
 8002436:	2100      	movs	r1, #0
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fe51 	bl	80020e0 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 800243e:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <Output_Update+0x380>)
 8002440:	885b      	ldrh	r3, [r3, #2]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	eeb0 0a67 	vmov.f32	s0, s15
 800244e:	2104      	movs	r1, #4
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fe45 	bl	80020e0 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 8002456:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <Output_Update+0x380>)
 8002458:	889b      	ldrh	r3, [r3, #4]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eeb0 0a67 	vmov.f32	s0, s15
 8002466:	2108      	movs	r1, #8
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fe39 	bl	80020e0 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <Output_Update+0x380>)
 8002470:	88db      	ldrh	r3, [r3, #6]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	210c      	movs	r1, #12
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe2d 	bl	80020e0 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 8002486:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <Output_Update+0x380>)
 8002488:	891b      	ldrh	r3, [r3, #8]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	2100      	movs	r1, #0
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f7ff fe21 	bl	80020e0 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <Output_Update+0x380>)
 80024a0:	895b      	ldrh	r3, [r3, #10]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	eeb0 0a67 	vmov.f32	s0, s15
 80024ae:	2104      	movs	r1, #4
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	f7ff fe15 	bl	80020e0 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 80024b6:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <Output_Update+0x380>)
 80024b8:	899b      	ldrh	r3, [r3, #12]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	2108      	movs	r1, #8
 80024c8:	6838      	ldr	r0, [r7, #0]
 80024ca:	f7ff fe09 	bl	80020e0 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <Output_Update+0x380>)
 80024d0:	89db      	ldrh	r3, [r3, #14]
 80024d2:	e00f      	b.n	80024f4 <Output_Update+0x384>
 80024d4:	f3af 8000 	nop.w
 80024d8:	00000000 	.word	0x00000000
 80024dc:	40977000 	.word	0x40977000
 80024e0:	20000348 	.word	0x20000348
 80024e4:	bf800000 	.word	0xbf800000
 80024e8:	447a0000 	.word	0x447a0000
 80024ec:	3fe00000 	.word	0x3fe00000
 80024f0:	20000338 	.word	0x20000338
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002500:	210c      	movs	r1, #12
 8002502:	6838      	ldr	r0, [r7, #0]
 8002504:	f7ff fdec 	bl	80020e0 <Servo_Move>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <PID_Update>:

extern float functions[10];

Vec3 ref_prev, error_prev, integral = {0.0f, 0.0f, 0.0f};

void PID_Update(Vec3 ref, Vec3 attitude, float dt){
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b08e      	sub	sp, #56	@ 0x38
 8002516:	af00      	add	r7, sp, #0
 8002518:	eeb0 5a40 	vmov.f32	s10, s0
 800251c:	eef0 5a60 	vmov.f32	s11, s1
 8002520:	eeb0 6a41 	vmov.f32	s12, s2
 8002524:	eef0 6a61 	vmov.f32	s13, s3
 8002528:	eeb0 7a42 	vmov.f32	s14, s4
 800252c:	eef0 7a62 	vmov.f32	s15, s5
 8002530:	ed87 3a01 	vstr	s6, [r7, #4]
 8002534:	ed87 5a05 	vstr	s10, [r7, #20]
 8002538:	edc7 5a06 	vstr	s11, [r7, #24]
 800253c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002540:	edc7 6a02 	vstr	s13, [r7, #8]
 8002544:	ed87 7a03 	vstr	s14, [r7, #12]
 8002548:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 800254c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002550:	edd7 7a02 	vldr	s15, [r7, #8]
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800255c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002560:	edd7 7a03 	vldr	s15, [r7, #12]
 8002564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002568:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 800256c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002570:	edd7 7a04 	vldr	s15, [r7, #16]
 8002574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002578:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	integral.x += error.x * dt;
 800257c:	4b84      	ldr	r3, [pc, #528]	@ (8002790 <PID_Update+0x280>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002586:	edd7 7a01 	vldr	s15, [r7, #4]
 800258a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	4b7f      	ldr	r3, [pc, #508]	@ (8002790 <PID_Update+0x280>)
 8002594:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 8002598:	4b7d      	ldr	r3, [pc, #500]	@ (8002790 <PID_Update+0x280>)
 800259a:	ed93 7a01 	vldr	s14, [r3, #4]
 800259e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	4b78      	ldr	r3, [pc, #480]	@ (8002790 <PID_Update+0x280>)
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 80025b4:	4b76      	ldr	r3, [pc, #472]	@ (8002790 <PID_Update+0x280>)
 80025b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80025ba:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80025be:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <PID_Update+0x280>)
 80025cc:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = ROLL_KP*error.x + ROLL_KD*(error.x-error_prev.x)/dt + ROLL_KI*integral.x;
 80025d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffe0 	bl	8000598 <__aeabi_f2d>
 80025d8:	a365      	add	r3, pc, #404	@ (adr r3, 8002770 <PID_Update+0x260>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f833 	bl	8000648 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	461d      	mov	r5, r3
 80025ea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025ee:	4b69      	ldr	r3, [pc, #420]	@ (8002794 <PID_Update+0x284>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	ee17 0a90 	vmov	r0, s15
 80025fc:	f7fd ffcc 	bl	8000598 <__aeabi_f2d>
 8002600:	a35d      	add	r3, pc, #372	@ (adr r3, 8002778 <PID_Update+0x268>)
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f7fe f81f 	bl	8000648 <__aeabi_dmul>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fd ffc0 	bl	8000598 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4640      	mov	r0, r8
 800261e:	4649      	mov	r1, r9
 8002620:	f7fe f93c 	bl	800089c <__aeabi_ddiv>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f7fd fe56 	bl	80002dc <__adddf3>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
 8002638:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <PID_Update+0x280>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ffab 	bl	8000598 <__aeabi_f2d>
 8002642:	a34f      	add	r3, pc, #316	@ (adr r3, 8002780 <PID_Update+0x270>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fd fffe 	bl	8000648 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe42 	bl	80002dc <__adddf3>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe faea 	bl	8000c38 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <PID_Update+0x288>)
 8002668:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] = PITCH_KP*error.y + PITCH_KD*(error.y-error_prev.y)/dt + PITCH_KI*integral.y;
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff93 	bl	8000598 <__aeabi_f2d>
 8002672:	a33f      	add	r3, pc, #252	@ (adr r3, 8002770 <PID_Update+0x260>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ffe6 	bl	8000648 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002688:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <PID_Update+0x284>)
 800268a:	edd3 7a01 	vldr	s15, [r3, #4]
 800268e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002692:	ee17 0a90 	vmov	r0, s15
 8002696:	f7fd ff7f 	bl	8000598 <__aeabi_f2d>
 800269a:	a337      	add	r3, pc, #220	@ (adr r3, 8002778 <PID_Update+0x268>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffd2 	bl	8000648 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4690      	mov	r8, r2
 80026aa:	4699      	mov	r9, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fd ff73 	bl	8000598 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4640      	mov	r0, r8
 80026b8:	4649      	mov	r1, r9
 80026ba:	f7fe f8ef 	bl	800089c <__aeabi_ddiv>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fd fe09 	bl	80002dc <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4614      	mov	r4, r2
 80026d0:	461d      	mov	r5, r3
 80026d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <PID_Update+0x280>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff5e 	bl	8000598 <__aeabi_f2d>
 80026dc:	a328      	add	r3, pc, #160	@ (adr r3, 8002780 <PID_Update+0x270>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fd ffb1 	bl	8000648 <__aeabi_dmul>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd fdf5 	bl	80002dc <__adddf3>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa9d 	bl	8000c38 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a25      	ldr	r2, [pc, #148]	@ (8002798 <PID_Update+0x288>)
 8002702:	6093      	str	r3, [r2, #8]

	functions[AILERONS] /= M_PI_2;
 8002704:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <PID_Update+0x288>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff45 	bl	8000598 <__aeabi_f2d>
 800270e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002788 <PID_Update+0x278>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fe f8c2 	bl	800089c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa8a 	bl	8000c38 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <PID_Update+0x288>)
 8002728:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 800272a:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <PID_Update+0x288>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff32 	bl	8000598 <__aeabi_f2d>
 8002734:	a314      	add	r3, pc, #80	@ (adr r3, 8002788 <PID_Update+0x278>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f8af 	bl	800089c <__aeabi_ddiv>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa77 	bl	8000c38 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <PID_Update+0x288>)
 800274e:	6093      	str	r3, [r2, #8]

	error_prev = (Vec3) {.x = error.x, .y = error.y, .z = error.z};
 8002750:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002756:	480f      	ldr	r0, [pc, #60]	@ (8002794 <PID_Update+0x284>)
 8002758:	6001      	str	r1, [r0, #0]
 800275a:	490e      	ldr	r1, [pc, #56]	@ (8002794 <PID_Update+0x284>)
 800275c:	604a      	str	r2, [r1, #4]
 800275e:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <PID_Update+0x284>)
 8002760:	6093      	str	r3, [r2, #8]
}
 8002762:	bf00      	nop
 8002764:	3738      	adds	r7, #56	@ 0x38
 8002766:	46bd      	mov	sp, r7
 8002768:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800276c:	f3af 8000 	nop.w
 8002770:	cccccccd 	.word	0xcccccccd
 8002774:	3ffccccc 	.word	0x3ffccccc
 8002778:	33333333 	.word	0x33333333
 800277c:	3fe33333 	.word	0x3fe33333
 8002780:	9999999a 	.word	0x9999999a
 8002784:	3fe99999 	.word	0x3fe99999
 8002788:	54442d18 	.word	0x54442d18
 800278c:	3ff921fb 	.word	0x3ff921fb
 8002790:	2000037c 	.word	0x2000037c
 8002794:	20000370 	.word	0x20000370
 8002798:	20000348 	.word	0x20000348

0800279c <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	HAL_UART_AbortReceive(huart); //Sbus is already sending before initialising, cancel reception to avoid HAL_ERROR
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f008 f850 	bl	800a84c <HAL_UART_AbortReceive>

	status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2219      	movs	r2, #25
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f009 fa65 	bl	800bc82 <HAL_UARTEx_ReceiveToIdle_DMA>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <Sbus_Begin+0x2a>
		return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	e000      	b.n	80027c8 <Sbus_Begin+0x2c>
	}

	return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	3bc0      	subs	r3, #192	@ 0xc0
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002848 <sbus_raw_to_us+0x78>
 80027ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800284c <sbus_raw_to_us+0x7c>
 80027f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002848 <sbus_raw_to_us+0x78>
 80027fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027fe:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002802:	edd7 7a03 	vldr	s15, [r7, #12]
 8002806:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002848 <sbus_raw_to_us+0x78>
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	d501      	bpl.n	8002818 <sbus_raw_to_us+0x48>
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <sbus_raw_to_us+0x80>)
 8002816:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 8002818:	edd7 7a03 	vldr	s15, [r7, #12]
 800281c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002854 <sbus_raw_to_us+0x84>
 8002820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	dd01      	ble.n	800282e <sbus_raw_to_us+0x5e>
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <sbus_raw_to_us+0x88>)
 800282c:	60fb      	str	r3, [r7, #12]
	return us;
 800282e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002836:	ee17 3a90 	vmov	r3, s15
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	447a0000 	.word	0x447a0000
 800284c:	44c80000 	.word	0x44c80000
 8002850:	447a0000 	.word	0x447a0000
 8002854:	44fa0000 	.word	0x44fa0000
 8002858:	44fa0000 	.word	0x44fa0000

0800285c <Sbus_decode>:

void Sbus_decode(Sbus *receiver){
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((receiver->buffer[1]    |receiver->buffer[2]<<8)                           & 0x07FF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	b21a      	sxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	789b      	ldrb	r3, [r3, #2]
 800286e:	b21b      	sxth	r3, r3
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287e:	b29b      	uxth	r3, r3
 8002880:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((receiver->buffer[2]>>3 |receiver->buffer[3]<<5)                           & 0x07FF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	789b      	ldrb	r3, [r3, #2]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	b21a      	sxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	78db      	ldrb	r3, [r3, #3]
 8002890:	b21b      	sxth	r3, r3
 8002892:	015b      	lsls	r3, r3, #5
 8002894:	b21b      	sxth	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b21b      	sxth	r3, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((receiver->buffer[3]>>6 |receiver->buffer[4]<<2 |receiver->buffer[5]<<10)  & 0x07FF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	78db      	ldrb	r3, [r3, #3]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	791b      	ldrb	r3, [r3, #4]
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	795b      	ldrb	r3, [r3, #5]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((receiver->buffer[5]>>1 |receiver->buffer[6]<<7)                           & 0x07FF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	b21a      	sxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	799b      	ldrb	r3, [r3, #6]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	01db      	lsls	r3, r3, #7
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((receiver->buffer[6]>>4 |receiver->buffer[7]<<4)                           & 0x07FF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	799b      	ldrb	r3, [r3, #6]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	b21a      	sxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	79db      	ldrb	r3, [r3, #7]
 8002904:	b21b      	sxth	r3, r3
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	b29b      	uxth	r3, r3
 8002910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002914:	b29b      	uxth	r3, r3
 8002916:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((receiver->buffer[7]>>7 |receiver->buffer[8]<<1 |receiver->buffer[9]<<9)   & 0x07FF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	79db      	ldrb	r3, [r3, #7]
 800291c:	09db      	lsrs	r3, r3, #7
 800291e:	b2db      	uxtb	r3, r3
 8002920:	b21a      	sxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7a1b      	ldrb	r3, [r3, #8]
 8002926:	b21b      	sxth	r3, r3
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	b21b      	sxth	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b21a      	sxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7a5b      	ldrb	r3, [r3, #9]
 8002934:	b21b      	sxth	r3, r3
 8002936:	025b      	lsls	r3, r3, #9
 8002938:	b21b      	sxth	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b21b      	sxth	r3, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002944:	b29b      	uxth	r3, r3
 8002946:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((receiver->buffer[9]>>2 |receiver->buffer[10]<<6)                          & 0x07FF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7a5b      	ldrb	r3, [r3, #9]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	b2db      	uxtb	r3, r3
 8002950:	b21a      	sxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7a9b      	ldrb	r3, [r3, #10]
 8002956:	b21b      	sxth	r3, r3
 8002958:	019b      	lsls	r3, r3, #6
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b21b      	sxth	r3, r3
 8002960:	b29b      	uxth	r3, r3
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	b29b      	uxth	r3, r3
 8002968:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((receiver->buffer[10]>>5|receiver->buffer[11]<<3)                          & 0x07FF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7a9b      	ldrb	r3, [r3, #10]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	b21a      	sxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7adb      	ldrb	r3, [r3, #11]
 8002978:	b21b      	sxth	r3, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21b      	sxth	r3, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002988:	b29b      	uxth	r3, r3
 800298a:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((receiver->buffer[12]   |receiver->buffer[13]<<8)                          & 0x07FF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7b1b      	ldrb	r3, [r3, #12]
 8002990:	b21a      	sxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b5b      	ldrb	r3, [r3, #13]
 8002996:	b21b      	sxth	r3, r3
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	b21b      	sxth	r3, r3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((receiver->buffer[13]>>3|receiver->buffer[14]<<5)                          & 0x07FF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7b5b      	ldrb	r3, [r3, #13]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7b9b      	ldrb	r3, [r3, #14]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	b21b      	sxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((receiver->buffer[14]>>6|receiver->buffer[15]<<2|receiver->buffer[16]<<10) & 0x07FF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7b9b      	ldrb	r3, [r3, #14]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	b21a      	sxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7bdb      	ldrb	r3, [r3, #15]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	b21b      	sxth	r3, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b21a      	sxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7c1b      	ldrb	r3, [r3, #16]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	029b      	lsls	r3, r3, #10
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((receiver->buffer[16]>>1|receiver->buffer[17]<<7)                          & 0x07FF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7c1b      	ldrb	r3, [r3, #16]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7c5b      	ldrb	r3, [r3, #17]
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	01db      	lsls	r3, r3, #7
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((receiver->buffer[17]>>4|receiver->buffer[18]<<4)                          & 0x07FF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7c5b      	ldrb	r3, [r3, #17]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7c9b      	ldrb	r3, [r3, #18]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((receiver->buffer[18]>>7|receiver->buffer[19]<<1|receiver->buffer[20]<<9)  & 0x07FF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7c9b      	ldrb	r3, [r3, #18]
 8002a44:	09db      	lsrs	r3, r3, #7
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7cdb      	ldrb	r3, [r3, #19]
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7d1b      	ldrb	r3, [r3, #20]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	025b      	lsls	r3, r3, #9
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((receiver->buffer[20]>>2|receiver->buffer[21]<<6)                          & 0x07FF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7d1b      	ldrb	r3, [r3, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7d5b      	ldrb	r3, [r3, #21]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((receiver->buffer[21]>>5|receiver->buffer[22]<<3)                          & 0x07FF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7d5b      	ldrb	r3, [r3, #21]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7d9b      	ldrb	r3, [r3, #22]
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (receiver->buffer[23] & (1 << 0)) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7ddb      	ldrb	r3, [r3, #23]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <Sbus_decode+0x26a>
    	raw_channels[16] = 1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002ac4:	e001      	b.n	8002aca <Sbus_decode+0x26e>
    }
    else {
    	raw_channels[16] = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (receiver->buffer[23] & (1 << 1)) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7ddb      	ldrb	r3, [r3, #23]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <Sbus_decode+0x280>
    	raw_channels[17] = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002ada:	e001      	b.n	8002ae0 <Sbus_decode+0x284>
    }
    else {
    	raw_channels[17] = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    // Failsafe
	receiver->failsafe_status = SBUS_SIGNAL_OK;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	if (receiver->buffer[23] & (1 << 2)) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7ddb      	ldrb	r3, [r3, #23]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <Sbus_decode+0x2a0>
		receiver->failsafe_status = SBUS_SIGNAL_LOST;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

	if (receiver->buffer[23] & (1 << 3)) {
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7ddb      	ldrb	r3, [r3, #23]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <Sbus_decode+0x2b4>
		receiver->failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	}

    for(int i = 0; i < 18; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b14:	e014      	b.n	8002b40 <Sbus_decode+0x2e4>
    	receiver->channels[i] = sbus_raw_to_us(raw_channels[i]);
 8002b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	3330      	adds	r3, #48	@ 0x30
 8002b1c:	443b      	add	r3, r7
 8002b1e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe54 	bl	80027d0 <sbus_raw_to_us>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	330c      	adds	r3, #12
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	460a      	mov	r2, r1
 8002b38:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 18; i++){
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	2b11      	cmp	r3, #17
 8002b44:	dde7      	ble.n	8002b16 <Sbus_decode+0x2ba>
    }
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	3730      	adds	r7, #48	@ 0x30
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_UARTEx_RxEventCallback>:

uint32_t timer = 0;
extern Arming arming;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart4.Instance){
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_UARTEx_RxEventCallback+0x58>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d11b      	bne.n	8002ba0 <HAL_UARTEx_RxEventCallback+0x50>

		if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 8002b68:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d10b      	bne.n	8002b88 <HAL_UARTEx_RxEventCallback+0x38>
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_UARTEx_RxEventCallback+0x38>
			Sbus_decode(&receiver);
 8002b78:	480c      	ldr	r0, [pc, #48]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b7a:	f7ff fe6f 	bl	800285c <Sbus_decode>
			receiver.dataRdy = 1;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			receiver.dataRdy = 0;
			HAL_UART_AbortReceive(&huart4);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
		}
	}
}
 8002b86:	e00b      	b.n	8002ba0 <HAL_UARTEx_RxEventCallback+0x50>
			receiver.dataRdy = 0;
 8002b88:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			HAL_UART_AbortReceive(&huart4);
 8002b90:	4805      	ldr	r0, [pc, #20]	@ (8002ba8 <HAL_UARTEx_RxEventCallback+0x58>)
 8002b92:	f007 fe5b 	bl	800a84c <HAL_UART_AbortReceive>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
 8002b96:	2219      	movs	r2, #25
 8002b98:	4904      	ldr	r1, [pc, #16]	@ (8002bac <HAL_UARTEx_RxEventCallback+0x5c>)
 8002b9a:	4803      	ldr	r0, [pc, #12]	@ (8002ba8 <HAL_UARTEx_RxEventCallback+0x58>)
 8002b9c:	f009 f871 	bl	800bc82 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000640 	.word	0x20000640
 8002bac:	20000838 	.word	0x20000838

08002bb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d107      	bne.n	8002bd0 <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x28>)
 8002bc2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 8002bca:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x28>)
 8002bcc:	f7ff fa02 	bl	8001fd4 <ICM42688_Read_DMA>
		}

	}

}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000878 	.word	0x20000878

08002bdc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_SPI_TxRxCpltCallback+0x34>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10b      	bne.n	8002c08 <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	4807      	ldr	r0, [pc, #28]	@ (8002c14 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002bf6:	f002 fe71 	bl	80058dc <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 8002bfa:	4807      	ldr	r0, [pc, #28]	@ (8002c18 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002bfc:	f7ff f874 	bl	8001ce8 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000484 	.word	0x20000484
 8002c14:	40020000 	.word	0x40020000
 8002c18:	20000878 	.word	0x20000878

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b08d      	sub	sp, #52	@ 0x34
 8002c20:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002c22:	f000 fceb 	bl	80035fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c26:	f001 fa66 	bl	80040f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2a:	f000 f915 	bl	8002e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c2e:	f000 fc59 	bl	80034e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c32:	f000 fc15 	bl	8003460 <MX_DMA_Init>
  MX_ADC1_Init();
 8002c36:	f000 f97b 	bl	8002f30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c3a:	f000 f9cb 	bl	8002fd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c3e:	f000 fa09 	bl	8003054 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002c42:	f000 fa45 	bl	80030d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c46:	f000 fadb 	bl	8003200 <MX_TIM3_Init>
  MX_UART4_Init();
 8002c4a:	f000 fb71 	bl	8003330 <MX_UART4_Init>
  MX_UART5_Init();
 8002c4e:	f000 fba7 	bl	80033a0 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8002c52:	f000 fbd5 	bl	8003400 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8002c56:	f00c fc0d 	bl	800f474 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  //Start Sbus Reception and Sync
  if(Sbus_Begin(&huart4, &receiver) != HAL_OK) {
 8002c5a:	4970      	ldr	r1, [pc, #448]	@ (8002e1c <main+0x200>)
 8002c5c:	4870      	ldr	r0, [pc, #448]	@ (8002e20 <main+0x204>)
 8002c5e:	f7ff fd9d 	bl	800279c <Sbus_Begin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <main+0x50>
	  Error_Handler();
 8002c68:	f000 fcf4 	bl	8003654 <Error_Handler>
  }

  //Start IMU, configure ranges, filters & interrupts
  if(ICM42688_Begin(&imu, &hspi1) != HAL_OK) {
 8002c6c:	496d      	ldr	r1, [pc, #436]	@ (8002e24 <main+0x208>)
 8002c6e:	486e      	ldr	r0, [pc, #440]	@ (8002e28 <main+0x20c>)
 8002c70:	f7fe ff1a 	bl	8001aa8 <ICM42688_Begin>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <main+0x62>
	  Error_Handler();
 8002c7a:	f000 fceb 	bl	8003654 <Error_Handler>
  }

  //Start DMA Read for Vbat ADC
  if(Battery_Begin(&hadc1) != HAL_OK) {
 8002c7e:	486b      	ldr	r0, [pc, #428]	@ (8002e2c <main+0x210>)
 8002c80:	f7fe fc3c 	bl	80014fc <Battery_Begin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <main+0x72>
	  Error_Handler();
 8002c8a:	f000 fce3 	bl	8003654 <Error_Handler>
  }

  //Configure output timers
  if(Output_Begin(&htim2, &htim3) != HAL_OK) {
 8002c8e:	4968      	ldr	r1, [pc, #416]	@ (8002e30 <main+0x214>)
 8002c90:	4868      	ldr	r0, [pc, #416]	@ (8002e34 <main+0x218>)
 8002c92:	f7ff f9c3 	bl	800201c <Output_Begin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <main+0x84>
	  Error_Handler();
 8002c9c:	f000 fcda 	bl	8003654 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8002ca0:	f001 fa7a 	bl	8004198 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b64      	ldr	r3, [pc, #400]	@ (8002e38 <main+0x21c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	f240 8095 	bls.w	8002ddc <main+0x1c0>

		Battery_Update();
 8002cb2:	f7fe fc3b 	bl	800152c <Battery_Update>

		if(imu.dataRdy){
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <main+0x20c>)
 8002cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01f      	beq.n	8002d00 <main+0xe4>

			AHRS_Update_Complementary_Filter(imu.gyro, imu.accel, 0.95, DELTA_T);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <main+0x20c>)
 8002cc2:	ed93 5a01 	vldr	s10, [r3, #4]
 8002cc6:	edd3 5a02 	vldr	s11, [r3, #8]
 8002cca:	ed93 6a03 	vldr	s12, [r3, #12]
 8002cce:	4b56      	ldr	r3, [pc, #344]	@ (8002e28 <main+0x20c>)
 8002cd0:	edd3 6a04 	vldr	s13, [r3, #16]
 8002cd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cd8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cdc:	eddf 3a57 	vldr	s7, [pc, #348]	@ 8002e3c <main+0x220>
 8002ce0:	ed9f 3a57 	vldr	s6, [pc, #348]	@ 8002e40 <main+0x224>
 8002ce4:	eef0 1a45 	vmov.f32	s3, s10
 8002ce8:	eeb0 2a65 	vmov.f32	s4, s11
 8002cec:	eef0 2a46 	vmov.f32	s5, s12
 8002cf0:	eeb0 0a66 	vmov.f32	s0, s13
 8002cf4:	eef0 0a47 	vmov.f32	s1, s14
 8002cf8:	eeb0 1a67 	vmov.f32	s2, s15
 8002cfc:	f7fe fb72 	bl	80013e4 <AHRS_Update_Complementary_Filter>

		}

		if(receiver.dataRdy){
 8002d00:	4b46      	ldr	r3, [pc, #280]	@ (8002e1c <main+0x200>)
 8002d02:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d051      	beq.n	8002dae <main+0x192>

			Process_Input(receiver);
 8002d0a:	4e44      	ldr	r6, [pc, #272]	@ (8002e1c <main+0x200>)
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d26:	f7fe fe3b 	bl	80019a0 <Process_Input>

			if(flight_mode == ACRO_MODE) Acro_Mode(receiver, DELTA_T);
 8002d2a:	4b46      	ldr	r3, [pc, #280]	@ (8002e44 <main+0x228>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d112      	bne.n	8002d58 <main+0x13c>
 8002d32:	4e3a      	ldr	r6, [pc, #232]	@ (8002e1c <main+0x200>)
 8002d34:	466d      	mov	r5, sp
 8002d36:	f106 0410 	add.w	r4, r6, #16
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d4a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d4e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002e3c <main+0x220>
 8002d52:	f7fe fcad 	bl	80016b0 <Acro_Mode>
 8002d56:	e02a      	b.n	8002dae <main+0x192>
			else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver, DELTA_T);
 8002d58:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <main+0x228>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d112      	bne.n	8002d86 <main+0x16a>
 8002d60:	4e2e      	ldr	r6, [pc, #184]	@ (8002e1c <main+0x200>)
 8002d62:	466d      	mov	r5, sp
 8002d64:	f106 0410 	add.w	r4, r6, #16
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d7c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002e3c <main+0x220>
 8002d80:	f7fe fbee 	bl	8001560 <Stabilized_Mode>
 8002d84:	e013      	b.n	8002dae <main+0x192>
			else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver);
 8002d86:	4b2f      	ldr	r3, [pc, #188]	@ (8002e44 <main+0x228>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <main+0x192>
 8002d8e:	4e23      	ldr	r6, [pc, #140]	@ (8002e1c <main+0x200>)
 8002d90:	466d      	mov	r5, sp
 8002d92:	f106 0410 	add.w	r4, r6, #16
 8002d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002da2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002da6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002daa:	f7fe fda7 	bl	80018fc <Manual_Mode>

		}

		Output_Update(&htim2, &htim3);
 8002dae:	4920      	ldr	r1, [pc, #128]	@ (8002e30 <main+0x214>)
 8002db0:	4820      	ldr	r0, [pc, #128]	@ (8002e34 <main+0x218>)
 8002db2:	f7ff f9dd 	bl	8002170 <Output_Update>



		timer += DELTA_T*1000;
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <main+0x21c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbca 	bl	8000554 <__aeabi_ui2d>
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <main+0x22c>)
 8002dc6:	f7fd fa89 	bl	80002dc <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff11 	bl	8000bf8 <__aeabi_d2uiz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <main+0x21c>)
 8002dda:	6013      	str	r3, [r2, #0]

	}

	sprintf(usbBuffer, "%f, %f\r\n", attitude.x, attitude.y);
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <main+0x230>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbd9 	bl	8000598 <__aeabi_f2d>
 8002de6:	4604      	mov	r4, r0
 8002de8:	460d      	mov	r5, r1
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <main+0x230>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbd2 	bl	8000598 <__aeabi_f2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	e9cd 2300 	strd	r2, r3, [sp]
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	462b      	mov	r3, r5
 8002e00:	4913      	ldr	r1, [pc, #76]	@ (8002e50 <main+0x234>)
 8002e02:	4814      	ldr	r0, [pc, #80]	@ (8002e54 <main+0x238>)
 8002e04:	f00d fe96 	bl	8010b34 <siprintf>
	//sprintf(usbBuffer, "%f, %f\r\n", roll, pitch);
	CDC_Transmit_FS((uint8_t *) usbBuffer, strlen(usbBuffer));
 8002e08:	4812      	ldr	r0, [pc, #72]	@ (8002e54 <main+0x238>)
 8002e0a:	f7fd fa59 	bl	80002c0 <strlen>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	480f      	ldr	r0, [pc, #60]	@ (8002e54 <main+0x238>)
 8002e16:	f00c fbeb 	bl	800f5f0 <CDC_Transmit_FS>
	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8002e1a:	e741      	b.n	8002ca0 <main+0x84>
 8002e1c:	20000838 	.word	0x20000838
 8002e20:	20000640 	.word	0x20000640
 8002e24:	20000484 	.word	0x20000484
 8002e28:	20000878 	.word	0x20000878
 8002e2c:	20000388 	.word	0x20000388
 8002e30:	200005f4 	.word	0x200005f4
 8002e34:	200005a8 	.word	0x200005a8
 8002e38:	200008e4 	.word	0x200008e4
 8002e3c:	3c23d70a 	.word	0x3c23d70a
 8002e40:	3f733333 	.word	0x3f733333
 8002e44:	20000334 	.word	0x20000334
 8002e48:	40240000 	.word	0x40240000
 8002e4c:	20000314 	.word	0x20000314
 8002e50:	08013e38 	.word	0x08013e38
 8002e54:	200008b0 	.word	0x200008b0

08002e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	@ 0x50
 8002e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	2230      	movs	r2, #48	@ 0x30
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f00d fec9 	bl	8010bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <SystemClock_Config+0xd0>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	4a29      	ldr	r2, [pc, #164]	@ (8002f28 <SystemClock_Config+0xd0>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <SystemClock_Config+0xd0>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <SystemClock_Config+0xd4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <SystemClock_Config+0xd4>)
 8002e9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <SystemClock_Config+0xd4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002ec4:	23d8      	movs	r3, #216	@ 0xd8
 8002ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002ecc:	2309      	movs	r3, #9
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 f95b 	bl	8007190 <HAL_RCC_OscConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002ee0:	f000 fbb8 	bl	8003654 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ee4:	f004 f904 	bl	80070f0 <HAL_PWREx_EnableOverDrive>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002eee:	f000 fbb1 	bl	8003654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002efe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	2107      	movs	r1, #7
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fbe1 	bl	80076d8 <HAL_RCC_ClockConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f1c:	f000 fb9a 	bl	8003654 <Error_Handler>
  }
}
 8002f20:	bf00      	nop
 8002f22:	3750      	adds	r7, #80	@ 0x50
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000

08002f30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f36:	463b      	mov	r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f42:	4b21      	ldr	r3, [pc, #132]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f44:	4a21      	ldr	r2, [pc, #132]	@ (8002fcc <MX_ADC1_Init+0x9c>)
 8002f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f62:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f72:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <MX_ADC1_Init+0xa0>)
 8002f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f90:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002f92:	f001 f931 	bl	80041f8 <HAL_ADC_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f9c:	f000 fb5a 	bl	8003654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002fa0:	230a      	movs	r3, #10
 8002fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002fa8:	2307      	movs	r3, #7
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <MX_ADC1_Init+0x98>)
 8002fb2:	f001 fa81 	bl	80044b8 <HAL_ADC_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002fbc:	f000 fb4a 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000388 	.word	0x20000388
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002fda:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <MX_I2C1_Init+0x78>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8003050 <MX_I2C1_Init+0x7c>)
 8002fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fea:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <MX_I2C1_Init+0x74>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003002:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <MX_I2C1_Init+0x74>)
 8003004:	2200      	movs	r2, #0
 8003006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003008:	4b0f      	ldr	r3, [pc, #60]	@ (8003048 <MX_I2C1_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800300e:	480e      	ldr	r0, [pc, #56]	@ (8003048 <MX_I2C1_Init+0x74>)
 8003010:	f002 fcb0 	bl	8005974 <HAL_I2C_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800301a:	f000 fb1b 	bl	8003654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800301e:	2100      	movs	r1, #0
 8003020:	4809      	ldr	r0, [pc, #36]	@ (8003048 <MX_I2C1_Init+0x74>)
 8003022:	f002 fd43 	bl	8005aac <HAL_I2CEx_ConfigAnalogFilter>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800302c:	f000 fb12 	bl	8003654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003030:	2100      	movs	r1, #0
 8003032:	4805      	ldr	r0, [pc, #20]	@ (8003048 <MX_I2C1_Init+0x74>)
 8003034:	f002 fd85 	bl	8005b42 <HAL_I2CEx_ConfigDigitalFilter>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800303e:	f000 fb09 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000430 	.word	0x20000430
 800304c:	40005400 	.word	0x40005400
 8003050:	20404768 	.word	0x20404768

08003054 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003058:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <MX_SPI1_Init+0x74>)
 800305a:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <MX_SPI1_Init+0x78>)
 800305c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800305e:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003060:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <MX_SPI1_Init+0x74>)
 800306e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003072:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003074:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800307a:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <MX_SPI1_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003086:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <MX_SPI1_Init+0x74>)
 800308a:	2210      	movs	r2, #16
 800308c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800308e:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <MX_SPI1_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309a:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <MX_SPI1_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <MX_SPI1_Init+0x74>)
 80030a2:	2207      	movs	r2, #7
 80030a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <MX_SPI1_Init+0x74>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <MX_SPI1_Init+0x74>)
 80030ae:	2208      	movs	r2, #8
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030b2:	4805      	ldr	r0, [pc, #20]	@ (80030c8 <MX_SPI1_Init+0x74>)
 80030b4:	f005 f880 	bl	80081b8 <HAL_SPI_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030be:	f000 fac9 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000484 	.word	0x20000484
 80030cc:	40013000 	.word	0x40013000

080030d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	@ 0x38
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e4:	f107 031c 	add.w	r3, r7, #28
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f0:	463b      	mov	r3, r7
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003102:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003104:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 800310a:	4b3c      	ldr	r3, [pc, #240]	@ (80031fc <MX_TIM2_Init+0x12c>)
 800310c:	223b      	movs	r2, #59	@ 0x3b
 800310e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003110:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8003116:	4b39      	ldr	r3, [pc, #228]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003118:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800311c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800312a:	4834      	ldr	r0, [pc, #208]	@ (80031fc <MX_TIM2_Init+0x12c>)
 800312c:	f006 fb5e 	bl	80097ec <HAL_TIM_Base_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003136:	f000 fa8d 	bl	8003654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003140:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003144:	4619      	mov	r1, r3
 8003146:	482d      	ldr	r0, [pc, #180]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003148:	f006 fe16 	bl	8009d78 <HAL_TIM_ConfigClockSource>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003152:	f000 fa7f 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003156:	4829      	ldr	r0, [pc, #164]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003158:	f006 fb9f 	bl	800989a <HAL_TIM_PWM_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003162:	f000 fa77 	bl	8003654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	4821      	ldr	r0, [pc, #132]	@ (80031fc <MX_TIM2_Init+0x12c>)
 8003176:	f007 fa8d 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003180:	f000 fa68 	bl	8003654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003184:	2360      	movs	r3, #96	@ 0x60
 8003186:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	4619      	mov	r1, r3
 800319a:	4818      	ldr	r0, [pc, #96]	@ (80031fc <MX_TIM2_Init+0x12c>)
 800319c:	f006 fcd8 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031a6:	f000 fa55 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031aa:	463b      	mov	r3, r7
 80031ac:	2204      	movs	r2, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4812      	ldr	r0, [pc, #72]	@ (80031fc <MX_TIM2_Init+0x12c>)
 80031b2:	f006 fccd 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80031bc:	f000 fa4a 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031c0:	463b      	mov	r3, r7
 80031c2:	2208      	movs	r2, #8
 80031c4:	4619      	mov	r1, r3
 80031c6:	480d      	ldr	r0, [pc, #52]	@ (80031fc <MX_TIM2_Init+0x12c>)
 80031c8:	f006 fcc2 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80031d2:	f000 fa3f 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031d6:	463b      	mov	r3, r7
 80031d8:	220c      	movs	r2, #12
 80031da:	4619      	mov	r1, r3
 80031dc:	4807      	ldr	r0, [pc, #28]	@ (80031fc <MX_TIM2_Init+0x12c>)
 80031de:	f006 fcb7 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80031e8:	f000 fa34 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031ec:	4803      	ldr	r0, [pc, #12]	@ (80031fc <MX_TIM2_Init+0x12c>)
 80031ee:	f000 fc23 	bl	8003a38 <HAL_TIM_MspPostInit>

}
 80031f2:	bf00      	nop
 80031f4:	3738      	adds	r7, #56	@ 0x38
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200005a8 	.word	0x200005a8

08003200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	@ 0x38
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003220:	463b      	mov	r3, r7
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]
 800322e:	615a      	str	r2, [r3, #20]
 8003230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003234:	4a3d      	ldr	r2, [pc, #244]	@ (800332c <MX_TIM3_Init+0x12c>)
 8003236:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8003238:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <MX_TIM3_Init+0x128>)
 800323a:	223b      	movs	r2, #59	@ 0x3b
 800323c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8003244:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003246:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800324a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324c:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <MX_TIM3_Init+0x128>)
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003252:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003258:	4833      	ldr	r0, [pc, #204]	@ (8003328 <MX_TIM3_Init+0x128>)
 800325a:	f006 fac7 	bl	80097ec <HAL_TIM_Base_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003264:	f000 f9f6 	bl	8003654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800326e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003272:	4619      	mov	r1, r3
 8003274:	482c      	ldr	r0, [pc, #176]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003276:	f006 fd7f 	bl	8009d78 <HAL_TIM_ConfigClockSource>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003280:	f000 f9e8 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003284:	4828      	ldr	r0, [pc, #160]	@ (8003328 <MX_TIM3_Init+0x128>)
 8003286:	f006 fb08 	bl	800989a <HAL_TIM_PWM_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003290:	f000 f9e0 	bl	8003654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4821      	ldr	r0, [pc, #132]	@ (8003328 <MX_TIM3_Init+0x128>)
 80032a4:	f007 f9f6 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80032ae:	f000 f9d1 	bl	8003654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032b2:	2360      	movs	r3, #96	@ 0x60
 80032b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032c2:	463b      	mov	r3, r7
 80032c4:	2200      	movs	r2, #0
 80032c6:	4619      	mov	r1, r3
 80032c8:	4817      	ldr	r0, [pc, #92]	@ (8003328 <MX_TIM3_Init+0x128>)
 80032ca:	f006 fc41 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80032d4:	f000 f9be 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032d8:	463b      	mov	r3, r7
 80032da:	2204      	movs	r2, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4812      	ldr	r0, [pc, #72]	@ (8003328 <MX_TIM3_Init+0x128>)
 80032e0:	f006 fc36 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80032ea:	f000 f9b3 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032ee:	463b      	mov	r3, r7
 80032f0:	2208      	movs	r2, #8
 80032f2:	4619      	mov	r1, r3
 80032f4:	480c      	ldr	r0, [pc, #48]	@ (8003328 <MX_TIM3_Init+0x128>)
 80032f6:	f006 fc2b 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003300:	f000 f9a8 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003304:	463b      	mov	r3, r7
 8003306:	220c      	movs	r2, #12
 8003308:	4619      	mov	r1, r3
 800330a:	4807      	ldr	r0, [pc, #28]	@ (8003328 <MX_TIM3_Init+0x128>)
 800330c:	f006 fc20 	bl	8009b50 <HAL_TIM_PWM_ConfigChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003316:	f000 f99d 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800331a:	4803      	ldr	r0, [pc, #12]	@ (8003328 <MX_TIM3_Init+0x128>)
 800331c:	f000 fb8c 	bl	8003a38 <HAL_TIM_MspPostInit>

}
 8003320:	bf00      	nop
 8003322:	3738      	adds	r7, #56	@ 0x38
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200005f4 	.word	0x200005f4
 800332c:	40000400 	.word	0x40000400

08003330 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003334:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <MX_UART4_Init+0x64>)
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <MX_UART4_Init+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800333a:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <MX_UART4_Init+0x64>)
 800333c:	4a17      	ldr	r2, [pc, #92]	@ (800339c <MX_UART4_Init+0x6c>)
 800333e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8003340:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <MX_UART4_Init+0x64>)
 8003342:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003346:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <MX_UART4_Init+0x64>)
 800334a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800334e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <MX_UART4_Init+0x64>)
 8003352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003356:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <MX_UART4_Init+0x64>)
 800335a:	2204      	movs	r2, #4
 800335c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <MX_UART4_Init+0x64>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <MX_UART4_Init+0x64>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <MX_UART4_Init+0x64>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <MX_UART4_Init+0x64>)
 8003372:	2202      	movs	r2, #2
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003376:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <MX_UART4_Init+0x64>)
 8003378:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800337c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <MX_UART4_Init+0x64>)
 8003380:	f007 fa16 	bl	800a7b0 <HAL_UART_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800338a:	f000 f963 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000640 	.word	0x20000640
 8003398:	40004c00 	.word	0x40004c00
 800339c:	000186a0 	.word	0x000186a0

080033a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80033a4:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033a6:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <MX_UART5_Init+0x5c>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033de:	2200      	movs	r2, #0
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033e2:	4805      	ldr	r0, [pc, #20]	@ (80033f8 <MX_UART5_Init+0x58>)
 80033e4:	f007 f9e4 	bl	800a7b0 <HAL_UART_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80033ee:	f000 f931 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200006c8 	.word	0x200006c8
 80033fc:	40005000 	.word	0x40005000

08003400 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003406:	4a15      	ldr	r2, [pc, #84]	@ (800345c <MX_USART6_UART_Init+0x5c>)
 8003408:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 800340c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003410:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003418:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003426:	220c      	movs	r2, #12
 8003428:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003442:	4805      	ldr	r0, [pc, #20]	@ (8003458 <MX_USART6_UART_Init+0x58>)
 8003444:	f007 f9b4 	bl	800a7b0 <HAL_UART_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800344e:	f000 f901 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000750 	.word	0x20000750
 800345c:	40011400 	.word	0x40011400

08003460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <MX_DMA_Init+0x80>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <MX_DMA_Init+0x80>)
 800346c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <MX_DMA_Init+0x80>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800347e:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <MX_DMA_Init+0x80>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <MX_DMA_Init+0x80>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003488:	6313      	str	r3, [r2, #48]	@ 0x30
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <MX_DMA_Init+0x80>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	200d      	movs	r0, #13
 800349c:	f001 fbbd 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80034a0:	200d      	movs	r0, #13
 80034a2:	f001 fbd6 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	2038      	movs	r0, #56	@ 0x38
 80034ac:	f001 fbb5 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034b0:	2038      	movs	r0, #56	@ 0x38
 80034b2:	f001 fbce 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	203b      	movs	r0, #59	@ 0x3b
 80034bc:	f001 fbad 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80034c0:	203b      	movs	r0, #59	@ 0x3b
 80034c2:	f001 fbc6 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	203c      	movs	r0, #60	@ 0x3c
 80034cc:	f001 fba5 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80034d0:	203c      	movs	r0, #60	@ 0x3c
 80034d2:	f001 fbbe 	bl	8004c52 <HAL_NVIC_EnableIRQ>

}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034fa:	4b3d      	ldr	r3, [pc, #244]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a3c      	ldr	r2, [pc, #240]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	4b37      	ldr	r3, [pc, #220]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	4a36      	ldr	r2, [pc, #216]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6313      	str	r3, [r2, #48]	@ 0x30
 800351e:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	@ 0x30
 800354e:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800355a:	4b25      	ldr	r3, [pc, #148]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	4a24      	ldr	r2, [pc, #144]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003560:	f043 0308 	orr.w	r3, r3, #8
 8003564:	6313      	str	r3, [r2, #48]	@ 0x30
 8003566:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <MX_GPIO_Init+0x10c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8003572:	2200      	movs	r2, #0
 8003574:	2108      	movs	r1, #8
 8003576:	481f      	ldr	r0, [pc, #124]	@ (80035f4 <MX_GPIO_Init+0x110>)
 8003578:	f002 f9b0 	bl	80058dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800357c:	2200      	movs	r2, #0
 800357e:	2110      	movs	r1, #16
 8003580:	481d      	ldr	r0, [pc, #116]	@ (80035f8 <MX_GPIO_Init+0x114>)
 8003582:	f002 f9ab 	bl	80058dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8003586:	2308      	movs	r3, #8
 8003588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	4619      	mov	r1, r3
 800359c:	4815      	ldr	r0, [pc, #84]	@ (80035f4 <MX_GPIO_Init+0x110>)
 800359e:	f002 f801 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80035a2:	2310      	movs	r3, #16
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	480f      	ldr	r0, [pc, #60]	@ (80035f8 <MX_GPIO_Init+0x114>)
 80035ba:	f001 fff3 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80035be:	2310      	movs	r3, #16
 80035c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	4808      	ldr	r0, [pc, #32]	@ (80035f4 <MX_GPIO_Init+0x110>)
 80035d4:	f001 ffe6 	bl	80055a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	200a      	movs	r0, #10
 80035de:	f001 fb1c 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80035e2:	200a      	movs	r0, #10
 80035e4:	f001 fb35 	bl	8004c52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80035e8:	bf00      	nop
 80035ea:	3728      	adds	r7, #40	@ 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020800 	.word	0x40020800
 80035f8:	40020000 	.word	0x40020000

080035fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003602:	463b      	mov	r3, r7
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800360e:	f001 fb3b 	bl	8004c88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003612:	2301      	movs	r3, #1
 8003614:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003616:	2300      	movs	r3, #0
 8003618:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800361e:	231f      	movs	r3, #31
 8003620:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003622:	2387      	movs	r3, #135	@ 0x87
 8003624:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003626:	2300      	movs	r3, #0
 8003628:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800362a:	2300      	movs	r3, #0
 800362c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800362e:	2301      	movs	r3, #1
 8003630:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003632:	2301      	movs	r3, #1
 8003634:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800363e:	463b      	mov	r3, r7
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fb59 	bl	8004cf8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003646:	2004      	movs	r0, #4
 8003648:	f001 fb36 	bl	8004cb8 <HAL_MPU_Enable>

}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800365a:	b672      	cpsid	i
}
 800365c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 800365e:	2108      	movs	r1, #8
 8003660:	4807      	ldr	r0, [pc, #28]	@ (8003680 <Error_Handler+0x2c>)
 8003662:	f002 f954 	bl	800590e <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++){
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	e003      	b.n	8003674 <Error_Handler+0x20>
		  __NOP();
 800366c:	bf00      	nop
	  for(int i = 0; i < 1000000; i++){
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3301      	adds	r3, #1
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a03      	ldr	r2, [pc, #12]	@ (8003684 <Error_Handler+0x30>)
 8003678:	4293      	cmp	r3, r2
 800367a:	ddf7      	ble.n	800366c <Error_Handler+0x18>
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 800367c:	e7ef      	b.n	800365e <Error_Handler+0xa>
 800367e:	bf00      	nop
 8003680:	40020800 	.word	0x40020800
 8003684:	000f423f 	.word	0x000f423f

08003688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <HAL_MspInit+0x44>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <HAL_MspInit+0x44>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <HAL_MspInit+0x44>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <HAL_MspInit+0x44>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <HAL_MspInit+0x44>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_MspInit+0x44>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <HAL_ADC_MspInit+0xd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d153      	bne.n	800379a <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036f2:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80036fe:	4b2a      	ldr	r3, [pc, #168]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370a:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4a26      	ldr	r2, [pc, #152]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6313      	str	r3, [r2, #48]	@ 0x30
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_ADC_MspInit+0xd8>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003722:	2301      	movs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003726:	2303      	movs	r3, #3
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	481d      	ldr	r0, [pc, #116]	@ (80037ac <HAL_ADC_MspInit+0xdc>)
 8003736:	f001 ff35 	bl	80055a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800373a:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 800373c:	4a1d      	ldr	r2, [pc, #116]	@ (80037b4 <HAL_ADC_MspInit+0xe4>)
 800373e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003746:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003752:	4b17      	ldr	r3, [pc, #92]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003758:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 800375c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003760:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003762:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003768:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 800376c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003770:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003772:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003778:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 800377a:	2200      	movs	r2, #0
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800377e:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003780:	f001 fafa 	bl	8004d78 <HAL_DMA_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800378a:	f7ff ff63 	bl	8003654 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38
 8003794:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <HAL_ADC_MspInit+0xe0>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800379a:	bf00      	nop
 800379c:	3728      	adds	r7, #40	@ 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40012000 	.word	0x40012000
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020800 	.word	0x40020800
 80037b0:	200003d0 	.word	0x200003d0
 80037b4:	40026470 	.word	0x40026470

080037b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0aa      	sub	sp, #168	@ 0xa8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f00d fa10 	bl	8010bfe <memset>
  if(hi2c->Instance==I2C1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_I2C_MspInit+0xb0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d13b      	bne.n	8003860 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 f994 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003802:	f7ff ff27 	bl	8003654 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a18      	ldr	r2, [pc, #96]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b16      	ldr	r3, [pc, #88]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800381e:	23c0      	movs	r3, #192	@ 0xc0
 8003820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003824:	2312      	movs	r3, #18
 8003826:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003836:	2304      	movs	r3, #4
 8003838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003840:	4619      	mov	r1, r3
 8003842:	480b      	ldr	r0, [pc, #44]	@ (8003870 <HAL_I2C_MspInit+0xb8>)
 8003844:	f001 feae 	bl	80055a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	4a07      	ldr	r2, [pc, #28]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 800384e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003852:	6413      	str	r3, [r2, #64]	@ 0x40
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_I2C_MspInit+0xb4>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003860:	bf00      	nop
 8003862:	37a8      	adds	r7, #168	@ 0xa8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40005400 	.word	0x40005400
 800386c:	40023800 	.word	0x40023800
 8003870:	40020400 	.word	0x40020400

08003874 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a49      	ldr	r2, [pc, #292]	@ (80039b8 <HAL_SPI_MspInit+0x144>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f040 808c 	bne.w	80039b0 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003898:	4b48      	ldr	r3, [pc, #288]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	4a47      	ldr	r2, [pc, #284]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 800389e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80038a4:	4b45      	ldr	r3, [pc, #276]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 80038a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b0:	4b42      	ldr	r3, [pc, #264]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	4a41      	ldr	r2, [pc, #260]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80038bc:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <HAL_SPI_MspInit+0x148>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038c8:	23e0      	movs	r3, #224	@ 0xe0
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d4:	2303      	movs	r3, #3
 80038d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038d8:	2305      	movs	r3, #5
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	4837      	ldr	r0, [pc, #220]	@ (80039c0 <HAL_SPI_MspInit+0x14c>)
 80038e4:	f001 fe5e 	bl	80055a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80038e8:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 80038ea:	4a37      	ldr	r2, [pc, #220]	@ (80039c8 <HAL_SPI_MspInit+0x154>)
 80038ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80038ee:	4b35      	ldr	r3, [pc, #212]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 80038f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80038f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f6:	4b33      	ldr	r3, [pc, #204]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fc:	4b31      	ldr	r3, [pc, #196]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003902:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 8003904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003908:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390a:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003910:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003916:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800391c:	4b29      	ldr	r3, [pc, #164]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 800391e:	2200      	movs	r2, #0
 8003920:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003922:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 8003924:	2200      	movs	r2, #0
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003928:	4826      	ldr	r0, [pc, #152]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 800392a:	f001 fa25 	bl	8004d78 <HAL_DMA_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003934:	f7ff fe8e 	bl	8003654 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a22      	ldr	r2, [pc, #136]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 800393c:	659a      	str	r2, [r3, #88]	@ 0x58
 800393e:	4a21      	ldr	r2, [pc, #132]	@ (80039c4 <HAL_SPI_MspInit+0x150>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003944:	4b21      	ldr	r3, [pc, #132]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003946:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <HAL_SPI_MspInit+0x15c>)
 8003948:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 800394c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003950:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003958:	4b1c      	ldr	r3, [pc, #112]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003960:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003964:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800396c:	4b17      	ldr	r3, [pc, #92]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003972:	4b16      	ldr	r3, [pc, #88]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003974:	2200      	movs	r2, #0
 8003976:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003978:	4b14      	ldr	r3, [pc, #80]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800397e:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003980:	2200      	movs	r2, #0
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003984:	4811      	ldr	r0, [pc, #68]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003986:	f001 f9f7 	bl	8004d78 <HAL_DMA_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 8003990:	f7ff fe60 	bl	8003654 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 8003998:	655a      	str	r2, [r3, #84]	@ 0x54
 800399a:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <HAL_SPI_MspInit+0x158>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	2023      	movs	r0, #35	@ 0x23
 80039a6:	f001 f938 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039aa:	2023      	movs	r0, #35	@ 0x23
 80039ac:	f001 f951 	bl	8004c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80039b0:	bf00      	nop
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40013000 	.word	0x40013000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	200004e8 	.word	0x200004e8
 80039c8:	40026410 	.word	0x40026410
 80039cc:	20000548 	.word	0x20000548
 80039d0:	40026458 	.word	0x40026458

080039d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d10c      	bne.n	8003a00 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039fe:	e010      	b.n	8003a22 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_TIM_Base_MspInit+0x60>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10b      	bne.n	8003a22 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a08      	ldr	r2, [pc, #32]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_TIM_Base_MspInit+0x5c>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40000400 	.word	0x40000400

08003a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a58:	d139      	bne.n	8003ace <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a66:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	4a28      	ldr	r2, [pc, #160]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003a8a:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	481d      	ldr	r0, [pc, #116]	@ (8003b1c <HAL_TIM_MspPostInit+0xe4>)
 8003aa8:	f001 fd7c 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003aac:	2308      	movs	r3, #8
 8003aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4816      	ldr	r0, [pc, #88]	@ (8003b20 <HAL_TIM_MspPostInit+0xe8>)
 8003ac8:	f001 fd6c 	bl	80055a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003acc:	e020      	b.n	8003b10 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <HAL_TIM_MspPostInit+0xec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_TIM_MspPostInit+0xe0>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003af0:	2333      	movs	r3, #51	@ 0x33
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b00:	2302      	movs	r3, #2
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4805      	ldr	r0, [pc, #20]	@ (8003b20 <HAL_TIM_MspPostInit+0xe8>)
 8003b0c:	f001 fd4a 	bl	80055a4 <HAL_GPIO_Init>
}
 8003b10:	bf00      	nop
 8003b12:	3728      	adds	r7, #40	@ 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40000400 	.word	0x40000400

08003b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00d f858 	bl	8010bfe <memset>
  if(huart->Instance==UART4)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4aa1      	ldr	r2, [pc, #644]	@ (8003dd8 <HAL_UART_MspInit+0x2b0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f040 8096 	bne.w	8003c86 <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003b5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003b60:	2300      	movs	r3, #0
 8003b62:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 ffdb 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003b74:	f7ff fd6e 	bl	8003654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b78:	4b98      	ldr	r3, [pc, #608]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	4a97      	ldr	r2, [pc, #604]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b84:	4b95      	ldr	r3, [pc, #596]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b90:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	4a91      	ldr	r2, [pc, #580]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	4a8b      	ldr	r2, [pc, #556]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb4:	4b89      	ldr	r3, [pc, #548]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003bd8:	2308      	movs	r3, #8
 8003bda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003be2:	4619      	mov	r1, r3
 8003be4:	487e      	ldr	r0, [pc, #504]	@ (8003de0 <HAL_UART_MspInit+0x2b8>)
 8003be6:	f001 fcdd 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c04:	2308      	movs	r3, #8
 8003c06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4874      	ldr	r0, [pc, #464]	@ (8003de4 <HAL_UART_MspInit+0x2bc>)
 8003c12:	f001 fcc7 	bl	80055a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c18:	4a74      	ldr	r2, [pc, #464]	@ (8003dec <HAL_UART_MspInit+0x2c4>)
 8003c1a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003c1c:	4b72      	ldr	r3, [pc, #456]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c22:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c24:	4b70      	ldr	r3, [pc, #448]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c30:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c36:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c38:	4b6b      	ldr	r3, [pc, #428]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003c44:	4b68      	ldr	r3, [pc, #416]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c4a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c4c:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c52:	4b65      	ldr	r3, [pc, #404]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c58:	4863      	ldr	r0, [pc, #396]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c5a:	f001 f88d 	bl	8004d78 <HAL_DMA_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8003c64:	f7ff fcf6 	bl	8003654 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8003c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003de8 <HAL_UART_MspInit+0x2c0>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003c74:	2200      	movs	r2, #0
 8003c76:	2100      	movs	r1, #0
 8003c78:	2034      	movs	r0, #52	@ 0x34
 8003c7a:	f000 ffce 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003c7e:	2034      	movs	r0, #52	@ 0x34
 8003c80:	f000 ffe7 	bl	8004c52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c84:	e0a4      	b.n	8003dd0 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==UART5)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a59      	ldr	r2, [pc, #356]	@ (8003df0 <HAL_UART_MspInit+0x2c8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d15e      	bne.n	8003d4e <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003c96:	2300      	movs	r3, #0
 8003c98:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 ff40 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_UART_MspInit+0x186>
      Error_Handler();
 8003caa:	f7ff fcd3 	bl	8003654 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003cae:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cba:	4b48      	ldr	r3, [pc, #288]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc6:	4b45      	ldr	r3, [pc, #276]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a44      	ldr	r2, [pc, #272]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b42      	ldr	r3, [pc, #264]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cde:	4b3f      	ldr	r3, [pc, #252]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cea:	4b3c      	ldr	r3, [pc, #240]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d10:	2308      	movs	r3, #8
 8003d12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d16:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4831      	ldr	r0, [pc, #196]	@ (8003de4 <HAL_UART_MspInit+0x2bc>)
 8003d1e:	f001 fc41 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d22:	2304      	movs	r3, #4
 8003d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d40:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d44:	4619      	mov	r1, r3
 8003d46:	482b      	ldr	r0, [pc, #172]	@ (8003df4 <HAL_UART_MspInit+0x2cc>)
 8003d48:	f001 fc2c 	bl	80055a4 <HAL_GPIO_Init>
}
 8003d4c:	e040      	b.n	8003dd0 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a29      	ldr	r2, [pc, #164]	@ (8003df8 <HAL_UART_MspInit+0x2d0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d13b      	bne.n	8003dd0 <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 fedc 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8003d72:	f7ff fc6f 	bl	8003654 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d76:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d82:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8e:	4b13      	ldr	r3, [pc, #76]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <HAL_UART_MspInit+0x2b4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da6:	23c0      	movs	r3, #192	@ 0xc0
 8003da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	2302      	movs	r3, #2
 8003dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db8:	2303      	movs	r3, #3
 8003dba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4806      	ldr	r0, [pc, #24]	@ (8003de4 <HAL_UART_MspInit+0x2bc>)
 8003dcc:	f001 fbea 	bl	80055a4 <HAL_GPIO_Init>
}
 8003dd0:	bf00      	nop
 8003dd2:	37c0      	adds	r7, #192	@ 0xc0
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020800 	.word	0x40020800
 8003de8:	200007d8 	.word	0x200007d8
 8003dec:	40026040 	.word	0x40026040
 8003df0:	40005000 	.word	0x40005000
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40011400 	.word	0x40011400

08003dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <NMI_Handler+0x4>

08003e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <HardFault_Handler+0x4>

08003e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <MemManage_Handler+0x4>

08003e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <BusFault_Handler+0x4>

08003e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <UsageFault_Handler+0x4>

08003e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e52:	f000 f98d 	bl	8004170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003e5e:	2010      	movs	r0, #16
 8003e60:	f001 fd70 	bl	8005944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <DMA1_Stream2_IRQHandler+0x10>)
 8003e6e:	f001 f923 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200007d8 	.word	0x200007d8

08003e7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003e80:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <SPI1_IRQHandler+0x10>)
 8003e82:	f005 f897 	bl	8008fb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000484 	.word	0x20000484

08003e90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003e94:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <UART4_IRQHandler+0x10>)
 8003e96:	f006 fd89 	bl	800a9ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000640 	.word	0x20000640

08003ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8003eaa:	f001 f905 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200004e8 	.word	0x200004e8

08003eb8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003ebc:	4802      	ldr	r0, [pc, #8]	@ (8003ec8 <DMA2_Stream3_IRQHandler+0x10>)
 8003ebe:	f001 f8fb 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000548 	.word	0x20000548

08003ecc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ed0:	4802      	ldr	r0, [pc, #8]	@ (8003edc <DMA2_Stream4_IRQHandler+0x10>)
 8003ed2:	f001 f8f1 	bl	80050b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	200003d0 	.word	0x200003d0

08003ee0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ee4:	4802      	ldr	r0, [pc, #8]	@ (8003ef0 <OTG_FS_IRQHandler+0x10>)
 8003ee6:	f001 ffb0 	bl	8005e4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20001dd0 	.word	0x20001dd0

08003ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return 1;
 8003ef8:	2301      	movs	r3, #1
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <_kill>:

int _kill(int pid, int sig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f0e:	f00c fed9 	bl	8010cc4 <__errno>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2216      	movs	r2, #22
 8003f16:	601a      	str	r2, [r3, #0]
  return -1;
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_exit>:

void _exit (int status)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ffe7 	bl	8003f04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f36:	bf00      	nop
 8003f38:	e7fd      	b.n	8003f36 <_exit+0x12>

08003f3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e00a      	b.n	8003f62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f4c:	f3af 8000 	nop.w
 8003f50:	4601      	mov	r1, r0
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	60ba      	str	r2, [r7, #8]
 8003f58:	b2ca      	uxtb	r2, r1
 8003f5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	dbf0      	blt.n	8003f4c <_read+0x12>
  }

  return len;
 8003f6a:	687b      	ldr	r3, [r7, #4]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e009      	b.n	8003f9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	60ba      	str	r2, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3301      	adds	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	dbf1      	blt.n	8003f86 <_write+0x12>
  }
  return len;
 8003fa2:	687b      	ldr	r3, [r7, #4]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_close>:

int _close(int file)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd4:	605a      	str	r2, [r3, #4]
  return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_isatty>:

int _isatty(int file)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800401c:	4a14      	ldr	r2, [pc, #80]	@ (8004070 <_sbrk+0x5c>)
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <_sbrk+0x60>)
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <_sbrk+0x64>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004030:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <_sbrk+0x64>)
 8004032:	4a12      	ldr	r2, [pc, #72]	@ (800407c <_sbrk+0x68>)
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004036:	4b10      	ldr	r3, [pc, #64]	@ (8004078 <_sbrk+0x64>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d207      	bcs.n	8004054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004044:	f00c fe3e 	bl	8010cc4 <__errno>
 8004048:	4603      	mov	r3, r0
 800404a:	220c      	movs	r2, #12
 800404c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	e009      	b.n	8004068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <_sbrk+0x64>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800405a:	4b07      	ldr	r3, [pc, #28]	@ (8004078 <_sbrk+0x64>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	4a05      	ldr	r2, [pc, #20]	@ (8004078 <_sbrk+0x64>)
 8004064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004066:	68fb      	ldr	r3, [r7, #12]
 }
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20040000 	.word	0x20040000
 8004074:	00000400 	.word	0x00000400
 8004078:	200008e8 	.word	0x200008e8
 800407c:	20002400 	.word	0x20002400

08004080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <SystemInit+0x20>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <SystemInit+0x20>)
 800408c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80040a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80040a8:	f7ff ffea 	bl	8004080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040ac:	480c      	ldr	r0, [pc, #48]	@ (80040e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040ae:	490d      	ldr	r1, [pc, #52]	@ (80040e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040b0:	4a0d      	ldr	r2, [pc, #52]	@ (80040e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040b4:	e002      	b.n	80040bc <LoopCopyDataInit>

080040b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ba:	3304      	adds	r3, #4

080040bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c0:	d3f9      	bcc.n	80040b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040c2:	4a0a      	ldr	r2, [pc, #40]	@ (80040ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040c4:	4c0a      	ldr	r4, [pc, #40]	@ (80040f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c8:	e001      	b.n	80040ce <LoopFillZerobss>

080040ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040cc:	3204      	adds	r2, #4

080040ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d0:	d3fb      	bcc.n	80040ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040d2:	f00c fdfd 	bl	8010cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040d6:	f7fe fda1 	bl	8002c1c <main>
  bx  lr    
 80040da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040dc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80040e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e4:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80040e8:	08014650 	.word	0x08014650
  ldr r2, =_sbss
 80040ec:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80040f0:	200023fc 	.word	0x200023fc

080040f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040f4:	e7fe      	b.n	80040f4 <ADC_IRQHandler>

080040f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fa:	2003      	movs	r0, #3
 80040fc:	f000 fd82 	bl	8004c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004100:	200f      	movs	r0, #15
 8004102:	f000 f805 	bl	8004110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004106:	f7ff fabf 	bl	8003688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_InitTick+0x54>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_InitTick+0x58>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004126:	fbb3 f3f1 	udiv	r3, r3, r1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fd9d 	bl	8004c6e <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e00e      	b.n	800415c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d80a      	bhi.n	800415a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f000 fd65 	bl	8004c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_InitTick+0x5c>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000000 	.word	0x20000000
 8004168:	20000008 	.word	0x20000008
 800416c:	20000004 	.word	0x20000004

08004170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <HAL_IncTick+0x20>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_IncTick+0x24>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4413      	add	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	@ (8004194 <HAL_IncTick+0x24>)
 8004182:	6013      	str	r3, [r2, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000008 	.word	0x20000008
 8004194:	200008ec 	.word	0x200008ec

08004198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return uwTick;
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_GetTick+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	200008ec 	.word	0x200008ec

080041b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff ffee 	bl	8004198 <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d005      	beq.n	80041d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_Delay+0x44>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041d6:	bf00      	nop
 80041d8:	f7ff ffde 	bl	8004198 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8f7      	bhi.n	80041d8 <HAL_Delay+0x28>
  {
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000008 	.word	0x20000008

080041f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e031      	b.n	8004272 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fa5a 	bl	80036d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d116      	bne.n	8004264 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <HAL_ADC_Init+0x84>)
 800423c:	4013      	ands	r3, r2
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa90 	bl	800476c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40
 8004262:	e001      	b.n	8004268 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	ffffeefd 	.word	0xffffeefd

08004280 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Start_DMA+0x22>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0d6      	b.n	8004450 <HAL_ADC_Start_DMA+0x1d0>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d018      	beq.n	80042ea <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80042c8:	4b63      	ldr	r3, [pc, #396]	@ (8004458 <HAL_ADC_Start_DMA+0x1d8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a63      	ldr	r2, [pc, #396]	@ (800445c <HAL_ADC_Start_DMA+0x1dc>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9a      	lsrs	r2, r3, #18
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 809e 	bne.w	8004436 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042fe:	4b58      	ldr	r3, [pc, #352]	@ (8004460 <HAL_ADC_Start_DMA+0x1e0>)
 8004300:	4013      	ands	r3, r2
 8004302:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004320:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004334:	d106      	bne.n	8004344 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f023 0206 	bic.w	r2, r3, #6
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
 8004342:	e002      	b.n	800434a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	4a43      	ldr	r2, [pc, #268]	@ (8004464 <HAL_ADC_Start_DMA+0x1e4>)
 8004358:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	4a42      	ldr	r2, [pc, #264]	@ (8004468 <HAL_ADC_Start_DMA+0x1e8>)
 8004360:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	4a41      	ldr	r2, [pc, #260]	@ (800446c <HAL_ADC_Start_DMA+0x1ec>)
 8004368:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004372:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004382:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004392:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	334c      	adds	r3, #76	@ 0x4c
 800439e:	4619      	mov	r1, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f000 fd96 	bl	8004ed4 <HAL_DMA_Start_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80043ac:	4b30      	ldr	r3, [pc, #192]	@ (8004470 <HAL_ADC_Start_DMA+0x1f0>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d143      	bne.n	800444e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	e03a      	b.n	800444e <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a25      	ldr	r2, [pc, #148]	@ (8004474 <HAL_ADC_Start_DMA+0x1f4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10e      	bne.n	8004400 <HAL_ADC_Start_DMA+0x180>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043fe:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_ADC_Start_DMA+0x1f0>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d120      	bne.n	800444e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_ADC_Start_DMA+0x1f8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d11b      	bne.n	800444e <HAL_ADC_Start_DMA+0x1ce>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d114      	bne.n	800444e <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	e00b      	b.n	800444e <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000000 	.word	0x20000000
 800445c:	431bde83 	.word	0x431bde83
 8004460:	fffff8fe 	.word	0xfffff8fe
 8004464:	08004961 	.word	0x08004961
 8004468:	08004a1b 	.word	0x08004a1b
 800446c:	08004a37 	.word	0x08004a37
 8004470:	40012300 	.word	0x40012300
 8004474:	40012000 	.word	0x40012000
 8004478:	40012200 	.word	0x40012200

0800447c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x1c>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e13a      	b.n	800474a <HAL_ADC_ConfigChannel+0x292>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b09      	cmp	r3, #9
 80044e2:	d93a      	bls.n	800455a <HAL_ADC_ConfigChannel+0xa2>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ec:	d035      	beq.n	800455a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	3b1e      	subs	r3, #30
 8004504:	2207      	movs	r2, #7
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43da      	mvns	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	400a      	ands	r2, r1
 8004512:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a8f      	ldr	r2, [pc, #572]	@ (8004758 <HAL_ADC_ConfigChannel+0x2a0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10a      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	061a      	lsls	r2, r3, #24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004532:	e039      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68d9      	ldr	r1, [r3, #12]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	4618      	mov	r0, r3
 8004546:	4603      	mov	r3, r0
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4403      	add	r3, r0
 800454c:	3b1e      	subs	r3, #30
 800454e:	409a      	lsls	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004558:	e026      	b.n	80045a8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6919      	ldr	r1, [r3, #16]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2207      	movs	r2, #7
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43da      	mvns	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	400a      	ands	r2, r1
 8004580:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6919      	ldr	r1, [r3, #16]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	4618      	mov	r0, r3
 8004594:	4603      	mov	r3, r0
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4403      	add	r3, r0
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	409a      	lsls	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d824      	bhi.n	80045fa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	3b05      	subs	r3, #5
 80045c2:	221f      	movs	r2, #31
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43da      	mvns	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	400a      	ands	r2, r1
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	3b05      	subs	r3, #5
 80045ec:	fa00 f203 	lsl.w	r2, r0, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80045f8:	e04c      	b.n	8004694 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d824      	bhi.n	800464c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	3b23      	subs	r3, #35	@ 0x23
 8004614:	221f      	movs	r2, #31
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	400a      	ands	r2, r1
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	4618      	mov	r0, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3b23      	subs	r3, #35	@ 0x23
 800463e:	fa00 f203 	lsl.w	r2, r0, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
 800464a:	e023      	b.n	8004694 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	3b41      	subs	r3, #65	@ 0x41
 800465e:	221f      	movs	r2, #31
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43da      	mvns	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	400a      	ands	r2, r1
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4618      	mov	r0, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3b41      	subs	r3, #65	@ 0x41
 8004688:	fa00 f203 	lsl.w	r2, r0, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_ADC_ConfigChannel+0x2a4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10a      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x1fc>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046a6:	d105      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80046a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80046b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a28      	ldr	r2, [pc, #160]	@ (800475c <HAL_ADC_ConfigChannel+0x2a4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10f      	bne.n	80046de <HAL_ADC_ConfigChannel+0x226>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b12      	cmp	r3, #18
 80046c4:	d10b      	bne.n	80046de <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80046c6:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4a25      	ldr	r2, [pc, #148]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <HAL_ADC_ConfigChannel+0x2a4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d12b      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x288>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_ADC_ConfigChannel+0x2a0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <HAL_ADC_ConfigChannel+0x242>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b11      	cmp	r3, #17
 80046f8:	d122      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80046fa:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 8004700:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004704:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004706:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <HAL_ADC_ConfigChannel+0x2a8>)
 800470c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004710:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <HAL_ADC_ConfigChannel+0x2a0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800471c:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <HAL_ADC_ConfigChannel+0x2ac>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <HAL_ADC_ConfigChannel+0x2b0>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9a      	lsrs	r2, r3, #18
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004732:	e002      	b.n	800473a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f9      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	10000012 	.word	0x10000012
 800475c:	40012000 	.word	0x40012000
 8004760:	40012300 	.word	0x40012300
 8004764:	20000000 	.word	0x20000000
 8004768:	431bde83 	.word	0x431bde83

0800476c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004774:	4b78      	ldr	r3, [pc, #480]	@ (8004958 <ADC_Init+0x1ec>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a77      	ldr	r2, [pc, #476]	@ (8004958 <ADC_Init+0x1ec>)
 800477a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800477e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004780:	4b75      	ldr	r3, [pc, #468]	@ (8004958 <ADC_Init+0x1ec>)
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4973      	ldr	r1, [pc, #460]	@ (8004958 <ADC_Init+0x1ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800479c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	021a      	lsls	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6899      	ldr	r1, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	4a58      	ldr	r2, [pc, #352]	@ (800495c <ADC_Init+0x1f0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800480e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	e00f      	b.n	8004866 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004864:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0202 	bic.w	r2, r2, #2
 8004874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	005a      	lsls	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01b      	beq.n	80048cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80048b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	3b01      	subs	r3, #1
 80048c0:	035a      	lsls	r2, r3, #13
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	e007      	b.n	80048dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80048ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	051a      	lsls	r2, r3, #20
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004910:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800491e:	025a      	lsls	r2, r3, #9
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	029a      	lsls	r2, r3, #10
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012300 	.word	0x40012300
 800495c:	0f000001 	.word	0x0f000001

08004960 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d13c      	bne.n	80049f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d12b      	bne.n	80049ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	d127      	bne.n	80049ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d006      	beq.n	80049b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d119      	bne.n	80049ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0220 	bic.w	r2, r2, #32
 80049c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0201 	orr.w	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff fd45 	bl	800447c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049f2:	e00e      	b.n	8004a12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fd4f 	bl	80044a4 <HAL_ADC_ErrorCallback>
}
 8004a06:	e004      	b.n	8004a12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fd31 	bl	8004490 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fd24 	bl	80044a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a80:	4013      	ands	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a92:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	60d3      	str	r3, [r2, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00
 8004aa8:	05fa0000 	.word	0x05fa0000

08004aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 0307 	and.w	r3, r3, #7
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	db0b      	blt.n	8004af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	f003 021f 	and.w	r2, r3, #31
 8004ae0:	4907      	ldr	r1, [pc, #28]	@ (8004b00 <__NVIC_EnableIRQ+0x38>)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2001      	movs	r0, #1
 8004aea:	fa00 f202 	lsl.w	r2, r0, r2
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e100 	.word	0xe000e100

08004b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	6039      	str	r1, [r7, #0]
 8004b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db0a      	blt.n	8004b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	490c      	ldr	r1, [pc, #48]	@ (8004b50 <__NVIC_SetPriority+0x4c>)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	440b      	add	r3, r1
 8004b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b2c:	e00a      	b.n	8004b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4908      	ldr	r1, [pc, #32]	@ (8004b54 <__NVIC_SetPriority+0x50>)
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	0112      	lsls	r2, r2, #4
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	440b      	add	r3, r1
 8004b42:	761a      	strb	r2, [r3, #24]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000e100 	.word	0xe000e100
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf28      	it	cs
 8004b76:	2304      	movcs	r3, #4
 8004b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d902      	bls.n	8004b88 <NVIC_EncodePriority+0x30>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3b03      	subs	r3, #3
 8004b86:	e000      	b.n	8004b8a <NVIC_EncodePriority+0x32>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	43d9      	mvns	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb0:	4313      	orrs	r3, r2
         );
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3724      	adds	r7, #36	@ 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd0:	d301      	bcc.n	8004bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00f      	b.n	8004bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <SysTick_Config+0x40>)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bde:	210f      	movs	r1, #15
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	f7ff ff8e 	bl	8004b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <SysTick_Config+0x40>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bee:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <SysTick_Config+0x40>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	e000e010 	.word	0xe000e010

08004c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff29 	bl	8004a64 <__NVIC_SetPriorityGrouping>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c2c:	f7ff ff3e 	bl	8004aac <__NVIC_GetPriorityGrouping>
 8004c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7ff ff8e 	bl	8004b58 <NVIC_EncodePriority>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff5d 	bl	8004b04 <__NVIC_SetPriority>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff31 	bl	8004ac8 <__NVIC_EnableIRQ>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ffa2 	bl	8004bc0 <SysTick_Config>
 8004c7c:	4603      	mov	r3, r0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004c8c:	f3bf 8f5f 	dmb	sy
}
 8004c90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004c92:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <HAL_MPU_Disable+0x28>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	4a06      	ldr	r2, [pc, #24]	@ (8004cb0 <HAL_MPU_Disable+0x28>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004c9e:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_MPU_Disable+0x2c>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00
 8004cb4:	e000ed90 	.word	0xe000ed90

08004cb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <HAL_MPU_Enable+0x38>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <HAL_MPU_Enable+0x3c>)
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <HAL_MPU_Enable+0x3c>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004cd6:	f3bf 8f4f 	dsb	sy
}
 8004cda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cdc:	f3bf 8f6f 	isb	sy
}
 8004ce0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000ed90 	.word	0xe000ed90
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	785a      	ldrb	r2, [r3, #1]
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <HAL_MPU_ConfigRegion+0x7c>)
 8004d06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <HAL_MPU_ConfigRegion+0x7c>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_MPU_ConfigRegion+0x7c>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004d14:	4a17      	ldr	r2, [pc, #92]	@ (8004d74 <HAL_MPU_ConfigRegion+0x7c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7b1b      	ldrb	r3, [r3, #12]
 8004d20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7adb      	ldrb	r3, [r3, #11]
 8004d26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7a9b      	ldrb	r3, [r3, #10]
 8004d2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7b5b      	ldrb	r3, [r3, #13]
 8004d36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7b9b      	ldrb	r3, [r3, #14]
 8004d3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7bdb      	ldrb	r3, [r3, #15]
 8004d46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7a5b      	ldrb	r3, [r3, #9]
 8004d4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7a1b      	ldrb	r3, [r3, #8]
 8004d56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004d58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d60:	4a04      	ldr	r2, [pc, #16]	@ (8004d74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004d62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004d64:	6113      	str	r3, [r2, #16]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	e000ed90 	.word	0xe000ed90

08004d78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7ff fa08 	bl	8004198 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e099      	b.n	8004ec8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db4:	e00f      	b.n	8004dd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004db6:	f7ff f9ef 	bl	8004198 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d908      	bls.n	8004dd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e078      	b.n	8004ec8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e8      	bne.n	8004db6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4b38      	ldr	r3, [pc, #224]	@ (8004ed0 <HAL_DMA_Init+0x158>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d107      	bne.n	8004e40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d117      	bne.n	8004e9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb15 	bl	80054ac <DMA_CheckFifoParam>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2240      	movs	r2, #64	@ 0x40
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e96:	2301      	movs	r3, #1
 8004e98:	e016      	b.n	8004ec8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 facc 	bl	8005440 <DMA_CalcBaseAndBitshift>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	223f      	movs	r2, #63	@ 0x3f
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	e010803f 	.word	0xe010803f

08004ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_DMA_Start_IT+0x26>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e048      	b.n	8004f8c <HAL_DMA_Start_IT+0xb8>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d137      	bne.n	8004f7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fa5e 	bl	80053e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	223f      	movs	r2, #63	@ 0x3f
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0216 	orr.w	r2, r2, #22
 8004f42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f52:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0208 	orr.w	r2, r2, #8
 8004f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e005      	b.n	8004f8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
 8004f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fa2:	f7ff f8f9 	bl	8004198 <HAL_GetTick>
 8004fa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d008      	beq.n	8004fc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2280      	movs	r2, #128	@ 0x80
 8004fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e052      	b.n	800506c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0216 	bic.w	r2, r2, #22
 8004fd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_DMA_Abort+0x62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0208 	bic.w	r2, r2, #8
 8005004:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005016:	e013      	b.n	8005040 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005018:	f7ff f8be 	bl	8004198 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b05      	cmp	r3, #5
 8005024:	d90c      	bls.n	8005040 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2203      	movs	r2, #3
 8005030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e015      	b.n	800506c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e4      	bne.n	8005018 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005052:	223f      	movs	r2, #63	@ 0x3f
 8005054:	409a      	lsls	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d004      	beq.n	8005092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2280      	movs	r2, #128	@ 0x80
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e00c      	b.n	80050ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2205      	movs	r2, #5
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80050c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005300 <HAL_DMA_IRQHandler+0x248>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005304 <HAL_DMA_IRQHandler+0x24c>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	2208      	movs	r2, #8
 80050e4:	409a      	lsls	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01a      	beq.n	8005124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	2208      	movs	r2, #8
 8005112:	409a      	lsls	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	2201      	movs	r2, #1
 800512a:	409a      	lsls	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	2201      	movs	r2, #1
 8005148:	409a      	lsls	r2, r3
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	f043 0202 	orr.w	r2, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	2204      	movs	r2, #4
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d012      	beq.n	8005190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	2204      	movs	r2, #4
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	f043 0204 	orr.w	r2, r3, #4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	2210      	movs	r2, #16
 8005196:	409a      	lsls	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d043      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d03c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b2:	2210      	movs	r2, #16
 80051b4:	409a      	lsls	r2, r3
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d108      	bne.n	80051e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
 80051e6:	e01f      	b.n	8005228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
 80051f8:	e016      	b.n	8005228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0208 	bic.w	r2, r2, #8
 8005216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522c:	2220      	movs	r2, #32
 800522e:	409a      	lsls	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 808f 	beq.w	8005358 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8087 	beq.w	8005358 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524e:	2220      	movs	r2, #32
 8005250:	409a      	lsls	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b05      	cmp	r3, #5
 8005260:	d136      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0216 	bic.w	r2, r2, #22
 8005270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <HAL_DMA_IRQHandler+0x1da>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0208 	bic.w	r2, r2, #8
 80052a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a6:	223f      	movs	r2, #63	@ 0x3f
 80052a8:	409a      	lsls	r2, r3
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d07e      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
        }
        return;
 80052ce:	e079      	b.n	80053c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d031      	beq.n	8005358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
 80052fc:	e02c      	b.n	8005358 <HAL_DMA_IRQHandler+0x2a0>
 80052fe:	bf00      	nop
 8005300:	20000000 	.word	0x20000000
 8005304:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d023      	beq.n	8005358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
 8005318:	e01e      	b.n	8005358 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0210 	bic.w	r2, r2, #16
 8005336:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	2b00      	cmp	r3, #0
 800535e:	d032      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d022      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2205      	movs	r2, #5
 8005370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3301      	adds	r3, #1
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	d307      	bcc.n	80053a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f2      	bne.n	8005384 <HAL_DMA_IRQHandler+0x2cc>
 800539e:	e000      	b.n	80053a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
 80053c2:	e000      	b.n	80053c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053c4:	bf00      	nop
    }
  }
}
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d108      	bne.n	8005424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005422:	e007      	b.n	8005434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	3b10      	subs	r3, #16
 8005450:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <DMA_CalcBaseAndBitshift+0x60>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800545a:	4a12      	ldr	r2, [pc, #72]	@ (80054a4 <DMA_CalcBaseAndBitshift+0x64>)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d908      	bls.n	8005480 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <DMA_CalcBaseAndBitshift+0x68>)
 8005476:	4013      	ands	r3, r2
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	659a      	str	r2, [r3, #88]	@ 0x58
 800547e:	e006      	b.n	800548e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <DMA_CalcBaseAndBitshift+0x68>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	aaaaaaab 	.word	0xaaaaaaab
 80054a4:	08013ea4 	.word	0x08013ea4
 80054a8:	fffffc00 	.word	0xfffffc00

080054ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11f      	bne.n	8005506 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d856      	bhi.n	800557a <DMA_CheckFifoParam+0xce>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <DMA_CheckFifoParam+0x28>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054f7 	.word	0x080054f7
 80054dc:	080054e5 	.word	0x080054e5
 80054e0:	0800557b 	.word	0x0800557b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d046      	beq.n	800557e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f4:	e043      	b.n	800557e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054fe:	d140      	bne.n	8005582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005504:	e03d      	b.n	8005582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550e:	d121      	bne.n	8005554 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d837      	bhi.n	8005586 <DMA_CheckFifoParam+0xda>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <DMA_CheckFifoParam+0x70>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	0800552d 	.word	0x0800552d
 8005520:	08005533 	.word	0x08005533
 8005524:	0800552d 	.word	0x0800552d
 8005528:	08005545 	.word	0x08005545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e030      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d025      	beq.n	800558a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005542:	e022      	b.n	800558a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800554c:	d11f      	bne.n	800558e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005552:	e01c      	b.n	800558e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d903      	bls.n	8005562 <DMA_CheckFifoParam+0xb6>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d003      	beq.n	8005568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005560:	e018      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
      break;
 8005566:	e015      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00e      	beq.n	8005592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e00b      	b.n	8005592 <DMA_CheckFifoParam+0xe6>
      break;
 800557a:	bf00      	nop
 800557c:	e00a      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;
 800557e:	bf00      	nop
 8005580:	e008      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;
 8005582:	bf00      	nop
 8005584:	e006      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;
 8005586:	bf00      	nop
 8005588:	e004      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;   
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
      break;
 8005592:	bf00      	nop
    }
  } 
  
  return status; 
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	@ 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e169      	b.n	8005898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80055c4:	2201      	movs	r2, #1
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	f040 8158 	bne.w	8005892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d005      	beq.n	80055fa <HAL_GPIO_Init+0x56>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d130      	bne.n	800565c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	2203      	movs	r2, #3
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005630:	2201      	movs	r2, #1
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 0201 	and.w	r2, r3, #1
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d017      	beq.n	8005698 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	2203      	movs	r2, #3
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d123      	bne.n	80056ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	08da      	lsrs	r2, r3, #3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3208      	adds	r2, #8
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	220f      	movs	r2, #15
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	69b9      	ldr	r1, [r7, #24]
 80056e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	2203      	movs	r2, #3
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 0203 	and.w	r2, r3, #3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80b2 	beq.w	8005892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800572e:	4b60      	ldr	r3, [pc, #384]	@ (80058b0 <HAL_GPIO_Init+0x30c>)
 8005730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005732:	4a5f      	ldr	r2, [pc, #380]	@ (80058b0 <HAL_GPIO_Init+0x30c>)
 8005734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005738:	6453      	str	r3, [r2, #68]	@ 0x44
 800573a:	4b5d      	ldr	r3, [pc, #372]	@ (80058b0 <HAL_GPIO_Init+0x30c>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005746:	4a5b      	ldr	r2, [pc, #364]	@ (80058b4 <HAL_GPIO_Init+0x310>)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	220f      	movs	r2, #15
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a52      	ldr	r2, [pc, #328]	@ (80058b8 <HAL_GPIO_Init+0x314>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d02b      	beq.n	80057ca <HAL_GPIO_Init+0x226>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a51      	ldr	r2, [pc, #324]	@ (80058bc <HAL_GPIO_Init+0x318>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d025      	beq.n	80057c6 <HAL_GPIO_Init+0x222>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a50      	ldr	r2, [pc, #320]	@ (80058c0 <HAL_GPIO_Init+0x31c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01f      	beq.n	80057c2 <HAL_GPIO_Init+0x21e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4f      	ldr	r2, [pc, #316]	@ (80058c4 <HAL_GPIO_Init+0x320>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d019      	beq.n	80057be <HAL_GPIO_Init+0x21a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4e      	ldr	r2, [pc, #312]	@ (80058c8 <HAL_GPIO_Init+0x324>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_GPIO_Init+0x216>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a4d      	ldr	r2, [pc, #308]	@ (80058cc <HAL_GPIO_Init+0x328>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00d      	beq.n	80057b6 <HAL_GPIO_Init+0x212>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4c      	ldr	r2, [pc, #304]	@ (80058d0 <HAL_GPIO_Init+0x32c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x20e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a4b      	ldr	r2, [pc, #300]	@ (80058d4 <HAL_GPIO_Init+0x330>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_GPIO_Init+0x20a>
 80057aa:	2307      	movs	r3, #7
 80057ac:	e00e      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057ae:	2308      	movs	r3, #8
 80057b0:	e00c      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057b2:	2306      	movs	r3, #6
 80057b4:	e00a      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057b6:	2305      	movs	r3, #5
 80057b8:	e008      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057ba:	2304      	movs	r3, #4
 80057bc:	e006      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057be:	2303      	movs	r3, #3
 80057c0:	e004      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e002      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <HAL_GPIO_Init+0x228>
 80057ca:	2300      	movs	r3, #0
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	f002 0203 	and.w	r2, r2, #3
 80057d2:	0092      	lsls	r2, r2, #2
 80057d4:	4093      	lsls	r3, r2
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057dc:	4935      	ldr	r1, [pc, #212]	@ (80058b4 <HAL_GPIO_Init+0x310>)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	089b      	lsrs	r3, r3, #2
 80057e2:	3302      	adds	r3, #2
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ea:	4b3b      	ldr	r3, [pc, #236]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800580e:	4a32      	ldr	r2, [pc, #200]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005814:	4b30      	ldr	r3, [pc, #192]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005838:	4a27      	ldr	r2, [pc, #156]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800583e:	4b26      	ldr	r3, [pc, #152]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	43db      	mvns	r3, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4013      	ands	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005868:	4b1b      	ldr	r3, [pc, #108]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800588c:	4a12      	ldr	r2, [pc, #72]	@ (80058d8 <HAL_GPIO_Init+0x334>)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b0f      	cmp	r3, #15
 800589c:	f67f ae92 	bls.w	80055c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	3724      	adds	r7, #36	@ 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800
 80058b4:	40013800 	.word	0x40013800
 80058b8:	40020000 	.word	0x40020000
 80058bc:	40020400 	.word	0x40020400
 80058c0:	40020800 	.word	0x40020800
 80058c4:	40020c00 	.word	0x40020c00
 80058c8:	40021000 	.word	0x40021000
 80058cc:	40021400 	.word	0x40021400
 80058d0:	40021800 	.word	0x40021800
 80058d4:	40021c00 	.word	0x40021c00
 80058d8:	40013c00 	.word	0x40013c00

080058dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
 80058e8:	4613      	mov	r3, r2
 80058ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058ec:	787b      	ldrb	r3, [r7, #1]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058f8:	e003      	b.n	8005902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	041a      	lsls	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	619a      	str	r2, [r3, #24]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005920:	887a      	ldrh	r2, [r7, #2]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4013      	ands	r3, r2
 8005926:	041a      	lsls	r2, r3, #16
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	43d9      	mvns	r1, r3
 800592c:	887b      	ldrh	r3, [r7, #2]
 800592e:	400b      	ands	r3, r1
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	619a      	str	r2, [r3, #24]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800594e:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	4013      	ands	r3, r2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d006      	beq.n	8005968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800595a:	4a05      	ldr	r2, [pc, #20]	@ (8005970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fd f924 	bl	8002bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40013c00 	.word	0x40013c00

08005974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e08b      	b.n	8005a9e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fd ff0c 	bl	80037b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d107      	bne.n	80059ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	e006      	b.n	80059fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d108      	bne.n	8005a16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	e007      	b.n	8005a26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <HAL_I2C_Init+0x134>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	02008000 	.word	0x02008000

08005aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d138      	bne.n	8005b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e032      	b.n	8005b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	@ 0x24
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d139      	bne.n	8005bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e033      	b.n	8005bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	@ 0x24
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af02      	add	r7, sp, #8
 8005be0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e108      	b.n	8005dfe <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f009 fe4c 	bl	800f8a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c1a:	d102      	bne.n	8005c22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f006 f9bf 	bl	800bfaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	7c1a      	ldrb	r2, [r3, #16]
 8005c34:	f88d 2000 	strb.w	r2, [sp]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c3c:	f006 f876 	bl	800bd2c <USB_CoreInit>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0d5      	b.n	8005dfe <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f006 f9b7 	bl	800bfcc <USB_SetCurrentMode>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0c6      	b.n	8005dfe <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e04a      	b.n	8005d0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	3315      	adds	r3, #21
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	3314      	adds	r3, #20
 8005c9a:	7bfa      	ldrb	r2, [r7, #15]
 8005c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	b298      	uxth	r0, r3
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	332e      	adds	r3, #46	@ 0x2e
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	331c      	adds	r3, #28
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3320      	adds	r3, #32
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	3324      	adds	r3, #36	@ 0x24
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	791b      	ldrb	r3, [r3, #4]
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3af      	bcc.n	8005c76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	e044      	b.n	8005da6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d48:	7bfa      	ldrb	r2, [r7, #15]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d8a:	7bfa      	ldrb	r2, [r7, #15]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	3301      	adds	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	7bfa      	ldrb	r2, [r7, #15]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3b5      	bcc.n	8005d1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7c1a      	ldrb	r2, [r3, #16]
 8005db8:	f88d 2000 	strb.w	r2, [sp]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc0:	f006 f950 	bl	800c064 <USB_DevInit>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e013      	b.n	8005dfe <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7b1b      	ldrb	r3, [r3, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f95b 	bl	80070a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f007 f9a5 	bl	800d146 <USB_DevDisconnect>

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_PCD_Start+0x16>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e012      	b.n	8005e42 <HAL_PCD_Start+0x3c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f006 f8ad 	bl	800bf88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f007 f966 	bl	800d104 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e4a:	b590      	push	{r4, r7, lr}
 8005e4c:	b08d      	sub	sp, #52	@ 0x34
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f007 fa24 	bl	800d2ae <USB_GetMode>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f040 84b9 	bne.w	80067e0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f007 f988 	bl	800d188 <USB_ReadInterrupts>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 84af 	beq.w	80067de <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f007 f975 	bl	800d188 <USB_ReadInterrupts>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d107      	bne.n	8005eb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f002 0202 	and.w	r2, r2, #2
 8005eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f007 f963 	bl	800d188 <USB_ReadInterrupts>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d161      	bne.n	8005f90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0210 	bic.w	r2, r2, #16
 8005eda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f06:	d124      	bne.n	8005f52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d035      	beq.n	8005f80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	6a38      	ldr	r0, [r7, #32]
 8005f28:	f006 ff9a 	bl	800ce60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f38:	441a      	add	r2, r3
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f4a:	441a      	add	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	615a      	str	r2, [r3, #20]
 8005f50:	e016      	b.n	8005f80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005f58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f5c:	d110      	bne.n	8005f80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f64:	2208      	movs	r2, #8
 8005f66:	4619      	mov	r1, r3
 8005f68:	6a38      	ldr	r0, [r7, #32]
 8005f6a:	f006 ff79 	bl	800ce60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7a:	441a      	add	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0210 	orr.w	r2, r2, #16
 8005f8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f007 f8f7 	bl	800d188 <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fa0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fa4:	f040 80a7 	bne.w	80060f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f007 f8fc 	bl	800d1ae <USB_ReadDevAllOutEpInterrupt>
 8005fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005fb8:	e099      	b.n	80060ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 808e 	beq.w	80060e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f007 f920 	bl	800d216 <USB_ReadDevOutEPInterrupt>
 8005fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fed0 	bl	8006d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006012:	461a      	mov	r2, r3
 8006014:	2308      	movs	r3, #8
 8006016:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 ffa6 	bl	8006f6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	461a      	mov	r2, r3
 8006038:	2310      	movs	r3, #16
 800603a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d030      	beq.n	80060a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d109      	bne.n	8006066 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006060:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006064:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	3304      	adds	r3, #4
 800607a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	b2db      	uxtb	r3, r3
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f009 fd2b 	bl	800faec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	2302      	movs	r3, #2
 80060a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060be:	461a      	mov	r2, r3
 80060c0:	2320      	movs	r3, #32
 80060c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	461a      	mov	r2, r3
 80060dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	3301      	adds	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f47f af62 	bne.w	8005fba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f007 f844 	bl	800d188 <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800610a:	f040 80db 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f007 f865 	bl	800d1e2 <USB_ReadDevAllInEpInterrupt>
 8006118:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800611e:	e0cd      	b.n	80062bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80c2 	beq.w	80062b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f007 f88b 	bl	800d252 <USB_ReadDevInEPInterrupt>
 800613c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d057      	beq.n	80061f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	2201      	movs	r2, #1
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	43db      	mvns	r3, r3
 8006162:	69f9      	ldr	r1, [r7, #28]
 8006164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006168:	4013      	ands	r3, r2
 800616a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	2301      	movs	r3, #1
 800617c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	799b      	ldrb	r3, [r3, #6]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d132      	bne.n	80061ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	3320      	adds	r3, #32
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4403      	add	r3, r0
 80061a6:	331c      	adds	r3, #28
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4419      	add	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4403      	add	r3, r0
 80061ba:	3320      	adds	r3, #32
 80061bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d113      	bne.n	80061ec <HAL_PCD_IRQHandler+0x3a2>
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3324      	adds	r3, #36	@ 0x24
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061e4:	461a      	mov	r2, r3
 80061e6:	2101      	movs	r1, #1
 80061e8:	f007 f894 	bl	800d314 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f009 fbf5 	bl	800f9e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620e:	461a      	mov	r2, r3
 8006210:	2308      	movs	r3, #8
 8006212:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	461a      	mov	r2, r3
 800622c:	2310      	movs	r3, #16
 800622e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006246:	461a      	mov	r2, r3
 8006248:	2340      	movs	r3, #64	@ 0x40
 800624a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d023      	beq.n	800629e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006258:	6a38      	ldr	r0, [r7, #32]
 800625a:	f006 f873 	bl	800c344 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800625e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	3310      	adds	r3, #16
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	3304      	adds	r3, #4
 8006270:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d108      	bne.n	800628c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	b2db      	uxtb	r3, r3
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f009 fc42 	bl	800fb10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006298:	461a      	mov	r2, r3
 800629a:	2302      	movs	r3, #2
 800629c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80062a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fcea 	bl	8006c84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	3301      	adds	r3, #1
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af2e 	bne.w	8006120 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f006 ff5d 	bl	800d188 <USB_ReadInterrupts>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d8:	d122      	bne.n	8006320 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d108      	bne.n	800630a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006300:	2100      	movs	r1, #0
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f009 fdc0 	bl	800fe88 <HAL_PCDEx_LPM_Callback>
 8006308:	e002      	b.n	8006310 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f009 fbe0 	bl	800fad0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800631e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f006 ff2f 	bl	800d188 <USB_ReadInterrupts>
 800632a:	4603      	mov	r3, r0
 800632c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006334:	d112      	bne.n	800635c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d102      	bne.n	800634c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f009 fb9c 	bl	800fa84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800635a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f006 ff11 	bl	800d188 <USB_ReadInterrupts>
 8006366:	4603      	mov	r3, r0
 8006368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800636c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006370:	d121      	bne.n	80063b6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006380:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006388:	2b00      	cmp	r3, #0
 800638a:	d111      	bne.n	80063b0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80063a6:	2101      	movs	r1, #1
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f009 fd6d 	bl	800fe88 <HAL_PCDEx_LPM_Callback>
 80063ae:	e002      	b.n	80063b6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f009 fb67 	bl	800fa84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f006 fee4 	bl	800d188 <USB_ReadInterrupts>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	f040 80b7 	bne.w	800653c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2110      	movs	r1, #16
 80063e8:	4618      	mov	r0, r3
 80063ea:	f005 ffab 	bl	800c344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ee:	2300      	movs	r3, #0
 80063f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063f2:	e046      	b.n	8006482 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80063f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006400:	461a      	mov	r2, r3
 8006402:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006406:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006422:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006426:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800643a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800645a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006476:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800647a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	3301      	adds	r3, #1
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	791b      	ldrb	r3, [r3, #4]
 8006486:	461a      	mov	r2, r3
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	4293      	cmp	r3, r2
 800648c:	d3b2      	bcc.n	80063f4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800649c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80064a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7bdb      	ldrb	r3, [r3, #15]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ba:	f043 030b 	orr.w	r3, r3, #11
 80064be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064d0:	f043 030b 	orr.w	r3, r3, #11
 80064d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80064d6:	e015      	b.n	8006504 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e6:	4619      	mov	r1, r3
 80064e8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80064ec:	4313      	orrs	r3, r2
 80064ee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064fe:	f043 030b 	orr.w	r3, r3, #11
 8006502:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006516:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006526:	461a      	mov	r2, r3
 8006528:	f006 fef4 	bl	800d314 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800653a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f006 fe21 	bl	800d188 <USB_ReadInterrupts>
 8006546:	4603      	mov	r3, r0
 8006548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006550:	d123      	bne.n	800659a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f006 feb8 	bl	800d2cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f005 ff68 	bl	800c436 <USB_GetDevSpeed>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681c      	ldr	r4, [r3, #0]
 8006572:	f001 faa3 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8006576:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800657c:	461a      	mov	r2, r3
 800657e:	4620      	mov	r0, r4
 8006580:	f005 fc60 	bl	800be44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f009 fa54 	bl	800fa32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695a      	ldr	r2, [r3, #20]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006598:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f006 fdf2 	bl	800d188 <USB_ReadInterrupts>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d10a      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f009 fa31 	bl	800fa16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f002 0208 	and.w	r2, r2, #8
 80065c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f006 fddd 	bl	800d188 <USB_ReadInterrupts>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d4:	2b80      	cmp	r3, #128	@ 0x80
 80065d6:	d123      	bne.n	8006620 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065e4:	2301      	movs	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e8:	e014      	b.n	8006614 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fb0a 	bl	8006c22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	3301      	adds	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	461a      	mov	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	4293      	cmp	r3, r2
 800661e:	d3e4      	bcc.n	80065ea <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f006 fdaf 	bl	800d188 <USB_ReadInterrupts>
 800662a:	4603      	mov	r3, r0
 800662c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006634:	d13c      	bne.n	80066b0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006636:	2301      	movs	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
 800663a:	e02b      	b.n	8006694 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	3318      	adds	r3, #24
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d115      	bne.n	800668e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006662:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006664:	2b00      	cmp	r3, #0
 8006666:	da12      	bge.n	800668e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	3317      	adds	r3, #23
 8006678:	2201      	movs	r2, #1
 800667a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 faca 	bl	8006c22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	3301      	adds	r3, #1
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	791b      	ldrb	r3, [r3, #4]
 8006698:	461a      	mov	r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	4293      	cmp	r3, r2
 800669e:	d3cd      	bcc.n	800663c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80066ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f006 fd67 	bl	800d188 <USB_ReadInterrupts>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c4:	d156      	bne.n	8006774 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066c6:	2301      	movs	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ca:	e045      	b.n	8006758 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d12e      	bne.n	8006752 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80066f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da2b      	bge.n	8006752 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	0c1a      	lsrs	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006704:	4053      	eors	r3, r2
 8006706:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800670a:	2b00      	cmp	r3, #0
 800670c:	d121      	bne.n	8006752 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800674a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800674e:	6053      	str	r3, [r2, #4]
            break;
 8006750:	e008      	b.n	8006764 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	3301      	adds	r3, #1
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	791b      	ldrb	r3, [r3, #4]
 800675c:	461a      	mov	r2, r3
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	4293      	cmp	r3, r2
 8006762:	d3b3      	bcc.n	80066cc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f006 fd05 	bl	800d188 <USB_ReadInterrupts>
 800677e:	4603      	mov	r3, r0
 8006780:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d10a      	bne.n	80067a0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f009 f9d2 	bl	800fb34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800679e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f006 fcef 	bl	800d188 <USB_ReadInterrupts>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d115      	bne.n	80067e0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f009 f9c2 	bl	800fb50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	e000      	b.n	80067e0 <HAL_PCD_IRQHandler+0x996>
      return;
 80067de:	bf00      	nop
    }
  }
}
 80067e0:	3734      	adds	r7, #52	@ 0x34
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd90      	pop	{r4, r7, pc}

080067e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_PCD_SetAddress+0x1a>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e012      	b.n	8006826 <HAL_PCD_SetAddress+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f006 fc4e 	bl	800d0b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	461a      	mov	r2, r3
 800683c:	4603      	mov	r3, r0
 800683e:	70fb      	strb	r3, [r7, #3]
 8006840:	460b      	mov	r3, r1
 8006842:	803b      	strh	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800684c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	da0f      	bge.n	8006874 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	f003 020f 	and.w	r2, r3, #15
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	3310      	adds	r3, #16
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	3304      	adds	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	705a      	strb	r2, [r3, #1]
 8006872:	e00f      	b.n	8006894 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	4613      	mov	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	3304      	adds	r3, #4
 800688c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80068a0:	883b      	ldrh	r3, [r7, #0]
 80068a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	78ba      	ldrb	r2, [r7, #2]
 80068ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d004      	beq.n	80068c2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068c2:	78bb      	ldrb	r3, [r7, #2]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d102      	bne.n	80068ce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_PCD_EP_Open+0xae>
 80068d8:	2302      	movs	r3, #2
 80068da:	e00e      	b.n	80068fa <HAL_PCD_EP_Open+0xcc>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f005 fdc8 	bl	800c480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80068f8:	7afb      	ldrb	r3, [r7, #11]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800690e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006912:	2b00      	cmp	r3, #0
 8006914:	da0f      	bge.n	8006936 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	f003 020f 	and.w	r2, r3, #15
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	3310      	adds	r3, #16
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4413      	add	r3, r2
 800692a:	3304      	adds	r3, #4
 800692c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	705a      	strb	r2, [r3, #1]
 8006934:	e00f      	b.n	8006956 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	f003 020f 	and.w	r2, r3, #15
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_PCD_EP_Close+0x6e>
 800696c:	2302      	movs	r3, #2
 800696e:	e00e      	b.n	800698e <HAL_PCD_EP_Close+0x8c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	4618      	mov	r0, r3
 8006980:	f005 fe06 	bl	800c590 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	460b      	mov	r3, r1
 80069a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	f003 020f 	and.w	r2, r3, #15
 80069ac:	4613      	mov	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2200      	movs	r2, #0
 80069d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	799b      	ldrb	r3, [r3, #6]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d102      	bne.n	80069f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	799b      	ldrb	r3, [r3, #6]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6979      	ldr	r1, [r7, #20]
 80069fe:	f005 fea3 	bl	800c748 <USB_EPStartXfer>

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006a2e:	681b      	ldr	r3, [r3, #0]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	f003 020f 	and.w	r2, r3, #15
 8006a52:	4613      	mov	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2200      	movs	r2, #0
 8006a74:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	799b      	ldrb	r3, [r3, #6]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	799b      	ldrb	r3, [r3, #6]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	f005 fe51 	bl	800c748 <USB_EPStartXfer>

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	7912      	ldrb	r2, [r2, #4]
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d901      	bls.n	8006ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e04f      	b.n	8006b6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	da0f      	bge.n	8006af6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	f003 020f 	and.w	r2, r3, #15
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4413      	add	r3, r2
 8006aea:	3304      	adds	r3, #4
 8006aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	705a      	strb	r2, [r3, #1]
 8006af4:	e00d      	b.n	8006b12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	4613      	mov	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4413      	add	r3, r2
 8006b08:	3304      	adds	r3, #4
 8006b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_PCD_EP_SetStall+0x82>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e01d      	b.n	8006b6e <HAL_PCD_EP_SetStall+0xbe>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f006 f9e5 	bl	800cf10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7999      	ldrb	r1, [r3, #6]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f006 fbd8 	bl	800d314 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	7912      	ldrb	r2, [r2, #4]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e042      	b.n	8006c1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da0f      	bge.n	8006bbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	3310      	adds	r3, #16
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	705a      	strb	r2, [r3, #1]
 8006bba:	e00f      	b.n	8006bdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 020f 	and.w	r2, r3, #15
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_PCD_EP_ClrStall+0x86>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e00e      	b.n	8006c1a <HAL_PCD_EP_ClrStall+0xa4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f006 f9ee 	bl	800cfec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da0c      	bge.n	8006c50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	3310      	adds	r3, #16
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e00c      	b.n	8006c6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f006 f80d 	bl	800cc90 <USB_EPStopXfer>
 8006c76:	4603      	mov	r3, r0
 8006c78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	@ 0x28
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	695a      	ldr	r2, [r3, #20]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d901      	bls.n	8006cbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e06b      	b.n	8006d94 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d902      	bls.n	8006cd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3303      	adds	r3, #3
 8006cdc:	089b      	lsrs	r3, r3, #2
 8006cde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ce0:	e02a      	b.n	8006d38 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d902      	bls.n	8006cfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3303      	adds	r3, #3
 8006d02:	089b      	lsrs	r3, r3, #2
 8006d04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68d9      	ldr	r1, [r3, #12]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	4603      	mov	r3, r0
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f006 f862 	bl	800cde4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	441a      	add	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	695a      	ldr	r2, [r3, #20]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	441a      	add	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d809      	bhi.n	8006d62 <PCD_WriteEmptyTxFifo+0xde>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d203      	bcs.n	8006d62 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1bf      	bne.n	8006ce2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d811      	bhi.n	8006d92 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	2201      	movs	r2, #1
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	6939      	ldr	r1, [r7, #16]
 8006d8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d8e:	4013      	ands	r3, r2
 8006d90:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	333c      	adds	r3, #60	@ 0x3c
 8006db4:	3304      	adds	r3, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	799b      	ldrb	r3, [r3, #6]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d17b      	bne.n	8006eca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d015      	beq.n	8006e08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4a61      	ldr	r2, [pc, #388]	@ (8006f64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	f240 80b9 	bls.w	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80b3 	beq.w	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e04:	6093      	str	r3, [r2, #8]
 8006e06:	e0a7      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2320      	movs	r3, #32
 8006e22:	6093      	str	r3, [r2, #8]
 8006e24:	e098      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 8093 	bne.w	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4a4b      	ldr	r2, [pc, #300]	@ (8006f64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d90f      	bls.n	8006e5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e50:	461a      	mov	r2, r3
 8006e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e56:	6093      	str	r3, [r2, #8]
 8006e58:	e07e      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	0159      	lsls	r1, r3, #5
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	440b      	add	r3, r1
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d114      	bne.n	8006ebc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	f006 fa34 	bl	800d314 <USB_EP0_OutStart>
 8006eac:	e006      	b.n	8006ebc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f008 fd72 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
 8006ec8:	e046      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	@ (8006f68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d124      	bne.n	8006f1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eee:	6093      	str	r3, [r2, #8]
 8006ef0:	e032      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2320      	movs	r3, #32
 8006f0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f008 fd49 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
 8006f1a:	e01d      	b.n	8006f58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d114      	bne.n	8006f4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f44:	461a      	mov	r2, r3
 8006f46:	2100      	movs	r1, #0
 8006f48:	f006 f9e4 	bl	800d314 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f008 fd2a 	bl	800f9ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	4f54300a 	.word	0x4f54300a
 8006f68:	4f54310a 	.word	0x4f54310a

08006f6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	333c      	adds	r3, #60	@ 0x3c
 8006f84:	3304      	adds	r3, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ff4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d90e      	bls.n	8006fc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d009      	beq.n	8006fc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f008 fce1 	bl	800f988 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d90c      	bls.n	8006fe8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	799b      	ldrb	r3, [r3, #6]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d108      	bne.n	8006fe8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	f006 f996 	bl	800d314 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	4f54300a 	.word	0x4f54300a

08006ff8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
 8007004:	4613      	mov	r3, r2
 8007006:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d107      	bne.n	8007026 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007016:	883b      	ldrh	r3, [r7, #0]
 8007018:	0419      	lsls	r1, r3, #16
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	430a      	orrs	r2, r1
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28
 8007024:	e028      	b.n	8007078 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
 8007038:	e00d      	b.n	8007056 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	3340      	adds	r3, #64	@ 0x40
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	3301      	adds	r3, #1
 8007054:	73fb      	strb	r3, [r7, #15]
 8007056:	7bfa      	ldrb	r2, [r7, #15]
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	3b01      	subs	r3, #1
 800705c:	429a      	cmp	r2, r3
 800705e:	d3ec      	bcc.n	800703a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007060:	883b      	ldrh	r3, [r7, #0]
 8007062:	0418      	lsls	r0, r3, #16
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6819      	ldr	r1, [r3, #0]
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	3b01      	subs	r3, #1
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	4302      	orrs	r2, r0
 8007070:	3340      	adds	r3, #64	@ 0x40
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070d6:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <HAL_PCDEx_ActivateLPM+0x44>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	10000003 	.word	0x10000003

080070f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80070fa:	4b23      	ldr	r3, [pc, #140]	@ (8007188 <HAL_PWREx_EnableOverDrive+0x98>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <HAL_PWREx_EnableOverDrive+0x98>)
 8007100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007104:	6413      	str	r3, [r2, #64]	@ 0x40
 8007106:	4b20      	ldr	r3, [pc, #128]	@ (8007188 <HAL_PWREx_EnableOverDrive+0x98>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007112:	4b1e      	ldr	r3, [pc, #120]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1d      	ldr	r2, [pc, #116]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800711e:	f7fd f83b 	bl	8004198 <HAL_GetTick>
 8007122:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007124:	e009      	b.n	800713a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007126:	f7fd f837 	bl	8004198 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007134:	d901      	bls.n	800713a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e022      	b.n	8007180 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800713a:	4b14      	ldr	r3, [pc, #80]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007146:	d1ee      	bne.n	8007126 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007148:	4b10      	ldr	r3, [pc, #64]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0f      	ldr	r2, [pc, #60]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 800714e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007152:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007154:	f7fd f820 	bl	8004198 <HAL_GetTick>
 8007158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800715a:	e009      	b.n	8007170 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800715c:	f7fd f81c 	bl	8004198 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800716a:	d901      	bls.n	8007170 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e007      	b.n	8007180 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007170:	4b06      	ldr	r3, [pc, #24]	@ (800718c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800717c:	d1ee      	bne.n	800715c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000

08007190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007198:	2300      	movs	r3, #0
 800719a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e291      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8087 	beq.w	80072c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071b4:	4b96      	ldr	r3, [pc, #600]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 030c 	and.w	r3, r3, #12
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d00c      	beq.n	80071da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071c0:	4b93      	ldr	r3, [pc, #588]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 030c 	and.w	r3, r3, #12
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d112      	bne.n	80071f2 <HAL_RCC_OscConfig+0x62>
 80071cc:	4b90      	ldr	r3, [pc, #576]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d8:	d10b      	bne.n	80071f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071da:	4b8d      	ldr	r3, [pc, #564]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d06c      	beq.n	80072c0 <HAL_RCC_OscConfig+0x130>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d168      	bne.n	80072c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e26b      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fa:	d106      	bne.n	800720a <HAL_RCC_OscConfig+0x7a>
 80071fc:	4b84      	ldr	r3, [pc, #528]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a83      	ldr	r2, [pc, #524]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e02e      	b.n	8007268 <HAL_RCC_OscConfig+0xd8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10c      	bne.n	800722c <HAL_RCC_OscConfig+0x9c>
 8007212:	4b7f      	ldr	r3, [pc, #508]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7e      	ldr	r2, [pc, #504]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	4b7c      	ldr	r3, [pc, #496]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a7b      	ldr	r2, [pc, #492]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007224:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e01d      	b.n	8007268 <HAL_RCC_OscConfig+0xd8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007234:	d10c      	bne.n	8007250 <HAL_RCC_OscConfig+0xc0>
 8007236:	4b76      	ldr	r3, [pc, #472]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a75      	ldr	r2, [pc, #468]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800723c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	4b73      	ldr	r3, [pc, #460]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a72      	ldr	r2, [pc, #456]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e00b      	b.n	8007268 <HAL_RCC_OscConfig+0xd8>
 8007250:	4b6f      	ldr	r3, [pc, #444]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6e      	ldr	r2, [pc, #440]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	4b6c      	ldr	r3, [pc, #432]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6b      	ldr	r2, [pc, #428]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d013      	beq.n	8007298 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fc ff92 	bl	8004198 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007278:	f7fc ff8e 	bl	8004198 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	@ 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e21f      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728a:	4b61      	ldr	r3, [pc, #388]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0xe8>
 8007296:	e014      	b.n	80072c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007298:	f7fc ff7e 	bl	8004198 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072a0:	f7fc ff7a 	bl	8004198 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	@ 0x64
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e20b      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b2:	4b57      	ldr	r3, [pc, #348]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0x110>
 80072be:	e000      	b.n	80072c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d069      	beq.n	80073a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072ce:	4b50      	ldr	r3, [pc, #320]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072da:	4b4d      	ldr	r3, [pc, #308]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 030c 	and.w	r3, r3, #12
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d11c      	bne.n	8007320 <HAL_RCC_OscConfig+0x190>
 80072e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d116      	bne.n	8007320 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f2:	4b47      	ldr	r3, [pc, #284]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_RCC_OscConfig+0x17a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d001      	beq.n	800730a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e1df      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730a:	4b41      	ldr	r3, [pc, #260]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	493d      	ldr	r1, [pc, #244]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800731e:	e040      	b.n	80073a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d023      	beq.n	8007370 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007328:	4b39      	ldr	r3, [pc, #228]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a38      	ldr	r2, [pc, #224]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fc ff30 	bl	8004198 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733c:	f7fc ff2c 	bl	8004198 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e1bd      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734e:	4b30      	ldr	r3, [pc, #192]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b2d      	ldr	r3, [pc, #180]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4929      	ldr	r1, [pc, #164]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
 800736e:	e018      	b.n	80073a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007370:	4b27      	ldr	r3, [pc, #156]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a26      	ldr	r2, [pc, #152]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fc ff0c 	bl	8004198 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007384:	f7fc ff08 	bl	8004198 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e199      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007396:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d038      	beq.n	8007420 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d019      	beq.n	80073ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b6:	4b16      	ldr	r3, [pc, #88]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c2:	f7fc fee9 	bl	8004198 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ca:	f7fc fee5 	bl	8004198 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e176      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80073de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCC_OscConfig+0x23a>
 80073e8:	e01a      	b.n	8007420 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ea:	4b09      	ldr	r3, [pc, #36]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80073ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ee:	4a08      	ldr	r2, [pc, #32]	@ (8007410 <HAL_RCC_OscConfig+0x280>)
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fc fecf 	bl	8004198 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fc fecb 	bl	8004198 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d903      	bls.n	8007414 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e15c      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
 8007410:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007414:	4b91      	ldr	r3, [pc, #580]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ee      	bne.n	80073fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80a4 	beq.w	8007576 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800742e:	4b8b      	ldr	r3, [pc, #556]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10d      	bne.n	8007456 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800743a:	4b88      	ldr	r3, [pc, #544]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	4a87      	ldr	r2, [pc, #540]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007444:	6413      	str	r3, [r2, #64]	@ 0x40
 8007446:	4b85      	ldr	r3, [pc, #532]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007452:	2301      	movs	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007456:	4b82      	ldr	r3, [pc, #520]	@ (8007660 <HAL_RCC_OscConfig+0x4d0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d118      	bne.n	8007494 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007462:	4b7f      	ldr	r3, [pc, #508]	@ (8007660 <HAL_RCC_OscConfig+0x4d0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a7e      	ldr	r2, [pc, #504]	@ (8007660 <HAL_RCC_OscConfig+0x4d0>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800746c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800746e:	f7fc fe93 	bl	8004198 <HAL_GetTick>
 8007472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007476:	f7fc fe8f 	bl	8004198 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b64      	cmp	r3, #100	@ 0x64
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e120      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007488:	4b75      	ldr	r3, [pc, #468]	@ (8007660 <HAL_RCC_OscConfig+0x4d0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d106      	bne.n	80074aa <HAL_RCC_OscConfig+0x31a>
 800749c:	4b6f      	ldr	r3, [pc, #444]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800749e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a0:	4a6e      	ldr	r2, [pc, #440]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074a2:	f043 0301 	orr.w	r3, r3, #1
 80074a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074a8:	e02d      	b.n	8007506 <HAL_RCC_OscConfig+0x376>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10c      	bne.n	80074cc <HAL_RCC_OscConfig+0x33c>
 80074b2:	4b6a      	ldr	r3, [pc, #424]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b6:	4a69      	ldr	r2, [pc, #420]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80074be:	4b67      	ldr	r3, [pc, #412]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c2:	4a66      	ldr	r2, [pc, #408]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074c4:	f023 0304 	bic.w	r3, r3, #4
 80074c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ca:	e01c      	b.n	8007506 <HAL_RCC_OscConfig+0x376>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	d10c      	bne.n	80074ee <HAL_RCC_OscConfig+0x35e>
 80074d4:	4b61      	ldr	r3, [pc, #388]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d8:	4a60      	ldr	r2, [pc, #384]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074da:	f043 0304 	orr.w	r3, r3, #4
 80074de:	6713      	str	r3, [r2, #112]	@ 0x70
 80074e0:	4b5e      	ldr	r3, [pc, #376]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	4a5d      	ldr	r2, [pc, #372]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ec:	e00b      	b.n	8007506 <HAL_RCC_OscConfig+0x376>
 80074ee:	4b5b      	ldr	r3, [pc, #364]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f2:	4a5a      	ldr	r2, [pc, #360]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074fa:	4b58      	ldr	r3, [pc, #352]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fe:	4a57      	ldr	r2, [pc, #348]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007500:	f023 0304 	bic.w	r3, r3, #4
 8007504:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d015      	beq.n	800753a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750e:	f7fc fe43 	bl	8004198 <HAL_GetTick>
 8007512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007514:	e00a      	b.n	800752c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007516:	f7fc fe3f 	bl	8004198 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007524:	4293      	cmp	r3, r2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e0ce      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752c:	4b4b      	ldr	r3, [pc, #300]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800752e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0ee      	beq.n	8007516 <HAL_RCC_OscConfig+0x386>
 8007538:	e014      	b.n	8007564 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753a:	f7fc fe2d 	bl	8004198 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007540:	e00a      	b.n	8007558 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fc fe29 	bl	8004198 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0b8      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007558:	4b40      	ldr	r3, [pc, #256]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1ee      	bne.n	8007542 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d105      	bne.n	8007576 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800756a:	4b3c      	ldr	r3, [pc, #240]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	4a3b      	ldr	r2, [pc, #236]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007574:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 80a4 	beq.w	80076c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007580:	4b36      	ldr	r3, [pc, #216]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 030c 	and.w	r3, r3, #12
 8007588:	2b08      	cmp	r3, #8
 800758a:	d06b      	beq.n	8007664 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d149      	bne.n	8007628 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007594:	4b31      	ldr	r3, [pc, #196]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a30      	ldr	r2, [pc, #192]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800759a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800759e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fc fdfa 	bl	8004198 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a8:	f7fc fdf6 	bl	8004198 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e087      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ba:	4b28      	ldr	r3, [pc, #160]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69da      	ldr	r2, [r3, #28]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	019b      	lsls	r3, r3, #6
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	3b01      	subs	r3, #1
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	061b      	lsls	r3, r3, #24
 80075ea:	4313      	orrs	r3, r2
 80075ec:	4a1b      	ldr	r2, [pc, #108]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80075ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075f4:	4b19      	ldr	r3, [pc, #100]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a18      	ldr	r2, [pc, #96]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 80075fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fc fdca 	bl	8004198 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007608:	f7fc fdc6 	bl	8004198 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e057      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0x478>
 8007626:	e04f      	b.n	80076c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007628:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a0b      	ldr	r2, [pc, #44]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 800762e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fc fdb0 	bl	8004198 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800763c:	f7fc fdac 	bl	8004198 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e03d      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	4b03      	ldr	r3, [pc, #12]	@ (800765c <HAL_RCC_OscConfig+0x4cc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x4ac>
 800765a:	e035      	b.n	80076c8 <HAL_RCC_OscConfig+0x538>
 800765c:	40023800 	.word	0x40023800
 8007660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007664:	4b1b      	ldr	r3, [pc, #108]	@ (80076d4 <HAL_RCC_OscConfig+0x544>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d028      	beq.n	80076c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800767c:	429a      	cmp	r2, r3
 800767e:	d121      	bne.n	80076c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d11a      	bne.n	80076c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007694:	4013      	ands	r3, r2
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800769a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800769c:	4293      	cmp	r3, r2
 800769e:	d111      	bne.n	80076c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	3b01      	subs	r3, #1
 80076ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d107      	bne.n	80076c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d001      	beq.n	80076c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40023800 	.word	0x40023800

080076d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0d0      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076f0:	4b6a      	ldr	r3, [pc, #424]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d910      	bls.n	8007720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fe:	4b67      	ldr	r3, [pc, #412]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 020f 	bic.w	r2, r3, #15
 8007706:	4965      	ldr	r1, [pc, #404]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	4313      	orrs	r3, r2
 800770c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800770e:	4b63      	ldr	r3, [pc, #396]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d001      	beq.n	8007720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e0b8      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d020      	beq.n	800776e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007738:	4b59      	ldr	r3, [pc, #356]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4a58      	ldr	r2, [pc, #352]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800773e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007750:	4b53      	ldr	r3, [pc, #332]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a52      	ldr	r2, [pc, #328]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800775a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775c:	4b50      	ldr	r3, [pc, #320]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	494d      	ldr	r1, [pc, #308]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d040      	beq.n	80077fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d107      	bne.n	8007792 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007782:	4b47      	ldr	r3, [pc, #284]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d115      	bne.n	80077ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e07f      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d107      	bne.n	80077aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800779a:	4b41      	ldr	r3, [pc, #260]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e073      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077aa:	4b3d      	ldr	r3, [pc, #244]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e06b      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077ba:	4b39      	ldr	r3, [pc, #228]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 0203 	bic.w	r2, r3, #3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4936      	ldr	r1, [pc, #216]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077cc:	f7fc fce4 	bl	8004198 <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d4:	f7fc fce0 	bl	8004198 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e053      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ea:	4b2d      	ldr	r3, [pc, #180]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 020c 	and.w	r2, r3, #12
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d1eb      	bne.n	80077d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077fc:	4b27      	ldr	r3, [pc, #156]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d210      	bcs.n	800782c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b24      	ldr	r3, [pc, #144]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 020f 	bic.w	r2, r3, #15
 8007812:	4922      	ldr	r1, [pc, #136]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	4313      	orrs	r3, r2
 8007818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b20      	ldr	r3, [pc, #128]	@ (800789c <HAL_RCC_ClockConfig+0x1c4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e032      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007838:	4b19      	ldr	r3, [pc, #100]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4916      	ldr	r1, [pc, #88]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007856:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	490e      	ldr	r1, [pc, #56]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800786a:	f000 f821 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
 800786e:	4602      	mov	r2, r0
 8007870:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	490a      	ldr	r1, [pc, #40]	@ (80078a4 <HAL_RCC_ClockConfig+0x1cc>)
 800787c:	5ccb      	ldrb	r3, [r1, r3]
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <HAL_RCC_ClockConfig+0x1d4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fc fc40 	bl	8004110 <HAL_InitTick>

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40023c00 	.word	0x40023c00
 80078a0:	40023800 	.word	0x40023800
 80078a4:	08013e8c 	.word	0x08013e8c
 80078a8:	20000000 	.word	0x20000000
 80078ac:	20000004 	.word	0x20000004

080078b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b4:	b094      	sub	sp, #80	@ 0x50
 80078b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80078bc:	2300      	movs	r3, #0
 80078be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078c0:	2300      	movs	r3, #0
 80078c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078c8:	4b79      	ldr	r3, [pc, #484]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 030c 	and.w	r3, r3, #12
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d00d      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0x40>
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	f200 80e1 	bhi.w	8007a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0x34>
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d003      	beq.n	80078ea <HAL_RCC_GetSysClockFreq+0x3a>
 80078e2:	e0db      	b.n	8007a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078e4:	4b73      	ldr	r3, [pc, #460]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078e8:	e0db      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ea:	4b73      	ldr	r3, [pc, #460]	@ (8007ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80078ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078ee:	e0d8      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078f0:	4b6f      	ldr	r3, [pc, #444]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80078fa:	4b6d      	ldr	r3, [pc, #436]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d063      	beq.n	80079ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007906:	4b6a      	ldr	r3, [pc, #424]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	099b      	lsrs	r3, r3, #6
 800790c:	2200      	movs	r2, #0
 800790e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007910:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	633b      	str	r3, [r7, #48]	@ 0x30
 800791a:	2300      	movs	r3, #0
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
 800791e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007922:	4622      	mov	r2, r4
 8007924:	462b      	mov	r3, r5
 8007926:	f04f 0000 	mov.w	r0, #0
 800792a:	f04f 0100 	mov.w	r1, #0
 800792e:	0159      	lsls	r1, r3, #5
 8007930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007934:	0150      	lsls	r0, r2, #5
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4621      	mov	r1, r4
 800793c:	1a51      	subs	r1, r2, r1
 800793e:	6139      	str	r1, [r7, #16]
 8007940:	4629      	mov	r1, r5
 8007942:	eb63 0301 	sbc.w	r3, r3, r1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007954:	4659      	mov	r1, fp
 8007956:	018b      	lsls	r3, r1, #6
 8007958:	4651      	mov	r1, sl
 800795a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800795e:	4651      	mov	r1, sl
 8007960:	018a      	lsls	r2, r1, #6
 8007962:	4651      	mov	r1, sl
 8007964:	ebb2 0801 	subs.w	r8, r2, r1
 8007968:	4659      	mov	r1, fp
 800796a:	eb63 0901 	sbc.w	r9, r3, r1
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800797a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800797e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007982:	4690      	mov	r8, r2
 8007984:	4699      	mov	r9, r3
 8007986:	4623      	mov	r3, r4
 8007988:	eb18 0303 	adds.w	r3, r8, r3
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	462b      	mov	r3, r5
 8007990:	eb49 0303 	adc.w	r3, r9, r3
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079a2:	4629      	mov	r1, r5
 80079a4:	024b      	lsls	r3, r1, #9
 80079a6:	4621      	mov	r1, r4
 80079a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079ac:	4621      	mov	r1, r4
 80079ae:	024a      	lsls	r2, r1, #9
 80079b0:	4610      	mov	r0, r2
 80079b2:	4619      	mov	r1, r3
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	2200      	movs	r2, #0
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079c0:	f7f9 f98a 	bl	8000cd8 <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4613      	mov	r3, r2
 80079ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079cc:	e058      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ce:	4b38      	ldr	r3, [pc, #224]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	099b      	lsrs	r3, r3, #6
 80079d4:	2200      	movs	r2, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	4611      	mov	r1, r2
 80079da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	f04f 0000 	mov.w	r0, #0
 80079f0:	f04f 0100 	mov.w	r1, #0
 80079f4:	0159      	lsls	r1, r3, #5
 80079f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079fa:	0150      	lsls	r0, r2, #5
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4641      	mov	r1, r8
 8007a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a20:	ebb2 040a 	subs.w	r4, r2, sl
 8007a24:	eb63 050b 	sbc.w	r5, r3, fp
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	00eb      	lsls	r3, r5, #3
 8007a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a36:	00e2      	lsls	r2, r4, #3
 8007a38:	4614      	mov	r4, r2
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	4643      	mov	r3, r8
 8007a3e:	18e3      	adds	r3, r4, r3
 8007a40:	603b      	str	r3, [r7, #0]
 8007a42:	464b      	mov	r3, r9
 8007a44:	eb45 0303 	adc.w	r3, r5, r3
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a56:	4629      	mov	r1, r5
 8007a58:	028b      	lsls	r3, r1, #10
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a60:	4621      	mov	r1, r4
 8007a62:	028a      	lsls	r2, r1, #10
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a74:	f7f9 f930 	bl	8000cd8 <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007a90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3750      	adds	r7, #80	@ 0x50
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aae:	bf00      	nop
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	007a1200 	.word	0x007a1200

08007abc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ac0:	4b03      	ldr	r3, [pc, #12]	@ (8007ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000000 	.word	0x20000000

08007ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ad8:	f7ff fff0 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0a9b      	lsrs	r3, r3, #10
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4903      	ldr	r1, [pc, #12]	@ (8007af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	08013e9c 	.word	0x08013e9c

08007afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b00:	f7ff ffdc 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	0b5b      	lsrs	r3, r3, #13
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	4903      	ldr	r1, [pc, #12]	@ (8007b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b12:	5ccb      	ldrb	r3, [r1, r3]
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	08013e9c 	.word	0x08013e9c

08007b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b48:	4b65      	ldr	r3, [pc, #404]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	4a64      	ldr	r2, [pc, #400]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b52:	6093      	str	r3, [r2, #8]
 8007b54:	4b62      	ldr	r3, [pc, #392]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	4960      	ldr	r1, [pc, #384]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d017      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b7a:	4b59      	ldr	r3, [pc, #356]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b88:	4955      	ldr	r1, [pc, #340]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b98:	d101      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	4946      	ldr	r1, [pc, #280]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bd4:	d101      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 808b 	beq.w	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf8:	4a39      	ldr	r2, [pc, #228]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c00:	4b37      	ldr	r3, [pc, #220]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c0c:	4b35      	ldr	r3, [pc, #212]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a34      	ldr	r2, [pc, #208]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c18:	f7fc fabe 	bl	8004198 <HAL_GetTick>
 8007c1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c20:	f7fc faba 	bl	8004198 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b64      	cmp	r3, #100	@ 0x64
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e2bc      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c32:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c3e:	4b28      	ldr	r3, [pc, #160]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d035      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d02e      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c5c:	4b20      	ldr	r3, [pc, #128]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c84:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d114      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fc fa82 	bl	8004198 <HAL_GetTick>
 8007c94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c96:	e00a      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c98:	f7fc fa7e 	bl	8004198 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e27e      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0ee      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cc6:	d111      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007cc8:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	4901      	ldr	r1, [pc, #4]	@ (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	e00b      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	40007000 	.word	0x40007000
 8007ce8:	0ffffcff 	.word	0x0ffffcff
 8007cec:	4ba4      	ldr	r3, [pc, #656]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4aa3      	ldr	r2, [pc, #652]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007cf2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007cf6:	6093      	str	r3, [r2, #8]
 8007cf8:	4ba1      	ldr	r3, [pc, #644]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007cfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d04:	499e      	ldr	r1, [pc, #632]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d010      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d16:	4b9a      	ldr	r3, [pc, #616]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d1c:	4a98      	ldr	r2, [pc, #608]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007d26:	4b96      	ldr	r3, [pc, #600]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	4993      	ldr	r1, [pc, #588]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d44:	4b8e      	ldr	r3, [pc, #568]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d52:	498b      	ldr	r1, [pc, #556]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d66:	4b86      	ldr	r3, [pc, #536]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d74:	4982      	ldr	r1, [pc, #520]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d88:	4b7d      	ldr	r3, [pc, #500]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d96:	497a      	ldr	r1, [pc, #488]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007daa:	4b75      	ldr	r3, [pc, #468]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db0:	f023 0203 	bic.w	r2, r3, #3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db8:	4971      	ldr	r1, [pc, #452]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd2:	f023 020c 	bic.w	r2, r3, #12
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dda:	4969      	ldr	r1, [pc, #420]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dee:	4b64      	ldr	r3, [pc, #400]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfc:	4960      	ldr	r1, [pc, #384]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e10:	4b5b      	ldr	r3, [pc, #364]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e1e:	4958      	ldr	r1, [pc, #352]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e32:	4b53      	ldr	r3, [pc, #332]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e40:	494f      	ldr	r1, [pc, #316]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e54:	4b4a      	ldr	r3, [pc, #296]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e62:	4947      	ldr	r1, [pc, #284]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e76:	4b42      	ldr	r3, [pc, #264]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e84:	493e      	ldr	r1, [pc, #248]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e98:	4b39      	ldr	r3, [pc, #228]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea6:	4936      	ldr	r1, [pc, #216]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d011      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007eba:	4b31      	ldr	r3, [pc, #196]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec8:	492d      	ldr	r1, [pc, #180]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed8:	d101      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eea:	4b25      	ldr	r3, [pc, #148]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ef8:	4921      	ldr	r1, [pc, #132]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f1a:	4919      	ldr	r1, [pc, #100]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007f2e:	4b14      	ldr	r3, [pc, #80]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f3c:	4910      	ldr	r1, [pc, #64]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d006      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 809d 	beq.w	8008092 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f58:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a08      	ldr	r2, [pc, #32]	@ (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f64:	f7fc f918 	bl	8004198 <HAL_GetTick>
 8007f68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f6a:	e00b      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f6c:	f7fc f914 	bl	8004198 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b64      	cmp	r3, #100	@ 0x64
 8007f78:	d904      	bls.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e116      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007f7e:	bf00      	nop
 8007f80:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f84:	4b8b      	ldr	r3, [pc, #556]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ed      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d017      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d113      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007fa4:	4b83      	ldr	r3, [pc, #524]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007faa:	0e1b      	lsrs	r3, r3, #24
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	019a      	lsls	r2, r3, #6
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	071b      	lsls	r3, r3, #28
 8007fc4:	497b      	ldr	r1, [pc, #492]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d024      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ff6:	d11f      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ff8:	4b6e      	ldr	r3, [pc, #440]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ffe:	0f1b      	lsrs	r3, r3, #28
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	019a      	lsls	r2, r3, #6
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	431a      	orrs	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	071b      	lsls	r3, r3, #28
 8008018:	4966      	ldr	r1, [pc, #408]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008020:	4b64      	ldr	r3, [pc, #400]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008026:	f023 021f 	bic.w	r2, r3, #31
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	3b01      	subs	r3, #1
 8008030:	4960      	ldr	r1, [pc, #384]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	019a      	lsls	r2, r3, #6
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	071b      	lsls	r3, r3, #28
 8008058:	4956      	ldr	r1, [pc, #344]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800805a:	4313      	orrs	r3, r2
 800805c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008060:	4b54      	ldr	r3, [pc, #336]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a53      	ldr	r2, [pc, #332]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008066:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800806a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806c:	f7fc f894 	bl	8004198 <HAL_GetTick>
 8008070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008074:	f7fc f890 	bl	8004198 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b64      	cmp	r3, #100	@ 0x64
 8008080:	d901      	bls.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e092      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008086:	4b4b      	ldr	r3, [pc, #300]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b01      	cmp	r3, #1
 8008096:	f040 8088 	bne.w	80081aa <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800809a:	4b46      	ldr	r3, [pc, #280]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a45      	ldr	r2, [pc, #276]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a6:	f7fc f877 	bl	8004198 <HAL_GetTick>
 80080aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080ae:	f7fc f873 	bl	8004198 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b64      	cmp	r3, #100	@ 0x64
 80080ba:	d901      	bls.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e075      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080c0:	4b3c      	ldr	r3, [pc, #240]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080cc:	d0ef      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d024      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d120      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080f6:	4b2f      	ldr	r3, [pc, #188]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80080f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fc:	0c1b      	lsrs	r3, r3, #16
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	019a      	lsls	r2, r3, #6
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	4927      	ldr	r1, [pc, #156]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008118:	4313      	orrs	r3, r2
 800811a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800811e:	4b25      	ldr	r3, [pc, #148]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008124:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	3b01      	subs	r3, #1
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	4920      	ldr	r1, [pc, #128]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d018      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800814c:	d113      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800814e:	4b19      	ldr	r3, [pc, #100]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008154:	0e1b      	lsrs	r3, r3, #24
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	019a      	lsls	r2, r3, #6
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	431a      	orrs	r2, r3
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	4911      	ldr	r1, [pc, #68]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008176:	4b0f      	ldr	r3, [pc, #60]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a0e      	ldr	r2, [pc, #56]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800817c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008182:	f7fc f809 	bl	8004198 <HAL_GetTick>
 8008186:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008188:	e008      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800818a:	f7fc f805 	bl	8004198 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b64      	cmp	r3, #100	@ 0x64
 8008196:	d901      	bls.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e007      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a8:	d1ef      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023800 	.word	0x40023800

080081b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e09d      	b.n	8008306 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d108      	bne.n	80081e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081da:	d009      	beq.n	80081f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	61da      	str	r2, [r3, #28]
 80081e2:	e005      	b.n	80081f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fb fb32 	bl	8003874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008226:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008230:	d902      	bls.n	8008238 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e002      	b.n	800823e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800823c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008246:	d007      	beq.n	8008258 <HAL_SPI_Init+0xa0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008250:	d002      	beq.n	8008258 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829a:	ea42 0103 	orr.w	r1, r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	f003 0204 	and.w	r2, r3, #4
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80082d4:	ea42 0103 	orr.w	r1, r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b088      	sub	sp, #32
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800831e:	f7fb ff3b 	bl	8004198 <HAL_GetTick>
 8008322:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d001      	beq.n	8008338 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
 8008336:	e15c      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_SPI_Transmit+0x36>
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e154      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_SPI_Transmit+0x48>
 8008352:	2302      	movs	r3, #2
 8008354:	e14d      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2203      	movs	r2, #3
 8008362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	88fa      	ldrh	r2, [r7, #6]
 8008376:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083a8:	d10f      	bne.n	80083ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d007      	beq.n	80083e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083f0:	d952      	bls.n	8008498 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_SPI_Transmit+0xf2>
 80083fa:	8b7b      	ldrh	r3, [r7, #26]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d145      	bne.n	800848c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	1c9a      	adds	r2, r3, #2
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008424:	e032      	b.n	800848c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d112      	bne.n	800845a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008438:	881a      	ldrh	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	1c9a      	adds	r2, r3, #2
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008458:	e018      	b.n	800848c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800845a:	f7fb fe9d 	bl	8004198 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d803      	bhi.n	8008472 <HAL_SPI_Transmit+0x164>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d102      	bne.n	8008478 <HAL_SPI_Transmit+0x16a>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e0b2      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1c7      	bne.n	8008426 <HAL_SPI_Transmit+0x118>
 8008496:	e083      	b.n	80085a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_SPI_Transmit+0x198>
 80084a0:	8b7b      	ldrh	r3, [r7, #26]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d177      	bne.n	8008596 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d912      	bls.n	80084d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	881a      	ldrh	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b02      	subs	r3, #2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084d4:	e05f      	b.n	8008596 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	7812      	ldrb	r2, [r2, #0]
 80084e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084fc:	e04b      	b.n	8008596 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b02      	cmp	r3, #2
 800850a:	d12b      	bne.n	8008564 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d912      	bls.n	800853c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	881a      	ldrh	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	1c9a      	adds	r2, r3, #2
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b02      	subs	r3, #2
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800853a:	e02c      	b.n	8008596 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	7812      	ldrb	r2, [r2, #0]
 8008548:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008562:	e018      	b.n	8008596 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008564:	f7fb fe18 	bl	8004198 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d803      	bhi.n	800857c <HAL_SPI_Transmit+0x26e>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857a:	d102      	bne.n	8008582 <HAL_SPI_Transmit+0x274>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e02d      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1ae      	bne.n	80084fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f001 f8b7 	bl	8009718 <SPI_EndRxTxTransaction>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2220      	movs	r2, #32
 80085b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e000      	b.n	80085f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80085f0:	2300      	movs	r3, #0
  }
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3720      	adds	r7, #32
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af02      	add	r7, sp, #8
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	603b      	str	r3, [r7, #0]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d001      	beq.n	800861a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008616:	2302      	movs	r3, #2
 8008618:	e123      	b.n	8008862 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_SPI_Receive+0x2c>
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e11b      	b.n	8008862 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008632:	d112      	bne.n	800865a <HAL_SPI_Receive+0x60>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10e      	bne.n	800865a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2204      	movs	r2, #4
 8008640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008644:	88fa      	ldrh	r2, [r7, #6]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	4613      	mov	r3, r2
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f90a 	bl	800886a <HAL_SPI_TransmitReceive>
 8008656:	4603      	mov	r3, r0
 8008658:	e103      	b.n	8008862 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800865a:	f7fb fd9d 	bl	8004198 <HAL_GetTick>
 800865e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_SPI_Receive+0x74>
 800866a:	2302      	movs	r3, #2
 800866c:	e0f9      	b.n	8008862 <HAL_SPI_Receive+0x268>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2204      	movs	r2, #4
 800867a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	88fa      	ldrh	r2, [r7, #6]
 800868e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086c0:	d908      	bls.n	80086d4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	e007      	b.n	80086e4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ec:	d10f      	bne.n	800870e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008718:	2b40      	cmp	r3, #64	@ 0x40
 800871a:	d007      	beq.n	800872c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800872a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008734:	d875      	bhi.n	8008822 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008736:	e037      	b.n	80087a8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b01      	cmp	r3, #1
 8008744:	d117      	bne.n	8008776 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f103 020c 	add.w	r2, r3, #12
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008752:	7812      	ldrb	r2, [r2, #0]
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008774:	e018      	b.n	80087a8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008776:	f7fb fd0f 	bl	8004198 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d803      	bhi.n	800878e <HAL_SPI_Receive+0x194>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d102      	bne.n	8008794 <HAL_SPI_Receive+0x19a>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e05c      	b.n	8008862 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1c1      	bne.n	8008738 <HAL_SPI_Receive+0x13e>
 80087b4:	e03b      	b.n	800882e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d115      	bne.n	80087f0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	b292      	uxth	r2, r2
 80087d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d6:	1c9a      	adds	r2, r3, #2
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80087ee:	e018      	b.n	8008822 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f0:	f7fb fcd2 	bl	8004198 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d803      	bhi.n	8008808 <HAL_SPI_Receive+0x20e>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <HAL_SPI_Receive+0x214>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e01f      	b.n	8008862 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1c3      	bne.n	80087b6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 fef4 	bl	8009620 <SPI_EndRxTransaction>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e000      	b.n	8008862 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8008860:	2300      	movs	r3, #0
  }
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b08a      	sub	sp, #40	@ 0x28
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008878:	2301      	movs	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800887c:	f7fb fc8c 	bl	8004198 <HAL_GetTick>
 8008880:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008888:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008894:	887b      	ldrh	r3, [r7, #2]
 8008896:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008898:	7ffb      	ldrb	r3, [r7, #31]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d00c      	beq.n	80088b8 <HAL_SPI_TransmitReceive+0x4e>
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088a4:	d106      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x4a>
 80088ae:	7ffb      	ldrb	r3, [r7, #31]
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d001      	beq.n	80088b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
 80088b6:	e1f3      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x60>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x60>
 80088c4:	887b      	ldrh	r3, [r7, #2]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e1e8      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_SPI_TransmitReceive+0x72>
 80088d8:	2302      	movs	r3, #2
 80088da:	e1e1      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d003      	beq.n	80088f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2205      	movs	r2, #5
 80088f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	887a      	ldrh	r2, [r7, #2]
 8008908:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	887a      	ldrh	r2, [r7, #2]
 8008910:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	887a      	ldrh	r2, [r7, #2]
 800891e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	887a      	ldrh	r2, [r7, #2]
 8008924:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800893a:	d802      	bhi.n	8008942 <HAL_SPI_TransmitReceive+0xd8>
 800893c:	8abb      	ldrh	r3, [r7, #20]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d908      	bls.n	8008954 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008950:	605a      	str	r2, [r3, #4]
 8008952:	e007      	b.n	8008964 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008962:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896e:	2b40      	cmp	r3, #64	@ 0x40
 8008970:	d007      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800898a:	f240 8083 	bls.w	8008a94 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <HAL_SPI_TransmitReceive+0x132>
 8008996:	8afb      	ldrh	r3, [r7, #22]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d16f      	bne.n	8008a7c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a0:	881a      	ldrh	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	1c9a      	adds	r2, r3, #2
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089c0:	e05c      	b.n	8008a7c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d11b      	bne.n	8008a08 <HAL_SPI_TransmitReceive+0x19e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d016      	beq.n	8008a08 <HAL_SPI_TransmitReceive+0x19e>
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d113      	bne.n	8008a08 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f0:	1c9a      	adds	r2, r3, #2
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d11c      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x1e6>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d016      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2c:	b292      	uxth	r2, r2
 8008a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a34:	1c9a      	adds	r2, r3, #2
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	3b01      	subs	r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a50:	f7fb fba2 	bl	8004198 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d80d      	bhi.n	8008a7c <HAL_SPI_TransmitReceive+0x212>
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d009      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e111      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d19d      	bne.n	80089c2 <HAL_SPI_TransmitReceive+0x158>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d197      	bne.n	80089c2 <HAL_SPI_TransmitReceive+0x158>
 8008a92:	e0e5      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_SPI_TransmitReceive+0x23a>
 8008a9c:	8afb      	ldrh	r3, [r7, #22]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	f040 80d1 	bne.w	8008c46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d912      	bls.n	8008ad4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab2:	881a      	ldrh	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abe:	1c9a      	adds	r2, r3, #2
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b02      	subs	r3, #2
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ad2:	e0b8      	b.n	8008c46 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	7812      	ldrb	r2, [r2, #0]
 8008ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008afa:	e0a4      	b.n	8008c46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d134      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x30a>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d02f      	beq.n	8008b74 <HAL_SPI_TransmitReceive+0x30a>
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d12c      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d912      	bls.n	8008b4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	881a      	ldrh	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	1c9a      	adds	r2, r3, #2
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	3b02      	subs	r3, #2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b48:	e012      	b.n	8008b70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	7812      	ldrb	r2, [r2, #0]
 8008b56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d148      	bne.n	8008c14 <HAL_SPI_TransmitReceive+0x3aa>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d042      	beq.n	8008c14 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d923      	bls.n	8008be2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	b292      	uxth	r2, r2
 8008ba6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bac:	1c9a      	adds	r2, r3, #2
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b02      	subs	r3, #2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d81f      	bhi.n	8008c10 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	e016      	b.n	8008c10 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f103 020c 	add.w	r2, r3, #12
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c10:	2301      	movs	r3, #1
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c14:	f7fb fac0 	bl	8004198 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d803      	bhi.n	8008c2c <HAL_SPI_TransmitReceive+0x3c2>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d102      	bne.n	8008c32 <HAL_SPI_TransmitReceive+0x3c8>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e02c      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f af55 	bne.w	8008afc <HAL_SPI_TransmitReceive+0x292>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f47f af4e 	bne.w	8008afc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c60:	6a3a      	ldr	r2, [r7, #32]
 8008c62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fd57 	bl	8009718 <SPI_EndRxTxTransaction>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d008      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e00e      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3728      	adds	r7, #40	@ 0x28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008cbc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d00c      	beq.n	8008ce4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cd0:	d106      	bne.n	8008ce0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d001      	beq.n	8008ce4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e158      	b.n	8008f96 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008cf0:	887b      	ldrh	r3, [r7, #2]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e14d      	b.n	8008f96 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e146      	b.n	8008f96 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d003      	beq.n	8008d24 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	887a      	ldrh	r2, [r7, #2]
 8008d34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	887a      	ldrh	r2, [r7, #2]
 8008d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	887a      	ldrh	r2, [r7, #2]
 8008d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	887a      	ldrh	r2, [r7, #2]
 8008d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008d6c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d76:	d908      	bls.n	8008d8a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	e06f      	b.n	8008e6a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d98:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da4:	d126      	bne.n	8008df4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008dc0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	085b      	lsrs	r3, r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dd0:	e010      	b.n	8008df4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008de0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3301      	adds	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dfe:	d134      	bne.n	8008e6a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e0e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d111      	bne.n	8008e44 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008e42:	e012      	b.n	8008e6a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3301      	adds	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d108      	bne.n	8008e88 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7a:	4a49      	ldr	r2, [pc, #292]	@ (8008fa0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	4a48      	ldr	r2, [pc, #288]	@ (8008fa4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008e84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e86:	e007      	b.n	8008e98 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	4a46      	ldr	r2, [pc, #280]	@ (8008fa8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e94:	4a45      	ldr	r2, [pc, #276]	@ (8008fac <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008e96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	4a44      	ldr	r2, [pc, #272]	@ (8008fb0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ec0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008ec2:	f7fc f807 	bl	8004ed4 <HAL_DMA_Start_IT>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed0:	f043 0210 	orr.w	r2, r3, #16
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e058      	b.n	8008f96 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef8:	2200      	movs	r2, #0
 8008efa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f00:	2200      	movs	r2, #0
 8008f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f08:	2200      	movs	r2, #0
 8008f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f10:	2200      	movs	r2, #0
 8008f12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	330c      	adds	r3, #12
 8008f24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008f2c:	f7fb ffd2 	bl	8004ed4 <HAL_DMA_Start_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f3a:	f043 0210 	orr.w	r2, r3, #16
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e023      	b.n	8008f96 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f58:	2b40      	cmp	r3, #64	@ 0x40
 8008f5a:	d007      	beq.n	8008f6c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f6a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0220 	orr.w	r2, r2, #32
 8008f82:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0202 	orr.w	r2, r2, #2
 8008f92:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	08009341 	.word	0x08009341
 8008fa4:	08009205 	.word	0x08009205
 8008fa8:	0800935d 	.word	0x0800935d
 8008fac:	080092af 	.word	0x080092af
 8008fb0:	08009379 	.word	0x08009379

08008fb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	099b      	lsrs	r3, r3, #6
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	099b      	lsrs	r3, r3, #6
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	4798      	blx	r3
    return;
 8008ff6:	e0d7      	b.n	80091a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <HAL_SPI_IRQHandler+0x66>
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	09db      	lsrs	r3, r3, #7
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b00      	cmp	r3, #0
 800900e:	d004      	beq.n	800901a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
    return;
 8009018:	e0c6      	b.n	80091a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10c      	bne.n	8009040 <HAL_SPI_IRQHandler+0x8c>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	099b      	lsrs	r3, r3, #6
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	0a1b      	lsrs	r3, r3, #8
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80b4 	beq.w	80091a8 <HAL_SPI_IRQHandler+0x1f4>
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	095b      	lsrs	r3, r3, #5
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80ad 	beq.w	80091a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	099b      	lsrs	r3, r3, #6
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d023      	beq.n	80090a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d011      	beq.n	800908a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906a:	f043 0204 	orr.w	r2, r3, #4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	e00b      	b.n	80090a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800908a:	2300      	movs	r3, #0
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	693b      	ldr	r3, [r7, #16]
        return;
 80090a0:	e082      	b.n	80091a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d014      	beq.n	80090d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090b2:	f043 0201 	orr.w	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00c      	beq.n	80090fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e8:	f043 0208 	orr.w	r2, r3, #8
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009102:	2b00      	cmp	r3, #0
 8009104:	d04f      	beq.n	80091a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009114:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d104      	bne.n	8009132 <HAL_SPI_IRQHandler+0x17e>
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d034      	beq.n	800919c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0203 	bic.w	r2, r2, #3
 8009140:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009146:	2b00      	cmp	r3, #0
 8009148:	d011      	beq.n	800916e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914e:	4a18      	ldr	r2, [pc, #96]	@ (80091b0 <HAL_SPI_IRQHandler+0x1fc>)
 8009150:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009156:	4618      	mov	r0, r3
 8009158:	f7fb ff8c 	bl	8005074 <HAL_DMA_Abort_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009166:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009172:	2b00      	cmp	r3, #0
 8009174:	d016      	beq.n	80091a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917a:	4a0d      	ldr	r2, [pc, #52]	@ (80091b0 <HAL_SPI_IRQHandler+0x1fc>)
 800917c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	4618      	mov	r0, r3
 8009184:	f7fb ff76 	bl	8005074 <HAL_DMA_Abort_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009192:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800919a:	e003      	b.n	80091a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f827 	bl	80091f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80091a2:	e000      	b.n	80091a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80091a4:	bf00      	nop
    return;
 80091a6:	bf00      	nop
  }
}
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	080093b9 	.word	0x080093b9

080091b4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009210:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009212:	f7fa ffc1 	bl	8004198 <HAL_GetTick>
 8009216:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009226:	d03c      	beq.n	80092a2 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0220 	bic.w	r2, r2, #32
 8009236:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <SPI_DMAReceiveCplt+0x58>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009248:	d108      	bne.n	800925c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0203 	bic.w	r2, r2, #3
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	e007      	b.n	800926c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0201 	bic.w	r2, r2, #1
 800926a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	2164      	movs	r1, #100	@ 0x64
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f9d5 	bl	8009620 <SPI_EndRxTransaction>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7ff ffa8 	bl	80091f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092a0:	e002      	b.n	80092a8 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff ff86 	bl	80091b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ba:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092bc:	f7fa ff6c 	bl	8004198 <HAL_GetTick>
 80092c0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d0:	d030      	beq.n	8009334 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0220 	bic.w	r2, r2, #32
 80092e0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	2164      	movs	r1, #100	@ 0x64
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fa16 	bl	8009718 <SPI_EndRxTxTransaction>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f6:	f043 0220 	orr.w	r2, r3, #32
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff ff5f 	bl	80091f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009332:	e002      	b.n	800933a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7f9 fc51 	bl	8002bdc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff ff3a 	bl	80091c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009368:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff ff36 	bl	80091dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009384:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 0203 	bic.w	r2, r2, #3
 8009394:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939a:	f043 0210 	orr.w	r2, r3, #16
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff ff20 	bl	80091f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff ff0b 	bl	80091f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	4613      	mov	r3, r2
 80093f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093f4:	f7fa fed0 	bl	8004198 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	4413      	add	r3, r2
 8009402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009404:	f7fa fec8 	bl	8004198 <HAL_GetTick>
 8009408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800940a:	4b39      	ldr	r3, [pc, #228]	@ (80094f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	015b      	lsls	r3, r3, #5
 8009410:	0d1b      	lsrs	r3, r3, #20
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	fb02 f303 	mul.w	r3, r2, r3
 8009418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800941a:	e055      	b.n	80094c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009422:	d051      	beq.n	80094c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009424:	f7fa feb8 	bl	8004198 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	429a      	cmp	r2, r3
 8009432:	d902      	bls.n	800943a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d13d      	bne.n	80094b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009452:	d111      	bne.n	8009478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800945c:	d004      	beq.n	8009468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009466:	d107      	bne.n	8009478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009480:	d10f      	bne.n	80094a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e018      	b.n	80094e8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e002      	b.n	80094c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689a      	ldr	r2, [r3, #8]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	4013      	ands	r3, r2
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	bf0c      	ite	eq
 80094d8:	2301      	moveq	r3, #1
 80094da:	2300      	movne	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d19a      	bne.n	800941c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20000000 	.word	0x20000000

080094f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08a      	sub	sp, #40	@ 0x28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009506:	f7fa fe47 	bl	8004198 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	4413      	add	r3, r2
 8009514:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009516:	f7fa fe3f 	bl	8004198 <HAL_GetTick>
 800951a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	330c      	adds	r3, #12
 8009522:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009524:	4b3d      	ldr	r3, [pc, #244]	@ (800961c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	00da      	lsls	r2, r3, #3
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009536:	fb02 f303 	mul.w	r3, r2, r3
 800953a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800953c:	e061      	b.n	8009602 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009544:	d107      	bne.n	8009556 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009554:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d051      	beq.n	8009602 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800955e:	f7fa fe1b 	bl	8004198 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800956a:	429a      	cmp	r2, r3
 800956c:	d902      	bls.n	8009574 <SPI_WaitFifoStateUntilTimeout+0x80>
 800956e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d13d      	bne.n	80095f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009582:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800958c:	d111      	bne.n	80095b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009596:	d004      	beq.n	80095a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a0:	d107      	bne.n	80095b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ba:	d10f      	bne.n	80095dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e011      	b.n	8009614 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80095fa:	e002      	b.n	8009602 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	3b01      	subs	r3, #1
 8009600:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4013      	ands	r3, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d195      	bne.n	800953e <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3728      	adds	r7, #40	@ 0x28
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20000000 	.word	0x20000000

08009620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009634:	d111      	bne.n	800965a <SPI_EndRxTransaction+0x3a>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800963e:	d004      	beq.n	800964a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009648:	d107      	bne.n	800965a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009658:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009662:	d112      	bne.n	800968a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2200      	movs	r2, #0
 800966c:	2180      	movs	r1, #128	@ 0x80
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff feb8 	bl	80093e4 <SPI_WaitFlagStateUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d021      	beq.n	80096be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e03d      	b.n	8009706 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800968a:	4b21      	ldr	r3, [pc, #132]	@ (8009710 <SPI_EndRxTransaction+0xf0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a21      	ldr	r2, [pc, #132]	@ (8009714 <SPI_EndRxTransaction+0xf4>)
 8009690:	fba2 2303 	umull	r2, r3, r2, r3
 8009694:	0d5b      	lsrs	r3, r3, #21
 8009696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800969a:	fb02 f303 	mul.w	r3, r2, r3
 800969e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d0f2      	beq.n	80096a0 <SPI_EndRxTransaction+0x80>
 80096ba:	e000      	b.n	80096be <SPI_EndRxTransaction+0x9e>
        break;
 80096bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096c6:	d11d      	bne.n	8009704 <SPI_EndRxTransaction+0xe4>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096d0:	d004      	beq.n	80096dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096da:	d113      	bne.n	8009704 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff ff03 	bl	80094f4 <SPI_WaitFifoStateUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f8:	f043 0220 	orr.w	r2, r3, #32
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e000      	b.n	8009706 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000000 	.word	0x20000000
 8009714:	165e9f81 	.word	0x165e9f81

08009718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af02      	add	r7, sp, #8
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2200      	movs	r2, #0
 800972c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7ff fedf 	bl	80094f4 <SPI_WaitFifoStateUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009740:	f043 0220 	orr.w	r2, r3, #32
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e046      	b.n	80097da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800974c:	4b25      	ldr	r3, [pc, #148]	@ (80097e4 <SPI_EndRxTxTransaction+0xcc>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a25      	ldr	r2, [pc, #148]	@ (80097e8 <SPI_EndRxTxTransaction+0xd0>)
 8009752:	fba2 2303 	umull	r2, r3, r2, r3
 8009756:	0d5b      	lsrs	r3, r3, #21
 8009758:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800975c:	fb02 f303 	mul.w	r3, r2, r3
 8009760:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800976a:	d112      	bne.n	8009792 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	2180      	movs	r1, #128	@ 0x80
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff fe34 	bl	80093e4 <SPI_WaitFlagStateUntilTimeout>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009786:	f043 0220 	orr.w	r2, r3, #32
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e023      	b.n	80097da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3b01      	subs	r3, #1
 800979c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a8:	2b80      	cmp	r3, #128	@ 0x80
 80097aa:	d0f2      	beq.n	8009792 <SPI_EndRxTxTransaction+0x7a>
 80097ac:	e000      	b.n	80097b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80097ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff fe99 	bl	80094f4 <SPI_WaitFifoStateUntilTimeout>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097cc:	f043 0220 	orr.w	r2, r3, #32
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e000      	b.n	80097da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000000 	.word	0x20000000
 80097e8:	165e9f81 	.word	0x165e9f81

080097ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e049      	b.n	8009892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d106      	bne.n	8009818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fa f8de 	bl	80039d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f000 fb6e 	bl	8009f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e049      	b.n	8009940 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d106      	bne.n	80098c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f841 	bl	8009948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f000 fb17 	bl	8009f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d109      	bne.n	8009980 <HAL_TIM_PWM_Start+0x24>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	bf14      	ite	ne
 8009978:	2301      	movne	r3, #1
 800997a:	2300      	moveq	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	e03c      	b.n	80099fa <HAL_TIM_PWM_Start+0x9e>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b04      	cmp	r3, #4
 8009984:	d109      	bne.n	800999a <HAL_TIM_PWM_Start+0x3e>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b01      	cmp	r3, #1
 8009990:	bf14      	ite	ne
 8009992:	2301      	movne	r3, #1
 8009994:	2300      	moveq	r3, #0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	e02f      	b.n	80099fa <HAL_TIM_PWM_Start+0x9e>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b08      	cmp	r3, #8
 800999e:	d109      	bne.n	80099b4 <HAL_TIM_PWM_Start+0x58>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	bf14      	ite	ne
 80099ac:	2301      	movne	r3, #1
 80099ae:	2300      	moveq	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	e022      	b.n	80099fa <HAL_TIM_PWM_Start+0x9e>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b0c      	cmp	r3, #12
 80099b8:	d109      	bne.n	80099ce <HAL_TIM_PWM_Start+0x72>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	bf14      	ite	ne
 80099c6:	2301      	movne	r3, #1
 80099c8:	2300      	moveq	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e015      	b.n	80099fa <HAL_TIM_PWM_Start+0x9e>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b10      	cmp	r3, #16
 80099d2:	d109      	bne.n	80099e8 <HAL_TIM_PWM_Start+0x8c>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	bf14      	ite	ne
 80099e0:	2301      	movne	r3, #1
 80099e2:	2300      	moveq	r3, #0
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	e008      	b.n	80099fa <HAL_TIM_PWM_Start+0x9e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	bf14      	ite	ne
 80099f4:	2301      	movne	r3, #1
 80099f6:	2300      	moveq	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e092      	b.n	8009b28 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <HAL_TIM_PWM_Start+0xb6>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a10:	e023      	b.n	8009a5a <HAL_TIM_PWM_Start+0xfe>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d104      	bne.n	8009a22 <HAL_TIM_PWM_Start+0xc6>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a20:	e01b      	b.n	8009a5a <HAL_TIM_PWM_Start+0xfe>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d104      	bne.n	8009a32 <HAL_TIM_PWM_Start+0xd6>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a30:	e013      	b.n	8009a5a <HAL_TIM_PWM_Start+0xfe>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b0c      	cmp	r3, #12
 8009a36:	d104      	bne.n	8009a42 <HAL_TIM_PWM_Start+0xe6>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a40:	e00b      	b.n	8009a5a <HAL_TIM_PWM_Start+0xfe>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b10      	cmp	r3, #16
 8009a46:	d104      	bne.n	8009a52 <HAL_TIM_PWM_Start+0xf6>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a50:	e003      	b.n	8009a5a <HAL_TIM_PWM_Start+0xfe>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2202      	movs	r2, #2
 8009a56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fdf0 	bl	800a648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a30      	ldr	r2, [pc, #192]	@ (8009b30 <HAL_TIM_PWM_Start+0x1d4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d004      	beq.n	8009a7c <HAL_TIM_PWM_Start+0x120>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a2f      	ldr	r2, [pc, #188]	@ (8009b34 <HAL_TIM_PWM_Start+0x1d8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d101      	bne.n	8009a80 <HAL_TIM_PWM_Start+0x124>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <HAL_TIM_PWM_Start+0x126>
 8009a80:	2300      	movs	r3, #0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a25      	ldr	r2, [pc, #148]	@ (8009b30 <HAL_TIM_PWM_Start+0x1d4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d022      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa8:	d01d      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a22      	ldr	r2, [pc, #136]	@ (8009b38 <HAL_TIM_PWM_Start+0x1dc>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d018      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a20      	ldr	r2, [pc, #128]	@ (8009b3c <HAL_TIM_PWM_Start+0x1e0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d013      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8009b40 <HAL_TIM_PWM_Start+0x1e4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00e      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a19      	ldr	r2, [pc, #100]	@ (8009b34 <HAL_TIM_PWM_Start+0x1d8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d009      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <HAL_TIM_PWM_Start+0x1e8>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d004      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x18a>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a19      	ldr	r2, [pc, #100]	@ (8009b48 <HAL_TIM_PWM_Start+0x1ec>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d115      	bne.n	8009b12 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	4b17      	ldr	r3, [pc, #92]	@ (8009b4c <HAL_TIM_PWM_Start+0x1f0>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b06      	cmp	r3, #6
 8009af6:	d015      	beq.n	8009b24 <HAL_TIM_PWM_Start+0x1c8>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009afe:	d011      	beq.n	8009b24 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0201 	orr.w	r2, r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b10:	e008      	b.n	8009b24 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0201 	orr.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e000      	b.n	8009b26 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40010400 	.word	0x40010400
 8009b38:	40000400 	.word	0x40000400
 8009b3c:	40000800 	.word	0x40000800
 8009b40:	40000c00 	.word	0x40000c00
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40001800 	.word	0x40001800
 8009b4c:	00010007 	.word	0x00010007

08009b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e0ff      	b.n	8009d6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b14      	cmp	r3, #20
 8009b7a:	f200 80f0 	bhi.w	8009d5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009bd9 	.word	0x08009bd9
 8009b88:	08009d5f 	.word	0x08009d5f
 8009b8c:	08009d5f 	.word	0x08009d5f
 8009b90:	08009d5f 	.word	0x08009d5f
 8009b94:	08009c19 	.word	0x08009c19
 8009b98:	08009d5f 	.word	0x08009d5f
 8009b9c:	08009d5f 	.word	0x08009d5f
 8009ba0:	08009d5f 	.word	0x08009d5f
 8009ba4:	08009c5b 	.word	0x08009c5b
 8009ba8:	08009d5f 	.word	0x08009d5f
 8009bac:	08009d5f 	.word	0x08009d5f
 8009bb0:	08009d5f 	.word	0x08009d5f
 8009bb4:	08009c9b 	.word	0x08009c9b
 8009bb8:	08009d5f 	.word	0x08009d5f
 8009bbc:	08009d5f 	.word	0x08009d5f
 8009bc0:	08009d5f 	.word	0x08009d5f
 8009bc4:	08009cdd 	.word	0x08009cdd
 8009bc8:	08009d5f 	.word	0x08009d5f
 8009bcc:	08009d5f 	.word	0x08009d5f
 8009bd0:	08009d5f 	.word	0x08009d5f
 8009bd4:	08009d1d 	.word	0x08009d1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68b9      	ldr	r1, [r7, #8]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fa3a 	bl	800a058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699a      	ldr	r2, [r3, #24]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0208 	orr.w	r2, r2, #8
 8009bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0204 	bic.w	r2, r2, #4
 8009c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6999      	ldr	r1, [r3, #24]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	619a      	str	r2, [r3, #24]
      break;
 8009c16:	e0a5      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fa8c 	bl	800a13c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6999      	ldr	r1, [r3, #24]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	021a      	lsls	r2, r3, #8
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	619a      	str	r2, [r3, #24]
      break;
 8009c58:	e084      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68b9      	ldr	r1, [r7, #8]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 fae3 	bl	800a22c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69da      	ldr	r2, [r3, #28]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0208 	orr.w	r2, r2, #8
 8009c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0204 	bic.w	r2, r2, #4
 8009c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69d9      	ldr	r1, [r3, #28]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	691a      	ldr	r2, [r3, #16]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	61da      	str	r2, [r3, #28]
      break;
 8009c98:	e064      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fb39 	bl	800a318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69da      	ldr	r2, [r3, #28]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69da      	ldr	r2, [r3, #28]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69d9      	ldr	r1, [r3, #28]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	021a      	lsls	r2, r3, #8
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	61da      	str	r2, [r3, #28]
      break;
 8009cda:	e043      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fb70 	bl	800a3c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0208 	orr.w	r2, r2, #8
 8009cf6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0204 	bic.w	r2, r2, #4
 8009d06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	691a      	ldr	r2, [r3, #16]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d1a:	e023      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fba2 	bl	800a46c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	021a      	lsls	r2, r3, #8
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d5c:	e002      	b.n	8009d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	75fb      	strb	r3, [r7, #23]
      break;
 8009d62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop

08009d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_TIM_ConfigClockSource+0x1c>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e0b4      	b.n	8009efe <HAL_TIM_ConfigClockSource+0x186>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	4b56      	ldr	r3, [pc, #344]	@ (8009f08 <HAL_TIM_ConfigClockSource+0x190>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dcc:	d03e      	beq.n	8009e4c <HAL_TIM_ConfigClockSource+0xd4>
 8009dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dd2:	f200 8087 	bhi.w	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dda:	f000 8086 	beq.w	8009eea <HAL_TIM_ConfigClockSource+0x172>
 8009dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009de2:	d87f      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009de4:	2b70      	cmp	r3, #112	@ 0x70
 8009de6:	d01a      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0xa6>
 8009de8:	2b70      	cmp	r3, #112	@ 0x70
 8009dea:	d87b      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009dec:	2b60      	cmp	r3, #96	@ 0x60
 8009dee:	d050      	beq.n	8009e92 <HAL_TIM_ConfigClockSource+0x11a>
 8009df0:	2b60      	cmp	r3, #96	@ 0x60
 8009df2:	d877      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009df4:	2b50      	cmp	r3, #80	@ 0x50
 8009df6:	d03c      	beq.n	8009e72 <HAL_TIM_ConfigClockSource+0xfa>
 8009df8:	2b50      	cmp	r3, #80	@ 0x50
 8009dfa:	d873      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009dfc:	2b40      	cmp	r3, #64	@ 0x40
 8009dfe:	d058      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8009e00:	2b40      	cmp	r3, #64	@ 0x40
 8009e02:	d86f      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e04:	2b30      	cmp	r3, #48	@ 0x30
 8009e06:	d064      	beq.n	8009ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e08:	2b30      	cmp	r3, #48	@ 0x30
 8009e0a:	d86b      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b20      	cmp	r3, #32
 8009e0e:	d060      	beq.n	8009ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d867      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d05c      	beq.n	8009ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e18:	2b10      	cmp	r3, #16
 8009e1a:	d05a      	beq.n	8009ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8009e1c:	e062      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e2e:	f000 fbeb 	bl	800a608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	609a      	str	r2, [r3, #8]
      break;
 8009e4a:	e04f      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e5c:	f000 fbd4 	bl	800a608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e6e:	609a      	str	r2, [r3, #8]
      break;
 8009e70:	e03c      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f000 fb48 	bl	800a514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2150      	movs	r1, #80	@ 0x50
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fba1 	bl	800a5d2 <TIM_ITRx_SetConfig>
      break;
 8009e90:	e02c      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f000 fb67 	bl	800a572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2160      	movs	r1, #96	@ 0x60
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fb91 	bl	800a5d2 <TIM_ITRx_SetConfig>
      break;
 8009eb0:	e01c      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f000 fb28 	bl	800a514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2140      	movs	r1, #64	@ 0x40
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fb81 	bl	800a5d2 <TIM_ITRx_SetConfig>
      break;
 8009ed0:	e00c      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4619      	mov	r1, r3
 8009edc:	4610      	mov	r0, r2
 8009ede:	f000 fb78 	bl	800a5d2 <TIM_ITRx_SetConfig>
      break;
 8009ee2:	e003      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee8:	e000      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	fffeff88 	.word	0xfffeff88

08009f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a43      	ldr	r2, [pc, #268]	@ (800a02c <TIM_Base_SetConfig+0x120>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d013      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2a:	d00f      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a40      	ldr	r2, [pc, #256]	@ (800a030 <TIM_Base_SetConfig+0x124>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00b      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a3f      	ldr	r2, [pc, #252]	@ (800a034 <TIM_Base_SetConfig+0x128>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d007      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a3e      	ldr	r2, [pc, #248]	@ (800a038 <TIM_Base_SetConfig+0x12c>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a3d      	ldr	r2, [pc, #244]	@ (800a03c <TIM_Base_SetConfig+0x130>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d108      	bne.n	8009f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a32      	ldr	r2, [pc, #200]	@ (800a02c <TIM_Base_SetConfig+0x120>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d02b      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6c:	d027      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a2f      	ldr	r2, [pc, #188]	@ (800a030 <TIM_Base_SetConfig+0x124>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d023      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a2e      	ldr	r2, [pc, #184]	@ (800a034 <TIM_Base_SetConfig+0x128>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d01f      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a2d      	ldr	r2, [pc, #180]	@ (800a038 <TIM_Base_SetConfig+0x12c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d01b      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a2c      	ldr	r2, [pc, #176]	@ (800a03c <TIM_Base_SetConfig+0x130>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d017      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a2b      	ldr	r2, [pc, #172]	@ (800a040 <TIM_Base_SetConfig+0x134>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d013      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a2a      	ldr	r2, [pc, #168]	@ (800a044 <TIM_Base_SetConfig+0x138>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00f      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a29      	ldr	r2, [pc, #164]	@ (800a048 <TIM_Base_SetConfig+0x13c>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00b      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a28      	ldr	r2, [pc, #160]	@ (800a04c <TIM_Base_SetConfig+0x140>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d007      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a27      	ldr	r2, [pc, #156]	@ (800a050 <TIM_Base_SetConfig+0x144>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d003      	beq.n	8009fbe <TIM_Base_SetConfig+0xb2>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a26      	ldr	r2, [pc, #152]	@ (800a054 <TIM_Base_SetConfig+0x148>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d108      	bne.n	8009fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800a02c <TIM_Base_SetConfig+0x120>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_Base_SetConfig+0xf2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a10      	ldr	r2, [pc, #64]	@ (800a03c <TIM_Base_SetConfig+0x130>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d103      	bne.n	800a006 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691a      	ldr	r2, [r3, #16]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f043 0204 	orr.w	r2, r3, #4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	40010000 	.word	0x40010000
 800a030:	40000400 	.word	0x40000400
 800a034:	40000800 	.word	0x40000800
 800a038:	40000c00 	.word	0x40000c00
 800a03c:	40010400 	.word	0x40010400
 800a040:	40014000 	.word	0x40014000
 800a044:	40014400 	.word	0x40014400
 800a048:	40014800 	.word	0x40014800
 800a04c:	40001800 	.word	0x40001800
 800a050:	40001c00 	.word	0x40001c00
 800a054:	40002000 	.word	0x40002000

0800a058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	f023 0201 	bic.w	r2, r3, #1
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4b2b      	ldr	r3, [pc, #172]	@ (800a130 <TIM_OC1_SetConfig+0xd8>)
 800a084:	4013      	ands	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 0303 	bic.w	r3, r3, #3
 800a08e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f023 0302 	bic.w	r3, r3, #2
 800a0a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a21      	ldr	r2, [pc, #132]	@ (800a134 <TIM_OC1_SetConfig+0xdc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC1_SetConfig+0x64>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a20      	ldr	r2, [pc, #128]	@ (800a138 <TIM_OC1_SetConfig+0xe0>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d10c      	bne.n	800a0d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f023 0308 	bic.w	r3, r3, #8
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 0304 	bic.w	r3, r3, #4
 800a0d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a16      	ldr	r2, [pc, #88]	@ (800a134 <TIM_OC1_SetConfig+0xdc>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d003      	beq.n	800a0e6 <TIM_OC1_SetConfig+0x8e>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a15      	ldr	r2, [pc, #84]	@ (800a138 <TIM_OC1_SetConfig+0xe0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d111      	bne.n	800a10a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	fffeff8f 	.word	0xfffeff8f
 800a134:	40010000 	.word	0x40010000
 800a138:	40010400 	.word	0x40010400

0800a13c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	f023 0210 	bic.w	r2, r3, #16
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4b2e      	ldr	r3, [pc, #184]	@ (800a220 <TIM_OC2_SetConfig+0xe4>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0320 	bic.w	r3, r3, #32
 800a186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a23      	ldr	r2, [pc, #140]	@ (800a224 <TIM_OC2_SetConfig+0xe8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_OC2_SetConfig+0x68>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a22      	ldr	r2, [pc, #136]	@ (800a228 <TIM_OC2_SetConfig+0xec>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d10d      	bne.n	800a1c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a18      	ldr	r2, [pc, #96]	@ (800a224 <TIM_OC2_SetConfig+0xe8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d003      	beq.n	800a1d0 <TIM_OC2_SetConfig+0x94>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a17      	ldr	r2, [pc, #92]	@ (800a228 <TIM_OC2_SetConfig+0xec>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d113      	bne.n	800a1f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	feff8fff 	.word	0xfeff8fff
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4b2d      	ldr	r3, [pc, #180]	@ (800a30c <TIM_OC3_SetConfig+0xe0>)
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a22      	ldr	r2, [pc, #136]	@ (800a310 <TIM_OC3_SetConfig+0xe4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_OC3_SetConfig+0x66>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a21      	ldr	r2, [pc, #132]	@ (800a314 <TIM_OC3_SetConfig+0xe8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d10d      	bne.n	800a2ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a17      	ldr	r2, [pc, #92]	@ (800a310 <TIM_OC3_SetConfig+0xe4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC3_SetConfig+0x92>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a16      	ldr	r2, [pc, #88]	@ (800a314 <TIM_OC3_SetConfig+0xe8>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d113      	bne.n	800a2e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	fffeff8f 	.word	0xfffeff8f
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400

0800a318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4b1e      	ldr	r3, [pc, #120]	@ (800a3bc <TIM_OC4_SetConfig+0xa4>)
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	031b      	lsls	r3, r3, #12
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a13      	ldr	r2, [pc, #76]	@ (800a3c0 <TIM_OC4_SetConfig+0xa8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC4_SetConfig+0x68>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a12      	ldr	r2, [pc, #72]	@ (800a3c4 <TIM_OC4_SetConfig+0xac>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d109      	bne.n	800a394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	019b      	lsls	r3, r3, #6
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	feff8fff 	.word	0xfeff8fff
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40010400 	.word	0x40010400

0800a3c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a460 <TIM_OC5_SetConfig+0x98>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	041b      	lsls	r3, r3, #16
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	4313      	orrs	r3, r2
 800a414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a12      	ldr	r2, [pc, #72]	@ (800a464 <TIM_OC5_SetConfig+0x9c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d003      	beq.n	800a426 <TIM_OC5_SetConfig+0x5e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a11      	ldr	r2, [pc, #68]	@ (800a468 <TIM_OC5_SetConfig+0xa0>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d109      	bne.n	800a43a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a42c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	021b      	lsls	r3, r3, #8
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	621a      	str	r2, [r3, #32]
}
 800a454:	bf00      	nop
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	fffeff8f 	.word	0xfffeff8f
 800a464:	40010000 	.word	0x40010000
 800a468:	40010400 	.word	0x40010400

0800a46c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	4b1c      	ldr	r3, [pc, #112]	@ (800a508 <TIM_OC6_SetConfig+0x9c>)
 800a498:	4013      	ands	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	051b      	lsls	r3, r3, #20
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a13      	ldr	r2, [pc, #76]	@ (800a50c <TIM_OC6_SetConfig+0xa0>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d003      	beq.n	800a4cc <TIM_OC6_SetConfig+0x60>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a12      	ldr	r2, [pc, #72]	@ (800a510 <TIM_OC6_SetConfig+0xa4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d109      	bne.n	800a4e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	029b      	lsls	r3, r3, #10
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	621a      	str	r2, [r3, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	feff8fff 	.word	0xfeff8fff
 800a50c:	40010000 	.word	0x40010000
 800a510:	40010400 	.word	0x40010400

0800a514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f023 0201 	bic.w	r2, r3, #1
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a53e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	4313      	orrs	r3, r2
 800a548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f023 030a 	bic.w	r3, r3, #10
 800a550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4313      	orrs	r3, r2
 800a558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	621a      	str	r2, [r3, #32]
}
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a572:	b480      	push	{r7}
 800a574:	b087      	sub	sp, #28
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	f023 0210 	bic.w	r2, r3, #16
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a59c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	031b      	lsls	r3, r3, #12
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	011b      	lsls	r3, r3, #4
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	621a      	str	r2, [r3, #32]
}
 800a5c6:	bf00      	nop
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f043 0307 	orr.w	r3, r3, #7
 800a5f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	609a      	str	r2, [r3, #8]
}
 800a5fc:	bf00      	nop
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	021a      	lsls	r2, r3, #8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	431a      	orrs	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4313      	orrs	r3, r2
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	609a      	str	r2, [r3, #8]
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f003 031f 	and.w	r3, r3, #31
 800a65a:	2201      	movs	r2, #1
 800a65c:	fa02 f303 	lsl.w	r3, r2, r3
 800a660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1a      	ldr	r2, [r3, #32]
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	43db      	mvns	r3, r3
 800a66a:	401a      	ands	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a1a      	ldr	r2, [r3, #32]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	fa01 f303 	lsl.w	r3, r1, r3
 800a680:	431a      	orrs	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	621a      	str	r2, [r3, #32]
}
 800a686:	bf00      	nop
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
	...

0800a694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e06d      	b.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a30      	ldr	r2, [pc, #192]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d004      	beq.n	800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a2f      	ldr	r2, [pc, #188]	@ (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d108      	bne.n	800a6f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a20      	ldr	r2, [pc, #128]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d022      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71e:	d01d      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a1d      	ldr	r2, [pc, #116]	@ (800a79c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d018      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d013      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a1a      	ldr	r2, [pc, #104]	@ (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00e      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a15      	ldr	r2, [pc, #84]	@ (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d009      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a16      	ldr	r2, [pc, #88]	@ (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d004      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a15      	ldr	r2, [pc, #84]	@ (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d10c      	bne.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400
 800a79c:	40000400 	.word	0x40000400
 800a7a0:	40000800 	.word	0x40000800
 800a7a4:	40000c00 	.word	0x40000c00
 800a7a8:	40014000 	.word	0x40014000
 800a7ac:	40001800 	.word	0x40001800

0800a7b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e040      	b.n	800a844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7f9 f9a8 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2224      	movs	r2, #36	@ 0x24
 800a7dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fe50 	bl	800b49c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fbe9 	bl	800afd4 <UART_SetConfig>
 800a802:	4603      	mov	r3, r0
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e01b      	b.n	800a844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a81a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a82a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f042 0201 	orr.w	r2, r2, #1
 800a83a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fecf 	bl	800b5e0 <UART_CheckIdleState>
 800a842:	4603      	mov	r3, r0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b09a      	sub	sp, #104	@ 0x68
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a868:	667b      	str	r3, [r7, #100]	@ 0x64
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a872:	657b      	str	r3, [r7, #84]	@ 0x54
 800a874:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a878:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8a6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d118      	bne.n	800a8f4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f023 0310 	bic.w	r3, r3, #16
 800a8d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e6      	bne.n	800a8c2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fe:	2b40      	cmp	r3, #64	@ 0x40
 800a900:	d137      	bne.n	800a972 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3308      	adds	r3, #8
 800a908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	60bb      	str	r3, [r7, #8]
   return(result);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3308      	adds	r3, #8
 800a920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a922:	61ba      	str	r2, [r7, #24]
 800a924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	6979      	ldr	r1, [r7, #20]
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	613b      	str	r3, [r7, #16]
   return(result);
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e5      	bne.n	800a902 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d019      	beq.n	800a972 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a942:	2200      	movs	r2, #0
 800a944:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fa fb22 	bl	8004f94 <HAL_DMA_Abort>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00d      	beq.n	800a972 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fa fd36 	bl	80053cc <HAL_DMA_GetError>
 800a960:	4603      	mov	r3, r0
 800a962:	2b20      	cmp	r3, #32
 800a964:	d105      	bne.n	800a972 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2210      	movs	r2, #16
 800a96a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e017      	b.n	800a9a2 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	220f      	movs	r2, #15
 800a980:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	699a      	ldr	r2, [r3, #24]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0208 	orr.w	r2, r2, #8
 800a990:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3768      	adds	r7, #104	@ 0x68
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b0ba      	sub	sp, #232	@ 0xe8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9da:	4013      	ands	r3, r2
 800a9dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d115      	bne.n	800aa14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00f      	beq.n	800aa14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d009      	beq.n	800aa14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 82b1 	beq.w	800af6c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
      }
      return;
 800aa12:	e2ab      	b.n	800af6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 8117 	beq.w	800ac4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa2e:	4b85      	ldr	r3, [pc, #532]	@ (800ac44 <HAL_UART_IRQHandler+0x298>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 810a 	beq.w	800ac4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d011      	beq.n	800aa68 <HAL_UART_IRQHandler+0xbc>
 800aa44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2201      	movs	r2, #1
 800aa56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d011      	beq.n	800aa98 <HAL_UART_IRQHandler+0xec>
 800aa74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2202      	movs	r2, #2
 800aa86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa8e:	f043 0204 	orr.w	r2, r3, #4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d011      	beq.n	800aac8 <HAL_UART_IRQHandler+0x11c>
 800aaa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2204      	movs	r2, #4
 800aab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aabe:	f043 0202 	orr.w	r2, r3, #2
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d017      	beq.n	800ab04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aae4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aafa:	f043 0208 	orr.w	r2, r3, #8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d012      	beq.n	800ab36 <HAL_UART_IRQHandler+0x18a>
 800ab10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab2c:	f043 0220 	orr.w	r2, r3, #32
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8217 	beq.w	800af70 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00d      	beq.n	800ab6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab7e:	2b40      	cmp	r3, #64	@ 0x40
 800ab80:	d005      	beq.n	800ab8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d04f      	beq.n	800ac2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 feb0 	bl	800b8f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9e:	2b40      	cmp	r3, #64	@ 0x40
 800aba0:	d141      	bne.n	800ac26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3308      	adds	r3, #8
 800aba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3308      	adds	r3, #8
 800abca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1d9      	bne.n	800aba2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d013      	beq.n	800ac1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfa:	4a13      	ldr	r2, [pc, #76]	@ (800ac48 <HAL_UART_IRQHandler+0x29c>)
 800abfc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fa fa36 	bl	8005074 <HAL_DMA_Abort_IT>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d017      	beq.n	800ac3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac1c:	e00f      	b.n	800ac3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f9ce 	bl	800afc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac24:	e00b      	b.n	800ac3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f9ca 	bl	800afc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2c:	e007      	b.n	800ac3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f9c6 	bl	800afc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ac3c:	e198      	b.n	800af70 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3e:	bf00      	nop
    return;
 800ac40:	e196      	b.n	800af70 <HAL_UART_IRQHandler+0x5c4>
 800ac42:	bf00      	nop
 800ac44:	04000120 	.word	0x04000120
 800ac48:	0800bc0b 	.word	0x0800bc0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	f040 8166 	bne.w	800af22 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 815f 	beq.w	800af22 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac68:	f003 0310 	and.w	r3, r3, #16
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8158 	beq.w	800af22 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2210      	movs	r2, #16
 800ac78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac84:	2b40      	cmp	r3, #64	@ 0x40
 800ac86:	f040 80d0 	bne.w	800ae2a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 80ab 	beq.w	800adf6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acaa:	429a      	cmp	r2, r3
 800acac:	f080 80a3 	bcs.w	800adf6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc4:	f000 8086 	beq.w	800add4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ace0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ace4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	461a      	mov	r2, r3
 800acee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1da      	bne.n	800acc8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3308      	adds	r3, #8
 800ad18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad24:	f023 0301 	bic.w	r3, r3, #1
 800ad28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3308      	adds	r3, #8
 800ad32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e1      	bne.n	800ad12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3308      	adds	r3, #8
 800ad54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e3      	bne.n	800ad4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ada2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ada4:	f023 0310 	bic.w	r3, r3, #16
 800ada8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	461a      	mov	r2, r3
 800adb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800adc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e4      	bne.n	800ad94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adce:	4618      	mov	r0, r3
 800add0:	f7fa f8e0 	bl	8004f94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2202      	movs	r2, #2
 800add8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	b29b      	uxth	r3, r3
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7f7 feae 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800adf4:	e0be      	b.n	800af74 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800adfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae00:	429a      	cmp	r2, r3
 800ae02:	f040 80b7 	bne.w	800af74 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae10:	f040 80b0 	bne.w	800af74 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7f7 fe94 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
      return;
 800ae28:	e0a4      	b.n	800af74 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 8096 	beq.w	800af78 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ae4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8091 	beq.w	800af78 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e4      	bne.n	800ae56 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	f023 0301 	bic.w	r3, r3, #1
 800aea2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3308      	adds	r3, #8
 800aeac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aeb0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aeb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e3      	bne.n	800ae8c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2220      	movs	r2, #32
 800aec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f023 0310 	bic.w	r3, r3, #16
 800aeec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aefa:	61fb      	str	r3, [r7, #28]
 800aefc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	69b9      	ldr	r1, [r7, #24]
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	617b      	str	r3, [r7, #20]
   return(result);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e4      	bne.n	800aed8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2202      	movs	r2, #2
 800af12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7f7 fe18 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af20:	e02a      	b.n	800af78 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00e      	beq.n	800af4c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d008      	beq.n	800af4c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d01c      	beq.n	800af7c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
    }
    return;
 800af4a:	e017      	b.n	800af7c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d012      	beq.n	800af7e <HAL_UART_IRQHandler+0x5d2>
 800af58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00c      	beq.n	800af7e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fe62 	bl	800bc2e <UART_EndTransmit_IT>
    return;
 800af6a:	e008      	b.n	800af7e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af6c:	bf00      	nop
 800af6e:	e006      	b.n	800af7e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af70:	bf00      	nop
 800af72:	e004      	b.n	800af7e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af74:	bf00      	nop
 800af76:	e002      	b.n	800af7e <HAL_UART_IRQHandler+0x5d2>
      return;
 800af78:	bf00      	nop
 800af7a:	e000      	b.n	800af7e <HAL_UART_IRQHandler+0x5d2>
    return;
 800af7c:	bf00      	nop
  }

}
 800af7e:	37e8      	adds	r7, #232	@ 0xe8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	431a      	orrs	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	431a      	orrs	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	4ba6      	ldr	r3, [pc, #664]	@ (800b298 <UART_SetConfig+0x2c4>)
 800b000:	4013      	ands	r3, r2
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6812      	ldr	r2, [r2, #0]
 800b006:	6979      	ldr	r1, [r7, #20]
 800b008:	430b      	orrs	r3, r1
 800b00a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	4313      	orrs	r3, r2
 800b030:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	430a      	orrs	r2, r1
 800b044:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a94      	ldr	r2, [pc, #592]	@ (800b29c <UART_SetConfig+0x2c8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d120      	bne.n	800b092 <UART_SetConfig+0xbe>
 800b050:	4b93      	ldr	r3, [pc, #588]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d816      	bhi.n	800b08c <UART_SetConfig+0xb8>
 800b05e:	a201      	add	r2, pc, #4	@ (adr r2, 800b064 <UART_SetConfig+0x90>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b075 	.word	0x0800b075
 800b068:	0800b081 	.word	0x0800b081
 800b06c:	0800b07b 	.word	0x0800b07b
 800b070:	0800b087 	.word	0x0800b087
 800b074:	2301      	movs	r3, #1
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	e150      	b.n	800b31c <UART_SetConfig+0x348>
 800b07a:	2302      	movs	r3, #2
 800b07c:	77fb      	strb	r3, [r7, #31]
 800b07e:	e14d      	b.n	800b31c <UART_SetConfig+0x348>
 800b080:	2304      	movs	r3, #4
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e14a      	b.n	800b31c <UART_SetConfig+0x348>
 800b086:	2308      	movs	r3, #8
 800b088:	77fb      	strb	r3, [r7, #31]
 800b08a:	e147      	b.n	800b31c <UART_SetConfig+0x348>
 800b08c:	2310      	movs	r3, #16
 800b08e:	77fb      	strb	r3, [r7, #31]
 800b090:	e144      	b.n	800b31c <UART_SetConfig+0x348>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a83      	ldr	r2, [pc, #524]	@ (800b2a4 <UART_SetConfig+0x2d0>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d132      	bne.n	800b102 <UART_SetConfig+0x12e>
 800b09c:	4b80      	ldr	r3, [pc, #512]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a2:	f003 030c 	and.w	r3, r3, #12
 800b0a6:	2b0c      	cmp	r3, #12
 800b0a8:	d828      	bhi.n	800b0fc <UART_SetConfig+0x128>
 800b0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b0 <UART_SetConfig+0xdc>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b0e5 	.word	0x0800b0e5
 800b0b4:	0800b0fd 	.word	0x0800b0fd
 800b0b8:	0800b0fd 	.word	0x0800b0fd
 800b0bc:	0800b0fd 	.word	0x0800b0fd
 800b0c0:	0800b0f1 	.word	0x0800b0f1
 800b0c4:	0800b0fd 	.word	0x0800b0fd
 800b0c8:	0800b0fd 	.word	0x0800b0fd
 800b0cc:	0800b0fd 	.word	0x0800b0fd
 800b0d0:	0800b0eb 	.word	0x0800b0eb
 800b0d4:	0800b0fd 	.word	0x0800b0fd
 800b0d8:	0800b0fd 	.word	0x0800b0fd
 800b0dc:	0800b0fd 	.word	0x0800b0fd
 800b0e0:	0800b0f7 	.word	0x0800b0f7
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	e118      	b.n	800b31c <UART_SetConfig+0x348>
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	77fb      	strb	r3, [r7, #31]
 800b0ee:	e115      	b.n	800b31c <UART_SetConfig+0x348>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e112      	b.n	800b31c <UART_SetConfig+0x348>
 800b0f6:	2308      	movs	r3, #8
 800b0f8:	77fb      	strb	r3, [r7, #31]
 800b0fa:	e10f      	b.n	800b31c <UART_SetConfig+0x348>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	77fb      	strb	r3, [r7, #31]
 800b100:	e10c      	b.n	800b31c <UART_SetConfig+0x348>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a68      	ldr	r2, [pc, #416]	@ (800b2a8 <UART_SetConfig+0x2d4>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d120      	bne.n	800b14e <UART_SetConfig+0x17a>
 800b10c:	4b64      	ldr	r3, [pc, #400]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b112:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b116:	2b30      	cmp	r3, #48	@ 0x30
 800b118:	d013      	beq.n	800b142 <UART_SetConfig+0x16e>
 800b11a:	2b30      	cmp	r3, #48	@ 0x30
 800b11c:	d814      	bhi.n	800b148 <UART_SetConfig+0x174>
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d009      	beq.n	800b136 <UART_SetConfig+0x162>
 800b122:	2b20      	cmp	r3, #32
 800b124:	d810      	bhi.n	800b148 <UART_SetConfig+0x174>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <UART_SetConfig+0x15c>
 800b12a:	2b10      	cmp	r3, #16
 800b12c:	d006      	beq.n	800b13c <UART_SetConfig+0x168>
 800b12e:	e00b      	b.n	800b148 <UART_SetConfig+0x174>
 800b130:	2300      	movs	r3, #0
 800b132:	77fb      	strb	r3, [r7, #31]
 800b134:	e0f2      	b.n	800b31c <UART_SetConfig+0x348>
 800b136:	2302      	movs	r3, #2
 800b138:	77fb      	strb	r3, [r7, #31]
 800b13a:	e0ef      	b.n	800b31c <UART_SetConfig+0x348>
 800b13c:	2304      	movs	r3, #4
 800b13e:	77fb      	strb	r3, [r7, #31]
 800b140:	e0ec      	b.n	800b31c <UART_SetConfig+0x348>
 800b142:	2308      	movs	r3, #8
 800b144:	77fb      	strb	r3, [r7, #31]
 800b146:	e0e9      	b.n	800b31c <UART_SetConfig+0x348>
 800b148:	2310      	movs	r3, #16
 800b14a:	77fb      	strb	r3, [r7, #31]
 800b14c:	e0e6      	b.n	800b31c <UART_SetConfig+0x348>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a56      	ldr	r2, [pc, #344]	@ (800b2ac <UART_SetConfig+0x2d8>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d120      	bne.n	800b19a <UART_SetConfig+0x1c6>
 800b158:	4b51      	ldr	r3, [pc, #324]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b162:	2bc0      	cmp	r3, #192	@ 0xc0
 800b164:	d013      	beq.n	800b18e <UART_SetConfig+0x1ba>
 800b166:	2bc0      	cmp	r3, #192	@ 0xc0
 800b168:	d814      	bhi.n	800b194 <UART_SetConfig+0x1c0>
 800b16a:	2b80      	cmp	r3, #128	@ 0x80
 800b16c:	d009      	beq.n	800b182 <UART_SetConfig+0x1ae>
 800b16e:	2b80      	cmp	r3, #128	@ 0x80
 800b170:	d810      	bhi.n	800b194 <UART_SetConfig+0x1c0>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <UART_SetConfig+0x1a8>
 800b176:	2b40      	cmp	r3, #64	@ 0x40
 800b178:	d006      	beq.n	800b188 <UART_SetConfig+0x1b4>
 800b17a:	e00b      	b.n	800b194 <UART_SetConfig+0x1c0>
 800b17c:	2300      	movs	r3, #0
 800b17e:	77fb      	strb	r3, [r7, #31]
 800b180:	e0cc      	b.n	800b31c <UART_SetConfig+0x348>
 800b182:	2302      	movs	r3, #2
 800b184:	77fb      	strb	r3, [r7, #31]
 800b186:	e0c9      	b.n	800b31c <UART_SetConfig+0x348>
 800b188:	2304      	movs	r3, #4
 800b18a:	77fb      	strb	r3, [r7, #31]
 800b18c:	e0c6      	b.n	800b31c <UART_SetConfig+0x348>
 800b18e:	2308      	movs	r3, #8
 800b190:	77fb      	strb	r3, [r7, #31]
 800b192:	e0c3      	b.n	800b31c <UART_SetConfig+0x348>
 800b194:	2310      	movs	r3, #16
 800b196:	77fb      	strb	r3, [r7, #31]
 800b198:	e0c0      	b.n	800b31c <UART_SetConfig+0x348>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a44      	ldr	r2, [pc, #272]	@ (800b2b0 <UART_SetConfig+0x2dc>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d125      	bne.n	800b1f0 <UART_SetConfig+0x21c>
 800b1a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1b2:	d017      	beq.n	800b1e4 <UART_SetConfig+0x210>
 800b1b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1b8:	d817      	bhi.n	800b1ea <UART_SetConfig+0x216>
 800b1ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1be:	d00b      	beq.n	800b1d8 <UART_SetConfig+0x204>
 800b1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1c4:	d811      	bhi.n	800b1ea <UART_SetConfig+0x216>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <UART_SetConfig+0x1fe>
 800b1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ce:	d006      	beq.n	800b1de <UART_SetConfig+0x20a>
 800b1d0:	e00b      	b.n	800b1ea <UART_SetConfig+0x216>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	77fb      	strb	r3, [r7, #31]
 800b1d6:	e0a1      	b.n	800b31c <UART_SetConfig+0x348>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e09e      	b.n	800b31c <UART_SetConfig+0x348>
 800b1de:	2304      	movs	r3, #4
 800b1e0:	77fb      	strb	r3, [r7, #31]
 800b1e2:	e09b      	b.n	800b31c <UART_SetConfig+0x348>
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	77fb      	strb	r3, [r7, #31]
 800b1e8:	e098      	b.n	800b31c <UART_SetConfig+0x348>
 800b1ea:	2310      	movs	r3, #16
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e095      	b.n	800b31c <UART_SetConfig+0x348>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a2f      	ldr	r2, [pc, #188]	@ (800b2b4 <UART_SetConfig+0x2e0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d125      	bne.n	800b246 <UART_SetConfig+0x272>
 800b1fa:	4b29      	ldr	r3, [pc, #164]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b200:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b208:	d017      	beq.n	800b23a <UART_SetConfig+0x266>
 800b20a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b20e:	d817      	bhi.n	800b240 <UART_SetConfig+0x26c>
 800b210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b214:	d00b      	beq.n	800b22e <UART_SetConfig+0x25a>
 800b216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b21a:	d811      	bhi.n	800b240 <UART_SetConfig+0x26c>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <UART_SetConfig+0x254>
 800b220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b224:	d006      	beq.n	800b234 <UART_SetConfig+0x260>
 800b226:	e00b      	b.n	800b240 <UART_SetConfig+0x26c>
 800b228:	2301      	movs	r3, #1
 800b22a:	77fb      	strb	r3, [r7, #31]
 800b22c:	e076      	b.n	800b31c <UART_SetConfig+0x348>
 800b22e:	2302      	movs	r3, #2
 800b230:	77fb      	strb	r3, [r7, #31]
 800b232:	e073      	b.n	800b31c <UART_SetConfig+0x348>
 800b234:	2304      	movs	r3, #4
 800b236:	77fb      	strb	r3, [r7, #31]
 800b238:	e070      	b.n	800b31c <UART_SetConfig+0x348>
 800b23a:	2308      	movs	r3, #8
 800b23c:	77fb      	strb	r3, [r7, #31]
 800b23e:	e06d      	b.n	800b31c <UART_SetConfig+0x348>
 800b240:	2310      	movs	r3, #16
 800b242:	77fb      	strb	r3, [r7, #31]
 800b244:	e06a      	b.n	800b31c <UART_SetConfig+0x348>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b8 <UART_SetConfig+0x2e4>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d138      	bne.n	800b2c2 <UART_SetConfig+0x2ee>
 800b250:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <UART_SetConfig+0x2cc>)
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b256:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b25a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b25e:	d017      	beq.n	800b290 <UART_SetConfig+0x2bc>
 800b260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b264:	d82a      	bhi.n	800b2bc <UART_SetConfig+0x2e8>
 800b266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b26a:	d00b      	beq.n	800b284 <UART_SetConfig+0x2b0>
 800b26c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b270:	d824      	bhi.n	800b2bc <UART_SetConfig+0x2e8>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <UART_SetConfig+0x2aa>
 800b276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b27a:	d006      	beq.n	800b28a <UART_SetConfig+0x2b6>
 800b27c:	e01e      	b.n	800b2bc <UART_SetConfig+0x2e8>
 800b27e:	2300      	movs	r3, #0
 800b280:	77fb      	strb	r3, [r7, #31]
 800b282:	e04b      	b.n	800b31c <UART_SetConfig+0x348>
 800b284:	2302      	movs	r3, #2
 800b286:	77fb      	strb	r3, [r7, #31]
 800b288:	e048      	b.n	800b31c <UART_SetConfig+0x348>
 800b28a:	2304      	movs	r3, #4
 800b28c:	77fb      	strb	r3, [r7, #31]
 800b28e:	e045      	b.n	800b31c <UART_SetConfig+0x348>
 800b290:	2308      	movs	r3, #8
 800b292:	77fb      	strb	r3, [r7, #31]
 800b294:	e042      	b.n	800b31c <UART_SetConfig+0x348>
 800b296:	bf00      	nop
 800b298:	efff69f3 	.word	0xefff69f3
 800b29c:	40011000 	.word	0x40011000
 800b2a0:	40023800 	.word	0x40023800
 800b2a4:	40004400 	.word	0x40004400
 800b2a8:	40004800 	.word	0x40004800
 800b2ac:	40004c00 	.word	0x40004c00
 800b2b0:	40005000 	.word	0x40005000
 800b2b4:	40011400 	.word	0x40011400
 800b2b8:	40007800 	.word	0x40007800
 800b2bc:	2310      	movs	r3, #16
 800b2be:	77fb      	strb	r3, [r7, #31]
 800b2c0:	e02c      	b.n	800b31c <UART_SetConfig+0x348>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a72      	ldr	r2, [pc, #456]	@ (800b490 <UART_SetConfig+0x4bc>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d125      	bne.n	800b318 <UART_SetConfig+0x344>
 800b2cc:	4b71      	ldr	r3, [pc, #452]	@ (800b494 <UART_SetConfig+0x4c0>)
 800b2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2da:	d017      	beq.n	800b30c <UART_SetConfig+0x338>
 800b2dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2e0:	d817      	bhi.n	800b312 <UART_SetConfig+0x33e>
 800b2e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2e6:	d00b      	beq.n	800b300 <UART_SetConfig+0x32c>
 800b2e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2ec:	d811      	bhi.n	800b312 <UART_SetConfig+0x33e>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <UART_SetConfig+0x326>
 800b2f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2f6:	d006      	beq.n	800b306 <UART_SetConfig+0x332>
 800b2f8:	e00b      	b.n	800b312 <UART_SetConfig+0x33e>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	77fb      	strb	r3, [r7, #31]
 800b2fe:	e00d      	b.n	800b31c <UART_SetConfig+0x348>
 800b300:	2302      	movs	r3, #2
 800b302:	77fb      	strb	r3, [r7, #31]
 800b304:	e00a      	b.n	800b31c <UART_SetConfig+0x348>
 800b306:	2304      	movs	r3, #4
 800b308:	77fb      	strb	r3, [r7, #31]
 800b30a:	e007      	b.n	800b31c <UART_SetConfig+0x348>
 800b30c:	2308      	movs	r3, #8
 800b30e:	77fb      	strb	r3, [r7, #31]
 800b310:	e004      	b.n	800b31c <UART_SetConfig+0x348>
 800b312:	2310      	movs	r3, #16
 800b314:	77fb      	strb	r3, [r7, #31]
 800b316:	e001      	b.n	800b31c <UART_SetConfig+0x348>
 800b318:	2310      	movs	r3, #16
 800b31a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b324:	d15b      	bne.n	800b3de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b326:	7ffb      	ldrb	r3, [r7, #31]
 800b328:	2b08      	cmp	r3, #8
 800b32a:	d828      	bhi.n	800b37e <UART_SetConfig+0x3aa>
 800b32c:	a201      	add	r2, pc, #4	@ (adr r2, 800b334 <UART_SetConfig+0x360>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b359 	.word	0x0800b359
 800b338:	0800b361 	.word	0x0800b361
 800b33c:	0800b369 	.word	0x0800b369
 800b340:	0800b37f 	.word	0x0800b37f
 800b344:	0800b36f 	.word	0x0800b36f
 800b348:	0800b37f 	.word	0x0800b37f
 800b34c:	0800b37f 	.word	0x0800b37f
 800b350:	0800b37f 	.word	0x0800b37f
 800b354:	0800b377 	.word	0x0800b377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b358:	f7fc fbbc 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800b35c:	61b8      	str	r0, [r7, #24]
        break;
 800b35e:	e013      	b.n	800b388 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b360:	f7fc fbcc 	bl	8007afc <HAL_RCC_GetPCLK2Freq>
 800b364:	61b8      	str	r0, [r7, #24]
        break;
 800b366:	e00f      	b.n	800b388 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b368:	4b4b      	ldr	r3, [pc, #300]	@ (800b498 <UART_SetConfig+0x4c4>)
 800b36a:	61bb      	str	r3, [r7, #24]
        break;
 800b36c:	e00c      	b.n	800b388 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b36e:	f7fc fa9f 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
 800b372:	61b8      	str	r0, [r7, #24]
        break;
 800b374:	e008      	b.n	800b388 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b37a:	61bb      	str	r3, [r7, #24]
        break;
 800b37c:	e004      	b.n	800b388 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	77bb      	strb	r3, [r7, #30]
        break;
 800b386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d074      	beq.n	800b478 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	005a      	lsls	r2, r3, #1
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	085b      	lsrs	r3, r3, #1
 800b398:	441a      	add	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2b0f      	cmp	r3, #15
 800b3a8:	d916      	bls.n	800b3d8 <UART_SetConfig+0x404>
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3b0:	d212      	bcs.n	800b3d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	f023 030f 	bic.w	r3, r3, #15
 800b3ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	085b      	lsrs	r3, r3, #1
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	89fa      	ldrh	r2, [r7, #14]
 800b3d4:	60da      	str	r2, [r3, #12]
 800b3d6:	e04f      	b.n	800b478 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	77bb      	strb	r3, [r7, #30]
 800b3dc:	e04c      	b.n	800b478 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3de:	7ffb      	ldrb	r3, [r7, #31]
 800b3e0:	2b08      	cmp	r3, #8
 800b3e2:	d828      	bhi.n	800b436 <UART_SetConfig+0x462>
 800b3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <UART_SetConfig+0x418>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b411 	.word	0x0800b411
 800b3f0:	0800b419 	.word	0x0800b419
 800b3f4:	0800b421 	.word	0x0800b421
 800b3f8:	0800b437 	.word	0x0800b437
 800b3fc:	0800b427 	.word	0x0800b427
 800b400:	0800b437 	.word	0x0800b437
 800b404:	0800b437 	.word	0x0800b437
 800b408:	0800b437 	.word	0x0800b437
 800b40c:	0800b42f 	.word	0x0800b42f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b410:	f7fc fb60 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 800b414:	61b8      	str	r0, [r7, #24]
        break;
 800b416:	e013      	b.n	800b440 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b418:	f7fc fb70 	bl	8007afc <HAL_RCC_GetPCLK2Freq>
 800b41c:	61b8      	str	r0, [r7, #24]
        break;
 800b41e:	e00f      	b.n	800b440 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b420:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <UART_SetConfig+0x4c4>)
 800b422:	61bb      	str	r3, [r7, #24]
        break;
 800b424:	e00c      	b.n	800b440 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b426:	f7fc fa43 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
 800b42a:	61b8      	str	r0, [r7, #24]
        break;
 800b42c:	e008      	b.n	800b440 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b42e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b432:	61bb      	str	r3, [r7, #24]
        break;
 800b434:	e004      	b.n	800b440 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	77bb      	strb	r3, [r7, #30]
        break;
 800b43e:	bf00      	nop
    }

    if (pclk != 0U)
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d018      	beq.n	800b478 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	085a      	lsrs	r2, r3, #1
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	441a      	add	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	fbb2 f3f3 	udiv	r3, r2, r3
 800b458:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b0f      	cmp	r3, #15
 800b45e:	d909      	bls.n	800b474 <UART_SetConfig+0x4a0>
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b466:	d205      	bcs.n	800b474 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	60da      	str	r2, [r3, #12]
 800b472:	e001      	b.n	800b478 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b484:	7fbb      	ldrb	r3, [r7, #30]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3720      	adds	r7, #32
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	40007c00 	.word	0x40007c00
 800b494:	40023800 	.word	0x40023800
 800b498:	00f42400 	.word	0x00f42400

0800b49c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	430a      	orrs	r2, r1
 800b56e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01a      	beq.n	800b5b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	430a      	orrs	r2, r1
 800b590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b59a:	d10a      	bne.n	800b5b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	605a      	str	r2, [r3, #4]
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08c      	sub	sp, #48	@ 0x30
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5f0:	f7f8 fdd2 	bl	8004198 <HAL_GetTick>
 800b5f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0308 	and.w	r3, r3, #8
 800b600:	2b08      	cmp	r3, #8
 800b602:	d12e      	bne.n	800b662 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	2200      	movs	r2, #0
 800b60e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f83b 	bl	800b68e <UART_WaitOnFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d021      	beq.n	800b662 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b632:	623b      	str	r3, [r7, #32]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	69b9      	ldr	r1, [r7, #24]
 800b642:	69fa      	ldr	r2, [r7, #28]
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	617b      	str	r3, [r7, #20]
   return(result);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e6      	bne.n	800b61e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e011      	b.n	800b686 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2220      	movs	r2, #32
 800b666:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3728      	adds	r7, #40	@ 0x28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	603b      	str	r3, [r7, #0]
 800b69a:	4613      	mov	r3, r2
 800b69c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b69e:	e04f      	b.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a6:	d04b      	beq.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a8:	f7f8 fd76 	bl	8004198 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d302      	bcc.n	800b6be <UART_WaitOnFlagUntilTimeout+0x30>
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e04e      	b.n	800b760 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d037      	beq.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b80      	cmp	r3, #128	@ 0x80
 800b6d4:	d034      	beq.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b40      	cmp	r3, #64	@ 0x40
 800b6da:	d031      	beq.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d110      	bne.n	800b70c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2208      	movs	r2, #8
 800b6f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 f8fe 	bl	800b8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e029      	b.n	800b760 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b71a:	d111      	bne.n	800b740 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b724:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f8e4 	bl	800b8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2220      	movs	r2, #32
 800b730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e00f      	b.n	800b760 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69da      	ldr	r2, [r3, #28]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	4013      	ands	r3, r2
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	bf0c      	ite	eq
 800b750:	2301      	moveq	r3, #1
 800b752:	2300      	movne	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	461a      	mov	r2, r3
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d0a0      	beq.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b096      	sub	sp, #88	@ 0x58
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4613      	mov	r3, r2
 800b774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	88fa      	ldrh	r2, [r7, #6]
 800b780:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2222      	movs	r2, #34	@ 0x22
 800b790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d028      	beq.n	800b7ee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7a0:	4a3e      	ldr	r2, [pc, #248]	@ (800b89c <UART_Start_Receive_DMA+0x134>)
 800b7a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7a8:	4a3d      	ldr	r2, [pc, #244]	@ (800b8a0 <UART_Start_Receive_DMA+0x138>)
 800b7aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b0:	4a3c      	ldr	r2, [pc, #240]	@ (800b8a4 <UART_Start_Receive_DMA+0x13c>)
 800b7b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3324      	adds	r3, #36	@ 0x24
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	f7f9 fb80 	bl	8004ed4 <HAL_DMA_Start_IT>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2210      	movs	r2, #16
 800b7de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e051      	b.n	800b892 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d018      	beq.n	800b828 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b80a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b816:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b81a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e6      	bne.n	800b7f6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3308      	adds	r3, #8
 800b82e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83a:	f043 0301 	orr.w	r3, r3, #1
 800b83e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b848:	637a      	str	r2, [r7, #52]	@ 0x34
 800b84a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e5      	bne.n	800b828 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3308      	adds	r3, #8
 800b862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	613b      	str	r3, [r7, #16]
   return(result);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3308      	adds	r3, #8
 800b87a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b87c:	623a      	str	r2, [r7, #32]
 800b87e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	69f9      	ldr	r1, [r7, #28]
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	61bb      	str	r3, [r7, #24]
   return(result);
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e5      	bne.n	800b85c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3758      	adds	r7, #88	@ 0x58
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	0800b9bd 	.word	0x0800b9bd
 800b8a0:	0800bb1b 	.word	0x0800bb1b
 800b8a4:	0800bb8d 	.word	0x0800bb8d

0800b8a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b089      	sub	sp, #36	@ 0x24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b8c4:	61fb      	str	r3, [r7, #28]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	61bb      	str	r3, [r7, #24]
 800b8d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6979      	ldr	r1, [r7, #20]
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	613b      	str	r3, [r7, #16]
   return(result);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e6      	bne.n	800b8b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8e8:	bf00      	nop
 800b8ea:	3724      	adds	r7, #36	@ 0x24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b095      	sub	sp, #84	@ 0x54
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b91a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b91c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e6      	bne.n	800b8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3308      	adds	r3, #8
 800b934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3308      	adds	r3, #8
 800b94c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b94e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e5      	bne.n	800b92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b966:	2b01      	cmp	r3, #1
 800b968:	d118      	bne.n	800b99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	60bb      	str	r3, [r7, #8]
   return(result);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f023 0310 	bic.w	r3, r3, #16
 800b97e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6979      	ldr	r1, [r7, #20]
 800b98e:	69ba      	ldr	r2, [r7, #24]
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	613b      	str	r3, [r7, #16]
   return(result);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e6      	bne.n	800b96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b9b0:	bf00      	nop
 800b9b2:	3754      	adds	r7, #84	@ 0x54
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b09c      	sub	sp, #112	@ 0x70
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9d2:	d071      	beq.n	800bab8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b9d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9e4:	e853 3f00 	ldrex	r3, [r3]
 800b9e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba02:	e841 2300 	strex	r3, r2, [r1]
 800ba06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1e6      	bne.n	800b9dc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba2e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e5      	bne.n	800ba0e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba6a:	e841 2300 	strex	r3, r2, [r1]
 800ba6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1e5      	bne.n	800ba42 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba78:	2220      	movs	r2, #32
 800ba7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d118      	bne.n	800bab8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f023 0310 	bic.w	r3, r3, #16
 800ba9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	461a      	mov	r2, r3
 800baa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baa4:	61bb      	str	r3, [r7, #24]
 800baa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	6979      	ldr	r1, [r7, #20]
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	e841 2300 	strex	r3, r2, [r1]
 800bab0:	613b      	str	r3, [r7, #16]
   return(result);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e6      	bne.n	800ba86 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baba:	2200      	movs	r2, #0
 800babc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800babe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d122      	bne.n	800bb0c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac8:	2200      	movs	r2, #0
 800baca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bade:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d204      	bcs.n	800baf0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bae8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800baec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800baf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb06:	f7f7 f823 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb0a:	e002      	b.n	800bb12 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bb0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb0e:	f7ff fa43 	bl	800af98 <HAL_UART_RxCpltCallback>
}
 800bb12:	bf00      	nop
 800bb14:	3770      	adds	r7, #112	@ 0x70
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d123      	bne.n	800bb7e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb3c:	085b      	lsrs	r3, r3, #1
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb54:	897a      	ldrh	r2, [r7, #10]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d803      	bhi.n	800bb62 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	897a      	ldrh	r2, [r7, #10]
 800bb5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	4619      	mov	r1, r3
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7f6 ffea 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb7c:	e002      	b.n	800bb84 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f7ff fa14 	bl	800afac <HAL_UART_RxHalfCpltCallback>
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb2:	2b80      	cmp	r3, #128	@ 0x80
 800bbb4:	d109      	bne.n	800bbca <UART_DMAError+0x3e>
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b21      	cmp	r3, #33	@ 0x21
 800bbba:	d106      	bne.n	800bbca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bbc4:	6978      	ldr	r0, [r7, #20]
 800bbc6:	f7ff fe6f 	bl	800b8a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd4:	2b40      	cmp	r3, #64	@ 0x40
 800bbd6:	d109      	bne.n	800bbec <UART_DMAError+0x60>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b22      	cmp	r3, #34	@ 0x22
 800bbdc:	d106      	bne.n	800bbec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bbe6:	6978      	ldr	r0, [r7, #20]
 800bbe8:	f7ff fe84 	bl	800b8f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbf2:	f043 0210 	orr.w	r2, r3, #16
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbfc:	6978      	ldr	r0, [r7, #20]
 800bbfe:	f7ff f9df 	bl	800afc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc02:	bf00      	nop
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f7ff f9cd 	bl	800afc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b088      	sub	sp, #32
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	6979      	ldr	r1, [r7, #20]
 800bc5a:	69ba      	ldr	r2, [r7, #24]
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	613b      	str	r3, [r7, #16]
   return(result);
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e6      	bne.n	800bc36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff f985 	bl	800af84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc7a:	bf00      	nop
 800bc7c:	3720      	adds	r7, #32
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b08c      	sub	sp, #48	@ 0x30
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d142      	bne.n	800bd20 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e03b      	b.n	800bd22 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2201      	movs	r2, #1
 800bcae:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bcb6:	88fb      	ldrh	r3, [r7, #6]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f7ff fd53 	bl	800b768 <UART_Start_Receive_DMA>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bcc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d124      	bne.n	800bd1a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d11d      	bne.n	800bd14 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2210      	movs	r2, #16
 800bcde:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	617b      	str	r3, [r7, #20]
   return(result);
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f043 0310 	orr.w	r3, r3, #16
 800bcf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd00:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6a39      	ldr	r1, [r7, #32]
 800bd04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e6      	bne.n	800bce0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bd12:	e002      	b.n	800bd1a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bd1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd1e:	e000      	b.n	800bd22 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd20:	2302      	movs	r3, #2
  }
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3730      	adds	r7, #48	@ 0x30
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	f107 001c 	add.w	r0, r7, #28
 800bd3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d127      	bne.n	800bd96 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	4b3a      	ldr	r3, [pc, #232]	@ (800be40 <USB_CoreInit+0x114>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f043 0210 	orr.w	r2, r3, #16
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d105      	bne.n	800bd8a <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 fb20 	bl	800d3d0 <USB_CoreReset>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
 800bd94:	e03c      	b.n	800be10 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800bd96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d127      	bne.n	800bdee <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	4b24      	ldr	r3, [pc, #144]	@ (800be40 <USB_CoreInit+0x114>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	f023 0210 	bic.w	r2, r3, #16
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800bdce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d105      	bne.n	800bde2 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 faf4 	bl	800d3d0 <USB_CoreReset>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
 800bdec:	e010      	b.n	800be10 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 fae8 	bl	800d3d0 <USB_CoreReset>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800be10:	7fbb      	ldrb	r3, [r7, #30]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d10b      	bne.n	800be2e <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f043 0206 	orr.w	r2, r3, #6
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f043 0220 	orr.w	r2, r3, #32
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be3a:	b004      	add	sp, #16
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	ffbdffbf 	.word	0xffbdffbf

0800be44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be52:	79fb      	ldrb	r3, [r7, #7]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d165      	bne.n	800bf24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4a41      	ldr	r2, [pc, #260]	@ (800bf60 <USB_SetTurnaroundTime+0x11c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d906      	bls.n	800be6e <USB_SetTurnaroundTime+0x2a>
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	4a40      	ldr	r2, [pc, #256]	@ (800bf64 <USB_SetTurnaroundTime+0x120>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d202      	bcs.n	800be6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be68:	230f      	movs	r3, #15
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e062      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	4a3c      	ldr	r2, [pc, #240]	@ (800bf64 <USB_SetTurnaroundTime+0x120>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d306      	bcc.n	800be84 <USB_SetTurnaroundTime+0x40>
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4a3b      	ldr	r2, [pc, #236]	@ (800bf68 <USB_SetTurnaroundTime+0x124>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d202      	bcs.n	800be84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be7e:	230e      	movs	r3, #14
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	e057      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	4a38      	ldr	r2, [pc, #224]	@ (800bf68 <USB_SetTurnaroundTime+0x124>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d306      	bcc.n	800be9a <USB_SetTurnaroundTime+0x56>
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	4a37      	ldr	r2, [pc, #220]	@ (800bf6c <USB_SetTurnaroundTime+0x128>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d202      	bcs.n	800be9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be94:	230d      	movs	r3, #13
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	e04c      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	4a33      	ldr	r2, [pc, #204]	@ (800bf6c <USB_SetTurnaroundTime+0x128>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d306      	bcc.n	800beb0 <USB_SetTurnaroundTime+0x6c>
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4a32      	ldr	r2, [pc, #200]	@ (800bf70 <USB_SetTurnaroundTime+0x12c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d802      	bhi.n	800beb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800beaa:	230c      	movs	r3, #12
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	e041      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4a2f      	ldr	r2, [pc, #188]	@ (800bf70 <USB_SetTurnaroundTime+0x12c>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d906      	bls.n	800bec6 <USB_SetTurnaroundTime+0x82>
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4a2e      	ldr	r2, [pc, #184]	@ (800bf74 <USB_SetTurnaroundTime+0x130>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d802      	bhi.n	800bec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bec0:	230b      	movs	r3, #11
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	e036      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4a2a      	ldr	r2, [pc, #168]	@ (800bf74 <USB_SetTurnaroundTime+0x130>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d906      	bls.n	800bedc <USB_SetTurnaroundTime+0x98>
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	4a29      	ldr	r2, [pc, #164]	@ (800bf78 <USB_SetTurnaroundTime+0x134>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d802      	bhi.n	800bedc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bed6:	230a      	movs	r3, #10
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e02b      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	4a26      	ldr	r2, [pc, #152]	@ (800bf78 <USB_SetTurnaroundTime+0x134>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d906      	bls.n	800bef2 <USB_SetTurnaroundTime+0xae>
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	4a25      	ldr	r2, [pc, #148]	@ (800bf7c <USB_SetTurnaroundTime+0x138>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d202      	bcs.n	800bef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800beec:	2309      	movs	r3, #9
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	e020      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	4a21      	ldr	r2, [pc, #132]	@ (800bf7c <USB_SetTurnaroundTime+0x138>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d306      	bcc.n	800bf08 <USB_SetTurnaroundTime+0xc4>
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	4a20      	ldr	r2, [pc, #128]	@ (800bf80 <USB_SetTurnaroundTime+0x13c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d802      	bhi.n	800bf08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf02:	2308      	movs	r3, #8
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e015      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4a1d      	ldr	r2, [pc, #116]	@ (800bf80 <USB_SetTurnaroundTime+0x13c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d906      	bls.n	800bf1e <USB_SetTurnaroundTime+0xda>
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	4a1c      	ldr	r2, [pc, #112]	@ (800bf84 <USB_SetTurnaroundTime+0x140>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d202      	bcs.n	800bf1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf18:	2307      	movs	r3, #7
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	e00a      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf1e:	2306      	movs	r3, #6
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	e007      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf2a:	2309      	movs	r3, #9
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e001      	b.n	800bf34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf30:	2309      	movs	r3, #9
 800bf32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	029b      	lsls	r3, r3, #10
 800bf48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	371c      	adds	r7, #28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	00d8acbf 	.word	0x00d8acbf
 800bf64:	00e4e1c0 	.word	0x00e4e1c0
 800bf68:	00f42400 	.word	0x00f42400
 800bf6c:	01067380 	.word	0x01067380
 800bf70:	011a499f 	.word	0x011a499f
 800bf74:	01312cff 	.word	0x01312cff
 800bf78:	014ca43f 	.word	0x014ca43f
 800bf7c:	016e3600 	.word	0x016e3600
 800bf80:	01a6ab1f 	.word	0x01a6ab1f
 800bf84:	01e84800 	.word	0x01e84800

0800bf88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f043 0201 	orr.w	r2, r3, #1
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f023 0201 	bic.w	r2, r3, #1
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d115      	bne.n	800c01a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bffa:	200a      	movs	r0, #10
 800bffc:	f7f8 f8d8 	bl	80041b0 <HAL_Delay>
      ms += 10U;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	330a      	adds	r3, #10
 800c004:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f001 f951 	bl	800d2ae <USB_GetMode>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d01e      	beq.n	800c050 <USB_SetCurrentMode+0x84>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2bc7      	cmp	r3, #199	@ 0xc7
 800c016:	d9f0      	bls.n	800bffa <USB_SetCurrentMode+0x2e>
 800c018:	e01a      	b.n	800c050 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c01a:	78fb      	ldrb	r3, [r7, #3]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d115      	bne.n	800c04c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c02c:	200a      	movs	r0, #10
 800c02e:	f7f8 f8bf 	bl	80041b0 <HAL_Delay>
      ms += 10U;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	330a      	adds	r3, #10
 800c036:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 f938 	bl	800d2ae <USB_GetMode>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <USB_SetCurrentMode+0x84>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2bc7      	cmp	r3, #199	@ 0xc7
 800c048:	d9f0      	bls.n	800c02c <USB_SetCurrentMode+0x60>
 800c04a:	e001      	b.n	800c050 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e005      	b.n	800c05c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2bc8      	cmp	r3, #200	@ 0xc8
 800c054:	d101      	bne.n	800c05a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c064:	b084      	sub	sp, #16
 800c066:	b580      	push	{r7, lr}
 800c068:	b086      	sub	sp, #24
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c07e:	2300      	movs	r3, #0
 800c080:	613b      	str	r3, [r7, #16]
 800c082:	e009      	b.n	800c098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3340      	adds	r3, #64	@ 0x40
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	2200      	movs	r2, #0
 800c090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	3301      	adds	r3, #1
 800c096:	613b      	str	r3, [r7, #16]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2b0e      	cmp	r3, #14
 800c09c:	d9f2      	bls.n	800c084 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c09e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d11c      	bne.n	800c0e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	e005      	b.n	800c0ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d10d      	bne.n	800c11c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f97a 	bl	800c404 <USB_SetDevSpeed>
 800c110:	e01a      	b.n	800c148 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c112:	2101      	movs	r1, #1
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f975 	bl	800c404 <USB_SetDevSpeed>
 800c11a:	e015      	b.n	800c148 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c11c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c120:	2b03      	cmp	r3, #3
 800c122:	d10d      	bne.n	800c140 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c12c:	2100      	movs	r1, #0
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f968 	bl	800c404 <USB_SetDevSpeed>
 800c134:	e008      	b.n	800c148 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c136:	2101      	movs	r1, #1
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f963 	bl	800c404 <USB_SetDevSpeed>
 800c13e:	e003      	b.n	800c148 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c140:	2103      	movs	r1, #3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f95e 	bl	800c404 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c148:	2110      	movs	r1, #16
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f8fa 	bl	800c344 <USB_FlushTxFifo>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f924 	bl	800c3a8 <USB_FlushRxFifo>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c170:	461a      	mov	r2, r3
 800c172:	2300      	movs	r3, #0
 800c174:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c17c:	461a      	mov	r2, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c188:	461a      	mov	r2, r3
 800c18a:	2300      	movs	r3, #0
 800c18c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	e043      	b.n	800c21c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1aa:	d118      	bne.n	800c1de <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1be:	461a      	mov	r2, r3
 800c1c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	e013      	b.n	800c1f0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	e008      	b.n	800c1f0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	2300      	movs	r3, #0
 800c200:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	015a      	lsls	r2, r3, #5
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4413      	add	r3, r2
 800c20a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c20e:	461a      	mov	r2, r3
 800c210:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c220:	461a      	mov	r2, r3
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	4293      	cmp	r3, r2
 800c226:	d3b5      	bcc.n	800c194 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]
 800c22c:	e043      	b.n	800c2b6 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c244:	d118      	bne.n	800c278 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c258:	461a      	mov	r2, r3
 800c25a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	e013      	b.n	800c28a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c26e:	461a      	mov	r2, r3
 800c270:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	e008      	b.n	800c28a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c284:	461a      	mov	r2, r3
 800c286:	2300      	movs	r3, #0
 800c288:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c296:	461a      	mov	r2, r3
 800c298:	2300      	movs	r3, #0
 800c29a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	015a      	lsls	r2, r3, #5
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c2ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	613b      	str	r3, [r7, #16]
 800c2b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d3b5      	bcc.n	800c22e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c2e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d105      	bne.n	800c2f8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	f043 0210 	orr.w	r2, r3, #16
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	699a      	ldr	r2, [r3, #24]
 800c2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c33c <USB_DevInit+0x2d8>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c304:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d005      	beq.n	800c318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	f043 0208 	orr.w	r2, r3, #8
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c318:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d105      	bne.n	800c32c <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	4b06      	ldr	r3, [pc, #24]	@ (800c340 <USB_DevInit+0x2dc>)
 800c326:	4313      	orrs	r3, r2
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c338:	b004      	add	sp, #16
 800c33a:	4770      	bx	lr
 800c33c:	803c3800 	.word	0x803c3800
 800c340:	40000004 	.word	0x40000004

0800c344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c35e:	d901      	bls.n	800c364 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e01b      	b.n	800c39c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	daf2      	bge.n	800c352 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	019b      	lsls	r3, r3, #6
 800c374:	f043 0220 	orr.w	r2, r3, #32
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c388:	d901      	bls.n	800c38e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e006      	b.n	800c39c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b20      	cmp	r3, #32
 800c398:	d0f0      	beq.n	800c37c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3c0:	d901      	bls.n	800c3c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e018      	b.n	800c3f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	daf2      	bge.n	800c3b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2210      	movs	r2, #16
 800c3d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3e4:	d901      	bls.n	800c3ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e006      	b.n	800c3f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	f003 0310 	and.w	r3, r3, #16
 800c3f2:	2b10      	cmp	r3, #16
 800c3f4:	d0f0      	beq.n	800c3d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	68f9      	ldr	r1, [r7, #12]
 800c420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c424:	4313      	orrs	r3, r2
 800c426:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c436:	b480      	push	{r7}
 800c438:	b087      	sub	sp, #28
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 0306 	and.w	r3, r3, #6
 800c44e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d102      	bne.n	800c45c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c456:	2300      	movs	r3, #0
 800c458:	75fb      	strb	r3, [r7, #23]
 800c45a:	e00a      	b.n	800c472 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d002      	beq.n	800c468 <USB_GetDevSpeed+0x32>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b06      	cmp	r3, #6
 800c466:	d102      	bne.n	800c46e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c468:	2302      	movs	r3, #2
 800c46a:	75fb      	strb	r3, [r7, #23]
 800c46c:	e001      	b.n	800c472 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c46e:	230f      	movs	r3, #15
 800c470:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c472:	7dfb      	ldrb	r3, [r7, #23]
}
 800c474:	4618      	mov	r0, r3
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d139      	bne.n	800c510 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4a2:	69da      	ldr	r2, [r3, #28]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	f003 030f 	and.w	r3, r3, #15
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	68f9      	ldr	r1, [r7, #12]
 800c4b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d153      	bne.n	800c57c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	791b      	ldrb	r3, [r3, #4]
 800c4ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	059b      	lsls	r3, r3, #22
 800c4f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	0159      	lsls	r1, r3, #5
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	440b      	add	r3, r1
 800c502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c506:	4619      	mov	r1, r3
 800c508:	4b20      	ldr	r3, [pc, #128]	@ (800c58c <USB_ActivateEndpoint+0x10c>)
 800c50a:	4313      	orrs	r3, r2
 800c50c:	600b      	str	r3, [r1, #0]
 800c50e:	e035      	b.n	800c57c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c516:	69da      	ldr	r2, [r3, #28]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	f003 030f 	and.w	r3, r3, #15
 800c520:	2101      	movs	r1, #1
 800c522:	fa01 f303 	lsl.w	r3, r1, r3
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	68f9      	ldr	r1, [r7, #12]
 800c52a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c52e:	4313      	orrs	r3, r2
 800c530:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d119      	bne.n	800c57c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	791b      	ldrb	r3, [r3, #4]
 800c562:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c564:	430b      	orrs	r3, r1
 800c566:	431a      	orrs	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	0159      	lsls	r1, r3, #5
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	440b      	add	r3, r1
 800c570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c574:	4619      	mov	r1, r3
 800c576:	4b05      	ldr	r3, [pc, #20]	@ (800c58c <USB_ActivateEndpoint+0x10c>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	10008000 	.word	0x10008000

0800c590 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	785b      	ldrb	r3, [r3, #1]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d161      	bne.n	800c670 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5c2:	d11f      	bne.n	800c604 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	0151      	lsls	r1, r2, #5
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	440a      	add	r2, r1
 800c5da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c602:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c60a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	f003 030f 	and.w	r3, r3, #15
 800c614:	2101      	movs	r1, #1
 800c616:	fa01 f303 	lsl.w	r3, r1, r3
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	43db      	mvns	r3, r3
 800c61e:	68f9      	ldr	r1, [r7, #12]
 800c620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c624:	4013      	ands	r3, r2
 800c626:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c62e:	69da      	ldr	r2, [r3, #28]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	f003 030f 	and.w	r3, r3, #15
 800c638:	2101      	movs	r1, #1
 800c63a:	fa01 f303 	lsl.w	r3, r1, r3
 800c63e:	b29b      	uxth	r3, r3
 800c640:	43db      	mvns	r3, r3
 800c642:	68f9      	ldr	r1, [r7, #12]
 800c644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c648:	4013      	ands	r3, r2
 800c64a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	0159      	lsls	r1, r3, #5
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	440b      	add	r3, r1
 800c662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c666:	4619      	mov	r1, r3
 800c668:	4b35      	ldr	r3, [pc, #212]	@ (800c740 <USB_DeactivateEndpoint+0x1b0>)
 800c66a:	4013      	ands	r3, r2
 800c66c:	600b      	str	r3, [r1, #0]
 800c66e:	e060      	b.n	800c732 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	4413      	add	r3, r2
 800c678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c686:	d11f      	bne.n	800c6c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f003 030f 	and.w	r3, r3, #15
 800c6d8:	2101      	movs	r1, #1
 800c6da:	fa01 f303 	lsl.w	r3, r1, r3
 800c6de:	041b      	lsls	r3, r3, #16
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	f003 030f 	and.w	r3, r3, #15
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c702:	041b      	lsls	r3, r3, #16
 800c704:	43db      	mvns	r3, r3
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c70c:	4013      	ands	r3, r2
 800c70e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	0159      	lsls	r1, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	440b      	add	r3, r1
 800c726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c72a:	4619      	mov	r1, r3
 800c72c:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <USB_DeactivateEndpoint+0x1b4>)
 800c72e:	4013      	ands	r3, r2
 800c730:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	ec337800 	.word	0xec337800
 800c744:	eff37800 	.word	0xeff37800

0800c748 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08a      	sub	sp, #40	@ 0x28
 800c74c:	af02      	add	r7, sp, #8
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	4613      	mov	r3, r2
 800c754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	785b      	ldrb	r3, [r3, #1]
 800c764:	2b01      	cmp	r3, #1
 800c766:	f040 8185 	bne.w	800ca74 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d132      	bne.n	800c7d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	015a      	lsls	r2, r3, #5
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	4413      	add	r3, r2
 800c77a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c77e:	691a      	ldr	r2, [r3, #16]
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	0159      	lsls	r1, r3, #5
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	440b      	add	r3, r1
 800c788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c78c:	4619      	mov	r1, r3
 800c78e:	4ba7      	ldr	r3, [pc, #668]	@ (800ca2c <USB_EPStartXfer+0x2e4>)
 800c790:	4013      	ands	r3, r2
 800c792:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	0151      	lsls	r1, r2, #5
 800c7a6:	69fa      	ldr	r2, [r7, #28]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7c0:	691a      	ldr	r2, [r3, #16]
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	0159      	lsls	r1, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	440b      	add	r3, r1
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4b97      	ldr	r3, [pc, #604]	@ (800ca30 <USB_EPStartXfer+0x2e8>)
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	610b      	str	r3, [r1, #16]
 800c7d6:	e097      	b.n	800c908 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7e4:	691a      	ldr	r2, [r3, #16]
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	0159      	lsls	r1, r3, #5
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	440b      	add	r3, r1
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4b8e      	ldr	r3, [pc, #568]	@ (800ca30 <USB_EPStartXfer+0x2e8>)
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c806:	691a      	ldr	r2, [r3, #16]
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	0159      	lsls	r1, r3, #5
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	440b      	add	r3, r1
 800c810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c814:	4619      	mov	r1, r3
 800c816:	4b85      	ldr	r3, [pc, #532]	@ (800ca2c <USB_EPStartXfer+0x2e4>)
 800c818:	4013      	ands	r3, r2
 800c81a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d11a      	bne.n	800c858 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	691a      	ldr	r2, [r3, #16]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d903      	bls.n	800c836 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	69ba      	ldr	r2, [r7, #24]
 800c846:	0151      	lsls	r1, r2, #5
 800c848:	69fa      	ldr	r2, [r7, #28]
 800c84a:	440a      	add	r2, r1
 800c84c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c854:	6113      	str	r3, [r2, #16]
 800c856:	e044      	b.n	800c8e2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	691a      	ldr	r2, [r3, #16]
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	4413      	add	r3, r2
 800c862:	1e5a      	subs	r2, r3, #1
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	fbb2 f3f3 	udiv	r3, r2, r3
 800c86c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	4413      	add	r3, r2
 800c876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c87a:	691a      	ldr	r2, [r3, #16]
 800c87c:	8afb      	ldrh	r3, [r7, #22]
 800c87e:	04d9      	lsls	r1, r3, #19
 800c880:	4b6c      	ldr	r3, [pc, #432]	@ (800ca34 <USB_EPStartXfer+0x2ec>)
 800c882:	400b      	ands	r3, r1
 800c884:	69b9      	ldr	r1, [r7, #24]
 800c886:	0148      	lsls	r0, r1, #5
 800c888:	69f9      	ldr	r1, [r7, #28]
 800c88a:	4401      	add	r1, r0
 800c88c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c890:	4313      	orrs	r3, r2
 800c892:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	791b      	ldrb	r3, [r3, #4]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d122      	bne.n	800c8e2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	015a      	lsls	r2, r3, #5
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	69ba      	ldr	r2, [r7, #24]
 800c8ac:	0151      	lsls	r1, r2, #5
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	440a      	add	r2, r1
 800c8b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c8ba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c8:	691a      	ldr	r2, [r3, #16]
 800c8ca:	8afb      	ldrh	r3, [r7, #22]
 800c8cc:	075b      	lsls	r3, r3, #29
 800c8ce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c8d2:	69b9      	ldr	r1, [r7, #24]
 800c8d4:	0148      	lsls	r0, r1, #5
 800c8d6:	69f9      	ldr	r1, [r7, #28]
 800c8d8:	4401      	add	r1, r0
 800c8da:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8ee:	691a      	ldr	r2, [r3, #16]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8f8:	69b9      	ldr	r1, [r7, #24]
 800c8fa:	0148      	lsls	r0, r1, #5
 800c8fc:	69f9      	ldr	r1, [r7, #28]
 800c8fe:	4401      	add	r1, r0
 800c900:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c904:	4313      	orrs	r3, r2
 800c906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d14b      	bne.n	800c9a6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	69db      	ldr	r3, [r3, #28]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d009      	beq.n	800c92a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c922:	461a      	mov	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	69db      	ldr	r3, [r3, #28]
 800c928:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	791b      	ldrb	r3, [r3, #4]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d128      	bne.n	800c984 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d110      	bne.n	800c964 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	0151      	lsls	r1, r2, #5
 800c954:	69fa      	ldr	r2, [r7, #28]
 800c956:	440a      	add	r2, r1
 800c958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c95c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	e00f      	b.n	800c984 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	0151      	lsls	r1, r2, #5
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	440a      	add	r2, r1
 800c97a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c97e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c982:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	0151      	lsls	r1, r2, #5
 800c996:	69fa      	ldr	r2, [r7, #28]
 800c998:	440a      	add	r2, r1
 800c99a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c99e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	e169      	b.n	800cc7a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	69ba      	ldr	r2, [r7, #24]
 800c9b6:	0151      	lsls	r1, r2, #5
 800c9b8:	69fa      	ldr	r2, [r7, #28]
 800c9ba:	440a      	add	r2, r1
 800c9bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c9c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c9c4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d015      	beq.n	800c9fa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 8151 	beq.w	800cc7a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ee:	69f9      	ldr	r1, [r7, #28]
 800c9f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	634b      	str	r3, [r1, #52]	@ 0x34
 800c9f8:	e13f      	b.n	800cc7a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d116      	bne.n	800ca38 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	0151      	lsls	r1, r2, #5
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	440a      	add	r2, r1
 800ca20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	e015      	b.n	800ca58 <USB_EPStartXfer+0x310>
 800ca2c:	e007ffff 	.word	0xe007ffff
 800ca30:	fff80000 	.word	0xfff80000
 800ca34:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	0151      	lsls	r1, r2, #5
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	440a      	add	r2, r1
 800ca4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca56:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	68d9      	ldr	r1, [r3, #12]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	b298      	uxth	r0, r3
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f000 f9b9 	bl	800cde4 <USB_WritePacket>
 800ca72:	e102      	b.n	800cc7a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca80:	691a      	ldr	r2, [r3, #16]
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	0159      	lsls	r1, r3, #5
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	440b      	add	r3, r1
 800ca8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4b7c      	ldr	r3, [pc, #496]	@ (800cc84 <USB_EPStartXfer+0x53c>)
 800ca92:	4013      	ands	r3, r2
 800ca94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	015a      	lsls	r2, r3, #5
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caa2:	691a      	ldr	r2, [r3, #16]
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	0159      	lsls	r1, r3, #5
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	440b      	add	r3, r1
 800caac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab0:	4619      	mov	r1, r3
 800cab2:	4b75      	ldr	r3, [pc, #468]	@ (800cc88 <USB_EPStartXfer+0x540>)
 800cab4:	4013      	ands	r3, r2
 800cab6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d12f      	bne.n	800cb1e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	689a      	ldr	r2, [r3, #8]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae2:	691a      	ldr	r2, [r3, #16]
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caec:	69b9      	ldr	r1, [r7, #24]
 800caee:	0148      	lsls	r0, r1, #5
 800caf0:	69f9      	ldr	r1, [r7, #28]
 800caf2:	4401      	add	r1, r0
 800caf4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800caf8:	4313      	orrs	r3, r2
 800cafa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	69ba      	ldr	r2, [r7, #24]
 800cb0c:	0151      	lsls	r1, r2, #5
 800cb0e:	69fa      	ldr	r2, [r7, #28]
 800cb10:	440a      	add	r2, r1
 800cb12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb1a:	6113      	str	r3, [r2, #16]
 800cb1c:	e05f      	b.n	800cbde <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d123      	bne.n	800cb6e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb32:	691a      	ldr	r2, [r3, #16]
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb3c:	69b9      	ldr	r1, [r7, #24]
 800cb3e:	0148      	lsls	r0, r1, #5
 800cb40:	69f9      	ldr	r1, [r7, #28]
 800cb42:	4401      	add	r1, r0
 800cb44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	0151      	lsls	r1, r2, #5
 800cb5e:	69fa      	ldr	r2, [r7, #28]
 800cb60:	440a      	add	r2, r1
 800cb62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb6a:	6113      	str	r3, [r2, #16]
 800cb6c:	e037      	b.n	800cbde <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	691a      	ldr	r2, [r3, #16]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	4413      	add	r3, r2
 800cb78:	1e5a      	subs	r2, r3, #1
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb82:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	8afa      	ldrh	r2, [r7, #22]
 800cb8a:	fb03 f202 	mul.w	r2, r3, r2
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	8afb      	ldrh	r3, [r7, #22]
 800cba2:	04d9      	lsls	r1, r3, #19
 800cba4:	4b39      	ldr	r3, [pc, #228]	@ (800cc8c <USB_EPStartXfer+0x544>)
 800cba6:	400b      	ands	r3, r1
 800cba8:	69b9      	ldr	r1, [r7, #24]
 800cbaa:	0148      	lsls	r0, r1, #5
 800cbac:	69f9      	ldr	r1, [r7, #28]
 800cbae:	4401      	add	r1, r0
 800cbb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	015a      	lsls	r2, r3, #5
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbc4:	691a      	ldr	r2, [r3, #16]
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbce:	69b9      	ldr	r1, [r7, #24]
 800cbd0:	0148      	lsls	r0, r1, #5
 800cbd2:	69f9      	ldr	r1, [r7, #28]
 800cbd4:	4401      	add	r1, r0
 800cbd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d10d      	bne.n	800cc00 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d009      	beq.n	800cc00 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	68d9      	ldr	r1, [r3, #12]
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbfc:	460a      	mov	r2, r1
 800cbfe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	791b      	ldrb	r3, [r3, #4]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d128      	bne.n	800cc5a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d110      	bne.n	800cc3a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	0151      	lsls	r1, r2, #5
 800cc2a:	69fa      	ldr	r2, [r7, #28]
 800cc2c:	440a      	add	r2, r1
 800cc2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	e00f      	b.n	800cc5a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	015a      	lsls	r2, r3, #5
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	4413      	add	r3, r2
 800cc42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	0151      	lsls	r1, r2, #5
 800cc4c:	69fa      	ldr	r2, [r7, #28]
 800cc4e:	440a      	add	r2, r1
 800cc50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cc58:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	015a      	lsls	r2, r3, #5
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	4413      	add	r3, r2
 800cc62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	0151      	lsls	r1, r2, #5
 800cc6c:	69fa      	ldr	r2, [r7, #28]
 800cc6e:	440a      	add	r2, r1
 800cc70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cc78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	fff80000 	.word	0xfff80000
 800cc88:	e007ffff 	.word	0xe007ffff
 800cc8c:	1ff80000 	.word	0x1ff80000

0800cc90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d14a      	bne.n	800cd44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccc6:	f040 8086 	bne.w	800cdd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	7812      	ldrb	r2, [r2, #0]
 800ccde:	0151      	lsls	r1, r2, #5
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	440a      	add	r2, r1
 800cce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ccec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	7812      	ldrb	r2, [r2, #0]
 800cd02:	0151      	lsls	r1, r2, #5
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	440a      	add	r2, r1
 800cd08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d902      	bls.n	800cd28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	75fb      	strb	r3, [r7, #23]
          break;
 800cd26:	e056      	b.n	800cdd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd40:	d0e7      	beq.n	800cd12 <USB_EPStopXfer+0x82>
 800cd42:	e048      	b.n	800cdd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd5c:	d13b      	bne.n	800cdd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	015a      	lsls	r2, r3, #5
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	7812      	ldrb	r2, [r2, #0]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cd80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	7812      	ldrb	r2, [r2, #0]
 800cd96:	0151      	lsls	r1, r2, #5
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	440a      	add	r2, r1
 800cd9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cda0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cda4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d902      	bls.n	800cdbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	75fb      	strb	r3, [r7, #23]
          break;
 800cdba:	e00c      	b.n	800cdd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdd4:	d0e7      	beq.n	800cda6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	371c      	adds	r7, #28
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b089      	sub	sp, #36	@ 0x24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4611      	mov	r1, r2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	71fb      	strb	r3, [r7, #7]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ce02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d123      	bne.n	800ce52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ce0a:	88bb      	ldrh	r3, [r7, #4]
 800ce0c:	3303      	adds	r3, #3
 800ce0e:	089b      	lsrs	r3, r3, #2
 800ce10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ce12:	2300      	movs	r3, #0
 800ce14:	61bb      	str	r3, [r7, #24]
 800ce16:	e018      	b.n	800ce4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	031a      	lsls	r2, r3, #12
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce24:	461a      	mov	r2, r3
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	3301      	adds	r3, #1
 800ce36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	3301      	adds	r3, #1
 800ce42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	3301      	adds	r3, #1
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d3e2      	bcc.n	800ce18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3724      	adds	r7, #36	@ 0x24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b08b      	sub	sp, #44	@ 0x2c
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ce76:	88fb      	ldrh	r3, [r7, #6]
 800ce78:	089b      	lsrs	r3, r3, #2
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ce7e:	88fb      	ldrh	r3, [r7, #6]
 800ce80:	f003 0303 	and.w	r3, r3, #3
 800ce84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ce86:	2300      	movs	r3, #0
 800ce88:	623b      	str	r3, [r7, #32]
 800ce8a:	e014      	b.n	800ceb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	3301      	adds	r3, #1
 800cea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea6:	3301      	adds	r3, #1
 800cea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceac:	3301      	adds	r3, #1
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	623b      	str	r3, [r7, #32]
 800ceb6:	6a3a      	ldr	r2, [r7, #32]
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d3e6      	bcc.n	800ce8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cebe:	8bfb      	ldrh	r3, [r7, #30]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01e      	beq.n	800cf02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cece:	461a      	mov	r2, r3
 800ced0:	f107 0310 	add.w	r3, r7, #16
 800ced4:	6812      	ldr	r2, [r2, #0]
 800ced6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	fa22 f303 	lsr.w	r3, r2, r3
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee8:	701a      	strb	r2, [r3, #0]
      i++;
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	3301      	adds	r3, #1
 800ceee:	623b      	str	r3, [r7, #32]
      pDest++;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef2:	3301      	adds	r3, #1
 800cef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cef6:	8bfb      	ldrh	r3, [r7, #30]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cefc:	8bfb      	ldrh	r3, [r7, #30]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1ea      	bne.n	800ced8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	372c      	adds	r7, #44	@ 0x2c
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	785b      	ldrb	r3, [r3, #1]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d12c      	bne.n	800cf86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	015a      	lsls	r2, r3, #5
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	4413      	add	r3, r2
 800cf34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	db12      	blt.n	800cf64 <USB_EPSetStall+0x54>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00f      	beq.n	800cf64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	015a      	lsls	r2, r3, #5
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	0151      	lsls	r1, r2, #5
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	440a      	add	r2, r1
 800cf5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cf62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	015a      	lsls	r2, r3, #5
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	0151      	lsls	r1, r2, #5
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	440a      	add	r2, r1
 800cf7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	e02b      	b.n	800cfde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	db12      	blt.n	800cfbe <USB_EPSetStall+0xae>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00f      	beq.n	800cfbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	0151      	lsls	r1, r2, #5
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cfbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cfd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cfdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d128      	bne.n	800d05a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	0151      	lsls	r1, r2, #5
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	440a      	add	r2, r1
 800d01e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d026:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	791b      	ldrb	r3, [r3, #4]
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d003      	beq.n	800d038 <USB_EPClearStall+0x4c>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	791b      	ldrb	r3, [r3, #4]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d138      	bne.n	800d0aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	015a      	lsls	r2, r3, #5
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	0151      	lsls	r1, r2, #5
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	440a      	add	r2, r1
 800d04e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	e027      	b.n	800d0aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	015a      	lsls	r2, r3, #5
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	0151      	lsls	r1, r2, #5
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	440a      	add	r2, r1
 800d070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d078:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	791b      	ldrb	r3, [r3, #4]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d003      	beq.n	800d08a <USB_EPClearStall+0x9e>
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	791b      	ldrb	r3, [r3, #4]
 800d086:	2b02      	cmp	r3, #2
 800d088:	d10f      	bne.n	800d0aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	015a      	lsls	r2, r3, #5
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4413      	add	r3, r2
 800d092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	0151      	lsls	r1, r2, #5
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	440a      	add	r2, r1
 800d0a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d0d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d0da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d0ec:	68f9      	ldr	r1, [r7, #12]
 800d0ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d11e:	f023 0303 	bic.w	r3, r3, #3
 800d122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d132:	f023 0302 	bic.w	r3, r3, #2
 800d136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3714      	adds	r7, #20
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d146:	b480      	push	{r7}
 800d148:	b085      	sub	sp, #20
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d160:	f023 0303 	bic.w	r3, r3, #3
 800d164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d174:	f043 0302 	orr.w	r3, r3, #2
 800d178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	4013      	ands	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	0c1b      	lsrs	r3, r3, #16
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	4013      	ands	r3, r2
 800d204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	b29b      	uxth	r3, r3
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d216:	b480      	push	{r7}
 800d218:	b085      	sub	sp, #20
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	460b      	mov	r3, r1
 800d220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d226:	78fb      	ldrb	r3, [r7, #3]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	4013      	ands	r3, r2
 800d242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d244:	68bb      	ldr	r3, [r7, #8]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d252:	b480      	push	{r7}
 800d254:	b087      	sub	sp, #28
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d274:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	f003 030f 	and.w	r3, r3, #15
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	fa22 f303 	lsr.w	r3, r2, r3
 800d282:	01db      	lsls	r3, r3, #7
 800d284:	b2db      	uxtb	r3, r3
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	4313      	orrs	r3, r2
 800d28a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d28c:	78fb      	ldrb	r3, [r7, #3]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	4013      	ands	r3, r2
 800d29e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d2a0:	68bb      	ldr	r3, [r7, #8]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	371c      	adds	r7, #28
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	f003 0301 	and.w	r3, r3, #1
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
	...

0800d2cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4b09      	ldr	r3, [pc, #36]	@ (800d310 <USB_ActivateSetup+0x44>)
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	fffff800 	.word	0xfffff800

0800d314 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	460b      	mov	r3, r1
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	333c      	adds	r3, #60	@ 0x3c
 800d32a:	3304      	adds	r3, #4
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	4a26      	ldr	r2, [pc, #152]	@ (800d3cc <USB_EP0_OutStart+0xb8>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d90a      	bls.n	800d34e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d348:	d101      	bne.n	800d34e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e037      	b.n	800d3be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d354:	461a      	mov	r2, r3
 800d356:	2300      	movs	r3, #0
 800d358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d36c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d37c:	f043 0318 	orr.w	r3, r3, #24
 800d380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d390:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d394:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d396:	7afb      	ldrb	r3, [r7, #11]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d10f      	bne.n	800d3bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d3ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	4f54300a 	.word	0x4f54300a

0800d3d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3e8:	d901      	bls.n	800d3ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e022      	b.n	800d434 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	daf2      	bge.n	800d3dc <USB_CoreReset+0xc>

  count = 10U;
 800d3f6:	230a      	movs	r3, #10
 800d3f8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d3fa:	e002      	b.n	800d402 <USB_CoreReset+0x32>
  {
    count--;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1f9      	bne.n	800d3fc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	f043 0201 	orr.w	r2, r3, #1
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	3301      	adds	r3, #1
 800d418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d420:	d901      	bls.n	800d426 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d422:	2303      	movs	r3, #3
 800d424:	e006      	b.n	800d434 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d0f0      	beq.n	800d414 <USB_CoreReset+0x44>

  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d44c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d450:	f002 fd9a 	bl	800ff88 <malloc>
 800d454:	4603      	mov	r3, r0
 800d456:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d109      	bne.n	800d472 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	32b0      	adds	r2, #176	@ 0xb0
 800d468:	2100      	movs	r1, #0
 800d46a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d46e:	2302      	movs	r3, #2
 800d470:	e0d4      	b.n	800d61c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d472:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d476:	2100      	movs	r1, #0
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f003 fbc0 	bl	8010bfe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	32b0      	adds	r2, #176	@ 0xb0
 800d488:	68f9      	ldr	r1, [r7, #12]
 800d48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	32b0      	adds	r2, #176	@ 0xb0
 800d498:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7c1b      	ldrb	r3, [r3, #16]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d138      	bne.n	800d51c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d4aa:	4b5e      	ldr	r3, [pc, #376]	@ (800d624 <USBD_CDC_Init+0x1e4>)
 800d4ac:	7819      	ldrb	r1, [r3, #0]
 800d4ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f002 fbc4 	bl	800fc42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d4ba:	4b5a      	ldr	r3, [pc, #360]	@ (800d624 <USBD_CDC_Init+0x1e4>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 020f 	and.w	r2, r3, #15
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	4413      	add	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	440b      	add	r3, r1
 800d4ce:	3323      	adds	r3, #35	@ 0x23
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d4d4:	4b54      	ldr	r3, [pc, #336]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d4d6:	7819      	ldrb	r1, [r3, #0]
 800d4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4dc:	2202      	movs	r2, #2
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f002 fbaf 	bl	800fc42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d4e4:	4b50      	ldr	r3, [pc, #320]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 020f 	and.w	r2, r3, #15
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	440b      	add	r3, r1
 800d4f8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d500:	4b4a      	ldr	r3, [pc, #296]	@ (800d62c <USBD_CDC_Init+0x1ec>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 020f 	and.w	r2, r3, #15
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	4613      	mov	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	440b      	add	r3, r1
 800d514:	331c      	adds	r3, #28
 800d516:	2210      	movs	r2, #16
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	e035      	b.n	800d588 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d51c:	4b41      	ldr	r3, [pc, #260]	@ (800d624 <USBD_CDC_Init+0x1e4>)
 800d51e:	7819      	ldrb	r1, [r3, #0]
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	2202      	movs	r2, #2
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f002 fb8c 	bl	800fc42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d52a:	4b3e      	ldr	r3, [pc, #248]	@ (800d624 <USBD_CDC_Init+0x1e4>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	f003 020f 	and.w	r2, r3, #15
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	3323      	adds	r3, #35	@ 0x23
 800d540:	2201      	movs	r2, #1
 800d542:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d544:	4b38      	ldr	r3, [pc, #224]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d546:	7819      	ldrb	r1, [r3, #0]
 800d548:	2340      	movs	r3, #64	@ 0x40
 800d54a:	2202      	movs	r2, #2
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f002 fb78 	bl	800fc42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d552:	4b35      	ldr	r3, [pc, #212]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	f003 020f 	and.w	r2, r3, #15
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	4613      	mov	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	440b      	add	r3, r1
 800d566:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d56a:	2201      	movs	r2, #1
 800d56c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d56e:	4b2f      	ldr	r3, [pc, #188]	@ (800d62c <USBD_CDC_Init+0x1ec>)
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	f003 020f 	and.w	r2, r3, #15
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	440b      	add	r3, r1
 800d582:	331c      	adds	r3, #28
 800d584:	2210      	movs	r2, #16
 800d586:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d588:	4b28      	ldr	r3, [pc, #160]	@ (800d62c <USBD_CDC_Init+0x1ec>)
 800d58a:	7819      	ldrb	r1, [r3, #0]
 800d58c:	2308      	movs	r3, #8
 800d58e:	2203      	movs	r2, #3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f002 fb56 	bl	800fc42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d596:	4b25      	ldr	r3, [pc, #148]	@ (800d62c <USBD_CDC_Init+0x1ec>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 020f 	and.w	r2, r3, #15
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	440b      	add	r3, r1
 800d5aa:	3323      	adds	r3, #35	@ 0x23
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	33b0      	adds	r3, #176	@ 0xb0
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d101      	bne.n	800d5ea <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	e018      	b.n	800d61c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7c1b      	ldrb	r3, [r3, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10a      	bne.n	800d608 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d5f4:	7819      	ldrb	r1, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f002 fc0d 	bl	800fe20 <USBD_LL_PrepareReceive>
 800d606:	e008      	b.n	800d61a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d608:	4b07      	ldr	r3, [pc, #28]	@ (800d628 <USBD_CDC_Init+0x1e8>)
 800d60a:	7819      	ldrb	r1, [r3, #0]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d612:	2340      	movs	r3, #64	@ 0x40
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f002 fc03 	bl	800fe20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000093 	.word	0x20000093
 800d628:	20000094 	.word	0x20000094
 800d62c:	20000095 	.word	0x20000095

0800d630 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d63c:	4b3a      	ldr	r3, [pc, #232]	@ (800d728 <USBD_CDC_DeInit+0xf8>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	4619      	mov	r1, r3
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f002 fb23 	bl	800fc8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d648:	4b37      	ldr	r3, [pc, #220]	@ (800d728 <USBD_CDC_DeInit+0xf8>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 020f 	and.w	r2, r3, #15
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	440b      	add	r3, r1
 800d65c:	3323      	adds	r3, #35	@ 0x23
 800d65e:	2200      	movs	r2, #0
 800d660:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d662:	4b32      	ldr	r3, [pc, #200]	@ (800d72c <USBD_CDC_DeInit+0xfc>)
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f002 fb10 	bl	800fc8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d66e:	4b2f      	ldr	r3, [pc, #188]	@ (800d72c <USBD_CDC_DeInit+0xfc>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 020f 	and.w	r2, r3, #15
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	440b      	add	r3, r1
 800d682:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d686:	2200      	movs	r2, #0
 800d688:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d68a:	4b29      	ldr	r3, [pc, #164]	@ (800d730 <USBD_CDC_DeInit+0x100>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f002 fafc 	bl	800fc8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d696:	4b26      	ldr	r3, [pc, #152]	@ (800d730 <USBD_CDC_DeInit+0x100>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	f003 020f 	and.w	r2, r3, #15
 800d69e:	6879      	ldr	r1, [r7, #4]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	440b      	add	r3, r1
 800d6aa:	3323      	adds	r3, #35	@ 0x23
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d6b0:	4b1f      	ldr	r3, [pc, #124]	@ (800d730 <USBD_CDC_DeInit+0x100>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 020f 	and.w	r2, r3, #15
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	440b      	add	r3, r1
 800d6c4:	331c      	adds	r3, #28
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	32b0      	adds	r2, #176	@ 0xb0
 800d6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01f      	beq.n	800d71c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	33b0      	adds	r3, #176	@ 0xb0
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	32b0      	adds	r2, #176	@ 0xb0
 800d6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f002 fc4a 	bl	800ff98 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	32b0      	adds	r2, #176	@ 0xb0
 800d70e:	2100      	movs	r1, #0
 800d710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20000093 	.word	0x20000093
 800d72c:	20000094 	.word	0x20000094
 800d730:	20000095 	.word	0x20000095

0800d734 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	32b0      	adds	r2, #176	@ 0xb0
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d760:	2303      	movs	r3, #3
 800d762:	e0bf      	b.n	800d8e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d050      	beq.n	800d812 <USBD_CDC_Setup+0xde>
 800d770:	2b20      	cmp	r3, #32
 800d772:	f040 80af 	bne.w	800d8d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	88db      	ldrh	r3, [r3, #6]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d03a      	beq.n	800d7f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	b25b      	sxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	da1b      	bge.n	800d7c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	33b0      	adds	r3, #176	@ 0xb0
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d79e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	88d2      	ldrh	r2, [r2, #6]
 800d7a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	88db      	ldrh	r3, [r3, #6]
 800d7aa:	2b07      	cmp	r3, #7
 800d7ac:	bf28      	it	cs
 800d7ae:	2307      	movcs	r3, #7
 800d7b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	89fa      	ldrh	r2, [r7, #14]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 fdd3 	bl	800f364 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d7be:	e090      	b.n	800d8e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	785a      	ldrb	r2, [r3, #1]
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	88db      	ldrh	r3, [r3, #6]
 800d7ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800d7d0:	d803      	bhi.n	800d7da <USBD_CDC_Setup+0xa6>
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	88db      	ldrh	r3, [r3, #6]
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	e000      	b.n	800d7dc <USBD_CDC_Setup+0xa8>
 800d7da:	2240      	movs	r2, #64	@ 0x40
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d7e2:	6939      	ldr	r1, [r7, #16]
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f001 fde8 	bl	800f3c2 <USBD_CtlPrepareRx>
      break;
 800d7f2:	e076      	b.n	800d8e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	33b0      	adds	r3, #176	@ 0xb0
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4413      	add	r3, r2
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	7850      	ldrb	r0, [r2, #1]
 800d80a:	2200      	movs	r2, #0
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	4798      	blx	r3
      break;
 800d810:	e067      	b.n	800d8e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	785b      	ldrb	r3, [r3, #1]
 800d816:	2b0b      	cmp	r3, #11
 800d818:	d851      	bhi.n	800d8be <USBD_CDC_Setup+0x18a>
 800d81a:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <USBD_CDC_Setup+0xec>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d851 	.word	0x0800d851
 800d824:	0800d8cd 	.word	0x0800d8cd
 800d828:	0800d8bf 	.word	0x0800d8bf
 800d82c:	0800d8bf 	.word	0x0800d8bf
 800d830:	0800d8bf 	.word	0x0800d8bf
 800d834:	0800d8bf 	.word	0x0800d8bf
 800d838:	0800d8bf 	.word	0x0800d8bf
 800d83c:	0800d8bf 	.word	0x0800d8bf
 800d840:	0800d8bf 	.word	0x0800d8bf
 800d844:	0800d8bf 	.word	0x0800d8bf
 800d848:	0800d87b 	.word	0x0800d87b
 800d84c:	0800d8a5 	.word	0x0800d8a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d107      	bne.n	800d86c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d85c:	f107 030a 	add.w	r3, r7, #10
 800d860:	2202      	movs	r2, #2
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f001 fd7d 	bl	800f364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d86a:	e032      	b.n	800d8d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f001 fcfb 	bl	800f26a <USBD_CtlError>
            ret = USBD_FAIL;
 800d874:	2303      	movs	r3, #3
 800d876:	75fb      	strb	r3, [r7, #23]
          break;
 800d878:	e02b      	b.n	800d8d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b03      	cmp	r3, #3
 800d884:	d107      	bne.n	800d896 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d886:	f107 030d 	add.w	r3, r7, #13
 800d88a:	2201      	movs	r2, #1
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f001 fd68 	bl	800f364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d894:	e01d      	b.n	800d8d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f001 fce6 	bl	800f26a <USBD_CtlError>
            ret = USBD_FAIL;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d8a2:	e016      	b.n	800d8d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d00f      	beq.n	800d8d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f001 fcd9 	bl	800f26a <USBD_CtlError>
            ret = USBD_FAIL;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d8bc:	e008      	b.n	800d8d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f001 fcd2 	bl	800f26a <USBD_CtlError>
          ret = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d8ca:	e002      	b.n	800d8d2 <USBD_CDC_Setup+0x19e>
          break;
 800d8cc:	bf00      	nop
 800d8ce:	e008      	b.n	800d8e2 <USBD_CDC_Setup+0x1ae>
          break;
 800d8d0:	bf00      	nop
      }
      break;
 800d8d2:	e006      	b.n	800d8e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f001 fcc7 	bl	800f26a <USBD_CtlError>
      ret = USBD_FAIL;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	75fb      	strb	r3, [r7, #23]
      break;
 800d8e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	32b0      	adds	r2, #176	@ 0xb0
 800d90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d101      	bne.n	800d916 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d912:	2303      	movs	r3, #3
 800d914:	e065      	b.n	800d9e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	32b0      	adds	r2, #176	@ 0xb0
 800d920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d924:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d926:	78fb      	ldrb	r3, [r7, #3]
 800d928:	f003 020f 	and.w	r2, r3, #15
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	4613      	mov	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4413      	add	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	440b      	add	r3, r1
 800d938:	3314      	adds	r3, #20
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d02f      	beq.n	800d9a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	f003 020f 	and.w	r2, r3, #15
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	4613      	mov	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	440b      	add	r3, r1
 800d952:	3314      	adds	r3, #20
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	f003 010f 	and.w	r1, r3, #15
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	460b      	mov	r3, r1
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	440b      	add	r3, r1
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4403      	add	r3, r0
 800d968:	331c      	adds	r3, #28
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d970:	fb01 f303 	mul.w	r3, r1, r3
 800d974:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d976:	2b00      	cmp	r3, #0
 800d978:	d112      	bne.n	800d9a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d97a:	78fb      	ldrb	r3, [r7, #3]
 800d97c:	f003 020f 	and.w	r2, r3, #15
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	440b      	add	r3, r1
 800d98c:	3314      	adds	r3, #20
 800d98e:	2200      	movs	r2, #0
 800d990:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d992:	78f9      	ldrb	r1, [r7, #3]
 800d994:	2300      	movs	r3, #0
 800d996:	2200      	movs	r2, #0
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f002 fa20 	bl	800fdde <USBD_LL_Transmit>
 800d99e:	e01f      	b.n	800d9e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	33b0      	adds	r3, #176	@ 0xb0
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d010      	beq.n	800d9e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	33b0      	adds	r3, #176	@ 0xb0
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d9dc:	78fa      	ldrb	r2, [r7, #3]
 800d9de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b084      	sub	sp, #16
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	32b0      	adds	r2, #176	@ 0xb0
 800da00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	32b0      	adds	r2, #176	@ 0xb0
 800da10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d101      	bne.n	800da1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800da18:	2303      	movs	r3, #3
 800da1a:	e01a      	b.n	800da52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f002 fa1e 	bl	800fe62 <USBD_LL_GetRxDataSize>
 800da26:	4602      	mov	r2, r0
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	33b0      	adds	r3, #176	@ 0xb0
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800da4c:	4611      	mov	r1, r2
 800da4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b084      	sub	sp, #16
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	32b0      	adds	r2, #176	@ 0xb0
 800da6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da78:	2303      	movs	r3, #3
 800da7a:	e024      	b.n	800dac6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	33b0      	adds	r3, #176	@ 0xb0
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d019      	beq.n	800dac4 <USBD_CDC_EP0_RxReady+0x6a>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800da96:	2bff      	cmp	r3, #255	@ 0xff
 800da98:	d014      	beq.n	800dac4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	33b0      	adds	r3, #176	@ 0xb0
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4413      	add	r3, r2
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800dab2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800daba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	22ff      	movs	r2, #255	@ 0xff
 800dac0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
	...

0800dad0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dad8:	2182      	movs	r1, #130	@ 0x82
 800dada:	4818      	ldr	r0, [pc, #96]	@ (800db3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dadc:	f000 fd62 	bl	800e5a4 <USBD_GetEpDesc>
 800dae0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dae2:	2101      	movs	r1, #1
 800dae4:	4815      	ldr	r0, [pc, #84]	@ (800db3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dae6:	f000 fd5d 	bl	800e5a4 <USBD_GetEpDesc>
 800daea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800daec:	2181      	movs	r1, #129	@ 0x81
 800daee:	4813      	ldr	r0, [pc, #76]	@ (800db3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800daf0:	f000 fd58 	bl	800e5a4 <USBD_GetEpDesc>
 800daf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2210      	movs	r2, #16
 800db00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d006      	beq.n	800db16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db10:	711a      	strb	r2, [r3, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d006      	beq.n	800db2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db24:	711a      	strb	r2, [r3, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2243      	movs	r2, #67	@ 0x43
 800db2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db30:	4b02      	ldr	r3, [pc, #8]	@ (800db3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20000050 	.word	0x20000050

0800db40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db48:	2182      	movs	r1, #130	@ 0x82
 800db4a:	4818      	ldr	r0, [pc, #96]	@ (800dbac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db4c:	f000 fd2a 	bl	800e5a4 <USBD_GetEpDesc>
 800db50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db52:	2101      	movs	r1, #1
 800db54:	4815      	ldr	r0, [pc, #84]	@ (800dbac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db56:	f000 fd25 	bl	800e5a4 <USBD_GetEpDesc>
 800db5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db5c:	2181      	movs	r1, #129	@ 0x81
 800db5e:	4813      	ldr	r0, [pc, #76]	@ (800dbac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db60:	f000 fd20 	bl	800e5a4 <USBD_GetEpDesc>
 800db64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2210      	movs	r2, #16
 800db70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2200      	movs	r2, #0
 800db7c:	711a      	strb	r2, [r3, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	f042 0202 	orr.w	r2, r2, #2
 800db84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d006      	beq.n	800db9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2200      	movs	r2, #0
 800db90:	711a      	strb	r2, [r3, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f042 0202 	orr.w	r2, r2, #2
 800db98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2243      	movs	r2, #67	@ 0x43
 800db9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dba0:	4b02      	ldr	r3, [pc, #8]	@ (800dbac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	20000050 	.word	0x20000050

0800dbb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dbb8:	2182      	movs	r1, #130	@ 0x82
 800dbba:	4818      	ldr	r0, [pc, #96]	@ (800dc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbbc:	f000 fcf2 	bl	800e5a4 <USBD_GetEpDesc>
 800dbc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	4815      	ldr	r0, [pc, #84]	@ (800dc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbc6:	f000 fced 	bl	800e5a4 <USBD_GetEpDesc>
 800dbca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dbcc:	2181      	movs	r1, #129	@ 0x81
 800dbce:	4813      	ldr	r0, [pc, #76]	@ (800dc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbd0:	f000 fce8 	bl	800e5a4 <USBD_GetEpDesc>
 800dbd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2210      	movs	r2, #16
 800dbe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d006      	beq.n	800dbf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbf0:	711a      	strb	r2, [r3, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d006      	beq.n	800dc0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc04:	711a      	strb	r2, [r3, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2243      	movs	r2, #67	@ 0x43
 800dc0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc10:	4b02      	ldr	r3, [pc, #8]	@ (800dc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20000050 	.word	0x20000050

0800dc20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	220a      	movs	r2, #10
 800dc2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc2e:	4b03      	ldr	r3, [pc, #12]	@ (800dc3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	2000000c 	.word	0x2000000c

0800dc40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d101      	bne.n	800dc54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc50:	2303      	movs	r3, #3
 800dc52:	e009      	b.n	800dc68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	33b0      	adds	r3, #176	@ 0xb0
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	32b0      	adds	r2, #176	@ 0xb0
 800dc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dc96:	2303      	movs	r3, #3
 800dc98:	e008      	b.n	800dcac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	371c      	adds	r7, #28
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	32b0      	adds	r2, #176	@ 0xb0
 800dccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e004      	b.n	800dce6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
	...

0800dcf4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	32b0      	adds	r2, #176	@ 0xb0
 800dd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dd16:	2303      	movs	r3, #3
 800dd18:	e025      	b.n	800dd66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d11f      	bne.n	800dd64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dd2c:	4b10      	ldr	r3, [pc, #64]	@ (800dd70 <USBD_CDC_TransmitPacket+0x7c>)
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 020f 	and.w	r2, r3, #15
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4403      	add	r3, r0
 800dd46:	3314      	adds	r3, #20
 800dd48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dd4a:	4b09      	ldr	r3, [pc, #36]	@ (800dd70 <USBD_CDC_TransmitPacket+0x7c>)
 800dd4c:	7819      	ldrb	r1, [r3, #0]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f002 f83f 	bl	800fdde <USBD_LL_Transmit>

    ret = USBD_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000093 	.word	0x20000093

0800dd74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	32b0      	adds	r2, #176	@ 0xb0
 800dd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	32b0      	adds	r2, #176	@ 0xb0
 800dd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	e018      	b.n	800ddd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	7c1b      	ldrb	r3, [r3, #16]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10a      	bne.n	800ddc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ddaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dddc <USBD_CDC_ReceivePacket+0x68>)
 800ddac:	7819      	ldrb	r1, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ddb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f002 f831 	bl	800fe20 <USBD_LL_PrepareReceive>
 800ddbe:	e008      	b.n	800ddd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ddc0:	4b06      	ldr	r3, [pc, #24]	@ (800dddc <USBD_CDC_ReceivePacket+0x68>)
 800ddc2:	7819      	ldrb	r1, [r3, #0]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ddca:	2340      	movs	r3, #64	@ 0x40
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f002 f827 	bl	800fe20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	20000094 	.word	0x20000094

0800dde0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	4613      	mov	r3, r2
 800ddec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d101      	bne.n	800ddf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e01f      	b.n	800de38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d003      	beq.n	800de1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	79fa      	ldrb	r2, [r7, #7]
 800de2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f001 fe9d 	bl	800fb6c <USBD_LL_Init>
 800de32:	4603      	mov	r3, r0
 800de34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800de36:	7dfb      	ldrb	r3, [r7, #23]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3718      	adds	r7, #24
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de4a:	2300      	movs	r3, #0
 800de4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800de54:	2303      	movs	r3, #3
 800de56:	e025      	b.n	800dea4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	32ae      	adds	r2, #174	@ 0xae
 800de6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00f      	beq.n	800de94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	32ae      	adds	r2, #174	@ 0xae
 800de7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de84:	f107 020e 	add.w	r2, r7, #14
 800de88:	4610      	mov	r0, r2
 800de8a:	4798      	blx	r3
 800de8c:	4602      	mov	r2, r0
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f001 fea9 	bl	800fc0c <USBD_LL_Start>
 800deba:	4603      	mov	r3, r0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800decc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dece:	4618      	mov	r0, r3
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800def0:	2b00      	cmp	r3, #0
 800def2:	d009      	beq.n	800df08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	78fa      	ldrb	r2, [r7, #3]
 800defe:	4611      	mov	r1, r2
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	4798      	blx	r3
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df08:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	78fa      	ldrb	r2, [r7, #3]
 800df2c:	4611      	mov	r1, r2
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	4798      	blx	r3
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800df38:	2303      	movs	r3, #3
 800df3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	4618      	mov	r0, r3
 800df5a:	f001 f94c 	bl	800f1f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800df6c:	461a      	mov	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800df7a:	f003 031f 	and.w	r3, r3, #31
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d01a      	beq.n	800dfb8 <USBD_LL_SetupStage+0x72>
 800df82:	2b02      	cmp	r3, #2
 800df84:	d822      	bhi.n	800dfcc <USBD_LL_SetupStage+0x86>
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <USBD_LL_SetupStage+0x4a>
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d00a      	beq.n	800dfa4 <USBD_LL_SetupStage+0x5e>
 800df8e:	e01d      	b.n	800dfcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fb77 	bl	800e68c <USBD_StdDevReq>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa2:	e020      	b.n	800dfe6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fbdf 	bl	800e770 <USBD_StdItfReq>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73fb      	strb	r3, [r7, #15]
      break;
 800dfb6:	e016      	b.n	800dfe6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fc41 	bl	800e848 <USBD_StdEPReq>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	73fb      	strb	r3, [r7, #15]
      break;
 800dfca:	e00c      	b.n	800dfe6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dfd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	4619      	mov	r1, r3
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f001 fe76 	bl	800fccc <USBD_LL_StallEP>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73fb      	strb	r3, [r7, #15]
      break;
 800dfe4:	bf00      	nop
  }

  return ret;
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	460b      	mov	r3, r1
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e002:	7afb      	ldrb	r3, [r7, #11]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d177      	bne.n	800e0f8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e00e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e016:	2b03      	cmp	r3, #3
 800e018:	f040 80a1 	bne.w	800e15e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	8992      	ldrh	r2, [r2, #12]
 800e024:	4293      	cmp	r3, r2
 800e026:	d91c      	bls.n	800e062 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	8992      	ldrh	r2, [r2, #12]
 800e030:	1a9a      	subs	r2, r3, r2
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	691b      	ldr	r3, [r3, #16]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	8992      	ldrh	r2, [r2, #12]
 800e03e:	441a      	add	r2, r3
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	6919      	ldr	r1, [r3, #16]
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	899b      	ldrh	r3, [r3, #12]
 800e04c:	461a      	mov	r2, r3
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	4293      	cmp	r3, r2
 800e054:	bf38      	it	cc
 800e056:	4613      	movcc	r3, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f001 f9d2 	bl	800f404 <USBD_CtlContinueRx>
 800e060:	e07d      	b.n	800e15e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e068:	f003 031f 	and.w	r3, r3, #31
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d014      	beq.n	800e09a <USBD_LL_DataOutStage+0xaa>
 800e070:	2b02      	cmp	r3, #2
 800e072:	d81d      	bhi.n	800e0b0 <USBD_LL_DataOutStage+0xc0>
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <USBD_LL_DataOutStage+0x8e>
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d003      	beq.n	800e084 <USBD_LL_DataOutStage+0x94>
 800e07c:	e018      	b.n	800e0b0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e07e:	2300      	movs	r3, #0
 800e080:	75bb      	strb	r3, [r7, #22]
            break;
 800e082:	e018      	b.n	800e0b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	4619      	mov	r1, r3
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f000 fa6e 	bl	800e570 <USBD_CoreFindIF>
 800e094:	4603      	mov	r3, r0
 800e096:	75bb      	strb	r3, [r7, #22]
            break;
 800e098:	e00d      	b.n	800e0b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f000 fa70 	bl	800e58a <USBD_CoreFindEP>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	75bb      	strb	r3, [r7, #22]
            break;
 800e0ae:	e002      	b.n	800e0b6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	75bb      	strb	r3, [r7, #22]
            break;
 800e0b4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e0b6:	7dbb      	ldrb	r3, [r7, #22]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d119      	bne.n	800e0f0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d113      	bne.n	800e0f0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e0c8:	7dba      	ldrb	r2, [r7, #22]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	32ae      	adds	r2, #174	@ 0xae
 800e0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00b      	beq.n	800e0f0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800e0d8:	7dba      	ldrb	r2, [r7, #22]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e0e0:	7dba      	ldrb	r2, [r7, #22]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	32ae      	adds	r2, #174	@ 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e0f0:	68f8      	ldr	r0, [r7, #12]
 800e0f2:	f001 f998 	bl	800f426 <USBD_CtlSendStatus>
 800e0f6:	e032      	b.n	800e15e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	4619      	mov	r1, r3
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f000 fa41 	bl	800e58a <USBD_CoreFindEP>
 800e108:	4603      	mov	r3, r0
 800e10a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e10c:	7dbb      	ldrb	r3, [r7, #22]
 800e10e:	2bff      	cmp	r3, #255	@ 0xff
 800e110:	d025      	beq.n	800e15e <USBD_LL_DataOutStage+0x16e>
 800e112:	7dbb      	ldrb	r3, [r7, #22]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d122      	bne.n	800e15e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b03      	cmp	r3, #3
 800e122:	d117      	bne.n	800e154 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e124:	7dba      	ldrb	r2, [r7, #22]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	32ae      	adds	r2, #174	@ 0xae
 800e12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00f      	beq.n	800e154 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800e134:	7dba      	ldrb	r2, [r7, #22]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e13c:	7dba      	ldrb	r2, [r7, #22]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	32ae      	adds	r2, #174	@ 0xae
 800e142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	7afa      	ldrb	r2, [r7, #11]
 800e14a:	4611      	mov	r1, r2
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	4798      	blx	r3
 800e150:	4603      	mov	r3, r0
 800e152:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e154:	7dfb      	ldrb	r3, [r7, #23]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	e000      	b.n	800e160 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	460b      	mov	r3, r1
 800e172:	607a      	str	r2, [r7, #4]
 800e174:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d178      	bne.n	800e26e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	3314      	adds	r3, #20
 800e180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d163      	bne.n	800e254 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	8992      	ldrh	r2, [r2, #12]
 800e194:	4293      	cmp	r3, r2
 800e196:	d91c      	bls.n	800e1d2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	8992      	ldrh	r2, [r2, #12]
 800e1a0:	1a9a      	subs	r2, r3, r2
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	693a      	ldr	r2, [r7, #16]
 800e1ac:	8992      	ldrh	r2, [r2, #12]
 800e1ae:	441a      	add	r2, r3
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	6919      	ldr	r1, [r3, #16]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f001 f8ee 	bl	800f3a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f001 fe28 	bl	800fe20 <USBD_LL_PrepareReceive>
 800e1d0:	e040      	b.n	800e254 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	899b      	ldrh	r3, [r3, #12]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d11c      	bne.n	800e21a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d316      	bcc.n	800e21a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d20f      	bcs.n	800e21a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f001 f8ce 	bl	800f3a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e20c:	2300      	movs	r3, #0
 800e20e:	2200      	movs	r2, #0
 800e210:	2100      	movs	r1, #0
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f001 fe04 	bl	800fe20 <USBD_LL_PrepareReceive>
 800e218:	e01c      	b.n	800e254 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b03      	cmp	r3, #3
 800e224:	d10f      	bne.n	800e246 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d009      	beq.n	800e246 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e246:	2180      	movs	r1, #128	@ 0x80
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f001 fd3f 	bl	800fccc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f001 f8fc 	bl	800f44c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d03a      	beq.n	800e2d4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff fe30 	bl	800dec4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e26c:	e032      	b.n	800e2d4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e26e:	7afb      	ldrb	r3, [r7, #11]
 800e270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e274:	b2db      	uxtb	r3, r3
 800e276:	4619      	mov	r1, r3
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f986 	bl	800e58a <USBD_CoreFindEP>
 800e27e:	4603      	mov	r3, r0
 800e280:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	2bff      	cmp	r3, #255	@ 0xff
 800e286:	d025      	beq.n	800e2d4 <USBD_LL_DataInStage+0x16c>
 800e288:	7dfb      	ldrb	r3, [r7, #23]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d122      	bne.n	800e2d4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b03      	cmp	r3, #3
 800e298:	d11c      	bne.n	800e2d4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e29a:	7dfa      	ldrb	r2, [r7, #23]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	32ae      	adds	r2, #174	@ 0xae
 800e2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d014      	beq.n	800e2d4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800e2aa:	7dfa      	ldrb	r2, [r7, #23]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e2b2:	7dfa      	ldrb	r2, [r7, #23]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	32ae      	adds	r2, #174	@ 0xae
 800e2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	7afa      	ldrb	r2, [r7, #11]
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	4798      	blx	r3
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e2ca:	7dbb      	ldrb	r3, [r7, #22]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800e2d0:	7dbb      	ldrb	r3, [r7, #22]
 800e2d2:	e000      	b.n	800e2d6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e316:	2b00      	cmp	r3, #0
 800e318:	d014      	beq.n	800e344 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00e      	beq.n	800e344 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6852      	ldr	r2, [r2, #4]
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	4611      	mov	r1, r2
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	4798      	blx	r3
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e340:	2303      	movs	r3, #3
 800e342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e344:	2340      	movs	r3, #64	@ 0x40
 800e346:	2200      	movs	r2, #0
 800e348:	2100      	movs	r1, #0
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f001 fc79 	bl	800fc42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2240      	movs	r2, #64	@ 0x40
 800e35c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e360:	2340      	movs	r3, #64	@ 0x40
 800e362:	2200      	movs	r2, #0
 800e364:	2180      	movs	r1, #128	@ 0x80
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f001 fc6b 	bl	800fc42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2240      	movs	r2, #64	@ 0x40
 800e378:	841a      	strh	r2, [r3, #32]

  return ret;
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b04      	cmp	r3, #4
 800e3b6:	d006      	beq.n	800e3c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2204      	movs	r2, #4
 800e3ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	d106      	bne.n	800e3fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d110      	bne.n	800e442 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00b      	beq.n	800e442 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e430:	69db      	ldr	r3, [r3, #28]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e43c:	69db      	ldr	r3, [r3, #28]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	460b      	mov	r3, r1
 800e456:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	32ae      	adds	r2, #174	@ 0xae
 800e462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e01c      	b.n	800e4a8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b03      	cmp	r3, #3
 800e478:	d115      	bne.n	800e4a6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	32ae      	adds	r2, #174	@ 0xae
 800e484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00b      	beq.n	800e4a6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	32ae      	adds	r2, #174	@ 0xae
 800e498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	32ae      	adds	r2, #174	@ 0xae
 800e4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e01c      	b.n	800e50c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d115      	bne.n	800e50a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	32ae      	adds	r2, #174	@ 0xae
 800e4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00b      	beq.n	800e50a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	32ae      	adds	r2, #174	@ 0xae
 800e4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e502:	78fa      	ldrb	r2, [r7, #3]
 800e504:	4611      	mov	r1, r2
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	370c      	adds	r7, #12
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr

0800e52a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b084      	sub	sp, #16
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00e      	beq.n	800e566 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	6852      	ldr	r2, [r2, #4]
 800e554:	b2d2      	uxtb	r2, r2
 800e556:	4611      	mov	r1, r2
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e562:	2303      	movs	r3, #3
 800e564:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e566:	7bfb      	ldrb	r3, [r7, #15]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e57c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	460b      	mov	r3, r1
 800e594:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e596:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	885b      	ldrh	r3, [r3, #2]
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	7812      	ldrb	r2, [r2, #0]
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d91f      	bls.n	800e60a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e5d0:	e013      	b.n	800e5fa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e5d2:	f107 030a 	add.w	r3, r7, #10
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6978      	ldr	r0, [r7, #20]
 800e5da:	f000 f81b 	bl	800e614 <USBD_GetNextDesc>
 800e5de:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	785b      	ldrb	r3, [r3, #1]
 800e5e4:	2b05      	cmp	r3, #5
 800e5e6:	d108      	bne.n	800e5fa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	789b      	ldrb	r3, [r3, #2]
 800e5f0:	78fa      	ldrb	r2, [r7, #3]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d008      	beq.n	800e608 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	885b      	ldrh	r3, [r3, #2]
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	897b      	ldrh	r3, [r7, #10]
 800e602:	429a      	cmp	r2, r3
 800e604:	d8e5      	bhi.n	800e5d2 <USBD_GetEpDesc+0x2e>
 800e606:	e000      	b.n	800e60a <USBD_GetEpDesc+0x66>
          break;
 800e608:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e60a:	693b      	ldr	r3, [r7, #16]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	7812      	ldrb	r2, [r2, #0]
 800e62a:	4413      	add	r3, r2
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4413      	add	r3, r2
 800e63c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b087      	sub	sp, #28
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	3301      	adds	r3, #1
 800e662:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e66a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e66e:	021b      	lsls	r3, r3, #8
 800e670:	b21a      	sxth	r2, r3
 800e672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e676:	4313      	orrs	r3, r2
 800e678:	b21b      	sxth	r3, r3
 800e67a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e67c:	89fb      	ldrh	r3, [r7, #14]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	371c      	adds	r7, #28
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
	...

0800e68c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6a2:	2b40      	cmp	r3, #64	@ 0x40
 800e6a4:	d005      	beq.n	800e6b2 <USBD_StdDevReq+0x26>
 800e6a6:	2b40      	cmp	r3, #64	@ 0x40
 800e6a8:	d857      	bhi.n	800e75a <USBD_StdDevReq+0xce>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00f      	beq.n	800e6ce <USBD_StdDevReq+0x42>
 800e6ae:	2b20      	cmp	r3, #32
 800e6b0:	d153      	bne.n	800e75a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	32ae      	adds	r2, #174	@ 0xae
 800e6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	4798      	blx	r3
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e6cc:	e04a      	b.n	800e764 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	785b      	ldrb	r3, [r3, #1]
 800e6d2:	2b09      	cmp	r3, #9
 800e6d4:	d83b      	bhi.n	800e74e <USBD_StdDevReq+0xc2>
 800e6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6dc <USBD_StdDevReq+0x50>)
 800e6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6dc:	0800e731 	.word	0x0800e731
 800e6e0:	0800e745 	.word	0x0800e745
 800e6e4:	0800e74f 	.word	0x0800e74f
 800e6e8:	0800e73b 	.word	0x0800e73b
 800e6ec:	0800e74f 	.word	0x0800e74f
 800e6f0:	0800e70f 	.word	0x0800e70f
 800e6f4:	0800e705 	.word	0x0800e705
 800e6f8:	0800e74f 	.word	0x0800e74f
 800e6fc:	0800e727 	.word	0x0800e727
 800e700:	0800e719 	.word	0x0800e719
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fa3e 	bl	800eb88 <USBD_GetDescriptor>
          break;
 800e70c:	e024      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e70e:	6839      	ldr	r1, [r7, #0]
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 fbcd 	bl	800eeb0 <USBD_SetAddress>
          break;
 800e716:	e01f      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fc0c 	bl	800ef38 <USBD_SetConfig>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]
          break;
 800e724:	e018      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e726:	6839      	ldr	r1, [r7, #0]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fcaf 	bl	800f08c <USBD_GetConfig>
          break;
 800e72e:	e013      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fce0 	bl	800f0f8 <USBD_GetStatus>
          break;
 800e738:	e00e      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fd0f 	bl	800f160 <USBD_SetFeature>
          break;
 800e742:	e009      	b.n	800e758 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fd33 	bl	800f1b2 <USBD_ClrFeature>
          break;
 800e74c:	e004      	b.n	800e758 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 fd8a 	bl	800f26a <USBD_CtlError>
          break;
 800e756:	bf00      	nop
      }
      break;
 800e758:	e004      	b.n	800e764 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e75a:	6839      	ldr	r1, [r7, #0]
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fd84 	bl	800f26a <USBD_CtlError>
      break;
 800e762:	bf00      	nop
  }

  return ret;
 800e764:	7bfb      	ldrb	r3, [r7, #15]
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop

0800e770 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e77a:	2300      	movs	r3, #0
 800e77c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e786:	2b40      	cmp	r3, #64	@ 0x40
 800e788:	d005      	beq.n	800e796 <USBD_StdItfReq+0x26>
 800e78a:	2b40      	cmp	r3, #64	@ 0x40
 800e78c:	d852      	bhi.n	800e834 <USBD_StdItfReq+0xc4>
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <USBD_StdItfReq+0x26>
 800e792:	2b20      	cmp	r3, #32
 800e794:	d14e      	bne.n	800e834 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d840      	bhi.n	800e826 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	889b      	ldrh	r3, [r3, #4]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d836      	bhi.n	800e81c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	889b      	ldrh	r3, [r3, #4]
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff feda 	bl	800e570 <USBD_CoreFindIF>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
 800e7c2:	2bff      	cmp	r3, #255	@ 0xff
 800e7c4:	d01d      	beq.n	800e802 <USBD_StdItfReq+0x92>
 800e7c6:	7bbb      	ldrb	r3, [r7, #14]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d11a      	bne.n	800e802 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e7cc:	7bba      	ldrb	r2, [r7, #14]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	32ae      	adds	r2, #174	@ 0xae
 800e7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00f      	beq.n	800e7fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e7dc:	7bba      	ldrb	r2, [r7, #14]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e7e4:	7bba      	ldrb	r2, [r7, #14]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	32ae      	adds	r2, #174	@ 0xae
 800e7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	4798      	blx	r3
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e7fa:	e004      	b.n	800e806 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e800:	e001      	b.n	800e806 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e802:	2303      	movs	r3, #3
 800e804:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	88db      	ldrh	r3, [r3, #6]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d110      	bne.n	800e830 <USBD_StdItfReq+0xc0>
 800e80e:	7bfb      	ldrb	r3, [r7, #15]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10d      	bne.n	800e830 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fe06 	bl	800f426 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e81a:	e009      	b.n	800e830 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fd23 	bl	800f26a <USBD_CtlError>
          break;
 800e824:	e004      	b.n	800e830 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fd1e 	bl	800f26a <USBD_CtlError>
          break;
 800e82e:	e000      	b.n	800e832 <USBD_StdItfReq+0xc2>
          break;
 800e830:	bf00      	nop
      }
      break;
 800e832:	e004      	b.n	800e83e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e834:	6839      	ldr	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fd17 	bl	800f26a <USBD_CtlError>
      break;
 800e83c:	bf00      	nop
  }

  return ret;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	889b      	ldrh	r3, [r3, #4]
 800e85a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e864:	2b40      	cmp	r3, #64	@ 0x40
 800e866:	d007      	beq.n	800e878 <USBD_StdEPReq+0x30>
 800e868:	2b40      	cmp	r3, #64	@ 0x40
 800e86a:	f200 8181 	bhi.w	800eb70 <USBD_StdEPReq+0x328>
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d02a      	beq.n	800e8c8 <USBD_StdEPReq+0x80>
 800e872:	2b20      	cmp	r3, #32
 800e874:	f040 817c 	bne.w	800eb70 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e878:	7bbb      	ldrb	r3, [r7, #14]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7ff fe84 	bl	800e58a <USBD_CoreFindEP>
 800e882:	4603      	mov	r3, r0
 800e884:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e886:	7b7b      	ldrb	r3, [r7, #13]
 800e888:	2bff      	cmp	r3, #255	@ 0xff
 800e88a:	f000 8176 	beq.w	800eb7a <USBD_StdEPReq+0x332>
 800e88e:	7b7b      	ldrb	r3, [r7, #13]
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 8172 	bne.w	800eb7a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e896:	7b7a      	ldrb	r2, [r7, #13]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e89e:	7b7a      	ldrb	r2, [r7, #13]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	32ae      	adds	r2, #174	@ 0xae
 800e8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f000 8165 	beq.w	800eb7a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e8b0:	7b7a      	ldrb	r2, [r7, #13]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	32ae      	adds	r2, #174	@ 0xae
 800e8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	4798      	blx	r3
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e8c6:	e158      	b.n	800eb7a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d008      	beq.n	800e8e2 <USBD_StdEPReq+0x9a>
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	f300 8147 	bgt.w	800eb64 <USBD_StdEPReq+0x31c>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f000 809b 	beq.w	800ea12 <USBD_StdEPReq+0x1ca>
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d03c      	beq.n	800e95a <USBD_StdEPReq+0x112>
 800e8e0:	e140      	b.n	800eb64 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d002      	beq.n	800e8f4 <USBD_StdEPReq+0xac>
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d016      	beq.n	800e920 <USBD_StdEPReq+0xd8>
 800e8f2:	e02c      	b.n	800e94e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8f4:	7bbb      	ldrb	r3, [r7, #14]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00d      	beq.n	800e916 <USBD_StdEPReq+0xce>
 800e8fa:	7bbb      	ldrb	r3, [r7, #14]
 800e8fc:	2b80      	cmp	r3, #128	@ 0x80
 800e8fe:	d00a      	beq.n	800e916 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e900:	7bbb      	ldrb	r3, [r7, #14]
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f001 f9e1 	bl	800fccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e90a:	2180      	movs	r1, #128	@ 0x80
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f001 f9dd 	bl	800fccc <USBD_LL_StallEP>
 800e912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e914:	e020      	b.n	800e958 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fca6 	bl	800f26a <USBD_CtlError>
              break;
 800e91e:	e01b      	b.n	800e958 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	885b      	ldrh	r3, [r3, #2]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10e      	bne.n	800e946 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00b      	beq.n	800e946 <USBD_StdEPReq+0xfe>
 800e92e:	7bbb      	ldrb	r3, [r7, #14]
 800e930:	2b80      	cmp	r3, #128	@ 0x80
 800e932:	d008      	beq.n	800e946 <USBD_StdEPReq+0xfe>
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	88db      	ldrh	r3, [r3, #6]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d104      	bne.n	800e946 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e93c:	7bbb      	ldrb	r3, [r7, #14]
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f001 f9c3 	bl	800fccc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 fd6d 	bl	800f426 <USBD_CtlSendStatus>

              break;
 800e94c:	e004      	b.n	800e958 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fc8a 	bl	800f26a <USBD_CtlError>
              break;
 800e956:	bf00      	nop
          }
          break;
 800e958:	e109      	b.n	800eb6e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b02      	cmp	r3, #2
 800e964:	d002      	beq.n	800e96c <USBD_StdEPReq+0x124>
 800e966:	2b03      	cmp	r3, #3
 800e968:	d016      	beq.n	800e998 <USBD_StdEPReq+0x150>
 800e96a:	e04b      	b.n	800ea04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00d      	beq.n	800e98e <USBD_StdEPReq+0x146>
 800e972:	7bbb      	ldrb	r3, [r7, #14]
 800e974:	2b80      	cmp	r3, #128	@ 0x80
 800e976:	d00a      	beq.n	800e98e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e978:	7bbb      	ldrb	r3, [r7, #14]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 f9a5 	bl	800fccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e982:	2180      	movs	r1, #128	@ 0x80
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f001 f9a1 	bl	800fccc <USBD_LL_StallEP>
 800e98a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e98c:	e040      	b.n	800ea10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fc6a 	bl	800f26a <USBD_CtlError>
              break;
 800e996:	e03b      	b.n	800ea10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d136      	bne.n	800ea0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e9a0:	7bbb      	ldrb	r3, [r7, #14]
 800e9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d004      	beq.n	800e9b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e9aa:	7bbb      	ldrb	r3, [r7, #14]
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f001 f9ab 	bl	800fd0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 fd36 	bl	800f426 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff fde3 	bl	800e58a <USBD_CoreFindEP>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9c8:	7b7b      	ldrb	r3, [r7, #13]
 800e9ca:	2bff      	cmp	r3, #255	@ 0xff
 800e9cc:	d01f      	beq.n	800ea0e <USBD_StdEPReq+0x1c6>
 800e9ce:	7b7b      	ldrb	r3, [r7, #13]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11c      	bne.n	800ea0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e9d4:	7b7a      	ldrb	r2, [r7, #13]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e9dc:	7b7a      	ldrb	r2, [r7, #13]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	32ae      	adds	r2, #174	@ 0xae
 800e9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d010      	beq.n	800ea0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e9ec:	7b7a      	ldrb	r2, [r7, #13]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	32ae      	adds	r2, #174	@ 0xae
 800e9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	4798      	blx	r3
 800e9fe:	4603      	mov	r3, r0
 800ea00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ea02:	e004      	b.n	800ea0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fc2f 	bl	800f26a <USBD_CtlError>
              break;
 800ea0c:	e000      	b.n	800ea10 <USBD_StdEPReq+0x1c8>
              break;
 800ea0e:	bf00      	nop
          }
          break;
 800ea10:	e0ad      	b.n	800eb6e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d002      	beq.n	800ea24 <USBD_StdEPReq+0x1dc>
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d033      	beq.n	800ea8a <USBD_StdEPReq+0x242>
 800ea22:	e099      	b.n	800eb58 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea24:	7bbb      	ldrb	r3, [r7, #14]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d007      	beq.n	800ea3a <USBD_StdEPReq+0x1f2>
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b80      	cmp	r3, #128	@ 0x80
 800ea2e:	d004      	beq.n	800ea3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fc19 	bl	800f26a <USBD_CtlError>
                break;
 800ea38:	e093      	b.n	800eb62 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	da0b      	bge.n	800ea5a <USBD_StdEPReq+0x212>
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
 800ea44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea48:	4613      	mov	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	3310      	adds	r3, #16
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	4413      	add	r3, r2
 800ea56:	3304      	adds	r3, #4
 800ea58:	e00b      	b.n	800ea72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ea5a:	7bbb      	ldrb	r3, [r7, #14]
 800ea5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea60:	4613      	mov	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	4413      	add	r3, r2
 800ea70:	3304      	adds	r3, #4
 800ea72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2200      	movs	r2, #0
 800ea78:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	330e      	adds	r3, #14
 800ea7e:	2202      	movs	r2, #2
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fc6e 	bl	800f364 <USBD_CtlSendData>
              break;
 800ea88:	e06b      	b.n	800eb62 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ea8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	da11      	bge.n	800eab6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
 800ea94:	f003 020f 	and.w	r2, r3, #15
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	3323      	adds	r3, #35	@ 0x23
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d117      	bne.n	800eadc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800eaac:	6839      	ldr	r1, [r7, #0]
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fbdb 	bl	800f26a <USBD_CtlError>
                  break;
 800eab4:	e055      	b.n	800eb62 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
 800eab8:	f003 020f 	and.w	r2, r3, #15
 800eabc:	6879      	ldr	r1, [r7, #4]
 800eabe:	4613      	mov	r3, r2
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	4413      	add	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	440b      	add	r3, r1
 800eac8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d104      	bne.n	800eadc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fbc8 	bl	800f26a <USBD_CtlError>
                  break;
 800eada:	e042      	b.n	800eb62 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	da0b      	bge.n	800eafc <USBD_StdEPReq+0x2b4>
 800eae4:	7bbb      	ldrb	r3, [r7, #14]
 800eae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	3310      	adds	r3, #16
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	3304      	adds	r3, #4
 800eafa:	e00b      	b.n	800eb14 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eafc:	7bbb      	ldrb	r3, [r7, #14]
 800eafe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	4413      	add	r3, r2
 800eb12:	3304      	adds	r3, #4
 800eb14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <USBD_StdEPReq+0x2da>
 800eb1c:	7bbb      	ldrb	r3, [r7, #14]
 800eb1e:	2b80      	cmp	r3, #128	@ 0x80
 800eb20:	d103      	bne.n	800eb2a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2200      	movs	r2, #0
 800eb26:	739a      	strb	r2, [r3, #14]
 800eb28:	e00e      	b.n	800eb48 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eb2a:	7bbb      	ldrb	r3, [r7, #14]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f001 f90a 	bl	800fd48 <USBD_LL_IsStallEP>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d003      	beq.n	800eb42 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	739a      	strb	r2, [r3, #14]
 800eb40:	e002      	b.n	800eb48 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2200      	movs	r2, #0
 800eb46:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	330e      	adds	r3, #14
 800eb4c:	2202      	movs	r2, #2
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fc07 	bl	800f364 <USBD_CtlSendData>
              break;
 800eb56:	e004      	b.n	800eb62 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 fb85 	bl	800f26a <USBD_CtlError>
              break;
 800eb60:	bf00      	nop
          }
          break;
 800eb62:	e004      	b.n	800eb6e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fb7f 	bl	800f26a <USBD_CtlError>
          break;
 800eb6c:	bf00      	nop
      }
      break;
 800eb6e:	e005      	b.n	800eb7c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fb79 	bl	800f26a <USBD_CtlError>
      break;
 800eb78:	e000      	b.n	800eb7c <USBD_StdEPReq+0x334>
      break;
 800eb7a:	bf00      	nop
  }

  return ret;
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb92:	2300      	movs	r3, #0
 800eb94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	885b      	ldrh	r3, [r3, #2]
 800eba2:	0a1b      	lsrs	r3, r3, #8
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	3b01      	subs	r3, #1
 800eba8:	2b0e      	cmp	r3, #14
 800ebaa:	f200 8152 	bhi.w	800ee52 <USBD_GetDescriptor+0x2ca>
 800ebae:	a201      	add	r2, pc, #4	@ (adr r2, 800ebb4 <USBD_GetDescriptor+0x2c>)
 800ebb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb4:	0800ec25 	.word	0x0800ec25
 800ebb8:	0800ec3d 	.word	0x0800ec3d
 800ebbc:	0800ec7d 	.word	0x0800ec7d
 800ebc0:	0800ee53 	.word	0x0800ee53
 800ebc4:	0800ee53 	.word	0x0800ee53
 800ebc8:	0800edf3 	.word	0x0800edf3
 800ebcc:	0800ee1f 	.word	0x0800ee1f
 800ebd0:	0800ee53 	.word	0x0800ee53
 800ebd4:	0800ee53 	.word	0x0800ee53
 800ebd8:	0800ee53 	.word	0x0800ee53
 800ebdc:	0800ee53 	.word	0x0800ee53
 800ebe0:	0800ee53 	.word	0x0800ee53
 800ebe4:	0800ee53 	.word	0x0800ee53
 800ebe8:	0800ee53 	.word	0x0800ee53
 800ebec:	0800ebf1 	.word	0x0800ebf1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00b      	beq.n	800ec14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec02:	69db      	ldr	r3, [r3, #28]
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	7c12      	ldrb	r2, [r2, #16]
 800ec08:	f107 0108 	add.w	r1, r7, #8
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	4798      	blx	r3
 800ec10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec12:	e126      	b.n	800ee62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec14:	6839      	ldr	r1, [r7, #0]
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fb27 	bl	800f26a <USBD_CtlError>
        err++;
 800ec1c:	7afb      	ldrb	r3, [r7, #11]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	72fb      	strb	r3, [r7, #11]
      break;
 800ec22:	e11e      	b.n	800ee62 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	7c12      	ldrb	r2, [r2, #16]
 800ec30:	f107 0108 	add.w	r1, r7, #8
 800ec34:	4610      	mov	r0, r2
 800ec36:	4798      	blx	r3
 800ec38:	60f8      	str	r0, [r7, #12]
      break;
 800ec3a:	e112      	b.n	800ee62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7c1b      	ldrb	r3, [r3, #16]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10d      	bne.n	800ec60 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec4c:	f107 0208 	add.w	r2, r7, #8
 800ec50:	4610      	mov	r0, r2
 800ec52:	4798      	blx	r3
 800ec54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ec5e:	e100      	b.n	800ee62 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec68:	f107 0208 	add.w	r2, r7, #8
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	4798      	blx	r3
 800ec70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3301      	adds	r3, #1
 800ec76:	2202      	movs	r2, #2
 800ec78:	701a      	strb	r2, [r3, #0]
      break;
 800ec7a:	e0f2      	b.n	800ee62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	885b      	ldrh	r3, [r3, #2]
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b05      	cmp	r3, #5
 800ec84:	f200 80ac 	bhi.w	800ede0 <USBD_GetDescriptor+0x258>
 800ec88:	a201      	add	r2, pc, #4	@ (adr r2, 800ec90 <USBD_GetDescriptor+0x108>)
 800ec8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8e:	bf00      	nop
 800ec90:	0800eca9 	.word	0x0800eca9
 800ec94:	0800ecdd 	.word	0x0800ecdd
 800ec98:	0800ed11 	.word	0x0800ed11
 800ec9c:	0800ed45 	.word	0x0800ed45
 800eca0:	0800ed79 	.word	0x0800ed79
 800eca4:	0800edad 	.word	0x0800edad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00b      	beq.n	800eccc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	7c12      	ldrb	r2, [r2, #16]
 800ecc0:	f107 0108 	add.w	r1, r7, #8
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	4798      	blx	r3
 800ecc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecca:	e091      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 facb 	bl	800f26a <USBD_CtlError>
            err++;
 800ecd4:	7afb      	ldrb	r3, [r7, #11]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ecda:	e089      	b.n	800edf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00b      	beq.n	800ed00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	7c12      	ldrb	r2, [r2, #16]
 800ecf4:	f107 0108 	add.w	r1, r7, #8
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	4798      	blx	r3
 800ecfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecfe:	e077      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fab1 	bl	800f26a <USBD_CtlError>
            err++;
 800ed08:	7afb      	ldrb	r3, [r7, #11]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ed0e:	e06f      	b.n	800edf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00b      	beq.n	800ed34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	7c12      	ldrb	r2, [r2, #16]
 800ed28:	f107 0108 	add.w	r1, r7, #8
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	4798      	blx	r3
 800ed30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed32:	e05d      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fa97 	bl	800f26a <USBD_CtlError>
            err++;
 800ed3c:	7afb      	ldrb	r3, [r7, #11]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	72fb      	strb	r3, [r7, #11]
          break;
 800ed42:	e055      	b.n	800edf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00b      	beq.n	800ed68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	7c12      	ldrb	r2, [r2, #16]
 800ed5c:	f107 0108 	add.w	r1, r7, #8
 800ed60:	4610      	mov	r0, r2
 800ed62:	4798      	blx	r3
 800ed64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed66:	e043      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed68:	6839      	ldr	r1, [r7, #0]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 fa7d 	bl	800f26a <USBD_CtlError>
            err++;
 800ed70:	7afb      	ldrb	r3, [r7, #11]
 800ed72:	3301      	adds	r3, #1
 800ed74:	72fb      	strb	r3, [r7, #11]
          break;
 800ed76:	e03b      	b.n	800edf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed7e:	695b      	ldr	r3, [r3, #20]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00b      	beq.n	800ed9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	7c12      	ldrb	r2, [r2, #16]
 800ed90:	f107 0108 	add.w	r1, r7, #8
 800ed94:	4610      	mov	r0, r2
 800ed96:	4798      	blx	r3
 800ed98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed9a:	e029      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed9c:	6839      	ldr	r1, [r7, #0]
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 fa63 	bl	800f26a <USBD_CtlError>
            err++;
 800eda4:	7afb      	ldrb	r3, [r7, #11]
 800eda6:	3301      	adds	r3, #1
 800eda8:	72fb      	strb	r3, [r7, #11]
          break;
 800edaa:	e021      	b.n	800edf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00b      	beq.n	800edd0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	7c12      	ldrb	r2, [r2, #16]
 800edc4:	f107 0108 	add.w	r1, r7, #8
 800edc8:	4610      	mov	r0, r2
 800edca:	4798      	blx	r3
 800edcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edce:	e00f      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800edd0:	6839      	ldr	r1, [r7, #0]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 fa49 	bl	800f26a <USBD_CtlError>
            err++;
 800edd8:	7afb      	ldrb	r3, [r7, #11]
 800edda:	3301      	adds	r3, #1
 800eddc:	72fb      	strb	r3, [r7, #11]
          break;
 800edde:	e007      	b.n	800edf0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 fa41 	bl	800f26a <USBD_CtlError>
          err++;
 800ede8:	7afb      	ldrb	r3, [r7, #11]
 800edea:	3301      	adds	r3, #1
 800edec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800edee:	bf00      	nop
      }
      break;
 800edf0:	e037      	b.n	800ee62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	7c1b      	ldrb	r3, [r3, #16]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d109      	bne.n	800ee0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee02:	f107 0208 	add.w	r2, r7, #8
 800ee06:	4610      	mov	r0, r2
 800ee08:	4798      	blx	r3
 800ee0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee0c:	e029      	b.n	800ee62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee0e:	6839      	ldr	r1, [r7, #0]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fa2a 	bl	800f26a <USBD_CtlError>
        err++;
 800ee16:	7afb      	ldrb	r3, [r7, #11]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ee1c:	e021      	b.n	800ee62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	7c1b      	ldrb	r3, [r3, #16]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10d      	bne.n	800ee42 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee2e:	f107 0208 	add.w	r2, r7, #8
 800ee32:	4610      	mov	r0, r2
 800ee34:	4798      	blx	r3
 800ee36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	2207      	movs	r2, #7
 800ee3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee40:	e00f      	b.n	800ee62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 fa10 	bl	800f26a <USBD_CtlError>
        err++;
 800ee4a:	7afb      	ldrb	r3, [r7, #11]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ee50:	e007      	b.n	800ee62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fa08 	bl	800f26a <USBD_CtlError>
      err++;
 800ee5a:	7afb      	ldrb	r3, [r7, #11]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ee60:	bf00      	nop
  }

  if (err != 0U)
 800ee62:	7afb      	ldrb	r3, [r7, #11]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d11e      	bne.n	800eea6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	88db      	ldrh	r3, [r3, #6]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d016      	beq.n	800ee9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ee70:	893b      	ldrh	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00e      	beq.n	800ee94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	88da      	ldrh	r2, [r3, #6]
 800ee7a:	893b      	ldrh	r3, [r7, #8]
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	bf28      	it	cs
 800ee80:	4613      	movcs	r3, r2
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ee86:	893b      	ldrh	r3, [r7, #8]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	68f9      	ldr	r1, [r7, #12]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fa69 	bl	800f364 <USBD_CtlSendData>
 800ee92:	e009      	b.n	800eea8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f9e7 	bl	800f26a <USBD_CtlError>
 800ee9c:	e004      	b.n	800eea8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fac1 	bl	800f426 <USBD_CtlSendStatus>
 800eea4:	e000      	b.n	800eea8 <USBD_GetDescriptor+0x320>
    return;
 800eea6:	bf00      	nop
  }
}
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop

0800eeb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	889b      	ldrh	r3, [r3, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d131      	bne.n	800ef26 <USBD_SetAddress+0x76>
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	88db      	ldrh	r3, [r3, #6]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d12d      	bne.n	800ef26 <USBD_SetAddress+0x76>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	885b      	ldrh	r3, [r3, #2]
 800eece:	2b7f      	cmp	r3, #127	@ 0x7f
 800eed0:	d829      	bhi.n	800ef26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	885b      	ldrh	r3, [r3, #2]
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eedc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d104      	bne.n	800eef4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eeea:	6839      	ldr	r1, [r7, #0]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 f9bc 	bl	800f26a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef2:	e01d      	b.n	800ef30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7bfa      	ldrb	r2, [r7, #15]
 800eef8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 ff4d 	bl	800fda0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fa8d 	bl	800f426 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d004      	beq.n	800ef1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2202      	movs	r2, #2
 800ef16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef1a:	e009      	b.n	800ef30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef24:	e004      	b.n	800ef30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f99e 	bl	800f26a <USBD_CtlError>
  }
}
 800ef2e:	bf00      	nop
 800ef30:	bf00      	nop
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	885b      	ldrh	r3, [r3, #2]
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	4b4e      	ldr	r3, [pc, #312]	@ (800f088 <USBD_SetConfig+0x150>)
 800ef4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ef50:	4b4d      	ldr	r3, [pc, #308]	@ (800f088 <USBD_SetConfig+0x150>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d905      	bls.n	800ef64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f985 	bl	800f26a <USBD_CtlError>
    return USBD_FAIL;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e08c      	b.n	800f07e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d002      	beq.n	800ef76 <USBD_SetConfig+0x3e>
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d029      	beq.n	800efc8 <USBD_SetConfig+0x90>
 800ef74:	e075      	b.n	800f062 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ef76:	4b44      	ldr	r3, [pc, #272]	@ (800f088 <USBD_SetConfig+0x150>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d020      	beq.n	800efc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ef7e:	4b42      	ldr	r3, [pc, #264]	@ (800f088 <USBD_SetConfig+0x150>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ef88:	4b3f      	ldr	r3, [pc, #252]	@ (800f088 <USBD_SetConfig+0x150>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7fe ffa3 	bl	800deda <USBD_SetClassConfig>
 800ef94:	4603      	mov	r3, r0
 800ef96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ef98:	7bfb      	ldrb	r3, [r7, #15]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d008      	beq.n	800efb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f962 	bl	800f26a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2202      	movs	r2, #2
 800efaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800efae:	e065      	b.n	800f07c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fa38 	bl	800f426 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2203      	movs	r2, #3
 800efba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800efbe:	e05d      	b.n	800f07c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fa30 	bl	800f426 <USBD_CtlSendStatus>
      break;
 800efc6:	e059      	b.n	800f07c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800efc8:	4b2f      	ldr	r3, [pc, #188]	@ (800f088 <USBD_SetConfig+0x150>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d112      	bne.n	800eff6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2202      	movs	r2, #2
 800efd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800efd8:	4b2b      	ldr	r3, [pc, #172]	@ (800f088 <USBD_SetConfig+0x150>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	461a      	mov	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800efe2:	4b29      	ldr	r3, [pc, #164]	@ (800f088 <USBD_SetConfig+0x150>)
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	4619      	mov	r1, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7fe ff92 	bl	800df12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fa19 	bl	800f426 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eff4:	e042      	b.n	800f07c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eff6:	4b24      	ldr	r3, [pc, #144]	@ (800f088 <USBD_SetConfig+0x150>)
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	429a      	cmp	r2, r3
 800f002:	d02a      	beq.n	800f05a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fe ff80 	bl	800df12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f012:	4b1d      	ldr	r3, [pc, #116]	@ (800f088 <USBD_SetConfig+0x150>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	461a      	mov	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f01c:	4b1a      	ldr	r3, [pc, #104]	@ (800f088 <USBD_SetConfig+0x150>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	4619      	mov	r1, r3
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7fe ff59 	bl	800deda <USBD_SetClassConfig>
 800f028:	4603      	mov	r3, r0
 800f02a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00f      	beq.n	800f052 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f918 	bl	800f26a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7fe ff65 	bl	800df12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f050:	e014      	b.n	800f07c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 f9e7 	bl	800f426 <USBD_CtlSendStatus>
      break;
 800f058:	e010      	b.n	800f07c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 f9e3 	bl	800f426 <USBD_CtlSendStatus>
      break;
 800f060:	e00c      	b.n	800f07c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f900 	bl	800f26a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f06a:	4b07      	ldr	r3, [pc, #28]	@ (800f088 <USBD_SetConfig+0x150>)
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7fe ff4e 	bl	800df12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f076:	2303      	movs	r3, #3
 800f078:	73fb      	strb	r3, [r7, #15]
      break;
 800f07a:	bf00      	nop
  }

  return ret;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	200008f0 	.word	0x200008f0

0800f08c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	88db      	ldrh	r3, [r3, #6]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d004      	beq.n	800f0a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f8e2 	bl	800f26a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f0a6:	e023      	b.n	800f0f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	dc02      	bgt.n	800f0ba <USBD_GetConfig+0x2e>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	dc03      	bgt.n	800f0c0 <USBD_GetConfig+0x34>
 800f0b8:	e015      	b.n	800f0e6 <USBD_GetConfig+0x5a>
 800f0ba:	2b03      	cmp	r3, #3
 800f0bc:	d00b      	beq.n	800f0d6 <USBD_GetConfig+0x4a>
 800f0be:	e012      	b.n	800f0e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f948 	bl	800f364 <USBD_CtlSendData>
        break;
 800f0d4:	e00c      	b.n	800f0f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	3304      	adds	r3, #4
 800f0da:	2201      	movs	r2, #1
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f940 	bl	800f364 <USBD_CtlSendData>
        break;
 800f0e4:	e004      	b.n	800f0f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 f8be 	bl	800f26a <USBD_CtlError>
        break;
 800f0ee:	bf00      	nop
}
 800f0f0:	bf00      	nop
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	3b01      	subs	r3, #1
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d81e      	bhi.n	800f14e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	88db      	ldrh	r3, [r3, #6]
 800f114:	2b02      	cmp	r3, #2
 800f116:	d004      	beq.n	800f122 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f118:	6839      	ldr	r1, [r7, #0]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 f8a5 	bl	800f26a <USBD_CtlError>
        break;
 800f120:	e01a      	b.n	800f158 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d005      	beq.n	800f13e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	f043 0202 	orr.w	r2, r3, #2
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	330c      	adds	r3, #12
 800f142:	2202      	movs	r2, #2
 800f144:	4619      	mov	r1, r3
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f90c 	bl	800f364 <USBD_CtlSendData>
      break;
 800f14c:	e004      	b.n	800f158 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f88a 	bl	800f26a <USBD_CtlError>
      break;
 800f156:	bf00      	nop
  }
}
 800f158:	bf00      	nop
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	885b      	ldrh	r3, [r3, #2]
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d107      	bne.n	800f182 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f953 	bl	800f426 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f180:	e013      	b.n	800f1aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	885b      	ldrh	r3, [r3, #2]
 800f186:	2b02      	cmp	r3, #2
 800f188:	d10b      	bne.n	800f1a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	889b      	ldrh	r3, [r3, #4]
 800f18e:	0a1b      	lsrs	r3, r3, #8
 800f190:	b29b      	uxth	r3, r3
 800f192:	b2da      	uxtb	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f943 	bl	800f426 <USBD_CtlSendStatus>
}
 800f1a0:	e003      	b.n	800f1aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 f860 	bl	800f26a <USBD_CtlError>
}
 800f1aa:	bf00      	nop
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d80b      	bhi.n	800f1e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	885b      	ldrh	r3, [r3, #2]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d10c      	bne.n	800f1ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f923 	bl	800f426 <USBD_CtlSendStatus>
      }
      break;
 800f1e0:	e004      	b.n	800f1ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 f840 	bl	800f26a <USBD_CtlError>
      break;
 800f1ea:	e000      	b.n	800f1ee <USBD_ClrFeature+0x3c>
      break;
 800f1ec:	bf00      	nop
  }
}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	781a      	ldrb	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	3301      	adds	r3, #1
 800f210:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	781a      	ldrb	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	3301      	adds	r3, #1
 800f21e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff fa13 	bl	800e64c <SWAPBYTE>
 800f226:	4603      	mov	r3, r0
 800f228:	461a      	mov	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	3301      	adds	r3, #1
 800f232:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3301      	adds	r3, #1
 800f238:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fa06 	bl	800e64c <SWAPBYTE>
 800f240:	4603      	mov	r3, r0
 800f242:	461a      	mov	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3301      	adds	r3, #1
 800f24c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3301      	adds	r3, #1
 800f252:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f7ff f9f9 	bl	800e64c <SWAPBYTE>
 800f25a:	4603      	mov	r3, r0
 800f25c:	461a      	mov	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	80da      	strh	r2, [r3, #6]
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b082      	sub	sp, #8
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
 800f272:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f274:	2180      	movs	r1, #128	@ 0x80
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fd28 	bl	800fccc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f27c:	2100      	movs	r1, #0
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fd24 	bl	800fccc <USBD_LL_StallEP>
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f298:	2300      	movs	r3, #0
 800f29a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d042      	beq.n	800f328 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f2a6:	6938      	ldr	r0, [r7, #16]
 800f2a8:	f000 f842 	bl	800f330 <USBD_GetLen>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2b6:	d808      	bhi.n	800f2ca <USBD_GetString+0x3e>
 800f2b8:	6938      	ldr	r0, [r7, #16]
 800f2ba:	f000 f839 	bl	800f330 <USBD_GetLen>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	e001      	b.n	800f2ce <USBD_GetString+0x42>
 800f2ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f2d2:	7dfb      	ldrb	r3, [r7, #23]
 800f2d4:	68ba      	ldr	r2, [r7, #8]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	7812      	ldrb	r2, [r2, #0]
 800f2dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	2203      	movs	r2, #3
 800f2ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2ee:	7dfb      	ldrb	r3, [r7, #23]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f2f4:	e013      	b.n	800f31e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	7812      	ldrb	r2, [r2, #0]
 800f300:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	3301      	adds	r3, #1
 800f306:	613b      	str	r3, [r7, #16]
    idx++;
 800f308:	7dfb      	ldrb	r3, [r7, #23]
 800f30a:	3301      	adds	r3, #1
 800f30c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	4413      	add	r3, r2
 800f314:	2200      	movs	r2, #0
 800f316:	701a      	strb	r2, [r3, #0]
    idx++;
 800f318:	7dfb      	ldrb	r3, [r7, #23]
 800f31a:	3301      	adds	r3, #1
 800f31c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1e7      	bne.n	800f2f6 <USBD_GetString+0x6a>
 800f326:	e000      	b.n	800f32a <USBD_GetString+0x9e>
    return;
 800f328:	bf00      	nop
  }
}
 800f32a:	3718      	adds	r7, #24
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f340:	e005      	b.n	800f34e <USBD_GetLen+0x1e>
  {
    len++;
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	3301      	adds	r3, #1
 800f346:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	3301      	adds	r3, #1
 800f34c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1f5      	bne.n	800f342 <USBD_GetLen+0x12>
  }

  return len;
 800f356:	7bfb      	ldrb	r3, [r7, #15]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2202      	movs	r2, #2
 800f374:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	2100      	movs	r1, #0
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f000 fd24 	bl	800fdde <USBD_LL_Transmit>

  return USBD_OK;
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3710      	adds	r7, #16
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f000 fd13 	bl	800fdde <USBD_LL_Transmit>

  return USBD_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	60f8      	str	r0, [r7, #12]
 800f3ca:	60b9      	str	r1, [r7, #8]
 800f3cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2203      	movs	r2, #3
 800f3d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 fd13 	bl	800fe20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	2100      	movs	r1, #0
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f000 fd02 	bl	800fe20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b082      	sub	sp, #8
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2204      	movs	r2, #4
 800f432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f436:	2300      	movs	r3, #0
 800f438:	2200      	movs	r2, #0
 800f43a:	2100      	movs	r1, #0
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fcce 	bl	800fdde <USBD_LL_Transmit>

  return USBD_OK;
 800f442:	2300      	movs	r3, #0
}
 800f444:	4618      	mov	r0, r3
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2205      	movs	r2, #5
 800f458:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f45c:	2300      	movs	r3, #0
 800f45e:	2200      	movs	r2, #0
 800f460:	2100      	movs	r1, #0
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fcdc 	bl	800fe20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f468:	2300      	movs	r3, #0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f478:	2200      	movs	r2, #0
 800f47a:	4912      	ldr	r1, [pc, #72]	@ (800f4c4 <MX_USB_DEVICE_Init+0x50>)
 800f47c:	4812      	ldr	r0, [pc, #72]	@ (800f4c8 <MX_USB_DEVICE_Init+0x54>)
 800f47e:	f7fe fcaf 	bl	800dde0 <USBD_Init>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f488:	f7f4 f8e4 	bl	8003654 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f48c:	490f      	ldr	r1, [pc, #60]	@ (800f4cc <MX_USB_DEVICE_Init+0x58>)
 800f48e:	480e      	ldr	r0, [pc, #56]	@ (800f4c8 <MX_USB_DEVICE_Init+0x54>)
 800f490:	f7fe fcd6 	bl	800de40 <USBD_RegisterClass>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d001      	beq.n	800f49e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f49a:	f7f4 f8db 	bl	8003654 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f49e:	490c      	ldr	r1, [pc, #48]	@ (800f4d0 <MX_USB_DEVICE_Init+0x5c>)
 800f4a0:	4809      	ldr	r0, [pc, #36]	@ (800f4c8 <MX_USB_DEVICE_Init+0x54>)
 800f4a2:	f7fe fbcd 	bl	800dc40 <USBD_CDC_RegisterInterface>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4ac:	f7f4 f8d2 	bl	8003654 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4b0:	4805      	ldr	r0, [pc, #20]	@ (800f4c8 <MX_USB_DEVICE_Init+0x54>)
 800f4b2:	f7fe fcfb 	bl	800deac <USBD_Start>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4bc:	f7f4 f8ca 	bl	8003654 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4c0:	bf00      	nop
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	200000ac 	.word	0x200000ac
 800f4c8:	200008f4 	.word	0x200008f4
 800f4cc:	20000018 	.word	0x20000018
 800f4d0:	20000098 	.word	0x20000098

0800f4d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4d8:	2200      	movs	r2, #0
 800f4da:	4905      	ldr	r1, [pc, #20]	@ (800f4f0 <CDC_Init_FS+0x1c>)
 800f4dc:	4805      	ldr	r0, [pc, #20]	@ (800f4f4 <CDC_Init_FS+0x20>)
 800f4de:	f7fe fbc9 	bl	800dc74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4e2:	4905      	ldr	r1, [pc, #20]	@ (800f4f8 <CDC_Init_FS+0x24>)
 800f4e4:	4803      	ldr	r0, [pc, #12]	@ (800f4f4 <CDC_Init_FS+0x20>)
 800f4e6:	f7fe fbe7 	bl	800dcb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	200013d0 	.word	0x200013d0
 800f4f4:	200008f4 	.word	0x200008f4
 800f4f8:	20000bd0 	.word	0x20000bd0

0800f4fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f500:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f502:	4618      	mov	r0, r3
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	4603      	mov	r3, r0
 800f514:	6039      	str	r1, [r7, #0]
 800f516:	71fb      	strb	r3, [r7, #7]
 800f518:	4613      	mov	r3, r2
 800f51a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f51c:	79fb      	ldrb	r3, [r7, #7]
 800f51e:	2b23      	cmp	r3, #35	@ 0x23
 800f520:	d84a      	bhi.n	800f5b8 <CDC_Control_FS+0xac>
 800f522:	a201      	add	r2, pc, #4	@ (adr r2, 800f528 <CDC_Control_FS+0x1c>)
 800f524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f528:	0800f5b9 	.word	0x0800f5b9
 800f52c:	0800f5b9 	.word	0x0800f5b9
 800f530:	0800f5b9 	.word	0x0800f5b9
 800f534:	0800f5b9 	.word	0x0800f5b9
 800f538:	0800f5b9 	.word	0x0800f5b9
 800f53c:	0800f5b9 	.word	0x0800f5b9
 800f540:	0800f5b9 	.word	0x0800f5b9
 800f544:	0800f5b9 	.word	0x0800f5b9
 800f548:	0800f5b9 	.word	0x0800f5b9
 800f54c:	0800f5b9 	.word	0x0800f5b9
 800f550:	0800f5b9 	.word	0x0800f5b9
 800f554:	0800f5b9 	.word	0x0800f5b9
 800f558:	0800f5b9 	.word	0x0800f5b9
 800f55c:	0800f5b9 	.word	0x0800f5b9
 800f560:	0800f5b9 	.word	0x0800f5b9
 800f564:	0800f5b9 	.word	0x0800f5b9
 800f568:	0800f5b9 	.word	0x0800f5b9
 800f56c:	0800f5b9 	.word	0x0800f5b9
 800f570:	0800f5b9 	.word	0x0800f5b9
 800f574:	0800f5b9 	.word	0x0800f5b9
 800f578:	0800f5b9 	.word	0x0800f5b9
 800f57c:	0800f5b9 	.word	0x0800f5b9
 800f580:	0800f5b9 	.word	0x0800f5b9
 800f584:	0800f5b9 	.word	0x0800f5b9
 800f588:	0800f5b9 	.word	0x0800f5b9
 800f58c:	0800f5b9 	.word	0x0800f5b9
 800f590:	0800f5b9 	.word	0x0800f5b9
 800f594:	0800f5b9 	.word	0x0800f5b9
 800f598:	0800f5b9 	.word	0x0800f5b9
 800f59c:	0800f5b9 	.word	0x0800f5b9
 800f5a0:	0800f5b9 	.word	0x0800f5b9
 800f5a4:	0800f5b9 	.word	0x0800f5b9
 800f5a8:	0800f5b9 	.word	0x0800f5b9
 800f5ac:	0800f5b9 	.word	0x0800f5b9
 800f5b0:	0800f5b9 	.word	0x0800f5b9
 800f5b4:	0800f5b9 	.word	0x0800f5b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5b8:	bf00      	nop
  }

  return (USBD_OK);
 800f5ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	4805      	ldr	r0, [pc, #20]	@ (800f5ec <CDC_Receive_FS+0x24>)
 800f5d6:	f7fe fb6f 	bl	800dcb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f5da:	4804      	ldr	r0, [pc, #16]	@ (800f5ec <CDC_Receive_FS+0x24>)
 800f5dc:	f7fe fbca 	bl	800dd74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f5e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	200008f4 	.word	0x200008f4

0800f5f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f600:	4b0d      	ldr	r3, [pc, #52]	@ (800f638 <CDC_Transmit_FS+0x48>)
 800f602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f606:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d001      	beq.n	800f616 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f612:	2301      	movs	r3, #1
 800f614:	e00b      	b.n	800f62e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f616:	887b      	ldrh	r3, [r7, #2]
 800f618:	461a      	mov	r2, r3
 800f61a:	6879      	ldr	r1, [r7, #4]
 800f61c:	4806      	ldr	r0, [pc, #24]	@ (800f638 <CDC_Transmit_FS+0x48>)
 800f61e:	f7fe fb29 	bl	800dc74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f622:	4805      	ldr	r0, [pc, #20]	@ (800f638 <CDC_Transmit_FS+0x48>)
 800f624:	f7fe fb66 	bl	800dcf4 <USBD_CDC_TransmitPacket>
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	200008f4 	.word	0x200008f4

0800f63c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b087      	sub	sp, #28
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f64e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f652:	4618      	mov	r0, r3
 800f654:	371c      	adds	r7, #28
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
	...

0800f660 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	6039      	str	r1, [r7, #0]
 800f66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	2212      	movs	r2, #18
 800f670:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f672:	4b03      	ldr	r3, [pc, #12]	@ (800f680 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f674:	4618      	mov	r0, r3
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	200000cc 	.word	0x200000cc

0800f684 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	4603      	mov	r3, r0
 800f68c:	6039      	str	r1, [r7, #0]
 800f68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	2204      	movs	r2, #4
 800f694:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f696:	4b03      	ldr	r3, [pc, #12]	@ (800f6a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	200000ec 	.word	0x200000ec

0800f6a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	6039      	str	r1, [r7, #0]
 800f6b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6b4:	79fb      	ldrb	r3, [r7, #7]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d105      	bne.n	800f6c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	4907      	ldr	r1, [pc, #28]	@ (800f6dc <USBD_FS_ProductStrDescriptor+0x34>)
 800f6be:	4808      	ldr	r0, [pc, #32]	@ (800f6e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6c0:	f7ff fde4 	bl	800f28c <USBD_GetString>
 800f6c4:	e004      	b.n	800f6d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6c6:	683a      	ldr	r2, [r7, #0]
 800f6c8:	4904      	ldr	r1, [pc, #16]	@ (800f6dc <USBD_FS_ProductStrDescriptor+0x34>)
 800f6ca:	4805      	ldr	r0, [pc, #20]	@ (800f6e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f6cc:	f7ff fdde 	bl	800f28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6d0:	4b02      	ldr	r3, [pc, #8]	@ (800f6dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20001bd0 	.word	0x20001bd0
 800f6e0:	08013e44 	.word	0x08013e44

0800f6e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	4904      	ldr	r1, [pc, #16]	@ (800f704 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6f4:	4804      	ldr	r0, [pc, #16]	@ (800f708 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6f6:	f7ff fdc9 	bl	800f28c <USBD_GetString>
  return USBD_StrDesc;
 800f6fa:	4b02      	ldr	r3, [pc, #8]	@ (800f704 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	20001bd0 	.word	0x20001bd0
 800f708:	08013e5c 	.word	0x08013e5c

0800f70c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	6039      	str	r1, [r7, #0]
 800f716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	221a      	movs	r2, #26
 800f71c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f71e:	f000 f855 	bl	800f7cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f722:	4b02      	ldr	r3, [pc, #8]	@ (800f72c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	200000f0 	.word	0x200000f0

0800f730 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	4603      	mov	r3, r0
 800f738:	6039      	str	r1, [r7, #0]
 800f73a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f73c:	79fb      	ldrb	r3, [r7, #7]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d105      	bne.n	800f74e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	4907      	ldr	r1, [pc, #28]	@ (800f764 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f746:	4808      	ldr	r0, [pc, #32]	@ (800f768 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f748:	f7ff fda0 	bl	800f28c <USBD_GetString>
 800f74c:	e004      	b.n	800f758 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	4904      	ldr	r1, [pc, #16]	@ (800f764 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f752:	4805      	ldr	r0, [pc, #20]	@ (800f768 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f754:	f7ff fd9a 	bl	800f28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f758:	4b02      	ldr	r3, [pc, #8]	@ (800f764 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3708      	adds	r7, #8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	20001bd0 	.word	0x20001bd0
 800f768:	08013e70 	.word	0x08013e70

0800f76c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	6039      	str	r1, [r7, #0]
 800f776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f778:	79fb      	ldrb	r3, [r7, #7]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d105      	bne.n	800f78a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	4907      	ldr	r1, [pc, #28]	@ (800f7a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f782:	4808      	ldr	r0, [pc, #32]	@ (800f7a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f784:	f7ff fd82 	bl	800f28c <USBD_GetString>
 800f788:	e004      	b.n	800f794 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	4904      	ldr	r1, [pc, #16]	@ (800f7a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f78e:	4805      	ldr	r0, [pc, #20]	@ (800f7a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f790:	f7ff fd7c 	bl	800f28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f794:	4b02      	ldr	r3, [pc, #8]	@ (800f7a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f796:	4618      	mov	r0, r3
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20001bd0 	.word	0x20001bd0
 800f7a4:	08013e7c 	.word	0x08013e7c

0800f7a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	6039      	str	r1, [r7, #0]
 800f7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	220c      	movs	r2, #12
 800f7b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f7ba:	4b03      	ldr	r3, [pc, #12]	@ (800f7c8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	200000e0 	.word	0x200000e0

0800f7cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f810 <Get_SerialNum+0x44>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f814 <Get_SerialNum+0x48>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7de:	4b0e      	ldr	r3, [pc, #56]	@ (800f818 <Get_SerialNum+0x4c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d009      	beq.n	800f806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7f2:	2208      	movs	r2, #8
 800f7f4:	4909      	ldr	r1, [pc, #36]	@ (800f81c <Get_SerialNum+0x50>)
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f000 f814 	bl	800f824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7fc:	2204      	movs	r2, #4
 800f7fe:	4908      	ldr	r1, [pc, #32]	@ (800f820 <Get_SerialNum+0x54>)
 800f800:	68b8      	ldr	r0, [r7, #8]
 800f802:	f000 f80f 	bl	800f824 <IntToUnicode>
  }
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	1ff07a10 	.word	0x1ff07a10
 800f814:	1ff07a14 	.word	0x1ff07a14
 800f818:	1ff07a18 	.word	0x1ff07a18
 800f81c:	200000f2 	.word	0x200000f2
 800f820:	20000102 	.word	0x20000102

0800f824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	4613      	mov	r3, r2
 800f830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f832:	2300      	movs	r3, #0
 800f834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f836:	2300      	movs	r3, #0
 800f838:	75fb      	strb	r3, [r7, #23]
 800f83a:	e027      	b.n	800f88c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	0f1b      	lsrs	r3, r3, #28
 800f840:	2b09      	cmp	r3, #9
 800f842:	d80b      	bhi.n	800f85c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	0f1b      	lsrs	r3, r3, #28
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
 800f84c:	005b      	lsls	r3, r3, #1
 800f84e:	4619      	mov	r1, r3
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	440b      	add	r3, r1
 800f854:	3230      	adds	r2, #48	@ 0x30
 800f856:	b2d2      	uxtb	r2, r2
 800f858:	701a      	strb	r2, [r3, #0]
 800f85a:	e00a      	b.n	800f872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	0f1b      	lsrs	r3, r3, #28
 800f860:	b2da      	uxtb	r2, r3
 800f862:	7dfb      	ldrb	r3, [r7, #23]
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	4619      	mov	r1, r3
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	440b      	add	r3, r1
 800f86c:	3237      	adds	r2, #55	@ 0x37
 800f86e:	b2d2      	uxtb	r2, r2
 800f870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	011b      	lsls	r3, r3, #4
 800f876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	3301      	adds	r3, #1
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	4413      	add	r3, r2
 800f882:	2200      	movs	r2, #0
 800f884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f886:	7dfb      	ldrb	r3, [r7, #23]
 800f888:	3301      	adds	r3, #1
 800f88a:	75fb      	strb	r3, [r7, #23]
 800f88c:	7dfa      	ldrb	r2, [r7, #23]
 800f88e:	79fb      	ldrb	r3, [r7, #7]
 800f890:	429a      	cmp	r2, r3
 800f892:	d3d3      	bcc.n	800f83c <IntToUnicode+0x18>
  }
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
 800f898:	371c      	adds	r7, #28
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
	...

0800f8a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b0aa      	sub	sp, #168	@ 0xa8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	601a      	str	r2, [r3, #0]
 800f8b4:	605a      	str	r2, [r3, #4]
 800f8b6:	609a      	str	r2, [r3, #8]
 800f8b8:	60da      	str	r2, [r3, #12]
 800f8ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f8bc:	f107 0314 	add.w	r3, r7, #20
 800f8c0:	2280      	movs	r2, #128	@ 0x80
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f001 f99a 	bl	8010bfe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f8d2:	d151      	bne.n	800f978 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f8d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f8d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f8e0:	f107 0314 	add.w	r3, r7, #20
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f8 f91d 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f8f0:	f7f3 feb0 	bl	8003654 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8f4:	4b22      	ldr	r3, [pc, #136]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8f8:	4a21      	ldr	r2, [pc, #132]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f8fa:	f043 0301 	orr.w	r3, r3, #1
 800f8fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800f900:	4b1f      	ldr	r3, [pc, #124]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f904:	f003 0301 	and.w	r3, r3, #1
 800f908:	613b      	str	r3, [r7, #16]
 800f90a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f90c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f910:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f914:	2302      	movs	r3, #2
 800f916:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f91a:	2300      	movs	r3, #0
 800f91c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f920:	2303      	movs	r3, #3
 800f922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f926:	230a      	movs	r3, #10
 800f928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f92c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f930:	4619      	mov	r1, r3
 800f932:	4814      	ldr	r0, [pc, #80]	@ (800f984 <HAL_PCD_MspInit+0xe0>)
 800f934:	f7f5 fe36 	bl	80055a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f938:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f93a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f93c:	4a10      	ldr	r2, [pc, #64]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f942:	6353      	str	r3, [r2, #52]	@ 0x34
 800f944:	4b0e      	ldr	r3, [pc, #56]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f94c:	60fb      	str	r3, [r7, #12]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	4b0b      	ldr	r3, [pc, #44]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f954:	4a0a      	ldr	r2, [pc, #40]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f956:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f95a:	6453      	str	r3, [r2, #68]	@ 0x44
 800f95c:	4b08      	ldr	r3, [pc, #32]	@ (800f980 <HAL_PCD_MspInit+0xdc>)
 800f95e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f964:	60bb      	str	r3, [r7, #8]
 800f966:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f968:	2200      	movs	r2, #0
 800f96a:	2100      	movs	r1, #0
 800f96c:	2043      	movs	r0, #67	@ 0x43
 800f96e:	f7f5 f954 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f972:	2043      	movs	r0, #67	@ 0x43
 800f974:	f7f5 f96d 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f978:	bf00      	nop
 800f97a:	37a8      	adds	r7, #168	@ 0xa8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	40023800 	.word	0x40023800
 800f984:	40020000 	.word	0x40020000

0800f988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f99c:	4619      	mov	r1, r3
 800f99e:	4610      	mov	r0, r2
 800f9a0:	f7fe fad1 	bl	800df46 <USBD_LL_SetupStage>
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f9be:	78fa      	ldrb	r2, [r7, #3]
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	00db      	lsls	r3, r3, #3
 800f9c6:	4413      	add	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	440b      	add	r3, r1
 800f9cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f7fe fb0b 	bl	800dff0 <USBD_LL_DataOutStage>
}
 800f9da:	bf00      	nop
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f9f4:	78fa      	ldrb	r2, [r7, #3]
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	440b      	add	r3, r1
 800fa02:	3320      	adds	r3, #32
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	f7fe fbad 	bl	800e168 <USBD_LL_DataInStage>
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fe fcf1 	bl	800e40c <USBD_LL_SOF>
}
 800fa2a:	bf00      	nop
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	79db      	ldrb	r3, [r3, #7]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]
 800fa4a:	e008      	b.n	800fa5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	79db      	ldrb	r3, [r3, #7]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	d102      	bne.n	800fa5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa54:	2301      	movs	r3, #1
 800fa56:	73fb      	strb	r3, [r7, #15]
 800fa58:	e001      	b.n	800fa5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa5a:	f7f3 fdfb 	bl	8003654 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fa64:	7bfa      	ldrb	r2, [r7, #15]
 800fa66:	4611      	mov	r1, r2
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe fc8b 	bl	800e384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fc32 	bl	800e2de <USBD_LL_Reset>
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fc86 	bl	800e3a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	6812      	ldr	r2, [r2, #0]
 800faa6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800faaa:	f043 0301 	orr.w	r3, r3, #1
 800faae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	7adb      	ldrb	r3, [r3, #11]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fab8:	4b04      	ldr	r3, [pc, #16]	@ (800facc <HAL_PCD_SuspendCallback+0x48>)
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	4a03      	ldr	r2, [pc, #12]	@ (800facc <HAL_PCD_SuspendCallback+0x48>)
 800fabe:	f043 0306 	orr.w	r3, r3, #6
 800fac2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	e000ed00 	.word	0xe000ed00

0800fad0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe fc7c 	bl	800e3dc <USBD_LL_Resume>
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	460b      	mov	r3, r1
 800faf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fafe:	78fa      	ldrb	r2, [r7, #3]
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fcd4 	bl	800e4b0 <USBD_LL_IsoOUTIncomplete>
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	460b      	mov	r3, r1
 800fb1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fb22:	78fa      	ldrb	r2, [r7, #3]
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fc90 	bl	800e44c <USBD_LL_IsoINIncomplete>
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe fce6 	bl	800e514 <USBD_LL_DevConnected>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fce3 	bl	800e52a <USBD_LL_DevDisconnected>
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d13f      	bne.n	800fbfc <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb7c:	4a22      	ldr	r2, [pc, #136]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a20      	ldr	r2, [pc, #128]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fb88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb8c:	4b1e      	ldr	r3, [pc, #120]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fb8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fb92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fb94:	4b1c      	ldr	r3, [pc, #112]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fb96:	2206      	movs	r2, #6
 800fb98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb9a:	4b1b      	ldr	r3, [pc, #108]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fb9c:	2202      	movs	r2, #2
 800fb9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fba0:	4b19      	ldr	r3, [pc, #100]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fba6:	4b18      	ldr	r3, [pc, #96]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fba8:	2202      	movs	r2, #2
 800fbaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fbac:	4b16      	ldr	r3, [pc, #88]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fbb2:	4b15      	ldr	r3, [pc, #84]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fbb8:	4b13      	ldr	r3, [pc, #76]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fbbe:	4b12      	ldr	r3, [pc, #72]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fbc4:	4b10      	ldr	r3, [pc, #64]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fbca:	4b0f      	ldr	r3, [pc, #60]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fbd0:	480d      	ldr	r0, [pc, #52]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbd2:	f7f6 f802 	bl	8005bda <HAL_PCD_Init>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800fbdc:	f7f3 fd3a 	bl	8003654 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fbe0:	2180      	movs	r1, #128	@ 0x80
 800fbe2:	4809      	ldr	r0, [pc, #36]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbe4:	f7f7 fa4f 	bl	8007086 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fbe8:	2240      	movs	r2, #64	@ 0x40
 800fbea:	2100      	movs	r1, #0
 800fbec:	4806      	ldr	r0, [pc, #24]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbee:	f7f7 fa03 	bl	8006ff8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fbf2:	2280      	movs	r2, #128	@ 0x80
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	4804      	ldr	r0, [pc, #16]	@ (800fc08 <USBD_LL_Init+0x9c>)
 800fbf8:	f7f7 f9fe 	bl	8006ff8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20001dd0 	.word	0x20001dd0

0800fc0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7f6 f8ef 	bl	8005e06 <HAL_PCD_Start>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc2c:	7bfb      	ldrb	r3, [r7, #15]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f000 f97e 	bl	800ff30 <USBD_Get_USB_Status>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b084      	sub	sp, #16
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	4608      	mov	r0, r1
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4603      	mov	r3, r0
 800fc52:	70fb      	strb	r3, [r7, #3]
 800fc54:	460b      	mov	r3, r1
 800fc56:	70bb      	strb	r3, [r7, #2]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fc6a:	78bb      	ldrb	r3, [r7, #2]
 800fc6c:	883a      	ldrh	r2, [r7, #0]
 800fc6e:	78f9      	ldrb	r1, [r7, #3]
 800fc70:	f7f6 fddd 	bl	800682e <HAL_PCD_EP_Open>
 800fc74:	4603      	mov	r3, r0
 800fc76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc78:	7bfb      	ldrb	r3, [r7, #15]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f000 f958 	bl	800ff30 <USBD_Get_USB_Status>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc84:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b084      	sub	sp, #16
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	460b      	mov	r3, r1
 800fc98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fca8:	78fa      	ldrb	r2, [r7, #3]
 800fcaa:	4611      	mov	r1, r2
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7f6 fe28 	bl	8006902 <HAL_PCD_EP_Close>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 f939 	bl	800ff30 <USBD_Get_USB_Status>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3710      	adds	r7, #16
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fce6:	78fa      	ldrb	r2, [r7, #3]
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f6 fee0 	bl	8006ab0 <HAL_PCD_EP_SetStall>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f000 f91a 	bl	800ff30 <USBD_Get_USB_Status>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd00:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b084      	sub	sp, #16
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	460b      	mov	r3, r1
 800fd14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd24:	78fa      	ldrb	r2, [r7, #3]
 800fd26:	4611      	mov	r1, r2
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7f6 ff24 	bl	8006b76 <HAL_PCD_EP_ClrStall>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd32:	7bfb      	ldrb	r3, [r7, #15]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 f8fb 	bl	800ff30 <USBD_Get_USB_Status>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	460b      	mov	r3, r1
 800fd52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	da0b      	bge.n	800fd7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd6a:	68f9      	ldr	r1, [r7, #12]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	00db      	lsls	r3, r3, #3
 800fd70:	4413      	add	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	440b      	add	r3, r1
 800fd76:	3316      	adds	r3, #22
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	e00b      	b.n	800fd94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd7c:	78fb      	ldrb	r3, [r7, #3]
 800fd7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd82:	68f9      	ldr	r1, [r7, #12]
 800fd84:	4613      	mov	r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	4413      	add	r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	440b      	add	r3, r1
 800fd8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800fd92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3714      	adds	r7, #20
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdba:	78fa      	ldrb	r2, [r7, #3]
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7f6 fd11 	bl	80067e6 <HAL_PCD_SetAddress>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 f8b0 	bl	800ff30 <USBD_Get_USB_Status>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b086      	sub	sp, #24
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	60f8      	str	r0, [r7, #12]
 800fde6:	607a      	str	r2, [r7, #4]
 800fde8:	603b      	str	r3, [r7, #0]
 800fdea:	460b      	mov	r3, r1
 800fdec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fdfc:	7af9      	ldrb	r1, [r7, #11]
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	f7f6 fe1b 	bl	8006a3c <HAL_PCD_EP_Transmit>
 800fe06:	4603      	mov	r3, r0
 800fe08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe0a:	7dfb      	ldrb	r3, [r7, #23]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f000 f88f 	bl	800ff30 <USBD_Get_USB_Status>
 800fe12:	4603      	mov	r3, r0
 800fe14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe16:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	607a      	str	r2, [r7, #4]
 800fe2a:	603b      	str	r3, [r7, #0]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fe3e:	7af9      	ldrb	r1, [r7, #11]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	f7f6 fda7 	bl	8006996 <HAL_PCD_EP_Receive>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 f86e 	bl	800ff30 <USBD_Get_USB_Status>
 800fe54:	4603      	mov	r3, r0
 800fe56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe58:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3718      	adds	r7, #24
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe74:	78fa      	ldrb	r2, [r7, #3]
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7f6 fdc7 	bl	8006a0c <HAL_PCD_EP_GetRxCount>
 800fe7e:	4603      	mov	r3, r0
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fe94:	78fb      	ldrb	r3, [r7, #3]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <HAL_PCDEx_LPM_Callback+0x18>
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d01f      	beq.n	800fede <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800fe9e:	e03b      	b.n	800ff18 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7adb      	ldrb	r3, [r3, #11]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d007      	beq.n	800feb8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fea8:	f000 f83c 	bl	800ff24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800feac:	4b1c      	ldr	r3, [pc, #112]	@ (800ff20 <HAL_PCDEx_LPM_Callback+0x98>)
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	4a1b      	ldr	r2, [pc, #108]	@ (800ff20 <HAL_PCDEx_LPM_Callback+0x98>)
 800feb2:	f023 0306 	bic.w	r3, r3, #6
 800feb6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	6812      	ldr	r2, [r2, #0]
 800fec6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800feca:	f023 0301 	bic.w	r3, r3, #1
 800fece:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fe fa80 	bl	800e3dc <USBD_LL_Resume>
    break;
 800fedc:	e01c      	b.n	800ff18 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	6812      	ldr	r2, [r2, #0]
 800feec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fef0:	f043 0301 	orr.w	r3, r3, #1
 800fef4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fe fa51 	bl	800e3a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	7adb      	ldrb	r3, [r3, #11]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d005      	beq.n	800ff16 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff0a:	4b05      	ldr	r3, [pc, #20]	@ (800ff20 <HAL_PCDEx_LPM_Callback+0x98>)
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	4a04      	ldr	r2, [pc, #16]	@ (800ff20 <HAL_PCDEx_LPM_Callback+0x98>)
 800ff10:	f043 0306 	orr.w	r3, r3, #6
 800ff14:	6113      	str	r3, [r2, #16]
    break;
 800ff16:	bf00      	nop
}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	e000ed00 	.word	0xe000ed00

0800ff24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ff28:	f7f2 ff96 	bl	8002e58 <SystemClock_Config>
}
 800ff2c:	bf00      	nop
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	4603      	mov	r3, r0
 800ff38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d817      	bhi.n	800ff74 <USBD_Get_USB_Status+0x44>
 800ff44:	a201      	add	r2, pc, #4	@ (adr r2, 800ff4c <USBD_Get_USB_Status+0x1c>)
 800ff46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4a:	bf00      	nop
 800ff4c:	0800ff5d 	.word	0x0800ff5d
 800ff50:	0800ff63 	.word	0x0800ff63
 800ff54:	0800ff69 	.word	0x0800ff69
 800ff58:	0800ff6f 	.word	0x0800ff6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ff60:	e00b      	b.n	800ff7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff62:	2303      	movs	r3, #3
 800ff64:	73fb      	strb	r3, [r7, #15]
    break;
 800ff66:	e008      	b.n	800ff7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff6c:	e005      	b.n	800ff7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	73fb      	strb	r3, [r7, #15]
    break;
 800ff72:	e002      	b.n	800ff7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ff74:	2303      	movs	r3, #3
 800ff76:	73fb      	strb	r3, [r7, #15]
    break;
 800ff78:	bf00      	nop
  }
  return usb_status;
 800ff7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <malloc>:
 800ff88:	4b02      	ldr	r3, [pc, #8]	@ (800ff94 <malloc+0xc>)
 800ff8a:	4601      	mov	r1, r0
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	f000 b82d 	b.w	800ffec <_malloc_r>
 800ff92:	bf00      	nop
 800ff94:	20000118 	.word	0x20000118

0800ff98 <free>:
 800ff98:	4b02      	ldr	r3, [pc, #8]	@ (800ffa4 <free+0xc>)
 800ff9a:	4601      	mov	r1, r0
 800ff9c:	6818      	ldr	r0, [r3, #0]
 800ff9e:	f001 bd17 	b.w	80119d0 <_free_r>
 800ffa2:	bf00      	nop
 800ffa4:	20000118 	.word	0x20000118

0800ffa8 <sbrk_aligned>:
 800ffa8:	b570      	push	{r4, r5, r6, lr}
 800ffaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ffe8 <sbrk_aligned+0x40>)
 800ffac:	460c      	mov	r4, r1
 800ffae:	6831      	ldr	r1, [r6, #0]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	b911      	cbnz	r1, 800ffba <sbrk_aligned+0x12>
 800ffb4:	f000 fe64 	bl	8010c80 <_sbrk_r>
 800ffb8:	6030      	str	r0, [r6, #0]
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f000 fe5f 	bl	8010c80 <_sbrk_r>
 800ffc2:	1c43      	adds	r3, r0, #1
 800ffc4:	d103      	bne.n	800ffce <sbrk_aligned+0x26>
 800ffc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ffca:	4620      	mov	r0, r4
 800ffcc:	bd70      	pop	{r4, r5, r6, pc}
 800ffce:	1cc4      	adds	r4, r0, #3
 800ffd0:	f024 0403 	bic.w	r4, r4, #3
 800ffd4:	42a0      	cmp	r0, r4
 800ffd6:	d0f8      	beq.n	800ffca <sbrk_aligned+0x22>
 800ffd8:	1a21      	subs	r1, r4, r0
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f000 fe50 	bl	8010c80 <_sbrk_r>
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	d1f2      	bne.n	800ffca <sbrk_aligned+0x22>
 800ffe4:	e7ef      	b.n	800ffc6 <sbrk_aligned+0x1e>
 800ffe6:	bf00      	nop
 800ffe8:	200022b0 	.word	0x200022b0

0800ffec <_malloc_r>:
 800ffec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff0:	1ccd      	adds	r5, r1, #3
 800fff2:	f025 0503 	bic.w	r5, r5, #3
 800fff6:	3508      	adds	r5, #8
 800fff8:	2d0c      	cmp	r5, #12
 800fffa:	bf38      	it	cc
 800fffc:	250c      	movcc	r5, #12
 800fffe:	2d00      	cmp	r5, #0
 8010000:	4606      	mov	r6, r0
 8010002:	db01      	blt.n	8010008 <_malloc_r+0x1c>
 8010004:	42a9      	cmp	r1, r5
 8010006:	d904      	bls.n	8010012 <_malloc_r+0x26>
 8010008:	230c      	movs	r3, #12
 801000a:	6033      	str	r3, [r6, #0]
 801000c:	2000      	movs	r0, #0
 801000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100e8 <_malloc_r+0xfc>
 8010016:	f000 f869 	bl	80100ec <__malloc_lock>
 801001a:	f8d8 3000 	ldr.w	r3, [r8]
 801001e:	461c      	mov	r4, r3
 8010020:	bb44      	cbnz	r4, 8010074 <_malloc_r+0x88>
 8010022:	4629      	mov	r1, r5
 8010024:	4630      	mov	r0, r6
 8010026:	f7ff ffbf 	bl	800ffa8 <sbrk_aligned>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	4604      	mov	r4, r0
 801002e:	d158      	bne.n	80100e2 <_malloc_r+0xf6>
 8010030:	f8d8 4000 	ldr.w	r4, [r8]
 8010034:	4627      	mov	r7, r4
 8010036:	2f00      	cmp	r7, #0
 8010038:	d143      	bne.n	80100c2 <_malloc_r+0xd6>
 801003a:	2c00      	cmp	r4, #0
 801003c:	d04b      	beq.n	80100d6 <_malloc_r+0xea>
 801003e:	6823      	ldr	r3, [r4, #0]
 8010040:	4639      	mov	r1, r7
 8010042:	4630      	mov	r0, r6
 8010044:	eb04 0903 	add.w	r9, r4, r3
 8010048:	f000 fe1a 	bl	8010c80 <_sbrk_r>
 801004c:	4581      	cmp	r9, r0
 801004e:	d142      	bne.n	80100d6 <_malloc_r+0xea>
 8010050:	6821      	ldr	r1, [r4, #0]
 8010052:	1a6d      	subs	r5, r5, r1
 8010054:	4629      	mov	r1, r5
 8010056:	4630      	mov	r0, r6
 8010058:	f7ff ffa6 	bl	800ffa8 <sbrk_aligned>
 801005c:	3001      	adds	r0, #1
 801005e:	d03a      	beq.n	80100d6 <_malloc_r+0xea>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	442b      	add	r3, r5
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	f8d8 3000 	ldr.w	r3, [r8]
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	bb62      	cbnz	r2, 80100c8 <_malloc_r+0xdc>
 801006e:	f8c8 7000 	str.w	r7, [r8]
 8010072:	e00f      	b.n	8010094 <_malloc_r+0xa8>
 8010074:	6822      	ldr	r2, [r4, #0]
 8010076:	1b52      	subs	r2, r2, r5
 8010078:	d420      	bmi.n	80100bc <_malloc_r+0xd0>
 801007a:	2a0b      	cmp	r2, #11
 801007c:	d917      	bls.n	80100ae <_malloc_r+0xc2>
 801007e:	1961      	adds	r1, r4, r5
 8010080:	42a3      	cmp	r3, r4
 8010082:	6025      	str	r5, [r4, #0]
 8010084:	bf18      	it	ne
 8010086:	6059      	strne	r1, [r3, #4]
 8010088:	6863      	ldr	r3, [r4, #4]
 801008a:	bf08      	it	eq
 801008c:	f8c8 1000 	streq.w	r1, [r8]
 8010090:	5162      	str	r2, [r4, r5]
 8010092:	604b      	str	r3, [r1, #4]
 8010094:	4630      	mov	r0, r6
 8010096:	f000 f82f 	bl	80100f8 <__malloc_unlock>
 801009a:	f104 000b 	add.w	r0, r4, #11
 801009e:	1d23      	adds	r3, r4, #4
 80100a0:	f020 0007 	bic.w	r0, r0, #7
 80100a4:	1ac2      	subs	r2, r0, r3
 80100a6:	bf1c      	itt	ne
 80100a8:	1a1b      	subne	r3, r3, r0
 80100aa:	50a3      	strne	r3, [r4, r2]
 80100ac:	e7af      	b.n	801000e <_malloc_r+0x22>
 80100ae:	6862      	ldr	r2, [r4, #4]
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	bf0c      	ite	eq
 80100b4:	f8c8 2000 	streq.w	r2, [r8]
 80100b8:	605a      	strne	r2, [r3, #4]
 80100ba:	e7eb      	b.n	8010094 <_malloc_r+0xa8>
 80100bc:	4623      	mov	r3, r4
 80100be:	6864      	ldr	r4, [r4, #4]
 80100c0:	e7ae      	b.n	8010020 <_malloc_r+0x34>
 80100c2:	463c      	mov	r4, r7
 80100c4:	687f      	ldr	r7, [r7, #4]
 80100c6:	e7b6      	b.n	8010036 <_malloc_r+0x4a>
 80100c8:	461a      	mov	r2, r3
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	d1fb      	bne.n	80100c8 <_malloc_r+0xdc>
 80100d0:	2300      	movs	r3, #0
 80100d2:	6053      	str	r3, [r2, #4]
 80100d4:	e7de      	b.n	8010094 <_malloc_r+0xa8>
 80100d6:	230c      	movs	r3, #12
 80100d8:	6033      	str	r3, [r6, #0]
 80100da:	4630      	mov	r0, r6
 80100dc:	f000 f80c 	bl	80100f8 <__malloc_unlock>
 80100e0:	e794      	b.n	801000c <_malloc_r+0x20>
 80100e2:	6005      	str	r5, [r0, #0]
 80100e4:	e7d6      	b.n	8010094 <_malloc_r+0xa8>
 80100e6:	bf00      	nop
 80100e8:	200022b4 	.word	0x200022b4

080100ec <__malloc_lock>:
 80100ec:	4801      	ldr	r0, [pc, #4]	@ (80100f4 <__malloc_lock+0x8>)
 80100ee:	f000 be14 	b.w	8010d1a <__retarget_lock_acquire_recursive>
 80100f2:	bf00      	nop
 80100f4:	200023f8 	.word	0x200023f8

080100f8 <__malloc_unlock>:
 80100f8:	4801      	ldr	r0, [pc, #4]	@ (8010100 <__malloc_unlock+0x8>)
 80100fa:	f000 be0f 	b.w	8010d1c <__retarget_lock_release_recursive>
 80100fe:	bf00      	nop
 8010100:	200023f8 	.word	0x200023f8

08010104 <__cvt>:
 8010104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	ec57 6b10 	vmov	r6, r7, d0
 801010c:	2f00      	cmp	r7, #0
 801010e:	460c      	mov	r4, r1
 8010110:	4619      	mov	r1, r3
 8010112:	463b      	mov	r3, r7
 8010114:	bfbb      	ittet	lt
 8010116:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801011a:	461f      	movlt	r7, r3
 801011c:	2300      	movge	r3, #0
 801011e:	232d      	movlt	r3, #45	@ 0x2d
 8010120:	700b      	strb	r3, [r1, #0]
 8010122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010124:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010128:	4691      	mov	r9, r2
 801012a:	f023 0820 	bic.w	r8, r3, #32
 801012e:	bfbc      	itt	lt
 8010130:	4632      	movlt	r2, r6
 8010132:	4616      	movlt	r6, r2
 8010134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010138:	d005      	beq.n	8010146 <__cvt+0x42>
 801013a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801013e:	d100      	bne.n	8010142 <__cvt+0x3e>
 8010140:	3401      	adds	r4, #1
 8010142:	2102      	movs	r1, #2
 8010144:	e000      	b.n	8010148 <__cvt+0x44>
 8010146:	2103      	movs	r1, #3
 8010148:	ab03      	add	r3, sp, #12
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	ab02      	add	r3, sp, #8
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	ec47 6b10 	vmov	d0, r6, r7
 8010154:	4653      	mov	r3, sl
 8010156:	4622      	mov	r2, r4
 8010158:	f000 fe6a 	bl	8010e30 <_dtoa_r>
 801015c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010160:	4605      	mov	r5, r0
 8010162:	d119      	bne.n	8010198 <__cvt+0x94>
 8010164:	f019 0f01 	tst.w	r9, #1
 8010168:	d00e      	beq.n	8010188 <__cvt+0x84>
 801016a:	eb00 0904 	add.w	r9, r0, r4
 801016e:	2200      	movs	r2, #0
 8010170:	2300      	movs	r3, #0
 8010172:	4630      	mov	r0, r6
 8010174:	4639      	mov	r1, r7
 8010176:	f7f0 fccf 	bl	8000b18 <__aeabi_dcmpeq>
 801017a:	b108      	cbz	r0, 8010180 <__cvt+0x7c>
 801017c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010180:	2230      	movs	r2, #48	@ 0x30
 8010182:	9b03      	ldr	r3, [sp, #12]
 8010184:	454b      	cmp	r3, r9
 8010186:	d31e      	bcc.n	80101c6 <__cvt+0xc2>
 8010188:	9b03      	ldr	r3, [sp, #12]
 801018a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801018c:	1b5b      	subs	r3, r3, r5
 801018e:	4628      	mov	r0, r5
 8010190:	6013      	str	r3, [r2, #0]
 8010192:	b004      	add	sp, #16
 8010194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801019c:	eb00 0904 	add.w	r9, r0, r4
 80101a0:	d1e5      	bne.n	801016e <__cvt+0x6a>
 80101a2:	7803      	ldrb	r3, [r0, #0]
 80101a4:	2b30      	cmp	r3, #48	@ 0x30
 80101a6:	d10a      	bne.n	80101be <__cvt+0xba>
 80101a8:	2200      	movs	r2, #0
 80101aa:	2300      	movs	r3, #0
 80101ac:	4630      	mov	r0, r6
 80101ae:	4639      	mov	r1, r7
 80101b0:	f7f0 fcb2 	bl	8000b18 <__aeabi_dcmpeq>
 80101b4:	b918      	cbnz	r0, 80101be <__cvt+0xba>
 80101b6:	f1c4 0401 	rsb	r4, r4, #1
 80101ba:	f8ca 4000 	str.w	r4, [sl]
 80101be:	f8da 3000 	ldr.w	r3, [sl]
 80101c2:	4499      	add	r9, r3
 80101c4:	e7d3      	b.n	801016e <__cvt+0x6a>
 80101c6:	1c59      	adds	r1, r3, #1
 80101c8:	9103      	str	r1, [sp, #12]
 80101ca:	701a      	strb	r2, [r3, #0]
 80101cc:	e7d9      	b.n	8010182 <__cvt+0x7e>

080101ce <__exponent>:
 80101ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101d0:	2900      	cmp	r1, #0
 80101d2:	bfba      	itte	lt
 80101d4:	4249      	neglt	r1, r1
 80101d6:	232d      	movlt	r3, #45	@ 0x2d
 80101d8:	232b      	movge	r3, #43	@ 0x2b
 80101da:	2909      	cmp	r1, #9
 80101dc:	7002      	strb	r2, [r0, #0]
 80101de:	7043      	strb	r3, [r0, #1]
 80101e0:	dd29      	ble.n	8010236 <__exponent+0x68>
 80101e2:	f10d 0307 	add.w	r3, sp, #7
 80101e6:	461d      	mov	r5, r3
 80101e8:	270a      	movs	r7, #10
 80101ea:	461a      	mov	r2, r3
 80101ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80101f0:	fb07 1416 	mls	r4, r7, r6, r1
 80101f4:	3430      	adds	r4, #48	@ 0x30
 80101f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80101fa:	460c      	mov	r4, r1
 80101fc:	2c63      	cmp	r4, #99	@ 0x63
 80101fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8010202:	4631      	mov	r1, r6
 8010204:	dcf1      	bgt.n	80101ea <__exponent+0x1c>
 8010206:	3130      	adds	r1, #48	@ 0x30
 8010208:	1e94      	subs	r4, r2, #2
 801020a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801020e:	1c41      	adds	r1, r0, #1
 8010210:	4623      	mov	r3, r4
 8010212:	42ab      	cmp	r3, r5
 8010214:	d30a      	bcc.n	801022c <__exponent+0x5e>
 8010216:	f10d 0309 	add.w	r3, sp, #9
 801021a:	1a9b      	subs	r3, r3, r2
 801021c:	42ac      	cmp	r4, r5
 801021e:	bf88      	it	hi
 8010220:	2300      	movhi	r3, #0
 8010222:	3302      	adds	r3, #2
 8010224:	4403      	add	r3, r0
 8010226:	1a18      	subs	r0, r3, r0
 8010228:	b003      	add	sp, #12
 801022a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801022c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010230:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010234:	e7ed      	b.n	8010212 <__exponent+0x44>
 8010236:	2330      	movs	r3, #48	@ 0x30
 8010238:	3130      	adds	r1, #48	@ 0x30
 801023a:	7083      	strb	r3, [r0, #2]
 801023c:	70c1      	strb	r1, [r0, #3]
 801023e:	1d03      	adds	r3, r0, #4
 8010240:	e7f1      	b.n	8010226 <__exponent+0x58>
	...

08010244 <_printf_float>:
 8010244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010248:	b08d      	sub	sp, #52	@ 0x34
 801024a:	460c      	mov	r4, r1
 801024c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010250:	4616      	mov	r6, r2
 8010252:	461f      	mov	r7, r3
 8010254:	4605      	mov	r5, r0
 8010256:	f000 fcdb 	bl	8010c10 <_localeconv_r>
 801025a:	6803      	ldr	r3, [r0, #0]
 801025c:	9304      	str	r3, [sp, #16]
 801025e:	4618      	mov	r0, r3
 8010260:	f7f0 f82e 	bl	80002c0 <strlen>
 8010264:	2300      	movs	r3, #0
 8010266:	930a      	str	r3, [sp, #40]	@ 0x28
 8010268:	f8d8 3000 	ldr.w	r3, [r8]
 801026c:	9005      	str	r0, [sp, #20]
 801026e:	3307      	adds	r3, #7
 8010270:	f023 0307 	bic.w	r3, r3, #7
 8010274:	f103 0208 	add.w	r2, r3, #8
 8010278:	f894 a018 	ldrb.w	sl, [r4, #24]
 801027c:	f8d4 b000 	ldr.w	fp, [r4]
 8010280:	f8c8 2000 	str.w	r2, [r8]
 8010284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010288:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801028c:	9307      	str	r3, [sp, #28]
 801028e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010292:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801029a:	4b9c      	ldr	r3, [pc, #624]	@ (801050c <_printf_float+0x2c8>)
 801029c:	f04f 32ff 	mov.w	r2, #4294967295
 80102a0:	f7f0 fc6c 	bl	8000b7c <__aeabi_dcmpun>
 80102a4:	bb70      	cbnz	r0, 8010304 <_printf_float+0xc0>
 80102a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102aa:	4b98      	ldr	r3, [pc, #608]	@ (801050c <_printf_float+0x2c8>)
 80102ac:	f04f 32ff 	mov.w	r2, #4294967295
 80102b0:	f7f0 fc46 	bl	8000b40 <__aeabi_dcmple>
 80102b4:	bb30      	cbnz	r0, 8010304 <_printf_float+0xc0>
 80102b6:	2200      	movs	r2, #0
 80102b8:	2300      	movs	r3, #0
 80102ba:	4640      	mov	r0, r8
 80102bc:	4649      	mov	r1, r9
 80102be:	f7f0 fc35 	bl	8000b2c <__aeabi_dcmplt>
 80102c2:	b110      	cbz	r0, 80102ca <_printf_float+0x86>
 80102c4:	232d      	movs	r3, #45	@ 0x2d
 80102c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102ca:	4a91      	ldr	r2, [pc, #580]	@ (8010510 <_printf_float+0x2cc>)
 80102cc:	4b91      	ldr	r3, [pc, #580]	@ (8010514 <_printf_float+0x2d0>)
 80102ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80102d2:	bf8c      	ite	hi
 80102d4:	4690      	movhi	r8, r2
 80102d6:	4698      	movls	r8, r3
 80102d8:	2303      	movs	r3, #3
 80102da:	6123      	str	r3, [r4, #16]
 80102dc:	f02b 0304 	bic.w	r3, fp, #4
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	f04f 0900 	mov.w	r9, #0
 80102e6:	9700      	str	r7, [sp, #0]
 80102e8:	4633      	mov	r3, r6
 80102ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80102ec:	4621      	mov	r1, r4
 80102ee:	4628      	mov	r0, r5
 80102f0:	f000 f9d2 	bl	8010698 <_printf_common>
 80102f4:	3001      	adds	r0, #1
 80102f6:	f040 808d 	bne.w	8010414 <_printf_float+0x1d0>
 80102fa:	f04f 30ff 	mov.w	r0, #4294967295
 80102fe:	b00d      	add	sp, #52	@ 0x34
 8010300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010304:	4642      	mov	r2, r8
 8010306:	464b      	mov	r3, r9
 8010308:	4640      	mov	r0, r8
 801030a:	4649      	mov	r1, r9
 801030c:	f7f0 fc36 	bl	8000b7c <__aeabi_dcmpun>
 8010310:	b140      	cbz	r0, 8010324 <_printf_float+0xe0>
 8010312:	464b      	mov	r3, r9
 8010314:	2b00      	cmp	r3, #0
 8010316:	bfbc      	itt	lt
 8010318:	232d      	movlt	r3, #45	@ 0x2d
 801031a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801031e:	4a7e      	ldr	r2, [pc, #504]	@ (8010518 <_printf_float+0x2d4>)
 8010320:	4b7e      	ldr	r3, [pc, #504]	@ (801051c <_printf_float+0x2d8>)
 8010322:	e7d4      	b.n	80102ce <_printf_float+0x8a>
 8010324:	6863      	ldr	r3, [r4, #4]
 8010326:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801032a:	9206      	str	r2, [sp, #24]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	d13b      	bne.n	80103a8 <_printf_float+0x164>
 8010330:	2306      	movs	r3, #6
 8010332:	6063      	str	r3, [r4, #4]
 8010334:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010338:	2300      	movs	r3, #0
 801033a:	6022      	str	r2, [r4, #0]
 801033c:	9303      	str	r3, [sp, #12]
 801033e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010340:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010344:	ab09      	add	r3, sp, #36	@ 0x24
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	6861      	ldr	r1, [r4, #4]
 801034a:	ec49 8b10 	vmov	d0, r8, r9
 801034e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010352:	4628      	mov	r0, r5
 8010354:	f7ff fed6 	bl	8010104 <__cvt>
 8010358:	9b06      	ldr	r3, [sp, #24]
 801035a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801035c:	2b47      	cmp	r3, #71	@ 0x47
 801035e:	4680      	mov	r8, r0
 8010360:	d129      	bne.n	80103b6 <_printf_float+0x172>
 8010362:	1cc8      	adds	r0, r1, #3
 8010364:	db02      	blt.n	801036c <_printf_float+0x128>
 8010366:	6863      	ldr	r3, [r4, #4]
 8010368:	4299      	cmp	r1, r3
 801036a:	dd41      	ble.n	80103f0 <_printf_float+0x1ac>
 801036c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010370:	fa5f fa8a 	uxtb.w	sl, sl
 8010374:	3901      	subs	r1, #1
 8010376:	4652      	mov	r2, sl
 8010378:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801037c:	9109      	str	r1, [sp, #36]	@ 0x24
 801037e:	f7ff ff26 	bl	80101ce <__exponent>
 8010382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010384:	1813      	adds	r3, r2, r0
 8010386:	2a01      	cmp	r2, #1
 8010388:	4681      	mov	r9, r0
 801038a:	6123      	str	r3, [r4, #16]
 801038c:	dc02      	bgt.n	8010394 <_printf_float+0x150>
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	07d2      	lsls	r2, r2, #31
 8010392:	d501      	bpl.n	8010398 <_printf_float+0x154>
 8010394:	3301      	adds	r3, #1
 8010396:	6123      	str	r3, [r4, #16]
 8010398:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801039c:	2b00      	cmp	r3, #0
 801039e:	d0a2      	beq.n	80102e6 <_printf_float+0xa2>
 80103a0:	232d      	movs	r3, #45	@ 0x2d
 80103a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103a6:	e79e      	b.n	80102e6 <_printf_float+0xa2>
 80103a8:	9a06      	ldr	r2, [sp, #24]
 80103aa:	2a47      	cmp	r2, #71	@ 0x47
 80103ac:	d1c2      	bne.n	8010334 <_printf_float+0xf0>
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1c0      	bne.n	8010334 <_printf_float+0xf0>
 80103b2:	2301      	movs	r3, #1
 80103b4:	e7bd      	b.n	8010332 <_printf_float+0xee>
 80103b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80103ba:	d9db      	bls.n	8010374 <_printf_float+0x130>
 80103bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80103c0:	d118      	bne.n	80103f4 <_printf_float+0x1b0>
 80103c2:	2900      	cmp	r1, #0
 80103c4:	6863      	ldr	r3, [r4, #4]
 80103c6:	dd0b      	ble.n	80103e0 <_printf_float+0x19c>
 80103c8:	6121      	str	r1, [r4, #16]
 80103ca:	b913      	cbnz	r3, 80103d2 <_printf_float+0x18e>
 80103cc:	6822      	ldr	r2, [r4, #0]
 80103ce:	07d0      	lsls	r0, r2, #31
 80103d0:	d502      	bpl.n	80103d8 <_printf_float+0x194>
 80103d2:	3301      	adds	r3, #1
 80103d4:	440b      	add	r3, r1
 80103d6:	6123      	str	r3, [r4, #16]
 80103d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80103da:	f04f 0900 	mov.w	r9, #0
 80103de:	e7db      	b.n	8010398 <_printf_float+0x154>
 80103e0:	b913      	cbnz	r3, 80103e8 <_printf_float+0x1a4>
 80103e2:	6822      	ldr	r2, [r4, #0]
 80103e4:	07d2      	lsls	r2, r2, #31
 80103e6:	d501      	bpl.n	80103ec <_printf_float+0x1a8>
 80103e8:	3302      	adds	r3, #2
 80103ea:	e7f4      	b.n	80103d6 <_printf_float+0x192>
 80103ec:	2301      	movs	r3, #1
 80103ee:	e7f2      	b.n	80103d6 <_printf_float+0x192>
 80103f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80103f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103f6:	4299      	cmp	r1, r3
 80103f8:	db05      	blt.n	8010406 <_printf_float+0x1c2>
 80103fa:	6823      	ldr	r3, [r4, #0]
 80103fc:	6121      	str	r1, [r4, #16]
 80103fe:	07d8      	lsls	r0, r3, #31
 8010400:	d5ea      	bpl.n	80103d8 <_printf_float+0x194>
 8010402:	1c4b      	adds	r3, r1, #1
 8010404:	e7e7      	b.n	80103d6 <_printf_float+0x192>
 8010406:	2900      	cmp	r1, #0
 8010408:	bfd4      	ite	le
 801040a:	f1c1 0202 	rsble	r2, r1, #2
 801040e:	2201      	movgt	r2, #1
 8010410:	4413      	add	r3, r2
 8010412:	e7e0      	b.n	80103d6 <_printf_float+0x192>
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	055a      	lsls	r2, r3, #21
 8010418:	d407      	bmi.n	801042a <_printf_float+0x1e6>
 801041a:	6923      	ldr	r3, [r4, #16]
 801041c:	4642      	mov	r2, r8
 801041e:	4631      	mov	r1, r6
 8010420:	4628      	mov	r0, r5
 8010422:	47b8      	blx	r7
 8010424:	3001      	adds	r0, #1
 8010426:	d12b      	bne.n	8010480 <_printf_float+0x23c>
 8010428:	e767      	b.n	80102fa <_printf_float+0xb6>
 801042a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801042e:	f240 80dd 	bls.w	80105ec <_printf_float+0x3a8>
 8010432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010436:	2200      	movs	r2, #0
 8010438:	2300      	movs	r3, #0
 801043a:	f7f0 fb6d 	bl	8000b18 <__aeabi_dcmpeq>
 801043e:	2800      	cmp	r0, #0
 8010440:	d033      	beq.n	80104aa <_printf_float+0x266>
 8010442:	4a37      	ldr	r2, [pc, #220]	@ (8010520 <_printf_float+0x2dc>)
 8010444:	2301      	movs	r3, #1
 8010446:	4631      	mov	r1, r6
 8010448:	4628      	mov	r0, r5
 801044a:	47b8      	blx	r7
 801044c:	3001      	adds	r0, #1
 801044e:	f43f af54 	beq.w	80102fa <_printf_float+0xb6>
 8010452:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010456:	4543      	cmp	r3, r8
 8010458:	db02      	blt.n	8010460 <_printf_float+0x21c>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	07d8      	lsls	r0, r3, #31
 801045e:	d50f      	bpl.n	8010480 <_printf_float+0x23c>
 8010460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010464:	4631      	mov	r1, r6
 8010466:	4628      	mov	r0, r5
 8010468:	47b8      	blx	r7
 801046a:	3001      	adds	r0, #1
 801046c:	f43f af45 	beq.w	80102fa <_printf_float+0xb6>
 8010470:	f04f 0900 	mov.w	r9, #0
 8010474:	f108 38ff 	add.w	r8, r8, #4294967295
 8010478:	f104 0a1a 	add.w	sl, r4, #26
 801047c:	45c8      	cmp	r8, r9
 801047e:	dc09      	bgt.n	8010494 <_printf_float+0x250>
 8010480:	6823      	ldr	r3, [r4, #0]
 8010482:	079b      	lsls	r3, r3, #30
 8010484:	f100 8103 	bmi.w	801068e <_printf_float+0x44a>
 8010488:	68e0      	ldr	r0, [r4, #12]
 801048a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801048c:	4298      	cmp	r0, r3
 801048e:	bfb8      	it	lt
 8010490:	4618      	movlt	r0, r3
 8010492:	e734      	b.n	80102fe <_printf_float+0xba>
 8010494:	2301      	movs	r3, #1
 8010496:	4652      	mov	r2, sl
 8010498:	4631      	mov	r1, r6
 801049a:	4628      	mov	r0, r5
 801049c:	47b8      	blx	r7
 801049e:	3001      	adds	r0, #1
 80104a0:	f43f af2b 	beq.w	80102fa <_printf_float+0xb6>
 80104a4:	f109 0901 	add.w	r9, r9, #1
 80104a8:	e7e8      	b.n	801047c <_printf_float+0x238>
 80104aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	dc39      	bgt.n	8010524 <_printf_float+0x2e0>
 80104b0:	4a1b      	ldr	r2, [pc, #108]	@ (8010520 <_printf_float+0x2dc>)
 80104b2:	2301      	movs	r3, #1
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b8      	blx	r7
 80104ba:	3001      	adds	r0, #1
 80104bc:	f43f af1d 	beq.w	80102fa <_printf_float+0xb6>
 80104c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80104c4:	ea59 0303 	orrs.w	r3, r9, r3
 80104c8:	d102      	bne.n	80104d0 <_printf_float+0x28c>
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	07d9      	lsls	r1, r3, #31
 80104ce:	d5d7      	bpl.n	8010480 <_printf_float+0x23c>
 80104d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104d4:	4631      	mov	r1, r6
 80104d6:	4628      	mov	r0, r5
 80104d8:	47b8      	blx	r7
 80104da:	3001      	adds	r0, #1
 80104dc:	f43f af0d 	beq.w	80102fa <_printf_float+0xb6>
 80104e0:	f04f 0a00 	mov.w	sl, #0
 80104e4:	f104 0b1a 	add.w	fp, r4, #26
 80104e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ea:	425b      	negs	r3, r3
 80104ec:	4553      	cmp	r3, sl
 80104ee:	dc01      	bgt.n	80104f4 <_printf_float+0x2b0>
 80104f0:	464b      	mov	r3, r9
 80104f2:	e793      	b.n	801041c <_printf_float+0x1d8>
 80104f4:	2301      	movs	r3, #1
 80104f6:	465a      	mov	r2, fp
 80104f8:	4631      	mov	r1, r6
 80104fa:	4628      	mov	r0, r5
 80104fc:	47b8      	blx	r7
 80104fe:	3001      	adds	r0, #1
 8010500:	f43f aefb 	beq.w	80102fa <_printf_float+0xb6>
 8010504:	f10a 0a01 	add.w	sl, sl, #1
 8010508:	e7ee      	b.n	80104e8 <_printf_float+0x2a4>
 801050a:	bf00      	nop
 801050c:	7fefffff 	.word	0x7fefffff
 8010510:	08013eb0 	.word	0x08013eb0
 8010514:	08013eac 	.word	0x08013eac
 8010518:	08013eb8 	.word	0x08013eb8
 801051c:	08013eb4 	.word	0x08013eb4
 8010520:	08013ebc 	.word	0x08013ebc
 8010524:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010526:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801052a:	4553      	cmp	r3, sl
 801052c:	bfa8      	it	ge
 801052e:	4653      	movge	r3, sl
 8010530:	2b00      	cmp	r3, #0
 8010532:	4699      	mov	r9, r3
 8010534:	dc36      	bgt.n	80105a4 <_printf_float+0x360>
 8010536:	f04f 0b00 	mov.w	fp, #0
 801053a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801053e:	f104 021a 	add.w	r2, r4, #26
 8010542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010544:	9306      	str	r3, [sp, #24]
 8010546:	eba3 0309 	sub.w	r3, r3, r9
 801054a:	455b      	cmp	r3, fp
 801054c:	dc31      	bgt.n	80105b2 <_printf_float+0x36e>
 801054e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010550:	459a      	cmp	sl, r3
 8010552:	dc3a      	bgt.n	80105ca <_printf_float+0x386>
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	07da      	lsls	r2, r3, #31
 8010558:	d437      	bmi.n	80105ca <_printf_float+0x386>
 801055a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801055c:	ebaa 0903 	sub.w	r9, sl, r3
 8010560:	9b06      	ldr	r3, [sp, #24]
 8010562:	ebaa 0303 	sub.w	r3, sl, r3
 8010566:	4599      	cmp	r9, r3
 8010568:	bfa8      	it	ge
 801056a:	4699      	movge	r9, r3
 801056c:	f1b9 0f00 	cmp.w	r9, #0
 8010570:	dc33      	bgt.n	80105da <_printf_float+0x396>
 8010572:	f04f 0800 	mov.w	r8, #0
 8010576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801057a:	f104 0b1a 	add.w	fp, r4, #26
 801057e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010580:	ebaa 0303 	sub.w	r3, sl, r3
 8010584:	eba3 0309 	sub.w	r3, r3, r9
 8010588:	4543      	cmp	r3, r8
 801058a:	f77f af79 	ble.w	8010480 <_printf_float+0x23c>
 801058e:	2301      	movs	r3, #1
 8010590:	465a      	mov	r2, fp
 8010592:	4631      	mov	r1, r6
 8010594:	4628      	mov	r0, r5
 8010596:	47b8      	blx	r7
 8010598:	3001      	adds	r0, #1
 801059a:	f43f aeae 	beq.w	80102fa <_printf_float+0xb6>
 801059e:	f108 0801 	add.w	r8, r8, #1
 80105a2:	e7ec      	b.n	801057e <_printf_float+0x33a>
 80105a4:	4642      	mov	r2, r8
 80105a6:	4631      	mov	r1, r6
 80105a8:	4628      	mov	r0, r5
 80105aa:	47b8      	blx	r7
 80105ac:	3001      	adds	r0, #1
 80105ae:	d1c2      	bne.n	8010536 <_printf_float+0x2f2>
 80105b0:	e6a3      	b.n	80102fa <_printf_float+0xb6>
 80105b2:	2301      	movs	r3, #1
 80105b4:	4631      	mov	r1, r6
 80105b6:	4628      	mov	r0, r5
 80105b8:	9206      	str	r2, [sp, #24]
 80105ba:	47b8      	blx	r7
 80105bc:	3001      	adds	r0, #1
 80105be:	f43f ae9c 	beq.w	80102fa <_printf_float+0xb6>
 80105c2:	9a06      	ldr	r2, [sp, #24]
 80105c4:	f10b 0b01 	add.w	fp, fp, #1
 80105c8:	e7bb      	b.n	8010542 <_printf_float+0x2fe>
 80105ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105ce:	4631      	mov	r1, r6
 80105d0:	4628      	mov	r0, r5
 80105d2:	47b8      	blx	r7
 80105d4:	3001      	adds	r0, #1
 80105d6:	d1c0      	bne.n	801055a <_printf_float+0x316>
 80105d8:	e68f      	b.n	80102fa <_printf_float+0xb6>
 80105da:	9a06      	ldr	r2, [sp, #24]
 80105dc:	464b      	mov	r3, r9
 80105de:	4442      	add	r2, r8
 80105e0:	4631      	mov	r1, r6
 80105e2:	4628      	mov	r0, r5
 80105e4:	47b8      	blx	r7
 80105e6:	3001      	adds	r0, #1
 80105e8:	d1c3      	bne.n	8010572 <_printf_float+0x32e>
 80105ea:	e686      	b.n	80102fa <_printf_float+0xb6>
 80105ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80105f0:	f1ba 0f01 	cmp.w	sl, #1
 80105f4:	dc01      	bgt.n	80105fa <_printf_float+0x3b6>
 80105f6:	07db      	lsls	r3, r3, #31
 80105f8:	d536      	bpl.n	8010668 <_printf_float+0x424>
 80105fa:	2301      	movs	r3, #1
 80105fc:	4642      	mov	r2, r8
 80105fe:	4631      	mov	r1, r6
 8010600:	4628      	mov	r0, r5
 8010602:	47b8      	blx	r7
 8010604:	3001      	adds	r0, #1
 8010606:	f43f ae78 	beq.w	80102fa <_printf_float+0xb6>
 801060a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801060e:	4631      	mov	r1, r6
 8010610:	4628      	mov	r0, r5
 8010612:	47b8      	blx	r7
 8010614:	3001      	adds	r0, #1
 8010616:	f43f ae70 	beq.w	80102fa <_printf_float+0xb6>
 801061a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801061e:	2200      	movs	r2, #0
 8010620:	2300      	movs	r3, #0
 8010622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010626:	f7f0 fa77 	bl	8000b18 <__aeabi_dcmpeq>
 801062a:	b9c0      	cbnz	r0, 801065e <_printf_float+0x41a>
 801062c:	4653      	mov	r3, sl
 801062e:	f108 0201 	add.w	r2, r8, #1
 8010632:	4631      	mov	r1, r6
 8010634:	4628      	mov	r0, r5
 8010636:	47b8      	blx	r7
 8010638:	3001      	adds	r0, #1
 801063a:	d10c      	bne.n	8010656 <_printf_float+0x412>
 801063c:	e65d      	b.n	80102fa <_printf_float+0xb6>
 801063e:	2301      	movs	r3, #1
 8010640:	465a      	mov	r2, fp
 8010642:	4631      	mov	r1, r6
 8010644:	4628      	mov	r0, r5
 8010646:	47b8      	blx	r7
 8010648:	3001      	adds	r0, #1
 801064a:	f43f ae56 	beq.w	80102fa <_printf_float+0xb6>
 801064e:	f108 0801 	add.w	r8, r8, #1
 8010652:	45d0      	cmp	r8, sl
 8010654:	dbf3      	blt.n	801063e <_printf_float+0x3fa>
 8010656:	464b      	mov	r3, r9
 8010658:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801065c:	e6df      	b.n	801041e <_printf_float+0x1da>
 801065e:	f04f 0800 	mov.w	r8, #0
 8010662:	f104 0b1a 	add.w	fp, r4, #26
 8010666:	e7f4      	b.n	8010652 <_printf_float+0x40e>
 8010668:	2301      	movs	r3, #1
 801066a:	4642      	mov	r2, r8
 801066c:	e7e1      	b.n	8010632 <_printf_float+0x3ee>
 801066e:	2301      	movs	r3, #1
 8010670:	464a      	mov	r2, r9
 8010672:	4631      	mov	r1, r6
 8010674:	4628      	mov	r0, r5
 8010676:	47b8      	blx	r7
 8010678:	3001      	adds	r0, #1
 801067a:	f43f ae3e 	beq.w	80102fa <_printf_float+0xb6>
 801067e:	f108 0801 	add.w	r8, r8, #1
 8010682:	68e3      	ldr	r3, [r4, #12]
 8010684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010686:	1a5b      	subs	r3, r3, r1
 8010688:	4543      	cmp	r3, r8
 801068a:	dcf0      	bgt.n	801066e <_printf_float+0x42a>
 801068c:	e6fc      	b.n	8010488 <_printf_float+0x244>
 801068e:	f04f 0800 	mov.w	r8, #0
 8010692:	f104 0919 	add.w	r9, r4, #25
 8010696:	e7f4      	b.n	8010682 <_printf_float+0x43e>

08010698 <_printf_common>:
 8010698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801069c:	4616      	mov	r6, r2
 801069e:	4698      	mov	r8, r3
 80106a0:	688a      	ldr	r2, [r1, #8]
 80106a2:	690b      	ldr	r3, [r1, #16]
 80106a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106a8:	4293      	cmp	r3, r2
 80106aa:	bfb8      	it	lt
 80106ac:	4613      	movlt	r3, r2
 80106ae:	6033      	str	r3, [r6, #0]
 80106b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106b4:	4607      	mov	r7, r0
 80106b6:	460c      	mov	r4, r1
 80106b8:	b10a      	cbz	r2, 80106be <_printf_common+0x26>
 80106ba:	3301      	adds	r3, #1
 80106bc:	6033      	str	r3, [r6, #0]
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	0699      	lsls	r1, r3, #26
 80106c2:	bf42      	ittt	mi
 80106c4:	6833      	ldrmi	r3, [r6, #0]
 80106c6:	3302      	addmi	r3, #2
 80106c8:	6033      	strmi	r3, [r6, #0]
 80106ca:	6825      	ldr	r5, [r4, #0]
 80106cc:	f015 0506 	ands.w	r5, r5, #6
 80106d0:	d106      	bne.n	80106e0 <_printf_common+0x48>
 80106d2:	f104 0a19 	add.w	sl, r4, #25
 80106d6:	68e3      	ldr	r3, [r4, #12]
 80106d8:	6832      	ldr	r2, [r6, #0]
 80106da:	1a9b      	subs	r3, r3, r2
 80106dc:	42ab      	cmp	r3, r5
 80106de:	dc26      	bgt.n	801072e <_printf_common+0x96>
 80106e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106e4:	6822      	ldr	r2, [r4, #0]
 80106e6:	3b00      	subs	r3, #0
 80106e8:	bf18      	it	ne
 80106ea:	2301      	movne	r3, #1
 80106ec:	0692      	lsls	r2, r2, #26
 80106ee:	d42b      	bmi.n	8010748 <_printf_common+0xb0>
 80106f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106f4:	4641      	mov	r1, r8
 80106f6:	4638      	mov	r0, r7
 80106f8:	47c8      	blx	r9
 80106fa:	3001      	adds	r0, #1
 80106fc:	d01e      	beq.n	801073c <_printf_common+0xa4>
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	6922      	ldr	r2, [r4, #16]
 8010702:	f003 0306 	and.w	r3, r3, #6
 8010706:	2b04      	cmp	r3, #4
 8010708:	bf02      	ittt	eq
 801070a:	68e5      	ldreq	r5, [r4, #12]
 801070c:	6833      	ldreq	r3, [r6, #0]
 801070e:	1aed      	subeq	r5, r5, r3
 8010710:	68a3      	ldr	r3, [r4, #8]
 8010712:	bf0c      	ite	eq
 8010714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010718:	2500      	movne	r5, #0
 801071a:	4293      	cmp	r3, r2
 801071c:	bfc4      	itt	gt
 801071e:	1a9b      	subgt	r3, r3, r2
 8010720:	18ed      	addgt	r5, r5, r3
 8010722:	2600      	movs	r6, #0
 8010724:	341a      	adds	r4, #26
 8010726:	42b5      	cmp	r5, r6
 8010728:	d11a      	bne.n	8010760 <_printf_common+0xc8>
 801072a:	2000      	movs	r0, #0
 801072c:	e008      	b.n	8010740 <_printf_common+0xa8>
 801072e:	2301      	movs	r3, #1
 8010730:	4652      	mov	r2, sl
 8010732:	4641      	mov	r1, r8
 8010734:	4638      	mov	r0, r7
 8010736:	47c8      	blx	r9
 8010738:	3001      	adds	r0, #1
 801073a:	d103      	bne.n	8010744 <_printf_common+0xac>
 801073c:	f04f 30ff 	mov.w	r0, #4294967295
 8010740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010744:	3501      	adds	r5, #1
 8010746:	e7c6      	b.n	80106d6 <_printf_common+0x3e>
 8010748:	18e1      	adds	r1, r4, r3
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	2030      	movs	r0, #48	@ 0x30
 801074e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010752:	4422      	add	r2, r4
 8010754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801075c:	3302      	adds	r3, #2
 801075e:	e7c7      	b.n	80106f0 <_printf_common+0x58>
 8010760:	2301      	movs	r3, #1
 8010762:	4622      	mov	r2, r4
 8010764:	4641      	mov	r1, r8
 8010766:	4638      	mov	r0, r7
 8010768:	47c8      	blx	r9
 801076a:	3001      	adds	r0, #1
 801076c:	d0e6      	beq.n	801073c <_printf_common+0xa4>
 801076e:	3601      	adds	r6, #1
 8010770:	e7d9      	b.n	8010726 <_printf_common+0x8e>
	...

08010774 <_printf_i>:
 8010774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010778:	7e0f      	ldrb	r7, [r1, #24]
 801077a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801077c:	2f78      	cmp	r7, #120	@ 0x78
 801077e:	4691      	mov	r9, r2
 8010780:	4680      	mov	r8, r0
 8010782:	460c      	mov	r4, r1
 8010784:	469a      	mov	sl, r3
 8010786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801078a:	d807      	bhi.n	801079c <_printf_i+0x28>
 801078c:	2f62      	cmp	r7, #98	@ 0x62
 801078e:	d80a      	bhi.n	80107a6 <_printf_i+0x32>
 8010790:	2f00      	cmp	r7, #0
 8010792:	f000 80d1 	beq.w	8010938 <_printf_i+0x1c4>
 8010796:	2f58      	cmp	r7, #88	@ 0x58
 8010798:	f000 80b8 	beq.w	801090c <_printf_i+0x198>
 801079c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107a4:	e03a      	b.n	801081c <_printf_i+0xa8>
 80107a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107aa:	2b15      	cmp	r3, #21
 80107ac:	d8f6      	bhi.n	801079c <_printf_i+0x28>
 80107ae:	a101      	add	r1, pc, #4	@ (adr r1, 80107b4 <_printf_i+0x40>)
 80107b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107b4:	0801080d 	.word	0x0801080d
 80107b8:	08010821 	.word	0x08010821
 80107bc:	0801079d 	.word	0x0801079d
 80107c0:	0801079d 	.word	0x0801079d
 80107c4:	0801079d 	.word	0x0801079d
 80107c8:	0801079d 	.word	0x0801079d
 80107cc:	08010821 	.word	0x08010821
 80107d0:	0801079d 	.word	0x0801079d
 80107d4:	0801079d 	.word	0x0801079d
 80107d8:	0801079d 	.word	0x0801079d
 80107dc:	0801079d 	.word	0x0801079d
 80107e0:	0801091f 	.word	0x0801091f
 80107e4:	0801084b 	.word	0x0801084b
 80107e8:	080108d9 	.word	0x080108d9
 80107ec:	0801079d 	.word	0x0801079d
 80107f0:	0801079d 	.word	0x0801079d
 80107f4:	08010941 	.word	0x08010941
 80107f8:	0801079d 	.word	0x0801079d
 80107fc:	0801084b 	.word	0x0801084b
 8010800:	0801079d 	.word	0x0801079d
 8010804:	0801079d 	.word	0x0801079d
 8010808:	080108e1 	.word	0x080108e1
 801080c:	6833      	ldr	r3, [r6, #0]
 801080e:	1d1a      	adds	r2, r3, #4
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	6032      	str	r2, [r6, #0]
 8010814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801081c:	2301      	movs	r3, #1
 801081e:	e09c      	b.n	801095a <_printf_i+0x1e6>
 8010820:	6833      	ldr	r3, [r6, #0]
 8010822:	6820      	ldr	r0, [r4, #0]
 8010824:	1d19      	adds	r1, r3, #4
 8010826:	6031      	str	r1, [r6, #0]
 8010828:	0606      	lsls	r6, r0, #24
 801082a:	d501      	bpl.n	8010830 <_printf_i+0xbc>
 801082c:	681d      	ldr	r5, [r3, #0]
 801082e:	e003      	b.n	8010838 <_printf_i+0xc4>
 8010830:	0645      	lsls	r5, r0, #25
 8010832:	d5fb      	bpl.n	801082c <_printf_i+0xb8>
 8010834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010838:	2d00      	cmp	r5, #0
 801083a:	da03      	bge.n	8010844 <_printf_i+0xd0>
 801083c:	232d      	movs	r3, #45	@ 0x2d
 801083e:	426d      	negs	r5, r5
 8010840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010844:	4858      	ldr	r0, [pc, #352]	@ (80109a8 <_printf_i+0x234>)
 8010846:	230a      	movs	r3, #10
 8010848:	e011      	b.n	801086e <_printf_i+0xfa>
 801084a:	6821      	ldr	r1, [r4, #0]
 801084c:	6833      	ldr	r3, [r6, #0]
 801084e:	0608      	lsls	r0, r1, #24
 8010850:	f853 5b04 	ldr.w	r5, [r3], #4
 8010854:	d402      	bmi.n	801085c <_printf_i+0xe8>
 8010856:	0649      	lsls	r1, r1, #25
 8010858:	bf48      	it	mi
 801085a:	b2ad      	uxthmi	r5, r5
 801085c:	2f6f      	cmp	r7, #111	@ 0x6f
 801085e:	4852      	ldr	r0, [pc, #328]	@ (80109a8 <_printf_i+0x234>)
 8010860:	6033      	str	r3, [r6, #0]
 8010862:	bf14      	ite	ne
 8010864:	230a      	movne	r3, #10
 8010866:	2308      	moveq	r3, #8
 8010868:	2100      	movs	r1, #0
 801086a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801086e:	6866      	ldr	r6, [r4, #4]
 8010870:	60a6      	str	r6, [r4, #8]
 8010872:	2e00      	cmp	r6, #0
 8010874:	db05      	blt.n	8010882 <_printf_i+0x10e>
 8010876:	6821      	ldr	r1, [r4, #0]
 8010878:	432e      	orrs	r6, r5
 801087a:	f021 0104 	bic.w	r1, r1, #4
 801087e:	6021      	str	r1, [r4, #0]
 8010880:	d04b      	beq.n	801091a <_printf_i+0x1a6>
 8010882:	4616      	mov	r6, r2
 8010884:	fbb5 f1f3 	udiv	r1, r5, r3
 8010888:	fb03 5711 	mls	r7, r3, r1, r5
 801088c:	5dc7      	ldrb	r7, [r0, r7]
 801088e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010892:	462f      	mov	r7, r5
 8010894:	42bb      	cmp	r3, r7
 8010896:	460d      	mov	r5, r1
 8010898:	d9f4      	bls.n	8010884 <_printf_i+0x110>
 801089a:	2b08      	cmp	r3, #8
 801089c:	d10b      	bne.n	80108b6 <_printf_i+0x142>
 801089e:	6823      	ldr	r3, [r4, #0]
 80108a0:	07df      	lsls	r7, r3, #31
 80108a2:	d508      	bpl.n	80108b6 <_printf_i+0x142>
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	6861      	ldr	r1, [r4, #4]
 80108a8:	4299      	cmp	r1, r3
 80108aa:	bfde      	ittt	le
 80108ac:	2330      	movle	r3, #48	@ 0x30
 80108ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80108b6:	1b92      	subs	r2, r2, r6
 80108b8:	6122      	str	r2, [r4, #16]
 80108ba:	f8cd a000 	str.w	sl, [sp]
 80108be:	464b      	mov	r3, r9
 80108c0:	aa03      	add	r2, sp, #12
 80108c2:	4621      	mov	r1, r4
 80108c4:	4640      	mov	r0, r8
 80108c6:	f7ff fee7 	bl	8010698 <_printf_common>
 80108ca:	3001      	adds	r0, #1
 80108cc:	d14a      	bne.n	8010964 <_printf_i+0x1f0>
 80108ce:	f04f 30ff 	mov.w	r0, #4294967295
 80108d2:	b004      	add	sp, #16
 80108d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	f043 0320 	orr.w	r3, r3, #32
 80108de:	6023      	str	r3, [r4, #0]
 80108e0:	4832      	ldr	r0, [pc, #200]	@ (80109ac <_printf_i+0x238>)
 80108e2:	2778      	movs	r7, #120	@ 0x78
 80108e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	6831      	ldr	r1, [r6, #0]
 80108ec:	061f      	lsls	r7, r3, #24
 80108ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80108f2:	d402      	bmi.n	80108fa <_printf_i+0x186>
 80108f4:	065f      	lsls	r7, r3, #25
 80108f6:	bf48      	it	mi
 80108f8:	b2ad      	uxthmi	r5, r5
 80108fa:	6031      	str	r1, [r6, #0]
 80108fc:	07d9      	lsls	r1, r3, #31
 80108fe:	bf44      	itt	mi
 8010900:	f043 0320 	orrmi.w	r3, r3, #32
 8010904:	6023      	strmi	r3, [r4, #0]
 8010906:	b11d      	cbz	r5, 8010910 <_printf_i+0x19c>
 8010908:	2310      	movs	r3, #16
 801090a:	e7ad      	b.n	8010868 <_printf_i+0xf4>
 801090c:	4826      	ldr	r0, [pc, #152]	@ (80109a8 <_printf_i+0x234>)
 801090e:	e7e9      	b.n	80108e4 <_printf_i+0x170>
 8010910:	6823      	ldr	r3, [r4, #0]
 8010912:	f023 0320 	bic.w	r3, r3, #32
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	e7f6      	b.n	8010908 <_printf_i+0x194>
 801091a:	4616      	mov	r6, r2
 801091c:	e7bd      	b.n	801089a <_printf_i+0x126>
 801091e:	6833      	ldr	r3, [r6, #0]
 8010920:	6825      	ldr	r5, [r4, #0]
 8010922:	6961      	ldr	r1, [r4, #20]
 8010924:	1d18      	adds	r0, r3, #4
 8010926:	6030      	str	r0, [r6, #0]
 8010928:	062e      	lsls	r6, r5, #24
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	d501      	bpl.n	8010932 <_printf_i+0x1be>
 801092e:	6019      	str	r1, [r3, #0]
 8010930:	e002      	b.n	8010938 <_printf_i+0x1c4>
 8010932:	0668      	lsls	r0, r5, #25
 8010934:	d5fb      	bpl.n	801092e <_printf_i+0x1ba>
 8010936:	8019      	strh	r1, [r3, #0]
 8010938:	2300      	movs	r3, #0
 801093a:	6123      	str	r3, [r4, #16]
 801093c:	4616      	mov	r6, r2
 801093e:	e7bc      	b.n	80108ba <_printf_i+0x146>
 8010940:	6833      	ldr	r3, [r6, #0]
 8010942:	1d1a      	adds	r2, r3, #4
 8010944:	6032      	str	r2, [r6, #0]
 8010946:	681e      	ldr	r6, [r3, #0]
 8010948:	6862      	ldr	r2, [r4, #4]
 801094a:	2100      	movs	r1, #0
 801094c:	4630      	mov	r0, r6
 801094e:	f7ef fc67 	bl	8000220 <memchr>
 8010952:	b108      	cbz	r0, 8010958 <_printf_i+0x1e4>
 8010954:	1b80      	subs	r0, r0, r6
 8010956:	6060      	str	r0, [r4, #4]
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	6123      	str	r3, [r4, #16]
 801095c:	2300      	movs	r3, #0
 801095e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010962:	e7aa      	b.n	80108ba <_printf_i+0x146>
 8010964:	6923      	ldr	r3, [r4, #16]
 8010966:	4632      	mov	r2, r6
 8010968:	4649      	mov	r1, r9
 801096a:	4640      	mov	r0, r8
 801096c:	47d0      	blx	sl
 801096e:	3001      	adds	r0, #1
 8010970:	d0ad      	beq.n	80108ce <_printf_i+0x15a>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	079b      	lsls	r3, r3, #30
 8010976:	d413      	bmi.n	80109a0 <_printf_i+0x22c>
 8010978:	68e0      	ldr	r0, [r4, #12]
 801097a:	9b03      	ldr	r3, [sp, #12]
 801097c:	4298      	cmp	r0, r3
 801097e:	bfb8      	it	lt
 8010980:	4618      	movlt	r0, r3
 8010982:	e7a6      	b.n	80108d2 <_printf_i+0x15e>
 8010984:	2301      	movs	r3, #1
 8010986:	4632      	mov	r2, r6
 8010988:	4649      	mov	r1, r9
 801098a:	4640      	mov	r0, r8
 801098c:	47d0      	blx	sl
 801098e:	3001      	adds	r0, #1
 8010990:	d09d      	beq.n	80108ce <_printf_i+0x15a>
 8010992:	3501      	adds	r5, #1
 8010994:	68e3      	ldr	r3, [r4, #12]
 8010996:	9903      	ldr	r1, [sp, #12]
 8010998:	1a5b      	subs	r3, r3, r1
 801099a:	42ab      	cmp	r3, r5
 801099c:	dcf2      	bgt.n	8010984 <_printf_i+0x210>
 801099e:	e7eb      	b.n	8010978 <_printf_i+0x204>
 80109a0:	2500      	movs	r5, #0
 80109a2:	f104 0619 	add.w	r6, r4, #25
 80109a6:	e7f5      	b.n	8010994 <_printf_i+0x220>
 80109a8:	08013ebe 	.word	0x08013ebe
 80109ac:	08013ecf 	.word	0x08013ecf

080109b0 <std>:
 80109b0:	2300      	movs	r3, #0
 80109b2:	b510      	push	{r4, lr}
 80109b4:	4604      	mov	r4, r0
 80109b6:	e9c0 3300 	strd	r3, r3, [r0]
 80109ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109be:	6083      	str	r3, [r0, #8]
 80109c0:	8181      	strh	r1, [r0, #12]
 80109c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80109c4:	81c2      	strh	r2, [r0, #14]
 80109c6:	6183      	str	r3, [r0, #24]
 80109c8:	4619      	mov	r1, r3
 80109ca:	2208      	movs	r2, #8
 80109cc:	305c      	adds	r0, #92	@ 0x5c
 80109ce:	f000 f916 	bl	8010bfe <memset>
 80109d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a08 <std+0x58>)
 80109d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80109d6:	4b0d      	ldr	r3, [pc, #52]	@ (8010a0c <std+0x5c>)
 80109d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80109da:	4b0d      	ldr	r3, [pc, #52]	@ (8010a10 <std+0x60>)
 80109dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80109de:	4b0d      	ldr	r3, [pc, #52]	@ (8010a14 <std+0x64>)
 80109e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80109e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a18 <std+0x68>)
 80109e4:	6224      	str	r4, [r4, #32]
 80109e6:	429c      	cmp	r4, r3
 80109e8:	d006      	beq.n	80109f8 <std+0x48>
 80109ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109ee:	4294      	cmp	r4, r2
 80109f0:	d002      	beq.n	80109f8 <std+0x48>
 80109f2:	33d0      	adds	r3, #208	@ 0xd0
 80109f4:	429c      	cmp	r4, r3
 80109f6:	d105      	bne.n	8010a04 <std+0x54>
 80109f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80109fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a00:	f000 b98a 	b.w	8010d18 <__retarget_lock_init_recursive>
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	bf00      	nop
 8010a08:	08010b79 	.word	0x08010b79
 8010a0c:	08010b9b 	.word	0x08010b9b
 8010a10:	08010bd3 	.word	0x08010bd3
 8010a14:	08010bf7 	.word	0x08010bf7
 8010a18:	200022b8 	.word	0x200022b8

08010a1c <stdio_exit_handler>:
 8010a1c:	4a02      	ldr	r2, [pc, #8]	@ (8010a28 <stdio_exit_handler+0xc>)
 8010a1e:	4903      	ldr	r1, [pc, #12]	@ (8010a2c <stdio_exit_handler+0x10>)
 8010a20:	4803      	ldr	r0, [pc, #12]	@ (8010a30 <stdio_exit_handler+0x14>)
 8010a22:	f000 b869 	b.w	8010af8 <_fwalk_sglue>
 8010a26:	bf00      	nop
 8010a28:	2000010c 	.word	0x2000010c
 8010a2c:	08012511 	.word	0x08012511
 8010a30:	2000011c 	.word	0x2000011c

08010a34 <cleanup_stdio>:
 8010a34:	6841      	ldr	r1, [r0, #4]
 8010a36:	4b0c      	ldr	r3, [pc, #48]	@ (8010a68 <cleanup_stdio+0x34>)
 8010a38:	4299      	cmp	r1, r3
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	4604      	mov	r4, r0
 8010a3e:	d001      	beq.n	8010a44 <cleanup_stdio+0x10>
 8010a40:	f001 fd66 	bl	8012510 <_fflush_r>
 8010a44:	68a1      	ldr	r1, [r4, #8]
 8010a46:	4b09      	ldr	r3, [pc, #36]	@ (8010a6c <cleanup_stdio+0x38>)
 8010a48:	4299      	cmp	r1, r3
 8010a4a:	d002      	beq.n	8010a52 <cleanup_stdio+0x1e>
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f001 fd5f 	bl	8012510 <_fflush_r>
 8010a52:	68e1      	ldr	r1, [r4, #12]
 8010a54:	4b06      	ldr	r3, [pc, #24]	@ (8010a70 <cleanup_stdio+0x3c>)
 8010a56:	4299      	cmp	r1, r3
 8010a58:	d004      	beq.n	8010a64 <cleanup_stdio+0x30>
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a60:	f001 bd56 	b.w	8012510 <_fflush_r>
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	bf00      	nop
 8010a68:	200022b8 	.word	0x200022b8
 8010a6c:	20002320 	.word	0x20002320
 8010a70:	20002388 	.word	0x20002388

08010a74 <global_stdio_init.part.0>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa4 <global_stdio_init.part.0+0x30>)
 8010a78:	4c0b      	ldr	r4, [pc, #44]	@ (8010aa8 <global_stdio_init.part.0+0x34>)
 8010a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8010aac <global_stdio_init.part.0+0x38>)
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	4620      	mov	r0, r4
 8010a80:	2200      	movs	r2, #0
 8010a82:	2104      	movs	r1, #4
 8010a84:	f7ff ff94 	bl	80109b0 <std>
 8010a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	2109      	movs	r1, #9
 8010a90:	f7ff ff8e 	bl	80109b0 <std>
 8010a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010a98:	2202      	movs	r2, #2
 8010a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9e:	2112      	movs	r1, #18
 8010aa0:	f7ff bf86 	b.w	80109b0 <std>
 8010aa4:	200023f0 	.word	0x200023f0
 8010aa8:	200022b8 	.word	0x200022b8
 8010aac:	08010a1d 	.word	0x08010a1d

08010ab0 <__sfp_lock_acquire>:
 8010ab0:	4801      	ldr	r0, [pc, #4]	@ (8010ab8 <__sfp_lock_acquire+0x8>)
 8010ab2:	f000 b932 	b.w	8010d1a <__retarget_lock_acquire_recursive>
 8010ab6:	bf00      	nop
 8010ab8:	200023f9 	.word	0x200023f9

08010abc <__sfp_lock_release>:
 8010abc:	4801      	ldr	r0, [pc, #4]	@ (8010ac4 <__sfp_lock_release+0x8>)
 8010abe:	f000 b92d 	b.w	8010d1c <__retarget_lock_release_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	200023f9 	.word	0x200023f9

08010ac8 <__sinit>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	4604      	mov	r4, r0
 8010acc:	f7ff fff0 	bl	8010ab0 <__sfp_lock_acquire>
 8010ad0:	6a23      	ldr	r3, [r4, #32]
 8010ad2:	b11b      	cbz	r3, 8010adc <__sinit+0x14>
 8010ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ad8:	f7ff bff0 	b.w	8010abc <__sfp_lock_release>
 8010adc:	4b04      	ldr	r3, [pc, #16]	@ (8010af0 <__sinit+0x28>)
 8010ade:	6223      	str	r3, [r4, #32]
 8010ae0:	4b04      	ldr	r3, [pc, #16]	@ (8010af4 <__sinit+0x2c>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1f5      	bne.n	8010ad4 <__sinit+0xc>
 8010ae8:	f7ff ffc4 	bl	8010a74 <global_stdio_init.part.0>
 8010aec:	e7f2      	b.n	8010ad4 <__sinit+0xc>
 8010aee:	bf00      	nop
 8010af0:	08010a35 	.word	0x08010a35
 8010af4:	200023f0 	.word	0x200023f0

08010af8 <_fwalk_sglue>:
 8010af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010afc:	4607      	mov	r7, r0
 8010afe:	4688      	mov	r8, r1
 8010b00:	4614      	mov	r4, r2
 8010b02:	2600      	movs	r6, #0
 8010b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b08:	f1b9 0901 	subs.w	r9, r9, #1
 8010b0c:	d505      	bpl.n	8010b1a <_fwalk_sglue+0x22>
 8010b0e:	6824      	ldr	r4, [r4, #0]
 8010b10:	2c00      	cmp	r4, #0
 8010b12:	d1f7      	bne.n	8010b04 <_fwalk_sglue+0xc>
 8010b14:	4630      	mov	r0, r6
 8010b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1a:	89ab      	ldrh	r3, [r5, #12]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d907      	bls.n	8010b30 <_fwalk_sglue+0x38>
 8010b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b24:	3301      	adds	r3, #1
 8010b26:	d003      	beq.n	8010b30 <_fwalk_sglue+0x38>
 8010b28:	4629      	mov	r1, r5
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	47c0      	blx	r8
 8010b2e:	4306      	orrs	r6, r0
 8010b30:	3568      	adds	r5, #104	@ 0x68
 8010b32:	e7e9      	b.n	8010b08 <_fwalk_sglue+0x10>

08010b34 <siprintf>:
 8010b34:	b40e      	push	{r1, r2, r3}
 8010b36:	b510      	push	{r4, lr}
 8010b38:	b09d      	sub	sp, #116	@ 0x74
 8010b3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010b3c:	9002      	str	r0, [sp, #8]
 8010b3e:	9006      	str	r0, [sp, #24]
 8010b40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b44:	480a      	ldr	r0, [pc, #40]	@ (8010b70 <siprintf+0x3c>)
 8010b46:	9107      	str	r1, [sp, #28]
 8010b48:	9104      	str	r1, [sp, #16]
 8010b4a:	490a      	ldr	r1, [pc, #40]	@ (8010b74 <siprintf+0x40>)
 8010b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b50:	9105      	str	r1, [sp, #20]
 8010b52:	2400      	movs	r4, #0
 8010b54:	a902      	add	r1, sp, #8
 8010b56:	6800      	ldr	r0, [r0, #0]
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010b5c:	f001 fb58 	bl	8012210 <_svfiprintf_r>
 8010b60:	9b02      	ldr	r3, [sp, #8]
 8010b62:	701c      	strb	r4, [r3, #0]
 8010b64:	b01d      	add	sp, #116	@ 0x74
 8010b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b6a:	b003      	add	sp, #12
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	20000118 	.word	0x20000118
 8010b74:	ffff0208 	.word	0xffff0208

08010b78 <__sread>:
 8010b78:	b510      	push	{r4, lr}
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b80:	f000 f86c 	bl	8010c5c <_read_r>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	bfab      	itete	ge
 8010b88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8010b8c:	181b      	addge	r3, r3, r0
 8010b8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010b92:	bfac      	ite	ge
 8010b94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010b96:	81a3      	strhlt	r3, [r4, #12]
 8010b98:	bd10      	pop	{r4, pc}

08010b9a <__swrite>:
 8010b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9e:	461f      	mov	r7, r3
 8010ba0:	898b      	ldrh	r3, [r1, #12]
 8010ba2:	05db      	lsls	r3, r3, #23
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	460c      	mov	r4, r1
 8010ba8:	4616      	mov	r6, r2
 8010baa:	d505      	bpl.n	8010bb8 <__swrite+0x1e>
 8010bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f000 f840 	bl	8010c38 <_lseek_r>
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010bc2:	81a3      	strh	r3, [r4, #12]
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	463b      	mov	r3, r7
 8010bc8:	4628      	mov	r0, r5
 8010bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bce:	f000 b867 	b.w	8010ca0 <_write_r>

08010bd2 <__sseek>:
 8010bd2:	b510      	push	{r4, lr}
 8010bd4:	460c      	mov	r4, r1
 8010bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bda:	f000 f82d 	bl	8010c38 <_lseek_r>
 8010bde:	1c43      	adds	r3, r0, #1
 8010be0:	89a3      	ldrh	r3, [r4, #12]
 8010be2:	bf15      	itete	ne
 8010be4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010be6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010bea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010bee:	81a3      	strheq	r3, [r4, #12]
 8010bf0:	bf18      	it	ne
 8010bf2:	81a3      	strhne	r3, [r4, #12]
 8010bf4:	bd10      	pop	{r4, pc}

08010bf6 <__sclose>:
 8010bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bfa:	f000 b80d 	b.w	8010c18 <_close_r>

08010bfe <memset>:
 8010bfe:	4402      	add	r2, r0
 8010c00:	4603      	mov	r3, r0
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d100      	bne.n	8010c08 <memset+0xa>
 8010c06:	4770      	bx	lr
 8010c08:	f803 1b01 	strb.w	r1, [r3], #1
 8010c0c:	e7f9      	b.n	8010c02 <memset+0x4>
	...

08010c10 <_localeconv_r>:
 8010c10:	4800      	ldr	r0, [pc, #0]	@ (8010c14 <_localeconv_r+0x4>)
 8010c12:	4770      	bx	lr
 8010c14:	20000258 	.word	0x20000258

08010c18 <_close_r>:
 8010c18:	b538      	push	{r3, r4, r5, lr}
 8010c1a:	4d06      	ldr	r5, [pc, #24]	@ (8010c34 <_close_r+0x1c>)
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4604      	mov	r4, r0
 8010c20:	4608      	mov	r0, r1
 8010c22:	602b      	str	r3, [r5, #0]
 8010c24:	f7f3 f9c2 	bl	8003fac <_close>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d102      	bne.n	8010c32 <_close_r+0x1a>
 8010c2c:	682b      	ldr	r3, [r5, #0]
 8010c2e:	b103      	cbz	r3, 8010c32 <_close_r+0x1a>
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	200023f4 	.word	0x200023f4

08010c38 <_lseek_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d07      	ldr	r5, [pc, #28]	@ (8010c58 <_lseek_r+0x20>)
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	4608      	mov	r0, r1
 8010c40:	4611      	mov	r1, r2
 8010c42:	2200      	movs	r2, #0
 8010c44:	602a      	str	r2, [r5, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	f7f3 f9d7 	bl	8003ffa <_lseek>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	d102      	bne.n	8010c56 <_lseek_r+0x1e>
 8010c50:	682b      	ldr	r3, [r5, #0]
 8010c52:	b103      	cbz	r3, 8010c56 <_lseek_r+0x1e>
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	bd38      	pop	{r3, r4, r5, pc}
 8010c58:	200023f4 	.word	0x200023f4

08010c5c <_read_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d07      	ldr	r5, [pc, #28]	@ (8010c7c <_read_r+0x20>)
 8010c60:	4604      	mov	r4, r0
 8010c62:	4608      	mov	r0, r1
 8010c64:	4611      	mov	r1, r2
 8010c66:	2200      	movs	r2, #0
 8010c68:	602a      	str	r2, [r5, #0]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	f7f3 f965 	bl	8003f3a <_read>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	d102      	bne.n	8010c7a <_read_r+0x1e>
 8010c74:	682b      	ldr	r3, [r5, #0]
 8010c76:	b103      	cbz	r3, 8010c7a <_read_r+0x1e>
 8010c78:	6023      	str	r3, [r4, #0]
 8010c7a:	bd38      	pop	{r3, r4, r5, pc}
 8010c7c:	200023f4 	.word	0x200023f4

08010c80 <_sbrk_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4d06      	ldr	r5, [pc, #24]	@ (8010c9c <_sbrk_r+0x1c>)
 8010c84:	2300      	movs	r3, #0
 8010c86:	4604      	mov	r4, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	602b      	str	r3, [r5, #0]
 8010c8c:	f7f3 f9c2 	bl	8004014 <_sbrk>
 8010c90:	1c43      	adds	r3, r0, #1
 8010c92:	d102      	bne.n	8010c9a <_sbrk_r+0x1a>
 8010c94:	682b      	ldr	r3, [r5, #0]
 8010c96:	b103      	cbz	r3, 8010c9a <_sbrk_r+0x1a>
 8010c98:	6023      	str	r3, [r4, #0]
 8010c9a:	bd38      	pop	{r3, r4, r5, pc}
 8010c9c:	200023f4 	.word	0x200023f4

08010ca0 <_write_r>:
 8010ca0:	b538      	push	{r3, r4, r5, lr}
 8010ca2:	4d07      	ldr	r5, [pc, #28]	@ (8010cc0 <_write_r+0x20>)
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	4608      	mov	r0, r1
 8010ca8:	4611      	mov	r1, r2
 8010caa:	2200      	movs	r2, #0
 8010cac:	602a      	str	r2, [r5, #0]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	f7f3 f960 	bl	8003f74 <_write>
 8010cb4:	1c43      	adds	r3, r0, #1
 8010cb6:	d102      	bne.n	8010cbe <_write_r+0x1e>
 8010cb8:	682b      	ldr	r3, [r5, #0]
 8010cba:	b103      	cbz	r3, 8010cbe <_write_r+0x1e>
 8010cbc:	6023      	str	r3, [r4, #0]
 8010cbe:	bd38      	pop	{r3, r4, r5, pc}
 8010cc0:	200023f4 	.word	0x200023f4

08010cc4 <__errno>:
 8010cc4:	4b01      	ldr	r3, [pc, #4]	@ (8010ccc <__errno+0x8>)
 8010cc6:	6818      	ldr	r0, [r3, #0]
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	20000118 	.word	0x20000118

08010cd0 <__libc_init_array>:
 8010cd0:	b570      	push	{r4, r5, r6, lr}
 8010cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8010d08 <__libc_init_array+0x38>)
 8010cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8010d0c <__libc_init_array+0x3c>)
 8010cd6:	1b64      	subs	r4, r4, r5
 8010cd8:	10a4      	asrs	r4, r4, #2
 8010cda:	2600      	movs	r6, #0
 8010cdc:	42a6      	cmp	r6, r4
 8010cde:	d109      	bne.n	8010cf4 <__libc_init_array+0x24>
 8010ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8010d10 <__libc_init_array+0x40>)
 8010ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8010d14 <__libc_init_array+0x44>)
 8010ce4:	f003 f89a 	bl	8013e1c <_init>
 8010ce8:	1b64      	subs	r4, r4, r5
 8010cea:	10a4      	asrs	r4, r4, #2
 8010cec:	2600      	movs	r6, #0
 8010cee:	42a6      	cmp	r6, r4
 8010cf0:	d105      	bne.n	8010cfe <__libc_init_array+0x2e>
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
 8010cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cf8:	4798      	blx	r3
 8010cfa:	3601      	adds	r6, #1
 8010cfc:	e7ee      	b.n	8010cdc <__libc_init_array+0xc>
 8010cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d02:	4798      	blx	r3
 8010d04:	3601      	adds	r6, #1
 8010d06:	e7f2      	b.n	8010cee <__libc_init_array+0x1e>
 8010d08:	08014648 	.word	0x08014648
 8010d0c:	08014648 	.word	0x08014648
 8010d10:	08014648 	.word	0x08014648
 8010d14:	0801464c 	.word	0x0801464c

08010d18 <__retarget_lock_init_recursive>:
 8010d18:	4770      	bx	lr

08010d1a <__retarget_lock_acquire_recursive>:
 8010d1a:	4770      	bx	lr

08010d1c <__retarget_lock_release_recursive>:
 8010d1c:	4770      	bx	lr

08010d1e <quorem>:
 8010d1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d22:	6903      	ldr	r3, [r0, #16]
 8010d24:	690c      	ldr	r4, [r1, #16]
 8010d26:	42a3      	cmp	r3, r4
 8010d28:	4607      	mov	r7, r0
 8010d2a:	db7e      	blt.n	8010e2a <quorem+0x10c>
 8010d2c:	3c01      	subs	r4, #1
 8010d2e:	f101 0814 	add.w	r8, r1, #20
 8010d32:	00a3      	lsls	r3, r4, #2
 8010d34:	f100 0514 	add.w	r5, r0, #20
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d50:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d54:	d32e      	bcc.n	8010db4 <quorem+0x96>
 8010d56:	f04f 0a00 	mov.w	sl, #0
 8010d5a:	46c4      	mov	ip, r8
 8010d5c:	46ae      	mov	lr, r5
 8010d5e:	46d3      	mov	fp, sl
 8010d60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d64:	b298      	uxth	r0, r3
 8010d66:	fb06 a000 	mla	r0, r6, r0, sl
 8010d6a:	0c02      	lsrs	r2, r0, #16
 8010d6c:	0c1b      	lsrs	r3, r3, #16
 8010d6e:	fb06 2303 	mla	r3, r6, r3, r2
 8010d72:	f8de 2000 	ldr.w	r2, [lr]
 8010d76:	b280      	uxth	r0, r0
 8010d78:	b292      	uxth	r2, r2
 8010d7a:	1a12      	subs	r2, r2, r0
 8010d7c:	445a      	add	r2, fp
 8010d7e:	f8de 0000 	ldr.w	r0, [lr]
 8010d82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d90:	b292      	uxth	r2, r2
 8010d92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d96:	45e1      	cmp	r9, ip
 8010d98:	f84e 2b04 	str.w	r2, [lr], #4
 8010d9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010da0:	d2de      	bcs.n	8010d60 <quorem+0x42>
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	58eb      	ldr	r3, [r5, r3]
 8010da6:	b92b      	cbnz	r3, 8010db4 <quorem+0x96>
 8010da8:	9b01      	ldr	r3, [sp, #4]
 8010daa:	3b04      	subs	r3, #4
 8010dac:	429d      	cmp	r5, r3
 8010dae:	461a      	mov	r2, r3
 8010db0:	d32f      	bcc.n	8010e12 <quorem+0xf4>
 8010db2:	613c      	str	r4, [r7, #16]
 8010db4:	4638      	mov	r0, r7
 8010db6:	f001 f8c7 	bl	8011f48 <__mcmp>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	db25      	blt.n	8010e0a <quorem+0xec>
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8010dc6:	f8d1 c000 	ldr.w	ip, [r1]
 8010dca:	fa1f fe82 	uxth.w	lr, r2
 8010dce:	fa1f f38c 	uxth.w	r3, ip
 8010dd2:	eba3 030e 	sub.w	r3, r3, lr
 8010dd6:	4403      	add	r3, r0
 8010dd8:	0c12      	lsrs	r2, r2, #16
 8010dda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010dde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010de8:	45c1      	cmp	r9, r8
 8010dea:	f841 3b04 	str.w	r3, [r1], #4
 8010dee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010df2:	d2e6      	bcs.n	8010dc2 <quorem+0xa4>
 8010df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010df8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dfc:	b922      	cbnz	r2, 8010e08 <quorem+0xea>
 8010dfe:	3b04      	subs	r3, #4
 8010e00:	429d      	cmp	r5, r3
 8010e02:	461a      	mov	r2, r3
 8010e04:	d30b      	bcc.n	8010e1e <quorem+0x100>
 8010e06:	613c      	str	r4, [r7, #16]
 8010e08:	3601      	adds	r6, #1
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	b003      	add	sp, #12
 8010e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e12:	6812      	ldr	r2, [r2, #0]
 8010e14:	3b04      	subs	r3, #4
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	d1cb      	bne.n	8010db2 <quorem+0x94>
 8010e1a:	3c01      	subs	r4, #1
 8010e1c:	e7c6      	b.n	8010dac <quorem+0x8e>
 8010e1e:	6812      	ldr	r2, [r2, #0]
 8010e20:	3b04      	subs	r3, #4
 8010e22:	2a00      	cmp	r2, #0
 8010e24:	d1ef      	bne.n	8010e06 <quorem+0xe8>
 8010e26:	3c01      	subs	r4, #1
 8010e28:	e7ea      	b.n	8010e00 <quorem+0xe2>
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	e7ee      	b.n	8010e0c <quorem+0xee>
	...

08010e30 <_dtoa_r>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	69c7      	ldr	r7, [r0, #28]
 8010e36:	b097      	sub	sp, #92	@ 0x5c
 8010e38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010e3c:	ec55 4b10 	vmov	r4, r5, d0
 8010e40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010e42:	9107      	str	r1, [sp, #28]
 8010e44:	4681      	mov	r9, r0
 8010e46:	920c      	str	r2, [sp, #48]	@ 0x30
 8010e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e4a:	b97f      	cbnz	r7, 8010e6c <_dtoa_r+0x3c>
 8010e4c:	2010      	movs	r0, #16
 8010e4e:	f7ff f89b 	bl	800ff88 <malloc>
 8010e52:	4602      	mov	r2, r0
 8010e54:	f8c9 001c 	str.w	r0, [r9, #28]
 8010e58:	b920      	cbnz	r0, 8010e64 <_dtoa_r+0x34>
 8010e5a:	4ba9      	ldr	r3, [pc, #676]	@ (8011100 <_dtoa_r+0x2d0>)
 8010e5c:	21ef      	movs	r1, #239	@ 0xef
 8010e5e:	48a9      	ldr	r0, [pc, #676]	@ (8011104 <_dtoa_r+0x2d4>)
 8010e60:	f001 fba6 	bl	80125b0 <__assert_func>
 8010e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e68:	6007      	str	r7, [r0, #0]
 8010e6a:	60c7      	str	r7, [r0, #12]
 8010e6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010e70:	6819      	ldr	r1, [r3, #0]
 8010e72:	b159      	cbz	r1, 8010e8c <_dtoa_r+0x5c>
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	604a      	str	r2, [r1, #4]
 8010e78:	2301      	movs	r3, #1
 8010e7a:	4093      	lsls	r3, r2
 8010e7c:	608b      	str	r3, [r1, #8]
 8010e7e:	4648      	mov	r0, r9
 8010e80:	f000 fe30 	bl	8011ae4 <_Bfree>
 8010e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	1e2b      	subs	r3, r5, #0
 8010e8e:	bfb9      	ittee	lt
 8010e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e94:	9305      	strlt	r3, [sp, #20]
 8010e96:	2300      	movge	r3, #0
 8010e98:	6033      	strge	r3, [r6, #0]
 8010e9a:	9f05      	ldr	r7, [sp, #20]
 8010e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8011108 <_dtoa_r+0x2d8>)
 8010e9e:	bfbc      	itt	lt
 8010ea0:	2201      	movlt	r2, #1
 8010ea2:	6032      	strlt	r2, [r6, #0]
 8010ea4:	43bb      	bics	r3, r7
 8010ea6:	d112      	bne.n	8010ece <_dtoa_r+0x9e>
 8010ea8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010eae:	6013      	str	r3, [r2, #0]
 8010eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010eb4:	4323      	orrs	r3, r4
 8010eb6:	f000 855a 	beq.w	801196e <_dtoa_r+0xb3e>
 8010eba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ebc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801111c <_dtoa_r+0x2ec>
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 855c 	beq.w	801197e <_dtoa_r+0xb4e>
 8010ec6:	f10a 0303 	add.w	r3, sl, #3
 8010eca:	f000 bd56 	b.w	801197a <_dtoa_r+0xb4a>
 8010ece:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	ec51 0b17 	vmov	r0, r1, d7
 8010ed8:	2300      	movs	r3, #0
 8010eda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010ede:	f7ef fe1b 	bl	8000b18 <__aeabi_dcmpeq>
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	b158      	cbz	r0, 8010efe <_dtoa_r+0xce>
 8010ee6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ee8:	2301      	movs	r3, #1
 8010eea:	6013      	str	r3, [r2, #0]
 8010eec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010eee:	b113      	cbz	r3, 8010ef6 <_dtoa_r+0xc6>
 8010ef0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010ef2:	4b86      	ldr	r3, [pc, #536]	@ (801110c <_dtoa_r+0x2dc>)
 8010ef4:	6013      	str	r3, [r2, #0]
 8010ef6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011120 <_dtoa_r+0x2f0>
 8010efa:	f000 bd40 	b.w	801197e <_dtoa_r+0xb4e>
 8010efe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010f02:	aa14      	add	r2, sp, #80	@ 0x50
 8010f04:	a915      	add	r1, sp, #84	@ 0x54
 8010f06:	4648      	mov	r0, r9
 8010f08:	f001 f8ce 	bl	80120a8 <__d2b>
 8010f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f10:	9002      	str	r0, [sp, #8]
 8010f12:	2e00      	cmp	r6, #0
 8010f14:	d078      	beq.n	8011008 <_dtoa_r+0x1d8>
 8010f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f30:	4619      	mov	r1, r3
 8010f32:	2200      	movs	r2, #0
 8010f34:	4b76      	ldr	r3, [pc, #472]	@ (8011110 <_dtoa_r+0x2e0>)
 8010f36:	f7ef f9cf 	bl	80002d8 <__aeabi_dsub>
 8010f3a:	a36b      	add	r3, pc, #428	@ (adr r3, 80110e8 <_dtoa_r+0x2b8>)
 8010f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f40:	f7ef fb82 	bl	8000648 <__aeabi_dmul>
 8010f44:	a36a      	add	r3, pc, #424	@ (adr r3, 80110f0 <_dtoa_r+0x2c0>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	f7ef f9c7 	bl	80002dc <__adddf3>
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4630      	mov	r0, r6
 8010f52:	460d      	mov	r5, r1
 8010f54:	f7ef fb0e 	bl	8000574 <__aeabi_i2d>
 8010f58:	a367      	add	r3, pc, #412	@ (adr r3, 80110f8 <_dtoa_r+0x2c8>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef fb73 	bl	8000648 <__aeabi_dmul>
 8010f62:	4602      	mov	r2, r0
 8010f64:	460b      	mov	r3, r1
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef f9b7 	bl	80002dc <__adddf3>
 8010f6e:	4604      	mov	r4, r0
 8010f70:	460d      	mov	r5, r1
 8010f72:	f7ef fe19 	bl	8000ba8 <__aeabi_d2iz>
 8010f76:	2200      	movs	r2, #0
 8010f78:	4607      	mov	r7, r0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f7ef fdd4 	bl	8000b2c <__aeabi_dcmplt>
 8010f84:	b140      	cbz	r0, 8010f98 <_dtoa_r+0x168>
 8010f86:	4638      	mov	r0, r7
 8010f88:	f7ef faf4 	bl	8000574 <__aeabi_i2d>
 8010f8c:	4622      	mov	r2, r4
 8010f8e:	462b      	mov	r3, r5
 8010f90:	f7ef fdc2 	bl	8000b18 <__aeabi_dcmpeq>
 8010f94:	b900      	cbnz	r0, 8010f98 <_dtoa_r+0x168>
 8010f96:	3f01      	subs	r7, #1
 8010f98:	2f16      	cmp	r7, #22
 8010f9a:	d852      	bhi.n	8011042 <_dtoa_r+0x212>
 8010f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8011114 <_dtoa_r+0x2e4>)
 8010f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010faa:	f7ef fdbf 	bl	8000b2c <__aeabi_dcmplt>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d049      	beq.n	8011046 <_dtoa_r+0x216>
 8010fb2:	3f01      	subs	r7, #1
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010fb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fba:	1b9b      	subs	r3, r3, r6
 8010fbc:	1e5a      	subs	r2, r3, #1
 8010fbe:	bf45      	ittet	mi
 8010fc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8010fc4:	9300      	strmi	r3, [sp, #0]
 8010fc6:	2300      	movpl	r3, #0
 8010fc8:	2300      	movmi	r3, #0
 8010fca:	9206      	str	r2, [sp, #24]
 8010fcc:	bf54      	ite	pl
 8010fce:	9300      	strpl	r3, [sp, #0]
 8010fd0:	9306      	strmi	r3, [sp, #24]
 8010fd2:	2f00      	cmp	r7, #0
 8010fd4:	db39      	blt.n	801104a <_dtoa_r+0x21a>
 8010fd6:	9b06      	ldr	r3, [sp, #24]
 8010fd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8010fda:	443b      	add	r3, r7
 8010fdc:	9306      	str	r3, [sp, #24]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9308      	str	r3, [sp, #32]
 8010fe2:	9b07      	ldr	r3, [sp, #28]
 8010fe4:	2b09      	cmp	r3, #9
 8010fe6:	d863      	bhi.n	80110b0 <_dtoa_r+0x280>
 8010fe8:	2b05      	cmp	r3, #5
 8010fea:	bfc4      	itt	gt
 8010fec:	3b04      	subgt	r3, #4
 8010fee:	9307      	strgt	r3, [sp, #28]
 8010ff0:	9b07      	ldr	r3, [sp, #28]
 8010ff2:	f1a3 0302 	sub.w	r3, r3, #2
 8010ff6:	bfcc      	ite	gt
 8010ff8:	2400      	movgt	r4, #0
 8010ffa:	2401      	movle	r4, #1
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d863      	bhi.n	80110c8 <_dtoa_r+0x298>
 8011000:	e8df f003 	tbb	[pc, r3]
 8011004:	2b375452 	.word	0x2b375452
 8011008:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801100c:	441e      	add	r6, r3
 801100e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011012:	2b20      	cmp	r3, #32
 8011014:	bfc1      	itttt	gt
 8011016:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801101a:	409f      	lslgt	r7, r3
 801101c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011020:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011024:	bfd6      	itet	le
 8011026:	f1c3 0320 	rsble	r3, r3, #32
 801102a:	ea47 0003 	orrgt.w	r0, r7, r3
 801102e:	fa04 f003 	lslle.w	r0, r4, r3
 8011032:	f7ef fa8f 	bl	8000554 <__aeabi_ui2d>
 8011036:	2201      	movs	r2, #1
 8011038:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801103c:	3e01      	subs	r6, #1
 801103e:	9212      	str	r2, [sp, #72]	@ 0x48
 8011040:	e776      	b.n	8010f30 <_dtoa_r+0x100>
 8011042:	2301      	movs	r3, #1
 8011044:	e7b7      	b.n	8010fb6 <_dtoa_r+0x186>
 8011046:	9010      	str	r0, [sp, #64]	@ 0x40
 8011048:	e7b6      	b.n	8010fb8 <_dtoa_r+0x188>
 801104a:	9b00      	ldr	r3, [sp, #0]
 801104c:	1bdb      	subs	r3, r3, r7
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	427b      	negs	r3, r7
 8011052:	9308      	str	r3, [sp, #32]
 8011054:	2300      	movs	r3, #0
 8011056:	930d      	str	r3, [sp, #52]	@ 0x34
 8011058:	e7c3      	b.n	8010fe2 <_dtoa_r+0x1b2>
 801105a:	2301      	movs	r3, #1
 801105c:	9309      	str	r3, [sp, #36]	@ 0x24
 801105e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011060:	eb07 0b03 	add.w	fp, r7, r3
 8011064:	f10b 0301 	add.w	r3, fp, #1
 8011068:	2b01      	cmp	r3, #1
 801106a:	9303      	str	r3, [sp, #12]
 801106c:	bfb8      	it	lt
 801106e:	2301      	movlt	r3, #1
 8011070:	e006      	b.n	8011080 <_dtoa_r+0x250>
 8011072:	2301      	movs	r3, #1
 8011074:	9309      	str	r3, [sp, #36]	@ 0x24
 8011076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011078:	2b00      	cmp	r3, #0
 801107a:	dd28      	ble.n	80110ce <_dtoa_r+0x29e>
 801107c:	469b      	mov	fp, r3
 801107e:	9303      	str	r3, [sp, #12]
 8011080:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011084:	2100      	movs	r1, #0
 8011086:	2204      	movs	r2, #4
 8011088:	f102 0514 	add.w	r5, r2, #20
 801108c:	429d      	cmp	r5, r3
 801108e:	d926      	bls.n	80110de <_dtoa_r+0x2ae>
 8011090:	6041      	str	r1, [r0, #4]
 8011092:	4648      	mov	r0, r9
 8011094:	f000 fce6 	bl	8011a64 <_Balloc>
 8011098:	4682      	mov	sl, r0
 801109a:	2800      	cmp	r0, #0
 801109c:	d142      	bne.n	8011124 <_dtoa_r+0x2f4>
 801109e:	4b1e      	ldr	r3, [pc, #120]	@ (8011118 <_dtoa_r+0x2e8>)
 80110a0:	4602      	mov	r2, r0
 80110a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80110a6:	e6da      	b.n	8010e5e <_dtoa_r+0x2e>
 80110a8:	2300      	movs	r3, #0
 80110aa:	e7e3      	b.n	8011074 <_dtoa_r+0x244>
 80110ac:	2300      	movs	r3, #0
 80110ae:	e7d5      	b.n	801105c <_dtoa_r+0x22c>
 80110b0:	2401      	movs	r4, #1
 80110b2:	2300      	movs	r3, #0
 80110b4:	9307      	str	r3, [sp, #28]
 80110b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80110b8:	f04f 3bff 	mov.w	fp, #4294967295
 80110bc:	2200      	movs	r2, #0
 80110be:	f8cd b00c 	str.w	fp, [sp, #12]
 80110c2:	2312      	movs	r3, #18
 80110c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80110c6:	e7db      	b.n	8011080 <_dtoa_r+0x250>
 80110c8:	2301      	movs	r3, #1
 80110ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80110cc:	e7f4      	b.n	80110b8 <_dtoa_r+0x288>
 80110ce:	f04f 0b01 	mov.w	fp, #1
 80110d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80110d6:	465b      	mov	r3, fp
 80110d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80110dc:	e7d0      	b.n	8011080 <_dtoa_r+0x250>
 80110de:	3101      	adds	r1, #1
 80110e0:	0052      	lsls	r2, r2, #1
 80110e2:	e7d1      	b.n	8011088 <_dtoa_r+0x258>
 80110e4:	f3af 8000 	nop.w
 80110e8:	636f4361 	.word	0x636f4361
 80110ec:	3fd287a7 	.word	0x3fd287a7
 80110f0:	8b60c8b3 	.word	0x8b60c8b3
 80110f4:	3fc68a28 	.word	0x3fc68a28
 80110f8:	509f79fb 	.word	0x509f79fb
 80110fc:	3fd34413 	.word	0x3fd34413
 8011100:	08013eed 	.word	0x08013eed
 8011104:	08013f04 	.word	0x08013f04
 8011108:	7ff00000 	.word	0x7ff00000
 801110c:	08013ebd 	.word	0x08013ebd
 8011110:	3ff80000 	.word	0x3ff80000
 8011114:	08014058 	.word	0x08014058
 8011118:	08013f5c 	.word	0x08013f5c
 801111c:	08013ee9 	.word	0x08013ee9
 8011120:	08013ebc 	.word	0x08013ebc
 8011124:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011128:	6018      	str	r0, [r3, #0]
 801112a:	9b03      	ldr	r3, [sp, #12]
 801112c:	2b0e      	cmp	r3, #14
 801112e:	f200 80a1 	bhi.w	8011274 <_dtoa_r+0x444>
 8011132:	2c00      	cmp	r4, #0
 8011134:	f000 809e 	beq.w	8011274 <_dtoa_r+0x444>
 8011138:	2f00      	cmp	r7, #0
 801113a:	dd33      	ble.n	80111a4 <_dtoa_r+0x374>
 801113c:	4b9c      	ldr	r3, [pc, #624]	@ (80113b0 <_dtoa_r+0x580>)
 801113e:	f007 020f 	and.w	r2, r7, #15
 8011142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011146:	ed93 7b00 	vldr	d7, [r3]
 801114a:	05f8      	lsls	r0, r7, #23
 801114c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011150:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011154:	d516      	bpl.n	8011184 <_dtoa_r+0x354>
 8011156:	4b97      	ldr	r3, [pc, #604]	@ (80113b4 <_dtoa_r+0x584>)
 8011158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801115c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011160:	f7ef fb9c 	bl	800089c <__aeabi_ddiv>
 8011164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011168:	f004 040f 	and.w	r4, r4, #15
 801116c:	2603      	movs	r6, #3
 801116e:	4d91      	ldr	r5, [pc, #580]	@ (80113b4 <_dtoa_r+0x584>)
 8011170:	b954      	cbnz	r4, 8011188 <_dtoa_r+0x358>
 8011172:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801117a:	f7ef fb8f 	bl	800089c <__aeabi_ddiv>
 801117e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011182:	e028      	b.n	80111d6 <_dtoa_r+0x3a6>
 8011184:	2602      	movs	r6, #2
 8011186:	e7f2      	b.n	801116e <_dtoa_r+0x33e>
 8011188:	07e1      	lsls	r1, r4, #31
 801118a:	d508      	bpl.n	801119e <_dtoa_r+0x36e>
 801118c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011194:	f7ef fa58 	bl	8000648 <__aeabi_dmul>
 8011198:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801119c:	3601      	adds	r6, #1
 801119e:	1064      	asrs	r4, r4, #1
 80111a0:	3508      	adds	r5, #8
 80111a2:	e7e5      	b.n	8011170 <_dtoa_r+0x340>
 80111a4:	f000 80af 	beq.w	8011306 <_dtoa_r+0x4d6>
 80111a8:	427c      	negs	r4, r7
 80111aa:	4b81      	ldr	r3, [pc, #516]	@ (80113b0 <_dtoa_r+0x580>)
 80111ac:	4d81      	ldr	r5, [pc, #516]	@ (80113b4 <_dtoa_r+0x584>)
 80111ae:	f004 020f 	and.w	r2, r4, #15
 80111b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80111be:	f7ef fa43 	bl	8000648 <__aeabi_dmul>
 80111c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111c6:	1124      	asrs	r4, r4, #4
 80111c8:	2300      	movs	r3, #0
 80111ca:	2602      	movs	r6, #2
 80111cc:	2c00      	cmp	r4, #0
 80111ce:	f040 808f 	bne.w	80112f0 <_dtoa_r+0x4c0>
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1d3      	bne.n	801117e <_dtoa_r+0x34e>
 80111d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80111d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 8094 	beq.w	801130a <_dtoa_r+0x4da>
 80111e2:	4b75      	ldr	r3, [pc, #468]	@ (80113b8 <_dtoa_r+0x588>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	4620      	mov	r0, r4
 80111e8:	4629      	mov	r1, r5
 80111ea:	f7ef fc9f 	bl	8000b2c <__aeabi_dcmplt>
 80111ee:	2800      	cmp	r0, #0
 80111f0:	f000 808b 	beq.w	801130a <_dtoa_r+0x4da>
 80111f4:	9b03      	ldr	r3, [sp, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f000 8087 	beq.w	801130a <_dtoa_r+0x4da>
 80111fc:	f1bb 0f00 	cmp.w	fp, #0
 8011200:	dd34      	ble.n	801126c <_dtoa_r+0x43c>
 8011202:	4620      	mov	r0, r4
 8011204:	4b6d      	ldr	r3, [pc, #436]	@ (80113bc <_dtoa_r+0x58c>)
 8011206:	2200      	movs	r2, #0
 8011208:	4629      	mov	r1, r5
 801120a:	f7ef fa1d 	bl	8000648 <__aeabi_dmul>
 801120e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011212:	f107 38ff 	add.w	r8, r7, #4294967295
 8011216:	3601      	adds	r6, #1
 8011218:	465c      	mov	r4, fp
 801121a:	4630      	mov	r0, r6
 801121c:	f7ef f9aa 	bl	8000574 <__aeabi_i2d>
 8011220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011224:	f7ef fa10 	bl	8000648 <__aeabi_dmul>
 8011228:	4b65      	ldr	r3, [pc, #404]	@ (80113c0 <_dtoa_r+0x590>)
 801122a:	2200      	movs	r2, #0
 801122c:	f7ef f856 	bl	80002dc <__adddf3>
 8011230:	4605      	mov	r5, r0
 8011232:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011236:	2c00      	cmp	r4, #0
 8011238:	d16a      	bne.n	8011310 <_dtoa_r+0x4e0>
 801123a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801123e:	4b61      	ldr	r3, [pc, #388]	@ (80113c4 <_dtoa_r+0x594>)
 8011240:	2200      	movs	r2, #0
 8011242:	f7ef f849 	bl	80002d8 <__aeabi_dsub>
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801124e:	462a      	mov	r2, r5
 8011250:	4633      	mov	r3, r6
 8011252:	f7ef fc89 	bl	8000b68 <__aeabi_dcmpgt>
 8011256:	2800      	cmp	r0, #0
 8011258:	f040 8298 	bne.w	801178c <_dtoa_r+0x95c>
 801125c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011260:	462a      	mov	r2, r5
 8011262:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011266:	f7ef fc61 	bl	8000b2c <__aeabi_dcmplt>
 801126a:	bb38      	cbnz	r0, 80112bc <_dtoa_r+0x48c>
 801126c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011270:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011274:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011276:	2b00      	cmp	r3, #0
 8011278:	f2c0 8157 	blt.w	801152a <_dtoa_r+0x6fa>
 801127c:	2f0e      	cmp	r7, #14
 801127e:	f300 8154 	bgt.w	801152a <_dtoa_r+0x6fa>
 8011282:	4b4b      	ldr	r3, [pc, #300]	@ (80113b0 <_dtoa_r+0x580>)
 8011284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011288:	ed93 7b00 	vldr	d7, [r3]
 801128c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801128e:	2b00      	cmp	r3, #0
 8011290:	ed8d 7b00 	vstr	d7, [sp]
 8011294:	f280 80e5 	bge.w	8011462 <_dtoa_r+0x632>
 8011298:	9b03      	ldr	r3, [sp, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f300 80e1 	bgt.w	8011462 <_dtoa_r+0x632>
 80112a0:	d10c      	bne.n	80112bc <_dtoa_r+0x48c>
 80112a2:	4b48      	ldr	r3, [pc, #288]	@ (80113c4 <_dtoa_r+0x594>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	ec51 0b17 	vmov	r0, r1, d7
 80112aa:	f7ef f9cd 	bl	8000648 <__aeabi_dmul>
 80112ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112b2:	f7ef fc4f 	bl	8000b54 <__aeabi_dcmpge>
 80112b6:	2800      	cmp	r0, #0
 80112b8:	f000 8266 	beq.w	8011788 <_dtoa_r+0x958>
 80112bc:	2400      	movs	r4, #0
 80112be:	4625      	mov	r5, r4
 80112c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112c2:	4656      	mov	r6, sl
 80112c4:	ea6f 0803 	mvn.w	r8, r3
 80112c8:	2700      	movs	r7, #0
 80112ca:	4621      	mov	r1, r4
 80112cc:	4648      	mov	r0, r9
 80112ce:	f000 fc09 	bl	8011ae4 <_Bfree>
 80112d2:	2d00      	cmp	r5, #0
 80112d4:	f000 80bd 	beq.w	8011452 <_dtoa_r+0x622>
 80112d8:	b12f      	cbz	r7, 80112e6 <_dtoa_r+0x4b6>
 80112da:	42af      	cmp	r7, r5
 80112dc:	d003      	beq.n	80112e6 <_dtoa_r+0x4b6>
 80112de:	4639      	mov	r1, r7
 80112e0:	4648      	mov	r0, r9
 80112e2:	f000 fbff 	bl	8011ae4 <_Bfree>
 80112e6:	4629      	mov	r1, r5
 80112e8:	4648      	mov	r0, r9
 80112ea:	f000 fbfb 	bl	8011ae4 <_Bfree>
 80112ee:	e0b0      	b.n	8011452 <_dtoa_r+0x622>
 80112f0:	07e2      	lsls	r2, r4, #31
 80112f2:	d505      	bpl.n	8011300 <_dtoa_r+0x4d0>
 80112f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112f8:	f7ef f9a6 	bl	8000648 <__aeabi_dmul>
 80112fc:	3601      	adds	r6, #1
 80112fe:	2301      	movs	r3, #1
 8011300:	1064      	asrs	r4, r4, #1
 8011302:	3508      	adds	r5, #8
 8011304:	e762      	b.n	80111cc <_dtoa_r+0x39c>
 8011306:	2602      	movs	r6, #2
 8011308:	e765      	b.n	80111d6 <_dtoa_r+0x3a6>
 801130a:	9c03      	ldr	r4, [sp, #12]
 801130c:	46b8      	mov	r8, r7
 801130e:	e784      	b.n	801121a <_dtoa_r+0x3ea>
 8011310:	4b27      	ldr	r3, [pc, #156]	@ (80113b0 <_dtoa_r+0x580>)
 8011312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011314:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801131c:	4454      	add	r4, sl
 801131e:	2900      	cmp	r1, #0
 8011320:	d054      	beq.n	80113cc <_dtoa_r+0x59c>
 8011322:	4929      	ldr	r1, [pc, #164]	@ (80113c8 <_dtoa_r+0x598>)
 8011324:	2000      	movs	r0, #0
 8011326:	f7ef fab9 	bl	800089c <__aeabi_ddiv>
 801132a:	4633      	mov	r3, r6
 801132c:	462a      	mov	r2, r5
 801132e:	f7ee ffd3 	bl	80002d8 <__aeabi_dsub>
 8011332:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011336:	4656      	mov	r6, sl
 8011338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801133c:	f7ef fc34 	bl	8000ba8 <__aeabi_d2iz>
 8011340:	4605      	mov	r5, r0
 8011342:	f7ef f917 	bl	8000574 <__aeabi_i2d>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801134e:	f7ee ffc3 	bl	80002d8 <__aeabi_dsub>
 8011352:	3530      	adds	r5, #48	@ 0x30
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801135c:	f806 5b01 	strb.w	r5, [r6], #1
 8011360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011364:	f7ef fbe2 	bl	8000b2c <__aeabi_dcmplt>
 8011368:	2800      	cmp	r0, #0
 801136a:	d172      	bne.n	8011452 <_dtoa_r+0x622>
 801136c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011370:	4911      	ldr	r1, [pc, #68]	@ (80113b8 <_dtoa_r+0x588>)
 8011372:	2000      	movs	r0, #0
 8011374:	f7ee ffb0 	bl	80002d8 <__aeabi_dsub>
 8011378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801137c:	f7ef fbd6 	bl	8000b2c <__aeabi_dcmplt>
 8011380:	2800      	cmp	r0, #0
 8011382:	f040 80b4 	bne.w	80114ee <_dtoa_r+0x6be>
 8011386:	42a6      	cmp	r6, r4
 8011388:	f43f af70 	beq.w	801126c <_dtoa_r+0x43c>
 801138c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011390:	4b0a      	ldr	r3, [pc, #40]	@ (80113bc <_dtoa_r+0x58c>)
 8011392:	2200      	movs	r2, #0
 8011394:	f7ef f958 	bl	8000648 <__aeabi_dmul>
 8011398:	4b08      	ldr	r3, [pc, #32]	@ (80113bc <_dtoa_r+0x58c>)
 801139a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801139e:	2200      	movs	r2, #0
 80113a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113a4:	f7ef f950 	bl	8000648 <__aeabi_dmul>
 80113a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113ac:	e7c4      	b.n	8011338 <_dtoa_r+0x508>
 80113ae:	bf00      	nop
 80113b0:	08014058 	.word	0x08014058
 80113b4:	08014030 	.word	0x08014030
 80113b8:	3ff00000 	.word	0x3ff00000
 80113bc:	40240000 	.word	0x40240000
 80113c0:	401c0000 	.word	0x401c0000
 80113c4:	40140000 	.word	0x40140000
 80113c8:	3fe00000 	.word	0x3fe00000
 80113cc:	4631      	mov	r1, r6
 80113ce:	4628      	mov	r0, r5
 80113d0:	f7ef f93a 	bl	8000648 <__aeabi_dmul>
 80113d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80113d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80113da:	4656      	mov	r6, sl
 80113dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113e0:	f7ef fbe2 	bl	8000ba8 <__aeabi_d2iz>
 80113e4:	4605      	mov	r5, r0
 80113e6:	f7ef f8c5 	bl	8000574 <__aeabi_i2d>
 80113ea:	4602      	mov	r2, r0
 80113ec:	460b      	mov	r3, r1
 80113ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113f2:	f7ee ff71 	bl	80002d8 <__aeabi_dsub>
 80113f6:	3530      	adds	r5, #48	@ 0x30
 80113f8:	f806 5b01 	strb.w	r5, [r6], #1
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	42a6      	cmp	r6, r4
 8011402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011406:	f04f 0200 	mov.w	r2, #0
 801140a:	d124      	bne.n	8011456 <_dtoa_r+0x626>
 801140c:	4baf      	ldr	r3, [pc, #700]	@ (80116cc <_dtoa_r+0x89c>)
 801140e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011412:	f7ee ff63 	bl	80002dc <__adddf3>
 8011416:	4602      	mov	r2, r0
 8011418:	460b      	mov	r3, r1
 801141a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801141e:	f7ef fba3 	bl	8000b68 <__aeabi_dcmpgt>
 8011422:	2800      	cmp	r0, #0
 8011424:	d163      	bne.n	80114ee <_dtoa_r+0x6be>
 8011426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801142a:	49a8      	ldr	r1, [pc, #672]	@ (80116cc <_dtoa_r+0x89c>)
 801142c:	2000      	movs	r0, #0
 801142e:	f7ee ff53 	bl	80002d8 <__aeabi_dsub>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801143a:	f7ef fb77 	bl	8000b2c <__aeabi_dcmplt>
 801143e:	2800      	cmp	r0, #0
 8011440:	f43f af14 	beq.w	801126c <_dtoa_r+0x43c>
 8011444:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011446:	1e73      	subs	r3, r6, #1
 8011448:	9313      	str	r3, [sp, #76]	@ 0x4c
 801144a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801144e:	2b30      	cmp	r3, #48	@ 0x30
 8011450:	d0f8      	beq.n	8011444 <_dtoa_r+0x614>
 8011452:	4647      	mov	r7, r8
 8011454:	e03b      	b.n	80114ce <_dtoa_r+0x69e>
 8011456:	4b9e      	ldr	r3, [pc, #632]	@ (80116d0 <_dtoa_r+0x8a0>)
 8011458:	f7ef f8f6 	bl	8000648 <__aeabi_dmul>
 801145c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011460:	e7bc      	b.n	80113dc <_dtoa_r+0x5ac>
 8011462:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011466:	4656      	mov	r6, sl
 8011468:	e9dd 2300 	ldrd	r2, r3, [sp]
 801146c:	4620      	mov	r0, r4
 801146e:	4629      	mov	r1, r5
 8011470:	f7ef fa14 	bl	800089c <__aeabi_ddiv>
 8011474:	f7ef fb98 	bl	8000ba8 <__aeabi_d2iz>
 8011478:	4680      	mov	r8, r0
 801147a:	f7ef f87b 	bl	8000574 <__aeabi_i2d>
 801147e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011482:	f7ef f8e1 	bl	8000648 <__aeabi_dmul>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	4620      	mov	r0, r4
 801148c:	4629      	mov	r1, r5
 801148e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011492:	f7ee ff21 	bl	80002d8 <__aeabi_dsub>
 8011496:	f806 4b01 	strb.w	r4, [r6], #1
 801149a:	9d03      	ldr	r5, [sp, #12]
 801149c:	eba6 040a 	sub.w	r4, r6, sl
 80114a0:	42a5      	cmp	r5, r4
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	d133      	bne.n	8011510 <_dtoa_r+0x6e0>
 80114a8:	f7ee ff18 	bl	80002dc <__adddf3>
 80114ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114b0:	4604      	mov	r4, r0
 80114b2:	460d      	mov	r5, r1
 80114b4:	f7ef fb58 	bl	8000b68 <__aeabi_dcmpgt>
 80114b8:	b9c0      	cbnz	r0, 80114ec <_dtoa_r+0x6bc>
 80114ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114be:	4620      	mov	r0, r4
 80114c0:	4629      	mov	r1, r5
 80114c2:	f7ef fb29 	bl	8000b18 <__aeabi_dcmpeq>
 80114c6:	b110      	cbz	r0, 80114ce <_dtoa_r+0x69e>
 80114c8:	f018 0f01 	tst.w	r8, #1
 80114cc:	d10e      	bne.n	80114ec <_dtoa_r+0x6bc>
 80114ce:	9902      	ldr	r1, [sp, #8]
 80114d0:	4648      	mov	r0, r9
 80114d2:	f000 fb07 	bl	8011ae4 <_Bfree>
 80114d6:	2300      	movs	r3, #0
 80114d8:	7033      	strb	r3, [r6, #0]
 80114da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80114dc:	3701      	adds	r7, #1
 80114de:	601f      	str	r7, [r3, #0]
 80114e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 824b 	beq.w	801197e <_dtoa_r+0xb4e>
 80114e8:	601e      	str	r6, [r3, #0]
 80114ea:	e248      	b.n	801197e <_dtoa_r+0xb4e>
 80114ec:	46b8      	mov	r8, r7
 80114ee:	4633      	mov	r3, r6
 80114f0:	461e      	mov	r6, r3
 80114f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114f6:	2a39      	cmp	r2, #57	@ 0x39
 80114f8:	d106      	bne.n	8011508 <_dtoa_r+0x6d8>
 80114fa:	459a      	cmp	sl, r3
 80114fc:	d1f8      	bne.n	80114f0 <_dtoa_r+0x6c0>
 80114fe:	2230      	movs	r2, #48	@ 0x30
 8011500:	f108 0801 	add.w	r8, r8, #1
 8011504:	f88a 2000 	strb.w	r2, [sl]
 8011508:	781a      	ldrb	r2, [r3, #0]
 801150a:	3201      	adds	r2, #1
 801150c:	701a      	strb	r2, [r3, #0]
 801150e:	e7a0      	b.n	8011452 <_dtoa_r+0x622>
 8011510:	4b6f      	ldr	r3, [pc, #444]	@ (80116d0 <_dtoa_r+0x8a0>)
 8011512:	2200      	movs	r2, #0
 8011514:	f7ef f898 	bl	8000648 <__aeabi_dmul>
 8011518:	2200      	movs	r2, #0
 801151a:	2300      	movs	r3, #0
 801151c:	4604      	mov	r4, r0
 801151e:	460d      	mov	r5, r1
 8011520:	f7ef fafa 	bl	8000b18 <__aeabi_dcmpeq>
 8011524:	2800      	cmp	r0, #0
 8011526:	d09f      	beq.n	8011468 <_dtoa_r+0x638>
 8011528:	e7d1      	b.n	80114ce <_dtoa_r+0x69e>
 801152a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801152c:	2a00      	cmp	r2, #0
 801152e:	f000 80ea 	beq.w	8011706 <_dtoa_r+0x8d6>
 8011532:	9a07      	ldr	r2, [sp, #28]
 8011534:	2a01      	cmp	r2, #1
 8011536:	f300 80cd 	bgt.w	80116d4 <_dtoa_r+0x8a4>
 801153a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801153c:	2a00      	cmp	r2, #0
 801153e:	f000 80c1 	beq.w	80116c4 <_dtoa_r+0x894>
 8011542:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011546:	9c08      	ldr	r4, [sp, #32]
 8011548:	9e00      	ldr	r6, [sp, #0]
 801154a:	9a00      	ldr	r2, [sp, #0]
 801154c:	441a      	add	r2, r3
 801154e:	9200      	str	r2, [sp, #0]
 8011550:	9a06      	ldr	r2, [sp, #24]
 8011552:	2101      	movs	r1, #1
 8011554:	441a      	add	r2, r3
 8011556:	4648      	mov	r0, r9
 8011558:	9206      	str	r2, [sp, #24]
 801155a:	f000 fb77 	bl	8011c4c <__i2b>
 801155e:	4605      	mov	r5, r0
 8011560:	b166      	cbz	r6, 801157c <_dtoa_r+0x74c>
 8011562:	9b06      	ldr	r3, [sp, #24]
 8011564:	2b00      	cmp	r3, #0
 8011566:	dd09      	ble.n	801157c <_dtoa_r+0x74c>
 8011568:	42b3      	cmp	r3, r6
 801156a:	9a00      	ldr	r2, [sp, #0]
 801156c:	bfa8      	it	ge
 801156e:	4633      	movge	r3, r6
 8011570:	1ad2      	subs	r2, r2, r3
 8011572:	9200      	str	r2, [sp, #0]
 8011574:	9a06      	ldr	r2, [sp, #24]
 8011576:	1af6      	subs	r6, r6, r3
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	9306      	str	r3, [sp, #24]
 801157c:	9b08      	ldr	r3, [sp, #32]
 801157e:	b30b      	cbz	r3, 80115c4 <_dtoa_r+0x794>
 8011580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011582:	2b00      	cmp	r3, #0
 8011584:	f000 80c6 	beq.w	8011714 <_dtoa_r+0x8e4>
 8011588:	2c00      	cmp	r4, #0
 801158a:	f000 80c0 	beq.w	801170e <_dtoa_r+0x8de>
 801158e:	4629      	mov	r1, r5
 8011590:	4622      	mov	r2, r4
 8011592:	4648      	mov	r0, r9
 8011594:	f000 fc12 	bl	8011dbc <__pow5mult>
 8011598:	9a02      	ldr	r2, [sp, #8]
 801159a:	4601      	mov	r1, r0
 801159c:	4605      	mov	r5, r0
 801159e:	4648      	mov	r0, r9
 80115a0:	f000 fb6a 	bl	8011c78 <__multiply>
 80115a4:	9902      	ldr	r1, [sp, #8]
 80115a6:	4680      	mov	r8, r0
 80115a8:	4648      	mov	r0, r9
 80115aa:	f000 fa9b 	bl	8011ae4 <_Bfree>
 80115ae:	9b08      	ldr	r3, [sp, #32]
 80115b0:	1b1b      	subs	r3, r3, r4
 80115b2:	9308      	str	r3, [sp, #32]
 80115b4:	f000 80b1 	beq.w	801171a <_dtoa_r+0x8ea>
 80115b8:	9a08      	ldr	r2, [sp, #32]
 80115ba:	4641      	mov	r1, r8
 80115bc:	4648      	mov	r0, r9
 80115be:	f000 fbfd 	bl	8011dbc <__pow5mult>
 80115c2:	9002      	str	r0, [sp, #8]
 80115c4:	2101      	movs	r1, #1
 80115c6:	4648      	mov	r0, r9
 80115c8:	f000 fb40 	bl	8011c4c <__i2b>
 80115cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115ce:	4604      	mov	r4, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f000 81d8 	beq.w	8011986 <_dtoa_r+0xb56>
 80115d6:	461a      	mov	r2, r3
 80115d8:	4601      	mov	r1, r0
 80115da:	4648      	mov	r0, r9
 80115dc:	f000 fbee 	bl	8011dbc <__pow5mult>
 80115e0:	9b07      	ldr	r3, [sp, #28]
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	4604      	mov	r4, r0
 80115e6:	f300 809f 	bgt.w	8011728 <_dtoa_r+0x8f8>
 80115ea:	9b04      	ldr	r3, [sp, #16]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	f040 8097 	bne.w	8011720 <_dtoa_r+0x8f0>
 80115f2:	9b05      	ldr	r3, [sp, #20]
 80115f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f040 8093 	bne.w	8011724 <_dtoa_r+0x8f4>
 80115fe:	9b05      	ldr	r3, [sp, #20]
 8011600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011604:	0d1b      	lsrs	r3, r3, #20
 8011606:	051b      	lsls	r3, r3, #20
 8011608:	b133      	cbz	r3, 8011618 <_dtoa_r+0x7e8>
 801160a:	9b00      	ldr	r3, [sp, #0]
 801160c:	3301      	adds	r3, #1
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	9b06      	ldr	r3, [sp, #24]
 8011612:	3301      	adds	r3, #1
 8011614:	9306      	str	r3, [sp, #24]
 8011616:	2301      	movs	r3, #1
 8011618:	9308      	str	r3, [sp, #32]
 801161a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801161c:	2b00      	cmp	r3, #0
 801161e:	f000 81b8 	beq.w	8011992 <_dtoa_r+0xb62>
 8011622:	6923      	ldr	r3, [r4, #16]
 8011624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011628:	6918      	ldr	r0, [r3, #16]
 801162a:	f000 fac3 	bl	8011bb4 <__hi0bits>
 801162e:	f1c0 0020 	rsb	r0, r0, #32
 8011632:	9b06      	ldr	r3, [sp, #24]
 8011634:	4418      	add	r0, r3
 8011636:	f010 001f 	ands.w	r0, r0, #31
 801163a:	f000 8082 	beq.w	8011742 <_dtoa_r+0x912>
 801163e:	f1c0 0320 	rsb	r3, r0, #32
 8011642:	2b04      	cmp	r3, #4
 8011644:	dd73      	ble.n	801172e <_dtoa_r+0x8fe>
 8011646:	9b00      	ldr	r3, [sp, #0]
 8011648:	f1c0 001c 	rsb	r0, r0, #28
 801164c:	4403      	add	r3, r0
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	9b06      	ldr	r3, [sp, #24]
 8011652:	4403      	add	r3, r0
 8011654:	4406      	add	r6, r0
 8011656:	9306      	str	r3, [sp, #24]
 8011658:	9b00      	ldr	r3, [sp, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	dd05      	ble.n	801166a <_dtoa_r+0x83a>
 801165e:	9902      	ldr	r1, [sp, #8]
 8011660:	461a      	mov	r2, r3
 8011662:	4648      	mov	r0, r9
 8011664:	f000 fc04 	bl	8011e70 <__lshift>
 8011668:	9002      	str	r0, [sp, #8]
 801166a:	9b06      	ldr	r3, [sp, #24]
 801166c:	2b00      	cmp	r3, #0
 801166e:	dd05      	ble.n	801167c <_dtoa_r+0x84c>
 8011670:	4621      	mov	r1, r4
 8011672:	461a      	mov	r2, r3
 8011674:	4648      	mov	r0, r9
 8011676:	f000 fbfb 	bl	8011e70 <__lshift>
 801167a:	4604      	mov	r4, r0
 801167c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801167e:	2b00      	cmp	r3, #0
 8011680:	d061      	beq.n	8011746 <_dtoa_r+0x916>
 8011682:	9802      	ldr	r0, [sp, #8]
 8011684:	4621      	mov	r1, r4
 8011686:	f000 fc5f 	bl	8011f48 <__mcmp>
 801168a:	2800      	cmp	r0, #0
 801168c:	da5b      	bge.n	8011746 <_dtoa_r+0x916>
 801168e:	2300      	movs	r3, #0
 8011690:	9902      	ldr	r1, [sp, #8]
 8011692:	220a      	movs	r2, #10
 8011694:	4648      	mov	r0, r9
 8011696:	f000 fa47 	bl	8011b28 <__multadd>
 801169a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801169c:	9002      	str	r0, [sp, #8]
 801169e:	f107 38ff 	add.w	r8, r7, #4294967295
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 8177 	beq.w	8011996 <_dtoa_r+0xb66>
 80116a8:	4629      	mov	r1, r5
 80116aa:	2300      	movs	r3, #0
 80116ac:	220a      	movs	r2, #10
 80116ae:	4648      	mov	r0, r9
 80116b0:	f000 fa3a 	bl	8011b28 <__multadd>
 80116b4:	f1bb 0f00 	cmp.w	fp, #0
 80116b8:	4605      	mov	r5, r0
 80116ba:	dc6f      	bgt.n	801179c <_dtoa_r+0x96c>
 80116bc:	9b07      	ldr	r3, [sp, #28]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	dc49      	bgt.n	8011756 <_dtoa_r+0x926>
 80116c2:	e06b      	b.n	801179c <_dtoa_r+0x96c>
 80116c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80116c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80116ca:	e73c      	b.n	8011546 <_dtoa_r+0x716>
 80116cc:	3fe00000 	.word	0x3fe00000
 80116d0:	40240000 	.word	0x40240000
 80116d4:	9b03      	ldr	r3, [sp, #12]
 80116d6:	1e5c      	subs	r4, r3, #1
 80116d8:	9b08      	ldr	r3, [sp, #32]
 80116da:	42a3      	cmp	r3, r4
 80116dc:	db09      	blt.n	80116f2 <_dtoa_r+0x8c2>
 80116de:	1b1c      	subs	r4, r3, r4
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f6bf af30 	bge.w	8011548 <_dtoa_r+0x718>
 80116e8:	9b00      	ldr	r3, [sp, #0]
 80116ea:	9a03      	ldr	r2, [sp, #12]
 80116ec:	1a9e      	subs	r6, r3, r2
 80116ee:	2300      	movs	r3, #0
 80116f0:	e72b      	b.n	801154a <_dtoa_r+0x71a>
 80116f2:	9b08      	ldr	r3, [sp, #32]
 80116f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80116f6:	9408      	str	r4, [sp, #32]
 80116f8:	1ae3      	subs	r3, r4, r3
 80116fa:	441a      	add	r2, r3
 80116fc:	9e00      	ldr	r6, [sp, #0]
 80116fe:	9b03      	ldr	r3, [sp, #12]
 8011700:	920d      	str	r2, [sp, #52]	@ 0x34
 8011702:	2400      	movs	r4, #0
 8011704:	e721      	b.n	801154a <_dtoa_r+0x71a>
 8011706:	9c08      	ldr	r4, [sp, #32]
 8011708:	9e00      	ldr	r6, [sp, #0]
 801170a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801170c:	e728      	b.n	8011560 <_dtoa_r+0x730>
 801170e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011712:	e751      	b.n	80115b8 <_dtoa_r+0x788>
 8011714:	9a08      	ldr	r2, [sp, #32]
 8011716:	9902      	ldr	r1, [sp, #8]
 8011718:	e750      	b.n	80115bc <_dtoa_r+0x78c>
 801171a:	f8cd 8008 	str.w	r8, [sp, #8]
 801171e:	e751      	b.n	80115c4 <_dtoa_r+0x794>
 8011720:	2300      	movs	r3, #0
 8011722:	e779      	b.n	8011618 <_dtoa_r+0x7e8>
 8011724:	9b04      	ldr	r3, [sp, #16]
 8011726:	e777      	b.n	8011618 <_dtoa_r+0x7e8>
 8011728:	2300      	movs	r3, #0
 801172a:	9308      	str	r3, [sp, #32]
 801172c:	e779      	b.n	8011622 <_dtoa_r+0x7f2>
 801172e:	d093      	beq.n	8011658 <_dtoa_r+0x828>
 8011730:	9a00      	ldr	r2, [sp, #0]
 8011732:	331c      	adds	r3, #28
 8011734:	441a      	add	r2, r3
 8011736:	9200      	str	r2, [sp, #0]
 8011738:	9a06      	ldr	r2, [sp, #24]
 801173a:	441a      	add	r2, r3
 801173c:	441e      	add	r6, r3
 801173e:	9206      	str	r2, [sp, #24]
 8011740:	e78a      	b.n	8011658 <_dtoa_r+0x828>
 8011742:	4603      	mov	r3, r0
 8011744:	e7f4      	b.n	8011730 <_dtoa_r+0x900>
 8011746:	9b03      	ldr	r3, [sp, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	46b8      	mov	r8, r7
 801174c:	dc20      	bgt.n	8011790 <_dtoa_r+0x960>
 801174e:	469b      	mov	fp, r3
 8011750:	9b07      	ldr	r3, [sp, #28]
 8011752:	2b02      	cmp	r3, #2
 8011754:	dd1e      	ble.n	8011794 <_dtoa_r+0x964>
 8011756:	f1bb 0f00 	cmp.w	fp, #0
 801175a:	f47f adb1 	bne.w	80112c0 <_dtoa_r+0x490>
 801175e:	4621      	mov	r1, r4
 8011760:	465b      	mov	r3, fp
 8011762:	2205      	movs	r2, #5
 8011764:	4648      	mov	r0, r9
 8011766:	f000 f9df 	bl	8011b28 <__multadd>
 801176a:	4601      	mov	r1, r0
 801176c:	4604      	mov	r4, r0
 801176e:	9802      	ldr	r0, [sp, #8]
 8011770:	f000 fbea 	bl	8011f48 <__mcmp>
 8011774:	2800      	cmp	r0, #0
 8011776:	f77f ada3 	ble.w	80112c0 <_dtoa_r+0x490>
 801177a:	4656      	mov	r6, sl
 801177c:	2331      	movs	r3, #49	@ 0x31
 801177e:	f806 3b01 	strb.w	r3, [r6], #1
 8011782:	f108 0801 	add.w	r8, r8, #1
 8011786:	e59f      	b.n	80112c8 <_dtoa_r+0x498>
 8011788:	9c03      	ldr	r4, [sp, #12]
 801178a:	46b8      	mov	r8, r7
 801178c:	4625      	mov	r5, r4
 801178e:	e7f4      	b.n	801177a <_dtoa_r+0x94a>
 8011790:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 8101 	beq.w	801199e <_dtoa_r+0xb6e>
 801179c:	2e00      	cmp	r6, #0
 801179e:	dd05      	ble.n	80117ac <_dtoa_r+0x97c>
 80117a0:	4629      	mov	r1, r5
 80117a2:	4632      	mov	r2, r6
 80117a4:	4648      	mov	r0, r9
 80117a6:	f000 fb63 	bl	8011e70 <__lshift>
 80117aa:	4605      	mov	r5, r0
 80117ac:	9b08      	ldr	r3, [sp, #32]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d05c      	beq.n	801186c <_dtoa_r+0xa3c>
 80117b2:	6869      	ldr	r1, [r5, #4]
 80117b4:	4648      	mov	r0, r9
 80117b6:	f000 f955 	bl	8011a64 <_Balloc>
 80117ba:	4606      	mov	r6, r0
 80117bc:	b928      	cbnz	r0, 80117ca <_dtoa_r+0x99a>
 80117be:	4b82      	ldr	r3, [pc, #520]	@ (80119c8 <_dtoa_r+0xb98>)
 80117c0:	4602      	mov	r2, r0
 80117c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80117c6:	f7ff bb4a 	b.w	8010e5e <_dtoa_r+0x2e>
 80117ca:	692a      	ldr	r2, [r5, #16]
 80117cc:	3202      	adds	r2, #2
 80117ce:	0092      	lsls	r2, r2, #2
 80117d0:	f105 010c 	add.w	r1, r5, #12
 80117d4:	300c      	adds	r0, #12
 80117d6:	f000 fedd 	bl	8012594 <memcpy>
 80117da:	2201      	movs	r2, #1
 80117dc:	4631      	mov	r1, r6
 80117de:	4648      	mov	r0, r9
 80117e0:	f000 fb46 	bl	8011e70 <__lshift>
 80117e4:	f10a 0301 	add.w	r3, sl, #1
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	eb0a 030b 	add.w	r3, sl, fp
 80117ee:	9308      	str	r3, [sp, #32]
 80117f0:	9b04      	ldr	r3, [sp, #16]
 80117f2:	f003 0301 	and.w	r3, r3, #1
 80117f6:	462f      	mov	r7, r5
 80117f8:	9306      	str	r3, [sp, #24]
 80117fa:	4605      	mov	r5, r0
 80117fc:	9b00      	ldr	r3, [sp, #0]
 80117fe:	9802      	ldr	r0, [sp, #8]
 8011800:	4621      	mov	r1, r4
 8011802:	f103 3bff 	add.w	fp, r3, #4294967295
 8011806:	f7ff fa8a 	bl	8010d1e <quorem>
 801180a:	4603      	mov	r3, r0
 801180c:	3330      	adds	r3, #48	@ 0x30
 801180e:	9003      	str	r0, [sp, #12]
 8011810:	4639      	mov	r1, r7
 8011812:	9802      	ldr	r0, [sp, #8]
 8011814:	9309      	str	r3, [sp, #36]	@ 0x24
 8011816:	f000 fb97 	bl	8011f48 <__mcmp>
 801181a:	462a      	mov	r2, r5
 801181c:	9004      	str	r0, [sp, #16]
 801181e:	4621      	mov	r1, r4
 8011820:	4648      	mov	r0, r9
 8011822:	f000 fbad 	bl	8011f80 <__mdiff>
 8011826:	68c2      	ldr	r2, [r0, #12]
 8011828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801182a:	4606      	mov	r6, r0
 801182c:	bb02      	cbnz	r2, 8011870 <_dtoa_r+0xa40>
 801182e:	4601      	mov	r1, r0
 8011830:	9802      	ldr	r0, [sp, #8]
 8011832:	f000 fb89 	bl	8011f48 <__mcmp>
 8011836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011838:	4602      	mov	r2, r0
 801183a:	4631      	mov	r1, r6
 801183c:	4648      	mov	r0, r9
 801183e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011840:	9309      	str	r3, [sp, #36]	@ 0x24
 8011842:	f000 f94f 	bl	8011ae4 <_Bfree>
 8011846:	9b07      	ldr	r3, [sp, #28]
 8011848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801184a:	9e00      	ldr	r6, [sp, #0]
 801184c:	ea42 0103 	orr.w	r1, r2, r3
 8011850:	9b06      	ldr	r3, [sp, #24]
 8011852:	4319      	orrs	r1, r3
 8011854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011856:	d10d      	bne.n	8011874 <_dtoa_r+0xa44>
 8011858:	2b39      	cmp	r3, #57	@ 0x39
 801185a:	d027      	beq.n	80118ac <_dtoa_r+0xa7c>
 801185c:	9a04      	ldr	r2, [sp, #16]
 801185e:	2a00      	cmp	r2, #0
 8011860:	dd01      	ble.n	8011866 <_dtoa_r+0xa36>
 8011862:	9b03      	ldr	r3, [sp, #12]
 8011864:	3331      	adds	r3, #49	@ 0x31
 8011866:	f88b 3000 	strb.w	r3, [fp]
 801186a:	e52e      	b.n	80112ca <_dtoa_r+0x49a>
 801186c:	4628      	mov	r0, r5
 801186e:	e7b9      	b.n	80117e4 <_dtoa_r+0x9b4>
 8011870:	2201      	movs	r2, #1
 8011872:	e7e2      	b.n	801183a <_dtoa_r+0xa0a>
 8011874:	9904      	ldr	r1, [sp, #16]
 8011876:	2900      	cmp	r1, #0
 8011878:	db04      	blt.n	8011884 <_dtoa_r+0xa54>
 801187a:	9807      	ldr	r0, [sp, #28]
 801187c:	4301      	orrs	r1, r0
 801187e:	9806      	ldr	r0, [sp, #24]
 8011880:	4301      	orrs	r1, r0
 8011882:	d120      	bne.n	80118c6 <_dtoa_r+0xa96>
 8011884:	2a00      	cmp	r2, #0
 8011886:	ddee      	ble.n	8011866 <_dtoa_r+0xa36>
 8011888:	9902      	ldr	r1, [sp, #8]
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	2201      	movs	r2, #1
 801188e:	4648      	mov	r0, r9
 8011890:	f000 faee 	bl	8011e70 <__lshift>
 8011894:	4621      	mov	r1, r4
 8011896:	9002      	str	r0, [sp, #8]
 8011898:	f000 fb56 	bl	8011f48 <__mcmp>
 801189c:	2800      	cmp	r0, #0
 801189e:	9b00      	ldr	r3, [sp, #0]
 80118a0:	dc02      	bgt.n	80118a8 <_dtoa_r+0xa78>
 80118a2:	d1e0      	bne.n	8011866 <_dtoa_r+0xa36>
 80118a4:	07da      	lsls	r2, r3, #31
 80118a6:	d5de      	bpl.n	8011866 <_dtoa_r+0xa36>
 80118a8:	2b39      	cmp	r3, #57	@ 0x39
 80118aa:	d1da      	bne.n	8011862 <_dtoa_r+0xa32>
 80118ac:	2339      	movs	r3, #57	@ 0x39
 80118ae:	f88b 3000 	strb.w	r3, [fp]
 80118b2:	4633      	mov	r3, r6
 80118b4:	461e      	mov	r6, r3
 80118b6:	3b01      	subs	r3, #1
 80118b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80118bc:	2a39      	cmp	r2, #57	@ 0x39
 80118be:	d04e      	beq.n	801195e <_dtoa_r+0xb2e>
 80118c0:	3201      	adds	r2, #1
 80118c2:	701a      	strb	r2, [r3, #0]
 80118c4:	e501      	b.n	80112ca <_dtoa_r+0x49a>
 80118c6:	2a00      	cmp	r2, #0
 80118c8:	dd03      	ble.n	80118d2 <_dtoa_r+0xaa2>
 80118ca:	2b39      	cmp	r3, #57	@ 0x39
 80118cc:	d0ee      	beq.n	80118ac <_dtoa_r+0xa7c>
 80118ce:	3301      	adds	r3, #1
 80118d0:	e7c9      	b.n	8011866 <_dtoa_r+0xa36>
 80118d2:	9a00      	ldr	r2, [sp, #0]
 80118d4:	9908      	ldr	r1, [sp, #32]
 80118d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80118da:	428a      	cmp	r2, r1
 80118dc:	d028      	beq.n	8011930 <_dtoa_r+0xb00>
 80118de:	9902      	ldr	r1, [sp, #8]
 80118e0:	2300      	movs	r3, #0
 80118e2:	220a      	movs	r2, #10
 80118e4:	4648      	mov	r0, r9
 80118e6:	f000 f91f 	bl	8011b28 <__multadd>
 80118ea:	42af      	cmp	r7, r5
 80118ec:	9002      	str	r0, [sp, #8]
 80118ee:	f04f 0300 	mov.w	r3, #0
 80118f2:	f04f 020a 	mov.w	r2, #10
 80118f6:	4639      	mov	r1, r7
 80118f8:	4648      	mov	r0, r9
 80118fa:	d107      	bne.n	801190c <_dtoa_r+0xadc>
 80118fc:	f000 f914 	bl	8011b28 <__multadd>
 8011900:	4607      	mov	r7, r0
 8011902:	4605      	mov	r5, r0
 8011904:	9b00      	ldr	r3, [sp, #0]
 8011906:	3301      	adds	r3, #1
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	e777      	b.n	80117fc <_dtoa_r+0x9cc>
 801190c:	f000 f90c 	bl	8011b28 <__multadd>
 8011910:	4629      	mov	r1, r5
 8011912:	4607      	mov	r7, r0
 8011914:	2300      	movs	r3, #0
 8011916:	220a      	movs	r2, #10
 8011918:	4648      	mov	r0, r9
 801191a:	f000 f905 	bl	8011b28 <__multadd>
 801191e:	4605      	mov	r5, r0
 8011920:	e7f0      	b.n	8011904 <_dtoa_r+0xad4>
 8011922:	f1bb 0f00 	cmp.w	fp, #0
 8011926:	bfcc      	ite	gt
 8011928:	465e      	movgt	r6, fp
 801192a:	2601      	movle	r6, #1
 801192c:	4456      	add	r6, sl
 801192e:	2700      	movs	r7, #0
 8011930:	9902      	ldr	r1, [sp, #8]
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	2201      	movs	r2, #1
 8011936:	4648      	mov	r0, r9
 8011938:	f000 fa9a 	bl	8011e70 <__lshift>
 801193c:	4621      	mov	r1, r4
 801193e:	9002      	str	r0, [sp, #8]
 8011940:	f000 fb02 	bl	8011f48 <__mcmp>
 8011944:	2800      	cmp	r0, #0
 8011946:	dcb4      	bgt.n	80118b2 <_dtoa_r+0xa82>
 8011948:	d102      	bne.n	8011950 <_dtoa_r+0xb20>
 801194a:	9b00      	ldr	r3, [sp, #0]
 801194c:	07db      	lsls	r3, r3, #31
 801194e:	d4b0      	bmi.n	80118b2 <_dtoa_r+0xa82>
 8011950:	4633      	mov	r3, r6
 8011952:	461e      	mov	r6, r3
 8011954:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011958:	2a30      	cmp	r2, #48	@ 0x30
 801195a:	d0fa      	beq.n	8011952 <_dtoa_r+0xb22>
 801195c:	e4b5      	b.n	80112ca <_dtoa_r+0x49a>
 801195e:	459a      	cmp	sl, r3
 8011960:	d1a8      	bne.n	80118b4 <_dtoa_r+0xa84>
 8011962:	2331      	movs	r3, #49	@ 0x31
 8011964:	f108 0801 	add.w	r8, r8, #1
 8011968:	f88a 3000 	strb.w	r3, [sl]
 801196c:	e4ad      	b.n	80112ca <_dtoa_r+0x49a>
 801196e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011970:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80119cc <_dtoa_r+0xb9c>
 8011974:	b11b      	cbz	r3, 801197e <_dtoa_r+0xb4e>
 8011976:	f10a 0308 	add.w	r3, sl, #8
 801197a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801197c:	6013      	str	r3, [r2, #0]
 801197e:	4650      	mov	r0, sl
 8011980:	b017      	add	sp, #92	@ 0x5c
 8011982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011986:	9b07      	ldr	r3, [sp, #28]
 8011988:	2b01      	cmp	r3, #1
 801198a:	f77f ae2e 	ble.w	80115ea <_dtoa_r+0x7ba>
 801198e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011990:	9308      	str	r3, [sp, #32]
 8011992:	2001      	movs	r0, #1
 8011994:	e64d      	b.n	8011632 <_dtoa_r+0x802>
 8011996:	f1bb 0f00 	cmp.w	fp, #0
 801199a:	f77f aed9 	ble.w	8011750 <_dtoa_r+0x920>
 801199e:	4656      	mov	r6, sl
 80119a0:	9802      	ldr	r0, [sp, #8]
 80119a2:	4621      	mov	r1, r4
 80119a4:	f7ff f9bb 	bl	8010d1e <quorem>
 80119a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80119ac:	f806 3b01 	strb.w	r3, [r6], #1
 80119b0:	eba6 020a 	sub.w	r2, r6, sl
 80119b4:	4593      	cmp	fp, r2
 80119b6:	ddb4      	ble.n	8011922 <_dtoa_r+0xaf2>
 80119b8:	9902      	ldr	r1, [sp, #8]
 80119ba:	2300      	movs	r3, #0
 80119bc:	220a      	movs	r2, #10
 80119be:	4648      	mov	r0, r9
 80119c0:	f000 f8b2 	bl	8011b28 <__multadd>
 80119c4:	9002      	str	r0, [sp, #8]
 80119c6:	e7eb      	b.n	80119a0 <_dtoa_r+0xb70>
 80119c8:	08013f5c 	.word	0x08013f5c
 80119cc:	08013ee0 	.word	0x08013ee0

080119d0 <_free_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4605      	mov	r5, r0
 80119d4:	2900      	cmp	r1, #0
 80119d6:	d041      	beq.n	8011a5c <_free_r+0x8c>
 80119d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119dc:	1f0c      	subs	r4, r1, #4
 80119de:	2b00      	cmp	r3, #0
 80119e0:	bfb8      	it	lt
 80119e2:	18e4      	addlt	r4, r4, r3
 80119e4:	f7fe fb82 	bl	80100ec <__malloc_lock>
 80119e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a60 <_free_r+0x90>)
 80119ea:	6813      	ldr	r3, [r2, #0]
 80119ec:	b933      	cbnz	r3, 80119fc <_free_r+0x2c>
 80119ee:	6063      	str	r3, [r4, #4]
 80119f0:	6014      	str	r4, [r2, #0]
 80119f2:	4628      	mov	r0, r5
 80119f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f8:	f7fe bb7e 	b.w	80100f8 <__malloc_unlock>
 80119fc:	42a3      	cmp	r3, r4
 80119fe:	d908      	bls.n	8011a12 <_free_r+0x42>
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	1821      	adds	r1, r4, r0
 8011a04:	428b      	cmp	r3, r1
 8011a06:	bf01      	itttt	eq
 8011a08:	6819      	ldreq	r1, [r3, #0]
 8011a0a:	685b      	ldreq	r3, [r3, #4]
 8011a0c:	1809      	addeq	r1, r1, r0
 8011a0e:	6021      	streq	r1, [r4, #0]
 8011a10:	e7ed      	b.n	80119ee <_free_r+0x1e>
 8011a12:	461a      	mov	r2, r3
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	b10b      	cbz	r3, 8011a1c <_free_r+0x4c>
 8011a18:	42a3      	cmp	r3, r4
 8011a1a:	d9fa      	bls.n	8011a12 <_free_r+0x42>
 8011a1c:	6811      	ldr	r1, [r2, #0]
 8011a1e:	1850      	adds	r0, r2, r1
 8011a20:	42a0      	cmp	r0, r4
 8011a22:	d10b      	bne.n	8011a3c <_free_r+0x6c>
 8011a24:	6820      	ldr	r0, [r4, #0]
 8011a26:	4401      	add	r1, r0
 8011a28:	1850      	adds	r0, r2, r1
 8011a2a:	4283      	cmp	r3, r0
 8011a2c:	6011      	str	r1, [r2, #0]
 8011a2e:	d1e0      	bne.n	80119f2 <_free_r+0x22>
 8011a30:	6818      	ldr	r0, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	6053      	str	r3, [r2, #4]
 8011a36:	4408      	add	r0, r1
 8011a38:	6010      	str	r0, [r2, #0]
 8011a3a:	e7da      	b.n	80119f2 <_free_r+0x22>
 8011a3c:	d902      	bls.n	8011a44 <_free_r+0x74>
 8011a3e:	230c      	movs	r3, #12
 8011a40:	602b      	str	r3, [r5, #0]
 8011a42:	e7d6      	b.n	80119f2 <_free_r+0x22>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	1821      	adds	r1, r4, r0
 8011a48:	428b      	cmp	r3, r1
 8011a4a:	bf04      	itt	eq
 8011a4c:	6819      	ldreq	r1, [r3, #0]
 8011a4e:	685b      	ldreq	r3, [r3, #4]
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	bf04      	itt	eq
 8011a54:	1809      	addeq	r1, r1, r0
 8011a56:	6021      	streq	r1, [r4, #0]
 8011a58:	6054      	str	r4, [r2, #4]
 8011a5a:	e7ca      	b.n	80119f2 <_free_r+0x22>
 8011a5c:	bd38      	pop	{r3, r4, r5, pc}
 8011a5e:	bf00      	nop
 8011a60:	200022b4 	.word	0x200022b4

08011a64 <_Balloc>:
 8011a64:	b570      	push	{r4, r5, r6, lr}
 8011a66:	69c6      	ldr	r6, [r0, #28]
 8011a68:	4604      	mov	r4, r0
 8011a6a:	460d      	mov	r5, r1
 8011a6c:	b976      	cbnz	r6, 8011a8c <_Balloc+0x28>
 8011a6e:	2010      	movs	r0, #16
 8011a70:	f7fe fa8a 	bl	800ff88 <malloc>
 8011a74:	4602      	mov	r2, r0
 8011a76:	61e0      	str	r0, [r4, #28]
 8011a78:	b920      	cbnz	r0, 8011a84 <_Balloc+0x20>
 8011a7a:	4b18      	ldr	r3, [pc, #96]	@ (8011adc <_Balloc+0x78>)
 8011a7c:	4818      	ldr	r0, [pc, #96]	@ (8011ae0 <_Balloc+0x7c>)
 8011a7e:	216b      	movs	r1, #107	@ 0x6b
 8011a80:	f000 fd96 	bl	80125b0 <__assert_func>
 8011a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a88:	6006      	str	r6, [r0, #0]
 8011a8a:	60c6      	str	r6, [r0, #12]
 8011a8c:	69e6      	ldr	r6, [r4, #28]
 8011a8e:	68f3      	ldr	r3, [r6, #12]
 8011a90:	b183      	cbz	r3, 8011ab4 <_Balloc+0x50>
 8011a92:	69e3      	ldr	r3, [r4, #28]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a9a:	b9b8      	cbnz	r0, 8011acc <_Balloc+0x68>
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8011aa2:	1d72      	adds	r2, r6, #5
 8011aa4:	0092      	lsls	r2, r2, #2
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f000 fda0 	bl	80125ec <_calloc_r>
 8011aac:	b160      	cbz	r0, 8011ac8 <_Balloc+0x64>
 8011aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ab2:	e00e      	b.n	8011ad2 <_Balloc+0x6e>
 8011ab4:	2221      	movs	r2, #33	@ 0x21
 8011ab6:	2104      	movs	r1, #4
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f000 fd97 	bl	80125ec <_calloc_r>
 8011abe:	69e3      	ldr	r3, [r4, #28]
 8011ac0:	60f0      	str	r0, [r6, #12]
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d1e4      	bne.n	8011a92 <_Balloc+0x2e>
 8011ac8:	2000      	movs	r0, #0
 8011aca:	bd70      	pop	{r4, r5, r6, pc}
 8011acc:	6802      	ldr	r2, [r0, #0]
 8011ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ad8:	e7f7      	b.n	8011aca <_Balloc+0x66>
 8011ada:	bf00      	nop
 8011adc:	08013eed 	.word	0x08013eed
 8011ae0:	08013f6d 	.word	0x08013f6d

08011ae4 <_Bfree>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	69c6      	ldr	r6, [r0, #28]
 8011ae8:	4605      	mov	r5, r0
 8011aea:	460c      	mov	r4, r1
 8011aec:	b976      	cbnz	r6, 8011b0c <_Bfree+0x28>
 8011aee:	2010      	movs	r0, #16
 8011af0:	f7fe fa4a 	bl	800ff88 <malloc>
 8011af4:	4602      	mov	r2, r0
 8011af6:	61e8      	str	r0, [r5, #28]
 8011af8:	b920      	cbnz	r0, 8011b04 <_Bfree+0x20>
 8011afa:	4b09      	ldr	r3, [pc, #36]	@ (8011b20 <_Bfree+0x3c>)
 8011afc:	4809      	ldr	r0, [pc, #36]	@ (8011b24 <_Bfree+0x40>)
 8011afe:	218f      	movs	r1, #143	@ 0x8f
 8011b00:	f000 fd56 	bl	80125b0 <__assert_func>
 8011b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b08:	6006      	str	r6, [r0, #0]
 8011b0a:	60c6      	str	r6, [r0, #12]
 8011b0c:	b13c      	cbz	r4, 8011b1e <_Bfree+0x3a>
 8011b0e:	69eb      	ldr	r3, [r5, #28]
 8011b10:	6862      	ldr	r2, [r4, #4]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b18:	6021      	str	r1, [r4, #0]
 8011b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}
 8011b20:	08013eed 	.word	0x08013eed
 8011b24:	08013f6d 	.word	0x08013f6d

08011b28 <__multadd>:
 8011b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2c:	690d      	ldr	r5, [r1, #16]
 8011b2e:	4607      	mov	r7, r0
 8011b30:	460c      	mov	r4, r1
 8011b32:	461e      	mov	r6, r3
 8011b34:	f101 0c14 	add.w	ip, r1, #20
 8011b38:	2000      	movs	r0, #0
 8011b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8011b3e:	b299      	uxth	r1, r3
 8011b40:	fb02 6101 	mla	r1, r2, r1, r6
 8011b44:	0c1e      	lsrs	r6, r3, #16
 8011b46:	0c0b      	lsrs	r3, r1, #16
 8011b48:	fb02 3306 	mla	r3, r2, r6, r3
 8011b4c:	b289      	uxth	r1, r1
 8011b4e:	3001      	adds	r0, #1
 8011b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b54:	4285      	cmp	r5, r0
 8011b56:	f84c 1b04 	str.w	r1, [ip], #4
 8011b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b5e:	dcec      	bgt.n	8011b3a <__multadd+0x12>
 8011b60:	b30e      	cbz	r6, 8011ba6 <__multadd+0x7e>
 8011b62:	68a3      	ldr	r3, [r4, #8]
 8011b64:	42ab      	cmp	r3, r5
 8011b66:	dc19      	bgt.n	8011b9c <__multadd+0x74>
 8011b68:	6861      	ldr	r1, [r4, #4]
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	3101      	adds	r1, #1
 8011b6e:	f7ff ff79 	bl	8011a64 <_Balloc>
 8011b72:	4680      	mov	r8, r0
 8011b74:	b928      	cbnz	r0, 8011b82 <__multadd+0x5a>
 8011b76:	4602      	mov	r2, r0
 8011b78:	4b0c      	ldr	r3, [pc, #48]	@ (8011bac <__multadd+0x84>)
 8011b7a:	480d      	ldr	r0, [pc, #52]	@ (8011bb0 <__multadd+0x88>)
 8011b7c:	21ba      	movs	r1, #186	@ 0xba
 8011b7e:	f000 fd17 	bl	80125b0 <__assert_func>
 8011b82:	6922      	ldr	r2, [r4, #16]
 8011b84:	3202      	adds	r2, #2
 8011b86:	f104 010c 	add.w	r1, r4, #12
 8011b8a:	0092      	lsls	r2, r2, #2
 8011b8c:	300c      	adds	r0, #12
 8011b8e:	f000 fd01 	bl	8012594 <memcpy>
 8011b92:	4621      	mov	r1, r4
 8011b94:	4638      	mov	r0, r7
 8011b96:	f7ff ffa5 	bl	8011ae4 <_Bfree>
 8011b9a:	4644      	mov	r4, r8
 8011b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ba0:	3501      	adds	r5, #1
 8011ba2:	615e      	str	r6, [r3, #20]
 8011ba4:	6125      	str	r5, [r4, #16]
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bac:	08013f5c 	.word	0x08013f5c
 8011bb0:	08013f6d 	.word	0x08013f6d

08011bb4 <__hi0bits>:
 8011bb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011bb8:	4603      	mov	r3, r0
 8011bba:	bf36      	itet	cc
 8011bbc:	0403      	lslcc	r3, r0, #16
 8011bbe:	2000      	movcs	r0, #0
 8011bc0:	2010      	movcc	r0, #16
 8011bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011bc6:	bf3c      	itt	cc
 8011bc8:	021b      	lslcc	r3, r3, #8
 8011bca:	3008      	addcc	r0, #8
 8011bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011bd0:	bf3c      	itt	cc
 8011bd2:	011b      	lslcc	r3, r3, #4
 8011bd4:	3004      	addcc	r0, #4
 8011bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bda:	bf3c      	itt	cc
 8011bdc:	009b      	lslcc	r3, r3, #2
 8011bde:	3002      	addcc	r0, #2
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	db05      	blt.n	8011bf0 <__hi0bits+0x3c>
 8011be4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011be8:	f100 0001 	add.w	r0, r0, #1
 8011bec:	bf08      	it	eq
 8011bee:	2020      	moveq	r0, #32
 8011bf0:	4770      	bx	lr

08011bf2 <__lo0bits>:
 8011bf2:	6803      	ldr	r3, [r0, #0]
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	f013 0007 	ands.w	r0, r3, #7
 8011bfa:	d00b      	beq.n	8011c14 <__lo0bits+0x22>
 8011bfc:	07d9      	lsls	r1, r3, #31
 8011bfe:	d421      	bmi.n	8011c44 <__lo0bits+0x52>
 8011c00:	0798      	lsls	r0, r3, #30
 8011c02:	bf49      	itett	mi
 8011c04:	085b      	lsrmi	r3, r3, #1
 8011c06:	089b      	lsrpl	r3, r3, #2
 8011c08:	2001      	movmi	r0, #1
 8011c0a:	6013      	strmi	r3, [r2, #0]
 8011c0c:	bf5c      	itt	pl
 8011c0e:	6013      	strpl	r3, [r2, #0]
 8011c10:	2002      	movpl	r0, #2
 8011c12:	4770      	bx	lr
 8011c14:	b299      	uxth	r1, r3
 8011c16:	b909      	cbnz	r1, 8011c1c <__lo0bits+0x2a>
 8011c18:	0c1b      	lsrs	r3, r3, #16
 8011c1a:	2010      	movs	r0, #16
 8011c1c:	b2d9      	uxtb	r1, r3
 8011c1e:	b909      	cbnz	r1, 8011c24 <__lo0bits+0x32>
 8011c20:	3008      	adds	r0, #8
 8011c22:	0a1b      	lsrs	r3, r3, #8
 8011c24:	0719      	lsls	r1, r3, #28
 8011c26:	bf04      	itt	eq
 8011c28:	091b      	lsreq	r3, r3, #4
 8011c2a:	3004      	addeq	r0, #4
 8011c2c:	0799      	lsls	r1, r3, #30
 8011c2e:	bf04      	itt	eq
 8011c30:	089b      	lsreq	r3, r3, #2
 8011c32:	3002      	addeq	r0, #2
 8011c34:	07d9      	lsls	r1, r3, #31
 8011c36:	d403      	bmi.n	8011c40 <__lo0bits+0x4e>
 8011c38:	085b      	lsrs	r3, r3, #1
 8011c3a:	f100 0001 	add.w	r0, r0, #1
 8011c3e:	d003      	beq.n	8011c48 <__lo0bits+0x56>
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	4770      	bx	lr
 8011c44:	2000      	movs	r0, #0
 8011c46:	4770      	bx	lr
 8011c48:	2020      	movs	r0, #32
 8011c4a:	4770      	bx	lr

08011c4c <__i2b>:
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	460c      	mov	r4, r1
 8011c50:	2101      	movs	r1, #1
 8011c52:	f7ff ff07 	bl	8011a64 <_Balloc>
 8011c56:	4602      	mov	r2, r0
 8011c58:	b928      	cbnz	r0, 8011c66 <__i2b+0x1a>
 8011c5a:	4b05      	ldr	r3, [pc, #20]	@ (8011c70 <__i2b+0x24>)
 8011c5c:	4805      	ldr	r0, [pc, #20]	@ (8011c74 <__i2b+0x28>)
 8011c5e:	f240 1145 	movw	r1, #325	@ 0x145
 8011c62:	f000 fca5 	bl	80125b0 <__assert_func>
 8011c66:	2301      	movs	r3, #1
 8011c68:	6144      	str	r4, [r0, #20]
 8011c6a:	6103      	str	r3, [r0, #16]
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	bf00      	nop
 8011c70:	08013f5c 	.word	0x08013f5c
 8011c74:	08013f6d 	.word	0x08013f6d

08011c78 <__multiply>:
 8011c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7c:	4617      	mov	r7, r2
 8011c7e:	690a      	ldr	r2, [r1, #16]
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	bfa8      	it	ge
 8011c86:	463b      	movge	r3, r7
 8011c88:	4689      	mov	r9, r1
 8011c8a:	bfa4      	itt	ge
 8011c8c:	460f      	movge	r7, r1
 8011c8e:	4699      	movge	r9, r3
 8011c90:	693d      	ldr	r5, [r7, #16]
 8011c92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	eb05 060a 	add.w	r6, r5, sl
 8011c9e:	42b3      	cmp	r3, r6
 8011ca0:	b085      	sub	sp, #20
 8011ca2:	bfb8      	it	lt
 8011ca4:	3101      	addlt	r1, #1
 8011ca6:	f7ff fedd 	bl	8011a64 <_Balloc>
 8011caa:	b930      	cbnz	r0, 8011cba <__multiply+0x42>
 8011cac:	4602      	mov	r2, r0
 8011cae:	4b41      	ldr	r3, [pc, #260]	@ (8011db4 <__multiply+0x13c>)
 8011cb0:	4841      	ldr	r0, [pc, #260]	@ (8011db8 <__multiply+0x140>)
 8011cb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011cb6:	f000 fc7b 	bl	80125b0 <__assert_func>
 8011cba:	f100 0414 	add.w	r4, r0, #20
 8011cbe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011cc2:	4623      	mov	r3, r4
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4573      	cmp	r3, lr
 8011cc8:	d320      	bcc.n	8011d0c <__multiply+0x94>
 8011cca:	f107 0814 	add.w	r8, r7, #20
 8011cce:	f109 0114 	add.w	r1, r9, #20
 8011cd2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011cd6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011cda:	9302      	str	r3, [sp, #8]
 8011cdc:	1beb      	subs	r3, r5, r7
 8011cde:	3b15      	subs	r3, #21
 8011ce0:	f023 0303 	bic.w	r3, r3, #3
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	3715      	adds	r7, #21
 8011ce8:	42bd      	cmp	r5, r7
 8011cea:	bf38      	it	cc
 8011cec:	2304      	movcc	r3, #4
 8011cee:	9301      	str	r3, [sp, #4]
 8011cf0:	9b02      	ldr	r3, [sp, #8]
 8011cf2:	9103      	str	r1, [sp, #12]
 8011cf4:	428b      	cmp	r3, r1
 8011cf6:	d80c      	bhi.n	8011d12 <__multiply+0x9a>
 8011cf8:	2e00      	cmp	r6, #0
 8011cfa:	dd03      	ble.n	8011d04 <__multiply+0x8c>
 8011cfc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d055      	beq.n	8011db0 <__multiply+0x138>
 8011d04:	6106      	str	r6, [r0, #16]
 8011d06:	b005      	add	sp, #20
 8011d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0c:	f843 2b04 	str.w	r2, [r3], #4
 8011d10:	e7d9      	b.n	8011cc6 <__multiply+0x4e>
 8011d12:	f8b1 a000 	ldrh.w	sl, [r1]
 8011d16:	f1ba 0f00 	cmp.w	sl, #0
 8011d1a:	d01f      	beq.n	8011d5c <__multiply+0xe4>
 8011d1c:	46c4      	mov	ip, r8
 8011d1e:	46a1      	mov	r9, r4
 8011d20:	2700      	movs	r7, #0
 8011d22:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d26:	f8d9 3000 	ldr.w	r3, [r9]
 8011d2a:	fa1f fb82 	uxth.w	fp, r2
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	fb0a 330b 	mla	r3, sl, fp, r3
 8011d34:	443b      	add	r3, r7
 8011d36:	f8d9 7000 	ldr.w	r7, [r9]
 8011d3a:	0c12      	lsrs	r2, r2, #16
 8011d3c:	0c3f      	lsrs	r7, r7, #16
 8011d3e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011d42:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d4c:	4565      	cmp	r5, ip
 8011d4e:	f849 3b04 	str.w	r3, [r9], #4
 8011d52:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011d56:	d8e4      	bhi.n	8011d22 <__multiply+0xaa>
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	50e7      	str	r7, [r4, r3]
 8011d5c:	9b03      	ldr	r3, [sp, #12]
 8011d5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011d62:	3104      	adds	r1, #4
 8011d64:	f1b9 0f00 	cmp.w	r9, #0
 8011d68:	d020      	beq.n	8011dac <__multiply+0x134>
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	4647      	mov	r7, r8
 8011d6e:	46a4      	mov	ip, r4
 8011d70:	f04f 0a00 	mov.w	sl, #0
 8011d74:	f8b7 b000 	ldrh.w	fp, [r7]
 8011d78:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8011d80:	4452      	add	r2, sl
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d88:	f84c 3b04 	str.w	r3, [ip], #4
 8011d8c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d94:	f8bc 3000 	ldrh.w	r3, [ip]
 8011d98:	fb09 330a 	mla	r3, r9, sl, r3
 8011d9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011da0:	42bd      	cmp	r5, r7
 8011da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011da6:	d8e5      	bhi.n	8011d74 <__multiply+0xfc>
 8011da8:	9a01      	ldr	r2, [sp, #4]
 8011daa:	50a3      	str	r3, [r4, r2]
 8011dac:	3404      	adds	r4, #4
 8011dae:	e79f      	b.n	8011cf0 <__multiply+0x78>
 8011db0:	3e01      	subs	r6, #1
 8011db2:	e7a1      	b.n	8011cf8 <__multiply+0x80>
 8011db4:	08013f5c 	.word	0x08013f5c
 8011db8:	08013f6d 	.word	0x08013f6d

08011dbc <__pow5mult>:
 8011dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	f012 0203 	ands.w	r2, r2, #3
 8011dc6:	4607      	mov	r7, r0
 8011dc8:	460e      	mov	r6, r1
 8011dca:	d007      	beq.n	8011ddc <__pow5mult+0x20>
 8011dcc:	4c25      	ldr	r4, [pc, #148]	@ (8011e64 <__pow5mult+0xa8>)
 8011dce:	3a01      	subs	r2, #1
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011dd6:	f7ff fea7 	bl	8011b28 <__multadd>
 8011dda:	4606      	mov	r6, r0
 8011ddc:	10ad      	asrs	r5, r5, #2
 8011dde:	d03d      	beq.n	8011e5c <__pow5mult+0xa0>
 8011de0:	69fc      	ldr	r4, [r7, #28]
 8011de2:	b97c      	cbnz	r4, 8011e04 <__pow5mult+0x48>
 8011de4:	2010      	movs	r0, #16
 8011de6:	f7fe f8cf 	bl	800ff88 <malloc>
 8011dea:	4602      	mov	r2, r0
 8011dec:	61f8      	str	r0, [r7, #28]
 8011dee:	b928      	cbnz	r0, 8011dfc <__pow5mult+0x40>
 8011df0:	4b1d      	ldr	r3, [pc, #116]	@ (8011e68 <__pow5mult+0xac>)
 8011df2:	481e      	ldr	r0, [pc, #120]	@ (8011e6c <__pow5mult+0xb0>)
 8011df4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011df8:	f000 fbda 	bl	80125b0 <__assert_func>
 8011dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e00:	6004      	str	r4, [r0, #0]
 8011e02:	60c4      	str	r4, [r0, #12]
 8011e04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e0c:	b94c      	cbnz	r4, 8011e22 <__pow5mult+0x66>
 8011e0e:	f240 2171 	movw	r1, #625	@ 0x271
 8011e12:	4638      	mov	r0, r7
 8011e14:	f7ff ff1a 	bl	8011c4c <__i2b>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e1e:	4604      	mov	r4, r0
 8011e20:	6003      	str	r3, [r0, #0]
 8011e22:	f04f 0900 	mov.w	r9, #0
 8011e26:	07eb      	lsls	r3, r5, #31
 8011e28:	d50a      	bpl.n	8011e40 <__pow5mult+0x84>
 8011e2a:	4631      	mov	r1, r6
 8011e2c:	4622      	mov	r2, r4
 8011e2e:	4638      	mov	r0, r7
 8011e30:	f7ff ff22 	bl	8011c78 <__multiply>
 8011e34:	4631      	mov	r1, r6
 8011e36:	4680      	mov	r8, r0
 8011e38:	4638      	mov	r0, r7
 8011e3a:	f7ff fe53 	bl	8011ae4 <_Bfree>
 8011e3e:	4646      	mov	r6, r8
 8011e40:	106d      	asrs	r5, r5, #1
 8011e42:	d00b      	beq.n	8011e5c <__pow5mult+0xa0>
 8011e44:	6820      	ldr	r0, [r4, #0]
 8011e46:	b938      	cbnz	r0, 8011e58 <__pow5mult+0x9c>
 8011e48:	4622      	mov	r2, r4
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff ff13 	bl	8011c78 <__multiply>
 8011e52:	6020      	str	r0, [r4, #0]
 8011e54:	f8c0 9000 	str.w	r9, [r0]
 8011e58:	4604      	mov	r4, r0
 8011e5a:	e7e4      	b.n	8011e26 <__pow5mult+0x6a>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e62:	bf00      	nop
 8011e64:	08014020 	.word	0x08014020
 8011e68:	08013eed 	.word	0x08013eed
 8011e6c:	08013f6d 	.word	0x08013f6d

08011e70 <__lshift>:
 8011e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e74:	460c      	mov	r4, r1
 8011e76:	6849      	ldr	r1, [r1, #4]
 8011e78:	6923      	ldr	r3, [r4, #16]
 8011e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e7e:	68a3      	ldr	r3, [r4, #8]
 8011e80:	4607      	mov	r7, r0
 8011e82:	4691      	mov	r9, r2
 8011e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e88:	f108 0601 	add.w	r6, r8, #1
 8011e8c:	42b3      	cmp	r3, r6
 8011e8e:	db0b      	blt.n	8011ea8 <__lshift+0x38>
 8011e90:	4638      	mov	r0, r7
 8011e92:	f7ff fde7 	bl	8011a64 <_Balloc>
 8011e96:	4605      	mov	r5, r0
 8011e98:	b948      	cbnz	r0, 8011eae <__lshift+0x3e>
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	4b28      	ldr	r3, [pc, #160]	@ (8011f40 <__lshift+0xd0>)
 8011e9e:	4829      	ldr	r0, [pc, #164]	@ (8011f44 <__lshift+0xd4>)
 8011ea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011ea4:	f000 fb84 	bl	80125b0 <__assert_func>
 8011ea8:	3101      	adds	r1, #1
 8011eaa:	005b      	lsls	r3, r3, #1
 8011eac:	e7ee      	b.n	8011e8c <__lshift+0x1c>
 8011eae:	2300      	movs	r3, #0
 8011eb0:	f100 0114 	add.w	r1, r0, #20
 8011eb4:	f100 0210 	add.w	r2, r0, #16
 8011eb8:	4618      	mov	r0, r3
 8011eba:	4553      	cmp	r3, sl
 8011ebc:	db33      	blt.n	8011f26 <__lshift+0xb6>
 8011ebe:	6920      	ldr	r0, [r4, #16]
 8011ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ec4:	f104 0314 	add.w	r3, r4, #20
 8011ec8:	f019 091f 	ands.w	r9, r9, #31
 8011ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011ed4:	d02b      	beq.n	8011f2e <__lshift+0xbe>
 8011ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8011eda:	468a      	mov	sl, r1
 8011edc:	2200      	movs	r2, #0
 8011ede:	6818      	ldr	r0, [r3, #0]
 8011ee0:	fa00 f009 	lsl.w	r0, r0, r9
 8011ee4:	4310      	orrs	r0, r2
 8011ee6:	f84a 0b04 	str.w	r0, [sl], #4
 8011eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eee:	459c      	cmp	ip, r3
 8011ef0:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ef4:	d8f3      	bhi.n	8011ede <__lshift+0x6e>
 8011ef6:	ebac 0304 	sub.w	r3, ip, r4
 8011efa:	3b15      	subs	r3, #21
 8011efc:	f023 0303 	bic.w	r3, r3, #3
 8011f00:	3304      	adds	r3, #4
 8011f02:	f104 0015 	add.w	r0, r4, #21
 8011f06:	4560      	cmp	r0, ip
 8011f08:	bf88      	it	hi
 8011f0a:	2304      	movhi	r3, #4
 8011f0c:	50ca      	str	r2, [r1, r3]
 8011f0e:	b10a      	cbz	r2, 8011f14 <__lshift+0xa4>
 8011f10:	f108 0602 	add.w	r6, r8, #2
 8011f14:	3e01      	subs	r6, #1
 8011f16:	4638      	mov	r0, r7
 8011f18:	612e      	str	r6, [r5, #16]
 8011f1a:	4621      	mov	r1, r4
 8011f1c:	f7ff fde2 	bl	8011ae4 <_Bfree>
 8011f20:	4628      	mov	r0, r5
 8011f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	e7c5      	b.n	8011eba <__lshift+0x4a>
 8011f2e:	3904      	subs	r1, #4
 8011f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f38:	459c      	cmp	ip, r3
 8011f3a:	d8f9      	bhi.n	8011f30 <__lshift+0xc0>
 8011f3c:	e7ea      	b.n	8011f14 <__lshift+0xa4>
 8011f3e:	bf00      	nop
 8011f40:	08013f5c 	.word	0x08013f5c
 8011f44:	08013f6d 	.word	0x08013f6d

08011f48 <__mcmp>:
 8011f48:	690a      	ldr	r2, [r1, #16]
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	6900      	ldr	r0, [r0, #16]
 8011f4e:	1a80      	subs	r0, r0, r2
 8011f50:	b530      	push	{r4, r5, lr}
 8011f52:	d10e      	bne.n	8011f72 <__mcmp+0x2a>
 8011f54:	3314      	adds	r3, #20
 8011f56:	3114      	adds	r1, #20
 8011f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f68:	4295      	cmp	r5, r2
 8011f6a:	d003      	beq.n	8011f74 <__mcmp+0x2c>
 8011f6c:	d205      	bcs.n	8011f7a <__mcmp+0x32>
 8011f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f72:	bd30      	pop	{r4, r5, pc}
 8011f74:	42a3      	cmp	r3, r4
 8011f76:	d3f3      	bcc.n	8011f60 <__mcmp+0x18>
 8011f78:	e7fb      	b.n	8011f72 <__mcmp+0x2a>
 8011f7a:	2001      	movs	r0, #1
 8011f7c:	e7f9      	b.n	8011f72 <__mcmp+0x2a>
	...

08011f80 <__mdiff>:
 8011f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	4689      	mov	r9, r1
 8011f86:	4606      	mov	r6, r0
 8011f88:	4611      	mov	r1, r2
 8011f8a:	4648      	mov	r0, r9
 8011f8c:	4614      	mov	r4, r2
 8011f8e:	f7ff ffdb 	bl	8011f48 <__mcmp>
 8011f92:	1e05      	subs	r5, r0, #0
 8011f94:	d112      	bne.n	8011fbc <__mdiff+0x3c>
 8011f96:	4629      	mov	r1, r5
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7ff fd63 	bl	8011a64 <_Balloc>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	b928      	cbnz	r0, 8011fae <__mdiff+0x2e>
 8011fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80120a0 <__mdiff+0x120>)
 8011fa4:	f240 2137 	movw	r1, #567	@ 0x237
 8011fa8:	483e      	ldr	r0, [pc, #248]	@ (80120a4 <__mdiff+0x124>)
 8011faa:	f000 fb01 	bl	80125b0 <__assert_func>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	b003      	add	sp, #12
 8011fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fbc:	bfbc      	itt	lt
 8011fbe:	464b      	movlt	r3, r9
 8011fc0:	46a1      	movlt	r9, r4
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011fc8:	bfba      	itte	lt
 8011fca:	461c      	movlt	r4, r3
 8011fcc:	2501      	movlt	r5, #1
 8011fce:	2500      	movge	r5, #0
 8011fd0:	f7ff fd48 	bl	8011a64 <_Balloc>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	b918      	cbnz	r0, 8011fe0 <__mdiff+0x60>
 8011fd8:	4b31      	ldr	r3, [pc, #196]	@ (80120a0 <__mdiff+0x120>)
 8011fda:	f240 2145 	movw	r1, #581	@ 0x245
 8011fde:	e7e3      	b.n	8011fa8 <__mdiff+0x28>
 8011fe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011fe4:	6926      	ldr	r6, [r4, #16]
 8011fe6:	60c5      	str	r5, [r0, #12]
 8011fe8:	f109 0310 	add.w	r3, r9, #16
 8011fec:	f109 0514 	add.w	r5, r9, #20
 8011ff0:	f104 0e14 	add.w	lr, r4, #20
 8011ff4:	f100 0b14 	add.w	fp, r0, #20
 8011ff8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011ffc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012000:	9301      	str	r3, [sp, #4]
 8012002:	46d9      	mov	r9, fp
 8012004:	f04f 0c00 	mov.w	ip, #0
 8012008:	9b01      	ldr	r3, [sp, #4]
 801200a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801200e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012012:	9301      	str	r3, [sp, #4]
 8012014:	fa1f f38a 	uxth.w	r3, sl
 8012018:	4619      	mov	r1, r3
 801201a:	b283      	uxth	r3, r0
 801201c:	1acb      	subs	r3, r1, r3
 801201e:	0c00      	lsrs	r0, r0, #16
 8012020:	4463      	add	r3, ip
 8012022:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012026:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801202a:	b29b      	uxth	r3, r3
 801202c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012030:	4576      	cmp	r6, lr
 8012032:	f849 3b04 	str.w	r3, [r9], #4
 8012036:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801203a:	d8e5      	bhi.n	8012008 <__mdiff+0x88>
 801203c:	1b33      	subs	r3, r6, r4
 801203e:	3b15      	subs	r3, #21
 8012040:	f023 0303 	bic.w	r3, r3, #3
 8012044:	3415      	adds	r4, #21
 8012046:	3304      	adds	r3, #4
 8012048:	42a6      	cmp	r6, r4
 801204a:	bf38      	it	cc
 801204c:	2304      	movcc	r3, #4
 801204e:	441d      	add	r5, r3
 8012050:	445b      	add	r3, fp
 8012052:	461e      	mov	r6, r3
 8012054:	462c      	mov	r4, r5
 8012056:	4544      	cmp	r4, r8
 8012058:	d30e      	bcc.n	8012078 <__mdiff+0xf8>
 801205a:	f108 0103 	add.w	r1, r8, #3
 801205e:	1b49      	subs	r1, r1, r5
 8012060:	f021 0103 	bic.w	r1, r1, #3
 8012064:	3d03      	subs	r5, #3
 8012066:	45a8      	cmp	r8, r5
 8012068:	bf38      	it	cc
 801206a:	2100      	movcc	r1, #0
 801206c:	440b      	add	r3, r1
 801206e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012072:	b191      	cbz	r1, 801209a <__mdiff+0x11a>
 8012074:	6117      	str	r7, [r2, #16]
 8012076:	e79d      	b.n	8011fb4 <__mdiff+0x34>
 8012078:	f854 1b04 	ldr.w	r1, [r4], #4
 801207c:	46e6      	mov	lr, ip
 801207e:	0c08      	lsrs	r0, r1, #16
 8012080:	fa1c fc81 	uxtah	ip, ip, r1
 8012084:	4471      	add	r1, lr
 8012086:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801208a:	b289      	uxth	r1, r1
 801208c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012090:	f846 1b04 	str.w	r1, [r6], #4
 8012094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012098:	e7dd      	b.n	8012056 <__mdiff+0xd6>
 801209a:	3f01      	subs	r7, #1
 801209c:	e7e7      	b.n	801206e <__mdiff+0xee>
 801209e:	bf00      	nop
 80120a0:	08013f5c 	.word	0x08013f5c
 80120a4:	08013f6d 	.word	0x08013f6d

080120a8 <__d2b>:
 80120a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120ac:	460f      	mov	r7, r1
 80120ae:	2101      	movs	r1, #1
 80120b0:	ec59 8b10 	vmov	r8, r9, d0
 80120b4:	4616      	mov	r6, r2
 80120b6:	f7ff fcd5 	bl	8011a64 <_Balloc>
 80120ba:	4604      	mov	r4, r0
 80120bc:	b930      	cbnz	r0, 80120cc <__d2b+0x24>
 80120be:	4602      	mov	r2, r0
 80120c0:	4b23      	ldr	r3, [pc, #140]	@ (8012150 <__d2b+0xa8>)
 80120c2:	4824      	ldr	r0, [pc, #144]	@ (8012154 <__d2b+0xac>)
 80120c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80120c8:	f000 fa72 	bl	80125b0 <__assert_func>
 80120cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120d4:	b10d      	cbz	r5, 80120da <__d2b+0x32>
 80120d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80120da:	9301      	str	r3, [sp, #4]
 80120dc:	f1b8 0300 	subs.w	r3, r8, #0
 80120e0:	d023      	beq.n	801212a <__d2b+0x82>
 80120e2:	4668      	mov	r0, sp
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	f7ff fd84 	bl	8011bf2 <__lo0bits>
 80120ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80120ee:	b1d0      	cbz	r0, 8012126 <__d2b+0x7e>
 80120f0:	f1c0 0320 	rsb	r3, r0, #32
 80120f4:	fa02 f303 	lsl.w	r3, r2, r3
 80120f8:	430b      	orrs	r3, r1
 80120fa:	40c2      	lsrs	r2, r0
 80120fc:	6163      	str	r3, [r4, #20]
 80120fe:	9201      	str	r2, [sp, #4]
 8012100:	9b01      	ldr	r3, [sp, #4]
 8012102:	61a3      	str	r3, [r4, #24]
 8012104:	2b00      	cmp	r3, #0
 8012106:	bf0c      	ite	eq
 8012108:	2201      	moveq	r2, #1
 801210a:	2202      	movne	r2, #2
 801210c:	6122      	str	r2, [r4, #16]
 801210e:	b1a5      	cbz	r5, 801213a <__d2b+0x92>
 8012110:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012114:	4405      	add	r5, r0
 8012116:	603d      	str	r5, [r7, #0]
 8012118:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801211c:	6030      	str	r0, [r6, #0]
 801211e:	4620      	mov	r0, r4
 8012120:	b003      	add	sp, #12
 8012122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012126:	6161      	str	r1, [r4, #20]
 8012128:	e7ea      	b.n	8012100 <__d2b+0x58>
 801212a:	a801      	add	r0, sp, #4
 801212c:	f7ff fd61 	bl	8011bf2 <__lo0bits>
 8012130:	9b01      	ldr	r3, [sp, #4]
 8012132:	6163      	str	r3, [r4, #20]
 8012134:	3020      	adds	r0, #32
 8012136:	2201      	movs	r2, #1
 8012138:	e7e8      	b.n	801210c <__d2b+0x64>
 801213a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801213e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012142:	6038      	str	r0, [r7, #0]
 8012144:	6918      	ldr	r0, [r3, #16]
 8012146:	f7ff fd35 	bl	8011bb4 <__hi0bits>
 801214a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801214e:	e7e5      	b.n	801211c <__d2b+0x74>
 8012150:	08013f5c 	.word	0x08013f5c
 8012154:	08013f6d 	.word	0x08013f6d

08012158 <__ssputs_r>:
 8012158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801215c:	688e      	ldr	r6, [r1, #8]
 801215e:	461f      	mov	r7, r3
 8012160:	42be      	cmp	r6, r7
 8012162:	680b      	ldr	r3, [r1, #0]
 8012164:	4682      	mov	sl, r0
 8012166:	460c      	mov	r4, r1
 8012168:	4690      	mov	r8, r2
 801216a:	d82d      	bhi.n	80121c8 <__ssputs_r+0x70>
 801216c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012170:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012174:	d026      	beq.n	80121c4 <__ssputs_r+0x6c>
 8012176:	6965      	ldr	r5, [r4, #20]
 8012178:	6909      	ldr	r1, [r1, #16]
 801217a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801217e:	eba3 0901 	sub.w	r9, r3, r1
 8012182:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012186:	1c7b      	adds	r3, r7, #1
 8012188:	444b      	add	r3, r9
 801218a:	106d      	asrs	r5, r5, #1
 801218c:	429d      	cmp	r5, r3
 801218e:	bf38      	it	cc
 8012190:	461d      	movcc	r5, r3
 8012192:	0553      	lsls	r3, r2, #21
 8012194:	d527      	bpl.n	80121e6 <__ssputs_r+0x8e>
 8012196:	4629      	mov	r1, r5
 8012198:	f7fd ff28 	bl	800ffec <_malloc_r>
 801219c:	4606      	mov	r6, r0
 801219e:	b360      	cbz	r0, 80121fa <__ssputs_r+0xa2>
 80121a0:	6921      	ldr	r1, [r4, #16]
 80121a2:	464a      	mov	r2, r9
 80121a4:	f000 f9f6 	bl	8012594 <memcpy>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80121ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	6126      	str	r6, [r4, #16]
 80121b6:	6165      	str	r5, [r4, #20]
 80121b8:	444e      	add	r6, r9
 80121ba:	eba5 0509 	sub.w	r5, r5, r9
 80121be:	6026      	str	r6, [r4, #0]
 80121c0:	60a5      	str	r5, [r4, #8]
 80121c2:	463e      	mov	r6, r7
 80121c4:	42be      	cmp	r6, r7
 80121c6:	d900      	bls.n	80121ca <__ssputs_r+0x72>
 80121c8:	463e      	mov	r6, r7
 80121ca:	6820      	ldr	r0, [r4, #0]
 80121cc:	4632      	mov	r2, r6
 80121ce:	4641      	mov	r1, r8
 80121d0:	f000 f9c6 	bl	8012560 <memmove>
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	1b9b      	subs	r3, r3, r6
 80121d8:	60a3      	str	r3, [r4, #8]
 80121da:	6823      	ldr	r3, [r4, #0]
 80121dc:	4433      	add	r3, r6
 80121de:	6023      	str	r3, [r4, #0]
 80121e0:	2000      	movs	r0, #0
 80121e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121e6:	462a      	mov	r2, r5
 80121e8:	f000 fa26 	bl	8012638 <_realloc_r>
 80121ec:	4606      	mov	r6, r0
 80121ee:	2800      	cmp	r0, #0
 80121f0:	d1e0      	bne.n	80121b4 <__ssputs_r+0x5c>
 80121f2:	6921      	ldr	r1, [r4, #16]
 80121f4:	4650      	mov	r0, sl
 80121f6:	f7ff fbeb 	bl	80119d0 <_free_r>
 80121fa:	230c      	movs	r3, #12
 80121fc:	f8ca 3000 	str.w	r3, [sl]
 8012200:	89a3      	ldrh	r3, [r4, #12]
 8012202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012206:	81a3      	strh	r3, [r4, #12]
 8012208:	f04f 30ff 	mov.w	r0, #4294967295
 801220c:	e7e9      	b.n	80121e2 <__ssputs_r+0x8a>
	...

08012210 <_svfiprintf_r>:
 8012210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	4698      	mov	r8, r3
 8012216:	898b      	ldrh	r3, [r1, #12]
 8012218:	061b      	lsls	r3, r3, #24
 801221a:	b09d      	sub	sp, #116	@ 0x74
 801221c:	4607      	mov	r7, r0
 801221e:	460d      	mov	r5, r1
 8012220:	4614      	mov	r4, r2
 8012222:	d510      	bpl.n	8012246 <_svfiprintf_r+0x36>
 8012224:	690b      	ldr	r3, [r1, #16]
 8012226:	b973      	cbnz	r3, 8012246 <_svfiprintf_r+0x36>
 8012228:	2140      	movs	r1, #64	@ 0x40
 801222a:	f7fd fedf 	bl	800ffec <_malloc_r>
 801222e:	6028      	str	r0, [r5, #0]
 8012230:	6128      	str	r0, [r5, #16]
 8012232:	b930      	cbnz	r0, 8012242 <_svfiprintf_r+0x32>
 8012234:	230c      	movs	r3, #12
 8012236:	603b      	str	r3, [r7, #0]
 8012238:	f04f 30ff 	mov.w	r0, #4294967295
 801223c:	b01d      	add	sp, #116	@ 0x74
 801223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012242:	2340      	movs	r3, #64	@ 0x40
 8012244:	616b      	str	r3, [r5, #20]
 8012246:	2300      	movs	r3, #0
 8012248:	9309      	str	r3, [sp, #36]	@ 0x24
 801224a:	2320      	movs	r3, #32
 801224c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012250:	f8cd 800c 	str.w	r8, [sp, #12]
 8012254:	2330      	movs	r3, #48	@ 0x30
 8012256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80123f4 <_svfiprintf_r+0x1e4>
 801225a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801225e:	f04f 0901 	mov.w	r9, #1
 8012262:	4623      	mov	r3, r4
 8012264:	469a      	mov	sl, r3
 8012266:	f813 2b01 	ldrb.w	r2, [r3], #1
 801226a:	b10a      	cbz	r2, 8012270 <_svfiprintf_r+0x60>
 801226c:	2a25      	cmp	r2, #37	@ 0x25
 801226e:	d1f9      	bne.n	8012264 <_svfiprintf_r+0x54>
 8012270:	ebba 0b04 	subs.w	fp, sl, r4
 8012274:	d00b      	beq.n	801228e <_svfiprintf_r+0x7e>
 8012276:	465b      	mov	r3, fp
 8012278:	4622      	mov	r2, r4
 801227a:	4629      	mov	r1, r5
 801227c:	4638      	mov	r0, r7
 801227e:	f7ff ff6b 	bl	8012158 <__ssputs_r>
 8012282:	3001      	adds	r0, #1
 8012284:	f000 80a7 	beq.w	80123d6 <_svfiprintf_r+0x1c6>
 8012288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801228a:	445a      	add	r2, fp
 801228c:	9209      	str	r2, [sp, #36]	@ 0x24
 801228e:	f89a 3000 	ldrb.w	r3, [sl]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 809f 	beq.w	80123d6 <_svfiprintf_r+0x1c6>
 8012298:	2300      	movs	r3, #0
 801229a:	f04f 32ff 	mov.w	r2, #4294967295
 801229e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122a2:	f10a 0a01 	add.w	sl, sl, #1
 80122a6:	9304      	str	r3, [sp, #16]
 80122a8:	9307      	str	r3, [sp, #28]
 80122aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80122b0:	4654      	mov	r4, sl
 80122b2:	2205      	movs	r2, #5
 80122b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b8:	484e      	ldr	r0, [pc, #312]	@ (80123f4 <_svfiprintf_r+0x1e4>)
 80122ba:	f7ed ffb1 	bl	8000220 <memchr>
 80122be:	9a04      	ldr	r2, [sp, #16]
 80122c0:	b9d8      	cbnz	r0, 80122fa <_svfiprintf_r+0xea>
 80122c2:	06d0      	lsls	r0, r2, #27
 80122c4:	bf44      	itt	mi
 80122c6:	2320      	movmi	r3, #32
 80122c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122cc:	0711      	lsls	r1, r2, #28
 80122ce:	bf44      	itt	mi
 80122d0:	232b      	movmi	r3, #43	@ 0x2b
 80122d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122d6:	f89a 3000 	ldrb.w	r3, [sl]
 80122da:	2b2a      	cmp	r3, #42	@ 0x2a
 80122dc:	d015      	beq.n	801230a <_svfiprintf_r+0xfa>
 80122de:	9a07      	ldr	r2, [sp, #28]
 80122e0:	4654      	mov	r4, sl
 80122e2:	2000      	movs	r0, #0
 80122e4:	f04f 0c0a 	mov.w	ip, #10
 80122e8:	4621      	mov	r1, r4
 80122ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122ee:	3b30      	subs	r3, #48	@ 0x30
 80122f0:	2b09      	cmp	r3, #9
 80122f2:	d94b      	bls.n	801238c <_svfiprintf_r+0x17c>
 80122f4:	b1b0      	cbz	r0, 8012324 <_svfiprintf_r+0x114>
 80122f6:	9207      	str	r2, [sp, #28]
 80122f8:	e014      	b.n	8012324 <_svfiprintf_r+0x114>
 80122fa:	eba0 0308 	sub.w	r3, r0, r8
 80122fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012302:	4313      	orrs	r3, r2
 8012304:	9304      	str	r3, [sp, #16]
 8012306:	46a2      	mov	sl, r4
 8012308:	e7d2      	b.n	80122b0 <_svfiprintf_r+0xa0>
 801230a:	9b03      	ldr	r3, [sp, #12]
 801230c:	1d19      	adds	r1, r3, #4
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	9103      	str	r1, [sp, #12]
 8012312:	2b00      	cmp	r3, #0
 8012314:	bfbb      	ittet	lt
 8012316:	425b      	neglt	r3, r3
 8012318:	f042 0202 	orrlt.w	r2, r2, #2
 801231c:	9307      	strge	r3, [sp, #28]
 801231e:	9307      	strlt	r3, [sp, #28]
 8012320:	bfb8      	it	lt
 8012322:	9204      	strlt	r2, [sp, #16]
 8012324:	7823      	ldrb	r3, [r4, #0]
 8012326:	2b2e      	cmp	r3, #46	@ 0x2e
 8012328:	d10a      	bne.n	8012340 <_svfiprintf_r+0x130>
 801232a:	7863      	ldrb	r3, [r4, #1]
 801232c:	2b2a      	cmp	r3, #42	@ 0x2a
 801232e:	d132      	bne.n	8012396 <_svfiprintf_r+0x186>
 8012330:	9b03      	ldr	r3, [sp, #12]
 8012332:	1d1a      	adds	r2, r3, #4
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	9203      	str	r2, [sp, #12]
 8012338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801233c:	3402      	adds	r4, #2
 801233e:	9305      	str	r3, [sp, #20]
 8012340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012404 <_svfiprintf_r+0x1f4>
 8012344:	7821      	ldrb	r1, [r4, #0]
 8012346:	2203      	movs	r2, #3
 8012348:	4650      	mov	r0, sl
 801234a:	f7ed ff69 	bl	8000220 <memchr>
 801234e:	b138      	cbz	r0, 8012360 <_svfiprintf_r+0x150>
 8012350:	9b04      	ldr	r3, [sp, #16]
 8012352:	eba0 000a 	sub.w	r0, r0, sl
 8012356:	2240      	movs	r2, #64	@ 0x40
 8012358:	4082      	lsls	r2, r0
 801235a:	4313      	orrs	r3, r2
 801235c:	3401      	adds	r4, #1
 801235e:	9304      	str	r3, [sp, #16]
 8012360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012364:	4824      	ldr	r0, [pc, #144]	@ (80123f8 <_svfiprintf_r+0x1e8>)
 8012366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801236a:	2206      	movs	r2, #6
 801236c:	f7ed ff58 	bl	8000220 <memchr>
 8012370:	2800      	cmp	r0, #0
 8012372:	d036      	beq.n	80123e2 <_svfiprintf_r+0x1d2>
 8012374:	4b21      	ldr	r3, [pc, #132]	@ (80123fc <_svfiprintf_r+0x1ec>)
 8012376:	bb1b      	cbnz	r3, 80123c0 <_svfiprintf_r+0x1b0>
 8012378:	9b03      	ldr	r3, [sp, #12]
 801237a:	3307      	adds	r3, #7
 801237c:	f023 0307 	bic.w	r3, r3, #7
 8012380:	3308      	adds	r3, #8
 8012382:	9303      	str	r3, [sp, #12]
 8012384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012386:	4433      	add	r3, r6
 8012388:	9309      	str	r3, [sp, #36]	@ 0x24
 801238a:	e76a      	b.n	8012262 <_svfiprintf_r+0x52>
 801238c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012390:	460c      	mov	r4, r1
 8012392:	2001      	movs	r0, #1
 8012394:	e7a8      	b.n	80122e8 <_svfiprintf_r+0xd8>
 8012396:	2300      	movs	r3, #0
 8012398:	3401      	adds	r4, #1
 801239a:	9305      	str	r3, [sp, #20]
 801239c:	4619      	mov	r1, r3
 801239e:	f04f 0c0a 	mov.w	ip, #10
 80123a2:	4620      	mov	r0, r4
 80123a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123a8:	3a30      	subs	r2, #48	@ 0x30
 80123aa:	2a09      	cmp	r2, #9
 80123ac:	d903      	bls.n	80123b6 <_svfiprintf_r+0x1a6>
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0c6      	beq.n	8012340 <_svfiprintf_r+0x130>
 80123b2:	9105      	str	r1, [sp, #20]
 80123b4:	e7c4      	b.n	8012340 <_svfiprintf_r+0x130>
 80123b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ba:	4604      	mov	r4, r0
 80123bc:	2301      	movs	r3, #1
 80123be:	e7f0      	b.n	80123a2 <_svfiprintf_r+0x192>
 80123c0:	ab03      	add	r3, sp, #12
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	462a      	mov	r2, r5
 80123c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012400 <_svfiprintf_r+0x1f0>)
 80123c8:	a904      	add	r1, sp, #16
 80123ca:	4638      	mov	r0, r7
 80123cc:	f7fd ff3a 	bl	8010244 <_printf_float>
 80123d0:	1c42      	adds	r2, r0, #1
 80123d2:	4606      	mov	r6, r0
 80123d4:	d1d6      	bne.n	8012384 <_svfiprintf_r+0x174>
 80123d6:	89ab      	ldrh	r3, [r5, #12]
 80123d8:	065b      	lsls	r3, r3, #25
 80123da:	f53f af2d 	bmi.w	8012238 <_svfiprintf_r+0x28>
 80123de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123e0:	e72c      	b.n	801223c <_svfiprintf_r+0x2c>
 80123e2:	ab03      	add	r3, sp, #12
 80123e4:	9300      	str	r3, [sp, #0]
 80123e6:	462a      	mov	r2, r5
 80123e8:	4b05      	ldr	r3, [pc, #20]	@ (8012400 <_svfiprintf_r+0x1f0>)
 80123ea:	a904      	add	r1, sp, #16
 80123ec:	4638      	mov	r0, r7
 80123ee:	f7fe f9c1 	bl	8010774 <_printf_i>
 80123f2:	e7ed      	b.n	80123d0 <_svfiprintf_r+0x1c0>
 80123f4:	08013fc6 	.word	0x08013fc6
 80123f8:	08013fd0 	.word	0x08013fd0
 80123fc:	08010245 	.word	0x08010245
 8012400:	08012159 	.word	0x08012159
 8012404:	08013fcc 	.word	0x08013fcc

08012408 <__sflush_r>:
 8012408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012410:	0716      	lsls	r6, r2, #28
 8012412:	4605      	mov	r5, r0
 8012414:	460c      	mov	r4, r1
 8012416:	d454      	bmi.n	80124c2 <__sflush_r+0xba>
 8012418:	684b      	ldr	r3, [r1, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	dc02      	bgt.n	8012424 <__sflush_r+0x1c>
 801241e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012420:	2b00      	cmp	r3, #0
 8012422:	dd48      	ble.n	80124b6 <__sflush_r+0xae>
 8012424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012426:	2e00      	cmp	r6, #0
 8012428:	d045      	beq.n	80124b6 <__sflush_r+0xae>
 801242a:	2300      	movs	r3, #0
 801242c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012430:	682f      	ldr	r7, [r5, #0]
 8012432:	6a21      	ldr	r1, [r4, #32]
 8012434:	602b      	str	r3, [r5, #0]
 8012436:	d030      	beq.n	801249a <__sflush_r+0x92>
 8012438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	0759      	lsls	r1, r3, #29
 801243e:	d505      	bpl.n	801244c <__sflush_r+0x44>
 8012440:	6863      	ldr	r3, [r4, #4]
 8012442:	1ad2      	subs	r2, r2, r3
 8012444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012446:	b10b      	cbz	r3, 801244c <__sflush_r+0x44>
 8012448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801244a:	1ad2      	subs	r2, r2, r3
 801244c:	2300      	movs	r3, #0
 801244e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012450:	6a21      	ldr	r1, [r4, #32]
 8012452:	4628      	mov	r0, r5
 8012454:	47b0      	blx	r6
 8012456:	1c43      	adds	r3, r0, #1
 8012458:	89a3      	ldrh	r3, [r4, #12]
 801245a:	d106      	bne.n	801246a <__sflush_r+0x62>
 801245c:	6829      	ldr	r1, [r5, #0]
 801245e:	291d      	cmp	r1, #29
 8012460:	d82b      	bhi.n	80124ba <__sflush_r+0xb2>
 8012462:	4a2a      	ldr	r2, [pc, #168]	@ (801250c <__sflush_r+0x104>)
 8012464:	40ca      	lsrs	r2, r1
 8012466:	07d6      	lsls	r6, r2, #31
 8012468:	d527      	bpl.n	80124ba <__sflush_r+0xb2>
 801246a:	2200      	movs	r2, #0
 801246c:	6062      	str	r2, [r4, #4]
 801246e:	04d9      	lsls	r1, r3, #19
 8012470:	6922      	ldr	r2, [r4, #16]
 8012472:	6022      	str	r2, [r4, #0]
 8012474:	d504      	bpl.n	8012480 <__sflush_r+0x78>
 8012476:	1c42      	adds	r2, r0, #1
 8012478:	d101      	bne.n	801247e <__sflush_r+0x76>
 801247a:	682b      	ldr	r3, [r5, #0]
 801247c:	b903      	cbnz	r3, 8012480 <__sflush_r+0x78>
 801247e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012482:	602f      	str	r7, [r5, #0]
 8012484:	b1b9      	cbz	r1, 80124b6 <__sflush_r+0xae>
 8012486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801248a:	4299      	cmp	r1, r3
 801248c:	d002      	beq.n	8012494 <__sflush_r+0x8c>
 801248e:	4628      	mov	r0, r5
 8012490:	f7ff fa9e 	bl	80119d0 <_free_r>
 8012494:	2300      	movs	r3, #0
 8012496:	6363      	str	r3, [r4, #52]	@ 0x34
 8012498:	e00d      	b.n	80124b6 <__sflush_r+0xae>
 801249a:	2301      	movs	r3, #1
 801249c:	4628      	mov	r0, r5
 801249e:	47b0      	blx	r6
 80124a0:	4602      	mov	r2, r0
 80124a2:	1c50      	adds	r0, r2, #1
 80124a4:	d1c9      	bne.n	801243a <__sflush_r+0x32>
 80124a6:	682b      	ldr	r3, [r5, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d0c6      	beq.n	801243a <__sflush_r+0x32>
 80124ac:	2b1d      	cmp	r3, #29
 80124ae:	d001      	beq.n	80124b4 <__sflush_r+0xac>
 80124b0:	2b16      	cmp	r3, #22
 80124b2:	d11e      	bne.n	80124f2 <__sflush_r+0xea>
 80124b4:	602f      	str	r7, [r5, #0]
 80124b6:	2000      	movs	r0, #0
 80124b8:	e022      	b.n	8012500 <__sflush_r+0xf8>
 80124ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124be:	b21b      	sxth	r3, r3
 80124c0:	e01b      	b.n	80124fa <__sflush_r+0xf2>
 80124c2:	690f      	ldr	r7, [r1, #16]
 80124c4:	2f00      	cmp	r7, #0
 80124c6:	d0f6      	beq.n	80124b6 <__sflush_r+0xae>
 80124c8:	0793      	lsls	r3, r2, #30
 80124ca:	680e      	ldr	r6, [r1, #0]
 80124cc:	bf08      	it	eq
 80124ce:	694b      	ldreq	r3, [r1, #20]
 80124d0:	600f      	str	r7, [r1, #0]
 80124d2:	bf18      	it	ne
 80124d4:	2300      	movne	r3, #0
 80124d6:	eba6 0807 	sub.w	r8, r6, r7
 80124da:	608b      	str	r3, [r1, #8]
 80124dc:	f1b8 0f00 	cmp.w	r8, #0
 80124e0:	dde9      	ble.n	80124b6 <__sflush_r+0xae>
 80124e2:	6a21      	ldr	r1, [r4, #32]
 80124e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80124e6:	4643      	mov	r3, r8
 80124e8:	463a      	mov	r2, r7
 80124ea:	4628      	mov	r0, r5
 80124ec:	47b0      	blx	r6
 80124ee:	2800      	cmp	r0, #0
 80124f0:	dc08      	bgt.n	8012504 <__sflush_r+0xfc>
 80124f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124fa:	81a3      	strh	r3, [r4, #12]
 80124fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012504:	4407      	add	r7, r0
 8012506:	eba8 0800 	sub.w	r8, r8, r0
 801250a:	e7e7      	b.n	80124dc <__sflush_r+0xd4>
 801250c:	20400001 	.word	0x20400001

08012510 <_fflush_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	690b      	ldr	r3, [r1, #16]
 8012514:	4605      	mov	r5, r0
 8012516:	460c      	mov	r4, r1
 8012518:	b913      	cbnz	r3, 8012520 <_fflush_r+0x10>
 801251a:	2500      	movs	r5, #0
 801251c:	4628      	mov	r0, r5
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	b118      	cbz	r0, 801252a <_fflush_r+0x1a>
 8012522:	6a03      	ldr	r3, [r0, #32]
 8012524:	b90b      	cbnz	r3, 801252a <_fflush_r+0x1a>
 8012526:	f7fe facf 	bl	8010ac8 <__sinit>
 801252a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d0f3      	beq.n	801251a <_fflush_r+0xa>
 8012532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012534:	07d0      	lsls	r0, r2, #31
 8012536:	d404      	bmi.n	8012542 <_fflush_r+0x32>
 8012538:	0599      	lsls	r1, r3, #22
 801253a:	d402      	bmi.n	8012542 <_fflush_r+0x32>
 801253c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801253e:	f7fe fbec 	bl	8010d1a <__retarget_lock_acquire_recursive>
 8012542:	4628      	mov	r0, r5
 8012544:	4621      	mov	r1, r4
 8012546:	f7ff ff5f 	bl	8012408 <__sflush_r>
 801254a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801254c:	07da      	lsls	r2, r3, #31
 801254e:	4605      	mov	r5, r0
 8012550:	d4e4      	bmi.n	801251c <_fflush_r+0xc>
 8012552:	89a3      	ldrh	r3, [r4, #12]
 8012554:	059b      	lsls	r3, r3, #22
 8012556:	d4e1      	bmi.n	801251c <_fflush_r+0xc>
 8012558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801255a:	f7fe fbdf 	bl	8010d1c <__retarget_lock_release_recursive>
 801255e:	e7dd      	b.n	801251c <_fflush_r+0xc>

08012560 <memmove>:
 8012560:	4288      	cmp	r0, r1
 8012562:	b510      	push	{r4, lr}
 8012564:	eb01 0402 	add.w	r4, r1, r2
 8012568:	d902      	bls.n	8012570 <memmove+0x10>
 801256a:	4284      	cmp	r4, r0
 801256c:	4623      	mov	r3, r4
 801256e:	d807      	bhi.n	8012580 <memmove+0x20>
 8012570:	1e43      	subs	r3, r0, #1
 8012572:	42a1      	cmp	r1, r4
 8012574:	d008      	beq.n	8012588 <memmove+0x28>
 8012576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801257a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801257e:	e7f8      	b.n	8012572 <memmove+0x12>
 8012580:	4402      	add	r2, r0
 8012582:	4601      	mov	r1, r0
 8012584:	428a      	cmp	r2, r1
 8012586:	d100      	bne.n	801258a <memmove+0x2a>
 8012588:	bd10      	pop	{r4, pc}
 801258a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801258e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012592:	e7f7      	b.n	8012584 <memmove+0x24>

08012594 <memcpy>:
 8012594:	440a      	add	r2, r1
 8012596:	4291      	cmp	r1, r2
 8012598:	f100 33ff 	add.w	r3, r0, #4294967295
 801259c:	d100      	bne.n	80125a0 <memcpy+0xc>
 801259e:	4770      	bx	lr
 80125a0:	b510      	push	{r4, lr}
 80125a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125aa:	4291      	cmp	r1, r2
 80125ac:	d1f9      	bne.n	80125a2 <memcpy+0xe>
 80125ae:	bd10      	pop	{r4, pc}

080125b0 <__assert_func>:
 80125b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125b2:	4614      	mov	r4, r2
 80125b4:	461a      	mov	r2, r3
 80125b6:	4b09      	ldr	r3, [pc, #36]	@ (80125dc <__assert_func+0x2c>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4605      	mov	r5, r0
 80125bc:	68d8      	ldr	r0, [r3, #12]
 80125be:	b14c      	cbz	r4, 80125d4 <__assert_func+0x24>
 80125c0:	4b07      	ldr	r3, [pc, #28]	@ (80125e0 <__assert_func+0x30>)
 80125c2:	9100      	str	r1, [sp, #0]
 80125c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125c8:	4906      	ldr	r1, [pc, #24]	@ (80125e4 <__assert_func+0x34>)
 80125ca:	462b      	mov	r3, r5
 80125cc:	f000 f870 	bl	80126b0 <fiprintf>
 80125d0:	f000 f880 	bl	80126d4 <abort>
 80125d4:	4b04      	ldr	r3, [pc, #16]	@ (80125e8 <__assert_func+0x38>)
 80125d6:	461c      	mov	r4, r3
 80125d8:	e7f3      	b.n	80125c2 <__assert_func+0x12>
 80125da:	bf00      	nop
 80125dc:	20000118 	.word	0x20000118
 80125e0:	08013fe1 	.word	0x08013fe1
 80125e4:	08013fee 	.word	0x08013fee
 80125e8:	0801401c 	.word	0x0801401c

080125ec <_calloc_r>:
 80125ec:	b570      	push	{r4, r5, r6, lr}
 80125ee:	fba1 5402 	umull	r5, r4, r1, r2
 80125f2:	b934      	cbnz	r4, 8012602 <_calloc_r+0x16>
 80125f4:	4629      	mov	r1, r5
 80125f6:	f7fd fcf9 	bl	800ffec <_malloc_r>
 80125fa:	4606      	mov	r6, r0
 80125fc:	b928      	cbnz	r0, 801260a <_calloc_r+0x1e>
 80125fe:	4630      	mov	r0, r6
 8012600:	bd70      	pop	{r4, r5, r6, pc}
 8012602:	220c      	movs	r2, #12
 8012604:	6002      	str	r2, [r0, #0]
 8012606:	2600      	movs	r6, #0
 8012608:	e7f9      	b.n	80125fe <_calloc_r+0x12>
 801260a:	462a      	mov	r2, r5
 801260c:	4621      	mov	r1, r4
 801260e:	f7fe faf6 	bl	8010bfe <memset>
 8012612:	e7f4      	b.n	80125fe <_calloc_r+0x12>

08012614 <__ascii_mbtowc>:
 8012614:	b082      	sub	sp, #8
 8012616:	b901      	cbnz	r1, 801261a <__ascii_mbtowc+0x6>
 8012618:	a901      	add	r1, sp, #4
 801261a:	b142      	cbz	r2, 801262e <__ascii_mbtowc+0x1a>
 801261c:	b14b      	cbz	r3, 8012632 <__ascii_mbtowc+0x1e>
 801261e:	7813      	ldrb	r3, [r2, #0]
 8012620:	600b      	str	r3, [r1, #0]
 8012622:	7812      	ldrb	r2, [r2, #0]
 8012624:	1e10      	subs	r0, r2, #0
 8012626:	bf18      	it	ne
 8012628:	2001      	movne	r0, #1
 801262a:	b002      	add	sp, #8
 801262c:	4770      	bx	lr
 801262e:	4610      	mov	r0, r2
 8012630:	e7fb      	b.n	801262a <__ascii_mbtowc+0x16>
 8012632:	f06f 0001 	mvn.w	r0, #1
 8012636:	e7f8      	b.n	801262a <__ascii_mbtowc+0x16>

08012638 <_realloc_r>:
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4607      	mov	r7, r0
 801263e:	4614      	mov	r4, r2
 8012640:	460d      	mov	r5, r1
 8012642:	b921      	cbnz	r1, 801264e <_realloc_r+0x16>
 8012644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012648:	4611      	mov	r1, r2
 801264a:	f7fd bccf 	b.w	800ffec <_malloc_r>
 801264e:	b92a      	cbnz	r2, 801265c <_realloc_r+0x24>
 8012650:	f7ff f9be 	bl	80119d0 <_free_r>
 8012654:	4625      	mov	r5, r4
 8012656:	4628      	mov	r0, r5
 8012658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801265c:	f000 f841 	bl	80126e2 <_malloc_usable_size_r>
 8012660:	4284      	cmp	r4, r0
 8012662:	4606      	mov	r6, r0
 8012664:	d802      	bhi.n	801266c <_realloc_r+0x34>
 8012666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801266a:	d8f4      	bhi.n	8012656 <_realloc_r+0x1e>
 801266c:	4621      	mov	r1, r4
 801266e:	4638      	mov	r0, r7
 8012670:	f7fd fcbc 	bl	800ffec <_malloc_r>
 8012674:	4680      	mov	r8, r0
 8012676:	b908      	cbnz	r0, 801267c <_realloc_r+0x44>
 8012678:	4645      	mov	r5, r8
 801267a:	e7ec      	b.n	8012656 <_realloc_r+0x1e>
 801267c:	42b4      	cmp	r4, r6
 801267e:	4622      	mov	r2, r4
 8012680:	4629      	mov	r1, r5
 8012682:	bf28      	it	cs
 8012684:	4632      	movcs	r2, r6
 8012686:	f7ff ff85 	bl	8012594 <memcpy>
 801268a:	4629      	mov	r1, r5
 801268c:	4638      	mov	r0, r7
 801268e:	f7ff f99f 	bl	80119d0 <_free_r>
 8012692:	e7f1      	b.n	8012678 <_realloc_r+0x40>

08012694 <__ascii_wctomb>:
 8012694:	4603      	mov	r3, r0
 8012696:	4608      	mov	r0, r1
 8012698:	b141      	cbz	r1, 80126ac <__ascii_wctomb+0x18>
 801269a:	2aff      	cmp	r2, #255	@ 0xff
 801269c:	d904      	bls.n	80126a8 <__ascii_wctomb+0x14>
 801269e:	228a      	movs	r2, #138	@ 0x8a
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	f04f 30ff 	mov.w	r0, #4294967295
 80126a6:	4770      	bx	lr
 80126a8:	700a      	strb	r2, [r1, #0]
 80126aa:	2001      	movs	r0, #1
 80126ac:	4770      	bx	lr
	...

080126b0 <fiprintf>:
 80126b0:	b40e      	push	{r1, r2, r3}
 80126b2:	b503      	push	{r0, r1, lr}
 80126b4:	4601      	mov	r1, r0
 80126b6:	ab03      	add	r3, sp, #12
 80126b8:	4805      	ldr	r0, [pc, #20]	@ (80126d0 <fiprintf+0x20>)
 80126ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80126be:	6800      	ldr	r0, [r0, #0]
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	f000 f83f 	bl	8012744 <_vfiprintf_r>
 80126c6:	b002      	add	sp, #8
 80126c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126cc:	b003      	add	sp, #12
 80126ce:	4770      	bx	lr
 80126d0:	20000118 	.word	0x20000118

080126d4 <abort>:
 80126d4:	b508      	push	{r3, lr}
 80126d6:	2006      	movs	r0, #6
 80126d8:	f000 fa08 	bl	8012aec <raise>
 80126dc:	2001      	movs	r0, #1
 80126de:	f7f1 fc21 	bl	8003f24 <_exit>

080126e2 <_malloc_usable_size_r>:
 80126e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126e6:	1f18      	subs	r0, r3, #4
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	bfbc      	itt	lt
 80126ec:	580b      	ldrlt	r3, [r1, r0]
 80126ee:	18c0      	addlt	r0, r0, r3
 80126f0:	4770      	bx	lr

080126f2 <__sfputc_r>:
 80126f2:	6893      	ldr	r3, [r2, #8]
 80126f4:	3b01      	subs	r3, #1
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	b410      	push	{r4}
 80126fa:	6093      	str	r3, [r2, #8]
 80126fc:	da08      	bge.n	8012710 <__sfputc_r+0x1e>
 80126fe:	6994      	ldr	r4, [r2, #24]
 8012700:	42a3      	cmp	r3, r4
 8012702:	db01      	blt.n	8012708 <__sfputc_r+0x16>
 8012704:	290a      	cmp	r1, #10
 8012706:	d103      	bne.n	8012710 <__sfputc_r+0x1e>
 8012708:	f85d 4b04 	ldr.w	r4, [sp], #4
 801270c:	f000 b932 	b.w	8012974 <__swbuf_r>
 8012710:	6813      	ldr	r3, [r2, #0]
 8012712:	1c58      	adds	r0, r3, #1
 8012714:	6010      	str	r0, [r2, #0]
 8012716:	7019      	strb	r1, [r3, #0]
 8012718:	4608      	mov	r0, r1
 801271a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801271e:	4770      	bx	lr

08012720 <__sfputs_r>:
 8012720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012722:	4606      	mov	r6, r0
 8012724:	460f      	mov	r7, r1
 8012726:	4614      	mov	r4, r2
 8012728:	18d5      	adds	r5, r2, r3
 801272a:	42ac      	cmp	r4, r5
 801272c:	d101      	bne.n	8012732 <__sfputs_r+0x12>
 801272e:	2000      	movs	r0, #0
 8012730:	e007      	b.n	8012742 <__sfputs_r+0x22>
 8012732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012736:	463a      	mov	r2, r7
 8012738:	4630      	mov	r0, r6
 801273a:	f7ff ffda 	bl	80126f2 <__sfputc_r>
 801273e:	1c43      	adds	r3, r0, #1
 8012740:	d1f3      	bne.n	801272a <__sfputs_r+0xa>
 8012742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012744 <_vfiprintf_r>:
 8012744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	460d      	mov	r5, r1
 801274a:	b09d      	sub	sp, #116	@ 0x74
 801274c:	4614      	mov	r4, r2
 801274e:	4698      	mov	r8, r3
 8012750:	4606      	mov	r6, r0
 8012752:	b118      	cbz	r0, 801275c <_vfiprintf_r+0x18>
 8012754:	6a03      	ldr	r3, [r0, #32]
 8012756:	b90b      	cbnz	r3, 801275c <_vfiprintf_r+0x18>
 8012758:	f7fe f9b6 	bl	8010ac8 <__sinit>
 801275c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801275e:	07d9      	lsls	r1, r3, #31
 8012760:	d405      	bmi.n	801276e <_vfiprintf_r+0x2a>
 8012762:	89ab      	ldrh	r3, [r5, #12]
 8012764:	059a      	lsls	r2, r3, #22
 8012766:	d402      	bmi.n	801276e <_vfiprintf_r+0x2a>
 8012768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801276a:	f7fe fad6 	bl	8010d1a <__retarget_lock_acquire_recursive>
 801276e:	89ab      	ldrh	r3, [r5, #12]
 8012770:	071b      	lsls	r3, r3, #28
 8012772:	d501      	bpl.n	8012778 <_vfiprintf_r+0x34>
 8012774:	692b      	ldr	r3, [r5, #16]
 8012776:	b99b      	cbnz	r3, 80127a0 <_vfiprintf_r+0x5c>
 8012778:	4629      	mov	r1, r5
 801277a:	4630      	mov	r0, r6
 801277c:	f000 f938 	bl	80129f0 <__swsetup_r>
 8012780:	b170      	cbz	r0, 80127a0 <_vfiprintf_r+0x5c>
 8012782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012784:	07dc      	lsls	r4, r3, #31
 8012786:	d504      	bpl.n	8012792 <_vfiprintf_r+0x4e>
 8012788:	f04f 30ff 	mov.w	r0, #4294967295
 801278c:	b01d      	add	sp, #116	@ 0x74
 801278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012792:	89ab      	ldrh	r3, [r5, #12]
 8012794:	0598      	lsls	r0, r3, #22
 8012796:	d4f7      	bmi.n	8012788 <_vfiprintf_r+0x44>
 8012798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801279a:	f7fe fabf 	bl	8010d1c <__retarget_lock_release_recursive>
 801279e:	e7f3      	b.n	8012788 <_vfiprintf_r+0x44>
 80127a0:	2300      	movs	r3, #0
 80127a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80127a4:	2320      	movs	r3, #32
 80127a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80127aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80127ae:	2330      	movs	r3, #48	@ 0x30
 80127b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012960 <_vfiprintf_r+0x21c>
 80127b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127b8:	f04f 0901 	mov.w	r9, #1
 80127bc:	4623      	mov	r3, r4
 80127be:	469a      	mov	sl, r3
 80127c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127c4:	b10a      	cbz	r2, 80127ca <_vfiprintf_r+0x86>
 80127c6:	2a25      	cmp	r2, #37	@ 0x25
 80127c8:	d1f9      	bne.n	80127be <_vfiprintf_r+0x7a>
 80127ca:	ebba 0b04 	subs.w	fp, sl, r4
 80127ce:	d00b      	beq.n	80127e8 <_vfiprintf_r+0xa4>
 80127d0:	465b      	mov	r3, fp
 80127d2:	4622      	mov	r2, r4
 80127d4:	4629      	mov	r1, r5
 80127d6:	4630      	mov	r0, r6
 80127d8:	f7ff ffa2 	bl	8012720 <__sfputs_r>
 80127dc:	3001      	adds	r0, #1
 80127de:	f000 80a7 	beq.w	8012930 <_vfiprintf_r+0x1ec>
 80127e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127e4:	445a      	add	r2, fp
 80127e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80127e8:	f89a 3000 	ldrb.w	r3, [sl]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	f000 809f 	beq.w	8012930 <_vfiprintf_r+0x1ec>
 80127f2:	2300      	movs	r3, #0
 80127f4:	f04f 32ff 	mov.w	r2, #4294967295
 80127f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127fc:	f10a 0a01 	add.w	sl, sl, #1
 8012800:	9304      	str	r3, [sp, #16]
 8012802:	9307      	str	r3, [sp, #28]
 8012804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012808:	931a      	str	r3, [sp, #104]	@ 0x68
 801280a:	4654      	mov	r4, sl
 801280c:	2205      	movs	r2, #5
 801280e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012812:	4853      	ldr	r0, [pc, #332]	@ (8012960 <_vfiprintf_r+0x21c>)
 8012814:	f7ed fd04 	bl	8000220 <memchr>
 8012818:	9a04      	ldr	r2, [sp, #16]
 801281a:	b9d8      	cbnz	r0, 8012854 <_vfiprintf_r+0x110>
 801281c:	06d1      	lsls	r1, r2, #27
 801281e:	bf44      	itt	mi
 8012820:	2320      	movmi	r3, #32
 8012822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012826:	0713      	lsls	r3, r2, #28
 8012828:	bf44      	itt	mi
 801282a:	232b      	movmi	r3, #43	@ 0x2b
 801282c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012830:	f89a 3000 	ldrb.w	r3, [sl]
 8012834:	2b2a      	cmp	r3, #42	@ 0x2a
 8012836:	d015      	beq.n	8012864 <_vfiprintf_r+0x120>
 8012838:	9a07      	ldr	r2, [sp, #28]
 801283a:	4654      	mov	r4, sl
 801283c:	2000      	movs	r0, #0
 801283e:	f04f 0c0a 	mov.w	ip, #10
 8012842:	4621      	mov	r1, r4
 8012844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012848:	3b30      	subs	r3, #48	@ 0x30
 801284a:	2b09      	cmp	r3, #9
 801284c:	d94b      	bls.n	80128e6 <_vfiprintf_r+0x1a2>
 801284e:	b1b0      	cbz	r0, 801287e <_vfiprintf_r+0x13a>
 8012850:	9207      	str	r2, [sp, #28]
 8012852:	e014      	b.n	801287e <_vfiprintf_r+0x13a>
 8012854:	eba0 0308 	sub.w	r3, r0, r8
 8012858:	fa09 f303 	lsl.w	r3, r9, r3
 801285c:	4313      	orrs	r3, r2
 801285e:	9304      	str	r3, [sp, #16]
 8012860:	46a2      	mov	sl, r4
 8012862:	e7d2      	b.n	801280a <_vfiprintf_r+0xc6>
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	1d19      	adds	r1, r3, #4
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	9103      	str	r1, [sp, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	bfbb      	ittet	lt
 8012870:	425b      	neglt	r3, r3
 8012872:	f042 0202 	orrlt.w	r2, r2, #2
 8012876:	9307      	strge	r3, [sp, #28]
 8012878:	9307      	strlt	r3, [sp, #28]
 801287a:	bfb8      	it	lt
 801287c:	9204      	strlt	r2, [sp, #16]
 801287e:	7823      	ldrb	r3, [r4, #0]
 8012880:	2b2e      	cmp	r3, #46	@ 0x2e
 8012882:	d10a      	bne.n	801289a <_vfiprintf_r+0x156>
 8012884:	7863      	ldrb	r3, [r4, #1]
 8012886:	2b2a      	cmp	r3, #42	@ 0x2a
 8012888:	d132      	bne.n	80128f0 <_vfiprintf_r+0x1ac>
 801288a:	9b03      	ldr	r3, [sp, #12]
 801288c:	1d1a      	adds	r2, r3, #4
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	9203      	str	r2, [sp, #12]
 8012892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012896:	3402      	adds	r4, #2
 8012898:	9305      	str	r3, [sp, #20]
 801289a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012970 <_vfiprintf_r+0x22c>
 801289e:	7821      	ldrb	r1, [r4, #0]
 80128a0:	2203      	movs	r2, #3
 80128a2:	4650      	mov	r0, sl
 80128a4:	f7ed fcbc 	bl	8000220 <memchr>
 80128a8:	b138      	cbz	r0, 80128ba <_vfiprintf_r+0x176>
 80128aa:	9b04      	ldr	r3, [sp, #16]
 80128ac:	eba0 000a 	sub.w	r0, r0, sl
 80128b0:	2240      	movs	r2, #64	@ 0x40
 80128b2:	4082      	lsls	r2, r0
 80128b4:	4313      	orrs	r3, r2
 80128b6:	3401      	adds	r4, #1
 80128b8:	9304      	str	r3, [sp, #16]
 80128ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128be:	4829      	ldr	r0, [pc, #164]	@ (8012964 <_vfiprintf_r+0x220>)
 80128c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128c4:	2206      	movs	r2, #6
 80128c6:	f7ed fcab 	bl	8000220 <memchr>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d03f      	beq.n	801294e <_vfiprintf_r+0x20a>
 80128ce:	4b26      	ldr	r3, [pc, #152]	@ (8012968 <_vfiprintf_r+0x224>)
 80128d0:	bb1b      	cbnz	r3, 801291a <_vfiprintf_r+0x1d6>
 80128d2:	9b03      	ldr	r3, [sp, #12]
 80128d4:	3307      	adds	r3, #7
 80128d6:	f023 0307 	bic.w	r3, r3, #7
 80128da:	3308      	adds	r3, #8
 80128dc:	9303      	str	r3, [sp, #12]
 80128de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128e0:	443b      	add	r3, r7
 80128e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80128e4:	e76a      	b.n	80127bc <_vfiprintf_r+0x78>
 80128e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80128ea:	460c      	mov	r4, r1
 80128ec:	2001      	movs	r0, #1
 80128ee:	e7a8      	b.n	8012842 <_vfiprintf_r+0xfe>
 80128f0:	2300      	movs	r3, #0
 80128f2:	3401      	adds	r4, #1
 80128f4:	9305      	str	r3, [sp, #20]
 80128f6:	4619      	mov	r1, r3
 80128f8:	f04f 0c0a 	mov.w	ip, #10
 80128fc:	4620      	mov	r0, r4
 80128fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012902:	3a30      	subs	r2, #48	@ 0x30
 8012904:	2a09      	cmp	r2, #9
 8012906:	d903      	bls.n	8012910 <_vfiprintf_r+0x1cc>
 8012908:	2b00      	cmp	r3, #0
 801290a:	d0c6      	beq.n	801289a <_vfiprintf_r+0x156>
 801290c:	9105      	str	r1, [sp, #20]
 801290e:	e7c4      	b.n	801289a <_vfiprintf_r+0x156>
 8012910:	fb0c 2101 	mla	r1, ip, r1, r2
 8012914:	4604      	mov	r4, r0
 8012916:	2301      	movs	r3, #1
 8012918:	e7f0      	b.n	80128fc <_vfiprintf_r+0x1b8>
 801291a:	ab03      	add	r3, sp, #12
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	462a      	mov	r2, r5
 8012920:	4b12      	ldr	r3, [pc, #72]	@ (801296c <_vfiprintf_r+0x228>)
 8012922:	a904      	add	r1, sp, #16
 8012924:	4630      	mov	r0, r6
 8012926:	f7fd fc8d 	bl	8010244 <_printf_float>
 801292a:	4607      	mov	r7, r0
 801292c:	1c78      	adds	r0, r7, #1
 801292e:	d1d6      	bne.n	80128de <_vfiprintf_r+0x19a>
 8012930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012932:	07d9      	lsls	r1, r3, #31
 8012934:	d405      	bmi.n	8012942 <_vfiprintf_r+0x1fe>
 8012936:	89ab      	ldrh	r3, [r5, #12]
 8012938:	059a      	lsls	r2, r3, #22
 801293a:	d402      	bmi.n	8012942 <_vfiprintf_r+0x1fe>
 801293c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801293e:	f7fe f9ed 	bl	8010d1c <__retarget_lock_release_recursive>
 8012942:	89ab      	ldrh	r3, [r5, #12]
 8012944:	065b      	lsls	r3, r3, #25
 8012946:	f53f af1f 	bmi.w	8012788 <_vfiprintf_r+0x44>
 801294a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801294c:	e71e      	b.n	801278c <_vfiprintf_r+0x48>
 801294e:	ab03      	add	r3, sp, #12
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	462a      	mov	r2, r5
 8012954:	4b05      	ldr	r3, [pc, #20]	@ (801296c <_vfiprintf_r+0x228>)
 8012956:	a904      	add	r1, sp, #16
 8012958:	4630      	mov	r0, r6
 801295a:	f7fd ff0b 	bl	8010774 <_printf_i>
 801295e:	e7e4      	b.n	801292a <_vfiprintf_r+0x1e6>
 8012960:	08013fc6 	.word	0x08013fc6
 8012964:	08013fd0 	.word	0x08013fd0
 8012968:	08010245 	.word	0x08010245
 801296c:	08012721 	.word	0x08012721
 8012970:	08013fcc 	.word	0x08013fcc

08012974 <__swbuf_r>:
 8012974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012976:	460e      	mov	r6, r1
 8012978:	4614      	mov	r4, r2
 801297a:	4605      	mov	r5, r0
 801297c:	b118      	cbz	r0, 8012986 <__swbuf_r+0x12>
 801297e:	6a03      	ldr	r3, [r0, #32]
 8012980:	b90b      	cbnz	r3, 8012986 <__swbuf_r+0x12>
 8012982:	f7fe f8a1 	bl	8010ac8 <__sinit>
 8012986:	69a3      	ldr	r3, [r4, #24]
 8012988:	60a3      	str	r3, [r4, #8]
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	071a      	lsls	r2, r3, #28
 801298e:	d501      	bpl.n	8012994 <__swbuf_r+0x20>
 8012990:	6923      	ldr	r3, [r4, #16]
 8012992:	b943      	cbnz	r3, 80129a6 <__swbuf_r+0x32>
 8012994:	4621      	mov	r1, r4
 8012996:	4628      	mov	r0, r5
 8012998:	f000 f82a 	bl	80129f0 <__swsetup_r>
 801299c:	b118      	cbz	r0, 80129a6 <__swbuf_r+0x32>
 801299e:	f04f 37ff 	mov.w	r7, #4294967295
 80129a2:	4638      	mov	r0, r7
 80129a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	6922      	ldr	r2, [r4, #16]
 80129aa:	1a98      	subs	r0, r3, r2
 80129ac:	6963      	ldr	r3, [r4, #20]
 80129ae:	b2f6      	uxtb	r6, r6
 80129b0:	4283      	cmp	r3, r0
 80129b2:	4637      	mov	r7, r6
 80129b4:	dc05      	bgt.n	80129c2 <__swbuf_r+0x4e>
 80129b6:	4621      	mov	r1, r4
 80129b8:	4628      	mov	r0, r5
 80129ba:	f7ff fda9 	bl	8012510 <_fflush_r>
 80129be:	2800      	cmp	r0, #0
 80129c0:	d1ed      	bne.n	801299e <__swbuf_r+0x2a>
 80129c2:	68a3      	ldr	r3, [r4, #8]
 80129c4:	3b01      	subs	r3, #1
 80129c6:	60a3      	str	r3, [r4, #8]
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	1c5a      	adds	r2, r3, #1
 80129cc:	6022      	str	r2, [r4, #0]
 80129ce:	701e      	strb	r6, [r3, #0]
 80129d0:	6962      	ldr	r2, [r4, #20]
 80129d2:	1c43      	adds	r3, r0, #1
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d004      	beq.n	80129e2 <__swbuf_r+0x6e>
 80129d8:	89a3      	ldrh	r3, [r4, #12]
 80129da:	07db      	lsls	r3, r3, #31
 80129dc:	d5e1      	bpl.n	80129a2 <__swbuf_r+0x2e>
 80129de:	2e0a      	cmp	r6, #10
 80129e0:	d1df      	bne.n	80129a2 <__swbuf_r+0x2e>
 80129e2:	4621      	mov	r1, r4
 80129e4:	4628      	mov	r0, r5
 80129e6:	f7ff fd93 	bl	8012510 <_fflush_r>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d0d9      	beq.n	80129a2 <__swbuf_r+0x2e>
 80129ee:	e7d6      	b.n	801299e <__swbuf_r+0x2a>

080129f0 <__swsetup_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4b29      	ldr	r3, [pc, #164]	@ (8012a98 <__swsetup_r+0xa8>)
 80129f4:	4605      	mov	r5, r0
 80129f6:	6818      	ldr	r0, [r3, #0]
 80129f8:	460c      	mov	r4, r1
 80129fa:	b118      	cbz	r0, 8012a04 <__swsetup_r+0x14>
 80129fc:	6a03      	ldr	r3, [r0, #32]
 80129fe:	b90b      	cbnz	r3, 8012a04 <__swsetup_r+0x14>
 8012a00:	f7fe f862 	bl	8010ac8 <__sinit>
 8012a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a08:	0719      	lsls	r1, r3, #28
 8012a0a:	d422      	bmi.n	8012a52 <__swsetup_r+0x62>
 8012a0c:	06da      	lsls	r2, r3, #27
 8012a0e:	d407      	bmi.n	8012a20 <__swsetup_r+0x30>
 8012a10:	2209      	movs	r2, #9
 8012a12:	602a      	str	r2, [r5, #0]
 8012a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a18:	81a3      	strh	r3, [r4, #12]
 8012a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1e:	e033      	b.n	8012a88 <__swsetup_r+0x98>
 8012a20:	0758      	lsls	r0, r3, #29
 8012a22:	d512      	bpl.n	8012a4a <__swsetup_r+0x5a>
 8012a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a26:	b141      	cbz	r1, 8012a3a <__swsetup_r+0x4a>
 8012a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a2c:	4299      	cmp	r1, r3
 8012a2e:	d002      	beq.n	8012a36 <__swsetup_r+0x46>
 8012a30:	4628      	mov	r0, r5
 8012a32:	f7fe ffcd 	bl	80119d0 <_free_r>
 8012a36:	2300      	movs	r3, #0
 8012a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012a40:	81a3      	strh	r3, [r4, #12]
 8012a42:	2300      	movs	r3, #0
 8012a44:	6063      	str	r3, [r4, #4]
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	89a3      	ldrh	r3, [r4, #12]
 8012a4c:	f043 0308 	orr.w	r3, r3, #8
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	6923      	ldr	r3, [r4, #16]
 8012a54:	b94b      	cbnz	r3, 8012a6a <__swsetup_r+0x7a>
 8012a56:	89a3      	ldrh	r3, [r4, #12]
 8012a58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a60:	d003      	beq.n	8012a6a <__swsetup_r+0x7a>
 8012a62:	4621      	mov	r1, r4
 8012a64:	4628      	mov	r0, r5
 8012a66:	f000 f883 	bl	8012b70 <__smakebuf_r>
 8012a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a6e:	f013 0201 	ands.w	r2, r3, #1
 8012a72:	d00a      	beq.n	8012a8a <__swsetup_r+0x9a>
 8012a74:	2200      	movs	r2, #0
 8012a76:	60a2      	str	r2, [r4, #8]
 8012a78:	6962      	ldr	r2, [r4, #20]
 8012a7a:	4252      	negs	r2, r2
 8012a7c:	61a2      	str	r2, [r4, #24]
 8012a7e:	6922      	ldr	r2, [r4, #16]
 8012a80:	b942      	cbnz	r2, 8012a94 <__swsetup_r+0xa4>
 8012a82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a86:	d1c5      	bne.n	8012a14 <__swsetup_r+0x24>
 8012a88:	bd38      	pop	{r3, r4, r5, pc}
 8012a8a:	0799      	lsls	r1, r3, #30
 8012a8c:	bf58      	it	pl
 8012a8e:	6962      	ldrpl	r2, [r4, #20]
 8012a90:	60a2      	str	r2, [r4, #8]
 8012a92:	e7f4      	b.n	8012a7e <__swsetup_r+0x8e>
 8012a94:	2000      	movs	r0, #0
 8012a96:	e7f7      	b.n	8012a88 <__swsetup_r+0x98>
 8012a98:	20000118 	.word	0x20000118

08012a9c <_raise_r>:
 8012a9c:	291f      	cmp	r1, #31
 8012a9e:	b538      	push	{r3, r4, r5, lr}
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	d904      	bls.n	8012ab0 <_raise_r+0x14>
 8012aa6:	2316      	movs	r3, #22
 8012aa8:	6003      	str	r3, [r0, #0]
 8012aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012ab2:	b112      	cbz	r2, 8012aba <_raise_r+0x1e>
 8012ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ab8:	b94b      	cbnz	r3, 8012ace <_raise_r+0x32>
 8012aba:	4628      	mov	r0, r5
 8012abc:	f000 f830 	bl	8012b20 <_getpid_r>
 8012ac0:	4622      	mov	r2, r4
 8012ac2:	4601      	mov	r1, r0
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aca:	f000 b817 	b.w	8012afc <_kill_r>
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d00a      	beq.n	8012ae8 <_raise_r+0x4c>
 8012ad2:	1c59      	adds	r1, r3, #1
 8012ad4:	d103      	bne.n	8012ade <_raise_r+0x42>
 8012ad6:	2316      	movs	r3, #22
 8012ad8:	6003      	str	r3, [r0, #0]
 8012ada:	2001      	movs	r0, #1
 8012adc:	e7e7      	b.n	8012aae <_raise_r+0x12>
 8012ade:	2100      	movs	r1, #0
 8012ae0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	4798      	blx	r3
 8012ae8:	2000      	movs	r0, #0
 8012aea:	e7e0      	b.n	8012aae <_raise_r+0x12>

08012aec <raise>:
 8012aec:	4b02      	ldr	r3, [pc, #8]	@ (8012af8 <raise+0xc>)
 8012aee:	4601      	mov	r1, r0
 8012af0:	6818      	ldr	r0, [r3, #0]
 8012af2:	f7ff bfd3 	b.w	8012a9c <_raise_r>
 8012af6:	bf00      	nop
 8012af8:	20000118 	.word	0x20000118

08012afc <_kill_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4d07      	ldr	r5, [pc, #28]	@ (8012b1c <_kill_r+0x20>)
 8012b00:	2300      	movs	r3, #0
 8012b02:	4604      	mov	r4, r0
 8012b04:	4608      	mov	r0, r1
 8012b06:	4611      	mov	r1, r2
 8012b08:	602b      	str	r3, [r5, #0]
 8012b0a:	f7f1 f9fb 	bl	8003f04 <_kill>
 8012b0e:	1c43      	adds	r3, r0, #1
 8012b10:	d102      	bne.n	8012b18 <_kill_r+0x1c>
 8012b12:	682b      	ldr	r3, [r5, #0]
 8012b14:	b103      	cbz	r3, 8012b18 <_kill_r+0x1c>
 8012b16:	6023      	str	r3, [r4, #0]
 8012b18:	bd38      	pop	{r3, r4, r5, pc}
 8012b1a:	bf00      	nop
 8012b1c:	200023f4 	.word	0x200023f4

08012b20 <_getpid_r>:
 8012b20:	f7f1 b9e8 	b.w	8003ef4 <_getpid>

08012b24 <__swhatbuf_r>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	460c      	mov	r4, r1
 8012b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b2c:	2900      	cmp	r1, #0
 8012b2e:	b096      	sub	sp, #88	@ 0x58
 8012b30:	4615      	mov	r5, r2
 8012b32:	461e      	mov	r6, r3
 8012b34:	da0d      	bge.n	8012b52 <__swhatbuf_r+0x2e>
 8012b36:	89a3      	ldrh	r3, [r4, #12]
 8012b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012b3c:	f04f 0100 	mov.w	r1, #0
 8012b40:	bf14      	ite	ne
 8012b42:	2340      	movne	r3, #64	@ 0x40
 8012b44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012b48:	2000      	movs	r0, #0
 8012b4a:	6031      	str	r1, [r6, #0]
 8012b4c:	602b      	str	r3, [r5, #0]
 8012b4e:	b016      	add	sp, #88	@ 0x58
 8012b50:	bd70      	pop	{r4, r5, r6, pc}
 8012b52:	466a      	mov	r2, sp
 8012b54:	f000 f848 	bl	8012be8 <_fstat_r>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	dbec      	blt.n	8012b36 <__swhatbuf_r+0x12>
 8012b5c:	9901      	ldr	r1, [sp, #4]
 8012b5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012b62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012b66:	4259      	negs	r1, r3
 8012b68:	4159      	adcs	r1, r3
 8012b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b6e:	e7eb      	b.n	8012b48 <__swhatbuf_r+0x24>

08012b70 <__smakebuf_r>:
 8012b70:	898b      	ldrh	r3, [r1, #12]
 8012b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b74:	079d      	lsls	r5, r3, #30
 8012b76:	4606      	mov	r6, r0
 8012b78:	460c      	mov	r4, r1
 8012b7a:	d507      	bpl.n	8012b8c <__smakebuf_r+0x1c>
 8012b7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012b80:	6023      	str	r3, [r4, #0]
 8012b82:	6123      	str	r3, [r4, #16]
 8012b84:	2301      	movs	r3, #1
 8012b86:	6163      	str	r3, [r4, #20]
 8012b88:	b003      	add	sp, #12
 8012b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b8c:	ab01      	add	r3, sp, #4
 8012b8e:	466a      	mov	r2, sp
 8012b90:	f7ff ffc8 	bl	8012b24 <__swhatbuf_r>
 8012b94:	9f00      	ldr	r7, [sp, #0]
 8012b96:	4605      	mov	r5, r0
 8012b98:	4639      	mov	r1, r7
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f7fd fa26 	bl	800ffec <_malloc_r>
 8012ba0:	b948      	cbnz	r0, 8012bb6 <__smakebuf_r+0x46>
 8012ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ba6:	059a      	lsls	r2, r3, #22
 8012ba8:	d4ee      	bmi.n	8012b88 <__smakebuf_r+0x18>
 8012baa:	f023 0303 	bic.w	r3, r3, #3
 8012bae:	f043 0302 	orr.w	r3, r3, #2
 8012bb2:	81a3      	strh	r3, [r4, #12]
 8012bb4:	e7e2      	b.n	8012b7c <__smakebuf_r+0xc>
 8012bb6:	89a3      	ldrh	r3, [r4, #12]
 8012bb8:	6020      	str	r0, [r4, #0]
 8012bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	9b01      	ldr	r3, [sp, #4]
 8012bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012bc6:	b15b      	cbz	r3, 8012be0 <__smakebuf_r+0x70>
 8012bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f000 f81d 	bl	8012c0c <_isatty_r>
 8012bd2:	b128      	cbz	r0, 8012be0 <__smakebuf_r+0x70>
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	f023 0303 	bic.w	r3, r3, #3
 8012bda:	f043 0301 	orr.w	r3, r3, #1
 8012bde:	81a3      	strh	r3, [r4, #12]
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	431d      	orrs	r5, r3
 8012be4:	81a5      	strh	r5, [r4, #12]
 8012be6:	e7cf      	b.n	8012b88 <__smakebuf_r+0x18>

08012be8 <_fstat_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4d07      	ldr	r5, [pc, #28]	@ (8012c08 <_fstat_r+0x20>)
 8012bec:	2300      	movs	r3, #0
 8012bee:	4604      	mov	r4, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	4611      	mov	r1, r2
 8012bf4:	602b      	str	r3, [r5, #0]
 8012bf6:	f7f1 f9e5 	bl	8003fc4 <_fstat>
 8012bfa:	1c43      	adds	r3, r0, #1
 8012bfc:	d102      	bne.n	8012c04 <_fstat_r+0x1c>
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	b103      	cbz	r3, 8012c04 <_fstat_r+0x1c>
 8012c02:	6023      	str	r3, [r4, #0]
 8012c04:	bd38      	pop	{r3, r4, r5, pc}
 8012c06:	bf00      	nop
 8012c08:	200023f4 	.word	0x200023f4

08012c0c <_isatty_r>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	4d06      	ldr	r5, [pc, #24]	@ (8012c28 <_isatty_r+0x1c>)
 8012c10:	2300      	movs	r3, #0
 8012c12:	4604      	mov	r4, r0
 8012c14:	4608      	mov	r0, r1
 8012c16:	602b      	str	r3, [r5, #0]
 8012c18:	f7f1 f9e4 	bl	8003fe4 <_isatty>
 8012c1c:	1c43      	adds	r3, r0, #1
 8012c1e:	d102      	bne.n	8012c26 <_isatty_r+0x1a>
 8012c20:	682b      	ldr	r3, [r5, #0]
 8012c22:	b103      	cbz	r3, 8012c26 <_isatty_r+0x1a>
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	bd38      	pop	{r3, r4, r5, pc}
 8012c28:	200023f4 	.word	0x200023f4

08012c2c <sqrt>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	ed2d 8b02 	vpush	{d8}
 8012c32:	ec55 4b10 	vmov	r4, r5, d0
 8012c36:	f000 f8e5 	bl	8012e04 <__ieee754_sqrt>
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	4620      	mov	r0, r4
 8012c40:	4629      	mov	r1, r5
 8012c42:	eeb0 8a40 	vmov.f32	s16, s0
 8012c46:	eef0 8a60 	vmov.f32	s17, s1
 8012c4a:	f7ed ff97 	bl	8000b7c <__aeabi_dcmpun>
 8012c4e:	b990      	cbnz	r0, 8012c76 <sqrt+0x4a>
 8012c50:	2200      	movs	r2, #0
 8012c52:	2300      	movs	r3, #0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed ff68 	bl	8000b2c <__aeabi_dcmplt>
 8012c5c:	b158      	cbz	r0, 8012c76 <sqrt+0x4a>
 8012c5e:	f7fe f831 	bl	8010cc4 <__errno>
 8012c62:	2321      	movs	r3, #33	@ 0x21
 8012c64:	6003      	str	r3, [r0, #0]
 8012c66:	2200      	movs	r2, #0
 8012c68:	2300      	movs	r3, #0
 8012c6a:	4610      	mov	r0, r2
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	f7ed fe15 	bl	800089c <__aeabi_ddiv>
 8012c72:	ec41 0b18 	vmov	d8, r0, r1
 8012c76:	eeb0 0a48 	vmov.f32	s0, s16
 8012c7a:	eef0 0a68 	vmov.f32	s1, s17
 8012c7e:	ecbd 8b02 	vpop	{d8}
 8012c82:	bd38      	pop	{r3, r4, r5, pc}

08012c84 <atan2f>:
 8012c84:	f000 bb14 	b.w	80132b0 <__ieee754_atan2f>

08012c88 <cosf>:
 8012c88:	ee10 3a10 	vmov	r3, s0
 8012c8c:	b507      	push	{r0, r1, r2, lr}
 8012c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8012d08 <cosf+0x80>)
 8012c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d806      	bhi.n	8012ca6 <cosf+0x1e>
 8012c98:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012d0c <cosf+0x84>
 8012c9c:	b003      	add	sp, #12
 8012c9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ca2:	f000 b985 	b.w	8012fb0 <__kernel_cosf>
 8012ca6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012caa:	d304      	bcc.n	8012cb6 <cosf+0x2e>
 8012cac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012cb0:	b003      	add	sp, #12
 8012cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cb6:	4668      	mov	r0, sp
 8012cb8:	f000 fb9a 	bl	80133f0 <__ieee754_rem_pio2f>
 8012cbc:	f000 0003 	and.w	r0, r0, #3
 8012cc0:	2801      	cmp	r0, #1
 8012cc2:	d009      	beq.n	8012cd8 <cosf+0x50>
 8012cc4:	2802      	cmp	r0, #2
 8012cc6:	d010      	beq.n	8012cea <cosf+0x62>
 8012cc8:	b9b0      	cbnz	r0, 8012cf8 <cosf+0x70>
 8012cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cce:	ed9d 0a00 	vldr	s0, [sp]
 8012cd2:	f000 f96d 	bl	8012fb0 <__kernel_cosf>
 8012cd6:	e7eb      	b.n	8012cb0 <cosf+0x28>
 8012cd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cdc:	ed9d 0a00 	vldr	s0, [sp]
 8012ce0:	f000 f9be 	bl	8013060 <__kernel_sinf>
 8012ce4:	eeb1 0a40 	vneg.f32	s0, s0
 8012ce8:	e7e2      	b.n	8012cb0 <cosf+0x28>
 8012cea:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cee:	ed9d 0a00 	vldr	s0, [sp]
 8012cf2:	f000 f95d 	bl	8012fb0 <__kernel_cosf>
 8012cf6:	e7f5      	b.n	8012ce4 <cosf+0x5c>
 8012cf8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cfc:	ed9d 0a00 	vldr	s0, [sp]
 8012d00:	2001      	movs	r0, #1
 8012d02:	f000 f9ad 	bl	8013060 <__kernel_sinf>
 8012d06:	e7d3      	b.n	8012cb0 <cosf+0x28>
 8012d08:	3f490fd8 	.word	0x3f490fd8
 8012d0c:	00000000 	.word	0x00000000

08012d10 <fabsf>:
 8012d10:	ee10 3a10 	vmov	r3, s0
 8012d14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d18:	ee00 3a10 	vmov	s0, r3
 8012d1c:	4770      	bx	lr
	...

08012d20 <sinf>:
 8012d20:	ee10 3a10 	vmov	r3, s0
 8012d24:	b507      	push	{r0, r1, r2, lr}
 8012d26:	4a1f      	ldr	r2, [pc, #124]	@ (8012da4 <sinf+0x84>)
 8012d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d807      	bhi.n	8012d40 <sinf+0x20>
 8012d30:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012da8 <sinf+0x88>
 8012d34:	2000      	movs	r0, #0
 8012d36:	b003      	add	sp, #12
 8012d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d3c:	f000 b990 	b.w	8013060 <__kernel_sinf>
 8012d40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012d44:	d304      	bcc.n	8012d50 <sinf+0x30>
 8012d46:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d4a:	b003      	add	sp, #12
 8012d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d50:	4668      	mov	r0, sp
 8012d52:	f000 fb4d 	bl	80133f0 <__ieee754_rem_pio2f>
 8012d56:	f000 0003 	and.w	r0, r0, #3
 8012d5a:	2801      	cmp	r0, #1
 8012d5c:	d00a      	beq.n	8012d74 <sinf+0x54>
 8012d5e:	2802      	cmp	r0, #2
 8012d60:	d00f      	beq.n	8012d82 <sinf+0x62>
 8012d62:	b9c0      	cbnz	r0, 8012d96 <sinf+0x76>
 8012d64:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d68:	ed9d 0a00 	vldr	s0, [sp]
 8012d6c:	2001      	movs	r0, #1
 8012d6e:	f000 f977 	bl	8013060 <__kernel_sinf>
 8012d72:	e7ea      	b.n	8012d4a <sinf+0x2a>
 8012d74:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d78:	ed9d 0a00 	vldr	s0, [sp]
 8012d7c:	f000 f918 	bl	8012fb0 <__kernel_cosf>
 8012d80:	e7e3      	b.n	8012d4a <sinf+0x2a>
 8012d82:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d86:	ed9d 0a00 	vldr	s0, [sp]
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	f000 f968 	bl	8013060 <__kernel_sinf>
 8012d90:	eeb1 0a40 	vneg.f32	s0, s0
 8012d94:	e7d9      	b.n	8012d4a <sinf+0x2a>
 8012d96:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d9a:	ed9d 0a00 	vldr	s0, [sp]
 8012d9e:	f000 f907 	bl	8012fb0 <__kernel_cosf>
 8012da2:	e7f5      	b.n	8012d90 <sinf+0x70>
 8012da4:	3f490fd8 	.word	0x3f490fd8
 8012da8:	00000000 	.word	0x00000000

08012dac <tanf>:
 8012dac:	ee10 3a10 	vmov	r3, s0
 8012db0:	b507      	push	{r0, r1, r2, lr}
 8012db2:	4a12      	ldr	r2, [pc, #72]	@ (8012dfc <tanf+0x50>)
 8012db4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d807      	bhi.n	8012dcc <tanf+0x20>
 8012dbc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8012e00 <tanf+0x54>
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	b003      	add	sp, #12
 8012dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dc8:	f000 b992 	b.w	80130f0 <__kernel_tanf>
 8012dcc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012dd0:	d304      	bcc.n	8012ddc <tanf+0x30>
 8012dd2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012dd6:	b003      	add	sp, #12
 8012dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ddc:	4668      	mov	r0, sp
 8012dde:	f000 fb07 	bl	80133f0 <__ieee754_rem_pio2f>
 8012de2:	0040      	lsls	r0, r0, #1
 8012de4:	f000 0002 	and.w	r0, r0, #2
 8012de8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dec:	ed9d 0a00 	vldr	s0, [sp]
 8012df0:	f1c0 0001 	rsb	r0, r0, #1
 8012df4:	f000 f97c 	bl	80130f0 <__kernel_tanf>
 8012df8:	e7ed      	b.n	8012dd6 <tanf+0x2a>
 8012dfa:	bf00      	nop
 8012dfc:	3f490fda 	.word	0x3f490fda
 8012e00:	00000000 	.word	0x00000000

08012e04 <__ieee754_sqrt>:
 8012e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e08:	4a66      	ldr	r2, [pc, #408]	@ (8012fa4 <__ieee754_sqrt+0x1a0>)
 8012e0a:	ec55 4b10 	vmov	r4, r5, d0
 8012e0e:	43aa      	bics	r2, r5
 8012e10:	462b      	mov	r3, r5
 8012e12:	4621      	mov	r1, r4
 8012e14:	d110      	bne.n	8012e38 <__ieee754_sqrt+0x34>
 8012e16:	4622      	mov	r2, r4
 8012e18:	4620      	mov	r0, r4
 8012e1a:	4629      	mov	r1, r5
 8012e1c:	f7ed fc14 	bl	8000648 <__aeabi_dmul>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	4620      	mov	r0, r4
 8012e26:	4629      	mov	r1, r5
 8012e28:	f7ed fa58 	bl	80002dc <__adddf3>
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	460d      	mov	r5, r1
 8012e30:	ec45 4b10 	vmov	d0, r4, r5
 8012e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e38:	2d00      	cmp	r5, #0
 8012e3a:	dc0e      	bgt.n	8012e5a <__ieee754_sqrt+0x56>
 8012e3c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012e40:	4322      	orrs	r2, r4
 8012e42:	d0f5      	beq.n	8012e30 <__ieee754_sqrt+0x2c>
 8012e44:	b19d      	cbz	r5, 8012e6e <__ieee754_sqrt+0x6a>
 8012e46:	4622      	mov	r2, r4
 8012e48:	4620      	mov	r0, r4
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	f7ed fa44 	bl	80002d8 <__aeabi_dsub>
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	f7ed fd22 	bl	800089c <__aeabi_ddiv>
 8012e58:	e7e8      	b.n	8012e2c <__ieee754_sqrt+0x28>
 8012e5a:	152a      	asrs	r2, r5, #20
 8012e5c:	d115      	bne.n	8012e8a <__ieee754_sqrt+0x86>
 8012e5e:	2000      	movs	r0, #0
 8012e60:	e009      	b.n	8012e76 <__ieee754_sqrt+0x72>
 8012e62:	0acb      	lsrs	r3, r1, #11
 8012e64:	3a15      	subs	r2, #21
 8012e66:	0549      	lsls	r1, r1, #21
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d0fa      	beq.n	8012e62 <__ieee754_sqrt+0x5e>
 8012e6c:	e7f7      	b.n	8012e5e <__ieee754_sqrt+0x5a>
 8012e6e:	462a      	mov	r2, r5
 8012e70:	e7fa      	b.n	8012e68 <__ieee754_sqrt+0x64>
 8012e72:	005b      	lsls	r3, r3, #1
 8012e74:	3001      	adds	r0, #1
 8012e76:	02dc      	lsls	r4, r3, #11
 8012e78:	d5fb      	bpl.n	8012e72 <__ieee754_sqrt+0x6e>
 8012e7a:	1e44      	subs	r4, r0, #1
 8012e7c:	1b12      	subs	r2, r2, r4
 8012e7e:	f1c0 0420 	rsb	r4, r0, #32
 8012e82:	fa21 f404 	lsr.w	r4, r1, r4
 8012e86:	4323      	orrs	r3, r4
 8012e88:	4081      	lsls	r1, r0
 8012e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e8e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e96:	07d2      	lsls	r2, r2, #31
 8012e98:	bf5c      	itt	pl
 8012e9a:	005b      	lslpl	r3, r3, #1
 8012e9c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012ea0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ea4:	bf58      	it	pl
 8012ea6:	0049      	lslpl	r1, r1, #1
 8012ea8:	2600      	movs	r6, #0
 8012eaa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012eae:	107f      	asrs	r7, r7, #1
 8012eb0:	0049      	lsls	r1, r1, #1
 8012eb2:	2016      	movs	r0, #22
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012eba:	1915      	adds	r5, r2, r4
 8012ebc:	429d      	cmp	r5, r3
 8012ebe:	bfde      	ittt	le
 8012ec0:	192a      	addle	r2, r5, r4
 8012ec2:	1b5b      	suble	r3, r3, r5
 8012ec4:	1936      	addle	r6, r6, r4
 8012ec6:	0fcd      	lsrs	r5, r1, #31
 8012ec8:	3801      	subs	r0, #1
 8012eca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012ece:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ed2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012ed6:	d1f0      	bne.n	8012eba <__ieee754_sqrt+0xb6>
 8012ed8:	4605      	mov	r5, r0
 8012eda:	2420      	movs	r4, #32
 8012edc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	eb0c 0e00 	add.w	lr, ip, r0
 8012ee6:	dc02      	bgt.n	8012eee <__ieee754_sqrt+0xea>
 8012ee8:	d113      	bne.n	8012f12 <__ieee754_sqrt+0x10e>
 8012eea:	458e      	cmp	lr, r1
 8012eec:	d811      	bhi.n	8012f12 <__ieee754_sqrt+0x10e>
 8012eee:	f1be 0f00 	cmp.w	lr, #0
 8012ef2:	eb0e 000c 	add.w	r0, lr, ip
 8012ef6:	da3f      	bge.n	8012f78 <__ieee754_sqrt+0x174>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	db3d      	blt.n	8012f78 <__ieee754_sqrt+0x174>
 8012efc:	f102 0801 	add.w	r8, r2, #1
 8012f00:	1a9b      	subs	r3, r3, r2
 8012f02:	458e      	cmp	lr, r1
 8012f04:	bf88      	it	hi
 8012f06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012f0a:	eba1 010e 	sub.w	r1, r1, lr
 8012f0e:	4465      	add	r5, ip
 8012f10:	4642      	mov	r2, r8
 8012f12:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012f16:	3c01      	subs	r4, #1
 8012f18:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012f1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f20:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012f24:	d1dc      	bne.n	8012ee0 <__ieee754_sqrt+0xdc>
 8012f26:	4319      	orrs	r1, r3
 8012f28:	d01b      	beq.n	8012f62 <__ieee754_sqrt+0x15e>
 8012f2a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012fa8 <__ieee754_sqrt+0x1a4>
 8012f2e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012fac <__ieee754_sqrt+0x1a8>
 8012f32:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f36:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f3a:	f7ed f9cd 	bl	80002d8 <__aeabi_dsub>
 8012f3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4640      	mov	r0, r8
 8012f48:	4649      	mov	r1, r9
 8012f4a:	f7ed fdf9 	bl	8000b40 <__aeabi_dcmple>
 8012f4e:	b140      	cbz	r0, 8012f62 <__ieee754_sqrt+0x15e>
 8012f50:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012f54:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f58:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f5c:	d10e      	bne.n	8012f7c <__ieee754_sqrt+0x178>
 8012f5e:	3601      	adds	r6, #1
 8012f60:	4625      	mov	r5, r4
 8012f62:	1073      	asrs	r3, r6, #1
 8012f64:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012f68:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012f6c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8012f70:	086b      	lsrs	r3, r5, #1
 8012f72:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8012f76:	e759      	b.n	8012e2c <__ieee754_sqrt+0x28>
 8012f78:	4690      	mov	r8, r2
 8012f7a:	e7c1      	b.n	8012f00 <__ieee754_sqrt+0xfc>
 8012f7c:	f7ed f9ae 	bl	80002dc <__adddf3>
 8012f80:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f84:	4602      	mov	r2, r0
 8012f86:	460b      	mov	r3, r1
 8012f88:	4640      	mov	r0, r8
 8012f8a:	4649      	mov	r1, r9
 8012f8c:	f7ed fdce 	bl	8000b2c <__aeabi_dcmplt>
 8012f90:	b120      	cbz	r0, 8012f9c <__ieee754_sqrt+0x198>
 8012f92:	1cab      	adds	r3, r5, #2
 8012f94:	bf08      	it	eq
 8012f96:	3601      	addeq	r6, #1
 8012f98:	3502      	adds	r5, #2
 8012f9a:	e7e2      	b.n	8012f62 <__ieee754_sqrt+0x15e>
 8012f9c:	1c6b      	adds	r3, r5, #1
 8012f9e:	f023 0501 	bic.w	r5, r3, #1
 8012fa2:	e7de      	b.n	8012f62 <__ieee754_sqrt+0x15e>
 8012fa4:	7ff00000 	.word	0x7ff00000
 8012fa8:	08014230 	.word	0x08014230
 8012fac:	08014228 	.word	0x08014228

08012fb0 <__kernel_cosf>:
 8012fb0:	ee10 3a10 	vmov	r3, s0
 8012fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012fb8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012fbc:	eef0 6a40 	vmov.f32	s13, s0
 8012fc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012fc4:	d204      	bcs.n	8012fd0 <__kernel_cosf+0x20>
 8012fc6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012fca:	ee17 2a90 	vmov	r2, s15
 8012fce:	b342      	cbz	r2, 8013022 <__kernel_cosf+0x72>
 8012fd0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012fd4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013040 <__kernel_cosf+0x90>
 8012fd8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013044 <__kernel_cosf+0x94>
 8012fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8013048 <__kernel_cosf+0x98>)
 8012fde:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801304c <__kernel_cosf+0x9c>
 8012fe8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012fec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013050 <__kernel_cosf+0xa0>
 8012ff0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012ff4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013054 <__kernel_cosf+0xa4>
 8012ff8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ffc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013058 <__kernel_cosf+0xa8>
 8013000:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013004:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013008:	ee26 6a07 	vmul.f32	s12, s12, s14
 801300c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013010:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013018:	d804      	bhi.n	8013024 <__kernel_cosf+0x74>
 801301a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801301e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013022:	4770      	bx	lr
 8013024:	4a0d      	ldr	r2, [pc, #52]	@ (801305c <__kernel_cosf+0xac>)
 8013026:	4293      	cmp	r3, r2
 8013028:	bf9a      	itte	ls
 801302a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801302e:	ee07 3a10 	vmovls	s14, r3
 8013032:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013036:	ee30 0a47 	vsub.f32	s0, s0, s14
 801303a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801303e:	e7ec      	b.n	801301a <__kernel_cosf+0x6a>
 8013040:	ad47d74e 	.word	0xad47d74e
 8013044:	310f74f6 	.word	0x310f74f6
 8013048:	3e999999 	.word	0x3e999999
 801304c:	b493f27c 	.word	0xb493f27c
 8013050:	37d00d01 	.word	0x37d00d01
 8013054:	bab60b61 	.word	0xbab60b61
 8013058:	3d2aaaab 	.word	0x3d2aaaab
 801305c:	3f480000 	.word	0x3f480000

08013060 <__kernel_sinf>:
 8013060:	ee10 3a10 	vmov	r3, s0
 8013064:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013068:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801306c:	d204      	bcs.n	8013078 <__kernel_sinf+0x18>
 801306e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013072:	ee17 3a90 	vmov	r3, s15
 8013076:	b35b      	cbz	r3, 80130d0 <__kernel_sinf+0x70>
 8013078:	ee20 7a00 	vmul.f32	s14, s0, s0
 801307c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80130d4 <__kernel_sinf+0x74>
 8013080:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80130d8 <__kernel_sinf+0x78>
 8013084:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013088:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80130dc <__kernel_sinf+0x7c>
 801308c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013090:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80130e0 <__kernel_sinf+0x80>
 8013094:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013098:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80130e4 <__kernel_sinf+0x84>
 801309c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80130a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80130a4:	b930      	cbnz	r0, 80130b4 <__kernel_sinf+0x54>
 80130a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80130e8 <__kernel_sinf+0x88>
 80130aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80130ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80130b2:	4770      	bx	lr
 80130b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80130b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80130bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80130c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80130c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80130ec <__kernel_sinf+0x8c>
 80130c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80130cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop
 80130d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80130d8:	b2d72f34 	.word	0xb2d72f34
 80130dc:	3638ef1b 	.word	0x3638ef1b
 80130e0:	b9500d01 	.word	0xb9500d01
 80130e4:	3c088889 	.word	0x3c088889
 80130e8:	be2aaaab 	.word	0xbe2aaaab
 80130ec:	3e2aaaab 	.word	0x3e2aaaab

080130f0 <__kernel_tanf>:
 80130f0:	b508      	push	{r3, lr}
 80130f2:	ee10 3a10 	vmov	r3, s0
 80130f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80130fa:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80130fe:	eef0 7a40 	vmov.f32	s15, s0
 8013102:	d217      	bcs.n	8013134 <__kernel_tanf+0x44>
 8013104:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013108:	ee17 1a10 	vmov	r1, s14
 801310c:	bb41      	cbnz	r1, 8013160 <__kernel_tanf+0x70>
 801310e:	1c43      	adds	r3, r0, #1
 8013110:	4313      	orrs	r3, r2
 8013112:	d108      	bne.n	8013126 <__kernel_tanf+0x36>
 8013114:	f7ff fdfc 	bl	8012d10 <fabsf>
 8013118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801311c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013120:	eeb0 0a67 	vmov.f32	s0, s15
 8013124:	bd08      	pop	{r3, pc}
 8013126:	2801      	cmp	r0, #1
 8013128:	d0fa      	beq.n	8013120 <__kernel_tanf+0x30>
 801312a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801312e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013132:	e7f5      	b.n	8013120 <__kernel_tanf+0x30>
 8013134:	494c      	ldr	r1, [pc, #304]	@ (8013268 <__kernel_tanf+0x178>)
 8013136:	428a      	cmp	r2, r1
 8013138:	d312      	bcc.n	8013160 <__kernel_tanf+0x70>
 801313a:	2b00      	cmp	r3, #0
 801313c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801326c <__kernel_tanf+0x17c>
 8013140:	bfb8      	it	lt
 8013142:	eef1 7a40 	vneglt.f32	s15, s0
 8013146:	ee37 7a67 	vsub.f32	s14, s14, s15
 801314a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8013270 <__kernel_tanf+0x180>
 801314e:	bfb8      	it	lt
 8013150:	eef1 0a60 	vneglt.f32	s1, s1
 8013154:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013158:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8013274 <__kernel_tanf+0x184>
 801315c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013160:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013164:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013278 <__kernel_tanf+0x188>
 8013168:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801327c <__kernel_tanf+0x18c>
 801316c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8013280 <__kernel_tanf+0x190>
 8013170:	493d      	ldr	r1, [pc, #244]	@ (8013268 <__kernel_tanf+0x178>)
 8013172:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013176:	428a      	cmp	r2, r1
 8013178:	eea7 6a25 	vfma.f32	s12, s14, s11
 801317c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8013284 <__kernel_tanf+0x194>
 8013180:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013184:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8013288 <__kernel_tanf+0x198>
 8013188:	eea5 6a87 	vfma.f32	s12, s11, s14
 801318c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801328c <__kernel_tanf+0x19c>
 8013190:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013194:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8013290 <__kernel_tanf+0x1a0>
 8013198:	eea5 6a87 	vfma.f32	s12, s11, s14
 801319c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8013294 <__kernel_tanf+0x1a4>
 80131a0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80131a4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8013298 <__kernel_tanf+0x1a8>
 80131a8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80131ac:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801329c <__kernel_tanf+0x1ac>
 80131b0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80131b4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80132a0 <__kernel_tanf+0x1b0>
 80131b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80131bc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80132a4 <__kernel_tanf+0x1b4>
 80131c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80131c4:	eeb0 7a46 	vmov.f32	s14, s12
 80131c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80131cc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80131d0:	eeb0 6a60 	vmov.f32	s12, s1
 80131d4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80131d8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80132a8 <__kernel_tanf+0x1b8>
 80131dc:	eee6 0a26 	vfma.f32	s1, s12, s13
 80131e0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80131e4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80131e8:	d31d      	bcc.n	8013226 <__kernel_tanf+0x136>
 80131ea:	ee07 0a10 	vmov	s14, r0
 80131ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80131f2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80131f6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80131fa:	179b      	asrs	r3, r3, #30
 80131fc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8013200:	f003 0302 	and.w	r3, r3, #2
 8013204:	f1c3 0301 	rsb	r3, r3, #1
 8013208:	ee06 3a90 	vmov	s13, r3
 801320c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8013210:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013214:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013218:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801321c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8013220:	ee66 7a87 	vmul.f32	s15, s13, s14
 8013224:	e77c      	b.n	8013120 <__kernel_tanf+0x30>
 8013226:	2801      	cmp	r0, #1
 8013228:	d01b      	beq.n	8013262 <__kernel_tanf+0x172>
 801322a:	4b20      	ldr	r3, [pc, #128]	@ (80132ac <__kernel_tanf+0x1bc>)
 801322c:	ee16 2a10 	vmov	r2, s12
 8013230:	401a      	ands	r2, r3
 8013232:	ee05 2a90 	vmov	s11, r2
 8013236:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801323a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801323e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013242:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8013246:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801324a:	ee16 2a90 	vmov	r2, s13
 801324e:	4013      	ands	r3, r2
 8013250:	ee07 3a90 	vmov	s15, r3
 8013254:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013258:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801325c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013260:	e75e      	b.n	8013120 <__kernel_tanf+0x30>
 8013262:	eef0 7a46 	vmov.f32	s15, s12
 8013266:	e75b      	b.n	8013120 <__kernel_tanf+0x30>
 8013268:	3f2ca140 	.word	0x3f2ca140
 801326c:	3f490fda 	.word	0x3f490fda
 8013270:	33222168 	.word	0x33222168
 8013274:	00000000 	.word	0x00000000
 8013278:	b79bae5f 	.word	0xb79bae5f
 801327c:	38a3f445 	.word	0x38a3f445
 8013280:	37d95384 	.word	0x37d95384
 8013284:	3a1a26c8 	.word	0x3a1a26c8
 8013288:	3b6b6916 	.word	0x3b6b6916
 801328c:	3cb327a4 	.word	0x3cb327a4
 8013290:	3e088889 	.word	0x3e088889
 8013294:	3895c07a 	.word	0x3895c07a
 8013298:	398137b9 	.word	0x398137b9
 801329c:	3abede48 	.word	0x3abede48
 80132a0:	3c11371f 	.word	0x3c11371f
 80132a4:	3d5d0dd1 	.word	0x3d5d0dd1
 80132a8:	3eaaaaab 	.word	0x3eaaaaab
 80132ac:	fffff000 	.word	0xfffff000

080132b0 <__ieee754_atan2f>:
 80132b0:	ee10 2a90 	vmov	r2, s1
 80132b4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80132b8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80132bc:	b510      	push	{r4, lr}
 80132be:	eef0 7a40 	vmov.f32	s15, s0
 80132c2:	d806      	bhi.n	80132d2 <__ieee754_atan2f+0x22>
 80132c4:	ee10 0a10 	vmov	r0, s0
 80132c8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80132cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80132d0:	d904      	bls.n	80132dc <__ieee754_atan2f+0x2c>
 80132d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80132d6:	eeb0 0a67 	vmov.f32	s0, s15
 80132da:	bd10      	pop	{r4, pc}
 80132dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80132e0:	d103      	bne.n	80132ea <__ieee754_atan2f+0x3a>
 80132e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132e6:	f000 b9b3 	b.w	8013650 <atanf>
 80132ea:	1794      	asrs	r4, r2, #30
 80132ec:	f004 0402 	and.w	r4, r4, #2
 80132f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80132f4:	b943      	cbnz	r3, 8013308 <__ieee754_atan2f+0x58>
 80132f6:	2c02      	cmp	r4, #2
 80132f8:	d05e      	beq.n	80133b8 <__ieee754_atan2f+0x108>
 80132fa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80133cc <__ieee754_atan2f+0x11c>
 80132fe:	2c03      	cmp	r4, #3
 8013300:	bf08      	it	eq
 8013302:	eef0 7a47 	vmoveq.f32	s15, s14
 8013306:	e7e6      	b.n	80132d6 <__ieee754_atan2f+0x26>
 8013308:	b941      	cbnz	r1, 801331c <__ieee754_atan2f+0x6c>
 801330a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80133d0 <__ieee754_atan2f+0x120>
 801330e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80133d4 <__ieee754_atan2f+0x124>
 8013312:	2800      	cmp	r0, #0
 8013314:	bfa8      	it	ge
 8013316:	eef0 7a47 	vmovge.f32	s15, s14
 801331a:	e7dc      	b.n	80132d6 <__ieee754_atan2f+0x26>
 801331c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013320:	d110      	bne.n	8013344 <__ieee754_atan2f+0x94>
 8013322:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013326:	f104 34ff 	add.w	r4, r4, #4294967295
 801332a:	d107      	bne.n	801333c <__ieee754_atan2f+0x8c>
 801332c:	2c02      	cmp	r4, #2
 801332e:	d846      	bhi.n	80133be <__ieee754_atan2f+0x10e>
 8013330:	4b29      	ldr	r3, [pc, #164]	@ (80133d8 <__ieee754_atan2f+0x128>)
 8013332:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013336:	edd3 7a00 	vldr	s15, [r3]
 801333a:	e7cc      	b.n	80132d6 <__ieee754_atan2f+0x26>
 801333c:	2c02      	cmp	r4, #2
 801333e:	d841      	bhi.n	80133c4 <__ieee754_atan2f+0x114>
 8013340:	4b26      	ldr	r3, [pc, #152]	@ (80133dc <__ieee754_atan2f+0x12c>)
 8013342:	e7f6      	b.n	8013332 <__ieee754_atan2f+0x82>
 8013344:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013348:	d0df      	beq.n	801330a <__ieee754_atan2f+0x5a>
 801334a:	1a5b      	subs	r3, r3, r1
 801334c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8013350:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013354:	da1a      	bge.n	801338c <__ieee754_atan2f+0xdc>
 8013356:	2a00      	cmp	r2, #0
 8013358:	da01      	bge.n	801335e <__ieee754_atan2f+0xae>
 801335a:	313c      	adds	r1, #60	@ 0x3c
 801335c:	db19      	blt.n	8013392 <__ieee754_atan2f+0xe2>
 801335e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013362:	f7ff fcd5 	bl	8012d10 <fabsf>
 8013366:	f000 f973 	bl	8013650 <atanf>
 801336a:	eef0 7a40 	vmov.f32	s15, s0
 801336e:	2c01      	cmp	r4, #1
 8013370:	d012      	beq.n	8013398 <__ieee754_atan2f+0xe8>
 8013372:	2c02      	cmp	r4, #2
 8013374:	d017      	beq.n	80133a6 <__ieee754_atan2f+0xf6>
 8013376:	2c00      	cmp	r4, #0
 8013378:	d0ad      	beq.n	80132d6 <__ieee754_atan2f+0x26>
 801337a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80133e0 <__ieee754_atan2f+0x130>
 801337e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013382:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80133e4 <__ieee754_atan2f+0x134>
 8013386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801338a:	e7a4      	b.n	80132d6 <__ieee754_atan2f+0x26>
 801338c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80133d4 <__ieee754_atan2f+0x124>
 8013390:	e7ed      	b.n	801336e <__ieee754_atan2f+0xbe>
 8013392:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80133e8 <__ieee754_atan2f+0x138>
 8013396:	e7ea      	b.n	801336e <__ieee754_atan2f+0xbe>
 8013398:	ee17 3a90 	vmov	r3, s15
 801339c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80133a0:	ee07 3a90 	vmov	s15, r3
 80133a4:	e797      	b.n	80132d6 <__ieee754_atan2f+0x26>
 80133a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80133e0 <__ieee754_atan2f+0x130>
 80133aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80133e4 <__ieee754_atan2f+0x134>
 80133b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133b6:	e78e      	b.n	80132d6 <__ieee754_atan2f+0x26>
 80133b8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80133e4 <__ieee754_atan2f+0x134>
 80133bc:	e78b      	b.n	80132d6 <__ieee754_atan2f+0x26>
 80133be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80133ec <__ieee754_atan2f+0x13c>
 80133c2:	e788      	b.n	80132d6 <__ieee754_atan2f+0x26>
 80133c4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80133e8 <__ieee754_atan2f+0x138>
 80133c8:	e785      	b.n	80132d6 <__ieee754_atan2f+0x26>
 80133ca:	bf00      	nop
 80133cc:	c0490fdb 	.word	0xc0490fdb
 80133d0:	bfc90fdb 	.word	0xbfc90fdb
 80133d4:	3fc90fdb 	.word	0x3fc90fdb
 80133d8:	08014244 	.word	0x08014244
 80133dc:	08014238 	.word	0x08014238
 80133e0:	33bbbd2e 	.word	0x33bbbd2e
 80133e4:	40490fdb 	.word	0x40490fdb
 80133e8:	00000000 	.word	0x00000000
 80133ec:	3f490fdb 	.word	0x3f490fdb

080133f0 <__ieee754_rem_pio2f>:
 80133f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133f2:	ee10 6a10 	vmov	r6, s0
 80133f6:	4b88      	ldr	r3, [pc, #544]	@ (8013618 <__ieee754_rem_pio2f+0x228>)
 80133f8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80133fc:	429d      	cmp	r5, r3
 80133fe:	b087      	sub	sp, #28
 8013400:	4604      	mov	r4, r0
 8013402:	d805      	bhi.n	8013410 <__ieee754_rem_pio2f+0x20>
 8013404:	2300      	movs	r3, #0
 8013406:	ed80 0a00 	vstr	s0, [r0]
 801340a:	6043      	str	r3, [r0, #4]
 801340c:	2000      	movs	r0, #0
 801340e:	e022      	b.n	8013456 <__ieee754_rem_pio2f+0x66>
 8013410:	4b82      	ldr	r3, [pc, #520]	@ (801361c <__ieee754_rem_pio2f+0x22c>)
 8013412:	429d      	cmp	r5, r3
 8013414:	d83a      	bhi.n	801348c <__ieee754_rem_pio2f+0x9c>
 8013416:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801341a:	2e00      	cmp	r6, #0
 801341c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013620 <__ieee754_rem_pio2f+0x230>
 8013420:	4a80      	ldr	r2, [pc, #512]	@ (8013624 <__ieee754_rem_pio2f+0x234>)
 8013422:	f023 030f 	bic.w	r3, r3, #15
 8013426:	dd18      	ble.n	801345a <__ieee754_rem_pio2f+0x6a>
 8013428:	4293      	cmp	r3, r2
 801342a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801342e:	bf09      	itett	eq
 8013430:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013628 <__ieee754_rem_pio2f+0x238>
 8013434:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801362c <__ieee754_rem_pio2f+0x23c>
 8013438:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013630 <__ieee754_rem_pio2f+0x240>
 801343c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013440:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013448:	ed80 7a00 	vstr	s14, [r0]
 801344c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013450:	edc0 7a01 	vstr	s15, [r0, #4]
 8013454:	2001      	movs	r0, #1
 8013456:	b007      	add	sp, #28
 8013458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345a:	4293      	cmp	r3, r2
 801345c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013460:	bf09      	itett	eq
 8013462:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013628 <__ieee754_rem_pio2f+0x238>
 8013466:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801362c <__ieee754_rem_pio2f+0x23c>
 801346a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013630 <__ieee754_rem_pio2f+0x240>
 801346e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013472:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801347a:	ed80 7a00 	vstr	s14, [r0]
 801347e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013482:	edc0 7a01 	vstr	s15, [r0, #4]
 8013486:	f04f 30ff 	mov.w	r0, #4294967295
 801348a:	e7e4      	b.n	8013456 <__ieee754_rem_pio2f+0x66>
 801348c:	4b69      	ldr	r3, [pc, #420]	@ (8013634 <__ieee754_rem_pio2f+0x244>)
 801348e:	429d      	cmp	r5, r3
 8013490:	d873      	bhi.n	801357a <__ieee754_rem_pio2f+0x18a>
 8013492:	f7ff fc3d 	bl	8012d10 <fabsf>
 8013496:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013638 <__ieee754_rem_pio2f+0x248>
 801349a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801349e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134aa:	ee17 0a90 	vmov	r0, s15
 80134ae:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013620 <__ieee754_rem_pio2f+0x230>
 80134b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80134b6:	281f      	cmp	r0, #31
 80134b8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801362c <__ieee754_rem_pio2f+0x23c>
 80134bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134c0:	eeb1 6a47 	vneg.f32	s12, s14
 80134c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80134c8:	ee16 1a90 	vmov	r1, s13
 80134cc:	dc09      	bgt.n	80134e2 <__ieee754_rem_pio2f+0xf2>
 80134ce:	4a5b      	ldr	r2, [pc, #364]	@ (801363c <__ieee754_rem_pio2f+0x24c>)
 80134d0:	1e47      	subs	r7, r0, #1
 80134d2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80134d6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80134da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80134de:	4293      	cmp	r3, r2
 80134e0:	d107      	bne.n	80134f2 <__ieee754_rem_pio2f+0x102>
 80134e2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80134e6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80134ea:	2a08      	cmp	r2, #8
 80134ec:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80134f0:	dc14      	bgt.n	801351c <__ieee754_rem_pio2f+0x12c>
 80134f2:	6021      	str	r1, [r4, #0]
 80134f4:	ed94 7a00 	vldr	s14, [r4]
 80134f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80134fc:	2e00      	cmp	r6, #0
 80134fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013502:	ed84 0a01 	vstr	s0, [r4, #4]
 8013506:	daa6      	bge.n	8013456 <__ieee754_rem_pio2f+0x66>
 8013508:	eeb1 7a47 	vneg.f32	s14, s14
 801350c:	eeb1 0a40 	vneg.f32	s0, s0
 8013510:	ed84 7a00 	vstr	s14, [r4]
 8013514:	ed84 0a01 	vstr	s0, [r4, #4]
 8013518:	4240      	negs	r0, r0
 801351a:	e79c      	b.n	8013456 <__ieee754_rem_pio2f+0x66>
 801351c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013628 <__ieee754_rem_pio2f+0x238>
 8013520:	eef0 6a40 	vmov.f32	s13, s0
 8013524:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013528:	ee70 7a66 	vsub.f32	s15, s0, s13
 801352c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013530:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013630 <__ieee754_rem_pio2f+0x240>
 8013534:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013538:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801353c:	ee15 2a90 	vmov	r2, s11
 8013540:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013544:	1a5b      	subs	r3, r3, r1
 8013546:	2b19      	cmp	r3, #25
 8013548:	dc04      	bgt.n	8013554 <__ieee754_rem_pio2f+0x164>
 801354a:	edc4 5a00 	vstr	s11, [r4]
 801354e:	eeb0 0a66 	vmov.f32	s0, s13
 8013552:	e7cf      	b.n	80134f4 <__ieee754_rem_pio2f+0x104>
 8013554:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013640 <__ieee754_rem_pio2f+0x250>
 8013558:	eeb0 0a66 	vmov.f32	s0, s13
 801355c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013560:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013564:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013644 <__ieee754_rem_pio2f+0x254>
 8013568:	eee6 7a25 	vfma.f32	s15, s12, s11
 801356c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013570:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013574:	ed84 7a00 	vstr	s14, [r4]
 8013578:	e7bc      	b.n	80134f4 <__ieee754_rem_pio2f+0x104>
 801357a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801357e:	d306      	bcc.n	801358e <__ieee754_rem_pio2f+0x19e>
 8013580:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013584:	edc0 7a01 	vstr	s15, [r0, #4]
 8013588:	edc0 7a00 	vstr	s15, [r0]
 801358c:	e73e      	b.n	801340c <__ieee754_rem_pio2f+0x1c>
 801358e:	15ea      	asrs	r2, r5, #23
 8013590:	3a86      	subs	r2, #134	@ 0x86
 8013592:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013596:	ee07 3a90 	vmov	s15, r3
 801359a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801359e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013648 <__ieee754_rem_pio2f+0x258>
 80135a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135aa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80135ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135be:	ed8d 7a04 	vstr	s14, [sp, #16]
 80135c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ce:	edcd 7a05 	vstr	s15, [sp, #20]
 80135d2:	d11e      	bne.n	8013612 <__ieee754_rem_pio2f+0x222>
 80135d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80135d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135dc:	bf0c      	ite	eq
 80135de:	2301      	moveq	r3, #1
 80135e0:	2302      	movne	r3, #2
 80135e2:	491a      	ldr	r1, [pc, #104]	@ (801364c <__ieee754_rem_pio2f+0x25c>)
 80135e4:	9101      	str	r1, [sp, #4]
 80135e6:	2102      	movs	r1, #2
 80135e8:	9100      	str	r1, [sp, #0]
 80135ea:	a803      	add	r0, sp, #12
 80135ec:	4621      	mov	r1, r4
 80135ee:	f000 f903 	bl	80137f8 <__kernel_rem_pio2f>
 80135f2:	2e00      	cmp	r6, #0
 80135f4:	f6bf af2f 	bge.w	8013456 <__ieee754_rem_pio2f+0x66>
 80135f8:	edd4 7a00 	vldr	s15, [r4]
 80135fc:	eef1 7a67 	vneg.f32	s15, s15
 8013600:	edc4 7a00 	vstr	s15, [r4]
 8013604:	edd4 7a01 	vldr	s15, [r4, #4]
 8013608:	eef1 7a67 	vneg.f32	s15, s15
 801360c:	edc4 7a01 	vstr	s15, [r4, #4]
 8013610:	e782      	b.n	8013518 <__ieee754_rem_pio2f+0x128>
 8013612:	2303      	movs	r3, #3
 8013614:	e7e5      	b.n	80135e2 <__ieee754_rem_pio2f+0x1f2>
 8013616:	bf00      	nop
 8013618:	3f490fd8 	.word	0x3f490fd8
 801361c:	4016cbe3 	.word	0x4016cbe3
 8013620:	3fc90f80 	.word	0x3fc90f80
 8013624:	3fc90fd0 	.word	0x3fc90fd0
 8013628:	37354400 	.word	0x37354400
 801362c:	37354443 	.word	0x37354443
 8013630:	2e85a308 	.word	0x2e85a308
 8013634:	43490f80 	.word	0x43490f80
 8013638:	3f22f984 	.word	0x3f22f984
 801363c:	08014250 	.word	0x08014250
 8013640:	2e85a300 	.word	0x2e85a300
 8013644:	248d3132 	.word	0x248d3132
 8013648:	43800000 	.word	0x43800000
 801364c:	080142d0 	.word	0x080142d0

08013650 <atanf>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	ee10 5a10 	vmov	r5, s0
 8013656:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801365a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801365e:	eef0 7a40 	vmov.f32	s15, s0
 8013662:	d310      	bcc.n	8013686 <atanf+0x36>
 8013664:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8013668:	d904      	bls.n	8013674 <atanf+0x24>
 801366a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801366e:	eeb0 0a67 	vmov.f32	s0, s15
 8013672:	bd38      	pop	{r3, r4, r5, pc}
 8013674:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80137ac <atanf+0x15c>
 8013678:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80137b0 <atanf+0x160>
 801367c:	2d00      	cmp	r5, #0
 801367e:	bfc8      	it	gt
 8013680:	eef0 7a47 	vmovgt.f32	s15, s14
 8013684:	e7f3      	b.n	801366e <atanf+0x1e>
 8013686:	4b4b      	ldr	r3, [pc, #300]	@ (80137b4 <atanf+0x164>)
 8013688:	429c      	cmp	r4, r3
 801368a:	d810      	bhi.n	80136ae <atanf+0x5e>
 801368c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8013690:	d20a      	bcs.n	80136a8 <atanf+0x58>
 8013692:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80137b8 <atanf+0x168>
 8013696:	ee30 7a07 	vadd.f32	s14, s0, s14
 801369a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801369e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80136a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a6:	dce2      	bgt.n	801366e <atanf+0x1e>
 80136a8:	f04f 33ff 	mov.w	r3, #4294967295
 80136ac:	e013      	b.n	80136d6 <atanf+0x86>
 80136ae:	f7ff fb2f 	bl	8012d10 <fabsf>
 80136b2:	4b42      	ldr	r3, [pc, #264]	@ (80137bc <atanf+0x16c>)
 80136b4:	429c      	cmp	r4, r3
 80136b6:	d84f      	bhi.n	8013758 <atanf+0x108>
 80136b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80136bc:	429c      	cmp	r4, r3
 80136be:	d841      	bhi.n	8013744 <atanf+0xf4>
 80136c0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80136c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80136c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80136cc:	2300      	movs	r3, #0
 80136ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80136d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80136d6:	1c5a      	adds	r2, r3, #1
 80136d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80136dc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80137c0 <atanf+0x170>
 80136e0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80137c4 <atanf+0x174>
 80136e4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80137c8 <atanf+0x178>
 80136e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80136ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80136f0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80137cc <atanf+0x17c>
 80136f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80136f8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80137d0 <atanf+0x180>
 80136fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013700:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80137d4 <atanf+0x184>
 8013704:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013708:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80137d8 <atanf+0x188>
 801370c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013710:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80137dc <atanf+0x18c>
 8013714:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013718:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80137e0 <atanf+0x190>
 801371c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013720:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80137e4 <atanf+0x194>
 8013724:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013728:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80137e8 <atanf+0x198>
 801372c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013730:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013734:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013738:	ee27 7a87 	vmul.f32	s14, s15, s14
 801373c:	d121      	bne.n	8013782 <atanf+0x132>
 801373e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013742:	e794      	b.n	801366e <atanf+0x1e>
 8013744:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013748:	ee30 7a67 	vsub.f32	s14, s0, s15
 801374c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013750:	2301      	movs	r3, #1
 8013752:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013756:	e7be      	b.n	80136d6 <atanf+0x86>
 8013758:	4b24      	ldr	r3, [pc, #144]	@ (80137ec <atanf+0x19c>)
 801375a:	429c      	cmp	r4, r3
 801375c:	d80b      	bhi.n	8013776 <atanf+0x126>
 801375e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8013762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013766:	eea0 7a27 	vfma.f32	s14, s0, s15
 801376a:	2302      	movs	r3, #2
 801376c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013774:	e7af      	b.n	80136d6 <atanf+0x86>
 8013776:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801377a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801377e:	2303      	movs	r3, #3
 8013780:	e7a9      	b.n	80136d6 <atanf+0x86>
 8013782:	4a1b      	ldr	r2, [pc, #108]	@ (80137f0 <atanf+0x1a0>)
 8013784:	491b      	ldr	r1, [pc, #108]	@ (80137f4 <atanf+0x1a4>)
 8013786:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801378a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801378e:	edd3 6a00 	vldr	s13, [r3]
 8013792:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013796:	2d00      	cmp	r5, #0
 8013798:	ee37 7a67 	vsub.f32	s14, s14, s15
 801379c:	edd2 7a00 	vldr	s15, [r2]
 80137a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137a4:	bfb8      	it	lt
 80137a6:	eef1 7a67 	vneglt.f32	s15, s15
 80137aa:	e760      	b.n	801366e <atanf+0x1e>
 80137ac:	bfc90fdb 	.word	0xbfc90fdb
 80137b0:	3fc90fdb 	.word	0x3fc90fdb
 80137b4:	3edfffff 	.word	0x3edfffff
 80137b8:	7149f2ca 	.word	0x7149f2ca
 80137bc:	3f97ffff 	.word	0x3f97ffff
 80137c0:	3c8569d7 	.word	0x3c8569d7
 80137c4:	3d4bda59 	.word	0x3d4bda59
 80137c8:	bd6ef16b 	.word	0xbd6ef16b
 80137cc:	3d886b35 	.word	0x3d886b35
 80137d0:	3dba2e6e 	.word	0x3dba2e6e
 80137d4:	3e124925 	.word	0x3e124925
 80137d8:	3eaaaaab 	.word	0x3eaaaaab
 80137dc:	bd15a221 	.word	0xbd15a221
 80137e0:	bd9d8795 	.word	0xbd9d8795
 80137e4:	bde38e38 	.word	0xbde38e38
 80137e8:	be4ccccd 	.word	0xbe4ccccd
 80137ec:	401bffff 	.word	0x401bffff
 80137f0:	080145f8 	.word	0x080145f8
 80137f4:	080145e8 	.word	0x080145e8

080137f8 <__kernel_rem_pio2f>:
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	ed2d 8b04 	vpush	{d8-d9}
 8013800:	b0d9      	sub	sp, #356	@ 0x164
 8013802:	4690      	mov	r8, r2
 8013804:	9001      	str	r0, [sp, #4]
 8013806:	4ab6      	ldr	r2, [pc, #728]	@ (8013ae0 <__kernel_rem_pio2f+0x2e8>)
 8013808:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801380a:	f118 0f04 	cmn.w	r8, #4
 801380e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013812:	460f      	mov	r7, r1
 8013814:	f103 3bff 	add.w	fp, r3, #4294967295
 8013818:	db26      	blt.n	8013868 <__kernel_rem_pio2f+0x70>
 801381a:	f1b8 0203 	subs.w	r2, r8, #3
 801381e:	bf48      	it	mi
 8013820:	f108 0204 	addmi.w	r2, r8, #4
 8013824:	10d2      	asrs	r2, r2, #3
 8013826:	1c55      	adds	r5, r2, #1
 8013828:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801382a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 801382e:	00e8      	lsls	r0, r5, #3
 8013830:	eba2 060b 	sub.w	r6, r2, fp
 8013834:	9002      	str	r0, [sp, #8]
 8013836:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801383a:	eb0a 0c0b 	add.w	ip, sl, fp
 801383e:	ac1c      	add	r4, sp, #112	@ 0x70
 8013840:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013844:	2000      	movs	r0, #0
 8013846:	4560      	cmp	r0, ip
 8013848:	dd10      	ble.n	801386c <__kernel_rem_pio2f+0x74>
 801384a:	a91c      	add	r1, sp, #112	@ 0x70
 801384c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013850:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013854:	2600      	movs	r6, #0
 8013856:	4556      	cmp	r6, sl
 8013858:	dc24      	bgt.n	80138a4 <__kernel_rem_pio2f+0xac>
 801385a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801385e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013862:	4684      	mov	ip, r0
 8013864:	2400      	movs	r4, #0
 8013866:	e016      	b.n	8013896 <__kernel_rem_pio2f+0x9e>
 8013868:	2200      	movs	r2, #0
 801386a:	e7dc      	b.n	8013826 <__kernel_rem_pio2f+0x2e>
 801386c:	42c6      	cmn	r6, r0
 801386e:	bf5d      	ittte	pl
 8013870:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013874:	ee07 1a90 	vmovpl	s15, r1
 8013878:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801387c:	eef0 7a47 	vmovmi.f32	s15, s14
 8013880:	ece4 7a01 	vstmia	r4!, {s15}
 8013884:	3001      	adds	r0, #1
 8013886:	e7de      	b.n	8013846 <__kernel_rem_pio2f+0x4e>
 8013888:	ecfe 6a01 	vldmia	lr!, {s13}
 801388c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013890:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013894:	3401      	adds	r4, #1
 8013896:	455c      	cmp	r4, fp
 8013898:	ddf6      	ble.n	8013888 <__kernel_rem_pio2f+0x90>
 801389a:	ece9 7a01 	vstmia	r9!, {s15}
 801389e:	3601      	adds	r6, #1
 80138a0:	3004      	adds	r0, #4
 80138a2:	e7d8      	b.n	8013856 <__kernel_rem_pio2f+0x5e>
 80138a4:	a908      	add	r1, sp, #32
 80138a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80138aa:	9104      	str	r1, [sp, #16]
 80138ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80138ae:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8013aec <__kernel_rem_pio2f+0x2f4>
 80138b2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013ae8 <__kernel_rem_pio2f+0x2f0>
 80138b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80138ba:	9203      	str	r2, [sp, #12]
 80138bc:	4654      	mov	r4, sl
 80138be:	00a2      	lsls	r2, r4, #2
 80138c0:	9205      	str	r2, [sp, #20]
 80138c2:	aa58      	add	r2, sp, #352	@ 0x160
 80138c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80138c8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80138cc:	a944      	add	r1, sp, #272	@ 0x110
 80138ce:	aa08      	add	r2, sp, #32
 80138d0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80138d4:	4694      	mov	ip, r2
 80138d6:	4626      	mov	r6, r4
 80138d8:	2e00      	cmp	r6, #0
 80138da:	dc4c      	bgt.n	8013976 <__kernel_rem_pio2f+0x17e>
 80138dc:	4628      	mov	r0, r5
 80138de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138e2:	f000 f9f1 	bl	8013cc8 <scalbnf>
 80138e6:	eeb0 8a40 	vmov.f32	s16, s0
 80138ea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80138ee:	ee28 0a00 	vmul.f32	s0, s16, s0
 80138f2:	f000 fa4f 	bl	8013d94 <floorf>
 80138f6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80138fa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80138fe:	2d00      	cmp	r5, #0
 8013900:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013904:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013908:	ee17 9a90 	vmov	r9, s15
 801390c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013910:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013914:	dd41      	ble.n	801399a <__kernel_rem_pio2f+0x1a2>
 8013916:	f104 3cff 	add.w	ip, r4, #4294967295
 801391a:	a908      	add	r1, sp, #32
 801391c:	f1c5 0e08 	rsb	lr, r5, #8
 8013920:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013924:	fa46 f00e 	asr.w	r0, r6, lr
 8013928:	4481      	add	r9, r0
 801392a:	fa00 f00e 	lsl.w	r0, r0, lr
 801392e:	1a36      	subs	r6, r6, r0
 8013930:	f1c5 0007 	rsb	r0, r5, #7
 8013934:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013938:	4106      	asrs	r6, r0
 801393a:	2e00      	cmp	r6, #0
 801393c:	dd3c      	ble.n	80139b8 <__kernel_rem_pio2f+0x1c0>
 801393e:	f04f 0e00 	mov.w	lr, #0
 8013942:	f109 0901 	add.w	r9, r9, #1
 8013946:	4670      	mov	r0, lr
 8013948:	4574      	cmp	r4, lr
 801394a:	dc68      	bgt.n	8013a1e <__kernel_rem_pio2f+0x226>
 801394c:	2d00      	cmp	r5, #0
 801394e:	dd03      	ble.n	8013958 <__kernel_rem_pio2f+0x160>
 8013950:	2d01      	cmp	r5, #1
 8013952:	d074      	beq.n	8013a3e <__kernel_rem_pio2f+0x246>
 8013954:	2d02      	cmp	r5, #2
 8013956:	d07d      	beq.n	8013a54 <__kernel_rem_pio2f+0x25c>
 8013958:	2e02      	cmp	r6, #2
 801395a:	d12d      	bne.n	80139b8 <__kernel_rem_pio2f+0x1c0>
 801395c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013960:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013964:	b340      	cbz	r0, 80139b8 <__kernel_rem_pio2f+0x1c0>
 8013966:	4628      	mov	r0, r5
 8013968:	9306      	str	r3, [sp, #24]
 801396a:	f000 f9ad 	bl	8013cc8 <scalbnf>
 801396e:	9b06      	ldr	r3, [sp, #24]
 8013970:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013974:	e020      	b.n	80139b8 <__kernel_rem_pio2f+0x1c0>
 8013976:	ee60 7a28 	vmul.f32	s15, s0, s17
 801397a:	3e01      	subs	r6, #1
 801397c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013984:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013988:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801398c:	ecac 0a01 	vstmia	ip!, {s0}
 8013990:	ed30 0a01 	vldmdb	r0!, {s0}
 8013994:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013998:	e79e      	b.n	80138d8 <__kernel_rem_pio2f+0xe0>
 801399a:	d105      	bne.n	80139a8 <__kernel_rem_pio2f+0x1b0>
 801399c:	1e60      	subs	r0, r4, #1
 801399e:	a908      	add	r1, sp, #32
 80139a0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80139a4:	11f6      	asrs	r6, r6, #7
 80139a6:	e7c8      	b.n	801393a <__kernel_rem_pio2f+0x142>
 80139a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80139ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80139b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b4:	da31      	bge.n	8013a1a <__kernel_rem_pio2f+0x222>
 80139b6:	2600      	movs	r6, #0
 80139b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80139bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139c0:	f040 8098 	bne.w	8013af4 <__kernel_rem_pio2f+0x2fc>
 80139c4:	1e60      	subs	r0, r4, #1
 80139c6:	2200      	movs	r2, #0
 80139c8:	4550      	cmp	r0, sl
 80139ca:	da4b      	bge.n	8013a64 <__kernel_rem_pio2f+0x26c>
 80139cc:	2a00      	cmp	r2, #0
 80139ce:	d065      	beq.n	8013a9c <__kernel_rem_pio2f+0x2a4>
 80139d0:	3c01      	subs	r4, #1
 80139d2:	ab08      	add	r3, sp, #32
 80139d4:	3d08      	subs	r5, #8
 80139d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d0f8      	beq.n	80139d0 <__kernel_rem_pio2f+0x1d8>
 80139de:	4628      	mov	r0, r5
 80139e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80139e4:	f000 f970 	bl	8013cc8 <scalbnf>
 80139e8:	1c63      	adds	r3, r4, #1
 80139ea:	aa44      	add	r2, sp, #272	@ 0x110
 80139ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013aec <__kernel_rem_pio2f+0x2f4>
 80139f0:	0099      	lsls	r1, r3, #2
 80139f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80139f6:	4623      	mov	r3, r4
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f280 80a9 	bge.w	8013b50 <__kernel_rem_pio2f+0x358>
 80139fe:	4623      	mov	r3, r4
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f2c0 80c7 	blt.w	8013b94 <__kernel_rem_pio2f+0x39c>
 8013a06:	aa44      	add	r2, sp, #272	@ 0x110
 8013a08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013a0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013ae4 <__kernel_rem_pio2f+0x2ec>
 8013a10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013a14:	2000      	movs	r0, #0
 8013a16:	1ae2      	subs	r2, r4, r3
 8013a18:	e0b1      	b.n	8013b7e <__kernel_rem_pio2f+0x386>
 8013a1a:	2602      	movs	r6, #2
 8013a1c:	e78f      	b.n	801393e <__kernel_rem_pio2f+0x146>
 8013a1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013a22:	b948      	cbnz	r0, 8013a38 <__kernel_rem_pio2f+0x240>
 8013a24:	b121      	cbz	r1, 8013a30 <__kernel_rem_pio2f+0x238>
 8013a26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013a2a:	f842 1c04 	str.w	r1, [r2, #-4]
 8013a2e:	2101      	movs	r1, #1
 8013a30:	f10e 0e01 	add.w	lr, lr, #1
 8013a34:	4608      	mov	r0, r1
 8013a36:	e787      	b.n	8013948 <__kernel_rem_pio2f+0x150>
 8013a38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013a3c:	e7f5      	b.n	8013a2a <__kernel_rem_pio2f+0x232>
 8013a3e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013a42:	aa08      	add	r2, sp, #32
 8013a44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013a48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013a4c:	a908      	add	r1, sp, #32
 8013a4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013a52:	e781      	b.n	8013958 <__kernel_rem_pio2f+0x160>
 8013a54:	f104 3cff 	add.w	ip, r4, #4294967295
 8013a58:	aa08      	add	r2, sp, #32
 8013a5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013a5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013a62:	e7f3      	b.n	8013a4c <__kernel_rem_pio2f+0x254>
 8013a64:	a908      	add	r1, sp, #32
 8013a66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013a6a:	3801      	subs	r0, #1
 8013a6c:	430a      	orrs	r2, r1
 8013a6e:	e7ab      	b.n	80139c8 <__kernel_rem_pio2f+0x1d0>
 8013a70:	3201      	adds	r2, #1
 8013a72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	d0fa      	beq.n	8013a70 <__kernel_rem_pio2f+0x278>
 8013a7a:	9905      	ldr	r1, [sp, #20]
 8013a7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013a80:	eb0d 0001 	add.w	r0, sp, r1
 8013a84:	18e6      	adds	r6, r4, r3
 8013a86:	a91c      	add	r1, sp, #112	@ 0x70
 8013a88:	f104 0c01 	add.w	ip, r4, #1
 8013a8c:	384c      	subs	r0, #76	@ 0x4c
 8013a8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013a92:	4422      	add	r2, r4
 8013a94:	4562      	cmp	r2, ip
 8013a96:	da04      	bge.n	8013aa2 <__kernel_rem_pio2f+0x2aa>
 8013a98:	4614      	mov	r4, r2
 8013a9a:	e710      	b.n	80138be <__kernel_rem_pio2f+0xc6>
 8013a9c:	9804      	ldr	r0, [sp, #16]
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	e7e7      	b.n	8013a72 <__kernel_rem_pio2f+0x27a>
 8013aa2:	9903      	ldr	r1, [sp, #12]
 8013aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013aa8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013aac:	9105      	str	r1, [sp, #20]
 8013aae:	ee07 1a90 	vmov	s15, r1
 8013ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ab6:	2400      	movs	r4, #0
 8013ab8:	ece6 7a01 	vstmia	r6!, {s15}
 8013abc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013ac0:	46b1      	mov	r9, r6
 8013ac2:	455c      	cmp	r4, fp
 8013ac4:	dd04      	ble.n	8013ad0 <__kernel_rem_pio2f+0x2d8>
 8013ac6:	ece0 7a01 	vstmia	r0!, {s15}
 8013aca:	f10c 0c01 	add.w	ip, ip, #1
 8013ace:	e7e1      	b.n	8013a94 <__kernel_rem_pio2f+0x29c>
 8013ad0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013ad4:	ed39 7a01 	vldmdb	r9!, {s14}
 8013ad8:	3401      	adds	r4, #1
 8013ada:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013ade:	e7f0      	b.n	8013ac2 <__kernel_rem_pio2f+0x2ca>
 8013ae0:	08014634 	.word	0x08014634
 8013ae4:	08014608 	.word	0x08014608
 8013ae8:	43800000 	.word	0x43800000
 8013aec:	3b800000 	.word	0x3b800000
 8013af0:	00000000 	.word	0x00000000
 8013af4:	9b02      	ldr	r3, [sp, #8]
 8013af6:	eeb0 0a48 	vmov.f32	s0, s16
 8013afa:	eba3 0008 	sub.w	r0, r3, r8
 8013afe:	f000 f8e3 	bl	8013cc8 <scalbnf>
 8013b02:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013ae8 <__kernel_rem_pio2f+0x2f0>
 8013b06:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b0e:	db19      	blt.n	8013b44 <__kernel_rem_pio2f+0x34c>
 8013b10:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013aec <__kernel_rem_pio2f+0x2f4>
 8013b14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013b18:	aa08      	add	r2, sp, #32
 8013b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b1e:	3508      	adds	r5, #8
 8013b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b30:	ee10 3a10 	vmov	r3, s0
 8013b34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013b38:	ee17 3a90 	vmov	r3, s15
 8013b3c:	3401      	adds	r4, #1
 8013b3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013b42:	e74c      	b.n	80139de <__kernel_rem_pio2f+0x1e6>
 8013b44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b48:	aa08      	add	r2, sp, #32
 8013b4a:	ee10 3a10 	vmov	r3, s0
 8013b4e:	e7f6      	b.n	8013b3e <__kernel_rem_pio2f+0x346>
 8013b50:	a808      	add	r0, sp, #32
 8013b52:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013b56:	9001      	str	r0, [sp, #4]
 8013b58:	ee07 0a90 	vmov	s15, r0
 8013b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b60:	3b01      	subs	r3, #1
 8013b62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013b66:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013b6a:	ed62 7a01 	vstmdb	r2!, {s15}
 8013b6e:	e743      	b.n	80139f8 <__kernel_rem_pio2f+0x200>
 8013b70:	ecfc 6a01 	vldmia	ip!, {s13}
 8013b74:	ecb5 7a01 	vldmia	r5!, {s14}
 8013b78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	4550      	cmp	r0, sl
 8013b80:	dc01      	bgt.n	8013b86 <__kernel_rem_pio2f+0x38e>
 8013b82:	4290      	cmp	r0, r2
 8013b84:	ddf4      	ble.n	8013b70 <__kernel_rem_pio2f+0x378>
 8013b86:	a858      	add	r0, sp, #352	@ 0x160
 8013b88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013b8c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013b90:	3b01      	subs	r3, #1
 8013b92:	e735      	b.n	8013a00 <__kernel_rem_pio2f+0x208>
 8013b94:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013b96:	2b02      	cmp	r3, #2
 8013b98:	dc09      	bgt.n	8013bae <__kernel_rem_pio2f+0x3b6>
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	dc27      	bgt.n	8013bee <__kernel_rem_pio2f+0x3f6>
 8013b9e:	d040      	beq.n	8013c22 <__kernel_rem_pio2f+0x42a>
 8013ba0:	f009 0007 	and.w	r0, r9, #7
 8013ba4:	b059      	add	sp, #356	@ 0x164
 8013ba6:	ecbd 8b04 	vpop	{d8-d9}
 8013baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	d1f5      	bne.n	8013ba0 <__kernel_rem_pio2f+0x3a8>
 8013bb4:	aa30      	add	r2, sp, #192	@ 0xc0
 8013bb6:	1f0b      	subs	r3, r1, #4
 8013bb8:	4413      	add	r3, r2
 8013bba:	461a      	mov	r2, r3
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	dc50      	bgt.n	8013c64 <__kernel_rem_pio2f+0x46c>
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	2a01      	cmp	r2, #1
 8013bc6:	dc5d      	bgt.n	8013c84 <__kernel_rem_pio2f+0x48c>
 8013bc8:	ab30      	add	r3, sp, #192	@ 0xc0
 8013bca:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013bce:	440b      	add	r3, r1
 8013bd0:	2c01      	cmp	r4, #1
 8013bd2:	dc67      	bgt.n	8013ca4 <__kernel_rem_pio2f+0x4ac>
 8013bd4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013bd8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013bdc:	2e00      	cmp	r6, #0
 8013bde:	d167      	bne.n	8013cb0 <__kernel_rem_pio2f+0x4b8>
 8013be0:	edc7 6a00 	vstr	s13, [r7]
 8013be4:	ed87 7a01 	vstr	s14, [r7, #4]
 8013be8:	edc7 7a02 	vstr	s15, [r7, #8]
 8013bec:	e7d8      	b.n	8013ba0 <__kernel_rem_pio2f+0x3a8>
 8013bee:	ab30      	add	r3, sp, #192	@ 0xc0
 8013bf0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013bf4:	440b      	add	r3, r1
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	2a00      	cmp	r2, #0
 8013bfa:	da24      	bge.n	8013c46 <__kernel_rem_pio2f+0x44e>
 8013bfc:	b34e      	cbz	r6, 8013c52 <__kernel_rem_pio2f+0x45a>
 8013bfe:	eef1 7a47 	vneg.f32	s15, s14
 8013c02:	edc7 7a00 	vstr	s15, [r7]
 8013c06:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c0e:	aa31      	add	r2, sp, #196	@ 0xc4
 8013c10:	2301      	movs	r3, #1
 8013c12:	429c      	cmp	r4, r3
 8013c14:	da20      	bge.n	8013c58 <__kernel_rem_pio2f+0x460>
 8013c16:	b10e      	cbz	r6, 8013c1c <__kernel_rem_pio2f+0x424>
 8013c18:	eef1 7a67 	vneg.f32	s15, s15
 8013c1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8013c20:	e7be      	b.n	8013ba0 <__kernel_rem_pio2f+0x3a8>
 8013c22:	ab30      	add	r3, sp, #192	@ 0xc0
 8013c24:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013af0 <__kernel_rem_pio2f+0x2f8>
 8013c28:	440b      	add	r3, r1
 8013c2a:	2c00      	cmp	r4, #0
 8013c2c:	da05      	bge.n	8013c3a <__kernel_rem_pio2f+0x442>
 8013c2e:	b10e      	cbz	r6, 8013c34 <__kernel_rem_pio2f+0x43c>
 8013c30:	eef1 7a67 	vneg.f32	s15, s15
 8013c34:	edc7 7a00 	vstr	s15, [r7]
 8013c38:	e7b2      	b.n	8013ba0 <__kernel_rem_pio2f+0x3a8>
 8013c3a:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c3e:	3c01      	subs	r4, #1
 8013c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c44:	e7f1      	b.n	8013c2a <__kernel_rem_pio2f+0x432>
 8013c46:	ed73 7a01 	vldmdb	r3!, {s15}
 8013c4a:	3a01      	subs	r2, #1
 8013c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c50:	e7d2      	b.n	8013bf8 <__kernel_rem_pio2f+0x400>
 8013c52:	eef0 7a47 	vmov.f32	s15, s14
 8013c56:	e7d4      	b.n	8013c02 <__kernel_rem_pio2f+0x40a>
 8013c58:	ecb2 7a01 	vldmia	r2!, {s14}
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c62:	e7d6      	b.n	8013c12 <__kernel_rem_pio2f+0x41a>
 8013c64:	ed72 7a01 	vldmdb	r2!, {s15}
 8013c68:	edd2 6a01 	vldr	s13, [r2, #4]
 8013c6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c70:	3801      	subs	r0, #1
 8013c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c76:	ed82 7a00 	vstr	s14, [r2]
 8013c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c7e:	edc2 7a01 	vstr	s15, [r2, #4]
 8013c82:	e79c      	b.n	8013bbe <__kernel_rem_pio2f+0x3c6>
 8013c84:	ed73 7a01 	vldmdb	r3!, {s15}
 8013c88:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c90:	3a01      	subs	r2, #1
 8013c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c96:	ed83 7a00 	vstr	s14, [r3]
 8013c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c9e:	edc3 7a01 	vstr	s15, [r3, #4]
 8013ca2:	e78f      	b.n	8013bc4 <__kernel_rem_pio2f+0x3cc>
 8013ca4:	ed33 7a01 	vldmdb	r3!, {s14}
 8013ca8:	3c01      	subs	r4, #1
 8013caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cae:	e78f      	b.n	8013bd0 <__kernel_rem_pio2f+0x3d8>
 8013cb0:	eef1 6a66 	vneg.f32	s13, s13
 8013cb4:	eeb1 7a47 	vneg.f32	s14, s14
 8013cb8:	edc7 6a00 	vstr	s13, [r7]
 8013cbc:	ed87 7a01 	vstr	s14, [r7, #4]
 8013cc0:	eef1 7a67 	vneg.f32	s15, s15
 8013cc4:	e790      	b.n	8013be8 <__kernel_rem_pio2f+0x3f0>
 8013cc6:	bf00      	nop

08013cc8 <scalbnf>:
 8013cc8:	ee10 3a10 	vmov	r3, s0
 8013ccc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013cd0:	d02b      	beq.n	8013d2a <scalbnf+0x62>
 8013cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013cd6:	d302      	bcc.n	8013cde <scalbnf+0x16>
 8013cd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013cdc:	4770      	bx	lr
 8013cde:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013ce2:	d123      	bne.n	8013d2c <scalbnf+0x64>
 8013ce4:	4b24      	ldr	r3, [pc, #144]	@ (8013d78 <scalbnf+0xb0>)
 8013ce6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013d7c <scalbnf+0xb4>
 8013cea:	4298      	cmp	r0, r3
 8013cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013cf0:	db17      	blt.n	8013d22 <scalbnf+0x5a>
 8013cf2:	ee10 3a10 	vmov	r3, s0
 8013cf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013cfa:	3a19      	subs	r2, #25
 8013cfc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013d00:	4288      	cmp	r0, r1
 8013d02:	dd15      	ble.n	8013d30 <scalbnf+0x68>
 8013d04:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013d80 <scalbnf+0xb8>
 8013d08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013d84 <scalbnf+0xbc>
 8013d0c:	ee10 3a10 	vmov	r3, s0
 8013d10:	eeb0 7a67 	vmov.f32	s14, s15
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	bfb8      	it	lt
 8013d18:	eef0 7a66 	vmovlt.f32	s15, s13
 8013d1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013d20:	4770      	bx	lr
 8013d22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013d88 <scalbnf+0xc0>
 8013d26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d2a:	4770      	bx	lr
 8013d2c:	0dd2      	lsrs	r2, r2, #23
 8013d2e:	e7e5      	b.n	8013cfc <scalbnf+0x34>
 8013d30:	4410      	add	r0, r2
 8013d32:	28fe      	cmp	r0, #254	@ 0xfe
 8013d34:	dce6      	bgt.n	8013d04 <scalbnf+0x3c>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	dd06      	ble.n	8013d48 <scalbnf+0x80>
 8013d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d42:	ee00 3a10 	vmov	s0, r3
 8013d46:	4770      	bx	lr
 8013d48:	f110 0f16 	cmn.w	r0, #22
 8013d4c:	da09      	bge.n	8013d62 <scalbnf+0x9a>
 8013d4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013d88 <scalbnf+0xc0>
 8013d52:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013d8c <scalbnf+0xc4>
 8013d56:	ee10 3a10 	vmov	r3, s0
 8013d5a:	eeb0 7a67 	vmov.f32	s14, s15
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	e7d9      	b.n	8013d16 <scalbnf+0x4e>
 8013d62:	3019      	adds	r0, #25
 8013d64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d6c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013d90 <scalbnf+0xc8>
 8013d70:	ee07 3a90 	vmov	s15, r3
 8013d74:	e7d7      	b.n	8013d26 <scalbnf+0x5e>
 8013d76:	bf00      	nop
 8013d78:	ffff3cb0 	.word	0xffff3cb0
 8013d7c:	4c000000 	.word	0x4c000000
 8013d80:	7149f2ca 	.word	0x7149f2ca
 8013d84:	f149f2ca 	.word	0xf149f2ca
 8013d88:	0da24260 	.word	0x0da24260
 8013d8c:	8da24260 	.word	0x8da24260
 8013d90:	33000000 	.word	0x33000000

08013d94 <floorf>:
 8013d94:	ee10 3a10 	vmov	r3, s0
 8013d98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013d9c:	3a7f      	subs	r2, #127	@ 0x7f
 8013d9e:	2a16      	cmp	r2, #22
 8013da0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013da4:	dc2b      	bgt.n	8013dfe <floorf+0x6a>
 8013da6:	2a00      	cmp	r2, #0
 8013da8:	da12      	bge.n	8013dd0 <floorf+0x3c>
 8013daa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013e10 <floorf+0x7c>
 8013dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013db2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dba:	dd06      	ble.n	8013dca <floorf+0x36>
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	da24      	bge.n	8013e0a <floorf+0x76>
 8013dc0:	2900      	cmp	r1, #0
 8013dc2:	4b14      	ldr	r3, [pc, #80]	@ (8013e14 <floorf+0x80>)
 8013dc4:	bf08      	it	eq
 8013dc6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013dca:	ee00 3a10 	vmov	s0, r3
 8013dce:	4770      	bx	lr
 8013dd0:	4911      	ldr	r1, [pc, #68]	@ (8013e18 <floorf+0x84>)
 8013dd2:	4111      	asrs	r1, r2
 8013dd4:	420b      	tst	r3, r1
 8013dd6:	d0fa      	beq.n	8013dce <floorf+0x3a>
 8013dd8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013e10 <floorf+0x7c>
 8013ddc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013de0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de8:	ddef      	ble.n	8013dca <floorf+0x36>
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	bfbe      	ittt	lt
 8013dee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013df2:	fa40 f202 	asrlt.w	r2, r0, r2
 8013df6:	189b      	addlt	r3, r3, r2
 8013df8:	ea23 0301 	bic.w	r3, r3, r1
 8013dfc:	e7e5      	b.n	8013dca <floorf+0x36>
 8013dfe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013e02:	d3e4      	bcc.n	8013dce <floorf+0x3a>
 8013e04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e08:	4770      	bx	lr
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e7dd      	b.n	8013dca <floorf+0x36>
 8013e0e:	bf00      	nop
 8013e10:	7149f2ca 	.word	0x7149f2ca
 8013e14:	bf800000 	.word	0xbf800000
 8013e18:	007fffff 	.word	0x007fffff

08013e1c <_init>:
 8013e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1e:	bf00      	nop
 8013e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e22:	bc08      	pop	{r3}
 8013e24:	469e      	mov	lr, r3
 8013e26:	4770      	bx	lr

08013e28 <_fini>:
 8013e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2a:	bf00      	nop
 8013e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e2e:	bc08      	pop	{r3}
 8013e30:	469e      	mov	lr, r3
 8013e32:	4770      	bx	lr

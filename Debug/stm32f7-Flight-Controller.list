
stm32f7-Flight-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012828  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08012a08  08012a08  00013a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e30  08012e30  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012e30  08012e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e38  08012e38  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e38  08012e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e3c  08012e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08012e40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002120  200002d4  08013114  000142d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023f4  08013114  000143f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243d8  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e8  00000000  00000000  000386dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0003d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e3  00000000  00000000  0003f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002998b  00000000  00000000  00040e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a03  00000000  00000000  0006a7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebd24  00000000  00000000  000941d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017fefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ce8  00000000  00000000  0017ff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00188c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080129f0 	.word	0x080129f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002d8 	.word	0x200002d8
 800021c:	080129f0 	.word	0x080129f0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b988 	b.w	8001000 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	468e      	mov	lr, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	4688      	mov	r8, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d962      	bls.n	8000de4 <__udivmoddi4+0xdc>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	b14e      	cbz	r6, 8000d38 <__udivmoddi4+0x30>
 8000d24:	f1c6 0320 	rsb	r3, r6, #32
 8000d28:	fa01 f806 	lsl.w	r8, r1, r6
 8000d2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	ea43 0808 	orr.w	r8, r3, r8
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d44:	0c23      	lsrs	r3, r4, #16
 8000d46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d5c:	f080 80ea 	bcs.w	8000f34 <__udivmoddi4+0x22c>
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f240 80e7 	bls.w	8000f34 <__udivmoddi4+0x22c>
 8000d66:	3902      	subs	r1, #2
 8000d68:	443b      	add	r3, r7
 8000d6a:	1a9a      	subs	r2, r3, r2
 8000d6c:	b2a3      	uxth	r3, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7e:	459c      	cmp	ip, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x8e>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d88:	f080 80d6 	bcs.w	8000f38 <__udivmoddi4+0x230>
 8000d8c:	459c      	cmp	ip, r3
 8000d8e:	f240 80d3 	bls.w	8000f38 <__udivmoddi4+0x230>
 8000d92:	443b      	add	r3, r7
 8000d94:	3802      	subs	r0, #2
 8000d96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9a:	eba3 030c 	sub.w	r3, r3, ip
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11d      	cbz	r5, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40f3      	lsrs	r3, r6
 8000da4:	2200      	movs	r2, #0
 8000da6:	e9c5 3200 	strd	r3, r2, [r5]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d905      	bls.n	8000dbe <__udivmoddi4+0xb6>
 8000db2:	b10d      	cbz	r5, 8000db8 <__udivmoddi4+0xb0>
 8000db4:	e9c5 0100 	strd	r0, r1, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e7f5      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dbe:	fab3 f183 	clz	r1, r3
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d146      	bne.n	8000e54 <__udivmoddi4+0x14c>
 8000dc6:	4573      	cmp	r3, lr
 8000dc8:	d302      	bcc.n	8000dd0 <__udivmoddi4+0xc8>
 8000dca:	4282      	cmp	r2, r0
 8000dcc:	f200 8105 	bhi.w	8000fda <__udivmoddi4+0x2d2>
 8000dd0:	1a84      	subs	r4, r0, r2
 8000dd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	4690      	mov	r8, r2
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d0e5      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000dde:	e9c5 4800 	strd	r4, r8, [r5]
 8000de2:	e7e2      	b.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f000 8090 	beq.w	8000f0a <__udivmoddi4+0x202>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f040 80a4 	bne.w	8000f3c <__udivmoddi4+0x234>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	b2bc      	uxth	r4, r7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x11e>
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x11c>
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	f200 80e0 	bhi.w	8000fe4 <__udivmoddi4+0x2dc>
 8000e24:	46c4      	mov	ip, r8
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e34:	fb02 f404 	mul.w	r4, r2, r4
 8000e38:	429c      	cmp	r4, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x144>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x142>
 8000e44:	429c      	cmp	r4, r3
 8000e46:	f200 80ca 	bhi.w	8000fde <__udivmoddi4+0x2d6>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e52:	e7a5      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e54:	f1c1 0620 	rsb	r6, r1, #32
 8000e58:	408b      	lsls	r3, r1
 8000e5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	fa0e f401 	lsl.w	r4, lr, r1
 8000e64:	fa20 f306 	lsr.w	r3, r0, r6
 8000e68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e70:	4323      	orrs	r3, r4
 8000e72:	fa00 f801 	lsl.w	r8, r0, r1
 8000e76:	fa1f fc87 	uxth.w	ip, r7
 8000e7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7e:	0c1c      	lsrs	r4, r3, #16
 8000e80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__udivmoddi4+0x1a0>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e9a:	f080 809c 	bcs.w	8000fd6 <__udivmoddi4+0x2ce>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f240 8099 	bls.w	8000fd6 <__udivmoddi4+0x2ce>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	fa1f fe83 	uxth.w	lr, r3
 8000eb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ebc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ec0:	45a4      	cmp	ip, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1ce>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eca:	f080 8082 	bcs.w	8000fd2 <__udivmoddi4+0x2ca>
 8000ece:	45a4      	cmp	ip, r4
 8000ed0:	d97f      	bls.n	8000fd2 <__udivmoddi4+0x2ca>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	443c      	add	r4, r7
 8000ed6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eda:	eba4 040c 	sub.w	r4, r4, ip
 8000ede:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ee2:	4564      	cmp	r4, ip
 8000ee4:	4673      	mov	r3, lr
 8000ee6:	46e1      	mov	r9, ip
 8000ee8:	d362      	bcc.n	8000fb0 <__udivmoddi4+0x2a8>
 8000eea:	d05f      	beq.n	8000fac <__udivmoddi4+0x2a4>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x1fe>
 8000eee:	ebb8 0203 	subs.w	r2, r8, r3
 8000ef2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef6:	fa04 f606 	lsl.w	r6, r4, r6
 8000efa:	fa22 f301 	lsr.w	r3, r2, r1
 8000efe:	431e      	orrs	r6, r3
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	e9c5 6400 	strd	r6, r4, [r5]
 8000f06:	2100      	movs	r1, #0
 8000f08:	e74f      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0e:	0c01      	lsrs	r1, r0, #16
 8000f10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f14:	b280      	uxth	r0, r0
 8000f16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	463c      	mov	r4, r7
 8000f20:	46b8      	mov	r8, r7
 8000f22:	46be      	mov	lr, r7
 8000f24:	2620      	movs	r6, #32
 8000f26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f2a:	eba2 0208 	sub.w	r2, r2, r8
 8000f2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f32:	e766      	b.n	8000e02 <__udivmoddi4+0xfa>
 8000f34:	4601      	mov	r1, r0
 8000f36:	e718      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e72c      	b.n	8000d96 <__udivmoddi4+0x8e>
 8000f3c:	f1c6 0220 	rsb	r2, r6, #32
 8000f40:	fa2e f302 	lsr.w	r3, lr, r2
 8000f44:	40b7      	lsls	r7, r6
 8000f46:	40b1      	lsls	r1, r6
 8000f48:	fa20 f202 	lsr.w	r2, r0, r2
 8000f4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f56:	b2bc      	uxth	r4, r7
 8000f58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb08 f904 	mul.w	r9, r8, r4
 8000f66:	40b0      	lsls	r0, r6
 8000f68:	4589      	cmp	r9, r1
 8000f6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	d93e      	bls.n	8000ff0 <__udivmoddi4+0x2e8>
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f78:	d201      	bcs.n	8000f7e <__udivmoddi4+0x276>
 8000f7a:	4589      	cmp	r9, r1
 8000f7c:	d81f      	bhi.n	8000fbe <__udivmoddi4+0x2b6>
 8000f7e:	eba1 0109 	sub.w	r1, r1, r9
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f94:	4542      	cmp	r2, r8
 8000f96:	d229      	bcs.n	8000fec <__udivmoddi4+0x2e4>
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9e:	d2c4      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa0:	4542      	cmp	r2, r8
 8000fa2:	d2c2      	bcs.n	8000f2a <__udivmoddi4+0x222>
 8000fa4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa8:	443a      	add	r2, r7
 8000faa:	e7be      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fac:	45f0      	cmp	r8, lr
 8000fae:	d29d      	bcs.n	8000eec <__udivmoddi4+0x1e4>
 8000fb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb8:	3801      	subs	r0, #1
 8000fba:	46e1      	mov	r9, ip
 8000fbc:	e796      	b.n	8000eec <__udivmoddi4+0x1e4>
 8000fbe:	eba7 0909 	sub.w	r9, r7, r9
 8000fc2:	4449      	add	r1, r9
 8000fc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fcc:	fb09 f804 	mul.w	r8, r9, r4
 8000fd0:	e7db      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fd2:	4673      	mov	r3, lr
 8000fd4:	e77f      	b.n	8000ed6 <__udivmoddi4+0x1ce>
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	e766      	b.n	8000ea8 <__udivmoddi4+0x1a0>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e6fd      	b.n	8000dda <__udivmoddi4+0xd2>
 8000fde:	443b      	add	r3, r7
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	e733      	b.n	8000e4c <__udivmoddi4+0x144>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	443b      	add	r3, r7
 8000fea:	e71c      	b.n	8000e26 <__udivmoddi4+0x11e>
 8000fec:	4649      	mov	r1, r9
 8000fee:	e79c      	b.n	8000f2a <__udivmoddi4+0x222>
 8000ff0:	eba1 0109 	sub.w	r1, r1, r9
 8000ff4:	46c4      	mov	ip, r8
 8000ff6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ffa:	fb09 f804 	mul.w	r8, r9, r4
 8000ffe:	e7c4      	b.n	8000f8a <__udivmoddi4+0x282>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	0000      	movs	r0, r0
	...

08001008 <AHRS_Update_Gyro>:

#include "AHRS.h"

Vec3 attitude_gyro, attitude_acc, attitude = {0.0f, 0.0f, 0.0f};

void AHRS_Update_Gyro(Vec3 gyro, float dt){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	eef0 6a40 	vmov.f32	s13, s0
 8001012:	eeb0 7a60 	vmov.f32	s14, s1
 8001016:	eef0 7a41 	vmov.f32	s15, s2
 800101a:	edc7 1a00 	vstr	s3, [r7]
 800101e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001022:	ed87 7a02 	vstr	s14, [r7, #8]
 8001026:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_gyro.x = attitude.x + gyro.x * dt * DEG_TO_RAD;
 800102a:	4b5d      	ldr	r3, [pc, #372]	@ (80011a0 <AHRS_Update_Gyro+0x198>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fab2 	bl	8000598 <__aeabi_f2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	ed97 7a01 	vldr	s14, [r7, #4]
 800103c:	edd7 7a00 	vldr	s15, [r7]
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff faa6 	bl	8000598 <__aeabi_f2d>
 800104c:	a350      	add	r3, pc, #320	@ (adr r3, 8001190 <AHRS_Update_Gyro+0x188>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff faf9 	bl	8000648 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff f93d 	bl	80002dc <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fde5 	bl	8000c38 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001072:	6013      	str	r3, [r2, #0]
	attitude_gyro.y = attitude.y + gyro.y * dt * DEG_TO_RAD;
 8001074:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <AHRS_Update_Gyro+0x198>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa8d 	bl	8000598 <__aeabi_f2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	ed97 7a02 	vldr	s14, [r7, #8]
 8001086:	edd7 7a00 	vldr	s15, [r7]
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	ee17 0a90 	vmov	r0, s15
 8001092:	f7ff fa81 	bl	8000598 <__aeabi_f2d>
 8001096:	a33e      	add	r3, pc, #248	@ (adr r3, 8001190 <AHRS_Update_Gyro+0x188>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fad4 	bl	8000648 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff f918 	bl	80002dc <__adddf3>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fdc0 	bl	8000c38 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a3a      	ldr	r2, [pc, #232]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 80010bc:	6053      	str	r3, [r2, #4]
	attitude_gyro.z = attitude.z + gyro.z * dt * DEG_TO_RAD;
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <AHRS_Update_Gyro+0x198>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa68 	bl	8000598 <__aeabi_f2d>
 80010c8:	4604      	mov	r4, r0
 80010ca:	460d      	mov	r5, r1
 80010cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d0:	edd7 7a00 	vldr	s15, [r7]
 80010d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff fa5c 	bl	8000598 <__aeabi_f2d>
 80010e0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001190 <AHRS_Update_Gyro+0x188>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff faaf 	bl	8000648 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff f8f3 	bl	80002dc <__adddf3>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd9b 	bl	8000c38 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001106:	6093      	str	r3, [r2, #8]

	if(attitude_gyro.x > M_PI) attitude_gyro.x = -attitude_gyro.x;
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa43 	bl	8000598 <__aeabi_f2d>
 8001112:	a321      	add	r3, pc, #132	@ (adr r3, 8001198 <AHRS_Update_Gyro+0x190>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff fd26 	bl	8000b68 <__aeabi_dcmpgt>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <AHRS_Update_Gyro+0x12a>
 8001122:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	eef1 7a67 	vneg.f32	s15, s15
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
	if(attitude_gyro.y > M_PI) attitude_gyro.y = -attitude_gyro.y;
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa2e 	bl	8000598 <__aeabi_f2d>
 800113c:	a316      	add	r3, pc, #88	@ (adr r3, 8001198 <AHRS_Update_Gyro+0x190>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fd11 	bl	8000b68 <__aeabi_dcmpgt>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <AHRS_Update_Gyro+0x154>
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 800114e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001152:	eef1 7a67 	vneg.f32	s15, s15
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001158:	edc3 7a01 	vstr	s15, [r3, #4]
	if(attitude_gyro.z > M_PI) attitude_gyro.z = -attitude_gyro.z;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fa19 	bl	8000598 <__aeabi_f2d>
 8001166:	a30c      	add	r3, pc, #48	@ (adr r3, 8001198 <AHRS_Update_Gyro+0x190>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fcfc 	bl	8000b68 <__aeabi_dcmpgt>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <AHRS_Update_Gyro+0x170>

}
 8001176:	e007      	b.n	8001188 <AHRS_Update_Gyro+0x180>
	if(attitude_gyro.z > M_PI) attitude_gyro.z = -attitude_gyro.z;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 800117a:	edd3 7a02 	vldr	s15, [r3, #8]
 800117e:	eef1 7a67 	vneg.f32	s15, s15
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <AHRS_Update_Gyro+0x19c>)
 8001184:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bdb0      	pop	{r4, r5, r7, pc}
 8001190:	a252dd11 	.word	0xa252dd11
 8001194:	3f91df46 	.word	0x3f91df46
 8001198:	54442d18 	.word	0x54442d18
 800119c:	400921fb 	.word	0x400921fb
 80011a0:	20000308 	.word	0x20000308
 80011a4:	200002f0 	.word	0x200002f0

080011a8 <AHRS_Update_Acc>:



void AHRS_Update_Acc(Vec3 accel){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	ed2d 8b02 	vpush	{d8}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	eef0 6a40 	vmov.f32	s13, s0
 80011b6:	eeb0 7a60 	vmov.f32	s14, s1
 80011ba:	eef0 7a41 	vmov.f32	s15, s2
 80011be:	edc7 6a01 	vstr	s13, [r7, #4]
 80011c2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011c6:	edc7 7a03 	vstr	s15, [r7, #12]

	attitude_acc.x = atan2f(accel.y, accel.z);
 80011ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80011d2:	eef0 0a47 	vmov.f32	s1, s14
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f011 f9b5 	bl	8012548 <atan2f>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <AHRS_Update_Acc+0xb0>)
 80011e4:	edc3 7a00 	vstr	s15, [r3]
	attitude_acc.y = atan2f(-accel.x, sqrt(accel.y*accel.y + accel.z*accel.z));
 80011e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ec:	eeb1 8a67 	vneg.f32	s16, s15
 80011f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001200:	edd7 7a03 	vldr	s15, [r7, #12]
 8001204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff f9c2 	bl	8000598 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	ec43 2b10 	vmov	d0, r2, r3
 800121c:	f011 f968 	bl	80124f0 <sqrt>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fd06 	bl	8000c38 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	ee00 3a90 	vmov	s1, r3
 8001232:	eeb0 0a48 	vmov.f32	s0, s16
 8001236:	f011 f987 	bl	8012548 <atan2f>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <AHRS_Update_Acc+0xb0>)
 8001240:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude_acc.z = attitude_gyro.z;
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <AHRS_Update_Acc+0xb4>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a03      	ldr	r2, [pc, #12]	@ (8001258 <AHRS_Update_Acc+0xb0>)
 800124a:	6093      	str	r3, [r2, #8]

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	ecbd 8b02 	vpop	{d8}
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200002fc 	.word	0x200002fc
 800125c:	200002f0 	.word	0x200002f0

08001260 <AHRS_Update_Complementary_Filter>:

void AHRS_Update_Complementary_Filter(Vec3 gyro, Vec3 acc, float gain, float dt){
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	eeb0 5a40 	vmov.f32	s10, s0
 800126a:	eef0 5a60 	vmov.f32	s11, s1
 800126e:	eeb0 6a41 	vmov.f32	s12, s2
 8001272:	eef0 6a61 	vmov.f32	s13, s3
 8001276:	eeb0 7a42 	vmov.f32	s14, s4
 800127a:	eef0 7a62 	vmov.f32	s15, s5
 800127e:	ed87 3a01 	vstr	s6, [r7, #4]
 8001282:	edc7 3a00 	vstr	s7, [r7]
 8001286:	ed87 5a05 	vstr	s10, [r7, #20]
 800128a:	edc7 5a06 	vstr	s11, [r7, #24]
 800128e:	ed87 6a07 	vstr	s12, [r7, #28]
 8001292:	edc7 6a02 	vstr	s13, [r7, #8]
 8001296:	ed87 7a03 	vstr	s14, [r7, #12]
 800129a:	edc7 7a04 	vstr	s15, [r7, #16]

	AHRS_Update_Gyro(gyro, dt);
 800129e:	edd7 6a05 	vldr	s13, [r7, #20]
 80012a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80012a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012aa:	edd7 1a00 	vldr	s3, [r7]
 80012ae:	eeb0 0a66 	vmov.f32	s0, s13
 80012b2:	eef0 0a47 	vmov.f32	s1, s14
 80012b6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ba:	f7ff fea5 	bl	8001008 <AHRS_Update_Gyro>
	AHRS_Update_Acc(acc);
 80012be:	edd7 6a02 	vldr	s13, [r7, #8]
 80012c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ca:	eeb0 0a66 	vmov.f32	s0, s13
 80012ce:	eef0 0a47 	vmov.f32	s1, s14
 80012d2:	eeb0 1a67 	vmov.f32	s2, s15
 80012d6:	f7ff ff67 	bl	80011a8 <AHRS_Update_Acc>

	attitude.x = gain*attitude_gyro.x + (1-gain)*attitude_acc.x;
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <AHRS_Update_Complementary_Filter+0x10c>)
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <AHRS_Update_Complementary_Filter+0x110>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <AHRS_Update_Complementary_Filter+0x114>)
 8001304:	edc3 7a00 	vstr	s15, [r3]
	attitude.y = gain*attitude_gyro.y + (1-gain)*attitude_acc.y;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <AHRS_Update_Complementary_Filter+0x10c>)
 800130a:	ed93 7a01 	vldr	s14, [r3, #4]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800131a:	edd7 7a01 	vldr	s15, [r7, #4]
 800131e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <AHRS_Update_Complementary_Filter+0x110>)
 8001324:	edd3 7a01 	vldr	s15, [r3, #4]
 8001328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <AHRS_Update_Complementary_Filter+0x114>)
 8001332:	edc3 7a01 	vstr	s15, [r3, #4]
	attitude.z = gain*attitude_gyro.z + (1-gain)*attitude_acc.z;
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <AHRS_Update_Complementary_Filter+0x10c>)
 8001338:	ed93 7a02 	vldr	s14, [r3, #8]
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001348:	edd7 7a01 	vldr	s15, [r7, #4]
 800134c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <AHRS_Update_Complementary_Filter+0x110>)
 8001352:	edd3 7a02 	vldr	s15, [r3, #8]
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <AHRS_Update_Complementary_Filter+0x114>)
 8001360:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200002f0 	.word	0x200002f0
 8001370:	200002fc 	.word	0x200002fc
 8001374:	20000308 	.word	0x20000308

08001378 <Battery_Begin>:

#include "Battery.h"

Battery battery;

HAL_StatusTypeDef Battery_Begin(ADC_HandleTypeDef *hadc){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ADC_Start_DMA(hadc, &battery.battery_raw, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <Battery_Begin+0x2c>)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f002 fe0d 	bl	8003fa4 <HAL_ADC_Start_DMA>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <Battery_Begin+0x20>
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	e000      	b.n	800139a <Battery_Begin+0x22>

	return status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000314 	.word	0x20000314

080013a8 <Battery_Update>:

void Battery_Update(){
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	battery.vbat = 0.00886230468f * battery.battery_raw; // 3.3/4096*11
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <Battery_Update+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80013d4 <Battery_Update+0x2c>
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <Battery_Update+0x28>)
 80013c2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000314 	.word	0x20000314
 80013d4:	3c113333 	.word	0x3c113333

080013d8 <Stabilized_Mode>:

extern Vec3 attitude;
extern float functions[10];


void Stabilized_Mode(Sbus receiver, float dt){
 80013d8:	b084      	sub	sp, #16
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	f107 0c10 	add.w	ip, r7, #16
 80013e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80013e8:	ed87 0a01 	vstr	s0, [r7, #4]
	ref.x = (receiver.channels[ROLL_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_ROLL;
 80013ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013f0:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80014e8 <Stabilized_Mode+0x110>
 80013f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80014ec <Stabilized_Mode+0x114>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	ee17 0a90 	vmov	r0, s15
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	a335      	add	r3, pc, #212	@ (adr r3, 80014e0 <Stabilized_Mode+0x108>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f91b 	bl	8000648 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fc0d 	bl	8000c38 <__aeabi_d2f>
 800141e:	4603      	mov	r3, r0
 8001420:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <Stabilized_Mode+0x118>)
 8001422:	6013      	str	r3, [r2, #0]
	ref.y = (receiver.channels[PITCH_CHANNEL]-1500) * 0.002f * STABILIZED_MAX_PITCH;
 8001424:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001428:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80014e8 <Stabilized_Mode+0x110>
 800142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001430:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80014ec <Stabilized_Mode+0x114>
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f8ac 	bl	8000598 <__aeabi_f2d>
 8001440:	a327      	add	r3, pc, #156	@ (adr r3, 80014e0 <Stabilized_Mode+0x108>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbf1 	bl	8000c38 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <Stabilized_Mode+0x118>)
 800145a:	6053      	str	r3, [r2, #4]

	PID_Update(ref, attitude, dt);
 800145c:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <Stabilized_Mode+0x11c>)
 800145e:	ed93 5a00 	vldr	s10, [r3]
 8001462:	edd3 5a01 	vldr	s11, [r3, #4]
 8001466:	ed93 6a02 	vldr	s12, [r3, #8]
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <Stabilized_Mode+0x118>)
 800146c:	edd3 6a00 	vldr	s13, [r3]
 8001470:	ed93 7a01 	vldr	s14, [r3, #4]
 8001474:	edd3 7a02 	vldr	s15, [r3, #8]
 8001478:	ed97 3a01 	vldr	s6, [r7, #4]
 800147c:	eef0 1a45 	vmov.f32	s3, s10
 8001480:	eeb0 2a65 	vmov.f32	s4, s11
 8001484:	eef0 2a46 	vmov.f32	s5, s12
 8001488:	eeb0 0a66 	vmov.f32	s0, s13
 800148c:	eef0 0a47 	vmov.f32	s1, s14
 8001490:	eeb0 1a67 	vmov.f32	s2, s15
 8001494:	f000 fed8 	bl	8002248 <PID_Update>

	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001498:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800149c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80014e8 <Stabilized_Mode+0x110>
 80014a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014a4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80014f8 <Stabilized_Mode+0x120>
 80014a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <Stabilized_Mode+0x124>)
 80014ae:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 80014b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80014e8 <Stabilized_Mode+0x110>
 80014ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014be:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014f8 <Stabilized_Mode+0x120>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <Stabilized_Mode+0x124>)
 80014c8:	edc3 7a03 	vstr	s15, [r3, #12]

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d6:	b004      	add	sp, #16
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	54442d18 	.word	0x54442d18
 80014e4:	3fe921fb 	.word	0x3fe921fb
 80014e8:	44bb8000 	.word	0x44bb8000
 80014ec:	3b03126f 	.word	0x3b03126f
 80014f0:	2000031c 	.word	0x2000031c
 80014f4:	20000308 	.word	0x20000308
 80014f8:	43fa0000 	.word	0x43fa0000
 80014fc:	2000034c 	.word	0x2000034c

08001500 <Acro_Mode>:

void Acro_Mode(Sbus receiver, float dt){
 8001500:	b084      	sub	sp, #16
 8001502:	b5b0      	push	{r4, r5, r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	f107 0418 	add.w	r4, r7, #24
 800150c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001510:	ed87 0a01 	vstr	s0, [r7, #4]
	ref.x += (receiver.channels[ROLL_CHANNEL]-1500) * 0.0031415 * ACRO_ROLL_RATE;
 8001514:	4b78      	ldr	r3, [pc, #480]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f83d 	bl	8000598 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001526:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80016fc <Acro_Mode+0x1fc>
 800152a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800152e:	ee17 0a90 	vmov	r0, s15
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	a368      	add	r3, pc, #416	@ (adr r3, 80016d8 <Acro_Mode+0x1d8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f884 	bl	8000648 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	a365      	add	r3, pc, #404	@ (adr r3, 80016e0 <Acro_Mode+0x1e0>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f87b 	bl	8000648 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe febf 	bl	80002dc <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb67 	bl	8000c38 <__aeabi_d2f>
 800156a:	4603      	mov	r3, r0
 800156c:	4a62      	ldr	r2, [pc, #392]	@ (80016f8 <Acro_Mode+0x1f8>)
 800156e:	6013      	str	r3, [r2, #0]
	ref.y += (receiver.channels[PITCH_CHANNEL]-1500) * 0.0031415 * ACRO_PITCH_RATE;
 8001570:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f80f 	bl	8000598 <__aeabi_f2d>
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001582:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80016fc <Acro_Mode+0x1fc>
 8001586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800158a:	ee17 0a90 	vmov	r0, s15
 800158e:	f7ff f803 	bl	8000598 <__aeabi_f2d>
 8001592:	a351      	add	r3, pc, #324	@ (adr r3, 80016d8 <Acro_Mode+0x1d8>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f856 	bl	8000648 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	a34e      	add	r3, pc, #312	@ (adr r3, 80016e0 <Acro_Mode+0x1e0>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f84d 	bl	8000648 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe fe91 	bl	80002dc <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fb39 	bl	8000c38 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a4b      	ldr	r2, [pc, #300]	@ (80016f8 <Acro_Mode+0x1f8>)
 80015ca:	6053      	str	r3, [r2, #4]

	if(ref.x > M_PI || ref.x <= -M_PI) ref.x = -ref.x;
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <Acro_Mode+0x1f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffe1 	bl	8000598 <__aeabi_f2d>
 80015d6:	a344      	add	r3, pc, #272	@ (adr r3, 80016e8 <Acro_Mode+0x1e8>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff fac4 	bl	8000b68 <__aeabi_dcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <Acro_Mode+0x100>
 80015e6:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <Acro_Mode+0x1f8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffd4 	bl	8000598 <__aeabi_f2d>
 80015f0:	a33f      	add	r3, pc, #252	@ (adr r3, 80016f0 <Acro_Mode+0x1f0>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff faa3 	bl	8000b40 <__aeabi_dcmple>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <Acro_Mode+0x110>
 8001600:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eef1 7a67 	vneg.f32	s15, s15
 800160a:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <Acro_Mode+0x1f8>)
 800160c:	edc3 7a00 	vstr	s15, [r3]
	if(ref.y > M_PI || ref.y <= -M_PI) ref.y = -ref.y;
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffbf 	bl	8000598 <__aeabi_f2d>
 800161a:	a333      	add	r3, pc, #204	@ (adr r3, 80016e8 <Acro_Mode+0x1e8>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff faa2 	bl	8000b68 <__aeabi_dcmpgt>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <Acro_Mode+0x144>
 800162a:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <Acro_Mode+0x1f8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffb2 	bl	8000598 <__aeabi_f2d>
 8001634:	a32e      	add	r3, pc, #184	@ (adr r3, 80016f0 <Acro_Mode+0x1f0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff fa81 	bl	8000b40 <__aeabi_dcmple>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <Acro_Mode+0x154>
 8001644:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001646:	edd3 7a01 	vldr	s15, [r3, #4]
 800164a:	eef1 7a67 	vneg.f32	s15, s15
 800164e:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001650:	edc3 7a01 	vstr	s15, [r3, #4]

	PID_Update(ref, attitude, dt);
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <Acro_Mode+0x200>)
 8001656:	ed93 5a00 	vldr	s10, [r3]
 800165a:	edd3 5a01 	vldr	s11, [r3, #4]
 800165e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <Acro_Mode+0x1f8>)
 8001664:	edd3 6a00 	vldr	s13, [r3]
 8001668:	ed93 7a01 	vldr	s14, [r3, #4]
 800166c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001670:	ed97 3a01 	vldr	s6, [r7, #4]
 8001674:	eef0 1a45 	vmov.f32	s3, s10
 8001678:	eeb0 2a65 	vmov.f32	s4, s11
 800167c:	eef0 2a46 	vmov.f32	s5, s12
 8001680:	eeb0 0a66 	vmov.f32	s0, s13
 8001684:	eef0 0a47 	vmov.f32	s1, s14
 8001688:	eeb0 1a67 	vmov.f32	s2, s15
 800168c:	f000 fddc 	bl	8002248 <PID_Update>

	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001690:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001694:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80016fc <Acro_Mode+0x1fc>
 8001698:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800169c:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001704 <Acro_Mode+0x204>
 80016a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <Acro_Mode+0x208>)
 80016a6:	edc3 7a04 	vstr	s15, [r3, #16]
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 80016aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016ae:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016fc <Acro_Mode+0x1fc>
 80016b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016b6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001704 <Acro_Mode+0x204>
 80016ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <Acro_Mode+0x208>)
 80016c0:	edc3 7a03 	vstr	s15, [r3, #12]

}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ce:	b004      	add	sp, #16
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	f85510d4 	.word	0xf85510d4
 80016dc:	3f69bc33 	.word	0x3f69bc33
 80016e0:	47ae147b 	.word	0x47ae147b
 80016e4:	3f947ae1 	.word	0x3f947ae1
 80016e8:	54442d18 	.word	0x54442d18
 80016ec:	400921fb 	.word	0x400921fb
 80016f0:	54442d18 	.word	0x54442d18
 80016f4:	c00921fb 	.word	0xc00921fb
 80016f8:	2000031c 	.word	0x2000031c
 80016fc:	44bb8000 	.word	0x44bb8000
 8001700:	20000308 	.word	0x20000308
 8001704:	43fa0000 	.word	0x43fa0000
 8001708:	2000034c 	.word	0x2000034c

0800170c <Manual_Mode>:

void Manual_Mode(Sbus receiver){
 800170c:	b084      	sub	sp, #16
 800170e:	b490      	push	{r4, r7}
 8001710:	af00      	add	r7, sp, #0
 8001712:	f107 0408 	add.w	r4, r7, #8
 8001716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	functions[THROTTLE] = (receiver.channels[THROTTLE_CHANNEL]-1500.0f)/500.0f;
 800171a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800171e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800178c <Manual_Mode+0x80>
 8001722:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001726:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001790 <Manual_Mode+0x84>
 800172a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <Manual_Mode+0x88>)
 8001730:	edc3 7a03 	vstr	s15, [r3, #12]
	functions[AILERONS] = (receiver.channels[ROLL_CHANNEL]-1500.0f)/500.0f;
 8001734:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001738:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800178c <Manual_Mode+0x80>
 800173c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001740:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001790 <Manual_Mode+0x84>
 8001744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <Manual_Mode+0x88>)
 800174a:	edc3 7a01 	vstr	s15, [r3, #4]
	functions[ELEVATOR] = (receiver.channels[PITCH_CHANNEL]-1500.0f)/500.0f;
 800174e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001752:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800178c <Manual_Mode+0x80>
 8001756:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800175a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001790 <Manual_Mode+0x84>
 800175e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <Manual_Mode+0x88>)
 8001764:	edc3 7a02 	vstr	s15, [r3, #8]
	functions[RUDDER] = (receiver.channels[YAW_CHANNEL]-1500.0f)/500.0f;
 8001768:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800176c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800178c <Manual_Mode+0x80>
 8001770:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001774:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001790 <Manual_Mode+0x84>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <Manual_Mode+0x88>)
 800177e:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc90      	pop	{r4, r7}
 8001788:	b004      	add	sp, #16
 800178a:	4770      	bx	lr
 800178c:	44bb8000 	.word	0x44bb8000
 8001790:	43fa0000 	.word	0x43fa0000
 8001794:	2000034c 	.word	0x2000034c

08001798 <Process_Input>:

void Process_Input(Sbus receiver){
 8001798:	b084      	sub	sp, #16
 800179a:	b490      	push	{r4, r7}
 800179c:	af00      	add	r7, sp, #0
 800179e:	f107 0408 	add.w	r4, r7, #8
 80017a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Configure MODES
	if(receiver.channels[FLIGHT_MODE_CHANNEL] < 1200){
 80017a6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80017aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001874 <Process_Input+0xdc>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d503      	bpl.n	80017c0 <Process_Input+0x28>
		flight_mode = MANUAL_MODE;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <Process_Input+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e018      	b.n	80017f2 <Process_Input+0x5a>
	}
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80017c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80017c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001874 <Process_Input+0xdc>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	db0c      	blt.n	80017ec <Process_Input+0x54>
			receiver.channels[FLIGHT_MODE_CHANNEL] < 1800){
 80017d2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
	else if (receiver.channels[FLIGHT_MODE_CHANNEL] >= 1200 &&
 80017d6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800187c <Process_Input+0xe4>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d503      	bpl.n	80017ec <Process_Input+0x54>
		flight_mode = STABILIZED_MODE;
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <Process_Input+0xe0>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e002      	b.n	80017f2 <Process_Input+0x5a>
	}
	else{
		flight_mode = ACRO_MODE;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <Process_Input+0xe0>)
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]



	//Set Arming

	if(arming == DISARMED &&
 80017f2:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <Process_Input+0xe8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <Process_Input+0x94>
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 80017fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
	if(arming == DISARMED &&
 80017fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001884 <Process_Input+0xec>
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	dd0f      	ble.n	800182c <Process_Input+0x94>
		arming_edge_detect == 1 &&
 800180c:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <Process_Input+0xf0>)
 800180e:	781b      	ldrb	r3, [r3, #0]
		receiver.channels[ARMING_CHANNEL] > 1500 &&
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10b      	bne.n	800182c <Process_Input+0x94>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001814:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
		arming_edge_detect == 1 &&
 8001818:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800188c <Process_Input+0xf4>
 800181c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d502      	bpl.n	800182c <Process_Input+0x94>
		receiver.channels[THROTTLE_CHANNEL] < 1050 ) arming = ARMED;
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <Process_Input+0xe8>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
	if(arming == ARMED && receiver.channels[ARMING_CHANNEL] <= 1500) arming = DISARMED;
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <Process_Input+0xe8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10b      	bne.n	800184c <Process_Input+0xb4>
 8001834:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001838:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001884 <Process_Input+0xec>
 800183c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d802      	bhi.n	800184c <Process_Input+0xb4>
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <Process_Input+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]


	arming_edge_detect = (receiver.channels[ARMING_CHANNEL] <= 1500)? 1:0;
 800184c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001850:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001884 <Process_Input+0xec>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	bf94      	ite	ls
 800185e:	2301      	movls	r3, #1
 8001860:	2300      	movhi	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <Process_Input+0xf0>)
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc90      	pop	{r4, r7}
 8001870:	b004      	add	sp, #16
 8001872:	4770      	bx	lr
 8001874:	44960000 	.word	0x44960000
 8001878:	20000328 	.word	0x20000328
 800187c:	44e10000 	.word	0x44e10000
 8001880:	20000329 	.word	0x20000329
 8001884:	44bb8000 	.word	0x44bb8000
 8001888:	2000032a 	.word	0x2000032a
 800188c:	44834000 	.word	0x44834000

08001890 <ICM42688_Begin>:


#include "ICM42688P.h"
#include "main.h"

HAL_StatusTypeDef ICM42688_Begin(ICM42688 *device, SPI_HandleTypeDef *spiHandle){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	device->spiHandle = spiHandle;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	601a      	str	r2, [r3, #0]

	device->accel.x = 0.0f;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
	device->accel.y = 0.0f;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
	device->accel.z = 0.0f;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]

	device->gyro.x = 0.0f;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
	device->gyro.y = 0.0f;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
	device->gyro.z = 0.0f;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]

	device->ready = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	device->dataRdy = 0;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	HAL_Delay(10);
 80018e0:	200a      	movs	r0, #10
 80018e2:	f002 faf7 	bl	8003ed4 <HAL_Delay>
	HAL_StatusTypeDef status;
	uint8_t data;

	status = ICM42688_Read(device, WHO_AM_I, &data);
 80018e6:	f107 030e 	add.w	r3, r7, #14
 80018ea:	461a      	mov	r2, r3
 80018ec:	2175      	movs	r1, #117	@ 0x75
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa28 	bl	8001d44 <ICM42688_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <ICM42688_Begin+0x72>
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	e05d      	b.n	80019be <ICM42688_Begin+0x12e>
	if(data != 0x47) return HAL_ERROR;
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b47      	cmp	r3, #71	@ 0x47
 8001906:	d001      	beq.n	800190c <ICM42688_Begin+0x7c>
 8001908:	2301      	movs	r3, #1
 800190a:	e058      	b.n	80019be <ICM42688_Begin+0x12e>

	data = (GYRO_FS_SEL_1000_DPS << 5) | GYRO_ODR_1_KHZ;
 800190c:	2326      	movs	r3, #38	@ 0x26
 800190e:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_CONFIG0, &data);
 8001910:	f107 030e 	add.w	r3, r7, #14
 8001914:	461a      	mov	r2, r3
 8001916:	214f      	movs	r1, #79	@ 0x4f
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f9eb 	bl	8001cf4 <ICM42688_Write>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <ICM42688_Begin+0x9c>
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	e048      	b.n	80019be <ICM42688_Begin+0x12e>
	device->gyro_fs = GYRO_FS_SEL_1000_DPS;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2020 	strb.w	r2, [r3, #32]
	device->gyro_odr = GYRO_ODR_1_KHZ;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2206      	movs	r2, #6
 8001938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	data = (ACCEL_FS_SEL_4_G << 5) | ACCEL_ODR_1_KHZ;
 800193c:	2346      	movs	r3, #70	@ 0x46
 800193e:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG0, &data);
 8001940:	f107 030e 	add.w	r3, r7, #14
 8001944:	461a      	mov	r2, r3
 8001946:	2150      	movs	r1, #80	@ 0x50
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f9d3 	bl	8001cf4 <ICM42688_Write>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <ICM42688_Begin+0xcc>
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	e030      	b.n	80019be <ICM42688_Begin+0x12e>
	device->accel_fs = ACCEL_FS_SEL_4_G;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	device->accel_odr = ACCEL_ODR_1_KHZ;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2206      	movs	r2, #6
 8001968:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	status = ICM42688_Set_Interrupts(device);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f863 	bl	8001a38 <ICM42688_Set_Interrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <ICM42688_Begin+0xf0>
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	e01e      	b.n	80019be <ICM42688_Begin+0x12e>

	status = ICM42688_Set_Filters(device);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f820 	bl	80019c6 <ICM42688_Set_Filters>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <ICM42688_Begin+0x104>
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	e014      	b.n	80019be <ICM42688_Begin+0x12e>

	data = 0x0F; //0b00001111 Gyro & Acc in Low Noise Mode
 8001994:	230f      	movs	r3, #15
 8001996:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, PWR_MGMT0, &data);
 8001998:	f107 030e 	add.w	r3, r7, #14
 800199c:	461a      	mov	r2, r3
 800199e:	214e      	movs	r1, #78	@ 0x4e
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f9a7 	bl	8001cf4 <ICM42688_Write>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <ICM42688_Begin+0x124>
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	e004      	b.n	80019be <ICM42688_Begin+0x12e>
	//if(status != HAL_OK) return status;

	//status = ICM42688_Calibrate_Accel(device);
	//if(status != HAL_OK) return status;

	device->ready = 1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <ICM42688_Set_Filters>:
	device->accel_odr = rate;

	return status;
}

HAL_StatusTypeDef ICM42688_Set_Filters(ICM42688 *device){
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	//Antialiasing and Notch Filters enabled by default

	uint8_t data = (UI_FILT_ORD_1_ORD << 2); //Temperature filter: 4000Hz (Default), 1st order Gyro Low Pass Filter
 80019ce:	2300      	movs	r3, #0
 80019d0:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, GYRO_CONFIG1, &data);
 80019d2:	f107 030e 	add.w	r3, r7, #14
 80019d6:	461a      	mov	r2, r3
 80019d8:	2151      	movs	r1, #81	@ 0x51
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f98a 	bl	8001cf4 <ICM42688_Write>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <ICM42688_Set_Filters+0x28>
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	e020      	b.n	8001a30 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_ORD_1_ORD << 3); //Accelerometer Low Pass Filter 1st order
 80019ee:	2300      	movs	r3, #0
 80019f0:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, ACCEL_CONFIG1, &data);
 80019f2:	f107 030e 	add.w	r3, r7, #14
 80019f6:	461a      	mov	r2, r3
 80019f8:	2153      	movs	r1, #83	@ 0x53
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f97a 	bl	8001cf4 <ICM42688_Write>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <ICM42688_Set_Filters+0x48>
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	e010      	b.n	8001a30 <ICM42688_Set_Filters+0x6a>

	data = (UI_FILT_BW_125_HZ << 4) | UI_FILT_BW_125_HZ; //Accelerometer BW (Left) & Gyro BW (Right)
 8001a0e:	2333      	movs	r3, #51	@ 0x33
 8001a10:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, GYRO_ACCEL_CONFIG0, &data);
 8001a12:	f107 030e 	add.w	r3, r7, #14
 8001a16:	461a      	mov	r2, r3
 8001a18:	2152      	movs	r1, #82	@ 0x52
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f96a 	bl	8001cf4 <ICM42688_Write>
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <ICM42688_Set_Filters+0x68>
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	e000      	b.n	8001a30 <ICM42688_Set_Filters+0x6a>

	return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <ICM42688_Set_Interrupts>:

HAL_StatusTypeDef ICM42688_Set_Interrupts(ICM42688 *device){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x03; //0b00000011 INT1: Active High, Push pull, Pulsed mode
 8001a40:	2303      	movs	r3, #3
 8001a42:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = ICM42688_Write(device, INT_CONFIG, &data);
 8001a44:	f107 030e 	add.w	r3, r7, #14
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2114      	movs	r1, #20
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f951 	bl	8001cf4 <ICM42688_Write>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <ICM42688_Set_Interrupts+0x28>
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e031      	b.n	8001ac4 <ICM42688_Set_Interrupts+0x8c>

	// need to clear bit 4 to allow proper INT1 and INT2 operation
	status = ICM42688_Read(device, INT_CONFIG1, &data);
 8001a60:	f107 030e 	add.w	r3, r7, #14
 8001a64:	461a      	mov	r2, r3
 8001a66:	2164      	movs	r1, #100	@ 0x64
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f96b 	bl	8001d44 <ICM42688_Read>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <ICM42688_Set_Interrupts+0x44>
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e023      	b.n	8001ac4 <ICM42688_Set_Interrupts+0x8c>
	data &= ~0x10;
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	f023 0310 	bic.w	r3, r3, #16
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_CONFIG1, &data);
 8001a86:	f107 030e 	add.w	r3, r7, #14
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2164      	movs	r1, #100	@ 0x64
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f930 	bl	8001cf4 <ICM42688_Write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <ICM42688_Set_Interrupts+0x6a>
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	e010      	b.n	8001ac4 <ICM42688_Set_Interrupts+0x8c>

	// route UI data ready interrupt to INT1
	data = 0x08; //0b00001000: UI data ready interrupt routed to INT1
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	73bb      	strb	r3, [r7, #14]
	status = ICM42688_Write(device, INT_SOURCE0, &data);
 8001aa6:	f107 030e 	add.w	r3, r7, #14
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2165      	movs	r1, #101	@ 0x65
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f920 	bl	8001cf4 <ICM42688_Write>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <ICM42688_Set_Interrupts+0x8a>
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	e000      	b.n	8001ac4 <ICM42688_Set_Interrupts+0x8c>

	return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0000      	movs	r0, r0
	...

08001ad0 <ICM42688_Process_Buffer>:
	device->temp = (float) tempRaw / 132.48f + 25.0f;

	return status;
}

void ICM42688_Process_Buffer(ICM42688 *device){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

	uint16_t tempRaw = (int16_t)((device->buffer[1] << 8) | device->buffer[2]);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	82fb      	strh	r3, [r7, #22]
	int16_t acc[3];
	int16_t gyro[3];

	device->temp = (float) tempRaw / 132.48f + 25.0f;
 8001af2:	8afb      	ldrh	r3, [r7, #22]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001afc:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001ce8 <ICM42688_Process_Buffer+0x218>
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edc3 7a07 	vstr	s15, [r3, #28]

	acc[0] = (int16_t)((device->buffer[3] << 8) | device->buffer[4]);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	823b      	strh	r3, [r7, #16]
	acc[1] = (int16_t)((device->buffer[5] << 8) | device->buffer[6]);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	827b      	strh	r3, [r7, #18]
	acc[2] = (int16_t)((device->buffer[7] << 8) | device->buffer[8]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	82bb      	strh	r3, [r7, #20]

	device->accel.x = (float) acc[1] / 8192.0f; //ACCEL_FS_SEL_4_G
 8001b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001cec <ICM42688_Process_Buffer+0x21c>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	edc3 7a01 	vstr	s15, [r3, #4]
	device->accel.y = -(float) acc[0] / 8192.0f; //Axis remapping
 8001b7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	eeb1 7a67 	vneg.f32	s14, s15
 8001b8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001cec <ICM42688_Process_Buffer+0x21c>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edc3 7a02 	vstr	s15, [r3, #8]
	device->accel.z = (float) acc[2] / 8192.0f;
 8001b98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba4:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001cec <ICM42688_Process_Buffer+0x21c>
 8001ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edc3 7a03 	vstr	s15, [r3, #12]

	gyro[0] = (int16_t)((device->buffer[9] << 8) | device->buffer[10]);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	813b      	strh	r3, [r7, #8]
	gyro[1] = (int16_t)((device->buffer[11] << 8) | device->buffer[12]);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	817b      	strh	r3, [r7, #10]
	gyro[2] = (int16_t)((device->buffer[13] << 8) | device->buffer[14]);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	81bb      	strh	r3, [r7, #12]

	device->gyro.x = (float) gyro[1] / 32.8f; //GYRO_FS_SEL_1000_DPS
 8001c00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001cf0 <ICM42688_Process_Buffer+0x220>
 8001c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	edc3 7a04 	vstr	s15, [r3, #16]
	device->gyro.y = -(float) gyro[0] / 32.8f; //Axis remapping
 8001c1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	eeb1 7a67 	vneg.f32	s14, s15
 8001c2a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001cf0 <ICM42688_Process_Buffer+0x220>
 8001c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a05 	vstr	s15, [r3, #20]
	device->gyro.z = (float) gyro[2] / 32.8f;
 8001c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c44:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001cf0 <ICM42688_Process_Buffer+0x220>
 8001c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edc3 7a06 	vstr	s15, [r3, #24]

	device->gyro.x -= -0.0396341197; //Calibration
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc9e 	bl	8000598 <__aeabi_f2d>
 8001c5c:	a31c      	add	r3, pc, #112	@ (adr r3, 8001cd0 <ICM42688_Process_Buffer+0x200>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fb3b 	bl	80002dc <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffe3 	bl	8000c38 <__aeabi_d2f>
 8001c72:	4602      	mov	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	611a      	str	r2, [r3, #16]
	device->gyro.y -= -3.08658361;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc8b 	bl	8000598 <__aeabi_f2d>
 8001c82:	a315      	add	r3, pc, #84	@ (adr r3, 8001cd8 <ICM42688_Process_Buffer+0x208>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fb28 	bl	80002dc <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ffd0 	bl	8000c38 <__aeabi_d2f>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	615a      	str	r2, [r3, #20]
	device->gyro.z -= 0.494207352;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc78 	bl	8000598 <__aeabi_f2d>
 8001ca8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001ce0 <ICM42688_Process_Buffer+0x210>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fb13 	bl	80002d8 <__aeabi_dsub>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ffbd 	bl	8000c38 <__aeabi_d2f>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]

	//device->gyro.x *= DEG_TO_RAD;
	//device->gyro.y *= DEG_TO_RAD;
	//device->gyro.z *= DEG_TO_RAD;

}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	5fd5a1b4 	.word	0x5fd5a1b4
 8001cd4:	3fa44aec 	.word	0x3fa44aec
 8001cd8:	bf6a8e94 	.word	0xbf6a8e94
 8001cdc:	4008b152 	.word	0x4008b152
 8001ce0:	df9218be 	.word	0xdf9218be
 8001ce4:	3fdfa117 	.word	0x3fdfa117
 8001ce8:	43047ae1 	.word	0x43047ae1
 8001cec:	46000000 	.word	0x46000000
 8001cf0:	42033333 	.word	0x42033333

08001cf4 <ICM42688_Write>:
}


//===============================    LOW LEVEL FUNCTIONS ===================================

HAL_StatusTypeDef ICM42688_Write(ICM42688 *device, uint8_t address, uint8_t *data){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]

	uint8_t tx_Buff[2] = {address, *data};
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	753b      	strb	r3, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2110      	movs	r1, #16
 8001d10:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <ICM42688_Write+0x4c>)
 8001d12:	f003 fc75 	bl	8005600 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, tx_Buff, 2, HAL_MAX_DELAY);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f107 0114 	add.w	r1, r7, #20
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	2202      	movs	r2, #2
 8001d24:	f006 f985 	bl	8008032 <HAL_SPI_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2110      	movs	r1, #16
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <ICM42688_Write+0x4c>)
 8001d32:	f003 fc65 	bl	8005600 <HAL_GPIO_WritePin>

	return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40020000 	.word	0x40020000

08001d44 <ICM42688_Read>:

	return status;
}


HAL_StatusTypeDef ICM42688_Read(ICM42688 *device, uint8_t address, uint8_t *data){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuff = (address | 0x80);
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	75bb      	strb	r3, [r7, #22]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4815      	ldr	r0, [pc, #84]	@ (8001db8 <ICM42688_Read+0x74>)
 8001d62:	f003 fc4d 	bl	8005600 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(device->spiHandle, &txBuff, 1, HAL_MAX_DELAY);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f107 0116 	add.w	r1, r7, #22
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	2201      	movs	r2, #1
 8001d74:	f006 f95d 	bl	8008032 <HAL_SPI_Transmit>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <ICM42688_Read+0x42>
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	e014      	b.n	8001db0 <ICM42688_Read+0x6c>

	status = HAL_SPI_Receive(device->spiHandle, data, 1, HAL_MAX_DELAY);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	2201      	movs	r2, #1
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	f006 fac4 	bl	800831e <HAL_SPI_Receive>
 8001d96:	4603      	mov	r3, r0
 8001d98:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <ICM42688_Read+0x60>
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	e005      	b.n	8001db0 <ICM42688_Read+0x6c>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2110      	movs	r1, #16
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <ICM42688_Read+0x74>)
 8001daa:	f003 fc29 	bl	8005600 <HAL_GPIO_WritePin>

	return status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020000 	.word	0x40020000

08001dbc <ICM42688_Read_DMA>:

	return status;

}

HAL_StatusTypeDef ICM42688_Read_DMA(ICM42688 *device){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

	uint8_t txBuff[15];
	txBuff[0] = (TEMP_DATA1 | 0x80);
 8001dc4:	239d      	movs	r3, #157	@ 0x9d
 8001dc6:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2110      	movs	r1, #16
 8001dcc:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <ICM42688_Read_DMA+0x44>)
 8001dce:	f003 fc17 	bl	8005600 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive_DMA(device->spiHandle, txBuff, device->buffer, 15);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001ddc:	f107 0108 	add.w	r1, r7, #8
 8001de0:	230f      	movs	r3, #15
 8001de2:	f006 fdf3 	bl	80089cc <HAL_SPI_TransmitReceive_DMA>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK) return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <ICM42688_Read_DMA+0x38>
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	e000      	b.n	8001df6 <ICM42688_Read_DMA+0x3a>

	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);

	return status;
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020000 	.word	0x40020000

08001e04 <Output_Begin>:

float outputs[8];
float functions[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
extern Arming arming;

HAL_StatusTypeDef Output_Begin(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f007 fc35 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <Output_Begin+0x20>
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	e04d      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8001e24:	2104      	movs	r1, #4
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f007 fc2a 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <Output_Begin+0x36>
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	e042      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_3);
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f007 fc1f 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <Output_Begin+0x4c>
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	e037      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_4);
 8001e50:	210c      	movs	r1, #12
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f007 fc14 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <Output_Begin+0x62>
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	e02c      	b.n	8001ec0 <Output_Begin+0xbc>

	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8001e66:	2100      	movs	r1, #0
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f007 fc09 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <Output_Begin+0x78>
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	e021      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f007 fbfe 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <Output_Begin+0x8e>
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	e016      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 8001e92:	2108      	movs	r1, #8
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f007 fbf3 	bl	8009680 <HAL_TIM_PWM_Start>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <Output_Begin+0xa4>
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	e00b      	b.n	8001ec0 <Output_Begin+0xbc>
	status = HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 8001ea8:	210c      	movs	r1, #12
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f007 fbe8 	bl	8009680 <HAL_TIM_PWM_Start>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <Output_Begin+0xba>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	e000      	b.n	8001ec0 <Output_Begin+0xbc>

	return status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <Servo_Move>:

void Servo_Move(TIM_HandleTypeDef *timerHandle, int channel, float pulse_width_us){
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = pulse_width_us * 1.8f;
 8001ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eda:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f50 <Servo_Move+0x88>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <Servo_Move+0x34>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	8afa      	ldrh	r2, [r7, #22]
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001efa:	e023      	b.n	8001f44 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d104      	bne.n	8001f0c <Servo_Move+0x44>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	8afb      	ldrh	r3, [r7, #22]
 8001f08:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f0a:	e01b      	b.n	8001f44 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d104      	bne.n	8001f1c <Servo_Move+0x54>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f1a:	e013      	b.n	8001f44 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d104      	bne.n	8001f2c <Servo_Move+0x64>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	8afb      	ldrh	r3, [r7, #22]
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f2a:	e00b      	b.n	8001f44 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d104      	bne.n	8001f3c <Servo_Move+0x74>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	8afb      	ldrh	r3, [r7, #22]
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001f3a:	e003      	b.n	8001f44 <Servo_Move+0x7c>
	__HAL_TIM_SET_COMPARE(timerHandle, channel, compare);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	8afb      	ldrh	r3, [r7, #22]
 8001f42:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001f44:	bf00      	nop
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	3fe66666 	.word	0x3fe66666
 8001f54:	00000000 	.word	0x00000000

08001f58 <Output_Update>:

void Output_Update(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]

	if(arming == DISARMED) functions[THROTTLE] = -1.0f;
 8001f62:	4bb3      	ldr	r3, [pc, #716]	@ (8002230 <Output_Update+0x2d8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <Output_Update+0x18>
 8001f6a:	4bb2      	ldr	r3, [pc, #712]	@ (8002234 <Output_Update+0x2dc>)
 8001f6c:	4ab2      	ldr	r2, [pc, #712]	@ (8002238 <Output_Update+0x2e0>)
 8001f6e:	60da      	str	r2, [r3, #12]

	outputs[0] = functions[OUT1_FUNCTION] * (OUT1_MAX - OUT1_MIN)*(-OUT1_REVERSE+0.5) + OUT1_TRIM;
 8001f70:	4bb0      	ldr	r3, [pc, #704]	@ (8002234 <Output_Update+0x2dc>)
 8001f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f76:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800223c <Output_Update+0x2e4>
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	ee17 0a90 	vmov	r0, s15
 8001f82:	f7fe fb09 	bl	8000598 <__aeabi_f2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4bad      	ldr	r3, [pc, #692]	@ (8002240 <Output_Update+0x2e8>)
 8001f8c:	f7fe fb5c 	bl	8000648 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe f99d 	bl	80002dc <__adddf3>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fe45 	bl	8000c38 <__aeabi_d2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4aa4      	ldr	r2, [pc, #656]	@ (8002244 <Output_Update+0x2ec>)
 8001fb2:	6013      	str	r3, [r2, #0]
	outputs[1] = functions[OUT2_FUNCTION] * (OUT2_MAX - OUT2_MIN)*(-OUT2_REVERSE+0.5) + OUT2_TRIM;
 8001fb4:	4b9f      	ldr	r3, [pc, #636]	@ (8002234 <Output_Update+0x2dc>)
 8001fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fba:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800223c <Output_Update+0x2e4>
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe fae7 	bl	8000598 <__aeabi_f2d>
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b9c      	ldr	r3, [pc, #624]	@ (8002240 <Output_Update+0x2e8>)
 8001fd0:	f7fe fb3a 	bl	8000648 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a392      	add	r3, pc, #584	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe f97b 	bl	80002dc <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fe23 	bl	8000c38 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a93      	ldr	r2, [pc, #588]	@ (8002244 <Output_Update+0x2ec>)
 8001ff6:	6053      	str	r3, [r2, #4]
	outputs[2] = functions[OUT3_FUNCTION] * (OUT3_MAX - OUT3_MIN)*(-OUT3_REVERSE+0.5) + OUT3_TRIM;
 8001ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8002234 <Output_Update+0x2dc>)
 8001ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ffe:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800223c <Output_Update+0x2e4>
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002006:	ee17 0a90 	vmov	r0, s15
 800200a:	f7fe fac5 	bl	8000598 <__aeabi_f2d>
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4b8b      	ldr	r3, [pc, #556]	@ (8002240 <Output_Update+0x2e8>)
 8002014:	f7fe fb18 	bl	8000648 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	a381      	add	r3, pc, #516	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fe01 	bl	8000c38 <__aeabi_d2f>
 8002036:	4603      	mov	r3, r0
 8002038:	4a82      	ldr	r2, [pc, #520]	@ (8002244 <Output_Update+0x2ec>)
 800203a:	6093      	str	r3, [r2, #8]
	outputs[3] = functions[OUT4_FUNCTION] * (OUT4_MAX - OUT4_MIN)*(-OUT4_REVERSE+0.5) + OUT4_TRIM;
 800203c:	4b7d      	ldr	r3, [pc, #500]	@ (8002234 <Output_Update+0x2dc>)
 800203e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002042:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800223c <Output_Update+0x2e4>
 8002046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204a:	ee17 0a90 	vmov	r0, s15
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b7a      	ldr	r3, [pc, #488]	@ (8002240 <Output_Update+0x2e8>)
 8002058:	f7fe faf6 	bl	8000648 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	a370      	add	r3, pc, #448	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe f937 	bl	80002dc <__adddf3>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fddf 	bl	8000c38 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a71      	ldr	r2, [pc, #452]	@ (8002244 <Output_Update+0x2ec>)
 800207e:	60d3      	str	r3, [r2, #12]
	outputs[4] = functions[OUT5_FUNCTION] * (OUT5_MAX - OUT5_MIN)*(-OUT5_REVERSE+0.5) + OUT5_TRIM;
 8002080:	4b6c      	ldr	r3, [pc, #432]	@ (8002234 <Output_Update+0x2dc>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800223c <Output_Update+0x2e4>
 800208a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208e:	ee17 0a90 	vmov	r0, s15
 8002092:	f7fe fa81 	bl	8000598 <__aeabi_f2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b69      	ldr	r3, [pc, #420]	@ (8002240 <Output_Update+0x2e8>)
 800209c:	f7fe fad4 	bl	8000648 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f915 	bl	80002dc <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fdbd 	bl	8000c38 <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a60      	ldr	r2, [pc, #384]	@ (8002244 <Output_Update+0x2ec>)
 80020c2:	6113      	str	r3, [r2, #16]
	outputs[5] = functions[OUT6_FUNCTION] * (OUT6_MAX - OUT6_MIN)*(-OUT6_REVERSE+0.5) + OUT6_TRIM;
 80020c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002234 <Output_Update+0x2dc>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800223c <Output_Update+0x2e4>
 80020ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d2:	ee17 0a90 	vmov	r0, s15
 80020d6:	f7fe fa5f 	bl	8000598 <__aeabi_f2d>
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b58      	ldr	r3, [pc, #352]	@ (8002240 <Output_Update+0x2e8>)
 80020e0:	f7fe fab2 	bl	8000648 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	a34e      	add	r3, pc, #312	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe f8f3 	bl	80002dc <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fd9b 	bl	8000c38 <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4a4f      	ldr	r2, [pc, #316]	@ (8002244 <Output_Update+0x2ec>)
 8002106:	6153      	str	r3, [r2, #20]
	outputs[6] = functions[OUT7_FUNCTION] * (OUT7_MAX - OUT7_MIN)*(-OUT7_REVERSE+0.5) + OUT7_TRIM;
 8002108:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <Output_Update+0x2dc>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800223c <Output_Update+0x2e4>
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	ee17 0a90 	vmov	r0, s15
 800211a:	f7fe fa3d 	bl	8000598 <__aeabi_f2d>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <Output_Update+0x2e8>)
 8002124:	f7fe fa90 	bl	8000648 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	a33d      	add	r3, pc, #244	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe f8d1 	bl	80002dc <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd79 	bl	8000c38 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	4a3e      	ldr	r2, [pc, #248]	@ (8002244 <Output_Update+0x2ec>)
 800214a:	6193      	str	r3, [r2, #24]
	outputs[7] = functions[OUT8_FUNCTION] * (OUT8_MAX - OUT8_MIN)*(-OUT8_REVERSE+0.5) + OUT8_TRIM;
 800214c:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <Output_Update+0x2dc>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800223c <Output_Update+0x2e4>
 8002156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215a:	ee17 0a90 	vmov	r0, s15
 800215e:	f7fe fa1b 	bl	8000598 <__aeabi_f2d>
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <Output_Update+0x2e8>)
 8002168:	f7fe fa6e 	bl	8000648 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	a32c      	add	r3, pc, #176	@ (adr r3, 8002228 <Output_Update+0x2d0>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe f8af 	bl	80002dc <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fd57 	bl	8000c38 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <Output_Update+0x2ec>)
 800218e:	61d3      	str	r3, [r2, #28]


	Servo_Move(htim2, TIM_CHANNEL_1, outputs[0]);
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <Output_Update+0x2ec>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	2100      	movs	r1, #0
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fe93 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_2, outputs[1]);
 80021a2:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <Output_Update+0x2ec>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ac:	2104      	movs	r1, #4
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fe8a 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_3, outputs[2]);
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <Output_Update+0x2ec>)
 80021b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ba:	eeb0 0a67 	vmov.f32	s0, s15
 80021be:	2108      	movs	r1, #8
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fe81 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim2, TIM_CHANNEL_4, outputs[3]);
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <Output_Update+0x2ec>)
 80021c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	210c      	movs	r1, #12
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fe78 	bl	8001ec8 <Servo_Move>

	Servo_Move(htim3, TIM_CHANNEL_1, outputs[4]);
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <Output_Update+0x2ec>)
 80021da:	edd3 7a04 	vldr	s15, [r3, #16]
 80021de:	eeb0 0a67 	vmov.f32	s0, s15
 80021e2:	2100      	movs	r1, #0
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f7ff fe6f 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_2, outputs[5]);
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <Output_Update+0x2ec>)
 80021ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	2104      	movs	r1, #4
 80021f6:	6838      	ldr	r0, [r7, #0]
 80021f8:	f7ff fe66 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_3, outputs[6]);
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <Output_Update+0x2ec>)
 80021fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	2108      	movs	r1, #8
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f7ff fe5d 	bl	8001ec8 <Servo_Move>
	Servo_Move(htim3, TIM_CHANNEL_4, outputs[7]);
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <Output_Update+0x2ec>)
 8002210:	edd3 7a07 	vldr	s15, [r3, #28]
 8002214:	eeb0 0a67 	vmov.f32	s0, s15
 8002218:	210c      	movs	r1, #12
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f7ff fe54 	bl	8001ec8 <Servo_Move>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	00000000 	.word	0x00000000
 800222c:	40977000 	.word	0x40977000
 8002230:	20000329 	.word	0x20000329
 8002234:	2000034c 	.word	0x2000034c
 8002238:	bf800000 	.word	0xbf800000
 800223c:	447a0000 	.word	0x447a0000
 8002240:	3fe00000 	.word	0x3fe00000
 8002244:	2000032c 	.word	0x2000032c

08002248 <PID_Update>:

extern float functions[10];

Vec3 ref_prev, error_prev, integral = {0.0f, 0.0f, 0.0f};

void PID_Update(Vec3 ref, Vec3 attitude, float dt){
 8002248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800224c:	b090      	sub	sp, #64	@ 0x40
 800224e:	af00      	add	r7, sp, #0
 8002250:	eeb0 5a40 	vmov.f32	s10, s0
 8002254:	eef0 5a60 	vmov.f32	s11, s1
 8002258:	eeb0 6a41 	vmov.f32	s12, s2
 800225c:	eef0 6a61 	vmov.f32	s13, s3
 8002260:	eeb0 7a42 	vmov.f32	s14, s4
 8002264:	eef0 7a62 	vmov.f32	s15, s5
 8002268:	ed87 3a01 	vstr	s6, [r7, #4]
 800226c:	ed87 5a05 	vstr	s10, [r7, #20]
 8002270:	edc7 5a06 	vstr	s11, [r7, #24]
 8002274:	ed87 6a07 	vstr	s12, [r7, #28]
 8002278:	edc7 6a02 	vstr	s13, [r7, #8]
 800227c:	ed87 7a03 	vstr	s14, [r7, #12]
 8002280:	edc7 7a04 	vstr	s15, [r7, #16]

	Vec3 error = {(ref.x - attitude.x), (ref.y - attitude.y), (ref.z - attitude.z)};
 8002284:	ed97 7a05 	vldr	s14, [r7, #20]
 8002288:	edd7 7a02 	vldr	s15, [r7, #8]
 800228c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002290:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8002294:	ed97 7a06 	vldr	s14, [r7, #24]
 8002298:	edd7 7a03 	vldr	s15, [r7, #12]
 800229c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 80022a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80022a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	integral.x += error.x * dt;
 80022b4:	4b98      	ldr	r3, [pc, #608]	@ (8002518 <PID_Update+0x2d0>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80022be:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	4b93      	ldr	r3, [pc, #588]	@ (8002518 <PID_Update+0x2d0>)
 80022cc:	edc3 7a00 	vstr	s15, [r3]
	integral.y += error.y * dt;
 80022d0:	4b91      	ldr	r3, [pc, #580]	@ (8002518 <PID_Update+0x2d0>)
 80022d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80022d6:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80022da:	edd7 7a01 	vldr	s15, [r7, #4]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002518 <PID_Update+0x2d0>)
 80022e8:	edc3 7a01 	vstr	s15, [r3, #4]
	integral.z += error.z * dt;
 80022ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002518 <PID_Update+0x2d0>)
 80022ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80022f2:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80022f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	4b85      	ldr	r3, [pc, #532]	@ (8002518 <PID_Update+0x2d0>)
 8002304:	edc3 7a02 	vstr	s15, [r3, #8]


	functions[AILERONS] = ROLL_KP*error.x + ROLL_KD*(error.x-error_prev.x)/dt + ROLL_KI*integral.x;
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f944 	bl	8000598 <__aeabi_f2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b81      	ldr	r3, [pc, #516]	@ (800251c <PID_Update+0x2d4>)
 8002316:	f7fe f997 	bl	8000648 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4614      	mov	r4, r2
 8002320:	461d      	mov	r5, r3
 8002322:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002326:	4b7e      	ldr	r3, [pc, #504]	@ (8002520 <PID_Update+0x2d8>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002330:	ee17 0a90 	vmov	r0, s15
 8002334:	f7fe f930 	bl	8000598 <__aeabi_f2d>
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	f7fe f982 	bl	8000648 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4690      	mov	r8, r2
 800234a:	4699      	mov	r9, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe f923 	bl	8000598 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4640      	mov	r0, r8
 8002358:	4649      	mov	r1, r9
 800235a:	f7fe fa9f 	bl	800089c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd ffb9 	bl	80002dc <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461d      	mov	r5, r3
 8002372:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <PID_Update+0x2d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f90e 	bl	8000598 <__aeabi_f2d>
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	f7fe f960 	bl	8000648 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4620      	mov	r0, r4
 800238e:	4629      	mov	r1, r5
 8002390:	f7fd ffa4 	bl	80002dc <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fc4c 	bl	8000c38 <__aeabi_d2f>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a60      	ldr	r2, [pc, #384]	@ (8002524 <PID_Update+0x2dc>)
 80023a4:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] = PITCH_KP*error.y + PITCH_KD*(error.y-error_prev.y)/dt + PITCH_KI*integral.y;
 80023a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8f5 	bl	8000598 <__aeabi_f2d>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b5a      	ldr	r3, [pc, #360]	@ (800251c <PID_Update+0x2d4>)
 80023b4:	f7fe f948 	bl	8000648 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80023c4:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <PID_Update+0x2d8>)
 80023c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f8e1 	bl	8000598 <__aeabi_f2d>
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	f7fe f933 	bl	8000648 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f8d4 	bl	8000598 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4640      	mov	r0, r8
 80023f6:	4649      	mov	r1, r9
 80023f8:	f7fe fa50 	bl	800089c <__aeabi_ddiv>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd ff6a 	bl	80002dc <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4614      	mov	r4, r2
 800240e:	461d      	mov	r5, r3
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <PID_Update+0x2d0>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f8bf 	bl	8000598 <__aeabi_f2d>
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	f7fe f911 	bl	8000648 <__aeabi_dmul>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	f7fd ff55 	bl	80002dc <__adddf3>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fbfd 	bl	8000c38 <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	4a38      	ldr	r2, [pc, #224]	@ (8002524 <PID_Update+0x2dc>)
 8002442:	6093      	str	r3, [r2, #8]

	functions[AILERONS] /= M_PI_2;
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <PID_Update+0x2dc>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f8a5 	bl	8000598 <__aeabi_f2d>
 800244e:	a330      	add	r3, pc, #192	@ (adr r3, 8002510 <PID_Update+0x2c8>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fe fa22 	bl	800089c <__aeabi_ddiv>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbea 	bl	8000c38 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	4a2f      	ldr	r2, [pc, #188]	@ (8002524 <PID_Update+0x2dc>)
 8002468:	6053      	str	r3, [r2, #4]
	functions[ELEVATOR] /= M_PI_2;
 800246a:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <PID_Update+0x2dc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f892 	bl	8000598 <__aeabi_f2d>
 8002474:	a326      	add	r3, pc, #152	@ (adr r3, 8002510 <PID_Update+0x2c8>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fe fa0f 	bl	800089c <__aeabi_ddiv>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f7fe fbd7 	bl	8000c38 <__aeabi_d2f>
 800248a:	4603      	mov	r3, r0
 800248c:	4a25      	ldr	r2, [pc, #148]	@ (8002524 <PID_Update+0x2dc>)
 800248e:	6093      	str	r3, [r2, #8]

	//Clamp to [-1,1] range
	for(int i = 0; i < 10; i++) {
 8002490:	2300      	movs	r3, #0
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002494:	e029      	b.n	80024ea <PID_Update+0x2a2>
		if(functions[i]<-1.0f) functions[i] = -1.0f;
 8002496:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <PID_Update+0x2dc>)
 8002498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80024a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d505      	bpl.n	80024bc <PID_Update+0x274>
 80024b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <PID_Update+0x2dc>)
 80024b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <PID_Update+0x2e0>)
 80024ba:	601a      	str	r2, [r3, #0]
		if(functions[i]>1.0f) functions[i] = 1.0f;
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <PID_Update+0x2dc>)
 80024be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	dd06      	ble.n	80024e4 <PID_Update+0x29c>
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <PID_Update+0x2dc>)
 80024d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80024e2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
 80024e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e6:	3301      	adds	r3, #1
 80024e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	ddd2      	ble.n	8002496 <PID_Update+0x24e>
	}

	error_prev = (Vec3) {.x = error.x, .y = error.y, .z = error.z};
 80024f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f6:	480a      	ldr	r0, [pc, #40]	@ (8002520 <PID_Update+0x2d8>)
 80024f8:	6001      	str	r1, [r0, #0]
 80024fa:	4909      	ldr	r1, [pc, #36]	@ (8002520 <PID_Update+0x2d8>)
 80024fc:	604a      	str	r2, [r1, #4]
 80024fe:	4a08      	ldr	r2, [pc, #32]	@ (8002520 <PID_Update+0x2d8>)
 8002500:	6093      	str	r3, [r2, #8]
}
 8002502:	bf00      	nop
 8002504:	3740      	adds	r7, #64	@ 0x40
 8002506:	46bd      	mov	sp, r7
 8002508:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800250c:	f3af 8000 	nop.w
 8002510:	54442d18 	.word	0x54442d18
 8002514:	3ff921fb 	.word	0x3ff921fb
 8002518:	20000380 	.word	0x20000380
 800251c:	3ff80000 	.word	0x3ff80000
 8002520:	20000374 	.word	0x20000374
 8002524:	2000034c 	.word	0x2000034c
 8002528:	bf800000 	.word	0xbf800000

0800252c <Sbus_Begin>:
 */


#include "Sbus.h"

HAL_StatusTypeDef Sbus_Begin(UART_HandleTypeDef *huart, Sbus *receiver){
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	HAL_UART_AbortReceive(huart); //Sbus is already sending before initialising, cancel reception to avoid HAL_ERROR
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f008 f81a 	bl	800a570 <HAL_UART_AbortReceive>

	status = HAL_UARTEx_ReceiveToIdle_DMA(huart, receiver->buffer, 25);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2219      	movs	r2, #25
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f009 fa2f 	bl	800b9a6 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <Sbus_Begin+0x2a>
		return status;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	e000      	b.n	8002558 <Sbus_Begin+0x2c>
	}

	return status;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <sbus_raw_to_us>:

int sbus_raw_to_us(uint16_t v) {
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	80fb      	strh	r3, [r7, #6]
	float us = ((v - 192) * 1000.0f / 1600.0f + 1000.0f);
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	3bc0      	subs	r3, #192	@ 0xc0
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80025d8 <sbus_raw_to_us+0x78>
 800257a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800257e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80025dc <sbus_raw_to_us+0x7c>
 8002582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002586:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80025d8 <sbus_raw_to_us+0x78>
 800258a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800258e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (us < 1000.0f) us = 1000.0f;
 8002592:	edd7 7a03 	vldr	s15, [r7, #12]
 8002596:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80025d8 <sbus_raw_to_us+0x78>
 800259a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d501      	bpl.n	80025a8 <sbus_raw_to_us+0x48>
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <sbus_raw_to_us+0x80>)
 80025a6:	60fb      	str	r3, [r7, #12]
	if (us > 2000.0f) us = 2000.0f;
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80025e4 <sbus_raw_to_us+0x84>
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	dd01      	ble.n	80025be <sbus_raw_to_us+0x5e>
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <sbus_raw_to_us+0x88>)
 80025bc:	60fb      	str	r3, [r7, #12]
	return us;
 80025be:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c6:	ee17 3a90 	vmov	r3, s15
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	447a0000 	.word	0x447a0000
 80025dc:	44c80000 	.word	0x44c80000
 80025e0:	447a0000 	.word	0x447a0000
 80025e4:	44fa0000 	.word	0x44fa0000
 80025e8:	44fa0000 	.word	0x44fa0000

080025ec <Sbus_decode>:

void Sbus_decode(Sbus *receiver){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	@ 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

	uint16_t raw_channels[18];

	raw_channels[0]  = ((receiver->buffer[1]    |receiver->buffer[2]<<8)                           & 0x07FF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	789b      	ldrb	r3, [r3, #2]
 80025fe:	b21b      	sxth	r3, r3
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21b      	sxth	r3, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260e:	b29b      	uxth	r3, r3
 8002610:	813b      	strh	r3, [r7, #8]
	raw_channels[1]  = ((receiver->buffer[2]>>3 |receiver->buffer[3]<<5)                           & 0x07FF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	789b      	ldrb	r3, [r3, #2]
 8002616:	08db      	lsrs	r3, r3, #3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	b21b      	sxth	r3, r3
 8002622:	015b      	lsls	r3, r3, #5
 8002624:	b21b      	sxth	r3, r3
 8002626:	4313      	orrs	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	b29b      	uxth	r3, r3
 800262c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002630:	b29b      	uxth	r3, r3
 8002632:	817b      	strh	r3, [r7, #10]
	raw_channels[2]  = ((receiver->buffer[3]>>6 |receiver->buffer[4]<<2 |receiver->buffer[5]<<10)  & 0x07FF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	78db      	ldrb	r3, [r3, #3]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	b2db      	uxtb	r3, r3
 800263c:	b21a      	sxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	b21b      	sxth	r3, r3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	b21b      	sxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b21a      	sxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	795b      	ldrb	r3, [r3, #5]
 8002650:	b21b      	sxth	r3, r3
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	b21b      	sxth	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	b21b      	sxth	r3, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002660:	b29b      	uxth	r3, r3
 8002662:	81bb      	strh	r3, [r7, #12]
	raw_channels[3]  = ((receiver->buffer[5]>>1 |receiver->buffer[6]<<7)                           & 0x07FF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	795b      	ldrb	r3, [r3, #5]
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	b21a      	sxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	799b      	ldrb	r3, [r3, #6]
 8002672:	b21b      	sxth	r3, r3
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b21b      	sxth	r3, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002682:	b29b      	uxth	r3, r3
 8002684:	81fb      	strh	r3, [r7, #14]
	raw_channels[4]  = ((receiver->buffer[6]>>4 |receiver->buffer[7]<<4)                           & 0x07FF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	799b      	ldrb	r3, [r3, #6]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	b2db      	uxtb	r3, r3
 800268e:	b21a      	sxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	79db      	ldrb	r3, [r3, #7]
 8002694:	b21b      	sxth	r3, r3
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	b21b      	sxth	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	823b      	strh	r3, [r7, #16]
	raw_channels[5]  = ((receiver->buffer[7]>>7 |receiver->buffer[8]<<1 |receiver->buffer[9]<<9)   & 0x07FF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	79db      	ldrb	r3, [r3, #7]
 80026ac:	09db      	lsrs	r3, r3, #7
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7a1b      	ldrb	r3, [r3, #8]
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21a      	sxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7a5b      	ldrb	r3, [r3, #9]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	827b      	strh	r3, [r7, #18]
	raw_channels[6]  = ((receiver->buffer[9]>>2 |receiver->buffer[10]<<6)                          & 0x07FF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7a5b      	ldrb	r3, [r3, #9]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7a9b      	ldrb	r3, [r3, #10]
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	82bb      	strh	r3, [r7, #20]
	raw_channels[7]  = ((receiver->buffer[10]>>5|receiver->buffer[11]<<3)                          & 0x07FF);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7a9b      	ldrb	r3, [r3, #10]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7adb      	ldrb	r3, [r3, #11]
 8002708:	b21b      	sxth	r3, r3
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	b21b      	sxth	r3, r3
 800270e:	4313      	orrs	r3, r2
 8002710:	b21b      	sxth	r3, r3
 8002712:	b29b      	uxth	r3, r3
 8002714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002718:	b29b      	uxth	r3, r3
 800271a:	82fb      	strh	r3, [r7, #22]
	raw_channels[8]  = ((receiver->buffer[12]   |receiver->buffer[13]<<8)                          & 0x07FF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7b1b      	ldrb	r3, [r3, #12]
 8002720:	b21a      	sxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7b5b      	ldrb	r3, [r3, #13]
 8002726:	b21b      	sxth	r3, r3
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002736:	b29b      	uxth	r3, r3
 8002738:	833b      	strh	r3, [r7, #24]
	raw_channels[9]  = ((receiver->buffer[13]>>3|receiver->buffer[14]<<5)                          & 0x07FF);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7b5b      	ldrb	r3, [r3, #13]
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7b9b      	ldrb	r3, [r3, #14]
 8002748:	b21b      	sxth	r3, r3
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002758:	b29b      	uxth	r3, r3
 800275a:	837b      	strh	r3, [r7, #26]
	raw_channels[10] = ((receiver->buffer[14]>>6|receiver->buffer[15]<<2|receiver->buffer[16]<<10) & 0x07FF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7b9b      	ldrb	r3, [r3, #14]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	b2db      	uxtb	r3, r3
 8002764:	b21a      	sxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7bdb      	ldrb	r3, [r3, #15]
 800276a:	b21b      	sxth	r3, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	b21b      	sxth	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b21a      	sxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7c1b      	ldrb	r3, [r3, #16]
 8002778:	b21b      	sxth	r3, r3
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b21b      	sxth	r3, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002788:	b29b      	uxth	r3, r3
 800278a:	83bb      	strh	r3, [r7, #28]
	raw_channels[11] = ((receiver->buffer[16]>>1|receiver->buffer[17]<<7)                          & 0x07FF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7c1b      	ldrb	r3, [r3, #16]
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	b21a      	sxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7c5b      	ldrb	r3, [r3, #17]
 800279a:	b21b      	sxth	r3, r3
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	83fb      	strh	r3, [r7, #30]
	raw_channels[12] = ((receiver->buffer[17]>>4|receiver->buffer[18]<<4)                          & 0x07FF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7c5b      	ldrb	r3, [r3, #17]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7c9b      	ldrb	r3, [r3, #18]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	843b      	strh	r3, [r7, #32]
	raw_channels[13] = ((receiver->buffer[18]>>7|receiver->buffer[19]<<1|receiver->buffer[20]<<9)  & 0x07FF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7c9b      	ldrb	r3, [r3, #18]
 80027d4:	09db      	lsrs	r3, r3, #7
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	b21a      	sxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7cdb      	ldrb	r3, [r3, #19]
 80027de:	b21b      	sxth	r3, r3
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw_channels[14] = ((receiver->buffer[20]>>2|receiver->buffer[21]<<6)                          & 0x07FF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7d1b      	ldrb	r3, [r3, #20]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	b2db      	uxtb	r3, r3
 8002808:	b21a      	sxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7d5b      	ldrb	r3, [r3, #21]
 800280e:	b21b      	sxth	r3, r3
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	b29b      	uxth	r3, r3
 800281a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281e:	b29b      	uxth	r3, r3
 8002820:	84bb      	strh	r3, [r7, #36]	@ 0x24
	raw_channels[15] = ((receiver->buffer[21]>>5|receiver->buffer[22]<<3)                          & 0x07FF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7d5b      	ldrb	r3, [r3, #21]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	b21a      	sxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7d9b      	ldrb	r3, [r3, #22]
 8002830:	b21b      	sxth	r3, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	b21b      	sxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b21b      	sxth	r3, r3
 800283a:	b29b      	uxth	r3, r3
 800283c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002840:	b29b      	uxth	r3, r3
 8002842:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (receiver->buffer[23] & (1 << 0)) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7ddb      	ldrb	r3, [r3, #23]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <Sbus_decode+0x26a>
    	raw_channels[16] = 1;
 8002850:	2301      	movs	r3, #1
 8002852:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002854:	e001      	b.n	800285a <Sbus_decode+0x26e>
    }
    else {
    	raw_channels[16] = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    if (receiver->buffer[23] & (1 << 1)) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7ddb      	ldrb	r3, [r3, #23]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <Sbus_decode+0x280>
    	raw_channels[17] = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800286a:	e001      	b.n	8002870 <Sbus_decode+0x284>
    }
    else {
    	raw_channels[17] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    // Failsafe
	receiver->failsafe_status = SBUS_SIGNAL_OK;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	if (receiver->buffer[23] & (1 << 2)) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7ddb      	ldrb	r3, [r3, #23]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <Sbus_decode+0x2a0>
		receiver->failsafe_status = SBUS_SIGNAL_LOST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	}

	if (receiver->buffer[23] & (1 << 3)) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7ddb      	ldrb	r3, [r3, #23]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <Sbus_decode+0x2b4>
		receiver->failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	}

    for(int i = 0; i < 18; i++){
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a4:	e017      	b.n	80028d6 <Sbus_decode+0x2ea>
    	receiver->channels[i] = sbus_raw_to_us(raw_channels[i]);
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	3330      	adds	r3, #48	@ 0x30
 80028ac:	443b      	add	r3, r7
 80028ae:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fe54 	bl	8002560 <sbus_raw_to_us>
 80028b8:	ee07 0a90 	vmov	s15, r0
 80028bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c4:	3306      	adds	r3, #6
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 18; i++){
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d2:	3301      	adds	r3, #1
 80028d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d8:	2b11      	cmp	r3, #17
 80028da:	dde4      	ble.n	80028a6 <Sbus_decode+0x2ba>
    }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3730      	adds	r7, #48	@ 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_UARTEx_RxEventCallback>:

uint32_t timer = 0;
extern Arming arming;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart4.Instance){
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <HAL_UARTEx_RxEventCallback+0x50>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d117      	bne.n	8002930 <HAL_UARTEx_RxEventCallback+0x48>

		if(receiver.buffer[0] == 0x0F && receiver.buffer[24] == 0x00) {
 8002900:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_UARTEx_RxEventCallback+0x54>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d10b      	bne.n	8002920 <HAL_UARTEx_RxEventCallback+0x38>
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_UARTEx_RxEventCallback+0x54>)
 800290a:	7e1b      	ldrb	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_UARTEx_RxEventCallback+0x38>
			Sbus_decode(&receiver);
 8002910:	480a      	ldr	r0, [pc, #40]	@ (800293c <HAL_UARTEx_RxEventCallback+0x54>)
 8002912:	f7ff fe6b 	bl	80025ec <Sbus_decode>
			receiver.dataRdy = 1;
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_UARTEx_RxEventCallback+0x54>)
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		else{
			HAL_UART_AbortReceive(&huart4);
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
		}
	}
}
 800291e:	e007      	b.n	8002930 <HAL_UARTEx_RxEventCallback+0x48>
			HAL_UART_AbortReceive(&huart4);
 8002920:	4805      	ldr	r0, [pc, #20]	@ (8002938 <HAL_UARTEx_RxEventCallback+0x50>)
 8002922:	f007 fe25 	bl	800a570 <HAL_UART_AbortReceive>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart4, receiver.buffer, 25);
 8002926:	2219      	movs	r2, #25
 8002928:	4904      	ldr	r1, [pc, #16]	@ (800293c <HAL_UARTEx_RxEventCallback+0x54>)
 800292a:	4803      	ldr	r0, [pc, #12]	@ (8002938 <HAL_UARTEx_RxEventCallback+0x50>)
 800292c:	f009 f83b 	bl	800b9a6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000644 	.word	0x20000644
 800293c:	2000083c 	.word	0x2000083c

08002940 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IMU_INT_Pin){
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b10      	cmp	r3, #16
 800294e:	d107      	bne.n	8002960 <HAL_GPIO_EXTI_Callback+0x20>
		if(imu.ready){
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_GPIO_EXTI_Callback+0x28>)
 8002952:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_GPIO_EXTI_Callback+0x20>
			ICM42688_Read_DMA(&imu);
 800295a:	4803      	ldr	r0, [pc, #12]	@ (8002968 <HAL_GPIO_EXTI_Callback+0x28>)
 800295c:	f7ff fa2e 	bl	8001dbc <ICM42688_Read_DMA>
		}

	}

}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200008a4 	.word	0x200008a4

0800296c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == hspi1.Instance){
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_SPI_TxRxCpltCallback+0x34>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d10b      	bne.n	8002998 <HAL_SPI_TxRxCpltCallback+0x2c>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	2110      	movs	r1, #16
 8002984:	4807      	ldr	r0, [pc, #28]	@ (80029a4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002986:	f002 fe3b 	bl	8005600 <HAL_GPIO_WritePin>

		ICM42688_Process_Buffer(&imu);
 800298a:	4807      	ldr	r0, [pc, #28]	@ (80029a8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800298c:	f7ff f8a0 	bl	8001ad0 <ICM42688_Process_Buffer>
		imu.dataRdy = 1;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000488 	.word	0x20000488
 80029a4:	40020000 	.word	0x40020000
 80029a8:	200008a4 	.word	0x200008a4

080029ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b097      	sub	sp, #92	@ 0x5c
 80029b0:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80029b2:	f000 fcb5 	bl	8003320 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b6:	f001 fa30 	bl	8003e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ba:	f000 f8df 	bl	8002b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029be:	f000 fc23 	bl	8003208 <MX_GPIO_Init>
  MX_DMA_Init();
 80029c2:	f000 fbdf 	bl	8003184 <MX_DMA_Init>
  MX_ADC1_Init();
 80029c6:	f000 f945 	bl	8002c54 <MX_ADC1_Init>
  MX_I2C1_Init();
 80029ca:	f000 f995 	bl	8002cf8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80029ce:	f000 f9d3 	bl	8002d78 <MX_SPI1_Init>
  MX_TIM2_Init();
 80029d2:	f000 fa0f 	bl	8002df4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80029d6:	f000 faa5 	bl	8002f24 <MX_TIM3_Init>
  MX_UART4_Init();
 80029da:	f000 fb3b 	bl	8003054 <MX_UART4_Init>
  MX_UART5_Init();
 80029de:	f000 fb71 	bl	80030c4 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80029e2:	f000 fb9f 	bl	8003124 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80029e6:	f00c fb97 	bl	800f118 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  //Start Sbus Reception and Sync
  if(Sbus_Begin(&huart4, &receiver) != HAL_OK) {
 80029ea:	4958      	ldr	r1, [pc, #352]	@ (8002b4c <main+0x1a0>)
 80029ec:	4858      	ldr	r0, [pc, #352]	@ (8002b50 <main+0x1a4>)
 80029ee:	f7ff fd9d 	bl	800252c <Sbus_Begin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <main+0x50>
	  Error_Handler();
 80029f8:	f000 fcbe 	bl	8003378 <Error_Handler>
  }

  //Start IMU, configure ranges, filters & interrupts
  if(ICM42688_Begin(&imu, &hspi1) != HAL_OK) {
 80029fc:	4955      	ldr	r1, [pc, #340]	@ (8002b54 <main+0x1a8>)
 80029fe:	4856      	ldr	r0, [pc, #344]	@ (8002b58 <main+0x1ac>)
 8002a00:	f7fe ff46 	bl	8001890 <ICM42688_Begin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <main+0x62>
	  Error_Handler();
 8002a0a:	f000 fcb5 	bl	8003378 <Error_Handler>
  }

  //Start DMA Read for Vbat ADC
  if(Battery_Begin(&hadc1) != HAL_OK) {
 8002a0e:	4853      	ldr	r0, [pc, #332]	@ (8002b5c <main+0x1b0>)
 8002a10:	f7fe fcb2 	bl	8001378 <Battery_Begin>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <main+0x72>
	  Error_Handler();
 8002a1a:	f000 fcad 	bl	8003378 <Error_Handler>
  }

  //Configure output timers
  if(Output_Begin(&htim2, &htim3) != HAL_OK) {
 8002a1e:	4950      	ldr	r1, [pc, #320]	@ (8002b60 <main+0x1b4>)
 8002a20:	4850      	ldr	r0, [pc, #320]	@ (8002b64 <main+0x1b8>)
 8002a22:	f7ff f9ef 	bl	8001e04 <Output_Begin>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <main+0x84>
	  Error_Handler();
 8002a2c:	f000 fca4 	bl	8003378 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8002a30:	f001 fa44 	bl	8003ebc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b4c      	ldr	r3, [pc, #304]	@ (8002b68 <main+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b09      	cmp	r3, #9
 8002a3e:	d9f7      	bls.n	8002a30 <main+0x84>

		Battery_Update();
 8002a40:	f7fe fcb2 	bl	80013a8 <Battery_Update>

		if(imu.dataRdy){
 8002a44:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <main+0x1ac>)
 8002a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01f      	beq.n	8002a8e <main+0xe2>

			AHRS_Update_Complementary_Filter(imu.gyro, imu.accel, 0.95, DELTA_T);
 8002a4e:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <main+0x1ac>)
 8002a50:	ed93 5a01 	vldr	s10, [r3, #4]
 8002a54:	edd3 5a02 	vldr	s11, [r3, #8]
 8002a58:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <main+0x1ac>)
 8002a5e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a62:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a6a:	eddf 3a40 	vldr	s7, [pc, #256]	@ 8002b6c <main+0x1c0>
 8002a6e:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 8002b70 <main+0x1c4>
 8002a72:	eef0 1a45 	vmov.f32	s3, s10
 8002a76:	eeb0 2a65 	vmov.f32	s4, s11
 8002a7a:	eef0 2a46 	vmov.f32	s5, s12
 8002a7e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a82:	eef0 0a47 	vmov.f32	s1, s14
 8002a86:	eeb0 1a67 	vmov.f32	s2, s15
 8002a8a:	f7fe fbe9 	bl	8001260 <AHRS_Update_Complementary_Filter>

		}

		if(receiver.dataRdy){
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <main+0x1a0>)
 8002a90:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d041      	beq.n	8002b1c <main+0x170>

			Process_Input(receiver);
 8002a98:	4c2c      	ldr	r4, [pc, #176]	@ (8002b4c <main+0x1a0>)
 8002a9a:	4668      	mov	r0, sp
 8002a9c:	f104 0310 	add.w	r3, r4, #16
 8002aa0:	2258      	movs	r2, #88	@ 0x58
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f00d ff45 	bl	8010932 <memcpy>
 8002aa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aac:	f7fe fe74 	bl	8001798 <Process_Input>

			if(flight_mode == ACRO_MODE) Acro_Mode(receiver, DELTA_T);
 8002ab0:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <main+0x1c8>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d10e      	bne.n	8002ad6 <main+0x12a>
 8002ab8:	4c24      	ldr	r4, [pc, #144]	@ (8002b4c <main+0x1a0>)
 8002aba:	4668      	mov	r0, sp
 8002abc:	f104 0310 	add.w	r3, r4, #16
 8002ac0:	2258      	movs	r2, #88	@ 0x58
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f00d ff35 	bl	8010932 <memcpy>
 8002ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002acc:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002b6c <main+0x1c0>
 8002ad0:	f7fe fd16 	bl	8001500 <Acro_Mode>
 8002ad4:	e022      	b.n	8002b1c <main+0x170>
			else if (flight_mode == STABILIZED_MODE) Stabilized_Mode(receiver, DELTA_T);
 8002ad6:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <main+0x1c8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10e      	bne.n	8002afc <main+0x150>
 8002ade:	4c1b      	ldr	r4, [pc, #108]	@ (8002b4c <main+0x1a0>)
 8002ae0:	4668      	mov	r0, sp
 8002ae2:	f104 0310 	add.w	r3, r4, #16
 8002ae6:	2258      	movs	r2, #88	@ 0x58
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f00d ff22 	bl	8010932 <memcpy>
 8002aee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002af2:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8002b6c <main+0x1c0>
 8002af6:	f7fe fc6f 	bl	80013d8 <Stabilized_Mode>
 8002afa:	e00f      	b.n	8002b1c <main+0x170>
			else if(flight_mode == MANUAL_MODE) Manual_Mode(receiver);
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <main+0x1c8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <main+0x170>
 8002b04:	4c11      	ldr	r4, [pc, #68]	@ (8002b4c <main+0x1a0>)
 8002b06:	4668      	mov	r0, sp
 8002b08:	f104 0310 	add.w	r3, r4, #16
 8002b0c:	2258      	movs	r2, #88	@ 0x58
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f00d ff0f 	bl	8010932 <memcpy>
 8002b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b18:	f7fe fdf8 	bl	800170c <Manual_Mode>

		}

		Output_Update(&htim2, &htim3);
 8002b1c:	4910      	ldr	r1, [pc, #64]	@ (8002b60 <main+0x1b4>)
 8002b1e:	4811      	ldr	r0, [pc, #68]	@ (8002b64 <main+0x1b8>)
 8002b20:	f7ff fa1a 	bl	8001f58 <Output_Update>
		//sprintf(usbBuffer, "w%fwa%fab%fbc%fc\r\n", q.w, q.x, q.y, q.z);
		//sprintf(usbBuffer, "%f, %f\r\n", roll, pitch);
		//CDC_Transmit_FS((uint8_t *) usbBuffer, strlen(usbBuffer));


		timer += DELTA_T*1000;
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <main+0x1bc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd13 	bl	8000554 <__aeabi_ui2d>
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <main+0x1cc>)
 8002b34:	f7fd fbd2 	bl	80002dc <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fe f85a 	bl	8000bf8 <__aeabi_d2uiz>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <main+0x1bc>)
 8002b48:	6013      	str	r3, [r2, #0]
	if ((HAL_GetTick() - timer) >= DELTA_T*1000) {
 8002b4a:	e771      	b.n	8002a30 <main+0x84>
 8002b4c:	2000083c 	.word	0x2000083c
 8002b50:	20000644 	.word	0x20000644
 8002b54:	20000488 	.word	0x20000488
 8002b58:	200008a4 	.word	0x200008a4
 8002b5c:	2000038c 	.word	0x2000038c
 8002b60:	200005f8 	.word	0x200005f8
 8002b64:	200005ac 	.word	0x200005ac
 8002b68:	200008dc 	.word	0x200008dc
 8002b6c:	3c23d70a 	.word	0x3c23d70a
 8002b70:	3f733333 	.word	0x3f733333
 8002b74:	20000328 	.word	0x20000328
 8002b78:	40240000 	.word	0x40240000

08002b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b094      	sub	sp, #80	@ 0x50
 8002b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b82:	f107 0320 	add.w	r3, r7, #32
 8002b86:	2230      	movs	r2, #48	@ 0x30
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f00d fe41 	bl	8010812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <SystemClock_Config+0xd0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <SystemClock_Config+0xd0>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <SystemClock_Config+0xd0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <SystemClock_Config+0xd4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <SystemClock_Config+0xd4>)
 8002bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <SystemClock_Config+0xd4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002be4:	2304      	movs	r3, #4
 8002be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002be8:	23d8      	movs	r3, #216	@ 0xd8
 8002bea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf4:	f107 0320 	add.w	r3, r7, #32
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 f95b 	bl	8006eb4 <HAL_RCC_OscConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c04:	f000 fbb8 	bl	8003378 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c08:	f004 f904 	bl	8006e14 <HAL_PWREx_EnableOverDrive>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c12:	f000 fbb1 	bl	8003378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c16:	230f      	movs	r3, #15
 8002c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	2107      	movs	r1, #7
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fbe1 	bl	80073fc <HAL_RCC_ClockConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002c40:	f000 fb9a 	bl	8003378 <Error_Handler>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3750      	adds	r7, #80	@ 0x50
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000

08002c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c66:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c68:	4a21      	ldr	r2, [pc, #132]	@ (8002cf0 <MX_ADC1_Init+0x9c>)
 8002c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c86:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c94:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c96:	4a17      	ldr	r2, [pc, #92]	@ (8002cf4 <MX_ADC1_Init+0xa0>)
 8002c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ca0:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ca6:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cb4:	480d      	ldr	r0, [pc, #52]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002cb6:	f001 f931 	bl	8003f1c <HAL_ADC_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002cc0:	f000 fb5a 	bl	8003378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	@ (8002cec <MX_ADC1_Init+0x98>)
 8002cd6:	f001 fa81 	bl	80041dc <HAL_ADC_ConfigChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ce0:	f000 fb4a 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000038c 	.word	0x2000038c
 8002cf0:	40012000 	.word	0x40012000
 8002cf4:	0f000001 	.word	0x0f000001

08002cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <MX_I2C1_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <MX_I2C1_Init+0x7c>)
 8002d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d08:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d14:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d32:	480e      	ldr	r0, [pc, #56]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d34:	f002 fcb0 	bl	8005698 <HAL_I2C_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d3e:	f000 fb1b 	bl	8003378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d42:	2100      	movs	r1, #0
 8002d44:	4809      	ldr	r0, [pc, #36]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d46:	f002 fd43 	bl	80057d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d50:	f000 fb12 	bl	8003378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d54:	2100      	movs	r1, #0
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <MX_I2C1_Init+0x74>)
 8002d58:	f002 fd85 	bl	8005866 <HAL_I2CEx_ConfigDigitalFilter>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f000 fb09 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000434 	.word	0x20000434
 8002d70:	40005400 	.word	0x40005400
 8002d74:	20404768 	.word	0x20404768

08002d78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002df0 <MX_SPI1_Init+0x78>)
 8002d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002d92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dae:	2210      	movs	r2, #16
 8002db0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dd6:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_SPI1_Init+0x74>)
 8002dd8:	f005 f880 	bl	8007edc <HAL_SPI_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002de2:	f000 fac9 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000488 	.word	0x20000488
 8002df0:	40013000 	.word	0x40013000

08002df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08e      	sub	sp, #56	@ 0x38
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	615a      	str	r2, [r3, #20]
 8002e24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e30:	223b      	movs	r2, #59	@ 0x3b
 8002e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8002e3a:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e3c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e48:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e4e:	4834      	ldr	r0, [pc, #208]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e50:	f006 fb5e 	bl	8009510 <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e5a:	f000 fa8d 	bl	8003378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	482d      	ldr	r0, [pc, #180]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e6c:	f006 fe16 	bl	8009a9c <HAL_TIM_ConfigClockSource>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e76:	f000 fa7f 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e7a:	4829      	ldr	r0, [pc, #164]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e7c:	f006 fb9f 	bl	80095be <HAL_TIM_PWM_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e86:	f000 fa77 	bl	8003378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4821      	ldr	r0, [pc, #132]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002e9a:	f007 fa8d 	bl	800a3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002ea4:	f000 fa68 	bl	8003378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea8:	2360      	movs	r3, #96	@ 0x60
 8002eaa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4818      	ldr	r0, [pc, #96]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002ec0:	f006 fcd8 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002eca:	f000 fa55 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ece:	463b      	mov	r3, r7
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4812      	ldr	r0, [pc, #72]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002ed6:	f006 fccd 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002ee0:	f000 fa4a 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480d      	ldr	r0, [pc, #52]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002eec:	f006 fcc2 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002ef6:	f000 fa3f 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002efa:	463b      	mov	r3, r7
 8002efc:	220c      	movs	r2, #12
 8002efe:	4619      	mov	r1, r3
 8002f00:	4807      	ldr	r0, [pc, #28]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002f02:	f006 fcb7 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002f0c:	f000 fa34 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f10:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <MX_TIM2_Init+0x12c>)
 8002f12:	f000 fc23 	bl	800375c <HAL_TIM_MspPostInit>

}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	@ 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200005ac 	.word	0x200005ac

08002f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08e      	sub	sp, #56	@ 0x38
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f44:	463b      	mov	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f56:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f58:	4a3d      	ldr	r2, [pc, #244]	@ (8003050 <MX_TIM3_Init+0x12c>)
 8002f5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f5e:	223b      	movs	r2, #59	@ 0x3b
 8002f60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f62:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000-1;
 8002f68:	4b38      	ldr	r3, [pc, #224]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f6a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8002f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f70:	4b36      	ldr	r3, [pc, #216]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f76:	4b35      	ldr	r3, [pc, #212]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f7c:	4833      	ldr	r0, [pc, #204]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f7e:	f006 fac7 	bl	8009510 <HAL_TIM_Base_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f88:	f000 f9f6 	bl	8003378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f96:	4619      	mov	r1, r3
 8002f98:	482c      	ldr	r0, [pc, #176]	@ (800304c <MX_TIM3_Init+0x128>)
 8002f9a:	f006 fd7f 	bl	8009a9c <HAL_TIM_ConfigClockSource>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002fa4:	f000 f9e8 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fa8:	4828      	ldr	r0, [pc, #160]	@ (800304c <MX_TIM3_Init+0x128>)
 8002faa:	f006 fb08 	bl	80095be <HAL_TIM_PWM_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002fb4:	f000 f9e0 	bl	8003378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4821      	ldr	r0, [pc, #132]	@ (800304c <MX_TIM3_Init+0x128>)
 8002fc8:	f007 f9f6 	bl	800a3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002fd2:	f000 f9d1 	bl	8003378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd6:	2360      	movs	r3, #96	@ 0x60
 8002fd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4619      	mov	r1, r3
 8002fec:	4817      	ldr	r0, [pc, #92]	@ (800304c <MX_TIM3_Init+0x128>)
 8002fee:	f006 fc41 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ff8:	f000 f9be 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	2204      	movs	r2, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4812      	ldr	r0, [pc, #72]	@ (800304c <MX_TIM3_Init+0x128>)
 8003004:	f006 fc36 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800300e:	f000 f9b3 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003012:	463b      	mov	r3, r7
 8003014:	2208      	movs	r2, #8
 8003016:	4619      	mov	r1, r3
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <MX_TIM3_Init+0x128>)
 800301a:	f006 fc2b 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003024:	f000 f9a8 	bl	8003378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003028:	463b      	mov	r3, r7
 800302a:	220c      	movs	r2, #12
 800302c:	4619      	mov	r1, r3
 800302e:	4807      	ldr	r0, [pc, #28]	@ (800304c <MX_TIM3_Init+0x128>)
 8003030:	f006 fc20 	bl	8009874 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800303a:	f000 f99d 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800303e:	4803      	ldr	r0, [pc, #12]	@ (800304c <MX_TIM3_Init+0x128>)
 8003040:	f000 fb8c 	bl	800375c <HAL_TIM_MspPostInit>

}
 8003044:	bf00      	nop
 8003046:	3738      	adds	r7, #56	@ 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200005f8 	.word	0x200005f8
 8003050:	40000400 	.word	0x40000400

08003054 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_UART4_Init+0x64>)
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <MX_UART4_Init+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003060:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <MX_UART4_Init+0x6c>)
 8003062:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003066:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800306a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 800306c:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <MX_UART4_Init+0x64>)
 800306e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003072:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800307a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800307c:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <MX_UART4_Init+0x64>)
 800307e:	2204      	movs	r2, #4
 8003080:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <MX_UART4_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8003094:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <MX_UART4_Init+0x64>)
 8003096:	2202      	movs	r2, #2
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 800309a:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <MX_UART4_Init+0x64>)
 800309c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	@ (80030b8 <MX_UART4_Init+0x64>)
 80030a4:	f007 fa16 	bl	800a4d4 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80030ae:	f000 f963 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000644 	.word	0x20000644
 80030bc:	40004c00 	.word	0x40004c00
 80030c0:	000186a0 	.word	0x000186a0

080030c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80030c8:	4b14      	ldr	r3, [pc, #80]	@ (800311c <MX_UART5_Init+0x58>)
 80030ca:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <MX_UART5_Init+0x5c>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <MX_UART5_Init+0x58>)
 80030d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <MX_UART5_Init+0x58>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <MX_UART5_Init+0x58>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <MX_UART5_Init+0x58>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <MX_UART5_Init+0x58>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <MX_UART5_Init+0x58>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <MX_UART5_Init+0x58>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <MX_UART5_Init+0x58>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <MX_UART5_Init+0x58>)
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	@ (800311c <MX_UART5_Init+0x58>)
 8003108:	f007 f9e4 	bl	800a4d4 <HAL_UART_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8003112:	f000 f931 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200006cc 	.word	0x200006cc
 8003120:	40005000 	.word	0x40005000

08003124 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <MX_USART6_UART_Init+0x58>)
 800312a:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <MX_USART6_UART_Init+0x5c>)
 800312c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800312e:	4b13      	ldr	r3, [pc, #76]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <MX_USART6_UART_Init+0x58>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <MX_USART6_UART_Init+0x58>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <MX_USART6_UART_Init+0x58>)
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003166:	4805      	ldr	r0, [pc, #20]	@ (800317c <MX_USART6_UART_Init+0x58>)
 8003168:	f007 f9b4 	bl	800a4d4 <HAL_UART_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003172:	f000 f901 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000754 	.word	0x20000754
 8003180:	40011400 	.word	0x40011400

08003184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800318a:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <MX_DMA_Init+0x80>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <MX_DMA_Init+0x80>)
 8003190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <MX_DMA_Init+0x80>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031a2:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <MX_DMA_Init+0x80>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <MX_DMA_Init+0x80>)
 80031a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <MX_DMA_Init+0x80>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	200d      	movs	r0, #13
 80031c0:	f001 fbbd 	bl	800493e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031c4:	200d      	movs	r0, #13
 80031c6:	f001 fbd6 	bl	8004976 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2038      	movs	r0, #56	@ 0x38
 80031d0:	f001 fbb5 	bl	800493e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031d4:	2038      	movs	r0, #56	@ 0x38
 80031d6:	f001 fbce 	bl	8004976 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	203b      	movs	r0, #59	@ 0x3b
 80031e0:	f001 fbad 	bl	800493e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80031e4:	203b      	movs	r0, #59	@ 0x3b
 80031e6:	f001 fbc6 	bl	8004976 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	203c      	movs	r0, #60	@ 0x3c
 80031f0:	f001 fba5 	bl	800493e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80031f4:	203c      	movs	r0, #60	@ 0x3c
 80031f6:	f001 fbbe 	bl	8004976 <HAL_NVIC_EnableIRQ>

}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <MX_GPIO_Init+0x10c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003236:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	4a36      	ldr	r2, [pc, #216]	@ (8003314 <MX_GPIO_Init+0x10c>)
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6313      	str	r3, [r2, #48]	@ 0x30
 8003242:	4b34      	ldr	r3, [pc, #208]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	4a30      	ldr	r2, [pc, #192]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6313      	str	r3, [r2, #48]	@ 0x30
 800325a:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <MX_GPIO_Init+0x10c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	4a2a      	ldr	r2, [pc, #168]	@ (8003314 <MX_GPIO_Init+0x10c>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	@ 0x30
 8003272:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327e:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a24      	ldr	r2, [pc, #144]	@ (8003314 <MX_GPIO_Init+0x10c>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <MX_GPIO_Init+0x10c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8003296:	2200      	movs	r2, #0
 8003298:	2108      	movs	r1, #8
 800329a:	481f      	ldr	r0, [pc, #124]	@ (8003318 <MX_GPIO_Init+0x110>)
 800329c:	f002 f9b0 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2110      	movs	r1, #16
 80032a4:	481d      	ldr	r0, [pc, #116]	@ (800331c <MX_GPIO_Init+0x114>)
 80032a6:	f002 f9ab 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80032aa:	2308      	movs	r3, #8
 80032ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	4619      	mov	r1, r3
 80032c0:	4815      	ldr	r0, [pc, #84]	@ (8003318 <MX_GPIO_Init+0x110>)
 80032c2:	f002 f801 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80032c6:	2310      	movs	r3, #16
 80032c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	480f      	ldr	r0, [pc, #60]	@ (800331c <MX_GPIO_Init+0x114>)
 80032de:	f001 fff3 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80032e2:	2310      	movs	r3, #16
 80032e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	4808      	ldr	r0, [pc, #32]	@ (8003318 <MX_GPIO_Init+0x110>)
 80032f8:	f001 ffe6 	bl	80052c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	200a      	movs	r0, #10
 8003302:	f001 fb1c 	bl	800493e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003306:	200a      	movs	r0, #10
 8003308:	f001 fb35 	bl	8004976 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	@ 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020000 	.word	0x40020000

08003320 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003326:	463b      	mov	r3, r7
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003332:	f001 fb3b 	bl	80049ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003336:	2301      	movs	r3, #1
 8003338:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800333a:	2300      	movs	r3, #0
 800333c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003342:	231f      	movs	r3, #31
 8003344:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003346:	2387      	movs	r3, #135	@ 0x87
 8003348:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800334a:	2300      	movs	r3, #0
 800334c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800334e:	2300      	movs	r3, #0
 8003350:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003352:	2301      	movs	r3, #1
 8003354:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003356:	2301      	movs	r3, #1
 8003358:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003362:	463b      	mov	r3, r7
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fb59 	bl	8004a1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800336a:	2004      	movs	r0, #4
 800336c:	f001 fb36 	bl	80049dc <HAL_MPU_Enable>

}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800337e:	b672      	cpsid	i
}
 8003380:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 8003382:	2108      	movs	r1, #8
 8003384:	4807      	ldr	r0, [pc, #28]	@ (80033a4 <Error_Handler+0x2c>)
 8003386:	f002 f954 	bl	8005632 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++){
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	e003      	b.n	8003398 <Error_Handler+0x20>
		  __NOP();
 8003390:	bf00      	nop
	  for(int i = 0; i < 1000000; i++){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3301      	adds	r3, #1
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a03      	ldr	r2, [pc, #12]	@ (80033a8 <Error_Handler+0x30>)
 800339c:	4293      	cmp	r3, r2
 800339e:	ddf7      	ble.n	8003390 <Error_Handler+0x18>
	  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin); //LED BLINK
 80033a0:	e7ef      	b.n	8003382 <Error_Handler+0xa>
 80033a2:	bf00      	nop
 80033a4:	40020800 	.word	0x40020800
 80033a8:	000f423f 	.word	0x000f423f

080033ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_MspInit+0x44>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <HAL_MspInit+0x44>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <HAL_MspInit+0x44>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_MspInit+0x44>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <HAL_MspInit+0x44>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_MspInit+0x44>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <HAL_ADC_MspInit+0xd4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d153      	bne.n	80034be <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	4a2c      	ldr	r2, [pc, #176]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	6453      	str	r3, [r2, #68]	@ 0x44
 8003422:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342e:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a26      	ldr	r2, [pc, #152]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_ADC_MspInit+0xd8>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800344a:	2303      	movs	r3, #3
 800344c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	481d      	ldr	r0, [pc, #116]	@ (80034d0 <HAL_ADC_MspInit+0xdc>)
 800345a:	f001 ff35 	bl	80052c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003460:	4a1d      	ldr	r2, [pc, #116]	@ (80034d8 <HAL_ADC_MspInit+0xe4>)
 8003462:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003470:	4b18      	ldr	r3, [pc, #96]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003476:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800347e:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003484:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003486:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800348c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003494:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800349c:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034a2:	480c      	ldr	r0, [pc, #48]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 80034a4:	f001 fafa 	bl	8004a9c <HAL_DMA_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80034ae:	f7ff ff63 	bl	8003378 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a07      	ldr	r2, [pc, #28]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 80034b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034b8:	4a06      	ldr	r2, [pc, #24]	@ (80034d4 <HAL_ADC_MspInit+0xe0>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40012000 	.word	0x40012000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020800 	.word	0x40020800
 80034d4:	200003d4 	.word	0x200003d4
 80034d8:	40026470 	.word	0x40026470

080034dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0aa      	sub	sp, #168	@ 0xa8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00d f988 	bl	8010812 <memset>
  if(hi2c->Instance==I2C1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a21      	ldr	r2, [pc, #132]	@ (800358c <HAL_I2C_MspInit+0xb0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d13b      	bne.n	8003584 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800350c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003510:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003512:	2300      	movs	r3, #0
 8003514:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4618      	mov	r0, r3
 800351c:	f004 f994 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003526:	f7ff ff27 	bl	8003378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003542:	23c0      	movs	r3, #192	@ 0xc0
 8003544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003548:	2312      	movs	r3, #18
 800354a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800355a:	2304      	movs	r3, #4
 800355c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003564:	4619      	mov	r1, r3
 8003566:	480b      	ldr	r0, [pc, #44]	@ (8003594 <HAL_I2C_MspInit+0xb8>)
 8003568:	f001 feae 	bl	80052c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 8003572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003576:	6413      	str	r3, [r2, #64]	@ 0x40
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_I2C_MspInit+0xb4>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003584:	bf00      	nop
 8003586:	37a8      	adds	r7, #168	@ 0xa8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40005400 	.word	0x40005400
 8003590:	40023800 	.word	0x40023800
 8003594:	40020400 	.word	0x40020400

08003598 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a49      	ldr	r2, [pc, #292]	@ (80036dc <HAL_SPI_MspInit+0x144>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f040 808c 	bne.w	80036d4 <HAL_SPI_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035bc:	4b48      	ldr	r3, [pc, #288]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	4a47      	ldr	r2, [pc, #284]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035c8:	4b45      	ldr	r3, [pc, #276]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d4:	4b42      	ldr	r3, [pc, #264]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	4a41      	ldr	r2, [pc, #260]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e0:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_SPI_MspInit+0x148>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035ec:	23e0      	movs	r3, #224	@ 0xe0
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035fc:	2305      	movs	r3, #5
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4837      	ldr	r0, [pc, #220]	@ (80036e4 <HAL_SPI_MspInit+0x14c>)
 8003608:	f001 fe5e 	bl	80052c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 800360e:	4a37      	ldr	r2, [pc, #220]	@ (80036ec <HAL_SPI_MspInit+0x154>)
 8003610:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003612:	4b35      	ldr	r3, [pc, #212]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003614:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003618:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361a:	4b33      	ldr	r3, [pc, #204]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362e:	4b2e      	ldr	r3, [pc, #184]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003634:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800363a:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 800363c:	2200      	movs	r2, #0
 800363e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003640:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b28      	ldr	r3, [pc, #160]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800364c:	4826      	ldr	r0, [pc, #152]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 800364e:	f001 fa25 	bl	8004a9c <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003658:	f7ff fe8e 	bl	8003378 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003660:	659a      	str	r2, [r3, #88]	@ 0x58
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_SPI_MspInit+0x150>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 800366a:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_SPI_MspInit+0x15c>)
 800366c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 8003670:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003674:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 8003678:	2240      	movs	r2, #64	@ 0x40
 800367a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800367c:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 8003684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003688:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003690:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003696:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 8003698:	2200      	movs	r2, #0
 800369a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800369c:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 800369e:	2200      	movs	r2, #0
 80036a0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a2:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80036a8:	4811      	ldr	r0, [pc, #68]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 80036aa:	f001 f9f7 	bl	8004a9c <HAL_DMA_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80036b4:	f7ff fe60 	bl	8003378 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80036be:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <HAL_SPI_MspInit+0x158>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	2023      	movs	r0, #35	@ 0x23
 80036ca:	f001 f938 	bl	800493e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036ce:	2023      	movs	r0, #35	@ 0x23
 80036d0:	f001 f951 	bl	8004976 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80036d4:	bf00      	nop
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013000 	.word	0x40013000
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020000 	.word	0x40020000
 80036e8:	200004ec 	.word	0x200004ec
 80036ec:	40026410 	.word	0x40026410
 80036f0:	2000054c 	.word	0x2000054c
 80036f4:	40026458 	.word	0x40026458

080036f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d10c      	bne.n	8003724 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	4a11      	ldr	r2, [pc, #68]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6413      	str	r3, [r2, #64]	@ 0x40
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003722:	e010      	b.n	8003746 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0b      	ldr	r2, [pc, #44]	@ (8003758 <HAL_TIM_Base_MspInit+0x60>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10b      	bne.n	8003746 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	4a08      	ldr	r2, [pc, #32]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6413      	str	r3, [r2, #64]	@ 0x40
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_TIM_Base_MspInit+0x5c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	40000400 	.word	0x40000400

0800375c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d139      	bne.n	80037f2 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377e:	4b2f      	ldr	r3, [pc, #188]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6313      	str	r3, [r2, #48]	@ 0x30
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	4b29      	ldr	r3, [pc, #164]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a28      	ldr	r2, [pc, #160]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80037ae:	f248 030c 	movw	r3, #32780	@ 0x800c
 80037b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4619      	mov	r1, r3
 80037ca:	481d      	ldr	r0, [pc, #116]	@ (8003840 <HAL_TIM_MspPostInit+0xe4>)
 80037cc:	f001 fd7c 	bl	80052c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037d0:	2308      	movs	r3, #8
 80037d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4619      	mov	r1, r3
 80037ea:	4816      	ldr	r0, [pc, #88]	@ (8003844 <HAL_TIM_MspPostInit+0xe8>)
 80037ec:	f001 fd6c 	bl	80052c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037f0:	e020      	b.n	8003834 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a14      	ldr	r2, [pc, #80]	@ (8003848 <HAL_TIM_MspPostInit+0xec>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	6313      	str	r3, [r2, #48]	@ 0x30
 8003808:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <HAL_TIM_MspPostInit+0xe0>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003814:	2333      	movs	r3, #51	@ 0x33
 8003816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003824:	2302      	movs	r3, #2
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4805      	ldr	r0, [pc, #20]	@ (8003844 <HAL_TIM_MspPostInit+0xe8>)
 8003830:	f001 fd4a 	bl	80052c8 <HAL_GPIO_Init>
}
 8003834:	bf00      	nop
 8003836:	3728      	adds	r7, #40	@ 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40000400 	.word	0x40000400

0800384c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b0b0      	sub	sp, #192	@ 0xc0
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f00c ffd0 	bl	8010812 <memset>
  if(huart->Instance==UART4)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4aa1      	ldr	r2, [pc, #644]	@ (8003afc <HAL_UART_MspInit+0x2b0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	f040 8096 	bne.w	80039aa <HAL_UART_MspInit+0x15e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800387e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003884:	2300      	movs	r3, #0
 8003886:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800388c:	4618      	mov	r0, r3
 800388e:	f003 ffdb 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003898:	f7ff fd6e 	bl	8003378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800389c:	4b98      	ldr	r3, [pc, #608]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	4a97      	ldr	r2, [pc, #604]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a8:	4b95      	ldr	r3, [pc, #596]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	4b92      	ldr	r3, [pc, #584]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	4a91      	ldr	r2, [pc, #580]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d8:	4b89      	ldr	r3, [pc, #548]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038e4:	2302      	movs	r3, #2
 80038e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038fc:	2308      	movs	r3, #8
 80038fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003902:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003906:	4619      	mov	r1, r3
 8003908:	487e      	ldr	r0, [pc, #504]	@ (8003b04 <HAL_UART_MspInit+0x2b8>)
 800390a:	f001 fcdd 	bl	80052c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800390e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003922:	2303      	movs	r3, #3
 8003924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003928:	2308      	movs	r3, #8
 800392a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003932:	4619      	mov	r1, r3
 8003934:	4874      	ldr	r0, [pc, #464]	@ (8003b08 <HAL_UART_MspInit+0x2bc>)
 8003936:	f001 fcc7 	bl	80052c8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800393a:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 800393c:	4a74      	ldr	r2, [pc, #464]	@ (8003b10 <HAL_UART_MspInit+0x2c4>)
 800393e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003940:	4b72      	ldr	r3, [pc, #456]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003942:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003946:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003948:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800394e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003954:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800395a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800395c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 800395e:	2200      	movs	r2, #0
 8003960:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003962:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003968:	4b68      	ldr	r3, [pc, #416]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 800396a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800396e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003976:	4b65      	ldr	r3, [pc, #404]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003978:	2200      	movs	r2, #0
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800397c:	4863      	ldr	r0, [pc, #396]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 800397e:	f001 f88d 	bl	8004a9c <HAL_DMA_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8003988:	f7ff fcf6 	bl	8003378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a5f      	ldr	r2, [pc, #380]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003990:	675a      	str	r2, [r3, #116]	@ 0x74
 8003992:	4a5e      	ldr	r2, [pc, #376]	@ (8003b0c <HAL_UART_MspInit+0x2c0>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	2034      	movs	r0, #52	@ 0x34
 800399e:	f000 ffce 	bl	800493e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80039a2:	2034      	movs	r0, #52	@ 0x34
 80039a4:	f000 ffe7 	bl	8004976 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80039a8:	e0a4      	b.n	8003af4 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==UART5)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a59      	ldr	r2, [pc, #356]	@ (8003b14 <HAL_UART_MspInit+0x2c8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d15e      	bne.n	8003a72 <HAL_UART_MspInit+0x226>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80039b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 ff40 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_UART_MspInit+0x186>
      Error_Handler();
 80039ce:	f7ff fcd3 	bl	8003378 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80039d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039de:	4b48      	ldr	r3, [pc, #288]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ea:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	4a44      	ldr	r2, [pc, #272]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f6:	4b42      	ldr	r3, [pc, #264]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a02:	4b3f      	ldr	r3, [pc, #252]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	4a3e      	ldr	r2, [pc, #248]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a34:	2308      	movs	r3, #8
 8003a36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4831      	ldr	r0, [pc, #196]	@ (8003b08 <HAL_UART_MspInit+0x2bc>)
 8003a42:	f001 fc41 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a46:	2304      	movs	r3, #4
 8003a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a5e:	2308      	movs	r3, #8
 8003a60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a68:	4619      	mov	r1, r3
 8003a6a:	482b      	ldr	r0, [pc, #172]	@ (8003b18 <HAL_UART_MspInit+0x2cc>)
 8003a6c:	f001 fc2c 	bl	80052c8 <HAL_GPIO_Init>
}
 8003a70:	e040      	b.n	8003af4 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART6)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a29      	ldr	r2, [pc, #164]	@ (8003b1c <HAL_UART_MspInit+0x2d0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d13b      	bne.n	8003af4 <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003a7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003a82:	2300      	movs	r3, #0
 8003a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fedc 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8003a96:	f7ff fc6f 	bl	8003378 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a9a:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003aa0:	f043 0320 	orr.w	r3, r3, #32
 8003aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aa6:	4b16      	ldr	r3, [pc, #88]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab2:	4b13      	ldr	r3, [pc, #76]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_UART_MspInit+0x2b4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aca:	23c0      	movs	r3, #192	@ 0xc0
 8003acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003aec:	4619      	mov	r1, r3
 8003aee:	4806      	ldr	r0, [pc, #24]	@ (8003b08 <HAL_UART_MspInit+0x2bc>)
 8003af0:	f001 fbea 	bl	80052c8 <HAL_GPIO_Init>
}
 8003af4:	bf00      	nop
 8003af6:	37c0      	adds	r7, #192	@ 0xc0
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40004c00 	.word	0x40004c00
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020000 	.word	0x40020000
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	200007dc 	.word	0x200007dc
 8003b10:	40026040 	.word	0x40026040
 8003b14:	40005000 	.word	0x40005000
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40011400 	.word	0x40011400

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <NMI_Handler+0x4>

08003b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <MemManage_Handler+0x4>

08003b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b76:	f000 f98d 	bl	8003e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003b82:	2010      	movs	r0, #16
 8003b84:	f001 fd70 	bl	8005668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003b90:	4802      	ldr	r0, [pc, #8]	@ (8003b9c <DMA1_Stream2_IRQHandler+0x10>)
 8003b92:	f001 f923 	bl	8004ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200007dc 	.word	0x200007dc

08003ba0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ba4:	4802      	ldr	r0, [pc, #8]	@ (8003bb0 <SPI1_IRQHandler+0x10>)
 8003ba6:	f005 f897 	bl	8008cd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000488 	.word	0x20000488

08003bb4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003bb8:	4802      	ldr	r0, [pc, #8]	@ (8003bc4 <UART4_IRQHandler+0x10>)
 8003bba:	f006 fd89 	bl	800a6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000644 	.word	0x20000644

08003bc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003bcc:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <DMA2_Stream0_IRQHandler+0x10>)
 8003bce:	f001 f905 	bl	8004ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200004ec 	.word	0x200004ec

08003bdc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003be0:	4802      	ldr	r0, [pc, #8]	@ (8003bec <DMA2_Stream3_IRQHandler+0x10>)
 8003be2:	f001 f8fb 	bl	8004ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000054c 	.word	0x2000054c

08003bf0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bf4:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <DMA2_Stream4_IRQHandler+0x10>)
 8003bf6:	f001 f8f1 	bl	8004ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200003d4 	.word	0x200003d4

08003c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c08:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <OTG_FS_IRQHandler+0x10>)
 8003c0a:	f001 ffb0 	bl	8005b6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20001dc8 	.word	0x20001dc8

08003c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return 1;
 8003c1c:	2301      	movs	r3, #1
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_kill>:

int _kill(int pid, int sig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c32:	f00c fe51 	bl	80108d8 <__errno>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2216      	movs	r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <_exit>:

void _exit (int status)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffe7 	bl	8003c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <_exit+0x12>

08003c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e00a      	b.n	8003c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c70:	f3af 8000 	nop.w
 8003c74:	4601      	mov	r1, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	60ba      	str	r2, [r7, #8]
 8003c7c:	b2ca      	uxtb	r2, r1
 8003c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dbf0      	blt.n	8003c70 <_read+0x12>
  }

  return len;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e009      	b.n	8003cbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	60ba      	str	r2, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	dbf1      	blt.n	8003caa <_write+0x12>
  }
  return len;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_close>:

int _close(int file)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cf8:	605a      	str	r2, [r3, #4]
  return 0;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <_isatty>:

int _isatty(int file)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d40:	4a14      	ldr	r2, [pc, #80]	@ (8003d94 <_sbrk+0x5c>)
 8003d42:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <_sbrk+0x60>)
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d4c:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <_sbrk+0x64>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <_sbrk+0x64>)
 8003d56:	4a12      	ldr	r2, [pc, #72]	@ (8003da0 <_sbrk+0x68>)
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d5a:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <_sbrk+0x64>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d207      	bcs.n	8003d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d68:	f00c fdb6 	bl	80108d8 <__errno>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	220c      	movs	r2, #12
 8003d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e009      	b.n	8003d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d78:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d7e:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <_sbrk+0x64>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4413      	add	r3, r2
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <_sbrk+0x64>)
 8003d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20040000 	.word	0x20040000
 8003d98:	00000400 	.word	0x00000400
 8003d9c:	200008e0 	.word	0x200008e0
 8003da0:	200023f8 	.word	0x200023f8

08003da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <SystemInit+0x20>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	4a05      	ldr	r2, [pc, #20]	@ (8003dc4 <SystemInit+0x20>)
 8003db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003dcc:	f7ff ffea 	bl	8003da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dd0:	480c      	ldr	r0, [pc, #48]	@ (8003e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dd2:	490d      	ldr	r1, [pc, #52]	@ (8003e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dd8:	e002      	b.n	8003de0 <LoopCopyDataInit>

08003dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dde:	3304      	adds	r3, #4

08003de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de4:	d3f9      	bcc.n	8003dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003de6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003de8:	4c0a      	ldr	r4, [pc, #40]	@ (8003e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dec:	e001      	b.n	8003df2 <LoopFillZerobss>

08003dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df0:	3204      	adds	r2, #4

08003df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df4:	d3fb      	bcc.n	8003dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003df6:	f00c fd75 	bl	80108e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfa:	f7fe fdd7 	bl	80029ac <main>
  bx  lr    
 8003dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e00:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e08:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003e0c:	08012e40 	.word	0x08012e40
  ldr r2, =_sbss
 8003e10:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003e14:	200023f4 	.word	0x200023f4

08003e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e18:	e7fe      	b.n	8003e18 <ADC_IRQHandler>

08003e1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1e:	2003      	movs	r0, #3
 8003e20:	f000 fd82 	bl	8004928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e24:	200f      	movs	r0, #15
 8003e26:	f000 f805 	bl	8003e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e2a:	f7ff fabf 	bl	80033ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e3c:	4b12      	ldr	r3, [pc, #72]	@ (8003e88 <HAL_InitTick+0x54>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_InitTick+0x58>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fd9d 	bl	8004992 <HAL_SYSTICK_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00e      	b.n	8003e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d80a      	bhi.n	8003e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f000 fd65 	bl	800493e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e74:	4a06      	ldr	r2, [pc, #24]	@ (8003e90 <HAL_InitTick+0x5c>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	20000008 	.word	0x20000008
 8003e90:	20000004 	.word	0x20000004

08003e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_IncTick+0x20>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_IncTick+0x24>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <HAL_IncTick+0x24>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000008 	.word	0x20000008
 8003eb8:	200008e4 	.word	0x200008e4

08003ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	@ (8003ed0 <HAL_GetTick+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	200008e4 	.word	0x200008e4

08003ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003edc:	f7ff ffee 	bl	8003ebc <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d005      	beq.n	8003efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <HAL_Delay+0x44>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003efa:	bf00      	nop
 8003efc:	f7ff ffde 	bl	8003ebc <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f7      	bhi.n	8003efc <HAL_Delay+0x28>
  {
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000008 	.word	0x20000008

08003f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e031      	b.n	8003f96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fa5a 	bl	80033f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_ADC_Init+0x84>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa90 	bl	8004490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f86:	e001      	b.n	8003f8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	ffffeefd 	.word	0xffffeefd

08003fa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Start_DMA+0x22>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0d6      	b.n	8004174 <HAL_ADC_Start_DMA+0x1d0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d018      	beq.n	800400e <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003fec:	4b63      	ldr	r3, [pc, #396]	@ (800417c <HAL_ADC_Start_DMA+0x1d8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a63      	ldr	r2, [pc, #396]	@ (8004180 <HAL_ADC_Start_DMA+0x1dc>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0c9a      	lsrs	r2, r3, #18
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8004000:	e002      	b.n	8004008 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3b01      	subs	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f9      	bne.n	8004002 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	f040 809e 	bne.w	800415a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004022:	4b58      	ldr	r3, [pc, #352]	@ (8004184 <HAL_ADC_Start_DMA+0x1e0>)
 8004024:	4013      	ands	r3, r2
 8004026:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004044:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004058:	d106      	bne.n	8004068 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f023 0206 	bic.w	r2, r3, #6
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
 8004066:	e002      	b.n	800406e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	4a43      	ldr	r2, [pc, #268]	@ (8004188 <HAL_ADC_Start_DMA+0x1e4>)
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	4a42      	ldr	r2, [pc, #264]	@ (800418c <HAL_ADC_Start_DMA+0x1e8>)
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408a:	4a41      	ldr	r2, [pc, #260]	@ (8004190 <HAL_ADC_Start_DMA+0x1ec>)
 800408c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004096:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80040a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	334c      	adds	r3, #76	@ 0x4c
 80040c2:	4619      	mov	r1, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f000 fd96 	bl	8004bf8 <HAL_DMA_Start_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040d0:	4b30      	ldr	r3, [pc, #192]	@ (8004194 <HAL_ADC_Start_DMA+0x1f0>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d143      	bne.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	e03a      	b.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	@ (8004198 <HAL_ADC_Start_DMA+0x1f4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10e      	bne.n	8004124 <HAL_ADC_Start_DMA+0x180>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004122:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004124:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <HAL_ADC_Start_DMA+0x1f0>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d120      	bne.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_ADC_Start_DMA+0x1f8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d11b      	bne.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d114      	bne.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	e00b      	b.n	8004172 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f043 0210 	orr.w	r2, r3, #16
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000000 	.word	0x20000000
 8004180:	431bde83 	.word	0x431bde83
 8004184:	fffff8fe 	.word	0xfffff8fe
 8004188:	08004685 	.word	0x08004685
 800418c:	0800473f 	.word	0x0800473f
 8004190:	0800475b 	.word	0x0800475b
 8004194:	40012300 	.word	0x40012300
 8004198:	40012000 	.word	0x40012000
 800419c:	40012200 	.word	0x40012200

080041a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1c>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e13a      	b.n	800446e <HAL_ADC_ConfigChannel+0x292>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b09      	cmp	r3, #9
 8004206:	d93a      	bls.n	800427e <HAL_ADC_ConfigChannel+0xa2>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004210:	d035      	beq.n	800427e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68d9      	ldr	r1, [r3, #12]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	4613      	mov	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4413      	add	r3, r2
 8004226:	3b1e      	subs	r3, #30
 8004228:	2207      	movs	r2, #7
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	400a      	ands	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a8f      	ldr	r2, [pc, #572]	@ (800447c <HAL_ADC_ConfigChannel+0x2a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10a      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68d9      	ldr	r1, [r3, #12]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	061a      	lsls	r2, r3, #24
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004256:	e039      	b.n	80042cc <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	4603      	mov	r3, r0
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4403      	add	r3, r0
 8004270:	3b1e      	subs	r3, #30
 8004272:	409a      	lsls	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800427c:	e026      	b.n	80042cc <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6919      	ldr	r1, [r3, #16]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2207      	movs	r2, #7
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43da      	mvns	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	400a      	ands	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6919      	ldr	r1, [r3, #16]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4618      	mov	r0, r3
 80042b8:	4603      	mov	r3, r0
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4403      	add	r3, r0
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	409a      	lsls	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b06      	cmp	r3, #6
 80042d2:	d824      	bhi.n	800431e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b05      	subs	r3, #5
 80042e6:	221f      	movs	r2, #31
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43da      	mvns	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	400a      	ands	r2, r1
 80042f4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3b05      	subs	r3, #5
 8004310:	fa00 f203 	lsl.w	r2, r0, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	@ 0x34
 800431c:	e04c      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d824      	bhi.n	8004370 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	3b23      	subs	r3, #35	@ 0x23
 8004338:	221f      	movs	r2, #31
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43da      	mvns	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	400a      	ands	r2, r1
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4618      	mov	r0, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	3b23      	subs	r3, #35	@ 0x23
 8004362:	fa00 f203 	lsl.w	r2, r0, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
 800436e:	e023      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	3b41      	subs	r3, #65	@ 0x41
 8004382:	221f      	movs	r2, #31
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43da      	mvns	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	400a      	ands	r2, r1
 8004390:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	4618      	mov	r0, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	3b41      	subs	r3, #65	@ 0x41
 80043ac:	fa00 f203 	lsl.w	r2, r0, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <HAL_ADC_ConfigChannel+0x2a4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10a      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x1fc>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ca:	d105      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80043cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80043d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a28      	ldr	r2, [pc, #160]	@ (8004480 <HAL_ADC_ConfigChannel+0x2a4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10f      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x226>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b12      	cmp	r3, #18
 80043e8:	d10b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80043ea:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a25      	ldr	r2, [pc, #148]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80043f6:	4b23      	ldr	r3, [pc, #140]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a22      	ldr	r2, [pc, #136]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 80043fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004400:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_ADC_ConfigChannel+0x2a4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d12b      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x288>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1a      	ldr	r2, [pc, #104]	@ (800447c <HAL_ADC_ConfigChannel+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <HAL_ADC_ConfigChannel+0x242>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b11      	cmp	r3, #17
 800441c:	d122      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800441e:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 8004424:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004428:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800442a:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_ADC_ConfigChannel+0x2a8>)
 8004430:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004434:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a10      	ldr	r2, [pc, #64]	@ (800447c <HAL_ADC_ConfigChannel+0x2a0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d111      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <HAL_ADC_ConfigChannel+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a11      	ldr	r2, [pc, #68]	@ (800448c <HAL_ADC_ConfigChannel+0x2b0>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0c9a      	lsrs	r2, r3, #18
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004456:	e002      	b.n	800445e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3b01      	subs	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f9      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	10000012 	.word	0x10000012
 8004480:	40012000 	.word	0x40012000
 8004484:	40012300 	.word	0x40012300
 8004488:	20000000 	.word	0x20000000
 800448c:	431bde83 	.word	0x431bde83

08004490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004498:	4b78      	ldr	r3, [pc, #480]	@ (800467c <ADC_Init+0x1ec>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a77      	ldr	r2, [pc, #476]	@ (800467c <ADC_Init+0x1ec>)
 800449e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80044a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80044a4:	4b75      	ldr	r3, [pc, #468]	@ (800467c <ADC_Init+0x1ec>)
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4973      	ldr	r1, [pc, #460]	@ (800467c <ADC_Init+0x1ec>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80044e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	4a58      	ldr	r2, [pc, #352]	@ (8004680 <ADC_Init+0x1f0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6899      	ldr	r1, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6899      	ldr	r1, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	e00f      	b.n	800458a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0202 	bic.w	r2, r2, #2
 8004598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6899      	ldr	r1, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	005a      	lsls	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80045d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	3b01      	subs	r3, #1
 80045e4:	035a      	lsls	r2, r3, #13
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	e007      	b.n	8004600 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800460e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	3b01      	subs	r3, #1
 800461c:	051a      	lsls	r2, r3, #20
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004642:	025a      	lsls	r2, r3, #9
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	029a      	lsls	r2, r3, #10
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40012300 	.word	0x40012300
 8004680:	0f000001 	.word	0x0f000001

08004684 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800469a:	2b00      	cmp	r3, #0
 800469c:	d13c      	bne.n	8004718 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d12b      	bne.n	8004710 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d127      	bne.n	8004710 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d119      	bne.n	8004710 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0220 	bic.w	r2, r2, #32
 80046ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff fd45 	bl	80041a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004716:	e00e      	b.n	8004736 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff fd4f 	bl	80041c8 <HAL_ADC_ErrorCallback>
}
 800472a:	e004      	b.n	8004736 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fd31 	bl	80041b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2240      	movs	r2, #64	@ 0x40
 800476c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004772:	f043 0204 	orr.w	r2, r3, #4
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff fd24 	bl	80041c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <__NVIC_SetPriorityGrouping+0x40>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047b0:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b6:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <__NVIC_SetPriorityGrouping+0x40>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	60d3      	str	r3, [r2, #12]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00
 80047cc:	05fa0000 	.word	0x05fa0000

080047d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__NVIC_GetPriorityGrouping+0x18>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 0307 	and.w	r3, r3, #7
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db0b      	blt.n	8004816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4907      	ldr	r1, [pc, #28]	@ (8004824 <__NVIC_EnableIRQ+0x38>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2001      	movs	r0, #1
 800480e:	fa00 f202 	lsl.w	r2, r0, r2
 8004812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000e100 	.word	0xe000e100

08004828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db0a      	blt.n	8004852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	490c      	ldr	r1, [pc, #48]	@ (8004874 <__NVIC_SetPriority+0x4c>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	440b      	add	r3, r1
 800484c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004850:	e00a      	b.n	8004868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	4908      	ldr	r1, [pc, #32]	@ (8004878 <__NVIC_SetPriority+0x50>)
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	3b04      	subs	r3, #4
 8004860:	0112      	lsls	r2, r2, #4
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	440b      	add	r3, r1
 8004866:	761a      	strb	r2, [r3, #24]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	e000e100 	.word	0xe000e100
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	@ 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f1c3 0307 	rsb	r3, r3, #7
 8004896:	2b04      	cmp	r3, #4
 8004898:	bf28      	it	cs
 800489a:	2304      	movcs	r3, #4
 800489c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d902      	bls.n	80048ac <NVIC_EncodePriority+0x30>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3b03      	subs	r3, #3
 80048aa:	e000      	b.n	80048ae <NVIC_EncodePriority+0x32>
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43da      	mvns	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	401a      	ands	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c4:	f04f 31ff 	mov.w	r1, #4294967295
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	43d9      	mvns	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d4:	4313      	orrs	r3, r2
         );
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3724      	adds	r7, #36	@ 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048f4:	d301      	bcc.n	80048fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00f      	b.n	800491a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004924 <SysTick_Config+0x40>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3b01      	subs	r3, #1
 8004900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004902:	210f      	movs	r1, #15
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	f7ff ff8e 	bl	8004828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800490c:	4b05      	ldr	r3, [pc, #20]	@ (8004924 <SysTick_Config+0x40>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004912:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <SysTick_Config+0x40>)
 8004914:	2207      	movs	r2, #7
 8004916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	e000e010 	.word	0xe000e010

08004928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff29 	bl	8004788 <__NVIC_SetPriorityGrouping>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004950:	f7ff ff3e 	bl	80047d0 <__NVIC_GetPriorityGrouping>
 8004954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	6978      	ldr	r0, [r7, #20]
 800495c:	f7ff ff8e 	bl	800487c <NVIC_EncodePriority>
 8004960:	4602      	mov	r2, r0
 8004962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff5d 	bl	8004828 <__NVIC_SetPriority>
}
 800496e:	bf00      	nop
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff31 	bl	80047ec <__NVIC_EnableIRQ>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ffa2 	bl	80048e4 <SysTick_Config>
 80049a0:	4603      	mov	r3, r0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80049b0:	f3bf 8f5f 	dmb	sy
}
 80049b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80049b6:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <HAL_MPU_Disable+0x28>)
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	4a06      	ldr	r2, [pc, #24]	@ (80049d4 <HAL_MPU_Disable+0x28>)
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80049c2:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_MPU_Disable+0x2c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	605a      	str	r2, [r3, #4]
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ed00 	.word	0xe000ed00
 80049d8:	e000ed90 	.word	0xe000ed90

080049dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80049e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004a14 <HAL_MPU_Enable+0x38>)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_MPU_Enable+0x3c>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_MPU_Enable+0x3c>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80049fa:	f3bf 8f4f 	dsb	sy
}
 80049fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a00:	f3bf 8f6f 	isb	sy
}
 8004a04:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000ed90 	.word	0xe000ed90
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	785a      	ldrb	r2, [r3, #1]
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_MPU_ConfigRegion+0x7c>)
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a98 <HAL_MPU_ConfigRegion+0x7c>)
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_MPU_ConfigRegion+0x7c>)
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004a38:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <HAL_MPU_ConfigRegion+0x7c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7b1b      	ldrb	r3, [r3, #12]
 8004a44:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7adb      	ldrb	r3, [r3, #11]
 8004a4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7a9b      	ldrb	r3, [r3, #10]
 8004a52:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004a54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7b5b      	ldrb	r3, [r3, #13]
 8004a5a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004a5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7b9b      	ldrb	r3, [r3, #14]
 8004a62:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004a64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7bdb      	ldrb	r3, [r3, #15]
 8004a6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004a6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7a5b      	ldrb	r3, [r3, #9]
 8004a72:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004a74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	7a1b      	ldrb	r3, [r3, #8]
 8004a7a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004a7c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004a86:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004a88:	6113      	str	r3, [r2, #16]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed90 	.word	0xe000ed90

08004a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	f7ff fa08 	bl	8003ebc <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e099      	b.n	8004bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad8:	e00f      	b.n	8004afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ada:	f7ff f9ef 	bl	8003ebc <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d908      	bls.n	8004afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e078      	b.n	8004bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e8      	bne.n	8004ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4b38      	ldr	r3, [pc, #224]	@ (8004bf4 <HAL_DMA_Init+0x158>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d117      	bne.n	8004bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fb15 	bl	80051d0 <DMA_CheckFifoParam>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2240      	movs	r2, #64	@ 0x40
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e016      	b.n	8004bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 facc 	bl	8005164 <DMA_CalcBaseAndBitshift>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	223f      	movs	r2, #63	@ 0x3f
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e010803f 	.word	0xe010803f

08004bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_DMA_Start_IT+0x26>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e048      	b.n	8004cb0 <HAL_DMA_Start_IT+0xb8>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d137      	bne.n	8004ca2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa5e 	bl	8005108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	223f      	movs	r2, #63	@ 0x3f
 8004c52:	409a      	lsls	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0216 	orr.w	r2, r2, #22
 8004c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e005      	b.n	8004cae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
 8004cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cc6:	f7ff f8f9 	bl	8003ebc <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d008      	beq.n	8004cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2280      	movs	r2, #128	@ 0x80
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e052      	b.n	8004d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0216 	bic.w	r2, r2, #22
 8004cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <HAL_DMA_Abort+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0208 	bic.w	r2, r2, #8
 8004d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3a:	e013      	b.n	8004d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3c:	f7ff f8be 	bl	8003ebc <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d90c      	bls.n	8004d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2203      	movs	r2, #3
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e015      	b.n	8004d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e4      	bne.n	8004d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	223f      	movs	r2, #63	@ 0x3f
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d004      	beq.n	8004db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00c      	b.n	8004dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2205      	movs	r2, #5
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004de8:	4b8e      	ldr	r3, [pc, #568]	@ (8005024 <HAL_DMA_IRQHandler+0x248>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a8e      	ldr	r2, [pc, #568]	@ (8005028 <HAL_DMA_IRQHandler+0x24c>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	0a9b      	lsrs	r3, r3, #10
 8004df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e06:	2208      	movs	r2, #8
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	2208      	movs	r2, #8
 8004e36:	409a      	lsls	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d012      	beq.n	8004e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	2204      	movs	r2, #4
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	f043 0204 	orr.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	2210      	movs	r2, #16
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d043      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d03c      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d024      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e01f      	b.n	8004f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	e016      	b.n	8004f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0208 	bic.w	r2, r2, #8
 8004f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	2220      	movs	r2, #32
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 808f 	beq.w	800507c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8087 	beq.w	800507c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	2220      	movs	r2, #32
 8004f74:	409a      	lsls	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d136      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0216 	bic.w	r2, r2, #22
 8004f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x1da>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0208 	bic.w	r2, r2, #8
 8004fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fca:	223f      	movs	r2, #63	@ 0x3f
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d07e      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
        }
        return;
 8004ff2:	e079      	b.n	80050e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	2b00      	cmp	r3, #0
 8005016:	d031      	beq.n	800507c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
 8005020:	e02c      	b.n	800507c <HAL_DMA_IRQHandler+0x2a0>
 8005022:	bf00      	nop
 8005024:	20000000 	.word	0x20000000
 8005028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d023      	beq.n	800507c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
 800503c:	e01e      	b.n	800507c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0210 	bic.w	r2, r2, #16
 800505a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	2b00      	cmp	r3, #0
 8005082:	d032      	beq.n	80050ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d022      	beq.n	80050d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2205      	movs	r2, #5
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d307      	bcc.n	80050c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f2      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x2cc>
 80050c2:	e000      	b.n	80050c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
 80050e6:	e000      	b.n	80050ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80050e8:	bf00      	nop
    }
  }
}
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d108      	bne.n	8005148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005146:	e007      	b.n	8005158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	3b10      	subs	r3, #16
 8005174:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <DMA_CalcBaseAndBitshift+0x60>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d908      	bls.n	80051a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	4b0c      	ldr	r3, [pc, #48]	@ (80051cc <DMA_CalcBaseAndBitshift+0x68>)
 800519a:	4013      	ands	r3, r2
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80051a2:	e006      	b.n	80051b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <DMA_CalcBaseAndBitshift+0x68>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	aaaaaaab 	.word	0xaaaaaaab
 80051c8:	08012a68 	.word	0x08012a68
 80051cc:	fffffc00 	.word	0xfffffc00

080051d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11f      	bne.n	800522a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d856      	bhi.n	800529e <DMA_CheckFifoParam+0xce>
 80051f0:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <DMA_CheckFifoParam+0x28>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005209 	.word	0x08005209
 80051fc:	0800521b 	.word	0x0800521b
 8005200:	08005209 	.word	0x08005209
 8005204:	0800529f 	.word	0x0800529f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d046      	beq.n	80052a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e043      	b.n	80052a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005222:	d140      	bne.n	80052a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005228:	e03d      	b.n	80052a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	d121      	bne.n	8005278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d837      	bhi.n	80052aa <DMA_CheckFifoParam+0xda>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <DMA_CheckFifoParam+0x70>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005251 	.word	0x08005251
 8005244:	08005257 	.word	0x08005257
 8005248:	08005251 	.word	0x08005251
 800524c:	08005269 	.word	0x08005269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e030      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d025      	beq.n	80052ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005266:	e022      	b.n	80052ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005270:	d11f      	bne.n	80052b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005276:	e01c      	b.n	80052b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d903      	bls.n	8005286 <DMA_CheckFifoParam+0xb6>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d003      	beq.n	800528c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005284:	e018      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      break;
 800528a:	e015      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e00b      	b.n	80052b6 <DMA_CheckFifoParam+0xe6>
      break;
 800529e:	bf00      	nop
 80052a0:	e00a      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a2:	bf00      	nop
 80052a4:	e008      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a6:	bf00      	nop
 80052a8:	e006      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052aa:	bf00      	nop
 80052ac:	e004      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b6:	bf00      	nop
    }
  } 
  
  return status; 
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	@ 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e169      	b.n	80055bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052e8:	2201      	movs	r2, #1
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	f040 8158 	bne.w	80055b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d005      	beq.n	800531e <HAL_GPIO_Init+0x56>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d130      	bne.n	8005380 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	2203      	movs	r2, #3
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4313      	orrs	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005354:	2201      	movs	r2, #1
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 0201 	and.w	r2, r3, #1
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d017      	beq.n	80053bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	2203      	movs	r2, #3
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d123      	bne.n	8005410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	08da      	lsrs	r2, r3, #3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3208      	adds	r2, #8
 80053d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	220f      	movs	r2, #15
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	08da      	lsrs	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3208      	adds	r2, #8
 800540a:	69b9      	ldr	r1, [r7, #24]
 800540c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	2203      	movs	r2, #3
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0203 	and.w	r2, r3, #3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4313      	orrs	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80b2 	beq.w	80055b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	4b60      	ldr	r3, [pc, #384]	@ (80055d4 <HAL_GPIO_Init+0x30c>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	4a5f      	ldr	r2, [pc, #380]	@ (80055d4 <HAL_GPIO_Init+0x30c>)
 8005458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800545c:	6453      	str	r3, [r2, #68]	@ 0x44
 800545e:	4b5d      	ldr	r3, [pc, #372]	@ (80055d4 <HAL_GPIO_Init+0x30c>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800546a:	4a5b      	ldr	r2, [pc, #364]	@ (80055d8 <HAL_GPIO_Init+0x310>)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	3302      	adds	r3, #2
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	220f      	movs	r2, #15
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a52      	ldr	r2, [pc, #328]	@ (80055dc <HAL_GPIO_Init+0x314>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02b      	beq.n	80054ee <HAL_GPIO_Init+0x226>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a51      	ldr	r2, [pc, #324]	@ (80055e0 <HAL_GPIO_Init+0x318>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d025      	beq.n	80054ea <HAL_GPIO_Init+0x222>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a50      	ldr	r2, [pc, #320]	@ (80055e4 <HAL_GPIO_Init+0x31c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01f      	beq.n	80054e6 <HAL_GPIO_Init+0x21e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a4f      	ldr	r2, [pc, #316]	@ (80055e8 <HAL_GPIO_Init+0x320>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d019      	beq.n	80054e2 <HAL_GPIO_Init+0x21a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a4e      	ldr	r2, [pc, #312]	@ (80055ec <HAL_GPIO_Init+0x324>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_GPIO_Init+0x216>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a4d      	ldr	r2, [pc, #308]	@ (80055f0 <HAL_GPIO_Init+0x328>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00d      	beq.n	80054da <HAL_GPIO_Init+0x212>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4c      	ldr	r2, [pc, #304]	@ (80055f4 <HAL_GPIO_Init+0x32c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <HAL_GPIO_Init+0x20e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4b      	ldr	r2, [pc, #300]	@ (80055f8 <HAL_GPIO_Init+0x330>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_GPIO_Init+0x20a>
 80054ce:	2307      	movs	r3, #7
 80054d0:	e00e      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054d2:	2308      	movs	r3, #8
 80054d4:	e00c      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054d6:	2306      	movs	r3, #6
 80054d8:	e00a      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054da:	2305      	movs	r3, #5
 80054dc:	e008      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054de:	2304      	movs	r3, #4
 80054e0:	e006      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054e2:	2303      	movs	r3, #3
 80054e4:	e004      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e002      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <HAL_GPIO_Init+0x228>
 80054ee:	2300      	movs	r3, #0
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	f002 0203 	and.w	r2, r2, #3
 80054f6:	0092      	lsls	r2, r2, #2
 80054f8:	4093      	lsls	r3, r2
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005500:	4935      	ldr	r1, [pc, #212]	@ (80055d8 <HAL_GPIO_Init+0x310>)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	3302      	adds	r3, #2
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800550e:	4b3b      	ldr	r3, [pc, #236]	@ (80055fc <HAL_GPIO_Init+0x334>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005532:	4a32      	ldr	r2, [pc, #200]	@ (80055fc <HAL_GPIO_Init+0x334>)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005538:	4b30      	ldr	r3, [pc, #192]	@ (80055fc <HAL_GPIO_Init+0x334>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800555c:	4a27      	ldr	r2, [pc, #156]	@ (80055fc <HAL_GPIO_Init+0x334>)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005562:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <HAL_GPIO_Init+0x334>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005586:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <HAL_GPIO_Init+0x334>)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_GPIO_Init+0x334>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055b0:	4a12      	ldr	r2, [pc, #72]	@ (80055fc <HAL_GPIO_Init+0x334>)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3301      	adds	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	f67f ae92 	bls.w	80052e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	3724      	adds	r7, #36	@ 0x24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40013800 	.word	0x40013800
 80055dc:	40020000 	.word	0x40020000
 80055e0:	40020400 	.word	0x40020400
 80055e4:	40020800 	.word	0x40020800
 80055e8:	40020c00 	.word	0x40020c00
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40021400 	.word	0x40021400
 80055f4:	40021800 	.word	0x40021800
 80055f8:	40021c00 	.word	0x40021c00
 80055fc:	40013c00 	.word	0x40013c00

08005600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	807b      	strh	r3, [r7, #2]
 800560c:	4613      	mov	r3, r2
 800560e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005610:	787b      	ldrb	r3, [r7, #1]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005616:	887a      	ldrh	r2, [r7, #2]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800561c:	e003      	b.n	8005626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	041a      	lsls	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	619a      	str	r2, [r3, #24]
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005644:	887a      	ldrh	r2, [r7, #2]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4013      	ands	r3, r2
 800564a:	041a      	lsls	r2, r3, #16
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	43d9      	mvns	r1, r3
 8005650:	887b      	ldrh	r3, [r7, #2]
 8005652:	400b      	ands	r3, r1
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	619a      	str	r2, [r3, #24]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800567e:	4a05      	ldr	r2, [pc, #20]	@ (8005694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd f95a 	bl	8002940 <HAL_GPIO_EXTI_Callback>
  }
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40013c00 	.word	0x40013c00

08005698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e08b      	b.n	80057c2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd ff0c 	bl	80034dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2224      	movs	r2, #36	@ 0x24
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80056e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d107      	bne.n	8005712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	e006      	b.n	8005720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800571e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d108      	bne.n	800573a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	e007      	b.n	800574a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <HAL_I2C_Init+0x134>)
 8005756:	430b      	orrs	r3, r1
 8005758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	02008000 	.word	0x02008000

080057d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d138      	bne.n	8005858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e032      	b.n	800585a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	@ 0x24
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d139      	bne.n	80058f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005886:	2302      	movs	r3, #2
 8005888:	e033      	b.n	80058f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	@ 0x24
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af02      	add	r7, sp, #8
 8005904:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e108      	b.n	8005b22 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f009 fde6 	bl	800f4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2203      	movs	r2, #3
 8005934:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800593e:	d102      	bne.n	8005946 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f006 f9bf 	bl	800bcce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7c1a      	ldrb	r2, [r3, #16]
 8005958:	f88d 2000 	strb.w	r2, [sp]
 800595c:	3304      	adds	r3, #4
 800595e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005960:	f006 f876 	bl	800ba50 <USB_CoreInit>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e0d5      	b.n	8005b22 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2100      	movs	r1, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f006 f9b7 	bl	800bcf0 <USB_SetCurrentMode>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0c6      	b.n	8005b22 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e04a      	b.n	8005a30 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800599a:	7bfa      	ldrb	r2, [r7, #15]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3315      	adds	r3, #21
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3314      	adds	r3, #20
 80059be:	7bfa      	ldrb	r2, [r7, #15]
 80059c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	b298      	uxth	r0, r3
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	332e      	adds	r3, #46	@ 0x2e
 80059d6:	4602      	mov	r2, r0
 80059d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3318      	adds	r3, #24
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	331c      	adds	r3, #28
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3320      	adds	r3, #32
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a16:	7bfa      	ldrb	r2, [r7, #15]
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	3324      	adds	r3, #36	@ 0x24
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3af      	bcc.n	800599a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e044      	b.n	8005aca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a40:	7bfa      	ldrb	r2, [r7, #15]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a56:	7bfa      	ldrb	r2, [r7, #15]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005a68:	7bfa      	ldrb	r2, [r7, #15]
 8005a6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a6c:	7bfa      	ldrb	r2, [r7, #15]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b5      	bcc.n	8005a40 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7c1a      	ldrb	r2, [r3, #16]
 8005adc:	f88d 2000 	strb.w	r2, [sp]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae4:	f006 f950 	bl	800bd88 <USB_DevInit>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e013      	b.n	8005b22 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7b1b      	ldrb	r3, [r3, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 f95b 	bl	8006dcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f007 f9a5 	bl	800ce6a <USB_DevDisconnect>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_PCD_Start+0x16>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e012      	b.n	8005b66 <HAL_PCD_Start+0x3c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f006 f8ad 	bl	800bcac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f007 f966 	bl	800ce28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b6e:	b590      	push	{r4, r7, lr}
 8005b70:	b08d      	sub	sp, #52	@ 0x34
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f007 fa24 	bl	800cfd2 <USB_GetMode>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 84b9 	bne.w	8006504 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f007 f988 	bl	800ceac <USB_ReadInterrupts>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 84af 	beq.w	8006502 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f007 f975 	bl	800ceac <USB_ReadInterrupts>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d107      	bne.n	8005bdc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f002 0202 	and.w	r2, r2, #2
 8005bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f007 f963 	bl	800ceac <USB_ReadInterrupts>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d161      	bne.n	8005cb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0210 	bic.w	r2, r2, #16
 8005bfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c2a:	d124      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d035      	beq.n	8005ca4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6a38      	ldr	r0, [r7, #32]
 8005c4c:	f006 ff9a 	bl	800cb84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c5c:	441a      	add	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c6e:	441a      	add	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	e016      	b.n	8005ca4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005c7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c80:	d110      	bne.n	8005ca4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c88:	2208      	movs	r2, #8
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6a38      	ldr	r0, [r7, #32]
 8005c8e:	f006 ff79 	bl	800cb84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c9e:	441a      	add	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0210 	orr.w	r2, r2, #16
 8005cb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f007 f8f7 	bl	800ceac <USB_ReadInterrupts>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cc8:	f040 80a7 	bne.w	8005e1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f007 f8fc 	bl	800ced2 <USB_ReadDevAllOutEpInterrupt>
 8005cda:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005cdc:	e099      	b.n	8005e12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 808e 	beq.w	8005e06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f007 f920 	bl	800cf3a <USB_ReadDevOutEPInterrupt>
 8005cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d12:	461a      	mov	r2, r3
 8005d14:	2301      	movs	r3, #1
 8005d16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fed0 	bl	8006ac0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	2308      	movs	r3, #8
 8005d3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 ffa6 	bl	8006c90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d030      	beq.n	8005dcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d109      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d108      	bne.n	8005dba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2200      	movs	r2, #0
 8005dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f009 fcc5 	bl	800f744 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2302      	movs	r3, #2
 8005dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	2320      	movs	r3, #32
 8005de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	3301      	adds	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f af62 	bne.w	8005cde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f007 f844 	bl	800ceac <USB_ReadInterrupts>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e2e:	f040 80db 	bne.w	8005fe8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f007 f865 	bl	800cf06 <USB_ReadDevAllInEpInterrupt>
 8005e3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005e42:	e0cd      	b.n	8005fe0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80c2 	beq.w	8005fd4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f007 f88b 	bl	800cf76 <USB_ReadDevInEPInterrupt>
 8005e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d057      	beq.n	8005f1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2201      	movs	r2, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	799b      	ldrb	r3, [r3, #6]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d132      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3320      	adds	r3, #32
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4403      	add	r3, r0
 8005eca:	331c      	adds	r3, #28
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4419      	add	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4403      	add	r3, r0
 8005ede:	3320      	adds	r3, #32
 8005ee0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x3a2>
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3324      	adds	r3, #36	@ 0x24
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	f007 f894 	bl	800d038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f009 fb8f 	bl	800f63a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f32:	461a      	mov	r2, r3
 8005f34:	2308      	movs	r3, #8
 8005f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2310      	movs	r3, #16
 8005f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d023      	beq.n	8005fc2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f7c:	6a38      	ldr	r0, [r7, #32]
 8005f7e:	f006 f873 	bl	800c068 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	3304      	adds	r3, #4
 8005f94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	78db      	ldrb	r3, [r3, #3]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d108      	bne.n	8005fb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f009 fbdc 	bl	800f768 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fcea 	bl	80069a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f47f af2e 	bne.w	8005e44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f006 ff5d 	bl	800ceac <USB_ReadInterrupts>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ffc:	d122      	bne.n	8006044 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006018:	2b01      	cmp	r3, #1
 800601a:	d108      	bne.n	800602e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f009 fd5a 	bl	800fae0 <HAL_PCDEx_LPM_Callback>
 800602c:	e002      	b.n	8006034 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f009 fb7a 	bl	800f728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f006 ff2f 	bl	800ceac <USB_ReadInterrupts>
 800604e:	4603      	mov	r3, r0
 8006050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006058:	d112      	bne.n	8006080 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b01      	cmp	r3, #1
 8006068:	d102      	bne.n	8006070 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f009 fb36 	bl	800f6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800607e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f006 ff11 	bl	800ceac <USB_ReadInterrupts>
 800608a:	4603      	mov	r3, r0
 800608c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006094:	d121      	bne.n	80060da <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80060a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d111      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060ca:	2101      	movs	r1, #1
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f009 fd07 	bl	800fae0 <HAL_PCDEx_LPM_Callback>
 80060d2:	e002      	b.n	80060da <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f009 fb01 	bl	800f6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f006 fee4 	bl	800ceac <USB_ReadInterrupts>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ee:	f040 80b7 	bne.w	8006260 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2110      	movs	r1, #16
 800610c:	4618      	mov	r0, r3
 800610e:	f005 ffab 	bl	800c068 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006116:	e046      	b.n	80061a6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800612a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006146:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800614a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006158:	461a      	mov	r2, r3
 800615a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800615e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800617a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800617e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800619e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	3301      	adds	r3, #1
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	461a      	mov	r2, r3
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d3b2      	bcc.n	8006118 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80061c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7bdb      	ldrb	r3, [r3, #15]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061de:	f043 030b 	orr.w	r3, r3, #11
 80061e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f4:	f043 030b 	orr.w	r3, r3, #11
 80061f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061fa:	e015      	b.n	8006228 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620a:	4619      	mov	r1, r3
 800620c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006210:	4313      	orrs	r3, r2
 8006212:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006222:	f043 030b 	orr.w	r3, r3, #11
 8006226:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006236:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800623a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800624a:	461a      	mov	r2, r3
 800624c:	f006 fef4 	bl	800d038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800625e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f006 fe21 	bl	800ceac <USB_ReadInterrupts>
 800626a:	4603      	mov	r3, r0
 800626c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006274:	d123      	bne.n	80062be <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f006 feb8 	bl	800cff0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f005 ff68 	bl	800c15a <USB_GetDevSpeed>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681c      	ldr	r4, [r3, #0]
 8006296:	f001 faa3 	bl	80077e0 <HAL_RCC_GetHCLKFreq>
 800629a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062a0:	461a      	mov	r2, r3
 80062a2:	4620      	mov	r0, r4
 80062a4:	f005 fc60 	bl	800bb68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f009 f9ee 	bl	800f68a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80062bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f006 fdf2 	bl	800ceac <USB_ReadInterrupts>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d10a      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f009 f9cb 	bl	800f66e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f002 0208 	and.w	r2, r2, #8
 80062e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f006 fddd 	bl	800ceac <USB_ReadInterrupts>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f8:	2b80      	cmp	r3, #128	@ 0x80
 80062fa:	d123      	bne.n	8006344 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006308:	2301      	movs	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
 800630c:	e014      	b.n	8006338 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb0a 	bl	8006946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	3301      	adds	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	4293      	cmp	r3, r2
 8006342:	d3e4      	bcc.n	800630e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f006 fdaf 	bl	800ceac <USB_ReadInterrupts>
 800634e:	4603      	mov	r3, r0
 8006350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006358:	d13c      	bne.n	80063d4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800635a:	2301      	movs	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
 800635e:	e02b      	b.n	80063b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	3318      	adds	r3, #24
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d115      	bne.n	80063b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006386:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006388:	2b00      	cmp	r3, #0
 800638a:	da12      	bge.n	80063b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006390:	4613      	mov	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	3317      	adds	r3, #23
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 faca 	bl	8006946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	3301      	adds	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	791b      	ldrb	r3, [r3, #4]
 80063bc:	461a      	mov	r2, r3
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d3cd      	bcc.n	8006360 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80063d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f006 fd67 	bl	800ceac <USB_ReadInterrupts>
 80063de:	4603      	mov	r3, r0
 80063e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e8:	d156      	bne.n	8006498 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063ea:	2301      	movs	r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ee:	e045      	b.n	800647c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006404:	4613      	mov	r3, r2
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d12e      	bne.n	8006476 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006418:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800641a:	2b00      	cmp	r3, #0
 800641c:	da2b      	bge.n	8006476 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	0c1a      	lsrs	r2, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006428:	4053      	eors	r3, r2
 800642a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800642e:	2b00      	cmp	r3, #0
 8006430:	d121      	bne.n	8006476 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800646e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006472:	6053      	str	r3, [r2, #4]
            break;
 8006474:	e008      	b.n	8006488 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	3301      	adds	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	791b      	ldrb	r3, [r3, #4]
 8006480:	461a      	mov	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	4293      	cmp	r3, r2
 8006486:	d3b3      	bcc.n	80063f0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f006 fd05 	bl	800ceac <USB_ReadInterrupts>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ac:	d10a      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f009 f96c 	bl	800f78c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80064c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f006 fcef 	bl	800ceac <USB_ReadInterrupts>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d115      	bne.n	8006504 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f009 f95c 	bl	800f7a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	e000      	b.n	8006504 <HAL_PCD_IRQHandler+0x996>
      return;
 8006502:	bf00      	nop
    }
  }
}
 8006504:	3734      	adds	r7, #52	@ 0x34
 8006506:	46bd      	mov	sp, r7
 8006508:	bd90      	pop	{r4, r7, pc}

0800650a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_PCD_SetAddress+0x1a>
 8006520:	2302      	movs	r3, #2
 8006522:	e012      	b.n	800654a <HAL_PCD_SetAddress+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f006 fc4e 	bl	800cddc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	461a      	mov	r2, r3
 8006560:	4603      	mov	r3, r0
 8006562:	70fb      	strb	r3, [r7, #3]
 8006564:	460b      	mov	r3, r1
 8006566:	803b      	strh	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da0f      	bge.n	8006598 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	3310      	adds	r3, #16
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4413      	add	r3, r2
 800658c:	3304      	adds	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	705a      	strb	r2, [r3, #1]
 8006596:	e00f      	b.n	80065b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	f003 020f 	and.w	r2, r3, #15
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	4413      	add	r3, r2
 80065ae:	3304      	adds	r3, #4
 80065b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80065c4:	883b      	ldrh	r3, [r7, #0]
 80065c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	78ba      	ldrb	r2, [r7, #2]
 80065d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065e6:	78bb      	ldrb	r3, [r7, #2]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d102      	bne.n	80065f2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_PCD_EP_Open+0xae>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e00e      	b.n	800661e <HAL_PCD_EP_Open+0xcc>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68f9      	ldr	r1, [r7, #12]
 800660e:	4618      	mov	r0, r3
 8006610:	f005 fdc8 	bl	800c1a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800661c:	7afb      	ldrb	r3, [r7, #11]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006636:	2b00      	cmp	r3, #0
 8006638:	da0f      	bge.n	800665a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	4613      	mov	r3, r2
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	3310      	adds	r3, #16
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	3304      	adds	r3, #4
 8006650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	705a      	strb	r2, [r3, #1]
 8006658:	e00f      	b.n	800667a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	3304      	adds	r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_PCD_EP_Close+0x6e>
 8006690:	2302      	movs	r3, #2
 8006692:	e00e      	b.n	80066b2 <HAL_PCD_EP_Close+0x8c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f005 fe06 	bl	800c2b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	460b      	mov	r3, r1
 80066c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	f003 020f 	and.w	r2, r3, #15
 80066d0:	4613      	mov	r3, r2
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	3304      	adds	r3, #4
 80066e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	b2da      	uxtb	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	799b      	ldrb	r3, [r3, #6]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d102      	bne.n	8006716 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	799b      	ldrb	r3, [r3, #6]
 800671e:	461a      	mov	r2, r3
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	f005 fea3 	bl	800c46c <USB_EPStartXfer>

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006752:	681b      	ldr	r3, [r3, #0]
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	460b      	mov	r3, r1
 800676e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	f003 020f 	and.w	r2, r3, #15
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	3310      	adds	r3, #16
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2201      	movs	r2, #1
 800679e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	799b      	ldrb	r3, [r3, #6]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d102      	bne.n	80067ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	799b      	ldrb	r3, [r3, #6]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6979      	ldr	r1, [r7, #20]
 80067c6:	f005 fe51 	bl	800c46c <USB_EPStartXfer>

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	7912      	ldrb	r2, [r2, #4]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e04f      	b.n	8006892 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da0f      	bge.n	800681a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	f003 020f 	and.w	r2, r3, #15
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	3310      	adds	r3, #16
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	3304      	adds	r3, #4
 8006810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	705a      	strb	r2, [r3, #1]
 8006818:	e00d      	b.n	8006836 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	b2da      	uxtb	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_PCD_EP_SetStall+0x82>
 8006852:	2302      	movs	r3, #2
 8006854:	e01d      	b.n	8006892 <HAL_PCD_EP_SetStall+0xbe>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	4618      	mov	r0, r3
 8006866:	f006 f9e5 	bl	800cc34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7999      	ldrb	r1, [r3, #6]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006882:	461a      	mov	r2, r3
 8006884:	f006 fbd8 	bl	800d038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	7912      	ldrb	r2, [r2, #4]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e042      	b.n	800693e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da0f      	bge.n	80068e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	3310      	adds	r3, #16
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	3304      	adds	r3, #4
 80068d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	705a      	strb	r2, [r3, #1]
 80068de:	e00f      	b.n	8006900 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	f003 020f 	and.w	r2, r3, #15
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006906:	78fb      	ldrb	r3, [r7, #3]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_PCD_EP_ClrStall+0x86>
 800691c:	2302      	movs	r3, #2
 800691e:	e00e      	b.n	800693e <HAL_PCD_EP_ClrStall+0xa4>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	4618      	mov	r0, r3
 8006930:	f006 f9ee 	bl	800cd10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006956:	2b00      	cmp	r3, #0
 8006958:	da0c      	bge.n	8006974 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	f003 020f 	and.w	r2, r3, #15
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	3310      	adds	r3, #16
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	3304      	adds	r3, #4
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e00c      	b.n	800698e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	f003 020f 	and.w	r2, r3, #15
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	3304      	adds	r3, #4
 800698c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	4618      	mov	r0, r3
 8006996:	f006 f80d 	bl	800c9b4 <USB_EPStopXfer>
 800699a:	4603      	mov	r3, r0
 800699c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800699e:	7afb      	ldrb	r3, [r7, #11]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	@ 0x28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	3310      	adds	r3, #16
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d901      	bls.n	80069e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e06b      	b.n	8006ab8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d902      	bls.n	80069fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3303      	adds	r3, #3
 8006a00:	089b      	lsrs	r3, r3, #2
 8006a02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a04:	e02a      	b.n	8006a5c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3303      	adds	r3, #3
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68d9      	ldr	r1, [r3, #12]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f006 f862 	bl	800cb08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	441a      	add	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d809      	bhi.n	8006a86 <PCD_WriteEmptyTxFifo+0xde>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d203      	bcs.n	8006a86 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1bf      	bne.n	8006a06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d811      	bhi.n	8006ab6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	2201      	movs	r2, #1
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	6939      	ldr	r1, [r7, #16]
 8006aae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	333c      	adds	r3, #60	@ 0x3c
 8006ad8:	3304      	adds	r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	799b      	ldrb	r3, [r3, #6]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d17b      	bne.n	8006bee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d015      	beq.n	8006b2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4a61      	ldr	r2, [pc, #388]	@ (8006c88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	f240 80b9 	bls.w	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80b3 	beq.w	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b22:	461a      	mov	r2, r3
 8006b24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b28:	6093      	str	r3, [r2, #8]
 8006b2a:	e0a7      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b42:	461a      	mov	r2, r3
 8006b44:	2320      	movs	r3, #32
 8006b46:	6093      	str	r3, [r2, #8]
 8006b48:	e098      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 8093 	bne.w	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4a4b      	ldr	r2, [pc, #300]	@ (8006c88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d90f      	bls.n	8006b7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b74:	461a      	mov	r2, r3
 8006b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b7a:	6093      	str	r3, [r2, #8]
 8006b7c:	e07e      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4413      	add	r3, r2
 8006b90:	3304      	adds	r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	0159      	lsls	r1, r3, #5
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d114      	bne.n	8006be0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006bc8:	461a      	mov	r2, r3
 8006bca:	2101      	movs	r1, #1
 8006bcc:	f006 fa34 	bl	800d038 <USB_EP0_OutStart>
 8006bd0:	e006      	b.n	8006be0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	441a      	add	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f008 fd0c 	bl	800f604 <HAL_PCD_DataOutStageCallback>
 8006bec:	e046      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	@ (8006c8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d124      	bne.n	8006c40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c12:	6093      	str	r3, [r2, #8]
 8006c14:	e032      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2320      	movs	r3, #32
 8006c30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f008 fce3 	bl	800f604 <HAL_PCD_DataOutStageCallback>
 8006c3e:	e01d      	b.n	8006c7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d114      	bne.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d108      	bne.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	f006 f9e4 	bl	800d038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f008 fcc4 	bl	800f604 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	4f54300a 	.word	0x4f54300a
 8006c8c:	4f54310a 	.word	0x4f54310a

08006c90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	333c      	adds	r3, #60	@ 0x3c
 8006ca8:	3304      	adds	r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	@ (8006d18 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d90e      	bls.n	8006ce4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d009      	beq.n	8006ce4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f008 fc7b 	bl	800f5e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a0a      	ldr	r2, [pc, #40]	@ (8006d18 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d90c      	bls.n	8006d0c <PCD_EP_OutSetupPacket_int+0x7c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	799b      	ldrb	r3, [r3, #6]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d108      	bne.n	8006d0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d04:	461a      	mov	r2, r3
 8006d06:	2101      	movs	r1, #1
 8006d08:	f006 f996 	bl	800d038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	4f54300a 	.word	0x4f54300a

08006d1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d3a:	883b      	ldrh	r3, [r7, #0]
 8006d3c:	0419      	lsls	r1, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d48:	e028      	b.n	8006d9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	4413      	add	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e00d      	b.n	8006d7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	3340      	adds	r3, #64	@ 0x40
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	3301      	adds	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	7bfa      	ldrb	r2, [r7, #15]
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3ec      	bcc.n	8006d5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d84:	883b      	ldrh	r3, [r7, #0]
 8006d86:	0418      	lsls	r0, r3, #16
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6819      	ldr	r1, [r3, #0]
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	4302      	orrs	r2, r0
 8006d94:	3340      	adds	r3, #64	@ 0x40
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	887a      	ldrh	r2, [r7, #2]
 8006dbc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dfa:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <HAL_PCDEx_ActivateLPM+0x44>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	10000003 	.word	0x10000003

08006e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e1e:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x98>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	4a22      	ldr	r2, [pc, #136]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x98>)
 8006e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2a:	4b20      	ldr	r3, [pc, #128]	@ (8006eac <HAL_PWREx_EnableOverDrive+0x98>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e36:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e42:	f7fd f83b 	bl	8003ebc <HAL_GetTick>
 8006e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e48:	e009      	b.n	8006e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e4a:	f7fd f837 	bl	8003ebc <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e58:	d901      	bls.n	8006e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e022      	b.n	8006ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e5e:	4b14      	ldr	r3, [pc, #80]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e6a:	d1ee      	bne.n	8006e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e6c:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e78:	f7fd f820 	bl	8003ebc <HAL_GetTick>
 8006e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e7e:	e009      	b.n	8006e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e80:	f7fd f81c 	bl	8003ebc <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e8e:	d901      	bls.n	8006e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e007      	b.n	8006ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e94:	4b06      	ldr	r3, [pc, #24]	@ (8006eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea0:	d1ee      	bne.n	8006e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	40007000 	.word	0x40007000

08006eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e291      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 8087 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ed8:	4b96      	ldr	r3, [pc, #600]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d00c      	beq.n	8006efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ee4:	4b93      	ldr	r3, [pc, #588]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 030c 	and.w	r3, r3, #12
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d112      	bne.n	8006f16 <HAL_RCC_OscConfig+0x62>
 8006ef0:	4b90      	ldr	r3, [pc, #576]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006efc:	d10b      	bne.n	8006f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006efe:	4b8d      	ldr	r3, [pc, #564]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d06c      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x130>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d168      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e26b      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1e:	d106      	bne.n	8006f2e <HAL_RCC_OscConfig+0x7a>
 8006f20:	4b84      	ldr	r3, [pc, #528]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a83      	ldr	r2, [pc, #524]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e02e      	b.n	8006f8c <HAL_RCC_OscConfig+0xd8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10c      	bne.n	8006f50 <HAL_RCC_OscConfig+0x9c>
 8006f36:	4b7f      	ldr	r3, [pc, #508]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	4b7c      	ldr	r3, [pc, #496]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a7b      	ldr	r2, [pc, #492]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	e01d      	b.n	8006f8c <HAL_RCC_OscConfig+0xd8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCC_OscConfig+0xc0>
 8006f5a:	4b76      	ldr	r3, [pc, #472]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a75      	ldr	r2, [pc, #468]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4b73      	ldr	r3, [pc, #460]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a72      	ldr	r2, [pc, #456]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e00b      	b.n	8006f8c <HAL_RCC_OscConfig+0xd8>
 8006f74:	4b6f      	ldr	r3, [pc, #444]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6e      	ldr	r2, [pc, #440]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	4b6c      	ldr	r3, [pc, #432]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a6b      	ldr	r2, [pc, #428]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d013      	beq.n	8006fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fc ff92 	bl	8003ebc <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f9c:	f7fc ff8e 	bl	8003ebc <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	@ 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e21f      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fae:	4b61      	ldr	r3, [pc, #388]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0f0      	beq.n	8006f9c <HAL_RCC_OscConfig+0xe8>
 8006fba:	e014      	b.n	8006fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc ff7e 	bl	8003ebc <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc4:	f7fc ff7a 	bl	8003ebc <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b64      	cmp	r3, #100	@ 0x64
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e20b      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd6:	4b57      	ldr	r3, [pc, #348]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x110>
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d069      	beq.n	80070c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ff2:	4b50      	ldr	r3, [pc, #320]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	2b08      	cmp	r3, #8
 8007008:	d11c      	bne.n	8007044 <HAL_RCC_OscConfig+0x190>
 800700a:	4b4a      	ldr	r3, [pc, #296]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d116      	bne.n	8007044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007016:	4b47      	ldr	r3, [pc, #284]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_RCC_OscConfig+0x17a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d001      	beq.n	800702e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e1df      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702e:	4b41      	ldr	r3, [pc, #260]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	493d      	ldr	r1, [pc, #244]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800703e:	4313      	orrs	r3, r2
 8007040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007042:	e040      	b.n	80070c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d023      	beq.n	8007094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800704c:	4b39      	ldr	r3, [pc, #228]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a38      	ldr	r2, [pc, #224]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7fc ff30 	bl	8003ebc <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007060:	f7fc ff2c 	bl	8003ebc <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e1bd      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007072:	4b30      	ldr	r3, [pc, #192]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b2d      	ldr	r3, [pc, #180]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4929      	ldr	r1, [pc, #164]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
 8007092:	e018      	b.n	80070c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007094:	4b27      	ldr	r3, [pc, #156]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a26      	ldr	r2, [pc, #152]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc ff0c 	bl	8003ebc <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fc ff08 	bl	8003ebc <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e199      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d038      	beq.n	8007144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d019      	beq.n	800710e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070da:	4b16      	ldr	r3, [pc, #88]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 80070dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fc fee9 	bl	8003ebc <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ee:	f7fc fee5 	bl	8003ebc <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e176      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007100:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <HAL_RCC_OscConfig+0x23a>
 800710c:	e01a      	b.n	8007144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800710e:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007112:	4a08      	ldr	r2, [pc, #32]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711a:	f7fc fecf 	bl	8003ebc <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007120:	e00a      	b.n	8007138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007122:	f7fc fecb 	bl	8003ebc <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d903      	bls.n	8007138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e15c      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
 8007134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007138:	4b91      	ldr	r3, [pc, #580]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800713a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1ee      	bne.n	8007122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80a4 	beq.w	800729a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007152:	4b8b      	ldr	r3, [pc, #556]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800715e:	4b88      	ldr	r3, [pc, #544]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	4a87      	ldr	r2, [pc, #540]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007168:	6413      	str	r3, [r2, #64]	@ 0x40
 800716a:	4b85      	ldr	r3, [pc, #532]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007172:	60bb      	str	r3, [r7, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007176:	2301      	movs	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800717a:	4b82      	ldr	r3, [pc, #520]	@ (8007384 <HAL_RCC_OscConfig+0x4d0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007182:	2b00      	cmp	r3, #0
 8007184:	d118      	bne.n	80071b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007186:	4b7f      	ldr	r3, [pc, #508]	@ (8007384 <HAL_RCC_OscConfig+0x4d0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a7e      	ldr	r2, [pc, #504]	@ (8007384 <HAL_RCC_OscConfig+0x4d0>)
 800718c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007192:	f7fc fe93 	bl	8003ebc <HAL_GetTick>
 8007196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800719a:	f7fc fe8f 	bl	8003ebc <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b64      	cmp	r3, #100	@ 0x64
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e120      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ac:	4b75      	ldr	r3, [pc, #468]	@ (8007384 <HAL_RCC_OscConfig+0x4d0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d106      	bne.n	80071ce <HAL_RCC_OscConfig+0x31a>
 80071c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80071cc:	e02d      	b.n	800722a <HAL_RCC_OscConfig+0x376>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCC_OscConfig+0x33c>
 80071d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071da:	4a69      	ldr	r2, [pc, #420]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e2:	4b67      	ldr	r3, [pc, #412]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	4a66      	ldr	r2, [pc, #408]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071e8:	f023 0304 	bic.w	r3, r3, #4
 80071ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ee:	e01c      	b.n	800722a <HAL_RCC_OscConfig+0x376>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d10c      	bne.n	8007212 <HAL_RCC_OscConfig+0x35e>
 80071f8:	4b61      	ldr	r3, [pc, #388]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fc:	4a60      	ldr	r2, [pc, #384]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80071fe:	f043 0304 	orr.w	r3, r3, #4
 8007202:	6713      	str	r3, [r2, #112]	@ 0x70
 8007204:	4b5e      	ldr	r3, [pc, #376]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007208:	4a5d      	ldr	r2, [pc, #372]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007210:	e00b      	b.n	800722a <HAL_RCC_OscConfig+0x376>
 8007212:	4b5b      	ldr	r3, [pc, #364]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007216:	4a5a      	ldr	r2, [pc, #360]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6713      	str	r3, [r2, #112]	@ 0x70
 800721e:	4b58      	ldr	r3, [pc, #352]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007222:	4a57      	ldr	r2, [pc, #348]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007224:	f023 0304 	bic.w	r3, r3, #4
 8007228:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d015      	beq.n	800725e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007232:	f7fc fe43 	bl	8003ebc <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007238:	e00a      	b.n	8007250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723a:	f7fc fe3f 	bl	8003ebc <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007248:	4293      	cmp	r3, r2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e0ce      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007250:	4b4b      	ldr	r3, [pc, #300]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0ee      	beq.n	800723a <HAL_RCC_OscConfig+0x386>
 800725c:	e014      	b.n	8007288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725e:	f7fc fe2d 	bl	8003ebc <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007264:	e00a      	b.n	800727c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007266:	f7fc fe29 	bl	8003ebc <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007274:	4293      	cmp	r3, r2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e0b8      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800727c:	4b40      	ldr	r3, [pc, #256]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800727e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1ee      	bne.n	8007266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d105      	bne.n	800729a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800728e:	4b3c      	ldr	r3, [pc, #240]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	4a3b      	ldr	r2, [pc, #236]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007298:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80a4 	beq.w	80073ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072a4:	4b36      	ldr	r3, [pc, #216]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d06b      	beq.n	8007388 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d149      	bne.n	800734c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b8:	4b31      	ldr	r3, [pc, #196]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fc fdfa 	bl	8003ebc <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072cc:	f7fc fdf6 	bl	8003ebc <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e087      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072de:	4b28      	ldr	r3, [pc, #160]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f0      	bne.n	80072cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69da      	ldr	r2, [r3, #28]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	019b      	lsls	r3, r3, #6
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007300:	085b      	lsrs	r3, r3, #1
 8007302:	3b01      	subs	r3, #1
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	4313      	orrs	r3, r2
 8007310:	4a1b      	ldr	r2, [pc, #108]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007312:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007316:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007318:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800731e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fc fdca 	bl	8003ebc <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800732c:	f7fc fdc6 	bl	8003ebc <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e057      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733e:	4b10      	ldr	r3, [pc, #64]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x478>
 800734a:	e04f      	b.n	80073ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734c:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0b      	ldr	r2, [pc, #44]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fc fdb0 	bl	8003ebc <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007360:	f7fc fdac 	bl	8003ebc <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e03d      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007372:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <HAL_RCC_OscConfig+0x4cc>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0x4ac>
 800737e:	e035      	b.n	80073ec <HAL_RCC_OscConfig+0x538>
 8007380:	40023800 	.word	0x40023800
 8007384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <HAL_RCC_OscConfig+0x544>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d028      	beq.n	80073e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d121      	bne.n	80073e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d11a      	bne.n	80073e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d111      	bne.n	80073e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	3b01      	subs	r3, #1
 80073d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d001      	beq.n	80073ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800

080073fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e0d0      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007414:	4b6a      	ldr	r3, [pc, #424]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d910      	bls.n	8007444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007422:	4b67      	ldr	r3, [pc, #412]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 020f 	bic.w	r2, r3, #15
 800742a:	4965      	ldr	r1, [pc, #404]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007432:	4b63      	ldr	r3, [pc, #396]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0b8      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800745c:	4b59      	ldr	r3, [pc, #356]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4a58      	ldr	r2, [pc, #352]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 8007462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007474:	4b53      	ldr	r3, [pc, #332]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a52      	ldr	r2, [pc, #328]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800747a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800747e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007480:	4b50      	ldr	r3, [pc, #320]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	494d      	ldr	r1, [pc, #308]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d040      	beq.n	8007520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d107      	bne.n	80074b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074a6:	4b47      	ldr	r3, [pc, #284]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d115      	bne.n	80074de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e07f      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d107      	bne.n	80074ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074be:	4b41      	ldr	r3, [pc, #260]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e073      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ce:	4b3d      	ldr	r3, [pc, #244]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e06b      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074de:	4b39      	ldr	r3, [pc, #228]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 0203 	bic.w	r2, r3, #3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4936      	ldr	r1, [pc, #216]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f0:	f7fc fce4 	bl	8003ebc <HAL_GetTick>
 80074f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f6:	e00a      	b.n	800750e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f8:	f7fc fce0 	bl	8003ebc <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e053      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750e:	4b2d      	ldr	r3, [pc, #180]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 020c 	and.w	r2, r3, #12
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	429a      	cmp	r2, r3
 800751e:	d1eb      	bne.n	80074f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007520:	4b27      	ldr	r3, [pc, #156]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d210      	bcs.n	8007550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752e:	4b24      	ldr	r3, [pc, #144]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f023 020f 	bic.w	r2, r3, #15
 8007536:	4922      	ldr	r1, [pc, #136]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	4313      	orrs	r3, r2
 800753c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800753e:	4b20      	ldr	r3, [pc, #128]	@ (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e032      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800755c:	4b19      	ldr	r3, [pc, #100]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4916      	ldr	r1, [pc, #88]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800756a:	4313      	orrs	r3, r2
 800756c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	490e      	ldr	r1, [pc, #56]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800758e:	f000 f821 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 8007592:	4602      	mov	r2, r0
 8007594:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	490a      	ldr	r1, [pc, #40]	@ (80075c8 <HAL_RCC_ClockConfig+0x1cc>)
 80075a0:	5ccb      	ldrb	r3, [r1, r3]
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	4a09      	ldr	r2, [pc, #36]	@ (80075cc <HAL_RCC_ClockConfig+0x1d0>)
 80075a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075aa:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <HAL_RCC_ClockConfig+0x1d4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fc fc40 	bl	8003e34 <HAL_InitTick>

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40023c00 	.word	0x40023c00
 80075c4:	40023800 	.word	0x40023800
 80075c8:	08012a50 	.word	0x08012a50
 80075cc:	20000000 	.word	0x20000000
 80075d0:	20000004 	.word	0x20000004

080075d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075d8:	b094      	sub	sp, #80	@ 0x50
 80075da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e0:	2300      	movs	r3, #0
 80075e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e4:	2300      	movs	r3, #0
 80075e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ec:	4b79      	ldr	r3, [pc, #484]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 030c 	and.w	r3, r3, #12
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d00d      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0x40>
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	f200 80e1 	bhi.w	80077c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_RCC_GetSysClockFreq+0x34>
 8007602:	2b04      	cmp	r3, #4
 8007604:	d003      	beq.n	800760e <HAL_RCC_GetSysClockFreq+0x3a>
 8007606:	e0db      	b.n	80077c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007608:	4b73      	ldr	r3, [pc, #460]	@ (80077d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800760a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800760c:	e0db      	b.n	80077c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800760e:	4b73      	ldr	r3, [pc, #460]	@ (80077dc <HAL_RCC_GetSysClockFreq+0x208>)
 8007610:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007612:	e0d8      	b.n	80077c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007614:	4b6f      	ldr	r3, [pc, #444]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800761c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800761e:	4b6d      	ldr	r3, [pc, #436]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d063      	beq.n	80076f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800762a:	4b6a      	ldr	r3, [pc, #424]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	099b      	lsrs	r3, r3, #6
 8007630:	2200      	movs	r2, #0
 8007632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007634:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763c:	633b      	str	r3, [r7, #48]	@ 0x30
 800763e:	2300      	movs	r3, #0
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
 8007642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	f04f 0000 	mov.w	r0, #0
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	0159      	lsls	r1, r3, #5
 8007654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007658:	0150      	lsls	r0, r2, #5
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4621      	mov	r1, r4
 8007660:	1a51      	subs	r1, r2, r1
 8007662:	6139      	str	r1, [r7, #16]
 8007664:	4629      	mov	r1, r5
 8007666:	eb63 0301 	sbc.w	r3, r3, r1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007678:	4659      	mov	r1, fp
 800767a:	018b      	lsls	r3, r1, #6
 800767c:	4651      	mov	r1, sl
 800767e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007682:	4651      	mov	r1, sl
 8007684:	018a      	lsls	r2, r1, #6
 8007686:	4651      	mov	r1, sl
 8007688:	ebb2 0801 	subs.w	r8, r2, r1
 800768c:	4659      	mov	r1, fp
 800768e:	eb63 0901 	sbc.w	r9, r3, r1
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800769e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076a6:	4690      	mov	r8, r2
 80076a8:	4699      	mov	r9, r3
 80076aa:	4623      	mov	r3, r4
 80076ac:	eb18 0303 	adds.w	r3, r8, r3
 80076b0:	60bb      	str	r3, [r7, #8]
 80076b2:	462b      	mov	r3, r5
 80076b4:	eb49 0303 	adc.w	r3, r9, r3
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076c6:	4629      	mov	r1, r5
 80076c8:	024b      	lsls	r3, r1, #9
 80076ca:	4621      	mov	r1, r4
 80076cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076d0:	4621      	mov	r1, r4
 80076d2:	024a      	lsls	r2, r1, #9
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076da:	2200      	movs	r2, #0
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076e4:	f7f9 faf8 	bl	8000cd8 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4613      	mov	r3, r2
 80076ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076f0:	e058      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f2:	4b38      	ldr	r3, [pc, #224]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	2200      	movs	r2, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	4611      	mov	r1, r2
 80076fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007702:	623b      	str	r3, [r7, #32]
 8007704:	2300      	movs	r3, #0
 8007706:	627b      	str	r3, [r7, #36]	@ 0x24
 8007708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	f04f 0000 	mov.w	r0, #0
 8007714:	f04f 0100 	mov.w	r1, #0
 8007718:	0159      	lsls	r1, r3, #5
 800771a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800771e:	0150      	lsls	r0, r2, #5
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4641      	mov	r1, r8
 8007726:	ebb2 0a01 	subs.w	sl, r2, r1
 800772a:	4649      	mov	r1, r9
 800772c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800773c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007744:	ebb2 040a 	subs.w	r4, r2, sl
 8007748:	eb63 050b 	sbc.w	r5, r3, fp
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	00eb      	lsls	r3, r5, #3
 8007756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800775a:	00e2      	lsls	r2, r4, #3
 800775c:	4614      	mov	r4, r2
 800775e:	461d      	mov	r5, r3
 8007760:	4643      	mov	r3, r8
 8007762:	18e3      	adds	r3, r4, r3
 8007764:	603b      	str	r3, [r7, #0]
 8007766:	464b      	mov	r3, r9
 8007768:	eb45 0303 	adc.w	r3, r5, r3
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800777a:	4629      	mov	r1, r5
 800777c:	028b      	lsls	r3, r1, #10
 800777e:	4621      	mov	r1, r4
 8007780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007784:	4621      	mov	r1, r4
 8007786:	028a      	lsls	r2, r1, #10
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800778e:	2200      	movs	r2, #0
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	61fa      	str	r2, [r7, #28]
 8007794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007798:	f7f9 fa9e 	bl	8000cd8 <__aeabi_uldivmod>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4613      	mov	r3, r2
 80077a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077a4:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	3301      	adds	r3, #1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077be:	e002      	b.n	80077c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3750      	adds	r7, #80	@ 0x50
 80077cc:	46bd      	mov	sp, r7
 80077ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077d2:	bf00      	nop
 80077d4:	40023800 	.word	0x40023800
 80077d8:	00f42400 	.word	0x00f42400
 80077dc:	007a1200 	.word	0x007a1200

080077e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077e4:	4b03      	ldr	r3, [pc, #12]	@ (80077f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80077e6:	681b      	ldr	r3, [r3, #0]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000000 	.word	0x20000000

080077f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077fc:	f7ff fff0 	bl	80077e0 <HAL_RCC_GetHCLKFreq>
 8007800:	4602      	mov	r2, r0
 8007802:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	0a9b      	lsrs	r3, r3, #10
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	4903      	ldr	r1, [pc, #12]	@ (800781c <HAL_RCC_GetPCLK1Freq+0x24>)
 800780e:	5ccb      	ldrb	r3, [r1, r3]
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	08012a60 	.word	0x08012a60

08007820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007824:	f7ff ffdc 	bl	80077e0 <HAL_RCC_GetHCLKFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	0b5b      	lsrs	r3, r3, #13
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	4903      	ldr	r1, [pc, #12]	@ (8007844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40023800 	.word	0x40023800
 8007844:	08012a60 	.word	0x08012a60

08007848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007854:	2300      	movs	r3, #0
 8007856:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d012      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800786c:	4b65      	ldr	r3, [pc, #404]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4a64      	ldr	r2, [pc, #400]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007872:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007876:	6093      	str	r3, [r2, #8]
 8007878:	4b62      	ldr	r3, [pc, #392]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	4960      	ldr	r1, [pc, #384]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800789e:	4b59      	ldr	r3, [pc, #356]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ac:	4955      	ldr	r1, [pc, #340]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078bc:	d101      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80078be:	2301      	movs	r3, #1
 80078c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078da:	4b4a      	ldr	r3, [pc, #296]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	4946      	ldr	r1, [pc, #280]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078f8:	d101      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8007906:	2301      	movs	r3, #1
 8007908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 808b 	beq.w	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007918:	4b3a      	ldr	r3, [pc, #232]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800791a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791c:	4a39      	ldr	r2, [pc, #228]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007922:	6413      	str	r3, [r2, #64]	@ 0x40
 8007924:	4b37      	ldr	r3, [pc, #220]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007930:	4b35      	ldr	r3, [pc, #212]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a34      	ldr	r2, [pc, #208]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800793a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fc fabe 	bl	8003ebc <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007944:	f7fc faba 	bl	8003ebc <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	@ 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e2bc      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007956:	4b2c      	ldr	r3, [pc, #176]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007962:	4b28      	ldr	r3, [pc, #160]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d035      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	429a      	cmp	r2, r3
 800797e:	d02e      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007980:	4b20      	ldr	r3, [pc, #128]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800798a:	4b1e      	ldr	r3, [pc, #120]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	4a1d      	ldr	r2, [pc, #116]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007994:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007996:	4b1b      	ldr	r3, [pc, #108]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	4a1a      	ldr	r2, [pc, #104]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800799c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079a2:	4a18      	ldr	r2, [pc, #96]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079a8:	4b16      	ldr	r3, [pc, #88]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d114      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fc fa82 	bl	8003ebc <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ba:	e00a      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079bc:	f7fc fa7e 	bl	8003ebc <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e27e      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ee      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ea:	d111      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80079fa:	400b      	ands	r3, r1
 80079fc:	4901      	ldr	r1, [pc, #4]	@ (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	e00b      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007a04:	40023800 	.word	0x40023800
 8007a08:	40007000 	.word	0x40007000
 8007a0c:	0ffffcff 	.word	0x0ffffcff
 8007a10:	4ba4      	ldr	r3, [pc, #656]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4aa3      	ldr	r2, [pc, #652]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a16:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a1a:	6093      	str	r3, [r2, #8]
 8007a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	499e      	ldr	r1, [pc, #632]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a3a:	4b9a      	ldr	r3, [pc, #616]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a40:	4a98      	ldr	r2, [pc, #608]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a4a:	4b96      	ldr	r3, [pc, #600]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	4993      	ldr	r1, [pc, #588]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a68:	4b8e      	ldr	r3, [pc, #568]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a76:	498b      	ldr	r1, [pc, #556]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a8a:	4b86      	ldr	r3, [pc, #536]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a98:	4982      	ldr	r1, [pc, #520]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007aac:	4b7d      	ldr	r3, [pc, #500]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aba:	497a      	ldr	r1, [pc, #488]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ace:	4b75      	ldr	r3, [pc, #468]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad4:	f023 0203 	bic.w	r2, r3, #3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007adc:	4971      	ldr	r1, [pc, #452]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007af0:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af6:	f023 020c 	bic.w	r2, r3, #12
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afe:	4969      	ldr	r1, [pc, #420]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b12:	4b64      	ldr	r3, [pc, #400]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b20:	4960      	ldr	r1, [pc, #384]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b34:	4b5b      	ldr	r3, [pc, #364]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b42:	4958      	ldr	r1, [pc, #352]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b56:	4b53      	ldr	r3, [pc, #332]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b64:	494f      	ldr	r1, [pc, #316]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b78:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b86:	4947      	ldr	r1, [pc, #284]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b9a:	4b42      	ldr	r3, [pc, #264]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba8:	493e      	ldr	r1, [pc, #248]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bbc:	4b39      	ldr	r3, [pc, #228]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bca:	4936      	ldr	r1, [pc, #216]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d011      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bde:	4b31      	ldr	r3, [pc, #196]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bec:	492d      	ldr	r1, [pc, #180]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfc:	d101      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0e:	4b25      	ldr	r3, [pc, #148]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c14:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c1c:	4921      	ldr	r1, [pc, #132]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c30:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c3e:	4919      	ldr	r1, [pc, #100]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c52:	4b14      	ldr	r3, [pc, #80]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c60:	4910      	ldr	r1, [pc, #64]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d006      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 809d 	beq.w	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a08      	ldr	r2, [pc, #32]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007c82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c88:	f7fc f918 	bl	8003ebc <HAL_GetTick>
 8007c8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c8e:	e00b      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c90:	f7fc f914 	bl	8003ebc <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	@ 0x64
 8007c9c:	d904      	bls.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e116      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca8:	4b8b      	ldr	r3, [pc, #556]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ed      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d017      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d113      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cc8:	4b83      	ldr	r3, [pc, #524]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	019a      	lsls	r2, r3, #6
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	071b      	lsls	r3, r3, #28
 8007ce8:	497b      	ldr	r1, [pc, #492]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d04:	d00a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d024      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d1a:	d11f      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d22:	0f1b      	lsrs	r3, r3, #28
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	019a      	lsls	r2, r3, #6
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	061b      	lsls	r3, r3, #24
 8007d36:	431a      	orrs	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	071b      	lsls	r3, r3, #28
 8007d3c:	4966      	ldr	r1, [pc, #408]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d44:	4b64      	ldr	r3, [pc, #400]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d4a:	f023 021f 	bic.w	r2, r3, #31
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4960      	ldr	r1, [pc, #384]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	019a      	lsls	r2, r3, #6
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	061b      	lsls	r3, r3, #24
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	071b      	lsls	r3, r3, #28
 8007d7c:	4956      	ldr	r1, [pc, #344]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d84:	4b54      	ldr	r3, [pc, #336]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a53      	ldr	r2, [pc, #332]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d90:	f7fc f894 	bl	8003ebc <HAL_GetTick>
 8007d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d96:	e008      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d98:	f7fc f890 	bl	8003ebc <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b64      	cmp	r3, #100	@ 0x64
 8007da4:	d901      	bls.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e092      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007daa:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f0      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	f040 8088 	bne.w	8007ece <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007dbe:	4b46      	ldr	r3, [pc, #280]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a45      	ldr	r2, [pc, #276]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dca:	f7fc f877 	bl	8003ebc <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dd2:	f7fc f873 	bl	8003ebc <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b64      	cmp	r3, #100	@ 0x64
 8007dde:	d901      	bls.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e075      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007de4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df0:	d0ef      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d024      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d120      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	019a      	lsls	r2, r3, #6
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	4927      	ldr	r1, [pc, #156]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e42:	4b25      	ldr	r3, [pc, #148]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	4920      	ldr	r1, [pc, #128]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d018      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e70:	d113      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e78:	0e1b      	lsrs	r3, r3, #24
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	019a      	lsls	r2, r3, #6
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	041b      	lsls	r3, r3, #16
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	4911      	ldr	r1, [pc, #68]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea6:	f7fc f809 	bl	8003ebc <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eac:	e008      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eae:	f7fc f805 	bl	8003ebc <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b64      	cmp	r3, #100	@ 0x64
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e007      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ec0:	4b05      	ldr	r3, [pc, #20]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ecc:	d1ef      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40023800 	.word	0x40023800

08007edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e09d      	b.n	800802a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d108      	bne.n	8007f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007efe:	d009      	beq.n	8007f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	61da      	str	r2, [r3, #28]
 8007f06:	e005      	b.n	8007f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fb fb32 	bl	8003598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f54:	d902      	bls.n	8007f5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e002      	b.n	8007f62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007f6a:	d007      	beq.n	8007f7c <HAL_SPI_Init+0xa0>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f74:	d002      	beq.n	8007f7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fbe:	ea42 0103 	orr.w	r1, r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	f003 0204 	and.w	r2, r3, #4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ff8:	ea42 0103 	orr.w	r1, r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b088      	sub	sp, #32
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008042:	f7fb ff3b 	bl	8003ebc <HAL_GetTick>
 8008046:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d001      	beq.n	800805c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
 800805a:	e15c      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <HAL_SPI_Transmit+0x36>
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e154      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_SPI_Transmit+0x48>
 8008076:	2302      	movs	r3, #2
 8008078:	e14d      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080cc:	d10f      	bne.n	80080ee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f8:	2b40      	cmp	r3, #64	@ 0x40
 80080fa:	d007      	beq.n	800810c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800810a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008114:	d952      	bls.n	80081bc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_SPI_Transmit+0xf2>
 800811e:	8b7b      	ldrh	r3, [r7, #26]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d145      	bne.n	80081b0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	881a      	ldrh	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	1c9a      	adds	r2, r3, #2
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813e:	b29b      	uxth	r3, r3
 8008140:	3b01      	subs	r3, #1
 8008142:	b29a      	uxth	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008148:	e032      	b.n	80081b0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b02      	cmp	r3, #2
 8008156:	d112      	bne.n	800817e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	881a      	ldrh	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008168:	1c9a      	adds	r2, r3, #2
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800817c:	e018      	b.n	80081b0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800817e:	f7fb fe9d 	bl	8003ebc <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d803      	bhi.n	8008196 <HAL_SPI_Transmit+0x164>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008194:	d102      	bne.n	800819c <HAL_SPI_Transmit+0x16a>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d109      	bne.n	80081b0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e0b2      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1c7      	bne.n	800814a <HAL_SPI_Transmit+0x118>
 80081ba:	e083      	b.n	80082c4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_SPI_Transmit+0x198>
 80081c4:	8b7b      	ldrh	r3, [r7, #26]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d177      	bne.n	80082ba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d912      	bls.n	80081fa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	881a      	ldrh	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e4:	1c9a      	adds	r2, r3, #2
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b02      	subs	r3, #2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081f8:	e05f      	b.n	80082ba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008220:	e04b      	b.n	80082ba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d12b      	bne.n	8008288 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d912      	bls.n	8008260 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	881a      	ldrh	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824a:	1c9a      	adds	r2, r3, #2
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b02      	subs	r3, #2
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800825e:	e02c      	b.n	80082ba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008286:	e018      	b.n	80082ba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008288:	f7fb fe18 	bl	8003ebc <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d803      	bhi.n	80082a0 <HAL_SPI_Transmit+0x26e>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d102      	bne.n	80082a6 <HAL_SPI_Transmit+0x274>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e02d      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1ae      	bne.n	8008222 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f001 f8b7 	bl	800943c <SPI_EndRxTxTransaction>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008314:	2300      	movs	r3, #0
  }
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af02      	add	r7, sp, #8
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	4613      	mov	r3, r2
 800832c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b01      	cmp	r3, #1
 8008338:	d001      	beq.n	800833e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800833a:	2302      	movs	r3, #2
 800833c:	e123      	b.n	8008586 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <HAL_SPI_Receive+0x2c>
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e11b      	b.n	8008586 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008356:	d112      	bne.n	800837e <HAL_SPI_Receive+0x60>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10e      	bne.n	800837e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2204      	movs	r2, #4
 8008364:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008368:	88fa      	ldrh	r2, [r7, #6]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 f90a 	bl	800858e <HAL_SPI_TransmitReceive>
 800837a:	4603      	mov	r3, r0
 800837c:	e103      	b.n	8008586 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800837e:	f7fb fd9d 	bl	8003ebc <HAL_GetTick>
 8008382:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_SPI_Receive+0x74>
 800838e:	2302      	movs	r3, #2
 8008390:	e0f9      	b.n	8008586 <HAL_SPI_Receive+0x268>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2204      	movs	r2, #4
 800839e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083e4:	d908      	bls.n	80083f8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	e007      	b.n	8008408 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008406:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008410:	d10f      	bne.n	8008432 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d007      	beq.n	8008450 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800844e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008458:	d875      	bhi.n	8008546 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800845a:	e037      	b.n	80084cc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d117      	bne.n	800849a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f103 020c 	add.w	r2, r3, #12
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	b2d2      	uxtb	r2, r2
 800847a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008498:	e018      	b.n	80084cc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800849a:	f7fb fd0f 	bl	8003ebc <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d803      	bhi.n	80084b2 <HAL_SPI_Receive+0x194>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b0:	d102      	bne.n	80084b8 <HAL_SPI_Receive+0x19a>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d109      	bne.n	80084cc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e05c      	b.n	8008586 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1c1      	bne.n	800845c <HAL_SPI_Receive+0x13e>
 80084d8:	e03b      	b.n	8008552 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d115      	bne.n	8008514 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	b292      	uxth	r2, r2
 80084f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008512:	e018      	b.n	8008546 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008514:	f7fb fcd2 	bl	8003ebc <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d803      	bhi.n	800852c <HAL_SPI_Receive+0x20e>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d102      	bne.n	8008532 <HAL_SPI_Receive+0x214>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e01f      	b.n	8008586 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1c3      	bne.n	80084da <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fef4 	bl	8009344 <SPI_EndRxTransaction>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8008584:	2300      	movs	r3, #0
  }
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b08a      	sub	sp, #40	@ 0x28
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800859c:	2301      	movs	r3, #1
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085a0:	f7fb fc8c 	bl	8003ebc <HAL_GetTick>
 80085a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80085b4:	887b      	ldrh	r3, [r7, #2]
 80085b6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085bc:	7ffb      	ldrb	r3, [r7, #31]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d00c      	beq.n	80085dc <HAL_SPI_TransmitReceive+0x4e>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085c8:	d106      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x4a>
 80085d2:	7ffb      	ldrb	r3, [r7, #31]
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d001      	beq.n	80085dc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
 80085da:	e1f3      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <HAL_SPI_TransmitReceive+0x60>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <HAL_SPI_TransmitReceive+0x60>
 80085e8:	887b      	ldrh	r3, [r7, #2]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e1e8      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_SPI_TransmitReceive+0x72>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e1e1      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b04      	cmp	r3, #4
 8008612:	d003      	beq.n	800861c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2205      	movs	r2, #5
 8008618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	887a      	ldrh	r2, [r7, #2]
 800862c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	887a      	ldrh	r2, [r7, #2]
 8008634:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	887a      	ldrh	r2, [r7, #2]
 8008642:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	887a      	ldrh	r2, [r7, #2]
 8008648:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800865e:	d802      	bhi.n	8008666 <HAL_SPI_TransmitReceive+0xd8>
 8008660:	8abb      	ldrh	r3, [r7, #20]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d908      	bls.n	8008678 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	e007      	b.n	8008688 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d007      	beq.n	80086a6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086ae:	f240 8083 	bls.w	80087b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_SPI_TransmitReceive+0x132>
 80086ba:	8afb      	ldrh	r3, [r7, #22]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d16f      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c4:	881a      	ldrh	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	1c9a      	adds	r2, r3, #2
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e4:	e05c      	b.n	80087a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d11b      	bne.n	800872c <HAL_SPI_TransmitReceive+0x19e>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d016      	beq.n	800872c <HAL_SPI_TransmitReceive+0x19e>
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	2b01      	cmp	r3, #1
 8008702:	d113      	bne.n	800872c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	881a      	ldrh	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	1c9a      	adds	r2, r3, #2
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b01      	cmp	r3, #1
 8008738:	d11c      	bne.n	8008774 <HAL_SPI_TransmitReceive+0x1e6>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008750:	b292      	uxth	r2, r2
 8008752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008758:	1c9a      	adds	r2, r3, #2
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008774:	f7fb fba2 	bl	8003ebc <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008780:	429a      	cmp	r2, r3
 8008782:	d80d      	bhi.n	80087a0 <HAL_SPI_TransmitReceive+0x212>
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d009      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e111      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d19d      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x158>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d197      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x158>
 80087b6:	e0e5      	b.n	8008984 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <HAL_SPI_TransmitReceive+0x23a>
 80087c0:	8afb      	ldrh	r3, [r7, #22]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	f040 80d1 	bne.w	800896a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d912      	bls.n	80087f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	881a      	ldrh	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e2:	1c9a      	adds	r2, r3, #2
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b02      	subs	r3, #2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087f6:	e0b8      	b.n	800896a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800881e:	e0a4      	b.n	800896a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b02      	cmp	r3, #2
 800882c:	d134      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x30a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02f      	beq.n	8008898 <HAL_SPI_TransmitReceive+0x30a>
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	2b01      	cmp	r3, #1
 800883c:	d12c      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b01      	cmp	r3, #1
 8008846:	d912      	bls.n	800886e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008858:	1c9a      	adds	r2, r3, #2
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b02      	subs	r3, #2
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800886c:	e012      	b.n	8008894 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	330c      	adds	r3, #12
 8008878:	7812      	ldrb	r2, [r2, #0]
 800887a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d148      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x3aa>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d042      	beq.n	8008938 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d923      	bls.n	8008906 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	b292      	uxth	r2, r2
 80088ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d0:	1c9a      	adds	r2, r3, #2
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b02      	subs	r3, #2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d81f      	bhi.n	8008934 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008902:	605a      	str	r2, [r3, #4]
 8008904:	e016      	b.n	8008934 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f103 020c 	add.w	r2, r3, #12
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008934:	2301      	movs	r3, #1
 8008936:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008938:	f7fb fac0 	bl	8003ebc <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008944:	429a      	cmp	r2, r3
 8008946:	d803      	bhi.n	8008950 <HAL_SPI_TransmitReceive+0x3c2>
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d102      	bne.n	8008956 <HAL_SPI_TransmitReceive+0x3c8>
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e02c      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	f47f af55 	bne.w	8008820 <HAL_SPI_TransmitReceive+0x292>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	f47f af4e 	bne.w	8008820 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008984:	6a3a      	ldr	r2, [r7, #32]
 8008986:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fd57 	bl	800943c <SPI_EndRxTxTransaction>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2220      	movs	r2, #32
 8008998:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e00e      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80089c2:	2300      	movs	r3, #0
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3728      	adds	r7, #40	@ 0x28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089e0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d00c      	beq.n	8008a08 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089f4:	d106      	bne.n	8008a04 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <HAL_SPI_TransmitReceive_DMA+0x38>
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d001      	beq.n	8008a08 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008a04:	2302      	movs	r3, #2
 8008a06:	e158      	b.n	8008cba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008a14:	887b      	ldrh	r3, [r7, #2]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e14d      	b.n	8008cba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_SPI_TransmitReceive_DMA+0x60>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e146      	b.n	8008cba <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d003      	beq.n	8008a48 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2205      	movs	r2, #5
 8008a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	887a      	ldrh	r2, [r7, #2]
 8008a58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	887a      	ldrh	r2, [r7, #2]
 8008a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	887a      	ldrh	r2, [r7, #2]
 8008a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	887a      	ldrh	r2, [r7, #2]
 8008a72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008a90:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a9a:	d908      	bls.n	8008aae <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008aaa:	605a      	str	r2, [r3, #4]
 8008aac:	e06f      	b.n	8008b8e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008abc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ac8:	d126      	bne.n	8008b18 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10f      	bne.n	8008af6 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ae4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008af4:	e010      	b.n	8008b18 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b04:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3301      	adds	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b22:	d134      	bne.n	8008b8e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b32:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d111      	bne.n	8008b68 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008b66:	e012      	b.n	8008b8e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d108      	bne.n	8008bac <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9e:	4a49      	ldr	r2, [pc, #292]	@ (8008cc4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba6:	4a48      	ldr	r2, [pc, #288]	@ (8008cc8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008baa:	e007      	b.n	8008bbc <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb0:	4a46      	ldr	r2, [pc, #280]	@ (8008ccc <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb8:	4a45      	ldr	r2, [pc, #276]	@ (8008cd0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc0:	4a44      	ldr	r2, [pc, #272]	@ (8008cd4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc8:	2200      	movs	r2, #0
 8008bca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bdc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008be4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008be6:	f7fc f807 	bl	8004bf8 <HAL_DMA_Start_IT>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf4:	f043 0210 	orr.w	r2, r3, #16
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e058      	b.n	8008cba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f042 0201 	orr.w	r2, r2, #1
 8008c16:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c24:	2200      	movs	r2, #0
 8008c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c34:	2200      	movs	r2, #0
 8008c36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c40:	4619      	mov	r1, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	330c      	adds	r3, #12
 8008c48:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008c50:	f7fb ffd2 	bl	8004bf8 <HAL_DMA_Start_IT>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c5e:	f043 0210 	orr.w	r2, r3, #16
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e023      	b.n	8008cba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b40      	cmp	r3, #64	@ 0x40
 8008c7e:	d007      	beq.n	8008c90 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c8e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0220 	orr.w	r2, r2, #32
 8008ca6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0202 	orr.w	r2, r2, #2
 8008cb6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08009065 	.word	0x08009065
 8008cc8:	08008f29 	.word	0x08008f29
 8008ccc:	08009081 	.word	0x08009081
 8008cd0:	08008fd3 	.word	0x08008fd3
 8008cd4:	0800909d 	.word	0x0800909d

08008cd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	099b      	lsrs	r3, r3, #6
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10f      	bne.n	8008d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	099b      	lsrs	r3, r3, #6
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
    return;
 8008d1a:	e0d7      	b.n	8008ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	085b      	lsrs	r3, r3, #1
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <HAL_SPI_IRQHandler+0x66>
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	09db      	lsrs	r3, r3, #7
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
    return;
 8008d3c:	e0c6      	b.n	8008ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10c      	bne.n	8008d64 <HAL_SPI_IRQHandler+0x8c>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	099b      	lsrs	r3, r3, #6
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d106      	bne.n	8008d64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80b4 	beq.w	8008ecc <HAL_SPI_IRQHandler+0x1f4>
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80ad 	beq.w	8008ecc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	099b      	lsrs	r3, r3, #6
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d023      	beq.n	8008dc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d011      	beq.n	8008dae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d8e:	f043 0204 	orr.w	r2, r3, #4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	e00b      	b.n	8008dc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dae:	2300      	movs	r3, #0
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	693b      	ldr	r3, [r7, #16]
        return;
 8008dc4:	e082      	b.n	8008ecc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	095b      	lsrs	r3, r3, #5
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d014      	beq.n	8008dfc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd6:	f043 0201 	orr.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00c      	beq.n	8008e22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e0c:	f043 0208 	orr.w	r2, r3, #8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e14:	2300      	movs	r3, #0
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	60bb      	str	r3, [r7, #8]
 8008e20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d04f      	beq.n	8008eca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <HAL_SPI_IRQHandler+0x17e>
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d034      	beq.n	8008ec0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 0203 	bic.w	r2, r2, #3
 8008e64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e72:	4a18      	ldr	r2, [pc, #96]	@ (8008ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8008e74:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fb ff8c 	bl	8004d98 <HAL_DMA_Abort_IT>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8008ea0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fb ff76 	bl	8004d98 <HAL_DMA_Abort_IT>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008ebe:	e003      	b.n	8008ec8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f827 	bl	8008f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ec6:	e000      	b.n	8008eca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008ec8:	bf00      	nop
    return;
 8008eca:	bf00      	nop
  }
}
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	080090dd 	.word	0x080090dd

08008ed8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f34:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f36:	f7fa ffc1 	bl	8003ebc <HAL_GetTick>
 8008f3a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4a:	d03c      	beq.n	8008fc6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0220 	bic.w	r2, r2, #32
 8008f5a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10d      	bne.n	8008f80 <SPI_DMAReceiveCplt+0x58>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f6c:	d108      	bne.n	8008f80 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0203 	bic.w	r2, r2, #3
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	e007      	b.n	8008f90 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	2164      	movs	r1, #100	@ 0x64
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f9d5 	bl	8009344 <SPI_EndRxTransaction>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff ffa8 	bl	8008f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008fc4:	e002      	b.n	8008fcc <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff ff86 	bl	8008ed8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fde:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe0:	f7fa ff6c 	bl	8003ebc <HAL_GetTick>
 8008fe4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff4:	d030      	beq.n	8009058 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0220 	bic.w	r2, r2, #32
 8009004:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	2164      	movs	r1, #100	@ 0x64
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fa16 	bl	800943c <SPI_EndRxTxTransaction>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901a:	f043 0220 	orr.w	r2, r3, #32
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0203 	bic.w	r2, r2, #3
 8009030:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff ff5f 	bl	8008f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009056:	e002      	b.n	800905e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7f9 fc87 	bl	800296c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009070:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff ff3a 	bl	8008eec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff ff36 	bl	8008f00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0203 	bic.w	r2, r2, #3
 80090b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090be:	f043 0210 	orr.w	r2, r3, #16
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f7ff ff20 	bl	8008f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7ff ff0b 	bl	8008f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	4613      	mov	r3, r2
 8009116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009118:	f7fa fed0 	bl	8003ebc <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4413      	add	r3, r2
 8009126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009128:	f7fa fec8 	bl	8003ebc <HAL_GetTick>
 800912c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800912e:	4b39      	ldr	r3, [pc, #228]	@ (8009214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	015b      	lsls	r3, r3, #5
 8009134:	0d1b      	lsrs	r3, r3, #20
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800913e:	e055      	b.n	80091ec <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d051      	beq.n	80091ec <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009148:	f7fa feb8 	bl	8003ebc <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	429a      	cmp	r2, r3
 8009156:	d902      	bls.n	800915e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d13d      	bne.n	80091da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800916c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009176:	d111      	bne.n	800919c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009180:	d004      	beq.n	800918c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800918a:	d107      	bne.n	800919c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800919a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a4:	d10f      	bne.n	80091c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e018      	b.n	800920c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	e002      	b.n	80091ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4013      	ands	r3, r2
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bf0c      	ite	eq
 80091fc:	2301      	moveq	r3, #1
 80091fe:	2300      	movne	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	429a      	cmp	r2, r3
 8009208:	d19a      	bne.n	8009140 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3720      	adds	r7, #32
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000000 	.word	0x20000000

08009218 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	@ 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800922a:	f7fa fe47 	bl	8003ebc <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	4413      	add	r3, r2
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800923a:	f7fa fe3f 	bl	8003ebc <HAL_GetTick>
 800923e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009248:	4b3d      	ldr	r3, [pc, #244]	@ (8009340 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	00da      	lsls	r2, r3, #3
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	0d1b      	lsrs	r3, r3, #20
 8009258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009260:	e061      	b.n	8009326 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009268:	d107      	bne.n	800927a <SPI_WaitFifoStateUntilTimeout+0x62>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009278:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d051      	beq.n	8009326 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009282:	f7fa fe1b 	bl	8003ebc <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928e:	429a      	cmp	r2, r3
 8009290:	d902      	bls.n	8009298 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d13d      	bne.n	8009314 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092b0:	d111      	bne.n	80092d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ba:	d004      	beq.n	80092c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092c4:	d107      	bne.n	80092d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092de:	d10f      	bne.n	8009300 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e011      	b.n	8009338 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 800931e:	e002      	b.n	8009326 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	3b01      	subs	r3, #1
 8009324:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4013      	ands	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d195      	bne.n	8009262 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3728      	adds	r7, #40	@ 0x28
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000000 	.word	0x20000000

08009344 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009358:	d111      	bne.n	800937e <SPI_EndRxTransaction+0x3a>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009362:	d004      	beq.n	800936e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800936c:	d107      	bne.n	800937e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800937c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009386:	d112      	bne.n	80093ae <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2200      	movs	r2, #0
 8009390:	2180      	movs	r1, #128	@ 0x80
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff feb8 	bl	8009108 <SPI_WaitFlagStateUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d021      	beq.n	80093e2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e03d      	b.n	800942a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80093ae:	4b21      	ldr	r3, [pc, #132]	@ (8009434 <SPI_EndRxTransaction+0xf0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a21      	ldr	r2, [pc, #132]	@ (8009438 <SPI_EndRxTransaction+0xf4>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	0d5b      	lsrs	r3, r3, #21
 80093ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093da:	2b80      	cmp	r3, #128	@ 0x80
 80093dc:	d0f2      	beq.n	80093c4 <SPI_EndRxTransaction+0x80>
 80093de:	e000      	b.n	80093e2 <SPI_EndRxTransaction+0x9e>
        break;
 80093e0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ea:	d11d      	bne.n	8009428 <SPI_EndRxTransaction+0xe4>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093f4:	d004      	beq.n	8009400 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093fe:	d113      	bne.n	8009428 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ff03 	bl	8009218 <SPI_WaitFifoStateUntilTimeout>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d007      	beq.n	8009428 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941c:	f043 0220 	orr.w	r2, r3, #32
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e000      	b.n	800942a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000000 	.word	0x20000000
 8009438:	165e9f81 	.word	0x165e9f81

0800943c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2200      	movs	r2, #0
 8009450:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff fedf 	bl	8009218 <SPI_WaitFifoStateUntilTimeout>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009464:	f043 0220 	orr.w	r2, r3, #32
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e046      	b.n	80094fe <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009470:	4b25      	ldr	r3, [pc, #148]	@ (8009508 <SPI_EndRxTxTransaction+0xcc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a25      	ldr	r2, [pc, #148]	@ (800950c <SPI_EndRxTxTransaction+0xd0>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	0d5b      	lsrs	r3, r3, #21
 800947c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009480:	fb02 f303 	mul.w	r3, r2, r3
 8009484:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800948e:	d112      	bne.n	80094b6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2200      	movs	r2, #0
 8009498:	2180      	movs	r1, #128	@ 0x80
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fe34 	bl	8009108 <SPI_WaitFlagStateUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d016      	beq.n	80094d4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094aa:	f043 0220 	orr.w	r2, r3, #32
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e023      	b.n	80094fe <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	3b01      	subs	r3, #1
 80094c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094cc:	2b80      	cmp	r3, #128	@ 0x80
 80094ce:	d0f2      	beq.n	80094b6 <SPI_EndRxTxTransaction+0x7a>
 80094d0:	e000      	b.n	80094d4 <SPI_EndRxTxTransaction+0x98>
        break;
 80094d2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff fe99 	bl	8009218 <SPI_WaitFifoStateUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d007      	beq.n	80094fc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094f0:	f043 0220 	orr.w	r2, r3, #32
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e000      	b.n	80094fe <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000000 	.word	0x20000000
 800950c:	165e9f81 	.word	0x165e9f81

08009510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e049      	b.n	80095b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fa f8de 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f000 fb6e 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e049      	b.n	8009664 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d106      	bne.n	80095ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f841 	bl	800966c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f000 fb17 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <HAL_TIM_PWM_Start+0x24>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b01      	cmp	r3, #1
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	e03c      	b.n	800971e <HAL_TIM_PWM_Start+0x9e>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d109      	bne.n	80096be <HAL_TIM_PWM_Start+0x3e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	bf14      	ite	ne
 80096b6:	2301      	movne	r3, #1
 80096b8:	2300      	moveq	r3, #0
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	e02f      	b.n	800971e <HAL_TIM_PWM_Start+0x9e>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d109      	bne.n	80096d8 <HAL_TIM_PWM_Start+0x58>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	bf14      	ite	ne
 80096d0:	2301      	movne	r3, #1
 80096d2:	2300      	moveq	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	e022      	b.n	800971e <HAL_TIM_PWM_Start+0x9e>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b0c      	cmp	r3, #12
 80096dc:	d109      	bne.n	80096f2 <HAL_TIM_PWM_Start+0x72>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e015      	b.n	800971e <HAL_TIM_PWM_Start+0x9e>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d109      	bne.n	800970c <HAL_TIM_PWM_Start+0x8c>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	bf14      	ite	ne
 8009704:	2301      	movne	r3, #1
 8009706:	2300      	moveq	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	e008      	b.n	800971e <HAL_TIM_PWM_Start+0x9e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	bf14      	ite	ne
 8009718:	2301      	movne	r3, #1
 800971a:	2300      	moveq	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e092      	b.n	800984c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <HAL_TIM_PWM_Start+0xb6>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009734:	e023      	b.n	800977e <HAL_TIM_PWM_Start+0xfe>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b04      	cmp	r3, #4
 800973a:	d104      	bne.n	8009746 <HAL_TIM_PWM_Start+0xc6>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009744:	e01b      	b.n	800977e <HAL_TIM_PWM_Start+0xfe>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b08      	cmp	r3, #8
 800974a:	d104      	bne.n	8009756 <HAL_TIM_PWM_Start+0xd6>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009754:	e013      	b.n	800977e <HAL_TIM_PWM_Start+0xfe>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b0c      	cmp	r3, #12
 800975a:	d104      	bne.n	8009766 <HAL_TIM_PWM_Start+0xe6>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009764:	e00b      	b.n	800977e <HAL_TIM_PWM_Start+0xfe>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b10      	cmp	r3, #16
 800976a:	d104      	bne.n	8009776 <HAL_TIM_PWM_Start+0xf6>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009774:	e003      	b.n	800977e <HAL_TIM_PWM_Start+0xfe>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2201      	movs	r2, #1
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fdf0 	bl	800a36c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a30      	ldr	r2, [pc, #192]	@ (8009854 <HAL_TIM_PWM_Start+0x1d4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_TIM_PWM_Start+0x120>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a2f      	ldr	r2, [pc, #188]	@ (8009858 <HAL_TIM_PWM_Start+0x1d8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d101      	bne.n	80097a4 <HAL_TIM_PWM_Start+0x124>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e000      	b.n	80097a6 <HAL_TIM_PWM_Start+0x126>
 80097a4:	2300      	movs	r3, #0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a25      	ldr	r2, [pc, #148]	@ (8009854 <HAL_TIM_PWM_Start+0x1d4>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d022      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097cc:	d01d      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a22      	ldr	r2, [pc, #136]	@ (800985c <HAL_TIM_PWM_Start+0x1dc>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d018      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a20      	ldr	r2, [pc, #128]	@ (8009860 <HAL_TIM_PWM_Start+0x1e0>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d013      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009864 <HAL_TIM_PWM_Start+0x1e4>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00e      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a19      	ldr	r2, [pc, #100]	@ (8009858 <HAL_TIM_PWM_Start+0x1d8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d009      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009868 <HAL_TIM_PWM_Start+0x1e8>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d004      	beq.n	800980a <HAL_TIM_PWM_Start+0x18a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a19      	ldr	r2, [pc, #100]	@ (800986c <HAL_TIM_PWM_Start+0x1ec>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d115      	bne.n	8009836 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	4b17      	ldr	r3, [pc, #92]	@ (8009870 <HAL_TIM_PWM_Start+0x1f0>)
 8009812:	4013      	ands	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b06      	cmp	r3, #6
 800981a:	d015      	beq.n	8009848 <HAL_TIM_PWM_Start+0x1c8>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009822:	d011      	beq.n	8009848 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009834:	e008      	b.n	8009848 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f042 0201 	orr.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	e000      	b.n	800984a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009848:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	40010000 	.word	0x40010000
 8009858:	40010400 	.word	0x40010400
 800985c:	40000400 	.word	0x40000400
 8009860:	40000800 	.word	0x40000800
 8009864:	40000c00 	.word	0x40000c00
 8009868:	40014000 	.word	0x40014000
 800986c:	40001800 	.word	0x40001800
 8009870:	00010007 	.word	0x00010007

08009874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800988e:	2302      	movs	r3, #2
 8009890:	e0ff      	b.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b14      	cmp	r3, #20
 800989e:	f200 80f0 	bhi.w	8009a82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80098a2:	a201      	add	r2, pc, #4	@ (adr r2, 80098a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098fd 	.word	0x080098fd
 80098ac:	08009a83 	.word	0x08009a83
 80098b0:	08009a83 	.word	0x08009a83
 80098b4:	08009a83 	.word	0x08009a83
 80098b8:	0800993d 	.word	0x0800993d
 80098bc:	08009a83 	.word	0x08009a83
 80098c0:	08009a83 	.word	0x08009a83
 80098c4:	08009a83 	.word	0x08009a83
 80098c8:	0800997f 	.word	0x0800997f
 80098cc:	08009a83 	.word	0x08009a83
 80098d0:	08009a83 	.word	0x08009a83
 80098d4:	08009a83 	.word	0x08009a83
 80098d8:	080099bf 	.word	0x080099bf
 80098dc:	08009a83 	.word	0x08009a83
 80098e0:	08009a83 	.word	0x08009a83
 80098e4:	08009a83 	.word	0x08009a83
 80098e8:	08009a01 	.word	0x08009a01
 80098ec:	08009a83 	.word	0x08009a83
 80098f0:	08009a83 	.word	0x08009a83
 80098f4:	08009a83 	.word	0x08009a83
 80098f8:	08009a41 	.word	0x08009a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fa3a 	bl	8009d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0208 	orr.w	r2, r2, #8
 8009916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699a      	ldr	r2, [r3, #24]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0204 	bic.w	r2, r2, #4
 8009926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6999      	ldr	r1, [r3, #24]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	619a      	str	r2, [r3, #24]
      break;
 800993a:	e0a5      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fa8c 	bl	8009e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6999      	ldr	r1, [r3, #24]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	021a      	lsls	r2, r3, #8
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	619a      	str	r2, [r3, #24]
      break;
 800997c:	e084      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fae3 	bl	8009f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0208 	orr.w	r2, r2, #8
 8009998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69da      	ldr	r2, [r3, #28]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f022 0204 	bic.w	r2, r2, #4
 80099a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69d9      	ldr	r1, [r3, #28]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	61da      	str	r2, [r3, #28]
      break;
 80099bc:	e064      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fb39 	bl	800a03c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69da      	ldr	r2, [r3, #28]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69d9      	ldr	r1, [r3, #28]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	021a      	lsls	r2, r3, #8
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	61da      	str	r2, [r3, #28]
      break;
 80099fe:	e043      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fb70 	bl	800a0ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0208 	orr.w	r2, r2, #8
 8009a1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0204 	bic.w	r2, r2, #4
 8009a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	691a      	ldr	r2, [r3, #16]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a3e:	e023      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fba2 	bl	800a190 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	021a      	lsls	r2, r3, #8
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a80:	e002      	b.n	8009a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	75fb      	strb	r3, [r7, #23]
      break;
 8009a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop

08009a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d101      	bne.n	8009ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e0b4      	b.n	8009c22 <HAL_TIM_ConfigClockSource+0x186>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4b56      	ldr	r3, [pc, #344]	@ (8009c2c <HAL_TIM_ConfigClockSource+0x190>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009af0:	d03e      	beq.n	8009b70 <HAL_TIM_ConfigClockSource+0xd4>
 8009af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009af6:	f200 8087 	bhi.w	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afe:	f000 8086 	beq.w	8009c0e <HAL_TIM_ConfigClockSource+0x172>
 8009b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b06:	d87f      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b08:	2b70      	cmp	r3, #112	@ 0x70
 8009b0a:	d01a      	beq.n	8009b42 <HAL_TIM_ConfigClockSource+0xa6>
 8009b0c:	2b70      	cmp	r3, #112	@ 0x70
 8009b0e:	d87b      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b10:	2b60      	cmp	r3, #96	@ 0x60
 8009b12:	d050      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8009b14:	2b60      	cmp	r3, #96	@ 0x60
 8009b16:	d877      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b18:	2b50      	cmp	r3, #80	@ 0x50
 8009b1a:	d03c      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0xfa>
 8009b1c:	2b50      	cmp	r3, #80	@ 0x50
 8009b1e:	d873      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b20:	2b40      	cmp	r3, #64	@ 0x40
 8009b22:	d058      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8009b24:	2b40      	cmp	r3, #64	@ 0x40
 8009b26:	d86f      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b28:	2b30      	cmp	r3, #48	@ 0x30
 8009b2a:	d064      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8009b2c:	2b30      	cmp	r3, #48	@ 0x30
 8009b2e:	d86b      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d060      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d867      	bhi.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d05c      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d05a      	beq.n	8009bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8009b40:	e062      	b.n	8009c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b52:	f000 fbeb 	bl	800a32c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	609a      	str	r2, [r3, #8]
      break;
 8009b6e:	e04f      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b80:	f000 fbd4 	bl	800a32c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	689a      	ldr	r2, [r3, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b92:	609a      	str	r2, [r3, #8]
      break;
 8009b94:	e03c      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f000 fb48 	bl	800a238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2150      	movs	r1, #80	@ 0x50
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fba1 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009bb4:	e02c      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f000 fb67 	bl	800a296 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2160      	movs	r1, #96	@ 0x60
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fb91 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009bd4:	e01c      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009be2:	461a      	mov	r2, r3
 8009be4:	f000 fb28 	bl	800a238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2140      	movs	r1, #64	@ 0x40
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fb81 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009bf4:	e00c      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f000 fb78 	bl	800a2f6 <TIM_ITRx_SetConfig>
      break;
 8009c06:	e003      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c0c:	e000      	b.n	8009c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	fffeff88 	.word	0xfffeff88

08009c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a43      	ldr	r2, [pc, #268]	@ (8009d50 <TIM_Base_SetConfig+0x120>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4e:	d00f      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a40      	ldr	r2, [pc, #256]	@ (8009d54 <TIM_Base_SetConfig+0x124>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8009d58 <TIM_Base_SetConfig+0x128>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3e      	ldr	r2, [pc, #248]	@ (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8009d60 <TIM_Base_SetConfig+0x130>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d108      	bne.n	8009c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a32      	ldr	r2, [pc, #200]	@ (8009d50 <TIM_Base_SetConfig+0x120>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d02b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c90:	d027      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2f      	ldr	r2, [pc, #188]	@ (8009d54 <TIM_Base_SetConfig+0x124>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d023      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009d58 <TIM_Base_SetConfig+0x128>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d01f      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a2c      	ldr	r2, [pc, #176]	@ (8009d60 <TIM_Base_SetConfig+0x130>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d017      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8009d64 <TIM_Base_SetConfig+0x134>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d013      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8009d68 <TIM_Base_SetConfig+0x138>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00f      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a29      	ldr	r2, [pc, #164]	@ (8009d6c <TIM_Base_SetConfig+0x13c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a28      	ldr	r2, [pc, #160]	@ (8009d70 <TIM_Base_SetConfig+0x140>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d007      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a27      	ldr	r2, [pc, #156]	@ (8009d74 <TIM_Base_SetConfig+0x144>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d003      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a26      	ldr	r2, [pc, #152]	@ (8009d78 <TIM_Base_SetConfig+0x148>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d108      	bne.n	8009cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a0e      	ldr	r2, [pc, #56]	@ (8009d50 <TIM_Base_SetConfig+0x120>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d003      	beq.n	8009d22 <TIM_Base_SetConfig+0xf2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a10      	ldr	r2, [pc, #64]	@ (8009d60 <TIM_Base_SetConfig+0x130>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d103      	bne.n	8009d2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	691a      	ldr	r2, [r3, #16]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f043 0204 	orr.w	r2, r3, #4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	601a      	str	r2, [r3, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40000400 	.word	0x40000400
 8009d58:	40000800 	.word	0x40000800
 8009d5c:	40000c00 	.word	0x40000c00
 8009d60:	40010400 	.word	0x40010400
 8009d64:	40014000 	.word	0x40014000
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800
 8009d70:	40001800 	.word	0x40001800
 8009d74:	40001c00 	.word	0x40001c00
 8009d78:	40002000 	.word	0x40002000

08009d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	f023 0201 	bic.w	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	4b2b      	ldr	r3, [pc, #172]	@ (8009e54 <TIM_OC1_SetConfig+0xd8>)
 8009da8:	4013      	ands	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f023 0302 	bic.w	r3, r3, #2
 8009dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a21      	ldr	r2, [pc, #132]	@ (8009e58 <TIM_OC1_SetConfig+0xdc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d003      	beq.n	8009de0 <TIM_OC1_SetConfig+0x64>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a20      	ldr	r2, [pc, #128]	@ (8009e5c <TIM_OC1_SetConfig+0xe0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10c      	bne.n	8009dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0308 	bic.w	r3, r3, #8
 8009de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f023 0304 	bic.w	r3, r3, #4
 8009df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a16      	ldr	r2, [pc, #88]	@ (8009e58 <TIM_OC1_SetConfig+0xdc>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_OC1_SetConfig+0x8e>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a15      	ldr	r2, [pc, #84]	@ (8009e5c <TIM_OC1_SetConfig+0xe0>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d111      	bne.n	8009e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	621a      	str	r2, [r3, #32]
}
 8009e48:	bf00      	nop
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	fffeff8f 	.word	0xfffeff8f
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40010400 	.word	0x40010400

08009e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	f023 0210 	bic.w	r2, r3, #16
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8009f44 <TIM_OC2_SetConfig+0xe4>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f023 0320 	bic.w	r3, r3, #32
 8009eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a23      	ldr	r2, [pc, #140]	@ (8009f48 <TIM_OC2_SetConfig+0xe8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_OC2_SetConfig+0x68>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a22      	ldr	r2, [pc, #136]	@ (8009f4c <TIM_OC2_SetConfig+0xec>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d10d      	bne.n	8009ee4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	@ (8009f48 <TIM_OC2_SetConfig+0xe8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d003      	beq.n	8009ef4 <TIM_OC2_SetConfig+0x94>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a17      	ldr	r2, [pc, #92]	@ (8009f4c <TIM_OC2_SetConfig+0xec>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d113      	bne.n	8009f1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	621a      	str	r2, [r3, #32]
}
 8009f36:	bf00      	nop
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	feff8fff 	.word	0xfeff8fff
 8009f48:	40010000 	.word	0x40010000
 8009f4c:	40010400 	.word	0x40010400

08009f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4b2d      	ldr	r3, [pc, #180]	@ (800a030 <TIM_OC3_SetConfig+0xe0>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0303 	bic.w	r3, r3, #3
 8009f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a22      	ldr	r2, [pc, #136]	@ (800a034 <TIM_OC3_SetConfig+0xe4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_OC3_SetConfig+0x66>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a21      	ldr	r2, [pc, #132]	@ (800a038 <TIM_OC3_SetConfig+0xe8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d10d      	bne.n	8009fd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <TIM_OC3_SetConfig+0xe4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d003      	beq.n	8009fe2 <TIM_OC3_SetConfig+0x92>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a16      	ldr	r2, [pc, #88]	@ (800a038 <TIM_OC3_SetConfig+0xe8>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d113      	bne.n	800a00a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	621a      	str	r2, [r3, #32]
}
 800a024:	bf00      	nop
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	fffeff8f 	.word	0xfffeff8f
 800a034:	40010000 	.word	0x40010000
 800a038:	40010400 	.word	0x40010400

0800a03c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e0 <TIM_OC4_SetConfig+0xa4>)
 800a068:	4013      	ands	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	031b      	lsls	r3, r3, #12
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a13      	ldr	r2, [pc, #76]	@ (800a0e4 <TIM_OC4_SetConfig+0xa8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d003      	beq.n	800a0a4 <TIM_OC4_SetConfig+0x68>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a12      	ldr	r2, [pc, #72]	@ (800a0e8 <TIM_OC4_SetConfig+0xac>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d109      	bne.n	800a0b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	019b      	lsls	r3, r3, #6
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	621a      	str	r2, [r3, #32]
}
 800a0d2:	bf00      	nop
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	feff8fff 	.word	0xfeff8fff
 800a0e4:	40010000 	.word	0x40010000
 800a0e8:	40010400 	.word	0x40010400

0800a0ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4b1b      	ldr	r3, [pc, #108]	@ (800a184 <TIM_OC5_SetConfig+0x98>)
 800a118:	4013      	ands	r3, r2
 800a11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a12c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	041b      	lsls	r3, r3, #16
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a12      	ldr	r2, [pc, #72]	@ (800a188 <TIM_OC5_SetConfig+0x9c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d003      	beq.n	800a14a <TIM_OC5_SetConfig+0x5e>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a11      	ldr	r2, [pc, #68]	@ (800a18c <TIM_OC5_SetConfig+0xa0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d109      	bne.n	800a15e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	621a      	str	r2, [r3, #32]
}
 800a178:	bf00      	nop
 800a17a:	371c      	adds	r7, #28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	fffeff8f 	.word	0xfffeff8f
 800a188:	40010000 	.word	0x40010000
 800a18c:	40010400 	.word	0x40010400

0800a190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a22c <TIM_OC6_SetConfig+0x9c>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	051b      	lsls	r3, r3, #20
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a13      	ldr	r2, [pc, #76]	@ (800a230 <TIM_OC6_SetConfig+0xa0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_OC6_SetConfig+0x60>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a12      	ldr	r2, [pc, #72]	@ (800a234 <TIM_OC6_SetConfig+0xa4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d109      	bne.n	800a204 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	029b      	lsls	r3, r3, #10
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	621a      	str	r2, [r3, #32]
}
 800a21e:	bf00      	nop
 800a220:	371c      	adds	r7, #28
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	feff8fff 	.word	0xfeff8fff
 800a230:	40010000 	.word	0x40010000
 800a234:	40010400 	.word	0x40010400

0800a238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f023 0201 	bic.w	r2, r3, #1
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f023 030a 	bic.w	r3, r3, #10
 800a274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	621a      	str	r2, [r3, #32]
}
 800a28a:	bf00      	nop
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a296:	b480      	push	{r7}
 800a298:	b087      	sub	sp, #28
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	f023 0210 	bic.w	r2, r3, #16
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	031b      	lsls	r3, r3, #12
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a30c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	f043 0307 	orr.w	r3, r3, #7
 800a318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	021a      	lsls	r2, r3, #8
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	431a      	orrs	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	609a      	str	r2, [r3, #8]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f003 031f 	and.w	r3, r3, #31
 800a37e:	2201      	movs	r2, #1
 800a380:	fa02 f303 	lsl.w	r3, r2, r3
 800a384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a1a      	ldr	r2, [r3, #32]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	43db      	mvns	r3, r3
 800a38e:	401a      	ands	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a1a      	ldr	r2, [r3, #32]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	621a      	str	r2, [r3, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e06d      	b.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a30      	ldr	r2, [pc, #192]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d108      	bne.n	800a416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a40a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4313      	orrs	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a20      	ldr	r2, [pc, #128]	@ (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d022      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a442:	d01d      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d018      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a1c      	ldr	r2, [pc, #112]	@ (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d013      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a1a      	ldr	r2, [pc, #104]	@ (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00e      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a15      	ldr	r2, [pc, #84]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d009      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a16      	ldr	r2, [pc, #88]	@ (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d004      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a15      	ldr	r2, [pc, #84]	@ (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10c      	bne.n	800a49a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	4313      	orrs	r3, r2
 800a490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	40010000 	.word	0x40010000
 800a4bc:	40010400 	.word	0x40010400
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40014000 	.word	0x40014000
 800a4d0:	40001800 	.word	0x40001800

0800a4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e040      	b.n	800a568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7f9 f9a8 	bl	800384c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2224      	movs	r2, #36	@ 0x24
 800a500:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0201 	bic.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fe50 	bl	800b1c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fbe9 	bl	800acf8 <UART_SetConfig>
 800a526:	4603      	mov	r3, r0
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e01b      	b.n	800a568 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a53e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a54e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fecf 	bl	800b304 <UART_CheckIdleState>
 800a566:	4603      	mov	r3, r0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b09a      	sub	sp, #104	@ 0x68
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a58c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a596:	657b      	str	r3, [r7, #84]	@ 0x54
 800a598:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a59c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e6      	bne.n	800a578 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b4:	e853 3f00 	ldrex	r3, [r3]
 800a5b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	f023 0301 	bic.w	r3, r3, #1
 800a5c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800a5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e5      	bne.n	800a5aa <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d118      	bne.n	800a618 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	f023 0310 	bic.w	r3, r3, #16
 800a5fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a606:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a60a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a622:	2b40      	cmp	r3, #64	@ 0x40
 800a624:	d137      	bne.n	800a696 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	60bb      	str	r3, [r7, #8]
   return(result);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3308      	adds	r3, #8
 800a644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a646:	61ba      	str	r2, [r7, #24]
 800a648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	6979      	ldr	r1, [r7, #20]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	613b      	str	r3, [r7, #16]
   return(result);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e5      	bne.n	800a626 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d019      	beq.n	800a696 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a666:	2200      	movs	r2, #0
 800a668:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fa fb22 	bl	8004cb8 <HAL_DMA_Abort>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fa fd36 	bl	80050f0 <HAL_DMA_GetError>
 800a684:	4603      	mov	r3, r0
 800a686:	2b20      	cmp	r3, #32
 800a688:	d105      	bne.n	800a696 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2210      	movs	r2, #16
 800a68e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e017      	b.n	800a6c6 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	220f      	movs	r2, #15
 800a6a4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	699a      	ldr	r2, [r3, #24]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f042 0208 	orr.w	r2, r2, #8
 800a6b4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3768      	adds	r7, #104	@ 0x68
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b0ba      	sub	sp, #232	@ 0xe8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a6fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a6fe:	4013      	ands	r3, r2
 800a700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d115      	bne.n	800a738 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00f      	beq.n	800a738 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 82b1 	beq.w	800ac90 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
      }
      return;
 800a736:	e2ab      	b.n	800ac90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 8117 	beq.w	800a970 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a74e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a752:	4b85      	ldr	r3, [pc, #532]	@ (800a968 <HAL_UART_IRQHandler+0x298>)
 800a754:	4013      	ands	r3, r2
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 810a 	beq.w	800a970 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d011      	beq.n	800a78c <HAL_UART_IRQHandler+0xbc>
 800a768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2201      	movs	r2, #1
 800a77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a782:	f043 0201 	orr.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d011      	beq.n	800a7bc <HAL_UART_IRQHandler+0xec>
 800a798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7b2:	f043 0204 	orr.w	r2, r3, #4
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d011      	beq.n	800a7ec <HAL_UART_IRQHandler+0x11c>
 800a7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2204      	movs	r2, #4
 800a7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7e2:	f043 0202 	orr.w	r2, r3, #2
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d017      	beq.n	800a828 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7fc:	f003 0320 	and.w	r3, r3, #32
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00b      	beq.n	800a828 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2208      	movs	r2, #8
 800a816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a81e:	f043 0208 	orr.w	r2, r3, #8
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a82c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a830:	2b00      	cmp	r3, #0
 800a832:	d012      	beq.n	800a85a <HAL_UART_IRQHandler+0x18a>
 800a834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00c      	beq.n	800a85a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a850:	f043 0220 	orr.w	r2, r3, #32
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 8217 	beq.w	800ac94 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00d      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a2:	2b40      	cmp	r3, #64	@ 0x40
 800a8a4:	d005      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d04f      	beq.n	800a952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 feb0 	bl	800b618 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8c2:	2b40      	cmp	r3, #64	@ 0x40
 800a8c4:	d141      	bne.n	800a94a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a8f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a8fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a902:	e841 2300 	strex	r3, r2, [r1]
 800a906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1d9      	bne.n	800a8c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a916:	2b00      	cmp	r3, #0
 800a918:	d013      	beq.n	800a942 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a91e:	4a13      	ldr	r2, [pc, #76]	@ (800a96c <HAL_UART_IRQHandler+0x29c>)
 800a920:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a926:	4618      	mov	r0, r3
 800a928:	f7fa fa36 	bl	8004d98 <HAL_DMA_Abort_IT>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d017      	beq.n	800a962 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a940:	e00f      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f9ce 	bl	800ace4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a948:	e00b      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9ca 	bl	800ace4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a950:	e007      	b.n	800a962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f9c6 	bl	800ace4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a960:	e198      	b.n	800ac94 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a962:	bf00      	nop
    return;
 800a964:	e196      	b.n	800ac94 <HAL_UART_IRQHandler+0x5c4>
 800a966:	bf00      	nop
 800a968:	04000120 	.word	0x04000120
 800a96c:	0800b92f 	.word	0x0800b92f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a974:	2b01      	cmp	r3, #1
 800a976:	f040 8166 	bne.w	800ac46 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a97e:	f003 0310 	and.w	r3, r3, #16
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 815f 	beq.w	800ac46 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a98c:	f003 0310 	and.w	r3, r3, #16
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 8158 	beq.w	800ac46 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2210      	movs	r2, #16
 800a99c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a8:	2b40      	cmp	r3, #64	@ 0x40
 800a9aa:	f040 80d0 	bne.w	800ab4e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 80ab 	beq.w	800ab1a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	f080 80a3 	bcs.w	800ab1a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9e8:	f000 8086 	beq.w	800aaf8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1da      	bne.n	800a9ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa48:	f023 0301 	bic.w	r3, r3, #1
 800aa4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3308      	adds	r3, #8
 800aa56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e1      	bne.n	800aa36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3308      	adds	r3, #8
 800aa78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aaa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e3      	bne.n	800aa72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aac8:	f023 0310 	bic.w	r3, r3, #16
 800aacc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aada:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aadc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e4      	bne.n	800aab8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fa f8e0 	bl	8004cb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f7 fee8 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab18:	e0be      	b.n	800ac98 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab24:	429a      	cmp	r2, r3
 800ab26:	f040 80b7 	bne.w	800ac98 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab34:	f040 80b0 	bne.w	800ac98 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7f7 fece 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
      return;
 800ab4c:	e0a4      	b.n	800ac98 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 8096 	beq.w	800ac9c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ab70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8091 	beq.w	800ac9c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aba4:	e841 2300 	strex	r3, r2, [r1]
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1e4      	bne.n	800ab7a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abba:	e853 3f00 	ldrex	r3, [r3]
 800abbe:	623b      	str	r3, [r7, #32]
   return(result);
 800abc0:	6a3b      	ldr	r3, [r7, #32]
 800abc2:	f023 0301 	bic.w	r3, r3, #1
 800abc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3308      	adds	r3, #8
 800abd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abd4:	633a      	str	r2, [r7, #48]	@ 0x30
 800abd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abdc:	e841 2300 	strex	r3, r2, [r1]
 800abe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1e3      	bne.n	800abb0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2220      	movs	r2, #32
 800abec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f023 0310 	bic.w	r3, r3, #16
 800ac10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	69b9      	ldr	r1, [r7, #24]
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e4      	bne.n	800abfc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2202      	movs	r2, #2
 800ac36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7f7 fe52 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac44:	e02a      	b.n	800ac9c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00e      	beq.n	800ac70 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ac52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d01c      	beq.n	800aca0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	4798      	blx	r3
    }
    return;
 800ac6e:	e017      	b.n	800aca0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d012      	beq.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
 800ac7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fe62 	bl	800b952 <UART_EndTransmit_IT>
    return;
 800ac8e:	e008      	b.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ac90:	bf00      	nop
 800ac92:	e006      	b.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ac94:	bf00      	nop
 800ac96:	e004      	b.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ac98:	bf00      	nop
 800ac9a:	e002      	b.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aca0:	bf00      	nop
  }

}
 800aca2:	37e8      	adds	r7, #232	@ 0xe8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4ba6      	ldr	r3, [pc, #664]	@ (800afbc <UART_SetConfig+0x2c4>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	6812      	ldr	r2, [r2, #0]
 800ad2a:	6979      	ldr	r1, [r7, #20]
 800ad2c:	430b      	orrs	r3, r1
 800ad2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68da      	ldr	r2, [r3, #12]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a94      	ldr	r2, [pc, #592]	@ (800afc0 <UART_SetConfig+0x2c8>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d120      	bne.n	800adb6 <UART_SetConfig+0xbe>
 800ad74:	4b93      	ldr	r3, [pc, #588]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800ad76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d816      	bhi.n	800adb0 <UART_SetConfig+0xb8>
 800ad82:	a201      	add	r2, pc, #4	@ (adr r2, 800ad88 <UART_SetConfig+0x90>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800ada5 	.word	0x0800ada5
 800ad90:	0800ad9f 	.word	0x0800ad9f
 800ad94:	0800adab 	.word	0x0800adab
 800ad98:	2301      	movs	r3, #1
 800ad9a:	77fb      	strb	r3, [r7, #31]
 800ad9c:	e150      	b.n	800b040 <UART_SetConfig+0x348>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	77fb      	strb	r3, [r7, #31]
 800ada2:	e14d      	b.n	800b040 <UART_SetConfig+0x348>
 800ada4:	2304      	movs	r3, #4
 800ada6:	77fb      	strb	r3, [r7, #31]
 800ada8:	e14a      	b.n	800b040 <UART_SetConfig+0x348>
 800adaa:	2308      	movs	r3, #8
 800adac:	77fb      	strb	r3, [r7, #31]
 800adae:	e147      	b.n	800b040 <UART_SetConfig+0x348>
 800adb0:	2310      	movs	r3, #16
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e144      	b.n	800b040 <UART_SetConfig+0x348>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a83      	ldr	r2, [pc, #524]	@ (800afc8 <UART_SetConfig+0x2d0>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d132      	bne.n	800ae26 <UART_SetConfig+0x12e>
 800adc0:	4b80      	ldr	r3, [pc, #512]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800adc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adc6:	f003 030c 	and.w	r3, r3, #12
 800adca:	2b0c      	cmp	r3, #12
 800adcc:	d828      	bhi.n	800ae20 <UART_SetConfig+0x128>
 800adce:	a201      	add	r2, pc, #4	@ (adr r2, 800add4 <UART_SetConfig+0xdc>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae09 	.word	0x0800ae09
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae21 	.word	0x0800ae21
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae15 	.word	0x0800ae15
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae21 	.word	0x0800ae21
 800adf0:	0800ae21 	.word	0x0800ae21
 800adf4:	0800ae0f 	.word	0x0800ae0f
 800adf8:	0800ae21 	.word	0x0800ae21
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae21 	.word	0x0800ae21
 800ae04:	0800ae1b 	.word	0x0800ae1b
 800ae08:	2300      	movs	r3, #0
 800ae0a:	77fb      	strb	r3, [r7, #31]
 800ae0c:	e118      	b.n	800b040 <UART_SetConfig+0x348>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	77fb      	strb	r3, [r7, #31]
 800ae12:	e115      	b.n	800b040 <UART_SetConfig+0x348>
 800ae14:	2304      	movs	r3, #4
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	e112      	b.n	800b040 <UART_SetConfig+0x348>
 800ae1a:	2308      	movs	r3, #8
 800ae1c:	77fb      	strb	r3, [r7, #31]
 800ae1e:	e10f      	b.n	800b040 <UART_SetConfig+0x348>
 800ae20:	2310      	movs	r3, #16
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e10c      	b.n	800b040 <UART_SetConfig+0x348>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a68      	ldr	r2, [pc, #416]	@ (800afcc <UART_SetConfig+0x2d4>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d120      	bne.n	800ae72 <UART_SetConfig+0x17a>
 800ae30:	4b64      	ldr	r3, [pc, #400]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800ae32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae3a:	2b30      	cmp	r3, #48	@ 0x30
 800ae3c:	d013      	beq.n	800ae66 <UART_SetConfig+0x16e>
 800ae3e:	2b30      	cmp	r3, #48	@ 0x30
 800ae40:	d814      	bhi.n	800ae6c <UART_SetConfig+0x174>
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	d009      	beq.n	800ae5a <UART_SetConfig+0x162>
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	d810      	bhi.n	800ae6c <UART_SetConfig+0x174>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <UART_SetConfig+0x15c>
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	d006      	beq.n	800ae60 <UART_SetConfig+0x168>
 800ae52:	e00b      	b.n	800ae6c <UART_SetConfig+0x174>
 800ae54:	2300      	movs	r3, #0
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	e0f2      	b.n	800b040 <UART_SetConfig+0x348>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	77fb      	strb	r3, [r7, #31]
 800ae5e:	e0ef      	b.n	800b040 <UART_SetConfig+0x348>
 800ae60:	2304      	movs	r3, #4
 800ae62:	77fb      	strb	r3, [r7, #31]
 800ae64:	e0ec      	b.n	800b040 <UART_SetConfig+0x348>
 800ae66:	2308      	movs	r3, #8
 800ae68:	77fb      	strb	r3, [r7, #31]
 800ae6a:	e0e9      	b.n	800b040 <UART_SetConfig+0x348>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	77fb      	strb	r3, [r7, #31]
 800ae70:	e0e6      	b.n	800b040 <UART_SetConfig+0x348>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a56      	ldr	r2, [pc, #344]	@ (800afd0 <UART_SetConfig+0x2d8>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d120      	bne.n	800aebe <UART_SetConfig+0x1c6>
 800ae7c:	4b51      	ldr	r3, [pc, #324]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae86:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae88:	d013      	beq.n	800aeb2 <UART_SetConfig+0x1ba>
 800ae8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae8c:	d814      	bhi.n	800aeb8 <UART_SetConfig+0x1c0>
 800ae8e:	2b80      	cmp	r3, #128	@ 0x80
 800ae90:	d009      	beq.n	800aea6 <UART_SetConfig+0x1ae>
 800ae92:	2b80      	cmp	r3, #128	@ 0x80
 800ae94:	d810      	bhi.n	800aeb8 <UART_SetConfig+0x1c0>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <UART_SetConfig+0x1a8>
 800ae9a:	2b40      	cmp	r3, #64	@ 0x40
 800ae9c:	d006      	beq.n	800aeac <UART_SetConfig+0x1b4>
 800ae9e:	e00b      	b.n	800aeb8 <UART_SetConfig+0x1c0>
 800aea0:	2300      	movs	r3, #0
 800aea2:	77fb      	strb	r3, [r7, #31]
 800aea4:	e0cc      	b.n	800b040 <UART_SetConfig+0x348>
 800aea6:	2302      	movs	r3, #2
 800aea8:	77fb      	strb	r3, [r7, #31]
 800aeaa:	e0c9      	b.n	800b040 <UART_SetConfig+0x348>
 800aeac:	2304      	movs	r3, #4
 800aeae:	77fb      	strb	r3, [r7, #31]
 800aeb0:	e0c6      	b.n	800b040 <UART_SetConfig+0x348>
 800aeb2:	2308      	movs	r3, #8
 800aeb4:	77fb      	strb	r3, [r7, #31]
 800aeb6:	e0c3      	b.n	800b040 <UART_SetConfig+0x348>
 800aeb8:	2310      	movs	r3, #16
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e0c0      	b.n	800b040 <UART_SetConfig+0x348>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a44      	ldr	r2, [pc, #272]	@ (800afd4 <UART_SetConfig+0x2dc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d125      	bne.n	800af14 <UART_SetConfig+0x21c>
 800aec8:	4b3e      	ldr	r3, [pc, #248]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800aeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aed6:	d017      	beq.n	800af08 <UART_SetConfig+0x210>
 800aed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aedc:	d817      	bhi.n	800af0e <UART_SetConfig+0x216>
 800aede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aee2:	d00b      	beq.n	800aefc <UART_SetConfig+0x204>
 800aee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aee8:	d811      	bhi.n	800af0e <UART_SetConfig+0x216>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <UART_SetConfig+0x1fe>
 800aeee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef2:	d006      	beq.n	800af02 <UART_SetConfig+0x20a>
 800aef4:	e00b      	b.n	800af0e <UART_SetConfig+0x216>
 800aef6:	2300      	movs	r3, #0
 800aef8:	77fb      	strb	r3, [r7, #31]
 800aefa:	e0a1      	b.n	800b040 <UART_SetConfig+0x348>
 800aefc:	2302      	movs	r3, #2
 800aefe:	77fb      	strb	r3, [r7, #31]
 800af00:	e09e      	b.n	800b040 <UART_SetConfig+0x348>
 800af02:	2304      	movs	r3, #4
 800af04:	77fb      	strb	r3, [r7, #31]
 800af06:	e09b      	b.n	800b040 <UART_SetConfig+0x348>
 800af08:	2308      	movs	r3, #8
 800af0a:	77fb      	strb	r3, [r7, #31]
 800af0c:	e098      	b.n	800b040 <UART_SetConfig+0x348>
 800af0e:	2310      	movs	r3, #16
 800af10:	77fb      	strb	r3, [r7, #31]
 800af12:	e095      	b.n	800b040 <UART_SetConfig+0x348>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a2f      	ldr	r2, [pc, #188]	@ (800afd8 <UART_SetConfig+0x2e0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d125      	bne.n	800af6a <UART_SetConfig+0x272>
 800af1e:	4b29      	ldr	r3, [pc, #164]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800af20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af2c:	d017      	beq.n	800af5e <UART_SetConfig+0x266>
 800af2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af32:	d817      	bhi.n	800af64 <UART_SetConfig+0x26c>
 800af34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af38:	d00b      	beq.n	800af52 <UART_SetConfig+0x25a>
 800af3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af3e:	d811      	bhi.n	800af64 <UART_SetConfig+0x26c>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <UART_SetConfig+0x254>
 800af44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af48:	d006      	beq.n	800af58 <UART_SetConfig+0x260>
 800af4a:	e00b      	b.n	800af64 <UART_SetConfig+0x26c>
 800af4c:	2301      	movs	r3, #1
 800af4e:	77fb      	strb	r3, [r7, #31]
 800af50:	e076      	b.n	800b040 <UART_SetConfig+0x348>
 800af52:	2302      	movs	r3, #2
 800af54:	77fb      	strb	r3, [r7, #31]
 800af56:	e073      	b.n	800b040 <UART_SetConfig+0x348>
 800af58:	2304      	movs	r3, #4
 800af5a:	77fb      	strb	r3, [r7, #31]
 800af5c:	e070      	b.n	800b040 <UART_SetConfig+0x348>
 800af5e:	2308      	movs	r3, #8
 800af60:	77fb      	strb	r3, [r7, #31]
 800af62:	e06d      	b.n	800b040 <UART_SetConfig+0x348>
 800af64:	2310      	movs	r3, #16
 800af66:	77fb      	strb	r3, [r7, #31]
 800af68:	e06a      	b.n	800b040 <UART_SetConfig+0x348>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a1b      	ldr	r2, [pc, #108]	@ (800afdc <UART_SetConfig+0x2e4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d138      	bne.n	800afe6 <UART_SetConfig+0x2ee>
 800af74:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <UART_SetConfig+0x2cc>)
 800af76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800af7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af82:	d017      	beq.n	800afb4 <UART_SetConfig+0x2bc>
 800af84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af88:	d82a      	bhi.n	800afe0 <UART_SetConfig+0x2e8>
 800af8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af8e:	d00b      	beq.n	800afa8 <UART_SetConfig+0x2b0>
 800af90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af94:	d824      	bhi.n	800afe0 <UART_SetConfig+0x2e8>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <UART_SetConfig+0x2aa>
 800af9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af9e:	d006      	beq.n	800afae <UART_SetConfig+0x2b6>
 800afa0:	e01e      	b.n	800afe0 <UART_SetConfig+0x2e8>
 800afa2:	2300      	movs	r3, #0
 800afa4:	77fb      	strb	r3, [r7, #31]
 800afa6:	e04b      	b.n	800b040 <UART_SetConfig+0x348>
 800afa8:	2302      	movs	r3, #2
 800afaa:	77fb      	strb	r3, [r7, #31]
 800afac:	e048      	b.n	800b040 <UART_SetConfig+0x348>
 800afae:	2304      	movs	r3, #4
 800afb0:	77fb      	strb	r3, [r7, #31]
 800afb2:	e045      	b.n	800b040 <UART_SetConfig+0x348>
 800afb4:	2308      	movs	r3, #8
 800afb6:	77fb      	strb	r3, [r7, #31]
 800afb8:	e042      	b.n	800b040 <UART_SetConfig+0x348>
 800afba:	bf00      	nop
 800afbc:	efff69f3 	.word	0xefff69f3
 800afc0:	40011000 	.word	0x40011000
 800afc4:	40023800 	.word	0x40023800
 800afc8:	40004400 	.word	0x40004400
 800afcc:	40004800 	.word	0x40004800
 800afd0:	40004c00 	.word	0x40004c00
 800afd4:	40005000 	.word	0x40005000
 800afd8:	40011400 	.word	0x40011400
 800afdc:	40007800 	.word	0x40007800
 800afe0:	2310      	movs	r3, #16
 800afe2:	77fb      	strb	r3, [r7, #31]
 800afe4:	e02c      	b.n	800b040 <UART_SetConfig+0x348>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a72      	ldr	r2, [pc, #456]	@ (800b1b4 <UART_SetConfig+0x4bc>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d125      	bne.n	800b03c <UART_SetConfig+0x344>
 800aff0:	4b71      	ldr	r3, [pc, #452]	@ (800b1b8 <UART_SetConfig+0x4c0>)
 800aff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800affa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800affe:	d017      	beq.n	800b030 <UART_SetConfig+0x338>
 800b000:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b004:	d817      	bhi.n	800b036 <UART_SetConfig+0x33e>
 800b006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b00a:	d00b      	beq.n	800b024 <UART_SetConfig+0x32c>
 800b00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b010:	d811      	bhi.n	800b036 <UART_SetConfig+0x33e>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <UART_SetConfig+0x326>
 800b016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b01a:	d006      	beq.n	800b02a <UART_SetConfig+0x332>
 800b01c:	e00b      	b.n	800b036 <UART_SetConfig+0x33e>
 800b01e:	2300      	movs	r3, #0
 800b020:	77fb      	strb	r3, [r7, #31]
 800b022:	e00d      	b.n	800b040 <UART_SetConfig+0x348>
 800b024:	2302      	movs	r3, #2
 800b026:	77fb      	strb	r3, [r7, #31]
 800b028:	e00a      	b.n	800b040 <UART_SetConfig+0x348>
 800b02a:	2304      	movs	r3, #4
 800b02c:	77fb      	strb	r3, [r7, #31]
 800b02e:	e007      	b.n	800b040 <UART_SetConfig+0x348>
 800b030:	2308      	movs	r3, #8
 800b032:	77fb      	strb	r3, [r7, #31]
 800b034:	e004      	b.n	800b040 <UART_SetConfig+0x348>
 800b036:	2310      	movs	r3, #16
 800b038:	77fb      	strb	r3, [r7, #31]
 800b03a:	e001      	b.n	800b040 <UART_SetConfig+0x348>
 800b03c:	2310      	movs	r3, #16
 800b03e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b048:	d15b      	bne.n	800b102 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b04a:	7ffb      	ldrb	r3, [r7, #31]
 800b04c:	2b08      	cmp	r3, #8
 800b04e:	d828      	bhi.n	800b0a2 <UART_SetConfig+0x3aa>
 800b050:	a201      	add	r2, pc, #4	@ (adr r2, 800b058 <UART_SetConfig+0x360>)
 800b052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b056:	bf00      	nop
 800b058:	0800b07d 	.word	0x0800b07d
 800b05c:	0800b085 	.word	0x0800b085
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	0800b0a3 	.word	0x0800b0a3
 800b068:	0800b093 	.word	0x0800b093
 800b06c:	0800b0a3 	.word	0x0800b0a3
 800b070:	0800b0a3 	.word	0x0800b0a3
 800b074:	0800b0a3 	.word	0x0800b0a3
 800b078:	0800b09b 	.word	0x0800b09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b07c:	f7fc fbbc 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800b080:	61b8      	str	r0, [r7, #24]
        break;
 800b082:	e013      	b.n	800b0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b084:	f7fc fbcc 	bl	8007820 <HAL_RCC_GetPCLK2Freq>
 800b088:	61b8      	str	r0, [r7, #24]
        break;
 800b08a:	e00f      	b.n	800b0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b08c:	4b4b      	ldr	r3, [pc, #300]	@ (800b1bc <UART_SetConfig+0x4c4>)
 800b08e:	61bb      	str	r3, [r7, #24]
        break;
 800b090:	e00c      	b.n	800b0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b092:	f7fc fa9f 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 800b096:	61b8      	str	r0, [r7, #24]
        break;
 800b098:	e008      	b.n	800b0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b09a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b09e:	61bb      	str	r3, [r7, #24]
        break;
 800b0a0:	e004      	b.n	800b0ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	77bb      	strb	r3, [r7, #30]
        break;
 800b0aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d074      	beq.n	800b19c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	005a      	lsls	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	085b      	lsrs	r3, r3, #1
 800b0bc:	441a      	add	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b0f      	cmp	r3, #15
 800b0cc:	d916      	bls.n	800b0fc <UART_SetConfig+0x404>
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d4:	d212      	bcs.n	800b0fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	f023 030f 	bic.w	r3, r3, #15
 800b0de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	085b      	lsrs	r3, r3, #1
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	89fb      	ldrh	r3, [r7, #14]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	89fa      	ldrh	r2, [r7, #14]
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e04f      	b.n	800b19c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	77bb      	strb	r3, [r7, #30]
 800b100:	e04c      	b.n	800b19c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b102:	7ffb      	ldrb	r3, [r7, #31]
 800b104:	2b08      	cmp	r3, #8
 800b106:	d828      	bhi.n	800b15a <UART_SetConfig+0x462>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <UART_SetConfig+0x418>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	0800b15b 	.word	0x0800b15b
 800b120:	0800b14b 	.word	0x0800b14b
 800b124:	0800b15b 	.word	0x0800b15b
 800b128:	0800b15b 	.word	0x0800b15b
 800b12c:	0800b15b 	.word	0x0800b15b
 800b130:	0800b153 	.word	0x0800b153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b134:	f7fc fb60 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800b138:	61b8      	str	r0, [r7, #24]
        break;
 800b13a:	e013      	b.n	800b164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b13c:	f7fc fb70 	bl	8007820 <HAL_RCC_GetPCLK2Freq>
 800b140:	61b8      	str	r0, [r7, #24]
        break;
 800b142:	e00f      	b.n	800b164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b144:	4b1d      	ldr	r3, [pc, #116]	@ (800b1bc <UART_SetConfig+0x4c4>)
 800b146:	61bb      	str	r3, [r7, #24]
        break;
 800b148:	e00c      	b.n	800b164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b14a:	f7fc fa43 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 800b14e:	61b8      	str	r0, [r7, #24]
        break;
 800b150:	e008      	b.n	800b164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b156:	61bb      	str	r3, [r7, #24]
        break;
 800b158:	e004      	b.n	800b164 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	77bb      	strb	r3, [r7, #30]
        break;
 800b162:	bf00      	nop
    }

    if (pclk != 0U)
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d018      	beq.n	800b19c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	085a      	lsrs	r2, r3, #1
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	441a      	add	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b0f      	cmp	r3, #15
 800b182:	d909      	bls.n	800b198 <UART_SetConfig+0x4a0>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b18a:	d205      	bcs.n	800b198 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	60da      	str	r2, [r3, #12]
 800b196:	e001      	b.n	800b19c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b1a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	40007c00 	.word	0x40007c00
 800b1b8:	40023800 	.word	0x40023800
 800b1bc:	00f42400 	.word	0x00f42400

0800b1c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	f003 0302 	and.w	r3, r3, #2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	430a      	orrs	r2, r1
 800b22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b276:	f003 0320 	and.w	r3, r3, #32
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	430a      	orrs	r2, r1
 800b292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01a      	beq.n	800b2d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2be:	d10a      	bne.n	800b2d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	605a      	str	r2, [r3, #4]
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	@ 0x30
 800b308:	af02      	add	r7, sp, #8
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b314:	f7f8 fdd2 	bl	8003ebc <HAL_GetTick>
 800b318:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	2b08      	cmp	r3, #8
 800b326:	d12e      	bne.n	800b386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	2200      	movs	r2, #0
 800b332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f83b 	bl	800b3b2 <UART_WaitOnFlagUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d021      	beq.n	800b386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b356:	623b      	str	r3, [r7, #32]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	61fb      	str	r3, [r7, #28]
 800b362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	69b9      	ldr	r1, [r7, #24]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	617b      	str	r3, [r7, #20]
   return(result);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e6      	bne.n	800b342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e011      	b.n	800b3aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2220      	movs	r2, #32
 800b390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3728      	adds	r7, #40	@ 0x28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	603b      	str	r3, [r7, #0]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c2:	e04f      	b.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ca:	d04b      	beq.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3cc:	f7f8 fd76 	bl	8003ebc <HAL_GetTick>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d302      	bcc.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e04e      	b.n	800b484 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d037      	beq.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b80      	cmp	r3, #128	@ 0x80
 800b3f8:	d034      	beq.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2b40      	cmp	r3, #64	@ 0x40
 800b3fe:	d031      	beq.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d110      	bne.n	800b430 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2208      	movs	r2, #8
 800b414:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f8fe 	bl	800b618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2208      	movs	r2, #8
 800b420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e029      	b.n	800b484 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b43a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b43e:	d111      	bne.n	800b464 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b448:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 f8e4 	bl	800b618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2220      	movs	r2, #32
 800b454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e00f      	b.n	800b484 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	69da      	ldr	r2, [r3, #28]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	4013      	ands	r3, r2
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	429a      	cmp	r2, r3
 800b472:	bf0c      	ite	eq
 800b474:	2301      	moveq	r3, #1
 800b476:	2300      	movne	r3, #0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	461a      	mov	r2, r3
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d0a0      	beq.n	800b3c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b096      	sub	sp, #88	@ 0x58
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	4613      	mov	r3, r2
 800b498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	88fa      	ldrh	r2, [r7, #6]
 800b4a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2222      	movs	r2, #34	@ 0x22
 800b4b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d028      	beq.n	800b512 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b5c0 <UART_Start_Receive_DMA+0x134>)
 800b4c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4cc:	4a3d      	ldr	r2, [pc, #244]	@ (800b5c4 <UART_Start_Receive_DMA+0x138>)
 800b4ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4d4:	4a3c      	ldr	r2, [pc, #240]	@ (800b5c8 <UART_Start_Receive_DMA+0x13c>)
 800b4d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4dc:	2200      	movs	r2, #0
 800b4de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3324      	adds	r3, #36	@ 0x24
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	88fb      	ldrh	r3, [r7, #6]
 800b4f4:	f7f9 fb80 	bl	8004bf8 <HAL_DMA_Start_IT>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d009      	beq.n	800b512 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2210      	movs	r2, #16
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2220      	movs	r2, #32
 800b50a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e051      	b.n	800b5b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d018      	beq.n	800b54c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b52e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	461a      	mov	r2, r3
 800b536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b53a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b53e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b540:	e841 2300 	strex	r3, r2, [r1]
 800b544:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1e6      	bne.n	800b51a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3308      	adds	r3, #8
 800b552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	653b      	str	r3, [r7, #80]	@ 0x50
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3308      	adds	r3, #8
 800b56a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b56c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b56e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b574:	e841 2300 	strex	r3, r2, [r1]
 800b578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1e5      	bne.n	800b54c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3308      	adds	r3, #8
 800b586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	613b      	str	r3, [r7, #16]
   return(result);
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5a0:	623a      	str	r2, [r7, #32]
 800b5a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	69f9      	ldr	r1, [r7, #28]
 800b5a6:	6a3a      	ldr	r2, [r7, #32]
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e5      	bne.n	800b580 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3758      	adds	r7, #88	@ 0x58
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800b6e1 	.word	0x0800b6e1
 800b5c4:	0800b83f 	.word	0x0800b83f
 800b5c8:	0800b8b1 	.word	0x0800b8b1

0800b5cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b089      	sub	sp, #36	@ 0x24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	61bb      	str	r3, [r7, #24]
 800b5f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	6979      	ldr	r1, [r7, #20]
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e6      	bne.n	800b5d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2220      	movs	r2, #32
 800b60a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b60c:	bf00      	nop
 800b60e:	3724      	adds	r7, #36	@ 0x24
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b095      	sub	sp, #84	@ 0x54
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b628:	e853 3f00 	ldrex	r3, [r3]
 800b62c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1e6      	bne.n	800b620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3308      	adds	r3, #8
 800b658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	61fb      	str	r3, [r7, #28]
   return(result);
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	f023 0301 	bic.w	r3, r3, #1
 800b668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3308      	adds	r3, #8
 800b670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e5      	bne.n	800b652 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d118      	bne.n	800b6c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f023 0310 	bic.w	r3, r3, #16
 800b6a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	6979      	ldr	r1, [r7, #20]
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e6      	bne.n	800b68e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b6d4:	bf00      	nop
 800b6d6:	3754      	adds	r7, #84	@ 0x54
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b09c      	sub	sp, #112	@ 0x70
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6f6:	d071      	beq.n	800b7dc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b6f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b714:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b71e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b720:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b724:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b72c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e6      	bne.n	800b700 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3308      	adds	r3, #8
 800b738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	f023 0301 	bic.w	r3, r3, #1
 800b748:	667b      	str	r3, [r7, #100]	@ 0x64
 800b74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b752:	643a      	str	r2, [r7, #64]	@ 0x40
 800b754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	61fb      	str	r3, [r7, #28]
   return(result);
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b77c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b77e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b78c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e5      	bne.n	800b766 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b79a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d118      	bne.n	800b7dc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	e853 3f00 	ldrex	r3, [r3]
 800b7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f023 0310 	bic.w	r3, r3, #16
 800b7be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	6979      	ldr	r1, [r7, #20]
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e6      	bne.n	800b7aa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7de:	2200      	movs	r2, #0
 800b7e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d122      	bne.n	800b830 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b7ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b7fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b802:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b806:	429a      	cmp	r2, r3
 800b808:	d204      	bcs.n	800b814 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b80a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b80c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b810:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b816:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b820:	b29b      	uxth	r3, r3
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	b29b      	uxth	r3, r3
 800b826:	4619      	mov	r1, r3
 800b828:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b82a:	f7f7 f85d 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b82e:	e002      	b.n	800b836 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b830:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b832:	f7ff fa43 	bl	800acbc <HAL_UART_RxCpltCallback>
}
 800b836:	bf00      	nop
 800b838:	3770      	adds	r7, #112	@ 0x70
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b84a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b856:	2b01      	cmp	r3, #1
 800b858:	d123      	bne.n	800b8a2 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	b29a      	uxth	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b878:	897a      	ldrh	r2, [r7, #10]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d803      	bhi.n	800b886 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	897a      	ldrh	r2, [r7, #10]
 800b882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b892:	b29b      	uxth	r3, r3
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	b29b      	uxth	r3, r3
 800b898:	4619      	mov	r1, r3
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7f7 f824 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8a0:	e002      	b.n	800b8a8 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff fa14 	bl	800acd0 <HAL_UART_RxHalfCpltCallback>
}
 800b8a8:	bf00      	nop
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8d6:	2b80      	cmp	r3, #128	@ 0x80
 800b8d8:	d109      	bne.n	800b8ee <UART_DMAError+0x3e>
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	2b21      	cmp	r3, #33	@ 0x21
 800b8de:	d106      	bne.n	800b8ee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b8e8:	6978      	ldr	r0, [r7, #20]
 800b8ea:	f7ff fe6f 	bl	800b5cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8f8:	2b40      	cmp	r3, #64	@ 0x40
 800b8fa:	d109      	bne.n	800b910 <UART_DMAError+0x60>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b22      	cmp	r3, #34	@ 0x22
 800b900:	d106      	bne.n	800b910 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2200      	movs	r2, #0
 800b906:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b90a:	6978      	ldr	r0, [r7, #20]
 800b90c:	f7ff fe84 	bl	800b618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b916:	f043 0210 	orr.w	r2, r3, #16
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b920:	6978      	ldr	r0, [r7, #20]
 800b922:	f7ff f9df 	bl	800ace4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b926:	bf00      	nop
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff f9cd 	bl	800ace4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b088      	sub	sp, #32
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	60bb      	str	r3, [r7, #8]
   return(result);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	613b      	str	r3, [r7, #16]
   return(result);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e6      	bne.n	800b95a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2220      	movs	r2, #32
 800b990:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff f985 	bl	800aca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b99e:	bf00      	nop
 800b9a0:	3720      	adds	r7, #32
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b08c      	sub	sp, #48	@ 0x30
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	60b9      	str	r1, [r7, #8]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d142      	bne.n	800ba44 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e03b      	b.n	800ba46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f7ff fd53 	bl	800b48c <UART_Start_Receive_DMA>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b9ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d124      	bne.n	800ba3e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d11d      	bne.n	800ba38 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2210      	movs	r2, #16
 800ba02:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	e853 3f00 	ldrex	r3, [r3]
 800ba10:	617b      	str	r3, [r7, #20]
   return(result);
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f043 0310 	orr.w	r3, r3, #16
 800ba18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba24:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba26:	6a39      	ldr	r1, [r7, #32]
 800ba28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba2a:	e841 2300 	strex	r3, r2, [r1]
 800ba2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1e6      	bne.n	800ba04 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ba36:	e002      	b.n	800ba3e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ba3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba42:	e000      	b.n	800ba46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ba44:	2302      	movs	r3, #2
  }
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3730      	adds	r7, #48	@ 0x30
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba50:	b084      	sub	sp, #16
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	f107 001c 	add.w	r0, r7, #28
 800ba5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d127      	bne.n	800baba <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	4b3a      	ldr	r3, [pc, #232]	@ (800bb64 <USB_CoreInit+0x114>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f043 0210 	orr.w	r2, r3, #16
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d105      	bne.n	800baae <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 fb20 	bl	800d0f4 <USB_CoreReset>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73fb      	strb	r3, [r7, #15]
 800bab8:	e03c      	b.n	800bb34 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800baba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d127      	bne.n	800bb12 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	4b24      	ldr	r3, [pc, #144]	@ (800bb64 <USB_CoreInit+0x114>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f023 0210 	bic.w	r2, r3, #16
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800baf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d105      	bne.n	800bb06 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 faf4 	bl	800d0f4 <USB_CoreReset>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
 800bb10:	e010      	b.n	800bb34 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 fae8 	bl	800d0f4 <USB_CoreReset>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800bb34:	7fbb      	ldrb	r3, [r7, #30]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d10b      	bne.n	800bb52 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f043 0206 	orr.w	r2, r3, #6
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f043 0220 	orr.w	r2, r3, #32
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb5e:	b004      	add	sp, #16
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	ffbdffbf 	.word	0xffbdffbf

0800bb68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	4613      	mov	r3, r2
 800bb74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d165      	bne.n	800bc48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	4a41      	ldr	r2, [pc, #260]	@ (800bc84 <USB_SetTurnaroundTime+0x11c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d906      	bls.n	800bb92 <USB_SetTurnaroundTime+0x2a>
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	4a40      	ldr	r2, [pc, #256]	@ (800bc88 <USB_SetTurnaroundTime+0x120>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d202      	bcs.n	800bb92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bb8c:	230f      	movs	r3, #15
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e062      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	4a3c      	ldr	r2, [pc, #240]	@ (800bc88 <USB_SetTurnaroundTime+0x120>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d306      	bcc.n	800bba8 <USB_SetTurnaroundTime+0x40>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4a3b      	ldr	r2, [pc, #236]	@ (800bc8c <USB_SetTurnaroundTime+0x124>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d202      	bcs.n	800bba8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bba2:	230e      	movs	r3, #14
 800bba4:	617b      	str	r3, [r7, #20]
 800bba6:	e057      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	4a38      	ldr	r2, [pc, #224]	@ (800bc8c <USB_SetTurnaroundTime+0x124>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d306      	bcc.n	800bbbe <USB_SetTurnaroundTime+0x56>
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4a37      	ldr	r2, [pc, #220]	@ (800bc90 <USB_SetTurnaroundTime+0x128>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d202      	bcs.n	800bbbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bbb8:	230d      	movs	r3, #13
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	e04c      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	4a33      	ldr	r2, [pc, #204]	@ (800bc90 <USB_SetTurnaroundTime+0x128>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d306      	bcc.n	800bbd4 <USB_SetTurnaroundTime+0x6c>
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	4a32      	ldr	r2, [pc, #200]	@ (800bc94 <USB_SetTurnaroundTime+0x12c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d802      	bhi.n	800bbd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bbce:	230c      	movs	r3, #12
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	e041      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	4a2f      	ldr	r2, [pc, #188]	@ (800bc94 <USB_SetTurnaroundTime+0x12c>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d906      	bls.n	800bbea <USB_SetTurnaroundTime+0x82>
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	4a2e      	ldr	r2, [pc, #184]	@ (800bc98 <USB_SetTurnaroundTime+0x130>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d802      	bhi.n	800bbea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bbe4:	230b      	movs	r3, #11
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	e036      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	4a2a      	ldr	r2, [pc, #168]	@ (800bc98 <USB_SetTurnaroundTime+0x130>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d906      	bls.n	800bc00 <USB_SetTurnaroundTime+0x98>
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	4a29      	ldr	r2, [pc, #164]	@ (800bc9c <USB_SetTurnaroundTime+0x134>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d802      	bhi.n	800bc00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bbfa:	230a      	movs	r3, #10
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	e02b      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	4a26      	ldr	r2, [pc, #152]	@ (800bc9c <USB_SetTurnaroundTime+0x134>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d906      	bls.n	800bc16 <USB_SetTurnaroundTime+0xae>
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	4a25      	ldr	r2, [pc, #148]	@ (800bca0 <USB_SetTurnaroundTime+0x138>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d202      	bcs.n	800bc16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bc10:	2309      	movs	r3, #9
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e020      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	4a21      	ldr	r2, [pc, #132]	@ (800bca0 <USB_SetTurnaroundTime+0x138>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d306      	bcc.n	800bc2c <USB_SetTurnaroundTime+0xc4>
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	4a20      	ldr	r2, [pc, #128]	@ (800bca4 <USB_SetTurnaroundTime+0x13c>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d802      	bhi.n	800bc2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bc26:	2308      	movs	r3, #8
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	e015      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bca4 <USB_SetTurnaroundTime+0x13c>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d906      	bls.n	800bc42 <USB_SetTurnaroundTime+0xda>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4a1c      	ldr	r2, [pc, #112]	@ (800bca8 <USB_SetTurnaroundTime+0x140>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d202      	bcs.n	800bc42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bc3c:	2307      	movs	r3, #7
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	e00a      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bc42:	2306      	movs	r3, #6
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	e007      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bc48:	79fb      	ldrb	r3, [r7, #7]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bc4e:	2309      	movs	r3, #9
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	e001      	b.n	800bc58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bc54:	2309      	movs	r3, #9
 800bc56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	68da      	ldr	r2, [r3, #12]
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	029b      	lsls	r3, r3, #10
 800bc6c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bc70:	431a      	orrs	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	00d8acbf 	.word	0x00d8acbf
 800bc88:	00e4e1c0 	.word	0x00e4e1c0
 800bc8c:	00f42400 	.word	0x00f42400
 800bc90:	01067380 	.word	0x01067380
 800bc94:	011a499f 	.word	0x011a499f
 800bc98:	01312cff 	.word	0x01312cff
 800bc9c:	014ca43f 	.word	0x014ca43f
 800bca0:	016e3600 	.word	0x016e3600
 800bca4:	01a6ab1f 	.word	0x01a6ab1f
 800bca8:	01e84800 	.word	0x01e84800

0800bcac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f043 0201 	orr.w	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f023 0201 	bic.w	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d115      	bne.n	800bd3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd1e:	200a      	movs	r0, #10
 800bd20:	f7f8 f8d8 	bl	8003ed4 <HAL_Delay>
      ms += 10U;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	330a      	adds	r3, #10
 800bd28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f001 f951 	bl	800cfd2 <USB_GetMode>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d01e      	beq.n	800bd74 <USB_SetCurrentMode+0x84>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd3a:	d9f0      	bls.n	800bd1e <USB_SetCurrentMode+0x2e>
 800bd3c:	e01a      	b.n	800bd74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d115      	bne.n	800bd70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd50:	200a      	movs	r0, #10
 800bd52:	f7f8 f8bf 	bl	8003ed4 <HAL_Delay>
      ms += 10U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	330a      	adds	r3, #10
 800bd5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 f938 	bl	800cfd2 <USB_GetMode>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d005      	beq.n	800bd74 <USB_SetCurrentMode+0x84>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2bc7      	cmp	r3, #199	@ 0xc7
 800bd6c:	d9f0      	bls.n	800bd50 <USB_SetCurrentMode+0x60>
 800bd6e:	e001      	b.n	800bd74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e005      	b.n	800bd80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2bc8      	cmp	r3, #200	@ 0xc8
 800bd78:	d101      	bne.n	800bd7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e000      	b.n	800bd80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd88:	b084      	sub	sp, #16
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bd96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bda2:	2300      	movs	r3, #0
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	e009      	b.n	800bdbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	3340      	adds	r3, #64	@ 0x40
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	613b      	str	r3, [r7, #16]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2b0e      	cmp	r3, #14
 800bdc0:	d9f2      	bls.n	800bda8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bdc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d11c      	bne.n	800be04 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdd8:	f043 0302 	orr.w	r3, r3, #2
 800bddc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	e005      	b.n	800be10 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be16:	461a      	mov	r2, r3
 800be18:	2300      	movs	r3, #0
 800be1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800be20:	2b01      	cmp	r3, #1
 800be22:	d10d      	bne.n	800be40 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d104      	bne.n	800be36 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be2c:	2100      	movs	r1, #0
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f97a 	bl	800c128 <USB_SetDevSpeed>
 800be34:	e01a      	b.n	800be6c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be36:	2101      	movs	r1, #1
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f975 	bl	800c128 <USB_SetDevSpeed>
 800be3e:	e015      	b.n	800be6c <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800be40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800be44:	2b03      	cmp	r3, #3
 800be46:	d10d      	bne.n	800be64 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800be48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d104      	bne.n	800be5a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800be50:	2100      	movs	r1, #0
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f968 	bl	800c128 <USB_SetDevSpeed>
 800be58:	e008      	b.n	800be6c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be5a:	2101      	movs	r1, #1
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f963 	bl	800c128 <USB_SetDevSpeed>
 800be62:	e003      	b.n	800be6c <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be64:	2103      	movs	r1, #3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f95e 	bl	800c128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be6c:	2110      	movs	r1, #16
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f8fa 	bl	800c068 <USB_FlushTxFifo>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f924 	bl	800c0cc <USB_FlushRxFifo>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be94:	461a      	mov	r2, r3
 800be96:	2300      	movs	r3, #0
 800be98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bea0:	461a      	mov	r2, r3
 800bea2:	2300      	movs	r3, #0
 800bea4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beac:	461a      	mov	r2, r3
 800beae:	2300      	movs	r3, #0
 800beb0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800beb2:	2300      	movs	r3, #0
 800beb4:	613b      	str	r3, [r7, #16]
 800beb6:	e043      	b.n	800bf40 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800beca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bece:	d118      	bne.n	800bf02 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10a      	bne.n	800beec <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	015a      	lsls	r2, r3, #5
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	4413      	add	r3, r2
 800bede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee2:	461a      	mov	r2, r3
 800bee4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bee8:	6013      	str	r3, [r2, #0]
 800beea:	e013      	b.n	800bf14 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bef8:	461a      	mov	r2, r3
 800befa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	e008      	b.n	800bf14 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf0e:	461a      	mov	r2, r3
 800bf10:	2300      	movs	r3, #0
 800bf12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	015a      	lsls	r2, r3, #5
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf20:	461a      	mov	r2, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf32:	461a      	mov	r2, r3
 800bf34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bf38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	613b      	str	r3, [r7, #16]
 800bf40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bf44:	461a      	mov	r2, r3
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d3b5      	bcc.n	800beb8 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	613b      	str	r3, [r7, #16]
 800bf50:	e043      	b.n	800bfda <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf68:	d118      	bne.n	800bf9c <USB_DevInit+0x214>
    {
      if (i == 0U)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10a      	bne.n	800bf86 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bf82:	6013      	str	r3, [r2, #0]
 800bf84:	e013      	b.n	800bfae <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf92:	461a      	mov	r2, r3
 800bf94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	e008      	b.n	800bfae <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	015a      	lsls	r2, r3, #5
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfba:	461a      	mov	r2, r3
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	015a      	lsls	r2, r3, #5
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfcc:	461a      	mov	r2, r3
 800bfce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bfd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfde:	461a      	mov	r2, r3
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d3b5      	bcc.n	800bf52 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bff8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c006:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c008:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	f043 0210 	orr.w	r2, r3, #16
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	4b0f      	ldr	r3, [pc, #60]	@ (800c060 <USB_DevInit+0x2d8>)
 800c022:	4313      	orrs	r3, r2
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c028:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	f043 0208 	orr.w	r2, r3, #8
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c03c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c040:	2b01      	cmp	r3, #1
 800c042:	d105      	bne.n	800c050 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	699a      	ldr	r2, [r3, #24]
 800c048:	4b06      	ldr	r3, [pc, #24]	@ (800c064 <USB_DevInit+0x2dc>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c05c:	b004      	add	sp, #16
 800c05e:	4770      	bx	lr
 800c060:	803c3800 	.word	0x803c3800
 800c064:	40000004 	.word	0x40000004

0800c068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c082:	d901      	bls.n	800c088 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	e01b      	b.n	800c0c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	daf2      	bge.n	800c076 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	019b      	lsls	r3, r3, #6
 800c098:	f043 0220 	orr.w	r2, r3, #32
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0ac:	d901      	bls.n	800c0b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e006      	b.n	800c0c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d0f0      	beq.n	800c0a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c0e4:	d901      	bls.n	800c0ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e018      	b.n	800c11c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	daf2      	bge.n	800c0d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2210      	movs	r2, #16
 800c0fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	3301      	adds	r3, #1
 800c100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c108:	d901      	bls.n	800c10e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e006      	b.n	800c11c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f003 0310 	and.w	r3, r3, #16
 800c116:	2b10      	cmp	r3, #16
 800c118:	d0f0      	beq.n	800c0fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c148:	4313      	orrs	r3, r2
 800c14a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b087      	sub	sp, #28
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 0306 	and.w	r3, r3, #6
 800c172:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c17a:	2300      	movs	r3, #0
 800c17c:	75fb      	strb	r3, [r7, #23]
 800c17e:	e00a      	b.n	800c196 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b02      	cmp	r3, #2
 800c184:	d002      	beq.n	800c18c <USB_GetDevSpeed+0x32>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b06      	cmp	r3, #6
 800c18a:	d102      	bne.n	800c192 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c18c:	2302      	movs	r3, #2
 800c18e:	75fb      	strb	r3, [r7, #23]
 800c190:	e001      	b.n	800c196 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c192:	230f      	movs	r3, #15
 800c194:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	371c      	adds	r7, #28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d139      	bne.n	800c234 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f003 030f 	and.w	r3, r3, #15
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	68f9      	ldr	r1, [r7, #12]
 800c1da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d153      	bne.n	800c2a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	791b      	ldrb	r3, [r3, #4]
 800c212:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c214:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	059b      	lsls	r3, r3, #22
 800c21a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c21c:	431a      	orrs	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	0159      	lsls	r1, r3, #5
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	440b      	add	r3, r1
 800c226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c22a:	4619      	mov	r1, r3
 800c22c:	4b20      	ldr	r3, [pc, #128]	@ (800c2b0 <USB_ActivateEndpoint+0x10c>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	600b      	str	r3, [r1, #0]
 800c232:	e035      	b.n	800c2a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c23a:	69da      	ldr	r2, [r3, #28]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	f003 030f 	and.w	r3, r3, #15
 800c244:	2101      	movs	r1, #1
 800c246:	fa01 f303 	lsl.w	r3, r1, r3
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	68f9      	ldr	r1, [r7, #12]
 800c24e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c252:	4313      	orrs	r3, r2
 800c254:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d119      	bne.n	800c2a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4413      	add	r3, r2
 800c274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	791b      	ldrb	r3, [r3, #4]
 800c286:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c288:	430b      	orrs	r3, r1
 800c28a:	431a      	orrs	r2, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	0159      	lsls	r1, r3, #5
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	440b      	add	r3, r1
 800c294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c298:	4619      	mov	r1, r3
 800c29a:	4b05      	ldr	r3, [pc, #20]	@ (800c2b0 <USB_ActivateEndpoint+0x10c>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	10008000 	.word	0x10008000

0800c2b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	785b      	ldrb	r3, [r3, #1]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d161      	bne.n	800c394 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2e6:	d11f      	bne.n	800c328 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c302:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c306:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	0151      	lsls	r1, r2, #5
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	440a      	add	r2, r1
 800c31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c322:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c32e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	2101      	movs	r1, #1
 800c33a:	fa01 f303 	lsl.w	r3, r1, r3
 800c33e:	b29b      	uxth	r3, r3
 800c340:	43db      	mvns	r3, r3
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c348:	4013      	ands	r3, r2
 800c34a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c352:	69da      	ldr	r2, [r3, #28]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	f003 030f 	and.w	r3, r3, #15
 800c35c:	2101      	movs	r1, #1
 800c35e:	fa01 f303 	lsl.w	r3, r1, r3
 800c362:	b29b      	uxth	r3, r3
 800c364:	43db      	mvns	r3, r3
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c36c:	4013      	ands	r3, r2
 800c36e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	0159      	lsls	r1, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	440b      	add	r3, r1
 800c386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c38a:	4619      	mov	r1, r3
 800c38c:	4b35      	ldr	r3, [pc, #212]	@ (800c464 <USB_DeactivateEndpoint+0x1b0>)
 800c38e:	4013      	ands	r3, r2
 800c390:	600b      	str	r3, [r1, #0]
 800c392:	e060      	b.n	800c456 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c3a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c3aa:	d11f      	bne.n	800c3ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	0151      	lsls	r1, r2, #5
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	440a      	add	r2, r1
 800c3c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c3ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	0151      	lsls	r1, r2, #5
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c402:	041b      	lsls	r3, r3, #16
 800c404:	43db      	mvns	r3, r3
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c40c:	4013      	ands	r3, r2
 800c40e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c416:	69da      	ldr	r2, [r3, #28]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	f003 030f 	and.w	r3, r3, #15
 800c420:	2101      	movs	r1, #1
 800c422:	fa01 f303 	lsl.w	r3, r1, r3
 800c426:	041b      	lsls	r3, r3, #16
 800c428:	43db      	mvns	r3, r3
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c430:	4013      	ands	r3, r2
 800c432:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	0159      	lsls	r1, r3, #5
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	440b      	add	r3, r1
 800c44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c44e:	4619      	mov	r1, r3
 800c450:	4b05      	ldr	r3, [pc, #20]	@ (800c468 <USB_DeactivateEndpoint+0x1b4>)
 800c452:	4013      	ands	r3, r2
 800c454:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	ec337800 	.word	0xec337800
 800c468:	eff37800 	.word	0xeff37800

0800c46c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	@ 0x28
 800c470:	af02      	add	r7, sp, #8
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	f040 8185 	bne.w	800c798 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d132      	bne.n	800c4fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	015a      	lsls	r2, r3, #5
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	4413      	add	r3, r2
 800c49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4a2:	691a      	ldr	r2, [r3, #16]
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	0159      	lsls	r1, r3, #5
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	440b      	add	r3, r1
 800c4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4ba7      	ldr	r3, [pc, #668]	@ (800c750 <USB_EPStartXfer+0x2e4>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	69ba      	ldr	r2, [r7, #24]
 800c4c8:	0151      	lsls	r1, r2, #5
 800c4ca:	69fa      	ldr	r2, [r7, #28]
 800c4cc:	440a      	add	r2, r1
 800c4ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e4:	691a      	ldr	r2, [r3, #16]
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	0159      	lsls	r1, r3, #5
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	440b      	add	r3, r1
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4b97      	ldr	r3, [pc, #604]	@ (800c754 <USB_EPStartXfer+0x2e8>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	610b      	str	r3, [r1, #16]
 800c4fa:	e097      	b.n	800c62c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	015a      	lsls	r2, r3, #5
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	4413      	add	r3, r2
 800c504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c508:	691a      	ldr	r2, [r3, #16]
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	0159      	lsls	r1, r3, #5
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	440b      	add	r3, r1
 800c512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c516:	4619      	mov	r1, r3
 800c518:	4b8e      	ldr	r3, [pc, #568]	@ (800c754 <USB_EPStartXfer+0x2e8>)
 800c51a:	4013      	ands	r3, r2
 800c51c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c52a:	691a      	ldr	r2, [r3, #16]
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	0159      	lsls	r1, r3, #5
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	440b      	add	r3, r1
 800c534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c538:	4619      	mov	r1, r3
 800c53a:	4b85      	ldr	r3, [pc, #532]	@ (800c750 <USB_EPStartXfer+0x2e4>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d11a      	bne.n	800c57c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d903      	bls.n	800c55a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	689a      	ldr	r2, [r3, #8]
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	0151      	lsls	r1, r2, #5
 800c56c:	69fa      	ldr	r2, [r7, #28]
 800c56e:	440a      	add	r2, r1
 800c570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c578:	6113      	str	r3, [r2, #16]
 800c57a:	e044      	b.n	800c606 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	691a      	ldr	r2, [r3, #16]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	4413      	add	r3, r2
 800c586:	1e5a      	subs	r2, r3, #1
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c590:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	015a      	lsls	r2, r3, #5
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	4413      	add	r3, r2
 800c59a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c59e:	691a      	ldr	r2, [r3, #16]
 800c5a0:	8afb      	ldrh	r3, [r7, #22]
 800c5a2:	04d9      	lsls	r1, r3, #19
 800c5a4:	4b6c      	ldr	r3, [pc, #432]	@ (800c758 <USB_EPStartXfer+0x2ec>)
 800c5a6:	400b      	ands	r3, r1
 800c5a8:	69b9      	ldr	r1, [r7, #24]
 800c5aa:	0148      	lsls	r0, r1, #5
 800c5ac:	69f9      	ldr	r1, [r7, #28]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	791b      	ldrb	r3, [r3, #4]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d122      	bne.n	800c606 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	015a      	lsls	r2, r3, #5
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	0151      	lsls	r1, r2, #5
 800c5d2:	69fa      	ldr	r2, [r7, #28]
 800c5d4:	440a      	add	r2, r1
 800c5d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c5de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	015a      	lsls	r2, r3, #5
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5ec:	691a      	ldr	r2, [r3, #16]
 800c5ee:	8afb      	ldrh	r3, [r7, #22]
 800c5f0:	075b      	lsls	r3, r3, #29
 800c5f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c5f6:	69b9      	ldr	r1, [r7, #24]
 800c5f8:	0148      	lsls	r0, r1, #5
 800c5fa:	69f9      	ldr	r1, [r7, #28]
 800c5fc:	4401      	add	r1, r0
 800c5fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c602:	4313      	orrs	r3, r2
 800c604:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c61c:	69b9      	ldr	r1, [r7, #24]
 800c61e:	0148      	lsls	r0, r1, #5
 800c620:	69f9      	ldr	r1, [r7, #28]
 800c622:	4401      	add	r1, r0
 800c624:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c628:	4313      	orrs	r3, r2
 800c62a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d14b      	bne.n	800c6ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d009      	beq.n	800c64e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c646:	461a      	mov	r2, r3
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	791b      	ldrb	r3, [r3, #4]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d128      	bne.n	800c6a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c662:	2b00      	cmp	r3, #0
 800c664:	d110      	bne.n	800c688 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c680:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	e00f      	b.n	800c6a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69ba      	ldr	r2, [r7, #24]
 800c6b8:	0151      	lsls	r1, r2, #5
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	440a      	add	r2, r1
 800c6be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	e169      	b.n	800c99e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	015a      	lsls	r2, r3, #5
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	69ba      	ldr	r2, [r7, #24]
 800c6da:	0151      	lsls	r1, r2, #5
 800c6dc:	69fa      	ldr	r2, [r7, #28]
 800c6de:	440a      	add	r2, r1
 800c6e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c6e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	791b      	ldrb	r3, [r3, #4]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d015      	beq.n	800c71e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 8151 	beq.w	800c99e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	2101      	movs	r1, #1
 800c70e:	fa01 f303 	lsl.w	r3, r1, r3
 800c712:	69f9      	ldr	r1, [r7, #28]
 800c714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c718:	4313      	orrs	r3, r2
 800c71a:	634b      	str	r3, [r1, #52]	@ 0x34
 800c71c:	e13f      	b.n	800c99e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d116      	bne.n	800c75c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	015a      	lsls	r2, r3, #5
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	4413      	add	r3, r2
 800c736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	69ba      	ldr	r2, [r7, #24]
 800c73e:	0151      	lsls	r1, r2, #5
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	440a      	add	r2, r1
 800c744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c748:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c74c:	6013      	str	r3, [r2, #0]
 800c74e:	e015      	b.n	800c77c <USB_EPStartXfer+0x310>
 800c750:	e007ffff 	.word	0xe007ffff
 800c754:	fff80000 	.word	0xfff80000
 800c758:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	69ba      	ldr	r2, [r7, #24]
 800c76c:	0151      	lsls	r1, r2, #5
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	440a      	add	r2, r1
 800c772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c77a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	68d9      	ldr	r1, [r3, #12]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	781a      	ldrb	r2, [r3, #0]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	b298      	uxth	r0, r3
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	4603      	mov	r3, r0
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 f9b9 	bl	800cb08 <USB_WritePacket>
 800c796:	e102      	b.n	800c99e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	0159      	lsls	r1, r3, #5
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	440b      	add	r3, r1
 800c7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4b7c      	ldr	r3, [pc, #496]	@ (800c9a8 <USB_EPStartXfer+0x53c>)
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c6:	691a      	ldr	r2, [r3, #16]
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	0159      	lsls	r1, r3, #5
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	440b      	add	r3, r1
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4b75      	ldr	r3, [pc, #468]	@ (800c9ac <USB_EPStartXfer+0x540>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d12f      	bne.n	800c842 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	689a      	ldr	r2, [r3, #8]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	689a      	ldr	r2, [r3, #8]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c806:	691a      	ldr	r2, [r3, #16]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c810:	69b9      	ldr	r1, [r7, #24]
 800c812:	0148      	lsls	r0, r1, #5
 800c814:	69f9      	ldr	r1, [r7, #28]
 800c816:	4401      	add	r1, r0
 800c818:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c81c:	4313      	orrs	r3, r2
 800c81e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	69ba      	ldr	r2, [r7, #24]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	69fa      	ldr	r2, [r7, #28]
 800c834:	440a      	add	r2, r1
 800c836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c83a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c83e:	6113      	str	r3, [r2, #16]
 800c840:	e05f      	b.n	800c902 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d123      	bne.n	800c892 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c856:	691a      	ldr	r2, [r3, #16]
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c860:	69b9      	ldr	r1, [r7, #24]
 800c862:	0148      	lsls	r0, r1, #5
 800c864:	69f9      	ldr	r1, [r7, #28]
 800c866:	4401      	add	r1, r0
 800c868:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c86c:	4313      	orrs	r3, r2
 800c86e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	440a      	add	r2, r1
 800c886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c88a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c88e:	6113      	str	r3, [r2, #16]
 800c890:	e037      	b.n	800c902 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	691a      	ldr	r2, [r3, #16]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	4413      	add	r3, r2
 800c89c:	1e5a      	subs	r2, r3, #1
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	8afa      	ldrh	r2, [r7, #22]
 800c8ae:	fb03 f202 	mul.w	r2, r3, r2
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	8afb      	ldrh	r3, [r7, #22]
 800c8c6:	04d9      	lsls	r1, r3, #19
 800c8c8:	4b39      	ldr	r3, [pc, #228]	@ (800c9b0 <USB_EPStartXfer+0x544>)
 800c8ca:	400b      	ands	r3, r1
 800c8cc:	69b9      	ldr	r1, [r7, #24]
 800c8ce:	0148      	lsls	r0, r1, #5
 800c8d0:	69f9      	ldr	r1, [r7, #28]
 800c8d2:	4401      	add	r1, r0
 800c8d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8e8:	691a      	ldr	r2, [r3, #16]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8f2:	69b9      	ldr	r1, [r7, #24]
 800c8f4:	0148      	lsls	r0, r1, #5
 800c8f6:	69f9      	ldr	r1, [r7, #28]
 800c8f8:	4401      	add	r1, r0
 800c8fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c8fe:	4313      	orrs	r3, r2
 800c900:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d10d      	bne.n	800c924 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d009      	beq.n	800c924 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	68d9      	ldr	r1, [r3, #12]
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c920:	460a      	mov	r2, r1
 800c922:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	791b      	ldrb	r3, [r3, #4]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d128      	bne.n	800c97e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d110      	bne.n	800c95e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69ba      	ldr	r2, [r7, #24]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	69fa      	ldr	r2, [r7, #28]
 800c950:	440a      	add	r2, r1
 800c952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c956:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e00f      	b.n	800c97e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	4413      	add	r3, r2
 800c966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	0151      	lsls	r1, r2, #5
 800c970:	69fa      	ldr	r2, [r7, #28]
 800c972:	440a      	add	r2, r1
 800c974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c97c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	4413      	add	r3, r2
 800c986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	69ba      	ldr	r2, [r7, #24]
 800c98e:	0151      	lsls	r1, r2, #5
 800c990:	69fa      	ldr	r2, [r7, #28]
 800c992:	440a      	add	r2, r1
 800c994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c998:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c99c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3720      	adds	r7, #32
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	fff80000 	.word	0xfff80000
 800c9ac:	e007ffff 	.word	0xe007ffff
 800c9b0:	1ff80000 	.word	0x1ff80000

0800c9b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d14a      	bne.n	800ca68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9ea:	f040 8086 	bne.w	800cafa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	015a      	lsls	r2, r3, #5
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	7812      	ldrb	r2, [r2, #0]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ca10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	7812      	ldrb	r2, [r2, #0]
 800ca26:	0151      	lsls	r1, r2, #5
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	440a      	add	r2, r1
 800ca2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ca34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d902      	bls.n	800ca4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	75fb      	strb	r3, [r7, #23]
          break;
 800ca4a:	e056      	b.n	800cafa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca64:	d0e7      	beq.n	800ca36 <USB_EPStopXfer+0x82>
 800ca66:	e048      	b.n	800cafa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	015a      	lsls	r2, r3, #5
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	4413      	add	r3, r2
 800ca72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca80:	d13b      	bne.n	800cafa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	7812      	ldrb	r2, [r2, #0]
 800ca96:	0151      	lsls	r1, r2, #5
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	440a      	add	r2, r1
 800ca9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800caa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800caa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	015a      	lsls	r2, r3, #5
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	4413      	add	r3, r2
 800cab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	7812      	ldrb	r2, [r2, #0]
 800caba:	0151      	lsls	r1, r2, #5
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	440a      	add	r2, r1
 800cac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cac4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3301      	adds	r3, #1
 800cace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d902      	bls.n	800cae0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	75fb      	strb	r3, [r7, #23]
          break;
 800cade:	e00c      	b.n	800cafa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800caf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800caf8:	d0e7      	beq.n	800caca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b089      	sub	sp, #36	@ 0x24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4611      	mov	r1, r2
 800cb14:	461a      	mov	r2, r3
 800cb16:	460b      	mov	r3, r1
 800cb18:	71fb      	strb	r3, [r7, #7]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cb26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d123      	bne.n	800cb76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb2e:	88bb      	ldrh	r3, [r7, #4]
 800cb30:	3303      	adds	r3, #3
 800cb32:	089b      	lsrs	r3, r3, #2
 800cb34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb36:	2300      	movs	r3, #0
 800cb38:	61bb      	str	r3, [r7, #24]
 800cb3a:	e018      	b.n	800cb6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	031a      	lsls	r2, r3, #12
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb48:	461a      	mov	r2, r3
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	3301      	adds	r3, #1
 800cb54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	3301      	adds	r3, #1
 800cb66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d3e2      	bcc.n	800cb3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3724      	adds	r7, #36	@ 0x24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b08b      	sub	sp, #44	@ 0x2c
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	089b      	lsrs	r3, r3, #2
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cba2:	88fb      	ldrh	r3, [r7, #6]
 800cba4:	f003 0303 	and.w	r3, r3, #3
 800cba8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cbaa:	2300      	movs	r3, #0
 800cbac:	623b      	str	r3, [r7, #32]
 800cbae:	e014      	b.n	800cbda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbba:	601a      	str	r2, [r3, #0]
    pDest++;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	3301      	adds	r3, #1
 800cbcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cbd4:	6a3b      	ldr	r3, [r7, #32]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	623b      	str	r3, [r7, #32]
 800cbda:	6a3a      	ldr	r2, [r7, #32]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d3e6      	bcc.n	800cbb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cbe2:	8bfb      	ldrh	r3, [r7, #30]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01e      	beq.n	800cc26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f107 0310 	add.w	r3, r7, #16
 800cbf8:	6812      	ldr	r2, [r2, #0]
 800cbfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	fa22 f303 	lsr.w	r3, r2, r3
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	701a      	strb	r2, [r3, #0]
      i++;
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	3301      	adds	r3, #1
 800cc12:	623b      	str	r3, [r7, #32]
      pDest++;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	3301      	adds	r3, #1
 800cc18:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cc1a:	8bfb      	ldrh	r3, [r7, #30]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cc20:	8bfb      	ldrh	r3, [r7, #30]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1ea      	bne.n	800cbfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	372c      	adds	r7, #44	@ 0x2c
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d12c      	bne.n	800ccaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	015a      	lsls	r2, r3, #5
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	db12      	blt.n	800cc88 <USB_EPSetStall+0x54>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00f      	beq.n	800cc88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	0151      	lsls	r1, r2, #5
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	440a      	add	r2, r1
 800cc7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cc86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	0151      	lsls	r1, r2, #5
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	440a      	add	r2, r1
 800cc9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e02b      	b.n	800cd02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db12      	blt.n	800cce2 <USB_EPSetStall+0xae>
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00f      	beq.n	800cce2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	0151      	lsls	r1, r2, #5
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	440a      	add	r2, r1
 800ccd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cce0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	015a      	lsls	r2, r3, #5
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	4413      	add	r3, r2
 800ccea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	0151      	lsls	r1, r2, #5
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	440a      	add	r2, r1
 800ccf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cd00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	785b      	ldrb	r3, [r3, #1]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d128      	bne.n	800cd7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	0151      	lsls	r1, r2, #5
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	440a      	add	r2, r1
 800cd42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	791b      	ldrb	r3, [r3, #4]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d003      	beq.n	800cd5c <USB_EPClearStall+0x4c>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	791b      	ldrb	r3, [r3, #4]
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	d138      	bne.n	800cdce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	e027      	b.n	800cdce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	015a      	lsls	r2, r3, #5
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	4413      	add	r3, r2
 800cd86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	0151      	lsls	r1, r2, #5
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	440a      	add	r2, r1
 800cd94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	791b      	ldrb	r3, [r3, #4]
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	d003      	beq.n	800cdae <USB_EPClearStall+0x9e>
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	791b      	ldrb	r3, [r3, #4]
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d10f      	bne.n	800cdce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	015a      	lsls	r2, r3, #5
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	0151      	lsls	r1, r2, #5
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	440a      	add	r2, r1
 800cdc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3714      	adds	r7, #20
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	460b      	mov	r3, r1
 800cde6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cdfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cdfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	78fb      	ldrb	r3, [r7, #3]
 800ce0a:	011b      	lsls	r3, r3, #4
 800ce0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ce10:	68f9      	ldr	r1, [r7, #12]
 800ce12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce16:	4313      	orrs	r3, r2
 800ce18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce42:	f023 0303 	bic.w	r3, r3, #3
 800ce46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce56:	f023 0302 	bic.w	r3, r3, #2
 800ce5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b085      	sub	sp, #20
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce84:	f023 0303 	bic.w	r3, r3, #3
 800ce88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce98:	f043 0302 	orr.w	r3, r3, #2
 800ce9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	4013      	ands	r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cec4:	68fb      	ldr	r3, [r7, #12]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ced2:	b480      	push	{r7}
 800ced4:	b085      	sub	sp, #20
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceee:	69db      	ldr	r3, [r3, #28]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	4013      	ands	r3, r2
 800cef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	0c1b      	lsrs	r3, r3, #16
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b085      	sub	sp, #20
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	4013      	ands	r3, r2
 800cf28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	b29b      	uxth	r3, r3
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b085      	sub	sp, #20
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	460b      	mov	r3, r1
 800cf44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	015a      	lsls	r2, r3, #5
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	4413      	add	r3, r2
 800cf52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	4013      	ands	r3, r2
 800cf66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf68:	68bb      	ldr	r3, [r7, #8]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf76:	b480      	push	{r7}
 800cf78:	b087      	sub	sp, #28
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	460b      	mov	r3, r1
 800cf80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	f003 030f 	and.w	r3, r3, #15
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa6:	01db      	lsls	r3, r3, #7
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cfb0:	78fb      	ldrb	r3, [r7, #3]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cfc4:	68bb      	ldr	r3, [r7, #8]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	371c      	adds	r7, #28
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	695b      	ldr	r3, [r3, #20]
 800cfde:	f003 0301 	and.w	r3, r3, #1
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
	...

0800cff0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d00a:	4619      	mov	r1, r3
 800d00c:	4b09      	ldr	r3, [pc, #36]	@ (800d034 <USB_ActivateSetup+0x44>)
 800d00e:	4013      	ands	r3, r2
 800d010:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	fffff800 	.word	0xfffff800

0800d038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d038:	b480      	push	{r7}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	460b      	mov	r3, r1
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	333c      	adds	r3, #60	@ 0x3c
 800d04e:	3304      	adds	r3, #4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	4a26      	ldr	r2, [pc, #152]	@ (800d0f0 <USB_EP0_OutStart+0xb8>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d90a      	bls.n	800d072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d06c:	d101      	bne.n	800d072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	e037      	b.n	800d0e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d078:	461a      	mov	r2, r3
 800d07a:	2300      	movs	r3, #0
 800d07c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	697a      	ldr	r2, [r7, #20]
 800d088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d08c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0a0:	f043 0318 	orr.w	r3, r3, #24
 800d0a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d0b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d10f      	bne.n	800d0e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	697a      	ldr	r2, [r7, #20]
 800d0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d0de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	371c      	adds	r7, #28
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	4f54300a 	.word	0x4f54300a

0800d0f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3301      	adds	r3, #1
 800d104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d10c:	d901      	bls.n	800d112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e022      	b.n	800d158 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	2b00      	cmp	r3, #0
 800d118:	daf2      	bge.n	800d100 <USB_CoreReset+0xc>

  count = 10U;
 800d11a:	230a      	movs	r3, #10
 800d11c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d11e:	e002      	b.n	800d126 <USB_CoreReset+0x32>
  {
    count--;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3b01      	subs	r3, #1
 800d124:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f9      	bne.n	800d120 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	f043 0201 	orr.w	r2, r3, #1
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3301      	adds	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d144:	d901      	bls.n	800d14a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d146:	2303      	movs	r3, #3
 800d148:	e006      	b.n	800d158 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	2b01      	cmp	r3, #1
 800d154:	d0f0      	beq.n	800d138 <USB_CoreReset+0x44>

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d170:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d174:	f002 fd34 	bl	800fbe0 <malloc>
 800d178:	4603      	mov	r3, r0
 800d17a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	32b0      	adds	r2, #176	@ 0xb0
 800d18c:	2100      	movs	r1, #0
 800d18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d192:	2302      	movs	r3, #2
 800d194:	e0d4      	b.n	800d340 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d196:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d19a:	2100      	movs	r1, #0
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f003 fb38 	bl	8010812 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	32b0      	adds	r2, #176	@ 0xb0
 800d1ac:	68f9      	ldr	r1, [r7, #12]
 800d1ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	32b0      	adds	r2, #176	@ 0xb0
 800d1bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7c1b      	ldrb	r3, [r3, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d138      	bne.n	800d240 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1ce:	4b5e      	ldr	r3, [pc, #376]	@ (800d348 <USBD_CDC_Init+0x1e4>)
 800d1d0:	7819      	ldrb	r1, [r3, #0]
 800d1d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f002 fb5e 	bl	800f89a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1de:	4b5a      	ldr	r3, [pc, #360]	@ (800d348 <USBD_CDC_Init+0x1e4>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	f003 020f 	and.w	r2, r3, #15
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	440b      	add	r3, r1
 800d1f2:	3323      	adds	r3, #35	@ 0x23
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1f8:	4b54      	ldr	r3, [pc, #336]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d1fa:	7819      	ldrb	r1, [r3, #0]
 800d1fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d200:	2202      	movs	r2, #2
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f002 fb49 	bl	800f89a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d208:	4b50      	ldr	r3, [pc, #320]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	f003 020f 	and.w	r2, r3, #15
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	4613      	mov	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	440b      	add	r3, r1
 800d21c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d220:	2201      	movs	r2, #1
 800d222:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d224:	4b4a      	ldr	r3, [pc, #296]	@ (800d350 <USBD_CDC_Init+0x1ec>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f003 020f 	and.w	r2, r3, #15
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	440b      	add	r3, r1
 800d238:	331c      	adds	r3, #28
 800d23a:	2210      	movs	r2, #16
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	e035      	b.n	800d2ac <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d240:	4b41      	ldr	r3, [pc, #260]	@ (800d348 <USBD_CDC_Init+0x1e4>)
 800d242:	7819      	ldrb	r1, [r3, #0]
 800d244:	2340      	movs	r3, #64	@ 0x40
 800d246:	2202      	movs	r2, #2
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f002 fb26 	bl	800f89a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d24e:	4b3e      	ldr	r3, [pc, #248]	@ (800d348 <USBD_CDC_Init+0x1e4>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 020f 	and.w	r2, r3, #15
 800d256:	6879      	ldr	r1, [r7, #4]
 800d258:	4613      	mov	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4413      	add	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	440b      	add	r3, r1
 800d262:	3323      	adds	r3, #35	@ 0x23
 800d264:	2201      	movs	r2, #1
 800d266:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d268:	4b38      	ldr	r3, [pc, #224]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d26a:	7819      	ldrb	r1, [r3, #0]
 800d26c:	2340      	movs	r3, #64	@ 0x40
 800d26e:	2202      	movs	r2, #2
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f002 fb12 	bl	800f89a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d276:	4b35      	ldr	r3, [pc, #212]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	f003 020f 	and.w	r2, r3, #15
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	440b      	add	r3, r1
 800d28a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d28e:	2201      	movs	r2, #1
 800d290:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d292:	4b2f      	ldr	r3, [pc, #188]	@ (800d350 <USBD_CDC_Init+0x1ec>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	f003 020f 	and.w	r2, r3, #15
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	331c      	adds	r3, #28
 800d2a8:	2210      	movs	r2, #16
 800d2aa:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d2ac:	4b28      	ldr	r3, [pc, #160]	@ (800d350 <USBD_CDC_Init+0x1ec>)
 800d2ae:	7819      	ldrb	r1, [r3, #0]
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	2203      	movs	r2, #3
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f002 faf0 	bl	800f89a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d2ba:	4b25      	ldr	r3, [pc, #148]	@ (800d350 <USBD_CDC_Init+0x1ec>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	f003 020f 	and.w	r2, r3, #15
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	3323      	adds	r3, #35	@ 0x23
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	33b0      	adds	r3, #176	@ 0xb0
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d30a:	2302      	movs	r3, #2
 800d30c:	e018      	b.n	800d340 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7c1b      	ldrb	r3, [r3, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10a      	bne.n	800d32c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d316:	4b0d      	ldr	r3, [pc, #52]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d318:	7819      	ldrb	r1, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f002 fba7 	bl	800fa78 <USBD_LL_PrepareReceive>
 800d32a:	e008      	b.n	800d33e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d32c:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <USBD_CDC_Init+0x1e8>)
 800d32e:	7819      	ldrb	r1, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d336:	2340      	movs	r3, #64	@ 0x40
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f002 fb9d 	bl	800fa78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	20000093 	.word	0x20000093
 800d34c:	20000094 	.word	0x20000094
 800d350:	20000095 	.word	0x20000095

0800d354 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d360:	4b3a      	ldr	r3, [pc, #232]	@ (800d44c <USBD_CDC_DeInit+0xf8>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f002 fabd 	bl	800f8e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d36c:	4b37      	ldr	r3, [pc, #220]	@ (800d44c <USBD_CDC_DeInit+0xf8>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 020f 	and.w	r2, r3, #15
 800d374:	6879      	ldr	r1, [r7, #4]
 800d376:	4613      	mov	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	440b      	add	r3, r1
 800d380:	3323      	adds	r3, #35	@ 0x23
 800d382:	2200      	movs	r2, #0
 800d384:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d386:	4b32      	ldr	r3, [pc, #200]	@ (800d450 <USBD_CDC_DeInit+0xfc>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f002 faaa 	bl	800f8e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d392:	4b2f      	ldr	r3, [pc, #188]	@ (800d450 <USBD_CDC_DeInit+0xfc>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	f003 020f 	and.w	r2, r3, #15
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	4613      	mov	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	440b      	add	r3, r1
 800d3a6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d3ae:	4b29      	ldr	r3, [pc, #164]	@ (800d454 <USBD_CDC_DeInit+0x100>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f002 fa96 	bl	800f8e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d3ba:	4b26      	ldr	r3, [pc, #152]	@ (800d454 <USBD_CDC_DeInit+0x100>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f003 020f 	and.w	r2, r3, #15
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	3323      	adds	r3, #35	@ 0x23
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800d454 <USBD_CDC_DeInit+0x100>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f003 020f 	and.w	r2, r3, #15
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	440b      	add	r3, r1
 800d3e8:	331c      	adds	r3, #28
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	32b0      	adds	r2, #176	@ 0xb0
 800d3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d01f      	beq.n	800d440 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	33b0      	adds	r3, #176	@ 0xb0
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	32b0      	adds	r2, #176	@ 0xb0
 800d41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d422:	4618      	mov	r0, r3
 800d424:	f002 fbe4 	bl	800fbf0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	32b0      	adds	r2, #176	@ 0xb0
 800d432:	2100      	movs	r1, #0
 800d434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000093 	.word	0x20000093
 800d450:	20000094 	.word	0x20000094
 800d454:	20000095 	.word	0x20000095

0800d458 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	32b0      	adds	r2, #176	@ 0xb0
 800d46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d470:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d472:	2300      	movs	r3, #0
 800d474:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d476:	2300      	movs	r3, #0
 800d478:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d101      	bne.n	800d488 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d484:	2303      	movs	r3, #3
 800d486:	e0bf      	b.n	800d608 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d490:	2b00      	cmp	r3, #0
 800d492:	d050      	beq.n	800d536 <USBD_CDC_Setup+0xde>
 800d494:	2b20      	cmp	r3, #32
 800d496:	f040 80af 	bne.w	800d5f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	88db      	ldrh	r3, [r3, #6]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d03a      	beq.n	800d518 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b25b      	sxtb	r3, r3
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	da1b      	bge.n	800d4e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	33b0      	adds	r3, #176	@ 0xb0
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d4c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	88d2      	ldrh	r2, [r2, #6]
 800d4c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	2b07      	cmp	r3, #7
 800d4d0:	bf28      	it	cs
 800d4d2:	2307      	movcs	r3, #7
 800d4d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	89fa      	ldrh	r2, [r7, #14]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 fd93 	bl	800f008 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d4e2:	e090      	b.n	800d606 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	785a      	ldrb	r2, [r3, #1]
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	88db      	ldrh	r3, [r3, #6]
 800d4f2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d4f4:	d803      	bhi.n	800d4fe <USBD_CDC_Setup+0xa6>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	88db      	ldrh	r3, [r3, #6]
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	e000      	b.n	800d500 <USBD_CDC_Setup+0xa8>
 800d4fe:	2240      	movs	r2, #64	@ 0x40
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d506:	6939      	ldr	r1, [r7, #16]
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d50e:	461a      	mov	r2, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 fda8 	bl	800f066 <USBD_CtlPrepareRx>
      break;
 800d516:	e076      	b.n	800d606 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	33b0      	adds	r3, #176	@ 0xb0
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	4413      	add	r3, r2
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	7850      	ldrb	r0, [r2, #1]
 800d52e:	2200      	movs	r2, #0
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	4798      	blx	r3
      break;
 800d534:	e067      	b.n	800d606 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	785b      	ldrb	r3, [r3, #1]
 800d53a:	2b0b      	cmp	r3, #11
 800d53c:	d851      	bhi.n	800d5e2 <USBD_CDC_Setup+0x18a>
 800d53e:	a201      	add	r2, pc, #4	@ (adr r2, 800d544 <USBD_CDC_Setup+0xec>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d575 	.word	0x0800d575
 800d548:	0800d5f1 	.word	0x0800d5f1
 800d54c:	0800d5e3 	.word	0x0800d5e3
 800d550:	0800d5e3 	.word	0x0800d5e3
 800d554:	0800d5e3 	.word	0x0800d5e3
 800d558:	0800d5e3 	.word	0x0800d5e3
 800d55c:	0800d5e3 	.word	0x0800d5e3
 800d560:	0800d5e3 	.word	0x0800d5e3
 800d564:	0800d5e3 	.word	0x0800d5e3
 800d568:	0800d5e3 	.word	0x0800d5e3
 800d56c:	0800d59f 	.word	0x0800d59f
 800d570:	0800d5c9 	.word	0x0800d5c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d107      	bne.n	800d590 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d580:	f107 030a 	add.w	r3, r7, #10
 800d584:	2202      	movs	r2, #2
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f001 fd3d 	bl	800f008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d58e:	e032      	b.n	800d5f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f001 fcbb 	bl	800ef0e <USBD_CtlError>
            ret = USBD_FAIL;
 800d598:	2303      	movs	r3, #3
 800d59a:	75fb      	strb	r3, [r7, #23]
          break;
 800d59c:	e02b      	b.n	800d5f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d107      	bne.n	800d5ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d5aa:	f107 030d 	add.w	r3, r7, #13
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 fd28 	bl	800f008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d5b8:	e01d      	b.n	800d5f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 fca6 	bl	800ef0e <USBD_CtlError>
            ret = USBD_FAIL;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d5c6:	e016      	b.n	800d5f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d00f      	beq.n	800d5f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 fc99 	bl	800ef0e <USBD_CtlError>
            ret = USBD_FAIL;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5e0:	e008      	b.n	800d5f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f001 fc92 	bl	800ef0e <USBD_CtlError>
          ret = USBD_FAIL;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	75fb      	strb	r3, [r7, #23]
          break;
 800d5ee:	e002      	b.n	800d5f6 <USBD_CDC_Setup+0x19e>
          break;
 800d5f0:	bf00      	nop
 800d5f2:	e008      	b.n	800d606 <USBD_CDC_Setup+0x1ae>
          break;
 800d5f4:	bf00      	nop
      }
      break;
 800d5f6:	e006      	b.n	800d606 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f001 fc87 	bl	800ef0e <USBD_CtlError>
      ret = USBD_FAIL;
 800d600:	2303      	movs	r3, #3
 800d602:	75fb      	strb	r3, [r7, #23]
      break;
 800d604:	bf00      	nop
  }

  return (uint8_t)ret;
 800d606:	7dfb      	ldrb	r3, [r7, #23]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	32b0      	adds	r2, #176	@ 0xb0
 800d62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d101      	bne.n	800d63a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d636:	2303      	movs	r3, #3
 800d638:	e065      	b.n	800d706 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	32b0      	adds	r2, #176	@ 0xb0
 800d644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d648:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d64a:	78fb      	ldrb	r3, [r7, #3]
 800d64c:	f003 020f 	and.w	r2, r3, #15
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	440b      	add	r3, r1
 800d65c:	3314      	adds	r3, #20
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d02f      	beq.n	800d6c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d664:	78fb      	ldrb	r3, [r7, #3]
 800d666:	f003 020f 	and.w	r2, r3, #15
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	440b      	add	r3, r1
 800d676:	3314      	adds	r3, #20
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	78fb      	ldrb	r3, [r7, #3]
 800d67c:	f003 010f 	and.w	r1, r3, #15
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	460b      	mov	r3, r1
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	440b      	add	r3, r1
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4403      	add	r3, r0
 800d68c:	331c      	adds	r3, #28
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	fbb2 f1f3 	udiv	r1, r2, r3
 800d694:	fb01 f303 	mul.w	r3, r1, r3
 800d698:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d112      	bne.n	800d6c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d69e:	78fb      	ldrb	r3, [r7, #3]
 800d6a0:	f003 020f 	and.w	r2, r3, #15
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	440b      	add	r3, r1
 800d6b0:	3314      	adds	r3, #20
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d6b6:	78f9      	ldrb	r1, [r7, #3]
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f002 f9ba 	bl	800fa36 <USBD_LL_Transmit>
 800d6c2:	e01f      	b.n	800d704 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	33b0      	adds	r3, #176	@ 0xb0
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d010      	beq.n	800d704 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	33b0      	adds	r3, #176	@ 0xb0
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d700:	78fa      	ldrb	r2, [r7, #3]
 800d702:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	460b      	mov	r3, r1
 800d718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	32b0      	adds	r2, #176	@ 0xb0
 800d724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d728:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	32b0      	adds	r2, #176	@ 0xb0
 800d734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d101      	bne.n	800d740 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e01a      	b.n	800d776 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f002 f9b8 	bl	800faba <USBD_LL_GetRxDataSize>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	33b0      	adds	r3, #176	@ 0xb0
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d770:	4611      	mov	r1, r2
 800d772:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b084      	sub	sp, #16
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	32b0      	adds	r2, #176	@ 0xb0
 800d790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e024      	b.n	800d7ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	33b0      	adds	r3, #176	@ 0xb0
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d019      	beq.n	800d7e8 <USBD_CDC_EP0_RxReady+0x6a>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d7ba:	2bff      	cmp	r3, #255	@ 0xff
 800d7bc:	d014      	beq.n	800d7e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	33b0      	adds	r3, #176	@ 0xb0
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	4413      	add	r3, r2
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d7d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	22ff      	movs	r2, #255	@ 0xff
 800d7e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
	...

0800d7f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7fc:	2182      	movs	r1, #130	@ 0x82
 800d7fe:	4818      	ldr	r0, [pc, #96]	@ (800d860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d800:	f000 fd22 	bl	800e248 <USBD_GetEpDesc>
 800d804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d806:	2101      	movs	r1, #1
 800d808:	4815      	ldr	r0, [pc, #84]	@ (800d860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d80a:	f000 fd1d 	bl	800e248 <USBD_GetEpDesc>
 800d80e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d810:	2181      	movs	r1, #129	@ 0x81
 800d812:	4813      	ldr	r0, [pc, #76]	@ (800d860 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d814:	f000 fd18 	bl	800e248 <USBD_GetEpDesc>
 800d818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2210      	movs	r2, #16
 800d824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d006      	beq.n	800d83a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2200      	movs	r2, #0
 800d830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d834:	711a      	strb	r2, [r3, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d006      	beq.n	800d84e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d848:	711a      	strb	r2, [r3, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2243      	movs	r2, #67	@ 0x43
 800d852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d854:	4b02      	ldr	r3, [pc, #8]	@ (800d860 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d856:	4618      	mov	r0, r3
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	20000050 	.word	0x20000050

0800d864 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d86c:	2182      	movs	r1, #130	@ 0x82
 800d86e:	4818      	ldr	r0, [pc, #96]	@ (800d8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d870:	f000 fcea 	bl	800e248 <USBD_GetEpDesc>
 800d874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d876:	2101      	movs	r1, #1
 800d878:	4815      	ldr	r0, [pc, #84]	@ (800d8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d87a:	f000 fce5 	bl	800e248 <USBD_GetEpDesc>
 800d87e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d880:	2181      	movs	r1, #129	@ 0x81
 800d882:	4813      	ldr	r0, [pc, #76]	@ (800d8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d884:	f000 fce0 	bl	800e248 <USBD_GetEpDesc>
 800d888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	2210      	movs	r2, #16
 800d894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d006      	beq.n	800d8aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	711a      	strb	r2, [r3, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f042 0202 	orr.w	r2, r2, #2
 800d8a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d006      	beq.n	800d8be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	711a      	strb	r2, [r3, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f042 0202 	orr.w	r2, r2, #2
 800d8bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2243      	movs	r2, #67	@ 0x43
 800d8c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8c4:	4b02      	ldr	r3, [pc, #8]	@ (800d8d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	20000050 	.word	0x20000050

0800d8d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8dc:	2182      	movs	r1, #130	@ 0x82
 800d8de:	4818      	ldr	r0, [pc, #96]	@ (800d940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8e0:	f000 fcb2 	bl	800e248 <USBD_GetEpDesc>
 800d8e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	4815      	ldr	r0, [pc, #84]	@ (800d940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8ea:	f000 fcad 	bl	800e248 <USBD_GetEpDesc>
 800d8ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8f0:	2181      	movs	r1, #129	@ 0x81
 800d8f2:	4813      	ldr	r0, [pc, #76]	@ (800d940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8f4:	f000 fca8 	bl	800e248 <USBD_GetEpDesc>
 800d8f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2210      	movs	r2, #16
 800d904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d006      	beq.n	800d91a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	2200      	movs	r2, #0
 800d910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d914:	711a      	strb	r2, [r3, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d006      	beq.n	800d92e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d928:	711a      	strb	r2, [r3, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2243      	movs	r2, #67	@ 0x43
 800d932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d934:	4b02      	ldr	r3, [pc, #8]	@ (800d940 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20000050 	.word	0x20000050

0800d944 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	220a      	movs	r2, #10
 800d950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d952:	4b03      	ldr	r3, [pc, #12]	@ (800d960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d954:	4618      	mov	r0, r3
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr
 800d960:	2000000c 	.word	0x2000000c

0800d964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d974:	2303      	movs	r3, #3
 800d976:	e009      	b.n	800d98c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	33b0      	adds	r3, #176	@ 0xb0
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	32b0      	adds	r2, #176	@ 0xb0
 800d9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e008      	b.n	800d9d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	371c      	adds	r7, #28
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	32b0      	adds	r2, #176	@ 0xb0
 800d9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e004      	b.n	800da0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3714      	adds	r7, #20
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
	...

0800da18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32b0      	adds	r2, #176	@ 0xb0
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	32b0      	adds	r2, #176	@ 0xb0
 800da3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800da42:	2303      	movs	r3, #3
 800da44:	e018      	b.n	800da78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7c1b      	ldrb	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da4e:	4b0c      	ldr	r3, [pc, #48]	@ (800da80 <USBD_CDC_ReceivePacket+0x68>)
 800da50:	7819      	ldrb	r1, [r3, #0]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f002 f80b 	bl	800fa78 <USBD_LL_PrepareReceive>
 800da62:	e008      	b.n	800da76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da64:	4b06      	ldr	r3, [pc, #24]	@ (800da80 <USBD_CDC_ReceivePacket+0x68>)
 800da66:	7819      	ldrb	r1, [r3, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da6e:	2340      	movs	r3, #64	@ 0x40
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f002 f801 	bl	800fa78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20000094 	.word	0x20000094

0800da84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	4613      	mov	r3, r2
 800da90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da98:	2303      	movs	r3, #3
 800da9a:	e01f      	b.n	800dadc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	79fa      	ldrb	r2, [r7, #7]
 800dace:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f001 fe77 	bl	800f7c4 <USBD_LL_Init>
 800dad6:	4603      	mov	r3, r0
 800dad8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dada:	7dfb      	ldrb	r3, [r7, #23]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800daee:	2300      	movs	r3, #0
 800daf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d101      	bne.n	800dafc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800daf8:	2303      	movs	r3, #3
 800dafa:	e025      	b.n	800db48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	32ae      	adds	r2, #174	@ 0xae
 800db0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00f      	beq.n	800db38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	32ae      	adds	r2, #174	@ 0xae
 800db22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db28:	f107 020e 	add.w	r2, r7, #14
 800db2c:	4610      	mov	r0, r2
 800db2e:	4798      	blx	r3
 800db30:	4602      	mov	r2, r0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f001 fe83 	bl	800f864 <USBD_LL_Start>
 800db5e:	4603      	mov	r3, r0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	460b      	mov	r3, r1
 800db88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db94:	2b00      	cmp	r3, #0
 800db96:	d009      	beq.n	800dbac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	78fa      	ldrb	r2, [r7, #3]
 800dba2:	4611      	mov	r1, r2
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	4798      	blx	r3
 800dba8:	4603      	mov	r3, r0
 800dbaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b084      	sub	sp, #16
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	78fa      	ldrb	r2, [r7, #3]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	4798      	blx	r3
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f001 f94c 	bl	800ee9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dc10:	461a      	mov	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc1e:	f003 031f 	and.w	r3, r3, #31
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d01a      	beq.n	800dc5c <USBD_LL_SetupStage+0x72>
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d822      	bhi.n	800dc70 <USBD_LL_SetupStage+0x86>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <USBD_LL_SetupStage+0x4a>
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d00a      	beq.n	800dc48 <USBD_LL_SetupStage+0x5e>
 800dc32:	e01d      	b.n	800dc70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fb77 	bl	800e330 <USBD_StdDevReq>
 800dc42:	4603      	mov	r3, r0
 800dc44:	73fb      	strb	r3, [r7, #15]
      break;
 800dc46:	e020      	b.n	800dc8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fbdf 	bl	800e414 <USBD_StdItfReq>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]
      break;
 800dc5a:	e016      	b.n	800dc8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 fc41 	bl	800e4ec <USBD_StdEPReq>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc6e:	e00c      	b.n	800dc8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f001 fe50 	bl	800f924 <USBD_LL_StallEP>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]
      break;
 800dc88:	bf00      	nop
  }

  return ret;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800dca6:	7afb      	ldrb	r3, [r7, #11]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d177      	bne.n	800dd9c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dcb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	f040 80a1 	bne.w	800de02 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	8992      	ldrh	r2, [r2, #12]
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d91c      	bls.n	800dd06 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	8992      	ldrh	r2, [r2, #12]
 800dcd4:	1a9a      	subs	r2, r3, r2
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	693a      	ldr	r2, [r7, #16]
 800dce0:	8992      	ldrh	r2, [r2, #12]
 800dce2:	441a      	add	r2, r3
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	6919      	ldr	r1, [r3, #16]
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	899b      	ldrh	r3, [r3, #12]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	bf38      	it	cc
 800dcfa:	4613      	movcc	r3, r2
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f001 f9d2 	bl	800f0a8 <USBD_CtlContinueRx>
 800dd04:	e07d      	b.n	800de02 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dd0c:	f003 031f 	and.w	r3, r3, #31
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d014      	beq.n	800dd3e <USBD_LL_DataOutStage+0xaa>
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d81d      	bhi.n	800dd54 <USBD_LL_DataOutStage+0xc0>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <USBD_LL_DataOutStage+0x8e>
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d003      	beq.n	800dd28 <USBD_LL_DataOutStage+0x94>
 800dd20:	e018      	b.n	800dd54 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dd22:	2300      	movs	r3, #0
 800dd24:	75bb      	strb	r3, [r7, #22]
            break;
 800dd26:	e018      	b.n	800dd5a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	4619      	mov	r1, r3
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f000 fa6e 	bl	800e214 <USBD_CoreFindIF>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	75bb      	strb	r3, [r7, #22]
            break;
 800dd3c:	e00d      	b.n	800dd5a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	4619      	mov	r1, r3
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f000 fa70 	bl	800e22e <USBD_CoreFindEP>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	75bb      	strb	r3, [r7, #22]
            break;
 800dd52:	e002      	b.n	800dd5a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd54:	2300      	movs	r3, #0
 800dd56:	75bb      	strb	r3, [r7, #22]
            break;
 800dd58:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd5a:	7dbb      	ldrb	r3, [r7, #22]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d119      	bne.n	800dd94 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d113      	bne.n	800dd94 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dd6c:	7dba      	ldrb	r2, [r7, #22]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	32ae      	adds	r2, #174	@ 0xae
 800dd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00b      	beq.n	800dd94 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800dd7c:	7dba      	ldrb	r2, [r7, #22]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dd84:	7dba      	ldrb	r2, [r7, #22]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	32ae      	adds	r2, #174	@ 0xae
 800dd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f001 f998 	bl	800f0ca <USBD_CtlSendStatus>
 800dd9a:	e032      	b.n	800de02 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd9c:	7afb      	ldrb	r3, [r7, #11]
 800dd9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	4619      	mov	r1, r3
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 fa41 	bl	800e22e <USBD_CoreFindEP>
 800ddac:	4603      	mov	r3, r0
 800ddae:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddb0:	7dbb      	ldrb	r3, [r7, #22]
 800ddb2:	2bff      	cmp	r3, #255	@ 0xff
 800ddb4:	d025      	beq.n	800de02 <USBD_LL_DataOutStage+0x16e>
 800ddb6:	7dbb      	ldrb	r3, [r7, #22]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d122      	bne.n	800de02 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d117      	bne.n	800ddf8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ddc8:	7dba      	ldrb	r2, [r7, #22]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	32ae      	adds	r2, #174	@ 0xae
 800ddce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00f      	beq.n	800ddf8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ddd8:	7dba      	ldrb	r2, [r7, #22]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dde0:	7dba      	ldrb	r2, [r7, #22]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	32ae      	adds	r2, #174	@ 0xae
 800dde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	7afa      	ldrb	r2, [r7, #11]
 800ddee:	4611      	mov	r1, r2
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	4798      	blx	r3
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	e000      	b.n	800de04 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	460b      	mov	r3, r1
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800de1a:	7afb      	ldrb	r3, [r7, #11]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d178      	bne.n	800df12 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	3314      	adds	r3, #20
 800de24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d163      	bne.n	800def8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	693a      	ldr	r2, [r7, #16]
 800de36:	8992      	ldrh	r2, [r2, #12]
 800de38:	4293      	cmp	r3, r2
 800de3a:	d91c      	bls.n	800de76 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	8992      	ldrh	r2, [r2, #12]
 800de44:	1a9a      	subs	r2, r3, r2
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	8992      	ldrh	r2, [r2, #12]
 800de52:	441a      	add	r2, r3
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6919      	ldr	r1, [r3, #16]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	461a      	mov	r2, r3
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f001 f8ee 	bl	800f044 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de68:	2300      	movs	r3, #0
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f001 fe02 	bl	800fa78 <USBD_LL_PrepareReceive>
 800de74:	e040      	b.n	800def8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	899b      	ldrh	r3, [r3, #12]
 800de7a:	461a      	mov	r2, r3
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d11c      	bne.n	800debe <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d316      	bcc.n	800debe <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d20f      	bcs.n	800debe <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de9e:	2200      	movs	r2, #0
 800dea0:	2100      	movs	r1, #0
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f001 f8ce 	bl	800f044 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800deb0:	2300      	movs	r3, #0
 800deb2:	2200      	movs	r2, #0
 800deb4:	2100      	movs	r1, #0
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f001 fdde 	bl	800fa78 <USBD_LL_PrepareReceive>
 800debc:	e01c      	b.n	800def8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d10f      	bne.n	800deea <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800deea:	2180      	movs	r1, #128	@ 0x80
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f001 fd19 	bl	800f924 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f001 f8fc 	bl	800f0f0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d03a      	beq.n	800df78 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff fe30 	bl	800db68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800df10:	e032      	b.n	800df78 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800df12:	7afb      	ldrb	r3, [r7, #11]
 800df14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	4619      	mov	r1, r3
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f000 f986 	bl	800e22e <USBD_CoreFindEP>
 800df22:	4603      	mov	r3, r0
 800df24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df26:	7dfb      	ldrb	r3, [r7, #23]
 800df28:	2bff      	cmp	r3, #255	@ 0xff
 800df2a:	d025      	beq.n	800df78 <USBD_LL_DataInStage+0x16c>
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d122      	bne.n	800df78 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d11c      	bne.n	800df78 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800df3e:	7dfa      	ldrb	r2, [r7, #23]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	32ae      	adds	r2, #174	@ 0xae
 800df44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d014      	beq.n	800df78 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800df4e:	7dfa      	ldrb	r2, [r7, #23]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df56:	7dfa      	ldrb	r2, [r7, #23]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	32ae      	adds	r2, #174	@ 0xae
 800df5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	7afa      	ldrb	r2, [r7, #11]
 800df64:	4611      	mov	r1, r2
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	4798      	blx	r3
 800df6a:	4603      	mov	r3, r0
 800df6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df6e:	7dbb      	ldrb	r3, [r7, #22]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800df74:	7dbb      	ldrb	r3, [r7, #22]
 800df76:	e000      	b.n	800df7a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b084      	sub	sp, #16
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d014      	beq.n	800dfe8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00e      	beq.n	800dfe8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	6852      	ldr	r2, [r2, #4]
 800dfd6:	b2d2      	uxtb	r2, r2
 800dfd8:	4611      	mov	r1, r2
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	4798      	blx	r3
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfe8:	2340      	movs	r3, #64	@ 0x40
 800dfea:	2200      	movs	r2, #0
 800dfec:	2100      	movs	r1, #0
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f001 fc53 	bl	800f89a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2240      	movs	r2, #64	@ 0x40
 800e000:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e004:	2340      	movs	r3, #64	@ 0x40
 800e006:	2200      	movs	r2, #0
 800e008:	2180      	movs	r1, #128	@ 0x80
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f001 fc45 	bl	800f89a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2240      	movs	r2, #64	@ 0x40
 800e01c:	841a      	strh	r2, [r3, #32]

  return ret;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b04      	cmp	r3, #4
 800e05a:	d006      	beq.n	800e06a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e062:	b2da      	uxtb	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b04      	cmp	r3, #4
 800e092:	d106      	bne.n	800e0a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b03      	cmp	r3, #3
 800e0c2:	d110      	bne.n	800e0e6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00b      	beq.n	800e0e6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	32ae      	adds	r2, #174	@ 0xae
 800e106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e10e:	2303      	movs	r3, #3
 800e110:	e01c      	b.n	800e14c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	d115      	bne.n	800e14a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	32ae      	adds	r2, #174	@ 0xae
 800e128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00b      	beq.n	800e14a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	32ae      	adds	r2, #174	@ 0xae
 800e13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	78fa      	ldrb	r2, [r7, #3]
 800e144:	4611      	mov	r1, r2
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	32ae      	adds	r2, #174	@ 0xae
 800e16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e172:	2303      	movs	r3, #3
 800e174:	e01c      	b.n	800e1b0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d115      	bne.n	800e1ae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	32ae      	adds	r2, #174	@ 0xae
 800e18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00b      	beq.n	800e1ae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	32ae      	adds	r2, #174	@ 0xae
 800e1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a6:	78fa      	ldrb	r2, [r7, #3]
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	370c      	adds	r7, #12
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b084      	sub	sp, #16
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00e      	beq.n	800e20a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	6852      	ldr	r2, [r2, #4]
 800e1f8:	b2d2      	uxtb	r2, r2
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	4798      	blx	r3
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e206:	2303      	movs	r3, #3
 800e208:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e220:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e222:	4618      	mov	r0, r3
 800e224:	370c      	adds	r7, #12
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e22e:	b480      	push	{r7}
 800e230:	b083      	sub	sp, #12
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	460b      	mov	r3, r1
 800e238:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e23a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	885b      	ldrh	r3, [r3, #2]
 800e264:	b29b      	uxth	r3, r3
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	7812      	ldrb	r2, [r2, #0]
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d91f      	bls.n	800e2ae <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e274:	e013      	b.n	800e29e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e276:	f107 030a 	add.w	r3, r7, #10
 800e27a:	4619      	mov	r1, r3
 800e27c:	6978      	ldr	r0, [r7, #20]
 800e27e:	f000 f81b 	bl	800e2b8 <USBD_GetNextDesc>
 800e282:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	785b      	ldrb	r3, [r3, #1]
 800e288:	2b05      	cmp	r3, #5
 800e28a:	d108      	bne.n	800e29e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	789b      	ldrb	r3, [r3, #2]
 800e294:	78fa      	ldrb	r2, [r7, #3]
 800e296:	429a      	cmp	r2, r3
 800e298:	d008      	beq.n	800e2ac <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e29a:	2300      	movs	r3, #0
 800e29c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	885b      	ldrh	r3, [r3, #2]
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	897b      	ldrh	r3, [r7, #10]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d8e5      	bhi.n	800e276 <USBD_GetEpDesc+0x2e>
 800e2aa:	e000      	b.n	800e2ae <USBD_GetEpDesc+0x66>
          break;
 800e2ac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e2ae:	693b      	ldr	r3, [r7, #16]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3718      	adds	r7, #24
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	7812      	ldrb	r2, [r2, #0]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4413      	add	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b087      	sub	sp, #28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	3301      	adds	r3, #1
 800e306:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e30e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e312:	021b      	lsls	r3, r3, #8
 800e314:	b21a      	sxth	r2, r3
 800e316:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	b21b      	sxth	r3, r3
 800e31e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e320:	89fb      	ldrh	r3, [r7, #14]
}
 800e322:	4618      	mov	r0, r3
 800e324:	371c      	adds	r7, #28
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
	...

0800e330 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e346:	2b40      	cmp	r3, #64	@ 0x40
 800e348:	d005      	beq.n	800e356 <USBD_StdDevReq+0x26>
 800e34a:	2b40      	cmp	r3, #64	@ 0x40
 800e34c:	d857      	bhi.n	800e3fe <USBD_StdDevReq+0xce>
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00f      	beq.n	800e372 <USBD_StdDevReq+0x42>
 800e352:	2b20      	cmp	r3, #32
 800e354:	d153      	bne.n	800e3fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	32ae      	adds	r2, #174	@ 0xae
 800e360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	4798      	blx	r3
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]
      break;
 800e370:	e04a      	b.n	800e408 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	2b09      	cmp	r3, #9
 800e378:	d83b      	bhi.n	800e3f2 <USBD_StdDevReq+0xc2>
 800e37a:	a201      	add	r2, pc, #4	@ (adr r2, 800e380 <USBD_StdDevReq+0x50>)
 800e37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e380:	0800e3d5 	.word	0x0800e3d5
 800e384:	0800e3e9 	.word	0x0800e3e9
 800e388:	0800e3f3 	.word	0x0800e3f3
 800e38c:	0800e3df 	.word	0x0800e3df
 800e390:	0800e3f3 	.word	0x0800e3f3
 800e394:	0800e3b3 	.word	0x0800e3b3
 800e398:	0800e3a9 	.word	0x0800e3a9
 800e39c:	0800e3f3 	.word	0x0800e3f3
 800e3a0:	0800e3cb 	.word	0x0800e3cb
 800e3a4:	0800e3bd 	.word	0x0800e3bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fa3e 	bl	800e82c <USBD_GetDescriptor>
          break;
 800e3b0:	e024      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e3b2:	6839      	ldr	r1, [r7, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fbcd 	bl	800eb54 <USBD_SetAddress>
          break;
 800e3ba:	e01f      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fc0c 	bl	800ebdc <USBD_SetConfig>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]
          break;
 800e3c8:	e018      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fcaf 	bl	800ed30 <USBD_GetConfig>
          break;
 800e3d2:	e013      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fce0 	bl	800ed9c <USBD_GetStatus>
          break;
 800e3dc:	e00e      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fd0f 	bl	800ee04 <USBD_SetFeature>
          break;
 800e3e6:	e009      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fd33 	bl	800ee56 <USBD_ClrFeature>
          break;
 800e3f0:	e004      	b.n	800e3fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 fd8a 	bl	800ef0e <USBD_CtlError>
          break;
 800e3fa:	bf00      	nop
      }
      break;
 800e3fc:	e004      	b.n	800e408 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fd84 	bl	800ef0e <USBD_CtlError>
      break;
 800e406:	bf00      	nop
  }

  return ret;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop

0800e414 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e42a:	2b40      	cmp	r3, #64	@ 0x40
 800e42c:	d005      	beq.n	800e43a <USBD_StdItfReq+0x26>
 800e42e:	2b40      	cmp	r3, #64	@ 0x40
 800e430:	d852      	bhi.n	800e4d8 <USBD_StdItfReq+0xc4>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <USBD_StdItfReq+0x26>
 800e436:	2b20      	cmp	r3, #32
 800e438:	d14e      	bne.n	800e4d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e440:	b2db      	uxtb	r3, r3
 800e442:	3b01      	subs	r3, #1
 800e444:	2b02      	cmp	r3, #2
 800e446:	d840      	bhi.n	800e4ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	889b      	ldrh	r3, [r3, #4]
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d836      	bhi.n	800e4c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	889b      	ldrh	r3, [r3, #4]
 800e456:	b2db      	uxtb	r3, r3
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff feda 	bl	800e214 <USBD_CoreFindIF>
 800e460:	4603      	mov	r3, r0
 800e462:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e464:	7bbb      	ldrb	r3, [r7, #14]
 800e466:	2bff      	cmp	r3, #255	@ 0xff
 800e468:	d01d      	beq.n	800e4a6 <USBD_StdItfReq+0x92>
 800e46a:	7bbb      	ldrb	r3, [r7, #14]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d11a      	bne.n	800e4a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e470:	7bba      	ldrb	r2, [r7, #14]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	32ae      	adds	r2, #174	@ 0xae
 800e476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00f      	beq.n	800e4a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e480:	7bba      	ldrb	r2, [r7, #14]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e488:	7bba      	ldrb	r2, [r7, #14]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	32ae      	adds	r2, #174	@ 0xae
 800e48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	4798      	blx	r3
 800e49a:	4603      	mov	r3, r0
 800e49c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e49e:	e004      	b.n	800e4aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e4a4:	e001      	b.n	800e4aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	88db      	ldrh	r3, [r3, #6]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d110      	bne.n	800e4d4 <USBD_StdItfReq+0xc0>
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10d      	bne.n	800e4d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 fe06 	bl	800f0ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e4be:	e009      	b.n	800e4d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fd23 	bl	800ef0e <USBD_CtlError>
          break;
 800e4c8:	e004      	b.n	800e4d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fd1e 	bl	800ef0e <USBD_CtlError>
          break;
 800e4d2:	e000      	b.n	800e4d6 <USBD_StdItfReq+0xc2>
          break;
 800e4d4:	bf00      	nop
      }
      break;
 800e4d6:	e004      	b.n	800e4e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fd17 	bl	800ef0e <USBD_CtlError>
      break;
 800e4e0:	bf00      	nop
  }

  return ret;
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	889b      	ldrh	r3, [r3, #4]
 800e4fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e508:	2b40      	cmp	r3, #64	@ 0x40
 800e50a:	d007      	beq.n	800e51c <USBD_StdEPReq+0x30>
 800e50c:	2b40      	cmp	r3, #64	@ 0x40
 800e50e:	f200 8181 	bhi.w	800e814 <USBD_StdEPReq+0x328>
 800e512:	2b00      	cmp	r3, #0
 800e514:	d02a      	beq.n	800e56c <USBD_StdEPReq+0x80>
 800e516:	2b20      	cmp	r3, #32
 800e518:	f040 817c 	bne.w	800e814 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e51c:	7bbb      	ldrb	r3, [r7, #14]
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7ff fe84 	bl	800e22e <USBD_CoreFindEP>
 800e526:	4603      	mov	r3, r0
 800e528:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e52a:	7b7b      	ldrb	r3, [r7, #13]
 800e52c:	2bff      	cmp	r3, #255	@ 0xff
 800e52e:	f000 8176 	beq.w	800e81e <USBD_StdEPReq+0x332>
 800e532:	7b7b      	ldrb	r3, [r7, #13]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f040 8172 	bne.w	800e81e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e53a:	7b7a      	ldrb	r2, [r7, #13]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e542:	7b7a      	ldrb	r2, [r7, #13]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	32ae      	adds	r2, #174	@ 0xae
 800e548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8165 	beq.w	800e81e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e554:	7b7a      	ldrb	r2, [r7, #13]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	32ae      	adds	r2, #174	@ 0xae
 800e55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	4798      	blx	r3
 800e566:	4603      	mov	r3, r0
 800e568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e56a:	e158      	b.n	800e81e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	785b      	ldrb	r3, [r3, #1]
 800e570:	2b03      	cmp	r3, #3
 800e572:	d008      	beq.n	800e586 <USBD_StdEPReq+0x9a>
 800e574:	2b03      	cmp	r3, #3
 800e576:	f300 8147 	bgt.w	800e808 <USBD_StdEPReq+0x31c>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 809b 	beq.w	800e6b6 <USBD_StdEPReq+0x1ca>
 800e580:	2b01      	cmp	r3, #1
 800e582:	d03c      	beq.n	800e5fe <USBD_StdEPReq+0x112>
 800e584:	e140      	b.n	800e808 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d002      	beq.n	800e598 <USBD_StdEPReq+0xac>
 800e592:	2b03      	cmp	r3, #3
 800e594:	d016      	beq.n	800e5c4 <USBD_StdEPReq+0xd8>
 800e596:	e02c      	b.n	800e5f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00d      	beq.n	800e5ba <USBD_StdEPReq+0xce>
 800e59e:	7bbb      	ldrb	r3, [r7, #14]
 800e5a0:	2b80      	cmp	r3, #128	@ 0x80
 800e5a2:	d00a      	beq.n	800e5ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f001 f9bb 	bl	800f924 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ae:	2180      	movs	r1, #128	@ 0x80
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f9b7 	bl	800f924 <USBD_LL_StallEP>
 800e5b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5b8:	e020      	b.n	800e5fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fca6 	bl	800ef0e <USBD_CtlError>
              break;
 800e5c2:	e01b      	b.n	800e5fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	885b      	ldrh	r3, [r3, #2]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10e      	bne.n	800e5ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00b      	beq.n	800e5ea <USBD_StdEPReq+0xfe>
 800e5d2:	7bbb      	ldrb	r3, [r7, #14]
 800e5d4:	2b80      	cmp	r3, #128	@ 0x80
 800e5d6:	d008      	beq.n	800e5ea <USBD_StdEPReq+0xfe>
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	88db      	ldrh	r3, [r3, #6]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d104      	bne.n	800e5ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5e0:	7bbb      	ldrb	r3, [r7, #14]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 f99d 	bl	800f924 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fd6d 	bl	800f0ca <USBD_CtlSendStatus>

              break;
 800e5f0:	e004      	b.n	800e5fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fc8a 	bl	800ef0e <USBD_CtlError>
              break;
 800e5fa:	bf00      	nop
          }
          break;
 800e5fc:	e109      	b.n	800e812 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b02      	cmp	r3, #2
 800e608:	d002      	beq.n	800e610 <USBD_StdEPReq+0x124>
 800e60a:	2b03      	cmp	r3, #3
 800e60c:	d016      	beq.n	800e63c <USBD_StdEPReq+0x150>
 800e60e:	e04b      	b.n	800e6a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e610:	7bbb      	ldrb	r3, [r7, #14]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00d      	beq.n	800e632 <USBD_StdEPReq+0x146>
 800e616:	7bbb      	ldrb	r3, [r7, #14]
 800e618:	2b80      	cmp	r3, #128	@ 0x80
 800e61a:	d00a      	beq.n	800e632 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
 800e61e:	4619      	mov	r1, r3
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 f97f 	bl	800f924 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e626:	2180      	movs	r1, #128	@ 0x80
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f001 f97b 	bl	800f924 <USBD_LL_StallEP>
 800e62e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e630:	e040      	b.n	800e6b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fc6a 	bl	800ef0e <USBD_CtlError>
              break;
 800e63a:	e03b      	b.n	800e6b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	885b      	ldrh	r3, [r3, #2]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d136      	bne.n	800e6b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e644:	7bbb      	ldrb	r3, [r7, #14]
 800e646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	4619      	mov	r1, r3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f001 f985 	bl	800f962 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fd36 	bl	800f0ca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e65e:	7bbb      	ldrb	r3, [r7, #14]
 800e660:	4619      	mov	r1, r3
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff fde3 	bl	800e22e <USBD_CoreFindEP>
 800e668:	4603      	mov	r3, r0
 800e66a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e66c:	7b7b      	ldrb	r3, [r7, #13]
 800e66e:	2bff      	cmp	r3, #255	@ 0xff
 800e670:	d01f      	beq.n	800e6b2 <USBD_StdEPReq+0x1c6>
 800e672:	7b7b      	ldrb	r3, [r7, #13]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d11c      	bne.n	800e6b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e678:	7b7a      	ldrb	r2, [r7, #13]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e680:	7b7a      	ldrb	r2, [r7, #13]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	32ae      	adds	r2, #174	@ 0xae
 800e686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d010      	beq.n	800e6b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e690:	7b7a      	ldrb	r2, [r7, #13]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	32ae      	adds	r2, #174	@ 0xae
 800e696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	4798      	blx	r3
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e6a6:	e004      	b.n	800e6b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fc2f 	bl	800ef0e <USBD_CtlError>
              break;
 800e6b0:	e000      	b.n	800e6b4 <USBD_StdEPReq+0x1c8>
              break;
 800e6b2:	bf00      	nop
          }
          break;
 800e6b4:	e0ad      	b.n	800e812 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d002      	beq.n	800e6c8 <USBD_StdEPReq+0x1dc>
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d033      	beq.n	800e72e <USBD_StdEPReq+0x242>
 800e6c6:	e099      	b.n	800e7fc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d007      	beq.n	800e6de <USBD_StdEPReq+0x1f2>
 800e6ce:	7bbb      	ldrb	r3, [r7, #14]
 800e6d0:	2b80      	cmp	r3, #128	@ 0x80
 800e6d2:	d004      	beq.n	800e6de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fc19 	bl	800ef0e <USBD_CtlError>
                break;
 800e6dc:	e093      	b.n	800e806 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	da0b      	bge.n	800e6fe <USBD_StdEPReq+0x212>
 800e6e6:	7bbb      	ldrb	r3, [r7, #14]
 800e6e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	3310      	adds	r3, #16
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	e00b      	b.n	800e716 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6fe:	7bbb      	ldrb	r3, [r7, #14]
 800e700:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e704:	4613      	mov	r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	4413      	add	r3, r2
 800e714:	3304      	adds	r3, #4
 800e716:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	2200      	movs	r2, #0
 800e71c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	330e      	adds	r3, #14
 800e722:	2202      	movs	r2, #2
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fc6e 	bl	800f008 <USBD_CtlSendData>
              break;
 800e72c:	e06b      	b.n	800e806 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e72e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e732:	2b00      	cmp	r3, #0
 800e734:	da11      	bge.n	800e75a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e736:	7bbb      	ldrb	r3, [r7, #14]
 800e738:	f003 020f 	and.w	r2, r3, #15
 800e73c:	6879      	ldr	r1, [r7, #4]
 800e73e:	4613      	mov	r3, r2
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	440b      	add	r3, r1
 800e748:	3323      	adds	r3, #35	@ 0x23
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d117      	bne.n	800e780 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fbdb 	bl	800ef0e <USBD_CtlError>
                  break;
 800e758:	e055      	b.n	800e806 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e75a:	7bbb      	ldrb	r3, [r7, #14]
 800e75c:	f003 020f 	and.w	r2, r3, #15
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	440b      	add	r3, r1
 800e76c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d104      	bne.n	800e780 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e776:	6839      	ldr	r1, [r7, #0]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 fbc8 	bl	800ef0e <USBD_CtlError>
                  break;
 800e77e:	e042      	b.n	800e806 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e784:	2b00      	cmp	r3, #0
 800e786:	da0b      	bge.n	800e7a0 <USBD_StdEPReq+0x2b4>
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e78e:	4613      	mov	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	3310      	adds	r3, #16
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	4413      	add	r3, r2
 800e79c:	3304      	adds	r3, #4
 800e79e:	e00b      	b.n	800e7b8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7a0:	7bbb      	ldrb	r3, [r7, #14]
 800e7a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e7ba:	7bbb      	ldrb	r3, [r7, #14]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <USBD_StdEPReq+0x2da>
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
 800e7c2:	2b80      	cmp	r3, #128	@ 0x80
 800e7c4:	d103      	bne.n	800e7ce <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	739a      	strb	r2, [r3, #14]
 800e7cc:	e00e      	b.n	800e7ec <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e7ce:	7bbb      	ldrb	r3, [r7, #14]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f001 f8e4 	bl	800f9a0 <USBD_LL_IsStallEP>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	739a      	strb	r2, [r3, #14]
 800e7e4:	e002      	b.n	800e7ec <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	330e      	adds	r3, #14
 800e7f0:	2202      	movs	r2, #2
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fc07 	bl	800f008 <USBD_CtlSendData>
              break;
 800e7fa:	e004      	b.n	800e806 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fb85 	bl	800ef0e <USBD_CtlError>
              break;
 800e804:	bf00      	nop
          }
          break;
 800e806:	e004      	b.n	800e812 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fb7f 	bl	800ef0e <USBD_CtlError>
          break;
 800e810:	bf00      	nop
      }
      break;
 800e812:	e005      	b.n	800e820 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 fb79 	bl	800ef0e <USBD_CtlError>
      break;
 800e81c:	e000      	b.n	800e820 <USBD_StdEPReq+0x334>
      break;
 800e81e:	bf00      	nop
  }

  return ret;
 800e820:	7bfb      	ldrb	r3, [r7, #15]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
	...

0800e82c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e836:	2300      	movs	r3, #0
 800e838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e83a:	2300      	movs	r3, #0
 800e83c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e83e:	2300      	movs	r3, #0
 800e840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	885b      	ldrh	r3, [r3, #2]
 800e846:	0a1b      	lsrs	r3, r3, #8
 800e848:	b29b      	uxth	r3, r3
 800e84a:	3b01      	subs	r3, #1
 800e84c:	2b0e      	cmp	r3, #14
 800e84e:	f200 8152 	bhi.w	800eaf6 <USBD_GetDescriptor+0x2ca>
 800e852:	a201      	add	r2, pc, #4	@ (adr r2, 800e858 <USBD_GetDescriptor+0x2c>)
 800e854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e858:	0800e8c9 	.word	0x0800e8c9
 800e85c:	0800e8e1 	.word	0x0800e8e1
 800e860:	0800e921 	.word	0x0800e921
 800e864:	0800eaf7 	.word	0x0800eaf7
 800e868:	0800eaf7 	.word	0x0800eaf7
 800e86c:	0800ea97 	.word	0x0800ea97
 800e870:	0800eac3 	.word	0x0800eac3
 800e874:	0800eaf7 	.word	0x0800eaf7
 800e878:	0800eaf7 	.word	0x0800eaf7
 800e87c:	0800eaf7 	.word	0x0800eaf7
 800e880:	0800eaf7 	.word	0x0800eaf7
 800e884:	0800eaf7 	.word	0x0800eaf7
 800e888:	0800eaf7 	.word	0x0800eaf7
 800e88c:	0800eaf7 	.word	0x0800eaf7
 800e890:	0800e895 	.word	0x0800e895
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e89a:	69db      	ldr	r3, [r3, #28]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00b      	beq.n	800e8b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8a6:	69db      	ldr	r3, [r3, #28]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	7c12      	ldrb	r2, [r2, #16]
 800e8ac:	f107 0108 	add.w	r1, r7, #8
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	4798      	blx	r3
 800e8b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8b6:	e126      	b.n	800eb06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 fb27 	bl	800ef0e <USBD_CtlError>
        err++;
 800e8c0:	7afb      	ldrb	r3, [r7, #11]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	72fb      	strb	r3, [r7, #11]
      break;
 800e8c6:	e11e      	b.n	800eb06 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	7c12      	ldrb	r2, [r2, #16]
 800e8d4:	f107 0108 	add.w	r1, r7, #8
 800e8d8:	4610      	mov	r0, r2
 800e8da:	4798      	blx	r3
 800e8dc:	60f8      	str	r0, [r7, #12]
      break;
 800e8de:	e112      	b.n	800eb06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7c1b      	ldrb	r3, [r3, #16]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10d      	bne.n	800e904 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8f0:	f107 0208 	add.w	r2, r7, #8
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4798      	blx	r3
 800e8f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	2202      	movs	r2, #2
 800e900:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e902:	e100      	b.n	800eb06 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e90c:	f107 0208 	add.w	r2, r7, #8
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	3301      	adds	r3, #1
 800e91a:	2202      	movs	r2, #2
 800e91c:	701a      	strb	r2, [r3, #0]
      break;
 800e91e:	e0f2      	b.n	800eb06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	885b      	ldrh	r3, [r3, #2]
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b05      	cmp	r3, #5
 800e928:	f200 80ac 	bhi.w	800ea84 <USBD_GetDescriptor+0x258>
 800e92c:	a201      	add	r2, pc, #4	@ (adr r2, 800e934 <USBD_GetDescriptor+0x108>)
 800e92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e932:	bf00      	nop
 800e934:	0800e94d 	.word	0x0800e94d
 800e938:	0800e981 	.word	0x0800e981
 800e93c:	0800e9b5 	.word	0x0800e9b5
 800e940:	0800e9e9 	.word	0x0800e9e9
 800e944:	0800ea1d 	.word	0x0800ea1d
 800e948:	0800ea51 	.word	0x0800ea51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00b      	beq.n	800e970 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	7c12      	ldrb	r2, [r2, #16]
 800e964:	f107 0108 	add.w	r1, r7, #8
 800e968:	4610      	mov	r0, r2
 800e96a:	4798      	blx	r3
 800e96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e96e:	e091      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e970:	6839      	ldr	r1, [r7, #0]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 facb 	bl	800ef0e <USBD_CtlError>
            err++;
 800e978:	7afb      	ldrb	r3, [r7, #11]
 800e97a:	3301      	adds	r3, #1
 800e97c:	72fb      	strb	r3, [r7, #11]
          break;
 800e97e:	e089      	b.n	800ea94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00b      	beq.n	800e9a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	7c12      	ldrb	r2, [r2, #16]
 800e998:	f107 0108 	add.w	r1, r7, #8
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
 800e9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9a2:	e077      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fab1 	bl	800ef0e <USBD_CtlError>
            err++;
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9b2:	e06f      	b.n	800ea94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00b      	beq.n	800e9d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	7c12      	ldrb	r2, [r2, #16]
 800e9cc:	f107 0108 	add.w	r1, r7, #8
 800e9d0:	4610      	mov	r0, r2
 800e9d2:	4798      	blx	r3
 800e9d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9d6:	e05d      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa97 	bl	800ef0e <USBD_CtlError>
            err++;
 800e9e0:	7afb      	ldrb	r3, [r7, #11]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9e6:	e055      	b.n	800ea94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00b      	beq.n	800ea0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	7c12      	ldrb	r2, [r2, #16]
 800ea00:	f107 0108 	add.w	r1, r7, #8
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3
 800ea08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea0a:	e043      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea0c:	6839      	ldr	r1, [r7, #0]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 fa7d 	bl	800ef0e <USBD_CtlError>
            err++;
 800ea14:	7afb      	ldrb	r3, [r7, #11]
 800ea16:	3301      	adds	r3, #1
 800ea18:	72fb      	strb	r3, [r7, #11]
          break;
 800ea1a:	e03b      	b.n	800ea94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00b      	beq.n	800ea40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	7c12      	ldrb	r2, [r2, #16]
 800ea34:	f107 0108 	add.w	r1, r7, #8
 800ea38:	4610      	mov	r0, r2
 800ea3a:	4798      	blx	r3
 800ea3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea3e:	e029      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fa63 	bl	800ef0e <USBD_CtlError>
            err++;
 800ea48:	7afb      	ldrb	r3, [r7, #11]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea4e:	e021      	b.n	800ea94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00b      	beq.n	800ea74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea62:	699b      	ldr	r3, [r3, #24]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	7c12      	ldrb	r2, [r2, #16]
 800ea68:	f107 0108 	add.w	r1, r7, #8
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea72:	e00f      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea74:	6839      	ldr	r1, [r7, #0]
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fa49 	bl	800ef0e <USBD_CtlError>
            err++;
 800ea7c:	7afb      	ldrb	r3, [r7, #11]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	72fb      	strb	r3, [r7, #11]
          break;
 800ea82:	e007      	b.n	800ea94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 fa41 	bl	800ef0e <USBD_CtlError>
          err++;
 800ea8c:	7afb      	ldrb	r3, [r7, #11]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ea92:	bf00      	nop
      }
      break;
 800ea94:	e037      	b.n	800eb06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	7c1b      	ldrb	r3, [r3, #16]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d109      	bne.n	800eab2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaa6:	f107 0208 	add.w	r2, r7, #8
 800eaaa:	4610      	mov	r0, r2
 800eaac:	4798      	blx	r3
 800eaae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eab0:	e029      	b.n	800eb06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fa2a 	bl	800ef0e <USBD_CtlError>
        err++;
 800eaba:	7afb      	ldrb	r3, [r7, #11]
 800eabc:	3301      	adds	r3, #1
 800eabe:	72fb      	strb	r3, [r7, #11]
      break;
 800eac0:	e021      	b.n	800eb06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7c1b      	ldrb	r3, [r3, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10d      	bne.n	800eae6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ead0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ead2:	f107 0208 	add.w	r2, r7, #8
 800ead6:	4610      	mov	r0, r2
 800ead8:	4798      	blx	r3
 800eada:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	3301      	adds	r3, #1
 800eae0:	2207      	movs	r2, #7
 800eae2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eae4:	e00f      	b.n	800eb06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eae6:	6839      	ldr	r1, [r7, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fa10 	bl	800ef0e <USBD_CtlError>
        err++;
 800eaee:	7afb      	ldrb	r3, [r7, #11]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	72fb      	strb	r3, [r7, #11]
      break;
 800eaf4:	e007      	b.n	800eb06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fa08 	bl	800ef0e <USBD_CtlError>
      err++;
 800eafe:	7afb      	ldrb	r3, [r7, #11]
 800eb00:	3301      	adds	r3, #1
 800eb02:	72fb      	strb	r3, [r7, #11]
      break;
 800eb04:	bf00      	nop
  }

  if (err != 0U)
 800eb06:	7afb      	ldrb	r3, [r7, #11]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d11e      	bne.n	800eb4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	88db      	ldrh	r3, [r3, #6]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d016      	beq.n	800eb42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eb14:	893b      	ldrh	r3, [r7, #8]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00e      	beq.n	800eb38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	88da      	ldrh	r2, [r3, #6]
 800eb1e:	893b      	ldrh	r3, [r7, #8]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	bf28      	it	cs
 800eb24:	4613      	movcs	r3, r2
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eb2a:	893b      	ldrh	r3, [r7, #8]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	68f9      	ldr	r1, [r7, #12]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fa69 	bl	800f008 <USBD_CtlSendData>
 800eb36:	e009      	b.n	800eb4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f9e7 	bl	800ef0e <USBD_CtlError>
 800eb40:	e004      	b.n	800eb4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 fac1 	bl	800f0ca <USBD_CtlSendStatus>
 800eb48:	e000      	b.n	800eb4c <USBD_GetDescriptor+0x320>
    return;
 800eb4a:	bf00      	nop
  }
}
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop

0800eb54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	889b      	ldrh	r3, [r3, #4]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d131      	bne.n	800ebca <USBD_SetAddress+0x76>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	88db      	ldrh	r3, [r3, #6]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d12d      	bne.n	800ebca <USBD_SetAddress+0x76>
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	885b      	ldrh	r3, [r3, #2]
 800eb72:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb74:	d829      	bhi.n	800ebca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	885b      	ldrh	r3, [r3, #2]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d104      	bne.n	800eb98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 f9bc 	bl	800ef0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb96:	e01d      	b.n	800ebd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	7bfa      	ldrb	r2, [r7, #15]
 800eb9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 ff27 	bl	800f9f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa8d 	bl	800f0ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d004      	beq.n	800ebc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2202      	movs	r2, #2
 800ebba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebbe:	e009      	b.n	800ebd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc8:	e004      	b.n	800ebd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ebca:	6839      	ldr	r1, [r7, #0]
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f99e 	bl	800ef0e <USBD_CtlError>
  }
}
 800ebd2:	bf00      	nop
 800ebd4:	bf00      	nop
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	885b      	ldrh	r3, [r3, #2]
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	4b4e      	ldr	r3, [pc, #312]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ebf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ebf4:	4b4d      	ldr	r3, [pc, #308]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d905      	bls.n	800ec08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f985 	bl	800ef0e <USBD_CtlError>
    return USBD_FAIL;
 800ec04:	2303      	movs	r3, #3
 800ec06:	e08c      	b.n	800ed22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d002      	beq.n	800ec1a <USBD_SetConfig+0x3e>
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d029      	beq.n	800ec6c <USBD_SetConfig+0x90>
 800ec18:	e075      	b.n	800ed06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ec1a:	4b44      	ldr	r3, [pc, #272]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d020      	beq.n	800ec64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ec22:	4b42      	ldr	r3, [pc, #264]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec2c:	4b3f      	ldr	r3, [pc, #252]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7fe ffa3 	bl	800db7e <USBD_SetClassConfig>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d008      	beq.n	800ec54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f962 	bl	800ef0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2202      	movs	r2, #2
 800ec4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec52:	e065      	b.n	800ed20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 fa38 	bl	800f0ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2203      	movs	r2, #3
 800ec5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ec62:	e05d      	b.n	800ed20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 fa30 	bl	800f0ca <USBD_CtlSendStatus>
      break;
 800ec6a:	e059      	b.n	800ed20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d112      	bne.n	800ec9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2202      	movs	r2, #2
 800ec78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ec7c:	4b2b      	ldr	r3, [pc, #172]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	461a      	mov	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec86:	4b29      	ldr	r3, [pc, #164]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7fe ff92 	bl	800dbb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fa19 	bl	800f0ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec98:	e042      	b.n	800ed20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ec9a:	4b24      	ldr	r3, [pc, #144]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d02a      	beq.n	800ecfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7fe ff80 	bl	800dbb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ecb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ecc0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7fe ff59 	bl	800db7e <USBD_SetClassConfig>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00f      	beq.n	800ecf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 f918 	bl	800ef0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	4619      	mov	r1, r3
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7fe ff65 	bl	800dbb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2202      	movs	r2, #2
 800ecf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ecf4:	e014      	b.n	800ed20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 f9e7 	bl	800f0ca <USBD_CtlSendStatus>
      break;
 800ecfc:	e010      	b.n	800ed20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 f9e3 	bl	800f0ca <USBD_CtlSendStatus>
      break;
 800ed04:	e00c      	b.n	800ed20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f900 	bl	800ef0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed0e:	4b07      	ldr	r3, [pc, #28]	@ (800ed2c <USBD_SetConfig+0x150>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7fe ff4e 	bl	800dbb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ed1a:	2303      	movs	r3, #3
 800ed1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed1e:	bf00      	nop
  }

  return ret;
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	200008e8 	.word	0x200008e8

0800ed30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	88db      	ldrh	r3, [r3, #6]
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d004      	beq.n	800ed4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 f8e2 	bl	800ef0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ed4a:	e023      	b.n	800ed94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	dc02      	bgt.n	800ed5e <USBD_GetConfig+0x2e>
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	dc03      	bgt.n	800ed64 <USBD_GetConfig+0x34>
 800ed5c:	e015      	b.n	800ed8a <USBD_GetConfig+0x5a>
 800ed5e:	2b03      	cmp	r3, #3
 800ed60:	d00b      	beq.n	800ed7a <USBD_GetConfig+0x4a>
 800ed62:	e012      	b.n	800ed8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3308      	adds	r3, #8
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f948 	bl	800f008 <USBD_CtlSendData>
        break;
 800ed78:	e00c      	b.n	800ed94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	2201      	movs	r2, #1
 800ed80:	4619      	mov	r1, r3
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f940 	bl	800f008 <USBD_CtlSendData>
        break;
 800ed88:	e004      	b.n	800ed94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 f8be 	bl	800ef0e <USBD_CtlError>
        break;
 800ed92:	bf00      	nop
}
 800ed94:	bf00      	nop
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edac:	b2db      	uxtb	r3, r3
 800edae:	3b01      	subs	r3, #1
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d81e      	bhi.n	800edf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	88db      	ldrh	r3, [r3, #6]
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d004      	beq.n	800edc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f8a5 	bl	800ef0e <USBD_CtlError>
        break;
 800edc4:	e01a      	b.n	800edfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2201      	movs	r2, #1
 800edca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	f043 0202 	orr.w	r2, r3, #2
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	330c      	adds	r3, #12
 800ede6:	2202      	movs	r2, #2
 800ede8:	4619      	mov	r1, r3
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f90c 	bl	800f008 <USBD_CtlSendData>
      break;
 800edf0:	e004      	b.n	800edfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800edf2:	6839      	ldr	r1, [r7, #0]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f88a 	bl	800ef0e <USBD_CtlError>
      break;
 800edfa:	bf00      	nop
  }
}
 800edfc:	bf00      	nop
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	885b      	ldrh	r3, [r3, #2]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d107      	bne.n	800ee26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 f953 	bl	800f0ca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ee24:	e013      	b.n	800ee4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	885b      	ldrh	r3, [r3, #2]
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d10b      	bne.n	800ee46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	889b      	ldrh	r3, [r3, #4]
 800ee32:	0a1b      	lsrs	r3, r3, #8
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f943 	bl	800f0ca <USBD_CtlSendStatus>
}
 800ee44:	e003      	b.n	800ee4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f860 	bl	800ef0e <USBD_CtlError>
}
 800ee4e:	bf00      	nop
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d80b      	bhi.n	800ee86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	885b      	ldrh	r3, [r3, #2]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d10c      	bne.n	800ee90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f923 	bl	800f0ca <USBD_CtlSendStatus>
      }
      break;
 800ee84:	e004      	b.n	800ee90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f840 	bl	800ef0e <USBD_CtlError>
      break;
 800ee8e:	e000      	b.n	800ee92 <USBD_ClrFeature+0x3c>
      break;
 800ee90:	bf00      	nop
  }
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b084      	sub	sp, #16
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	781a      	ldrb	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	781a      	ldrb	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3301      	adds	r3, #1
 800eec2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7ff fa13 	bl	800e2f0 <SWAPBYTE>
 800eeca:	4603      	mov	r3, r0
 800eecc:	461a      	mov	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	3301      	adds	r3, #1
 800eed6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	3301      	adds	r3, #1
 800eedc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff fa06 	bl	800e2f0 <SWAPBYTE>
 800eee4:	4603      	mov	r3, r0
 800eee6:	461a      	mov	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	3301      	adds	r3, #1
 800eef0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3301      	adds	r3, #1
 800eef6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f7ff f9f9 	bl	800e2f0 <SWAPBYTE>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	80da      	strh	r2, [r3, #6]
}
 800ef06:	bf00      	nop
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef18:	2180      	movs	r1, #128	@ 0x80
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fd02 	bl	800f924 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ef20:	2100      	movs	r1, #0
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fcfe 	bl	800f924 <USBD_LL_StallEP>
}
 800ef28:	bf00      	nop
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d042      	beq.n	800efcc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ef4a:	6938      	ldr	r0, [r7, #16]
 800ef4c:	f000 f842 	bl	800efd4 <USBD_GetLen>
 800ef50:	4603      	mov	r3, r0
 800ef52:	3301      	adds	r3, #1
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef5a:	d808      	bhi.n	800ef6e <USBD_GetString+0x3e>
 800ef5c:	6938      	ldr	r0, [r7, #16]
 800ef5e:	f000 f839 	bl	800efd4 <USBD_GetLen>
 800ef62:	4603      	mov	r3, r0
 800ef64:	3301      	adds	r3, #1
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	e001      	b.n	800ef72 <USBD_GetString+0x42>
 800ef6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ef76:	7dfb      	ldrb	r3, [r7, #23]
 800ef78:	68ba      	ldr	r2, [r7, #8]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	7812      	ldrb	r2, [r2, #0]
 800ef80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
 800ef84:	3301      	adds	r3, #1
 800ef86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ef88:	7dfb      	ldrb	r3, [r7, #23]
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	2203      	movs	r2, #3
 800ef90:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef92:	7dfb      	ldrb	r3, [r7, #23]
 800ef94:	3301      	adds	r3, #1
 800ef96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ef98:	e013      	b.n	800efc2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	4413      	add	r3, r2
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	7812      	ldrb	r2, [r2, #0]
 800efa4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	3301      	adds	r3, #1
 800efaa:	613b      	str	r3, [r7, #16]
    idx++;
 800efac:	7dfb      	ldrb	r3, [r7, #23]
 800efae:	3301      	adds	r3, #1
 800efb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800efb2:	7dfb      	ldrb	r3, [r7, #23]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	4413      	add	r3, r2
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
    idx++;
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
 800efbe:	3301      	adds	r3, #1
 800efc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e7      	bne.n	800ef9a <USBD_GetString+0x6a>
 800efca:	e000      	b.n	800efce <USBD_GetString+0x9e>
    return;
 800efcc:	bf00      	nop
  }
}
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800efe4:	e005      	b.n	800eff2 <USBD_GetLen+0x1e>
  {
    len++;
 800efe6:	7bfb      	ldrb	r3, [r7, #15]
 800efe8:	3301      	adds	r3, #1
 800efea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	3301      	adds	r3, #1
 800eff0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1f5      	bne.n	800efe6 <USBD_GetLen+0x12>
  }

  return len;
 800effa:	7bfb      	ldrb	r3, [r7, #15]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2202      	movs	r2, #2
 800f018:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	2100      	movs	r1, #0
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f000 fcfe 	bl	800fa36 <USBD_LL_Transmit>

  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	2100      	movs	r1, #0
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 fced 	bl	800fa36 <USBD_LL_Transmit>

  return USBD_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b084      	sub	sp, #16
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2203      	movs	r2, #3
 800f076:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	2100      	movs	r1, #0
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f000 fced 	bl	800fa78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fcdc 	bl	800fa78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2204      	movs	r2, #4
 800f0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0da:	2300      	movs	r3, #0
 800f0dc:	2200      	movs	r2, #0
 800f0de:	2100      	movs	r1, #0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fca8 	bl	800fa36 <USBD_LL_Transmit>

  return USBD_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2205      	movs	r2, #5
 800f0fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f100:	2300      	movs	r3, #0
 800f102:	2200      	movs	r2, #0
 800f104:	2100      	movs	r1, #0
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fcb6 	bl	800fa78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f11c:	2200      	movs	r2, #0
 800f11e:	4912      	ldr	r1, [pc, #72]	@ (800f168 <MX_USB_DEVICE_Init+0x50>)
 800f120:	4812      	ldr	r0, [pc, #72]	@ (800f16c <MX_USB_DEVICE_Init+0x54>)
 800f122:	f7fe fcaf 	bl	800da84 <USBD_Init>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f12c:	f7f4 f924 	bl	8003378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f130:	490f      	ldr	r1, [pc, #60]	@ (800f170 <MX_USB_DEVICE_Init+0x58>)
 800f132:	480e      	ldr	r0, [pc, #56]	@ (800f16c <MX_USB_DEVICE_Init+0x54>)
 800f134:	f7fe fcd6 	bl	800dae4 <USBD_RegisterClass>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f13e:	f7f4 f91b 	bl	8003378 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f142:	490c      	ldr	r1, [pc, #48]	@ (800f174 <MX_USB_DEVICE_Init+0x5c>)
 800f144:	4809      	ldr	r0, [pc, #36]	@ (800f16c <MX_USB_DEVICE_Init+0x54>)
 800f146:	f7fe fc0d 	bl	800d964 <USBD_CDC_RegisterInterface>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f150:	f7f4 f912 	bl	8003378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f154:	4805      	ldr	r0, [pc, #20]	@ (800f16c <MX_USB_DEVICE_Init+0x54>)
 800f156:	f7fe fcfb 	bl	800db50 <USBD_Start>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f160:	f7f4 f90a 	bl	8003378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f164:	bf00      	nop
 800f166:	bd80      	pop	{r7, pc}
 800f168:	200000ac 	.word	0x200000ac
 800f16c:	200008ec 	.word	0x200008ec
 800f170:	20000018 	.word	0x20000018
 800f174:	20000098 	.word	0x20000098

0800f178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f17c:	2200      	movs	r2, #0
 800f17e:	4905      	ldr	r1, [pc, #20]	@ (800f194 <CDC_Init_FS+0x1c>)
 800f180:	4805      	ldr	r0, [pc, #20]	@ (800f198 <CDC_Init_FS+0x20>)
 800f182:	f7fe fc09 	bl	800d998 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f186:	4905      	ldr	r1, [pc, #20]	@ (800f19c <CDC_Init_FS+0x24>)
 800f188:	4803      	ldr	r0, [pc, #12]	@ (800f198 <CDC_Init_FS+0x20>)
 800f18a:	f7fe fc27 	bl	800d9dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f18e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f190:	4618      	mov	r0, r3
 800f192:	bd80      	pop	{r7, pc}
 800f194:	200013c8 	.word	0x200013c8
 800f198:	200008ec 	.word	0x200008ec
 800f19c:	20000bc8 	.word	0x20000bc8

0800f1a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f1a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	6039      	str	r1, [r7, #0]
 800f1ba:	71fb      	strb	r3, [r7, #7]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	2b23      	cmp	r3, #35	@ 0x23
 800f1c4:	d84a      	bhi.n	800f25c <CDC_Control_FS+0xac>
 800f1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <CDC_Control_FS+0x1c>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f25d 	.word	0x0800f25d
 800f1d0:	0800f25d 	.word	0x0800f25d
 800f1d4:	0800f25d 	.word	0x0800f25d
 800f1d8:	0800f25d 	.word	0x0800f25d
 800f1dc:	0800f25d 	.word	0x0800f25d
 800f1e0:	0800f25d 	.word	0x0800f25d
 800f1e4:	0800f25d 	.word	0x0800f25d
 800f1e8:	0800f25d 	.word	0x0800f25d
 800f1ec:	0800f25d 	.word	0x0800f25d
 800f1f0:	0800f25d 	.word	0x0800f25d
 800f1f4:	0800f25d 	.word	0x0800f25d
 800f1f8:	0800f25d 	.word	0x0800f25d
 800f1fc:	0800f25d 	.word	0x0800f25d
 800f200:	0800f25d 	.word	0x0800f25d
 800f204:	0800f25d 	.word	0x0800f25d
 800f208:	0800f25d 	.word	0x0800f25d
 800f20c:	0800f25d 	.word	0x0800f25d
 800f210:	0800f25d 	.word	0x0800f25d
 800f214:	0800f25d 	.word	0x0800f25d
 800f218:	0800f25d 	.word	0x0800f25d
 800f21c:	0800f25d 	.word	0x0800f25d
 800f220:	0800f25d 	.word	0x0800f25d
 800f224:	0800f25d 	.word	0x0800f25d
 800f228:	0800f25d 	.word	0x0800f25d
 800f22c:	0800f25d 	.word	0x0800f25d
 800f230:	0800f25d 	.word	0x0800f25d
 800f234:	0800f25d 	.word	0x0800f25d
 800f238:	0800f25d 	.word	0x0800f25d
 800f23c:	0800f25d 	.word	0x0800f25d
 800f240:	0800f25d 	.word	0x0800f25d
 800f244:	0800f25d 	.word	0x0800f25d
 800f248:	0800f25d 	.word	0x0800f25d
 800f24c:	0800f25d 	.word	0x0800f25d
 800f250:	0800f25d 	.word	0x0800f25d
 800f254:	0800f25d 	.word	0x0800f25d
 800f258:	0800f25d 	.word	0x0800f25d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f25c:	bf00      	nop
  }

  return (USBD_OK);
 800f25e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f260:	4618      	mov	r0, r3
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4805      	ldr	r0, [pc, #20]	@ (800f290 <CDC_Receive_FS+0x24>)
 800f27a:	f7fe fbaf 	bl	800d9dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f27e:	4804      	ldr	r0, [pc, #16]	@ (800f290 <CDC_Receive_FS+0x24>)
 800f280:	f7fe fbca 	bl	800da18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f284:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f286:	4618      	mov	r0, r3
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	200008ec 	.word	0x200008ec

0800f294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f294:	b480      	push	{r7}
 800f296:	b087      	sub	sp, #28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	371c      	adds	r7, #28
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
	...

0800f2b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	4603      	mov	r3, r0
 800f2c0:	6039      	str	r1, [r7, #0]
 800f2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2212      	movs	r2, #18
 800f2c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f2ca:	4b03      	ldr	r3, [pc, #12]	@ (800f2d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr
 800f2d8:	200000cc 	.word	0x200000cc

0800f2dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	6039      	str	r1, [r7, #0]
 800f2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2204      	movs	r2, #4
 800f2ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f2ee:	4b03      	ldr	r3, [pc, #12]	@ (800f2fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	200000ec 	.word	0x200000ec

0800f300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	6039      	str	r1, [r7, #0]
 800f30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f30c:	79fb      	ldrb	r3, [r7, #7]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d105      	bne.n	800f31e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	4907      	ldr	r1, [pc, #28]	@ (800f334 <USBD_FS_ProductStrDescriptor+0x34>)
 800f316:	4808      	ldr	r0, [pc, #32]	@ (800f338 <USBD_FS_ProductStrDescriptor+0x38>)
 800f318:	f7ff fe0a 	bl	800ef30 <USBD_GetString>
 800f31c:	e004      	b.n	800f328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	4904      	ldr	r1, [pc, #16]	@ (800f334 <USBD_FS_ProductStrDescriptor+0x34>)
 800f322:	4805      	ldr	r0, [pc, #20]	@ (800f338 <USBD_FS_ProductStrDescriptor+0x38>)
 800f324:	f7ff fe04 	bl	800ef30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f328:	4b02      	ldr	r3, [pc, #8]	@ (800f334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20001bc8 	.word	0x20001bc8
 800f338:	08012a08 	.word	0x08012a08

0800f33c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	4603      	mov	r3, r0
 800f344:	6039      	str	r1, [r7, #0]
 800f346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	4904      	ldr	r1, [pc, #16]	@ (800f35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f34c:	4804      	ldr	r0, [pc, #16]	@ (800f360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f34e:	f7ff fdef 	bl	800ef30 <USBD_GetString>
  return USBD_StrDesc;
 800f352:	4b02      	ldr	r3, [pc, #8]	@ (800f35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	20001bc8 	.word	0x20001bc8
 800f360:	08012a20 	.word	0x08012a20

0800f364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	6039      	str	r1, [r7, #0]
 800f36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	221a      	movs	r2, #26
 800f374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f376:	f000 f855 	bl	800f424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f37a:	4b02      	ldr	r3, [pc, #8]	@ (800f384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	200000f0 	.word	0x200000f0

0800f388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	6039      	str	r1, [r7, #0]
 800f392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d105      	bne.n	800f3a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	4907      	ldr	r1, [pc, #28]	@ (800f3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f39e:	4808      	ldr	r0, [pc, #32]	@ (800f3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3a0:	f7ff fdc6 	bl	800ef30 <USBD_GetString>
 800f3a4:	e004      	b.n	800f3b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	4904      	ldr	r1, [pc, #16]	@ (800f3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f3aa:	4805      	ldr	r0, [pc, #20]	@ (800f3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f3ac:	f7ff fdc0 	bl	800ef30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3b0:	4b02      	ldr	r3, [pc, #8]	@ (800f3bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20001bc8 	.word	0x20001bc8
 800f3c0:	08012a34 	.word	0x08012a34

0800f3c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	6039      	str	r1, [r7, #0]
 800f3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d105      	bne.n	800f3e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	4907      	ldr	r1, [pc, #28]	@ (800f3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3da:	4808      	ldr	r0, [pc, #32]	@ (800f3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3dc:	f7ff fda8 	bl	800ef30 <USBD_GetString>
 800f3e0:	e004      	b.n	800f3ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	4904      	ldr	r1, [pc, #16]	@ (800f3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3e6:	4805      	ldr	r0, [pc, #20]	@ (800f3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3e8:	f7ff fda2 	bl	800ef30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3ec:	4b02      	ldr	r3, [pc, #8]	@ (800f3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20001bc8 	.word	0x20001bc8
 800f3fc:	08012a40 	.word	0x08012a40

0800f400 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	6039      	str	r1, [r7, #0]
 800f40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	220c      	movs	r2, #12
 800f410:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f412:	4b03      	ldr	r3, [pc, #12]	@ (800f420 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	200000e0 	.word	0x200000e0

0800f424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f42a:	4b0f      	ldr	r3, [pc, #60]	@ (800f468 <Get_SerialNum+0x44>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f430:	4b0e      	ldr	r3, [pc, #56]	@ (800f46c <Get_SerialNum+0x48>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f436:	4b0e      	ldr	r3, [pc, #56]	@ (800f470 <Get_SerialNum+0x4c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4413      	add	r3, r2
 800f442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d009      	beq.n	800f45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f44a:	2208      	movs	r2, #8
 800f44c:	4909      	ldr	r1, [pc, #36]	@ (800f474 <Get_SerialNum+0x50>)
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f000 f814 	bl	800f47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f454:	2204      	movs	r2, #4
 800f456:	4908      	ldr	r1, [pc, #32]	@ (800f478 <Get_SerialNum+0x54>)
 800f458:	68b8      	ldr	r0, [r7, #8]
 800f45a:	f000 f80f 	bl	800f47c <IntToUnicode>
  }
}
 800f45e:	bf00      	nop
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	1ff07a10 	.word	0x1ff07a10
 800f46c:	1ff07a14 	.word	0x1ff07a14
 800f470:	1ff07a18 	.word	0x1ff07a18
 800f474:	200000f2 	.word	0x200000f2
 800f478:	20000102 	.word	0x20000102

0800f47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	4613      	mov	r3, r2
 800f488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f48e:	2300      	movs	r3, #0
 800f490:	75fb      	strb	r3, [r7, #23]
 800f492:	e027      	b.n	800f4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	0f1b      	lsrs	r3, r3, #28
 800f498:	2b09      	cmp	r3, #9
 800f49a:	d80b      	bhi.n	800f4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	0f1b      	lsrs	r3, r3, #28
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	7dfb      	ldrb	r3, [r7, #23]
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	440b      	add	r3, r1
 800f4ac:	3230      	adds	r2, #48	@ 0x30
 800f4ae:	b2d2      	uxtb	r2, r2
 800f4b0:	701a      	strb	r2, [r3, #0]
 800f4b2:	e00a      	b.n	800f4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	0f1b      	lsrs	r3, r3, #28
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	7dfb      	ldrb	r3, [r7, #23]
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	4619      	mov	r1, r3
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	440b      	add	r3, r1
 800f4c4:	3237      	adds	r2, #55	@ 0x37
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	011b      	lsls	r3, r3, #4
 800f4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	4413      	add	r3, r2
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	75fb      	strb	r3, [r7, #23]
 800f4e4:	7dfa      	ldrb	r2, [r7, #23]
 800f4e6:	79fb      	ldrb	r3, [r7, #7]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d3d3      	bcc.n	800f494 <IntToUnicode+0x18>
  }
}
 800f4ec:	bf00      	nop
 800f4ee:	bf00      	nop
 800f4f0:	371c      	adds	r7, #28
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
	...

0800f4fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b0aa      	sub	sp, #168	@ 0xa8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f504:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	605a      	str	r2, [r3, #4]
 800f50e:	609a      	str	r2, [r3, #8]
 800f510:	60da      	str	r2, [r3, #12]
 800f512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f514:	f107 0314 	add.w	r3, r7, #20
 800f518:	2280      	movs	r2, #128	@ 0x80
 800f51a:	2100      	movs	r1, #0
 800f51c:	4618      	mov	r0, r3
 800f51e:	f001 f978 	bl	8010812 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f52a:	d151      	bne.n	800f5d0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f52c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f530:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f532:	2300      	movs	r3, #0
 800f534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f538:	f107 0314 	add.w	r3, r7, #20
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f8 f983 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f548:	f7f3 ff16 	bl	8003378 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f54c:	4b22      	ldr	r3, [pc, #136]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f550:	4a21      	ldr	r2, [pc, #132]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f552:	f043 0301 	orr.w	r3, r3, #1
 800f556:	6313      	str	r3, [r2, #48]	@ 0x30
 800f558:	4b1f      	ldr	r3, [pc, #124]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f55a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f564:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f56c:	2302      	movs	r3, #2
 800f56e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f572:	2300      	movs	r3, #0
 800f574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f578:	2303      	movs	r3, #3
 800f57a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f57e:	230a      	movs	r3, #10
 800f580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f584:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f588:	4619      	mov	r1, r3
 800f58a:	4814      	ldr	r0, [pc, #80]	@ (800f5dc <HAL_PCD_MspInit+0xe0>)
 800f58c:	f7f5 fe9c 	bl	80052c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f590:	4b11      	ldr	r3, [pc, #68]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f594:	4a10      	ldr	r2, [pc, #64]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f59a:	6353      	str	r3, [r2, #52]	@ 0x34
 800f59c:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f5aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f5ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f5b2:	6453      	str	r3, [r2, #68]	@ 0x44
 800f5b4:	4b08      	ldr	r3, [pc, #32]	@ (800f5d8 <HAL_PCD_MspInit+0xdc>)
 800f5b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f5bc:	60bb      	str	r3, [r7, #8]
 800f5be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	2043      	movs	r0, #67	@ 0x43
 800f5c6:	f7f5 f9ba 	bl	800493e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f5ca:	2043      	movs	r0, #67	@ 0x43
 800f5cc:	f7f5 f9d3 	bl	8004976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f5d0:	bf00      	nop
 800f5d2:	37a8      	adds	r7, #168	@ 0xa8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	40023800 	.word	0x40023800
 800f5dc:	40020000 	.word	0x40020000

0800f5e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	f7fe faf7 	bl	800dbea <USBD_LL_SetupStage>
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	460b      	mov	r3, r1
 800f60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f616:	78fa      	ldrb	r2, [r7, #3]
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	4613      	mov	r3, r2
 800f61c:	00db      	lsls	r3, r3, #3
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	440b      	add	r3, r1
 800f624:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	78fb      	ldrb	r3, [r7, #3]
 800f62c:	4619      	mov	r1, r3
 800f62e:	f7fe fb31 	bl	800dc94 <USBD_LL_DataOutStage>
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b082      	sub	sp, #8
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	460b      	mov	r3, r1
 800f644:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800f64c:	78fa      	ldrb	r2, [r7, #3]
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	4613      	mov	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	4413      	add	r3, r2
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	440b      	add	r3, r1
 800f65a:	3320      	adds	r3, #32
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	78fb      	ldrb	r3, [r7, #3]
 800f660:	4619      	mov	r1, r3
 800f662:	f7fe fbd3 	bl	800de0c <USBD_LL_DataInStage>
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe fd17 	bl	800e0b0 <USBD_LL_SOF>
}
 800f682:	bf00      	nop
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b084      	sub	sp, #16
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f692:	2301      	movs	r3, #1
 800f694:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	79db      	ldrb	r3, [r3, #7]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d102      	bne.n	800f6a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	73fb      	strb	r3, [r7, #15]
 800f6a2:	e008      	b.n	800f6b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	79db      	ldrb	r3, [r3, #7]
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d102      	bne.n	800f6b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	73fb      	strb	r3, [r7, #15]
 800f6b0:	e001      	b.n	800f6b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f6b2:	f7f3 fe61 	bl	8003378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f6bc:	7bfa      	ldrb	r2, [r7, #15]
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fe fcb1 	bl	800e028 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fc58 	bl	800df82 <USBD_LL_Reset>
}
 800f6d2:	bf00      	nop
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
	...

0800f6dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fe fcac 	bl	800e048 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	6812      	ldr	r2, [r2, #0]
 800f6fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f702:	f043 0301 	orr.w	r3, r3, #1
 800f706:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	7adb      	ldrb	r3, [r3, #11]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d005      	beq.n	800f71c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f710:	4b04      	ldr	r3, [pc, #16]	@ (800f724 <HAL_PCD_SuspendCallback+0x48>)
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	4a03      	ldr	r2, [pc, #12]	@ (800f724 <HAL_PCD_SuspendCallback+0x48>)
 800f716:	f043 0306 	orr.w	r3, r3, #6
 800f71a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	e000ed00 	.word	0xe000ed00

0800f728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fca2 	bl	800e080 <USBD_LL_Resume>
}
 800f73c:	bf00      	nop
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	460b      	mov	r3, r1
 800f74e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f756:	78fa      	ldrb	r2, [r7, #3]
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fe fcfa 	bl	800e154 <USBD_LL_IsoOUTIncomplete>
}
 800f760:	bf00      	nop
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	460b      	mov	r3, r1
 800f772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f77a:	78fa      	ldrb	r2, [r7, #3]
 800f77c:	4611      	mov	r1, r2
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fe fcb6 	bl	800e0f0 <USBD_LL_IsoINIncomplete>
}
 800f784:	bf00      	nop
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fe fd0c 	bl	800e1b8 <USBD_LL_DevConnected>
}
 800f7a0:	bf00      	nop
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe fd09 	bl	800e1ce <USBD_LL_DevDisconnected>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d13f      	bne.n	800f854 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f7d4:	4a22      	ldr	r2, [pc, #136]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a20      	ldr	r2, [pc, #128]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f7e4:	4b1e      	ldr	r3, [pc, #120]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f7ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7ee:	2206      	movs	r2, #6
 800f7f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f7f8:	4b19      	ldr	r3, [pc, #100]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f7fe:	4b18      	ldr	r3, [pc, #96]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f800:	2202      	movs	r2, #2
 800f802:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f804:	4b16      	ldr	r3, [pc, #88]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f806:	2200      	movs	r2, #0
 800f808:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f80a:	4b15      	ldr	r3, [pc, #84]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f810:	4b13      	ldr	r3, [pc, #76]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f812:	2200      	movs	r2, #0
 800f814:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f816:	4b12      	ldr	r3, [pc, #72]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f818:	2200      	movs	r2, #0
 800f81a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f81c:	4b10      	ldr	r3, [pc, #64]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f81e:	2200      	movs	r2, #0
 800f820:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f822:	4b0f      	ldr	r3, [pc, #60]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f824:	2200      	movs	r2, #0
 800f826:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f828:	480d      	ldr	r0, [pc, #52]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f82a:	f7f6 f868 	bl	80058fe <HAL_PCD_Init>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800f834:	f7f3 fda0 	bl	8003378 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f838:	2180      	movs	r1, #128	@ 0x80
 800f83a:	4809      	ldr	r0, [pc, #36]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f83c:	f7f7 fab5 	bl	8006daa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f840:	2240      	movs	r2, #64	@ 0x40
 800f842:	2100      	movs	r1, #0
 800f844:	4806      	ldr	r0, [pc, #24]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f846:	f7f7 fa69 	bl	8006d1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f84a:	2280      	movs	r2, #128	@ 0x80
 800f84c:	2101      	movs	r1, #1
 800f84e:	4804      	ldr	r0, [pc, #16]	@ (800f860 <USBD_LL_Init+0x9c>)
 800f850:	f7f7 fa64 	bl	8006d1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3708      	adds	r7, #8
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20001dc8 	.word	0x20001dc8

0800f864 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7f6 f955 	bl	8005b2a <HAL_PCD_Start>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	4618      	mov	r0, r3
 800f888:	f000 f97e 	bl	800fb88 <USBD_Get_USB_Status>
 800f88c:	4603      	mov	r3, r0
 800f88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f890:	7bbb      	ldrb	r3, [r7, #14]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b084      	sub	sp, #16
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	4608      	mov	r0, r1
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	70fb      	strb	r3, [r7, #3]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70bb      	strb	r3, [r7, #2]
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f8c2:	78bb      	ldrb	r3, [r7, #2]
 800f8c4:	883a      	ldrh	r2, [r7, #0]
 800f8c6:	78f9      	ldrb	r1, [r7, #3]
 800f8c8:	f7f6 fe43 	bl	8006552 <HAL_PCD_EP_Open>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 f958 	bl	800fb88 <USBD_Get_USB_Status>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f900:	78fa      	ldrb	r2, [r7, #3]
 800f902:	4611      	mov	r1, r2
 800f904:	4618      	mov	r0, r3
 800f906:	f7f6 fe8e 	bl	8006626 <HAL_PCD_EP_Close>
 800f90a:	4603      	mov	r3, r0
 800f90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	4618      	mov	r0, r3
 800f912:	f000 f939 	bl	800fb88 <USBD_Get_USB_Status>
 800f916:	4603      	mov	r3, r0
 800f918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	460b      	mov	r3, r1
 800f92e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f934:	2300      	movs	r3, #0
 800f936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f93e:	78fa      	ldrb	r2, [r7, #3]
 800f940:	4611      	mov	r1, r2
 800f942:	4618      	mov	r0, r3
 800f944:	f7f6 ff46 	bl	80067d4 <HAL_PCD_EP_SetStall>
 800f948:	4603      	mov	r3, r0
 800f94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	4618      	mov	r0, r3
 800f950:	f000 f91a 	bl	800fb88 <USBD_Get_USB_Status>
 800f954:	4603      	mov	r3, r0
 800f956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f958:	7bbb      	ldrb	r3, [r7, #14]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b084      	sub	sp, #16
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f96e:	2300      	movs	r3, #0
 800f970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f7f6 ff8a 	bl	800689a <HAL_PCD_EP_ClrStall>
 800f986:	4603      	mov	r3, r0
 800f988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f8fb 	bl	800fb88 <USBD_Get_USB_Status>
 800f992:	4603      	mov	r3, r0
 800f994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f996:	7bbb      	ldrb	r3, [r7, #14]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f9b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	da0b      	bge.n	800f9d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9bc:	78fb      	ldrb	r3, [r7, #3]
 800f9be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9c2:	68f9      	ldr	r1, [r7, #12]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	00db      	lsls	r3, r3, #3
 800f9c8:	4413      	add	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	440b      	add	r3, r1
 800f9ce:	3316      	adds	r3, #22
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	e00b      	b.n	800f9ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9da:	68f9      	ldr	r1, [r7, #12]
 800f9dc:	4613      	mov	r3, r2
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	4413      	add	r3, r2
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	440b      	add	r3, r1
 800f9e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f9ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa12:	78fa      	ldrb	r2, [r7, #3]
 800fa14:	4611      	mov	r1, r2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f6 fd77 	bl	800650a <HAL_PCD_SetAddress>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa20:	7bfb      	ldrb	r3, [r7, #15]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 f8b0 	bl	800fb88 <USBD_Get_USB_Status>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b086      	sub	sp, #24
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	607a      	str	r2, [r7, #4]
 800fa40:	603b      	str	r3, [r7, #0]
 800fa42:	460b      	mov	r3, r1
 800fa44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fa54:	7af9      	ldrb	r1, [r7, #11]
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	f7f6 fe81 	bl	8006760 <HAL_PCD_EP_Transmit>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa62:	7dfb      	ldrb	r3, [r7, #23]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f000 f88f 	bl	800fb88 <USBD_Get_USB_Status>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3718      	adds	r7, #24
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	607a      	str	r2, [r7, #4]
 800fa82:	603b      	str	r3, [r7, #0]
 800fa84:	460b      	mov	r3, r1
 800fa86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fa96:	7af9      	ldrb	r1, [r7, #11]
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	f7f6 fe0d 	bl	80066ba <HAL_PCD_EP_Receive>
 800faa0:	4603      	mov	r3, r0
 800faa2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 f86e 	bl	800fb88 <USBD_Get_USB_Status>
 800faac:	4603      	mov	r3, r0
 800faae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fab0:	7dbb      	ldrb	r3, [r7, #22]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	460b      	mov	r3, r1
 800fac4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800facc:	78fa      	ldrb	r2, [r7, #3]
 800face:	4611      	mov	r1, r2
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f6 fe2d 	bl	8006730 <HAL_PCD_EP_GetRxCount>
 800fad6:	4603      	mov	r3, r0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	460b      	mov	r3, r1
 800faea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800faec:	78fb      	ldrb	r3, [r7, #3]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d002      	beq.n	800faf8 <HAL_PCDEx_LPM_Callback+0x18>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d01f      	beq.n	800fb36 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800faf6:	e03b      	b.n	800fb70 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	7adb      	ldrb	r3, [r3, #11]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d007      	beq.n	800fb10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fb00:	f000 f83c 	bl	800fb7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb04:	4b1c      	ldr	r3, [pc, #112]	@ (800fb78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	4a1b      	ldr	r2, [pc, #108]	@ (800fb78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fb0a:	f023 0306 	bic.w	r3, r3, #6
 800fb0e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	6812      	ldr	r2, [r2, #0]
 800fb1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb22:	f023 0301 	bic.w	r3, r3, #1
 800fb26:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe faa6 	bl	800e080 <USBD_LL_Resume>
    break;
 800fb34:	e01c      	b.n	800fb70 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	6812      	ldr	r2, [r2, #0]
 800fb44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb48:	f043 0301 	orr.w	r3, r3, #1
 800fb4c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fe fa77 	bl	800e048 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	7adb      	ldrb	r3, [r3, #11]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d005      	beq.n	800fb6e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb62:	4b05      	ldr	r3, [pc, #20]	@ (800fb78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	4a04      	ldr	r2, [pc, #16]	@ (800fb78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fb68:	f043 0306 	orr.w	r3, r3, #6
 800fb6c:	6113      	str	r3, [r2, #16]
    break;
 800fb6e:	bf00      	nop
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	e000ed00 	.word	0xe000ed00

0800fb7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fb80:	f7f2 fffc 	bl	8002b7c <SystemClock_Config>
}
 800fb84:	bf00      	nop
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb92:	2300      	movs	r3, #0
 800fb94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb96:	79fb      	ldrb	r3, [r7, #7]
 800fb98:	2b03      	cmp	r3, #3
 800fb9a:	d817      	bhi.n	800fbcc <USBD_Get_USB_Status+0x44>
 800fb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800fba4 <USBD_Get_USB_Status+0x1c>)
 800fb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba2:	bf00      	nop
 800fba4:	0800fbb5 	.word	0x0800fbb5
 800fba8:	0800fbbb 	.word	0x0800fbbb
 800fbac:	0800fbc1 	.word	0x0800fbc1
 800fbb0:	0800fbc7 	.word	0x0800fbc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb8:	e00b      	b.n	800fbd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800fbbe:	e008      	b.n	800fbd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbc4:	e005      	b.n	800fbd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	73fb      	strb	r3, [r7, #15]
    break;
 800fbca:	e002      	b.n	800fbd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	73fb      	strb	r3, [r7, #15]
    break;
 800fbd0:	bf00      	nop
  }
  return usb_status;
 800fbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3714      	adds	r7, #20
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <malloc>:
 800fbe0:	4b02      	ldr	r3, [pc, #8]	@ (800fbec <malloc+0xc>)
 800fbe2:	4601      	mov	r1, r0
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	f000 b82d 	b.w	800fc44 <_malloc_r>
 800fbea:	bf00      	nop
 800fbec:	20000118 	.word	0x20000118

0800fbf0 <free>:
 800fbf0:	4b02      	ldr	r3, [pc, #8]	@ (800fbfc <free+0xc>)
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	f001 bd03 	b.w	8011600 <_free_r>
 800fbfa:	bf00      	nop
 800fbfc:	20000118 	.word	0x20000118

0800fc00 <sbrk_aligned>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	4e0f      	ldr	r6, [pc, #60]	@ (800fc40 <sbrk_aligned+0x40>)
 800fc04:	460c      	mov	r4, r1
 800fc06:	6831      	ldr	r1, [r6, #0]
 800fc08:	4605      	mov	r5, r0
 800fc0a:	b911      	cbnz	r1, 800fc12 <sbrk_aligned+0x12>
 800fc0c:	f000 fe42 	bl	8010894 <_sbrk_r>
 800fc10:	6030      	str	r0, [r6, #0]
 800fc12:	4621      	mov	r1, r4
 800fc14:	4628      	mov	r0, r5
 800fc16:	f000 fe3d 	bl	8010894 <_sbrk_r>
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	d103      	bne.n	800fc26 <sbrk_aligned+0x26>
 800fc1e:	f04f 34ff 	mov.w	r4, #4294967295
 800fc22:	4620      	mov	r0, r4
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	1cc4      	adds	r4, r0, #3
 800fc28:	f024 0403 	bic.w	r4, r4, #3
 800fc2c:	42a0      	cmp	r0, r4
 800fc2e:	d0f8      	beq.n	800fc22 <sbrk_aligned+0x22>
 800fc30:	1a21      	subs	r1, r4, r0
 800fc32:	4628      	mov	r0, r5
 800fc34:	f000 fe2e 	bl	8010894 <_sbrk_r>
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d1f2      	bne.n	800fc22 <sbrk_aligned+0x22>
 800fc3c:	e7ef      	b.n	800fc1e <sbrk_aligned+0x1e>
 800fc3e:	bf00      	nop
 800fc40:	200022a8 	.word	0x200022a8

0800fc44 <_malloc_r>:
 800fc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc48:	1ccd      	adds	r5, r1, #3
 800fc4a:	f025 0503 	bic.w	r5, r5, #3
 800fc4e:	3508      	adds	r5, #8
 800fc50:	2d0c      	cmp	r5, #12
 800fc52:	bf38      	it	cc
 800fc54:	250c      	movcc	r5, #12
 800fc56:	2d00      	cmp	r5, #0
 800fc58:	4606      	mov	r6, r0
 800fc5a:	db01      	blt.n	800fc60 <_malloc_r+0x1c>
 800fc5c:	42a9      	cmp	r1, r5
 800fc5e:	d904      	bls.n	800fc6a <_malloc_r+0x26>
 800fc60:	230c      	movs	r3, #12
 800fc62:	6033      	str	r3, [r6, #0]
 800fc64:	2000      	movs	r0, #0
 800fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd40 <_malloc_r+0xfc>
 800fc6e:	f000 f869 	bl	800fd44 <__malloc_lock>
 800fc72:	f8d8 3000 	ldr.w	r3, [r8]
 800fc76:	461c      	mov	r4, r3
 800fc78:	bb44      	cbnz	r4, 800fccc <_malloc_r+0x88>
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	f7ff ffbf 	bl	800fc00 <sbrk_aligned>
 800fc82:	1c43      	adds	r3, r0, #1
 800fc84:	4604      	mov	r4, r0
 800fc86:	d158      	bne.n	800fd3a <_malloc_r+0xf6>
 800fc88:	f8d8 4000 	ldr.w	r4, [r8]
 800fc8c:	4627      	mov	r7, r4
 800fc8e:	2f00      	cmp	r7, #0
 800fc90:	d143      	bne.n	800fd1a <_malloc_r+0xd6>
 800fc92:	2c00      	cmp	r4, #0
 800fc94:	d04b      	beq.n	800fd2e <_malloc_r+0xea>
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	4639      	mov	r1, r7
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	eb04 0903 	add.w	r9, r4, r3
 800fca0:	f000 fdf8 	bl	8010894 <_sbrk_r>
 800fca4:	4581      	cmp	r9, r0
 800fca6:	d142      	bne.n	800fd2e <_malloc_r+0xea>
 800fca8:	6821      	ldr	r1, [r4, #0]
 800fcaa:	1a6d      	subs	r5, r5, r1
 800fcac:	4629      	mov	r1, r5
 800fcae:	4630      	mov	r0, r6
 800fcb0:	f7ff ffa6 	bl	800fc00 <sbrk_aligned>
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	d03a      	beq.n	800fd2e <_malloc_r+0xea>
 800fcb8:	6823      	ldr	r3, [r4, #0]
 800fcba:	442b      	add	r3, r5
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	f8d8 3000 	ldr.w	r3, [r8]
 800fcc2:	685a      	ldr	r2, [r3, #4]
 800fcc4:	bb62      	cbnz	r2, 800fd20 <_malloc_r+0xdc>
 800fcc6:	f8c8 7000 	str.w	r7, [r8]
 800fcca:	e00f      	b.n	800fcec <_malloc_r+0xa8>
 800fccc:	6822      	ldr	r2, [r4, #0]
 800fcce:	1b52      	subs	r2, r2, r5
 800fcd0:	d420      	bmi.n	800fd14 <_malloc_r+0xd0>
 800fcd2:	2a0b      	cmp	r2, #11
 800fcd4:	d917      	bls.n	800fd06 <_malloc_r+0xc2>
 800fcd6:	1961      	adds	r1, r4, r5
 800fcd8:	42a3      	cmp	r3, r4
 800fcda:	6025      	str	r5, [r4, #0]
 800fcdc:	bf18      	it	ne
 800fcde:	6059      	strne	r1, [r3, #4]
 800fce0:	6863      	ldr	r3, [r4, #4]
 800fce2:	bf08      	it	eq
 800fce4:	f8c8 1000 	streq.w	r1, [r8]
 800fce8:	5162      	str	r2, [r4, r5]
 800fcea:	604b      	str	r3, [r1, #4]
 800fcec:	4630      	mov	r0, r6
 800fcee:	f000 f82f 	bl	800fd50 <__malloc_unlock>
 800fcf2:	f104 000b 	add.w	r0, r4, #11
 800fcf6:	1d23      	adds	r3, r4, #4
 800fcf8:	f020 0007 	bic.w	r0, r0, #7
 800fcfc:	1ac2      	subs	r2, r0, r3
 800fcfe:	bf1c      	itt	ne
 800fd00:	1a1b      	subne	r3, r3, r0
 800fd02:	50a3      	strne	r3, [r4, r2]
 800fd04:	e7af      	b.n	800fc66 <_malloc_r+0x22>
 800fd06:	6862      	ldr	r2, [r4, #4]
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	bf0c      	ite	eq
 800fd0c:	f8c8 2000 	streq.w	r2, [r8]
 800fd10:	605a      	strne	r2, [r3, #4]
 800fd12:	e7eb      	b.n	800fcec <_malloc_r+0xa8>
 800fd14:	4623      	mov	r3, r4
 800fd16:	6864      	ldr	r4, [r4, #4]
 800fd18:	e7ae      	b.n	800fc78 <_malloc_r+0x34>
 800fd1a:	463c      	mov	r4, r7
 800fd1c:	687f      	ldr	r7, [r7, #4]
 800fd1e:	e7b6      	b.n	800fc8e <_malloc_r+0x4a>
 800fd20:	461a      	mov	r2, r3
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	42a3      	cmp	r3, r4
 800fd26:	d1fb      	bne.n	800fd20 <_malloc_r+0xdc>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	6053      	str	r3, [r2, #4]
 800fd2c:	e7de      	b.n	800fcec <_malloc_r+0xa8>
 800fd2e:	230c      	movs	r3, #12
 800fd30:	6033      	str	r3, [r6, #0]
 800fd32:	4630      	mov	r0, r6
 800fd34:	f000 f80c 	bl	800fd50 <__malloc_unlock>
 800fd38:	e794      	b.n	800fc64 <_malloc_r+0x20>
 800fd3a:	6005      	str	r5, [r0, #0]
 800fd3c:	e7d6      	b.n	800fcec <_malloc_r+0xa8>
 800fd3e:	bf00      	nop
 800fd40:	200022ac 	.word	0x200022ac

0800fd44 <__malloc_lock>:
 800fd44:	4801      	ldr	r0, [pc, #4]	@ (800fd4c <__malloc_lock+0x8>)
 800fd46:	f000 bdf2 	b.w	801092e <__retarget_lock_acquire_recursive>
 800fd4a:	bf00      	nop
 800fd4c:	200023f0 	.word	0x200023f0

0800fd50 <__malloc_unlock>:
 800fd50:	4801      	ldr	r0, [pc, #4]	@ (800fd58 <__malloc_unlock+0x8>)
 800fd52:	f000 bded 	b.w	8010930 <__retarget_lock_release_recursive>
 800fd56:	bf00      	nop
 800fd58:	200023f0 	.word	0x200023f0

0800fd5c <__cvt>:
 800fd5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd60:	ec57 6b10 	vmov	r6, r7, d0
 800fd64:	2f00      	cmp	r7, #0
 800fd66:	460c      	mov	r4, r1
 800fd68:	4619      	mov	r1, r3
 800fd6a:	463b      	mov	r3, r7
 800fd6c:	bfbb      	ittet	lt
 800fd6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fd72:	461f      	movlt	r7, r3
 800fd74:	2300      	movge	r3, #0
 800fd76:	232d      	movlt	r3, #45	@ 0x2d
 800fd78:	700b      	strb	r3, [r1, #0]
 800fd7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fd80:	4691      	mov	r9, r2
 800fd82:	f023 0820 	bic.w	r8, r3, #32
 800fd86:	bfbc      	itt	lt
 800fd88:	4632      	movlt	r2, r6
 800fd8a:	4616      	movlt	r6, r2
 800fd8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd90:	d005      	beq.n	800fd9e <__cvt+0x42>
 800fd92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fd96:	d100      	bne.n	800fd9a <__cvt+0x3e>
 800fd98:	3401      	adds	r4, #1
 800fd9a:	2102      	movs	r1, #2
 800fd9c:	e000      	b.n	800fda0 <__cvt+0x44>
 800fd9e:	2103      	movs	r1, #3
 800fda0:	ab03      	add	r3, sp, #12
 800fda2:	9301      	str	r3, [sp, #4]
 800fda4:	ab02      	add	r3, sp, #8
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	ec47 6b10 	vmov	d0, r6, r7
 800fdac:	4653      	mov	r3, sl
 800fdae:	4622      	mov	r2, r4
 800fdb0:	f000 fe56 	bl	8010a60 <_dtoa_r>
 800fdb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fdb8:	4605      	mov	r5, r0
 800fdba:	d119      	bne.n	800fdf0 <__cvt+0x94>
 800fdbc:	f019 0f01 	tst.w	r9, #1
 800fdc0:	d00e      	beq.n	800fde0 <__cvt+0x84>
 800fdc2:	eb00 0904 	add.w	r9, r0, r4
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	2300      	movs	r3, #0
 800fdca:	4630      	mov	r0, r6
 800fdcc:	4639      	mov	r1, r7
 800fdce:	f7f0 fea3 	bl	8000b18 <__aeabi_dcmpeq>
 800fdd2:	b108      	cbz	r0, 800fdd8 <__cvt+0x7c>
 800fdd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdd8:	2230      	movs	r2, #48	@ 0x30
 800fdda:	9b03      	ldr	r3, [sp, #12]
 800fddc:	454b      	cmp	r3, r9
 800fdde:	d31e      	bcc.n	800fe1e <__cvt+0xc2>
 800fde0:	9b03      	ldr	r3, [sp, #12]
 800fde2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fde4:	1b5b      	subs	r3, r3, r5
 800fde6:	4628      	mov	r0, r5
 800fde8:	6013      	str	r3, [r2, #0]
 800fdea:	b004      	add	sp, #16
 800fdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fdf4:	eb00 0904 	add.w	r9, r0, r4
 800fdf8:	d1e5      	bne.n	800fdc6 <__cvt+0x6a>
 800fdfa:	7803      	ldrb	r3, [r0, #0]
 800fdfc:	2b30      	cmp	r3, #48	@ 0x30
 800fdfe:	d10a      	bne.n	800fe16 <__cvt+0xba>
 800fe00:	2200      	movs	r2, #0
 800fe02:	2300      	movs	r3, #0
 800fe04:	4630      	mov	r0, r6
 800fe06:	4639      	mov	r1, r7
 800fe08:	f7f0 fe86 	bl	8000b18 <__aeabi_dcmpeq>
 800fe0c:	b918      	cbnz	r0, 800fe16 <__cvt+0xba>
 800fe0e:	f1c4 0401 	rsb	r4, r4, #1
 800fe12:	f8ca 4000 	str.w	r4, [sl]
 800fe16:	f8da 3000 	ldr.w	r3, [sl]
 800fe1a:	4499      	add	r9, r3
 800fe1c:	e7d3      	b.n	800fdc6 <__cvt+0x6a>
 800fe1e:	1c59      	adds	r1, r3, #1
 800fe20:	9103      	str	r1, [sp, #12]
 800fe22:	701a      	strb	r2, [r3, #0]
 800fe24:	e7d9      	b.n	800fdda <__cvt+0x7e>

0800fe26 <__exponent>:
 800fe26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe28:	2900      	cmp	r1, #0
 800fe2a:	bfba      	itte	lt
 800fe2c:	4249      	neglt	r1, r1
 800fe2e:	232d      	movlt	r3, #45	@ 0x2d
 800fe30:	232b      	movge	r3, #43	@ 0x2b
 800fe32:	2909      	cmp	r1, #9
 800fe34:	7002      	strb	r2, [r0, #0]
 800fe36:	7043      	strb	r3, [r0, #1]
 800fe38:	dd29      	ble.n	800fe8e <__exponent+0x68>
 800fe3a:	f10d 0307 	add.w	r3, sp, #7
 800fe3e:	461d      	mov	r5, r3
 800fe40:	270a      	movs	r7, #10
 800fe42:	461a      	mov	r2, r3
 800fe44:	fbb1 f6f7 	udiv	r6, r1, r7
 800fe48:	fb07 1416 	mls	r4, r7, r6, r1
 800fe4c:	3430      	adds	r4, #48	@ 0x30
 800fe4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fe52:	460c      	mov	r4, r1
 800fe54:	2c63      	cmp	r4, #99	@ 0x63
 800fe56:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe5a:	4631      	mov	r1, r6
 800fe5c:	dcf1      	bgt.n	800fe42 <__exponent+0x1c>
 800fe5e:	3130      	adds	r1, #48	@ 0x30
 800fe60:	1e94      	subs	r4, r2, #2
 800fe62:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fe66:	1c41      	adds	r1, r0, #1
 800fe68:	4623      	mov	r3, r4
 800fe6a:	42ab      	cmp	r3, r5
 800fe6c:	d30a      	bcc.n	800fe84 <__exponent+0x5e>
 800fe6e:	f10d 0309 	add.w	r3, sp, #9
 800fe72:	1a9b      	subs	r3, r3, r2
 800fe74:	42ac      	cmp	r4, r5
 800fe76:	bf88      	it	hi
 800fe78:	2300      	movhi	r3, #0
 800fe7a:	3302      	adds	r3, #2
 800fe7c:	4403      	add	r3, r0
 800fe7e:	1a18      	subs	r0, r3, r0
 800fe80:	b003      	add	sp, #12
 800fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe84:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fe88:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fe8c:	e7ed      	b.n	800fe6a <__exponent+0x44>
 800fe8e:	2330      	movs	r3, #48	@ 0x30
 800fe90:	3130      	adds	r1, #48	@ 0x30
 800fe92:	7083      	strb	r3, [r0, #2]
 800fe94:	70c1      	strb	r1, [r0, #3]
 800fe96:	1d03      	adds	r3, r0, #4
 800fe98:	e7f1      	b.n	800fe7e <__exponent+0x58>
	...

0800fe9c <_printf_float>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	b08d      	sub	sp, #52	@ 0x34
 800fea2:	460c      	mov	r4, r1
 800fea4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fea8:	4616      	mov	r6, r2
 800feaa:	461f      	mov	r7, r3
 800feac:	4605      	mov	r5, r0
 800feae:	f000 fcb9 	bl	8010824 <_localeconv_r>
 800feb2:	6803      	ldr	r3, [r0, #0]
 800feb4:	9304      	str	r3, [sp, #16]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7f0 fa02 	bl	80002c0 <strlen>
 800febc:	2300      	movs	r3, #0
 800febe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fec0:	f8d8 3000 	ldr.w	r3, [r8]
 800fec4:	9005      	str	r0, [sp, #20]
 800fec6:	3307      	adds	r3, #7
 800fec8:	f023 0307 	bic.w	r3, r3, #7
 800fecc:	f103 0208 	add.w	r2, r3, #8
 800fed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fed4:	f8d4 b000 	ldr.w	fp, [r4]
 800fed8:	f8c8 2000 	str.w	r2, [r8]
 800fedc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fee4:	9307      	str	r3, [sp, #28]
 800fee6:	f8cd 8018 	str.w	r8, [sp, #24]
 800feea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800feee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fef2:	4b9c      	ldr	r3, [pc, #624]	@ (8010164 <_printf_float+0x2c8>)
 800fef4:	f04f 32ff 	mov.w	r2, #4294967295
 800fef8:	f7f0 fe40 	bl	8000b7c <__aeabi_dcmpun>
 800fefc:	bb70      	cbnz	r0, 800ff5c <_printf_float+0xc0>
 800fefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff02:	4b98      	ldr	r3, [pc, #608]	@ (8010164 <_printf_float+0x2c8>)
 800ff04:	f04f 32ff 	mov.w	r2, #4294967295
 800ff08:	f7f0 fe1a 	bl	8000b40 <__aeabi_dcmple>
 800ff0c:	bb30      	cbnz	r0, 800ff5c <_printf_float+0xc0>
 800ff0e:	2200      	movs	r2, #0
 800ff10:	2300      	movs	r3, #0
 800ff12:	4640      	mov	r0, r8
 800ff14:	4649      	mov	r1, r9
 800ff16:	f7f0 fe09 	bl	8000b2c <__aeabi_dcmplt>
 800ff1a:	b110      	cbz	r0, 800ff22 <_printf_float+0x86>
 800ff1c:	232d      	movs	r3, #45	@ 0x2d
 800ff1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff22:	4a91      	ldr	r2, [pc, #580]	@ (8010168 <_printf_float+0x2cc>)
 800ff24:	4b91      	ldr	r3, [pc, #580]	@ (801016c <_printf_float+0x2d0>)
 800ff26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ff2a:	bf8c      	ite	hi
 800ff2c:	4690      	movhi	r8, r2
 800ff2e:	4698      	movls	r8, r3
 800ff30:	2303      	movs	r3, #3
 800ff32:	6123      	str	r3, [r4, #16]
 800ff34:	f02b 0304 	bic.w	r3, fp, #4
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	f04f 0900 	mov.w	r9, #0
 800ff3e:	9700      	str	r7, [sp, #0]
 800ff40:	4633      	mov	r3, r6
 800ff42:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ff44:	4621      	mov	r1, r4
 800ff46:	4628      	mov	r0, r5
 800ff48:	f000 f9d2 	bl	80102f0 <_printf_common>
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	f040 808d 	bne.w	801006c <_printf_float+0x1d0>
 800ff52:	f04f 30ff 	mov.w	r0, #4294967295
 800ff56:	b00d      	add	sp, #52	@ 0x34
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	464b      	mov	r3, r9
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	f7f0 fe0a 	bl	8000b7c <__aeabi_dcmpun>
 800ff68:	b140      	cbz	r0, 800ff7c <_printf_float+0xe0>
 800ff6a:	464b      	mov	r3, r9
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	bfbc      	itt	lt
 800ff70:	232d      	movlt	r3, #45	@ 0x2d
 800ff72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ff76:	4a7e      	ldr	r2, [pc, #504]	@ (8010170 <_printf_float+0x2d4>)
 800ff78:	4b7e      	ldr	r3, [pc, #504]	@ (8010174 <_printf_float+0x2d8>)
 800ff7a:	e7d4      	b.n	800ff26 <_printf_float+0x8a>
 800ff7c:	6863      	ldr	r3, [r4, #4]
 800ff7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ff82:	9206      	str	r2, [sp, #24]
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	d13b      	bne.n	8010000 <_printf_float+0x164>
 800ff88:	2306      	movs	r3, #6
 800ff8a:	6063      	str	r3, [r4, #4]
 800ff8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ff90:	2300      	movs	r3, #0
 800ff92:	6022      	str	r2, [r4, #0]
 800ff94:	9303      	str	r3, [sp, #12]
 800ff96:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff98:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ff9c:	ab09      	add	r3, sp, #36	@ 0x24
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	6861      	ldr	r1, [r4, #4]
 800ffa2:	ec49 8b10 	vmov	d0, r8, r9
 800ffa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f7ff fed6 	bl	800fd5c <__cvt>
 800ffb0:	9b06      	ldr	r3, [sp, #24]
 800ffb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffb4:	2b47      	cmp	r3, #71	@ 0x47
 800ffb6:	4680      	mov	r8, r0
 800ffb8:	d129      	bne.n	801000e <_printf_float+0x172>
 800ffba:	1cc8      	adds	r0, r1, #3
 800ffbc:	db02      	blt.n	800ffc4 <_printf_float+0x128>
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	4299      	cmp	r1, r3
 800ffc2:	dd41      	ble.n	8010048 <_printf_float+0x1ac>
 800ffc4:	f1aa 0a02 	sub.w	sl, sl, #2
 800ffc8:	fa5f fa8a 	uxtb.w	sl, sl
 800ffcc:	3901      	subs	r1, #1
 800ffce:	4652      	mov	r2, sl
 800ffd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ffd4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ffd6:	f7ff ff26 	bl	800fe26 <__exponent>
 800ffda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ffdc:	1813      	adds	r3, r2, r0
 800ffde:	2a01      	cmp	r2, #1
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	6123      	str	r3, [r4, #16]
 800ffe4:	dc02      	bgt.n	800ffec <_printf_float+0x150>
 800ffe6:	6822      	ldr	r2, [r4, #0]
 800ffe8:	07d2      	lsls	r2, r2, #31
 800ffea:	d501      	bpl.n	800fff0 <_printf_float+0x154>
 800ffec:	3301      	adds	r3, #1
 800ffee:	6123      	str	r3, [r4, #16]
 800fff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d0a2      	beq.n	800ff3e <_printf_float+0xa2>
 800fff8:	232d      	movs	r3, #45	@ 0x2d
 800fffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fffe:	e79e      	b.n	800ff3e <_printf_float+0xa2>
 8010000:	9a06      	ldr	r2, [sp, #24]
 8010002:	2a47      	cmp	r2, #71	@ 0x47
 8010004:	d1c2      	bne.n	800ff8c <_printf_float+0xf0>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1c0      	bne.n	800ff8c <_printf_float+0xf0>
 801000a:	2301      	movs	r3, #1
 801000c:	e7bd      	b.n	800ff8a <_printf_float+0xee>
 801000e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010012:	d9db      	bls.n	800ffcc <_printf_float+0x130>
 8010014:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010018:	d118      	bne.n	801004c <_printf_float+0x1b0>
 801001a:	2900      	cmp	r1, #0
 801001c:	6863      	ldr	r3, [r4, #4]
 801001e:	dd0b      	ble.n	8010038 <_printf_float+0x19c>
 8010020:	6121      	str	r1, [r4, #16]
 8010022:	b913      	cbnz	r3, 801002a <_printf_float+0x18e>
 8010024:	6822      	ldr	r2, [r4, #0]
 8010026:	07d0      	lsls	r0, r2, #31
 8010028:	d502      	bpl.n	8010030 <_printf_float+0x194>
 801002a:	3301      	adds	r3, #1
 801002c:	440b      	add	r3, r1
 801002e:	6123      	str	r3, [r4, #16]
 8010030:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010032:	f04f 0900 	mov.w	r9, #0
 8010036:	e7db      	b.n	800fff0 <_printf_float+0x154>
 8010038:	b913      	cbnz	r3, 8010040 <_printf_float+0x1a4>
 801003a:	6822      	ldr	r2, [r4, #0]
 801003c:	07d2      	lsls	r2, r2, #31
 801003e:	d501      	bpl.n	8010044 <_printf_float+0x1a8>
 8010040:	3302      	adds	r3, #2
 8010042:	e7f4      	b.n	801002e <_printf_float+0x192>
 8010044:	2301      	movs	r3, #1
 8010046:	e7f2      	b.n	801002e <_printf_float+0x192>
 8010048:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801004c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801004e:	4299      	cmp	r1, r3
 8010050:	db05      	blt.n	801005e <_printf_float+0x1c2>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	6121      	str	r1, [r4, #16]
 8010056:	07d8      	lsls	r0, r3, #31
 8010058:	d5ea      	bpl.n	8010030 <_printf_float+0x194>
 801005a:	1c4b      	adds	r3, r1, #1
 801005c:	e7e7      	b.n	801002e <_printf_float+0x192>
 801005e:	2900      	cmp	r1, #0
 8010060:	bfd4      	ite	le
 8010062:	f1c1 0202 	rsble	r2, r1, #2
 8010066:	2201      	movgt	r2, #1
 8010068:	4413      	add	r3, r2
 801006a:	e7e0      	b.n	801002e <_printf_float+0x192>
 801006c:	6823      	ldr	r3, [r4, #0]
 801006e:	055a      	lsls	r2, r3, #21
 8010070:	d407      	bmi.n	8010082 <_printf_float+0x1e6>
 8010072:	6923      	ldr	r3, [r4, #16]
 8010074:	4642      	mov	r2, r8
 8010076:	4631      	mov	r1, r6
 8010078:	4628      	mov	r0, r5
 801007a:	47b8      	blx	r7
 801007c:	3001      	adds	r0, #1
 801007e:	d12b      	bne.n	80100d8 <_printf_float+0x23c>
 8010080:	e767      	b.n	800ff52 <_printf_float+0xb6>
 8010082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010086:	f240 80dd 	bls.w	8010244 <_printf_float+0x3a8>
 801008a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801008e:	2200      	movs	r2, #0
 8010090:	2300      	movs	r3, #0
 8010092:	f7f0 fd41 	bl	8000b18 <__aeabi_dcmpeq>
 8010096:	2800      	cmp	r0, #0
 8010098:	d033      	beq.n	8010102 <_printf_float+0x266>
 801009a:	4a37      	ldr	r2, [pc, #220]	@ (8010178 <_printf_float+0x2dc>)
 801009c:	2301      	movs	r3, #1
 801009e:	4631      	mov	r1, r6
 80100a0:	4628      	mov	r0, r5
 80100a2:	47b8      	blx	r7
 80100a4:	3001      	adds	r0, #1
 80100a6:	f43f af54 	beq.w	800ff52 <_printf_float+0xb6>
 80100aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80100ae:	4543      	cmp	r3, r8
 80100b0:	db02      	blt.n	80100b8 <_printf_float+0x21c>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	07d8      	lsls	r0, r3, #31
 80100b6:	d50f      	bpl.n	80100d8 <_printf_float+0x23c>
 80100b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100bc:	4631      	mov	r1, r6
 80100be:	4628      	mov	r0, r5
 80100c0:	47b8      	blx	r7
 80100c2:	3001      	adds	r0, #1
 80100c4:	f43f af45 	beq.w	800ff52 <_printf_float+0xb6>
 80100c8:	f04f 0900 	mov.w	r9, #0
 80100cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80100d0:	f104 0a1a 	add.w	sl, r4, #26
 80100d4:	45c8      	cmp	r8, r9
 80100d6:	dc09      	bgt.n	80100ec <_printf_float+0x250>
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	079b      	lsls	r3, r3, #30
 80100dc:	f100 8103 	bmi.w	80102e6 <_printf_float+0x44a>
 80100e0:	68e0      	ldr	r0, [r4, #12]
 80100e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100e4:	4298      	cmp	r0, r3
 80100e6:	bfb8      	it	lt
 80100e8:	4618      	movlt	r0, r3
 80100ea:	e734      	b.n	800ff56 <_printf_float+0xba>
 80100ec:	2301      	movs	r3, #1
 80100ee:	4652      	mov	r2, sl
 80100f0:	4631      	mov	r1, r6
 80100f2:	4628      	mov	r0, r5
 80100f4:	47b8      	blx	r7
 80100f6:	3001      	adds	r0, #1
 80100f8:	f43f af2b 	beq.w	800ff52 <_printf_float+0xb6>
 80100fc:	f109 0901 	add.w	r9, r9, #1
 8010100:	e7e8      	b.n	80100d4 <_printf_float+0x238>
 8010102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010104:	2b00      	cmp	r3, #0
 8010106:	dc39      	bgt.n	801017c <_printf_float+0x2e0>
 8010108:	4a1b      	ldr	r2, [pc, #108]	@ (8010178 <_printf_float+0x2dc>)
 801010a:	2301      	movs	r3, #1
 801010c:	4631      	mov	r1, r6
 801010e:	4628      	mov	r0, r5
 8010110:	47b8      	blx	r7
 8010112:	3001      	adds	r0, #1
 8010114:	f43f af1d 	beq.w	800ff52 <_printf_float+0xb6>
 8010118:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801011c:	ea59 0303 	orrs.w	r3, r9, r3
 8010120:	d102      	bne.n	8010128 <_printf_float+0x28c>
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	07d9      	lsls	r1, r3, #31
 8010126:	d5d7      	bpl.n	80100d8 <_printf_float+0x23c>
 8010128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801012c:	4631      	mov	r1, r6
 801012e:	4628      	mov	r0, r5
 8010130:	47b8      	blx	r7
 8010132:	3001      	adds	r0, #1
 8010134:	f43f af0d 	beq.w	800ff52 <_printf_float+0xb6>
 8010138:	f04f 0a00 	mov.w	sl, #0
 801013c:	f104 0b1a 	add.w	fp, r4, #26
 8010140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010142:	425b      	negs	r3, r3
 8010144:	4553      	cmp	r3, sl
 8010146:	dc01      	bgt.n	801014c <_printf_float+0x2b0>
 8010148:	464b      	mov	r3, r9
 801014a:	e793      	b.n	8010074 <_printf_float+0x1d8>
 801014c:	2301      	movs	r3, #1
 801014e:	465a      	mov	r2, fp
 8010150:	4631      	mov	r1, r6
 8010152:	4628      	mov	r0, r5
 8010154:	47b8      	blx	r7
 8010156:	3001      	adds	r0, #1
 8010158:	f43f aefb 	beq.w	800ff52 <_printf_float+0xb6>
 801015c:	f10a 0a01 	add.w	sl, sl, #1
 8010160:	e7ee      	b.n	8010140 <_printf_float+0x2a4>
 8010162:	bf00      	nop
 8010164:	7fefffff 	.word	0x7fefffff
 8010168:	08012a74 	.word	0x08012a74
 801016c:	08012a70 	.word	0x08012a70
 8010170:	08012a7c 	.word	0x08012a7c
 8010174:	08012a78 	.word	0x08012a78
 8010178:	08012a80 	.word	0x08012a80
 801017c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801017e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010182:	4553      	cmp	r3, sl
 8010184:	bfa8      	it	ge
 8010186:	4653      	movge	r3, sl
 8010188:	2b00      	cmp	r3, #0
 801018a:	4699      	mov	r9, r3
 801018c:	dc36      	bgt.n	80101fc <_printf_float+0x360>
 801018e:	f04f 0b00 	mov.w	fp, #0
 8010192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010196:	f104 021a 	add.w	r2, r4, #26
 801019a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801019c:	9306      	str	r3, [sp, #24]
 801019e:	eba3 0309 	sub.w	r3, r3, r9
 80101a2:	455b      	cmp	r3, fp
 80101a4:	dc31      	bgt.n	801020a <_printf_float+0x36e>
 80101a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101a8:	459a      	cmp	sl, r3
 80101aa:	dc3a      	bgt.n	8010222 <_printf_float+0x386>
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	07da      	lsls	r2, r3, #31
 80101b0:	d437      	bmi.n	8010222 <_printf_float+0x386>
 80101b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101b4:	ebaa 0903 	sub.w	r9, sl, r3
 80101b8:	9b06      	ldr	r3, [sp, #24]
 80101ba:	ebaa 0303 	sub.w	r3, sl, r3
 80101be:	4599      	cmp	r9, r3
 80101c0:	bfa8      	it	ge
 80101c2:	4699      	movge	r9, r3
 80101c4:	f1b9 0f00 	cmp.w	r9, #0
 80101c8:	dc33      	bgt.n	8010232 <_printf_float+0x396>
 80101ca:	f04f 0800 	mov.w	r8, #0
 80101ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101d2:	f104 0b1a 	add.w	fp, r4, #26
 80101d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d8:	ebaa 0303 	sub.w	r3, sl, r3
 80101dc:	eba3 0309 	sub.w	r3, r3, r9
 80101e0:	4543      	cmp	r3, r8
 80101e2:	f77f af79 	ble.w	80100d8 <_printf_float+0x23c>
 80101e6:	2301      	movs	r3, #1
 80101e8:	465a      	mov	r2, fp
 80101ea:	4631      	mov	r1, r6
 80101ec:	4628      	mov	r0, r5
 80101ee:	47b8      	blx	r7
 80101f0:	3001      	adds	r0, #1
 80101f2:	f43f aeae 	beq.w	800ff52 <_printf_float+0xb6>
 80101f6:	f108 0801 	add.w	r8, r8, #1
 80101fa:	e7ec      	b.n	80101d6 <_printf_float+0x33a>
 80101fc:	4642      	mov	r2, r8
 80101fe:	4631      	mov	r1, r6
 8010200:	4628      	mov	r0, r5
 8010202:	47b8      	blx	r7
 8010204:	3001      	adds	r0, #1
 8010206:	d1c2      	bne.n	801018e <_printf_float+0x2f2>
 8010208:	e6a3      	b.n	800ff52 <_printf_float+0xb6>
 801020a:	2301      	movs	r3, #1
 801020c:	4631      	mov	r1, r6
 801020e:	4628      	mov	r0, r5
 8010210:	9206      	str	r2, [sp, #24]
 8010212:	47b8      	blx	r7
 8010214:	3001      	adds	r0, #1
 8010216:	f43f ae9c 	beq.w	800ff52 <_printf_float+0xb6>
 801021a:	9a06      	ldr	r2, [sp, #24]
 801021c:	f10b 0b01 	add.w	fp, fp, #1
 8010220:	e7bb      	b.n	801019a <_printf_float+0x2fe>
 8010222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010226:	4631      	mov	r1, r6
 8010228:	4628      	mov	r0, r5
 801022a:	47b8      	blx	r7
 801022c:	3001      	adds	r0, #1
 801022e:	d1c0      	bne.n	80101b2 <_printf_float+0x316>
 8010230:	e68f      	b.n	800ff52 <_printf_float+0xb6>
 8010232:	9a06      	ldr	r2, [sp, #24]
 8010234:	464b      	mov	r3, r9
 8010236:	4442      	add	r2, r8
 8010238:	4631      	mov	r1, r6
 801023a:	4628      	mov	r0, r5
 801023c:	47b8      	blx	r7
 801023e:	3001      	adds	r0, #1
 8010240:	d1c3      	bne.n	80101ca <_printf_float+0x32e>
 8010242:	e686      	b.n	800ff52 <_printf_float+0xb6>
 8010244:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010248:	f1ba 0f01 	cmp.w	sl, #1
 801024c:	dc01      	bgt.n	8010252 <_printf_float+0x3b6>
 801024e:	07db      	lsls	r3, r3, #31
 8010250:	d536      	bpl.n	80102c0 <_printf_float+0x424>
 8010252:	2301      	movs	r3, #1
 8010254:	4642      	mov	r2, r8
 8010256:	4631      	mov	r1, r6
 8010258:	4628      	mov	r0, r5
 801025a:	47b8      	blx	r7
 801025c:	3001      	adds	r0, #1
 801025e:	f43f ae78 	beq.w	800ff52 <_printf_float+0xb6>
 8010262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010266:	4631      	mov	r1, r6
 8010268:	4628      	mov	r0, r5
 801026a:	47b8      	blx	r7
 801026c:	3001      	adds	r0, #1
 801026e:	f43f ae70 	beq.w	800ff52 <_printf_float+0xb6>
 8010272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010276:	2200      	movs	r2, #0
 8010278:	2300      	movs	r3, #0
 801027a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801027e:	f7f0 fc4b 	bl	8000b18 <__aeabi_dcmpeq>
 8010282:	b9c0      	cbnz	r0, 80102b6 <_printf_float+0x41a>
 8010284:	4653      	mov	r3, sl
 8010286:	f108 0201 	add.w	r2, r8, #1
 801028a:	4631      	mov	r1, r6
 801028c:	4628      	mov	r0, r5
 801028e:	47b8      	blx	r7
 8010290:	3001      	adds	r0, #1
 8010292:	d10c      	bne.n	80102ae <_printf_float+0x412>
 8010294:	e65d      	b.n	800ff52 <_printf_float+0xb6>
 8010296:	2301      	movs	r3, #1
 8010298:	465a      	mov	r2, fp
 801029a:	4631      	mov	r1, r6
 801029c:	4628      	mov	r0, r5
 801029e:	47b8      	blx	r7
 80102a0:	3001      	adds	r0, #1
 80102a2:	f43f ae56 	beq.w	800ff52 <_printf_float+0xb6>
 80102a6:	f108 0801 	add.w	r8, r8, #1
 80102aa:	45d0      	cmp	r8, sl
 80102ac:	dbf3      	blt.n	8010296 <_printf_float+0x3fa>
 80102ae:	464b      	mov	r3, r9
 80102b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80102b4:	e6df      	b.n	8010076 <_printf_float+0x1da>
 80102b6:	f04f 0800 	mov.w	r8, #0
 80102ba:	f104 0b1a 	add.w	fp, r4, #26
 80102be:	e7f4      	b.n	80102aa <_printf_float+0x40e>
 80102c0:	2301      	movs	r3, #1
 80102c2:	4642      	mov	r2, r8
 80102c4:	e7e1      	b.n	801028a <_printf_float+0x3ee>
 80102c6:	2301      	movs	r3, #1
 80102c8:	464a      	mov	r2, r9
 80102ca:	4631      	mov	r1, r6
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b8      	blx	r7
 80102d0:	3001      	adds	r0, #1
 80102d2:	f43f ae3e 	beq.w	800ff52 <_printf_float+0xb6>
 80102d6:	f108 0801 	add.w	r8, r8, #1
 80102da:	68e3      	ldr	r3, [r4, #12]
 80102dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80102de:	1a5b      	subs	r3, r3, r1
 80102e0:	4543      	cmp	r3, r8
 80102e2:	dcf0      	bgt.n	80102c6 <_printf_float+0x42a>
 80102e4:	e6fc      	b.n	80100e0 <_printf_float+0x244>
 80102e6:	f04f 0800 	mov.w	r8, #0
 80102ea:	f104 0919 	add.w	r9, r4, #25
 80102ee:	e7f4      	b.n	80102da <_printf_float+0x43e>

080102f0 <_printf_common>:
 80102f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f4:	4616      	mov	r6, r2
 80102f6:	4698      	mov	r8, r3
 80102f8:	688a      	ldr	r2, [r1, #8]
 80102fa:	690b      	ldr	r3, [r1, #16]
 80102fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010300:	4293      	cmp	r3, r2
 8010302:	bfb8      	it	lt
 8010304:	4613      	movlt	r3, r2
 8010306:	6033      	str	r3, [r6, #0]
 8010308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801030c:	4607      	mov	r7, r0
 801030e:	460c      	mov	r4, r1
 8010310:	b10a      	cbz	r2, 8010316 <_printf_common+0x26>
 8010312:	3301      	adds	r3, #1
 8010314:	6033      	str	r3, [r6, #0]
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	0699      	lsls	r1, r3, #26
 801031a:	bf42      	ittt	mi
 801031c:	6833      	ldrmi	r3, [r6, #0]
 801031e:	3302      	addmi	r3, #2
 8010320:	6033      	strmi	r3, [r6, #0]
 8010322:	6825      	ldr	r5, [r4, #0]
 8010324:	f015 0506 	ands.w	r5, r5, #6
 8010328:	d106      	bne.n	8010338 <_printf_common+0x48>
 801032a:	f104 0a19 	add.w	sl, r4, #25
 801032e:	68e3      	ldr	r3, [r4, #12]
 8010330:	6832      	ldr	r2, [r6, #0]
 8010332:	1a9b      	subs	r3, r3, r2
 8010334:	42ab      	cmp	r3, r5
 8010336:	dc26      	bgt.n	8010386 <_printf_common+0x96>
 8010338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801033c:	6822      	ldr	r2, [r4, #0]
 801033e:	3b00      	subs	r3, #0
 8010340:	bf18      	it	ne
 8010342:	2301      	movne	r3, #1
 8010344:	0692      	lsls	r2, r2, #26
 8010346:	d42b      	bmi.n	80103a0 <_printf_common+0xb0>
 8010348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801034c:	4641      	mov	r1, r8
 801034e:	4638      	mov	r0, r7
 8010350:	47c8      	blx	r9
 8010352:	3001      	adds	r0, #1
 8010354:	d01e      	beq.n	8010394 <_printf_common+0xa4>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	6922      	ldr	r2, [r4, #16]
 801035a:	f003 0306 	and.w	r3, r3, #6
 801035e:	2b04      	cmp	r3, #4
 8010360:	bf02      	ittt	eq
 8010362:	68e5      	ldreq	r5, [r4, #12]
 8010364:	6833      	ldreq	r3, [r6, #0]
 8010366:	1aed      	subeq	r5, r5, r3
 8010368:	68a3      	ldr	r3, [r4, #8]
 801036a:	bf0c      	ite	eq
 801036c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010370:	2500      	movne	r5, #0
 8010372:	4293      	cmp	r3, r2
 8010374:	bfc4      	itt	gt
 8010376:	1a9b      	subgt	r3, r3, r2
 8010378:	18ed      	addgt	r5, r5, r3
 801037a:	2600      	movs	r6, #0
 801037c:	341a      	adds	r4, #26
 801037e:	42b5      	cmp	r5, r6
 8010380:	d11a      	bne.n	80103b8 <_printf_common+0xc8>
 8010382:	2000      	movs	r0, #0
 8010384:	e008      	b.n	8010398 <_printf_common+0xa8>
 8010386:	2301      	movs	r3, #1
 8010388:	4652      	mov	r2, sl
 801038a:	4641      	mov	r1, r8
 801038c:	4638      	mov	r0, r7
 801038e:	47c8      	blx	r9
 8010390:	3001      	adds	r0, #1
 8010392:	d103      	bne.n	801039c <_printf_common+0xac>
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039c:	3501      	adds	r5, #1
 801039e:	e7c6      	b.n	801032e <_printf_common+0x3e>
 80103a0:	18e1      	adds	r1, r4, r3
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	2030      	movs	r0, #48	@ 0x30
 80103a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80103aa:	4422      	add	r2, r4
 80103ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80103b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80103b4:	3302      	adds	r3, #2
 80103b6:	e7c7      	b.n	8010348 <_printf_common+0x58>
 80103b8:	2301      	movs	r3, #1
 80103ba:	4622      	mov	r2, r4
 80103bc:	4641      	mov	r1, r8
 80103be:	4638      	mov	r0, r7
 80103c0:	47c8      	blx	r9
 80103c2:	3001      	adds	r0, #1
 80103c4:	d0e6      	beq.n	8010394 <_printf_common+0xa4>
 80103c6:	3601      	adds	r6, #1
 80103c8:	e7d9      	b.n	801037e <_printf_common+0x8e>
	...

080103cc <_printf_i>:
 80103cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	7e0f      	ldrb	r7, [r1, #24]
 80103d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80103d4:	2f78      	cmp	r7, #120	@ 0x78
 80103d6:	4691      	mov	r9, r2
 80103d8:	4680      	mov	r8, r0
 80103da:	460c      	mov	r4, r1
 80103dc:	469a      	mov	sl, r3
 80103de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80103e2:	d807      	bhi.n	80103f4 <_printf_i+0x28>
 80103e4:	2f62      	cmp	r7, #98	@ 0x62
 80103e6:	d80a      	bhi.n	80103fe <_printf_i+0x32>
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	f000 80d1 	beq.w	8010590 <_printf_i+0x1c4>
 80103ee:	2f58      	cmp	r7, #88	@ 0x58
 80103f0:	f000 80b8 	beq.w	8010564 <_printf_i+0x198>
 80103f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80103fc:	e03a      	b.n	8010474 <_printf_i+0xa8>
 80103fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010402:	2b15      	cmp	r3, #21
 8010404:	d8f6      	bhi.n	80103f4 <_printf_i+0x28>
 8010406:	a101      	add	r1, pc, #4	@ (adr r1, 801040c <_printf_i+0x40>)
 8010408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801040c:	08010465 	.word	0x08010465
 8010410:	08010479 	.word	0x08010479
 8010414:	080103f5 	.word	0x080103f5
 8010418:	080103f5 	.word	0x080103f5
 801041c:	080103f5 	.word	0x080103f5
 8010420:	080103f5 	.word	0x080103f5
 8010424:	08010479 	.word	0x08010479
 8010428:	080103f5 	.word	0x080103f5
 801042c:	080103f5 	.word	0x080103f5
 8010430:	080103f5 	.word	0x080103f5
 8010434:	080103f5 	.word	0x080103f5
 8010438:	08010577 	.word	0x08010577
 801043c:	080104a3 	.word	0x080104a3
 8010440:	08010531 	.word	0x08010531
 8010444:	080103f5 	.word	0x080103f5
 8010448:	080103f5 	.word	0x080103f5
 801044c:	08010599 	.word	0x08010599
 8010450:	080103f5 	.word	0x080103f5
 8010454:	080104a3 	.word	0x080104a3
 8010458:	080103f5 	.word	0x080103f5
 801045c:	080103f5 	.word	0x080103f5
 8010460:	08010539 	.word	0x08010539
 8010464:	6833      	ldr	r3, [r6, #0]
 8010466:	1d1a      	adds	r2, r3, #4
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	6032      	str	r2, [r6, #0]
 801046c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010474:	2301      	movs	r3, #1
 8010476:	e09c      	b.n	80105b2 <_printf_i+0x1e6>
 8010478:	6833      	ldr	r3, [r6, #0]
 801047a:	6820      	ldr	r0, [r4, #0]
 801047c:	1d19      	adds	r1, r3, #4
 801047e:	6031      	str	r1, [r6, #0]
 8010480:	0606      	lsls	r6, r0, #24
 8010482:	d501      	bpl.n	8010488 <_printf_i+0xbc>
 8010484:	681d      	ldr	r5, [r3, #0]
 8010486:	e003      	b.n	8010490 <_printf_i+0xc4>
 8010488:	0645      	lsls	r5, r0, #25
 801048a:	d5fb      	bpl.n	8010484 <_printf_i+0xb8>
 801048c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010490:	2d00      	cmp	r5, #0
 8010492:	da03      	bge.n	801049c <_printf_i+0xd0>
 8010494:	232d      	movs	r3, #45	@ 0x2d
 8010496:	426d      	negs	r5, r5
 8010498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801049c:	4858      	ldr	r0, [pc, #352]	@ (8010600 <_printf_i+0x234>)
 801049e:	230a      	movs	r3, #10
 80104a0:	e011      	b.n	80104c6 <_printf_i+0xfa>
 80104a2:	6821      	ldr	r1, [r4, #0]
 80104a4:	6833      	ldr	r3, [r6, #0]
 80104a6:	0608      	lsls	r0, r1, #24
 80104a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80104ac:	d402      	bmi.n	80104b4 <_printf_i+0xe8>
 80104ae:	0649      	lsls	r1, r1, #25
 80104b0:	bf48      	it	mi
 80104b2:	b2ad      	uxthmi	r5, r5
 80104b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80104b6:	4852      	ldr	r0, [pc, #328]	@ (8010600 <_printf_i+0x234>)
 80104b8:	6033      	str	r3, [r6, #0]
 80104ba:	bf14      	ite	ne
 80104bc:	230a      	movne	r3, #10
 80104be:	2308      	moveq	r3, #8
 80104c0:	2100      	movs	r1, #0
 80104c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80104c6:	6866      	ldr	r6, [r4, #4]
 80104c8:	60a6      	str	r6, [r4, #8]
 80104ca:	2e00      	cmp	r6, #0
 80104cc:	db05      	blt.n	80104da <_printf_i+0x10e>
 80104ce:	6821      	ldr	r1, [r4, #0]
 80104d0:	432e      	orrs	r6, r5
 80104d2:	f021 0104 	bic.w	r1, r1, #4
 80104d6:	6021      	str	r1, [r4, #0]
 80104d8:	d04b      	beq.n	8010572 <_printf_i+0x1a6>
 80104da:	4616      	mov	r6, r2
 80104dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80104e0:	fb03 5711 	mls	r7, r3, r1, r5
 80104e4:	5dc7      	ldrb	r7, [r0, r7]
 80104e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104ea:	462f      	mov	r7, r5
 80104ec:	42bb      	cmp	r3, r7
 80104ee:	460d      	mov	r5, r1
 80104f0:	d9f4      	bls.n	80104dc <_printf_i+0x110>
 80104f2:	2b08      	cmp	r3, #8
 80104f4:	d10b      	bne.n	801050e <_printf_i+0x142>
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	07df      	lsls	r7, r3, #31
 80104fa:	d508      	bpl.n	801050e <_printf_i+0x142>
 80104fc:	6923      	ldr	r3, [r4, #16]
 80104fe:	6861      	ldr	r1, [r4, #4]
 8010500:	4299      	cmp	r1, r3
 8010502:	bfde      	ittt	le
 8010504:	2330      	movle	r3, #48	@ 0x30
 8010506:	f806 3c01 	strble.w	r3, [r6, #-1]
 801050a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801050e:	1b92      	subs	r2, r2, r6
 8010510:	6122      	str	r2, [r4, #16]
 8010512:	f8cd a000 	str.w	sl, [sp]
 8010516:	464b      	mov	r3, r9
 8010518:	aa03      	add	r2, sp, #12
 801051a:	4621      	mov	r1, r4
 801051c:	4640      	mov	r0, r8
 801051e:	f7ff fee7 	bl	80102f0 <_printf_common>
 8010522:	3001      	adds	r0, #1
 8010524:	d14a      	bne.n	80105bc <_printf_i+0x1f0>
 8010526:	f04f 30ff 	mov.w	r0, #4294967295
 801052a:	b004      	add	sp, #16
 801052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	f043 0320 	orr.w	r3, r3, #32
 8010536:	6023      	str	r3, [r4, #0]
 8010538:	4832      	ldr	r0, [pc, #200]	@ (8010604 <_printf_i+0x238>)
 801053a:	2778      	movs	r7, #120	@ 0x78
 801053c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	6831      	ldr	r1, [r6, #0]
 8010544:	061f      	lsls	r7, r3, #24
 8010546:	f851 5b04 	ldr.w	r5, [r1], #4
 801054a:	d402      	bmi.n	8010552 <_printf_i+0x186>
 801054c:	065f      	lsls	r7, r3, #25
 801054e:	bf48      	it	mi
 8010550:	b2ad      	uxthmi	r5, r5
 8010552:	6031      	str	r1, [r6, #0]
 8010554:	07d9      	lsls	r1, r3, #31
 8010556:	bf44      	itt	mi
 8010558:	f043 0320 	orrmi.w	r3, r3, #32
 801055c:	6023      	strmi	r3, [r4, #0]
 801055e:	b11d      	cbz	r5, 8010568 <_printf_i+0x19c>
 8010560:	2310      	movs	r3, #16
 8010562:	e7ad      	b.n	80104c0 <_printf_i+0xf4>
 8010564:	4826      	ldr	r0, [pc, #152]	@ (8010600 <_printf_i+0x234>)
 8010566:	e7e9      	b.n	801053c <_printf_i+0x170>
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	f023 0320 	bic.w	r3, r3, #32
 801056e:	6023      	str	r3, [r4, #0]
 8010570:	e7f6      	b.n	8010560 <_printf_i+0x194>
 8010572:	4616      	mov	r6, r2
 8010574:	e7bd      	b.n	80104f2 <_printf_i+0x126>
 8010576:	6833      	ldr	r3, [r6, #0]
 8010578:	6825      	ldr	r5, [r4, #0]
 801057a:	6961      	ldr	r1, [r4, #20]
 801057c:	1d18      	adds	r0, r3, #4
 801057e:	6030      	str	r0, [r6, #0]
 8010580:	062e      	lsls	r6, r5, #24
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	d501      	bpl.n	801058a <_printf_i+0x1be>
 8010586:	6019      	str	r1, [r3, #0]
 8010588:	e002      	b.n	8010590 <_printf_i+0x1c4>
 801058a:	0668      	lsls	r0, r5, #25
 801058c:	d5fb      	bpl.n	8010586 <_printf_i+0x1ba>
 801058e:	8019      	strh	r1, [r3, #0]
 8010590:	2300      	movs	r3, #0
 8010592:	6123      	str	r3, [r4, #16]
 8010594:	4616      	mov	r6, r2
 8010596:	e7bc      	b.n	8010512 <_printf_i+0x146>
 8010598:	6833      	ldr	r3, [r6, #0]
 801059a:	1d1a      	adds	r2, r3, #4
 801059c:	6032      	str	r2, [r6, #0]
 801059e:	681e      	ldr	r6, [r3, #0]
 80105a0:	6862      	ldr	r2, [r4, #4]
 80105a2:	2100      	movs	r1, #0
 80105a4:	4630      	mov	r0, r6
 80105a6:	f7ef fe3b 	bl	8000220 <memchr>
 80105aa:	b108      	cbz	r0, 80105b0 <_printf_i+0x1e4>
 80105ac:	1b80      	subs	r0, r0, r6
 80105ae:	6060      	str	r0, [r4, #4]
 80105b0:	6863      	ldr	r3, [r4, #4]
 80105b2:	6123      	str	r3, [r4, #16]
 80105b4:	2300      	movs	r3, #0
 80105b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105ba:	e7aa      	b.n	8010512 <_printf_i+0x146>
 80105bc:	6923      	ldr	r3, [r4, #16]
 80105be:	4632      	mov	r2, r6
 80105c0:	4649      	mov	r1, r9
 80105c2:	4640      	mov	r0, r8
 80105c4:	47d0      	blx	sl
 80105c6:	3001      	adds	r0, #1
 80105c8:	d0ad      	beq.n	8010526 <_printf_i+0x15a>
 80105ca:	6823      	ldr	r3, [r4, #0]
 80105cc:	079b      	lsls	r3, r3, #30
 80105ce:	d413      	bmi.n	80105f8 <_printf_i+0x22c>
 80105d0:	68e0      	ldr	r0, [r4, #12]
 80105d2:	9b03      	ldr	r3, [sp, #12]
 80105d4:	4298      	cmp	r0, r3
 80105d6:	bfb8      	it	lt
 80105d8:	4618      	movlt	r0, r3
 80105da:	e7a6      	b.n	801052a <_printf_i+0x15e>
 80105dc:	2301      	movs	r3, #1
 80105de:	4632      	mov	r2, r6
 80105e0:	4649      	mov	r1, r9
 80105e2:	4640      	mov	r0, r8
 80105e4:	47d0      	blx	sl
 80105e6:	3001      	adds	r0, #1
 80105e8:	d09d      	beq.n	8010526 <_printf_i+0x15a>
 80105ea:	3501      	adds	r5, #1
 80105ec:	68e3      	ldr	r3, [r4, #12]
 80105ee:	9903      	ldr	r1, [sp, #12]
 80105f0:	1a5b      	subs	r3, r3, r1
 80105f2:	42ab      	cmp	r3, r5
 80105f4:	dcf2      	bgt.n	80105dc <_printf_i+0x210>
 80105f6:	e7eb      	b.n	80105d0 <_printf_i+0x204>
 80105f8:	2500      	movs	r5, #0
 80105fa:	f104 0619 	add.w	r6, r4, #25
 80105fe:	e7f5      	b.n	80105ec <_printf_i+0x220>
 8010600:	08012a82 	.word	0x08012a82
 8010604:	08012a93 	.word	0x08012a93

08010608 <std>:
 8010608:	2300      	movs	r3, #0
 801060a:	b510      	push	{r4, lr}
 801060c:	4604      	mov	r4, r0
 801060e:	e9c0 3300 	strd	r3, r3, [r0]
 8010612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010616:	6083      	str	r3, [r0, #8]
 8010618:	8181      	strh	r1, [r0, #12]
 801061a:	6643      	str	r3, [r0, #100]	@ 0x64
 801061c:	81c2      	strh	r2, [r0, #14]
 801061e:	6183      	str	r3, [r0, #24]
 8010620:	4619      	mov	r1, r3
 8010622:	2208      	movs	r2, #8
 8010624:	305c      	adds	r0, #92	@ 0x5c
 8010626:	f000 f8f4 	bl	8010812 <memset>
 801062a:	4b0d      	ldr	r3, [pc, #52]	@ (8010660 <std+0x58>)
 801062c:	6263      	str	r3, [r4, #36]	@ 0x24
 801062e:	4b0d      	ldr	r3, [pc, #52]	@ (8010664 <std+0x5c>)
 8010630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010632:	4b0d      	ldr	r3, [pc, #52]	@ (8010668 <std+0x60>)
 8010634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010636:	4b0d      	ldr	r3, [pc, #52]	@ (801066c <std+0x64>)
 8010638:	6323      	str	r3, [r4, #48]	@ 0x30
 801063a:	4b0d      	ldr	r3, [pc, #52]	@ (8010670 <std+0x68>)
 801063c:	6224      	str	r4, [r4, #32]
 801063e:	429c      	cmp	r4, r3
 8010640:	d006      	beq.n	8010650 <std+0x48>
 8010642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010646:	4294      	cmp	r4, r2
 8010648:	d002      	beq.n	8010650 <std+0x48>
 801064a:	33d0      	adds	r3, #208	@ 0xd0
 801064c:	429c      	cmp	r4, r3
 801064e:	d105      	bne.n	801065c <std+0x54>
 8010650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010658:	f000 b968 	b.w	801092c <__retarget_lock_init_recursive>
 801065c:	bd10      	pop	{r4, pc}
 801065e:	bf00      	nop
 8010660:	0801078d 	.word	0x0801078d
 8010664:	080107af 	.word	0x080107af
 8010668:	080107e7 	.word	0x080107e7
 801066c:	0801080b 	.word	0x0801080b
 8010670:	200022b0 	.word	0x200022b0

08010674 <stdio_exit_handler>:
 8010674:	4a02      	ldr	r2, [pc, #8]	@ (8010680 <stdio_exit_handler+0xc>)
 8010676:	4903      	ldr	r1, [pc, #12]	@ (8010684 <stdio_exit_handler+0x10>)
 8010678:	4803      	ldr	r0, [pc, #12]	@ (8010688 <stdio_exit_handler+0x14>)
 801067a:	f000 b869 	b.w	8010750 <_fwalk_sglue>
 801067e:	bf00      	nop
 8010680:	2000010c 	.word	0x2000010c
 8010684:	08011e91 	.word	0x08011e91
 8010688:	2000011c 	.word	0x2000011c

0801068c <cleanup_stdio>:
 801068c:	6841      	ldr	r1, [r0, #4]
 801068e:	4b0c      	ldr	r3, [pc, #48]	@ (80106c0 <cleanup_stdio+0x34>)
 8010690:	4299      	cmp	r1, r3
 8010692:	b510      	push	{r4, lr}
 8010694:	4604      	mov	r4, r0
 8010696:	d001      	beq.n	801069c <cleanup_stdio+0x10>
 8010698:	f001 fbfa 	bl	8011e90 <_fflush_r>
 801069c:	68a1      	ldr	r1, [r4, #8]
 801069e:	4b09      	ldr	r3, [pc, #36]	@ (80106c4 <cleanup_stdio+0x38>)
 80106a0:	4299      	cmp	r1, r3
 80106a2:	d002      	beq.n	80106aa <cleanup_stdio+0x1e>
 80106a4:	4620      	mov	r0, r4
 80106a6:	f001 fbf3 	bl	8011e90 <_fflush_r>
 80106aa:	68e1      	ldr	r1, [r4, #12]
 80106ac:	4b06      	ldr	r3, [pc, #24]	@ (80106c8 <cleanup_stdio+0x3c>)
 80106ae:	4299      	cmp	r1, r3
 80106b0:	d004      	beq.n	80106bc <cleanup_stdio+0x30>
 80106b2:	4620      	mov	r0, r4
 80106b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106b8:	f001 bbea 	b.w	8011e90 <_fflush_r>
 80106bc:	bd10      	pop	{r4, pc}
 80106be:	bf00      	nop
 80106c0:	200022b0 	.word	0x200022b0
 80106c4:	20002318 	.word	0x20002318
 80106c8:	20002380 	.word	0x20002380

080106cc <global_stdio_init.part.0>:
 80106cc:	b510      	push	{r4, lr}
 80106ce:	4b0b      	ldr	r3, [pc, #44]	@ (80106fc <global_stdio_init.part.0+0x30>)
 80106d0:	4c0b      	ldr	r4, [pc, #44]	@ (8010700 <global_stdio_init.part.0+0x34>)
 80106d2:	4a0c      	ldr	r2, [pc, #48]	@ (8010704 <global_stdio_init.part.0+0x38>)
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	4620      	mov	r0, r4
 80106d8:	2200      	movs	r2, #0
 80106da:	2104      	movs	r1, #4
 80106dc:	f7ff ff94 	bl	8010608 <std>
 80106e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106e4:	2201      	movs	r2, #1
 80106e6:	2109      	movs	r1, #9
 80106e8:	f7ff ff8e 	bl	8010608 <std>
 80106ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106f0:	2202      	movs	r2, #2
 80106f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106f6:	2112      	movs	r1, #18
 80106f8:	f7ff bf86 	b.w	8010608 <std>
 80106fc:	200023e8 	.word	0x200023e8
 8010700:	200022b0 	.word	0x200022b0
 8010704:	08010675 	.word	0x08010675

08010708 <__sfp_lock_acquire>:
 8010708:	4801      	ldr	r0, [pc, #4]	@ (8010710 <__sfp_lock_acquire+0x8>)
 801070a:	f000 b910 	b.w	801092e <__retarget_lock_acquire_recursive>
 801070e:	bf00      	nop
 8010710:	200023f1 	.word	0x200023f1

08010714 <__sfp_lock_release>:
 8010714:	4801      	ldr	r0, [pc, #4]	@ (801071c <__sfp_lock_release+0x8>)
 8010716:	f000 b90b 	b.w	8010930 <__retarget_lock_release_recursive>
 801071a:	bf00      	nop
 801071c:	200023f1 	.word	0x200023f1

08010720 <__sinit>:
 8010720:	b510      	push	{r4, lr}
 8010722:	4604      	mov	r4, r0
 8010724:	f7ff fff0 	bl	8010708 <__sfp_lock_acquire>
 8010728:	6a23      	ldr	r3, [r4, #32]
 801072a:	b11b      	cbz	r3, 8010734 <__sinit+0x14>
 801072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010730:	f7ff bff0 	b.w	8010714 <__sfp_lock_release>
 8010734:	4b04      	ldr	r3, [pc, #16]	@ (8010748 <__sinit+0x28>)
 8010736:	6223      	str	r3, [r4, #32]
 8010738:	4b04      	ldr	r3, [pc, #16]	@ (801074c <__sinit+0x2c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1f5      	bne.n	801072c <__sinit+0xc>
 8010740:	f7ff ffc4 	bl	80106cc <global_stdio_init.part.0>
 8010744:	e7f2      	b.n	801072c <__sinit+0xc>
 8010746:	bf00      	nop
 8010748:	0801068d 	.word	0x0801068d
 801074c:	200023e8 	.word	0x200023e8

08010750 <_fwalk_sglue>:
 8010750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010754:	4607      	mov	r7, r0
 8010756:	4688      	mov	r8, r1
 8010758:	4614      	mov	r4, r2
 801075a:	2600      	movs	r6, #0
 801075c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010760:	f1b9 0901 	subs.w	r9, r9, #1
 8010764:	d505      	bpl.n	8010772 <_fwalk_sglue+0x22>
 8010766:	6824      	ldr	r4, [r4, #0]
 8010768:	2c00      	cmp	r4, #0
 801076a:	d1f7      	bne.n	801075c <_fwalk_sglue+0xc>
 801076c:	4630      	mov	r0, r6
 801076e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010772:	89ab      	ldrh	r3, [r5, #12]
 8010774:	2b01      	cmp	r3, #1
 8010776:	d907      	bls.n	8010788 <_fwalk_sglue+0x38>
 8010778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801077c:	3301      	adds	r3, #1
 801077e:	d003      	beq.n	8010788 <_fwalk_sglue+0x38>
 8010780:	4629      	mov	r1, r5
 8010782:	4638      	mov	r0, r7
 8010784:	47c0      	blx	r8
 8010786:	4306      	orrs	r6, r0
 8010788:	3568      	adds	r5, #104	@ 0x68
 801078a:	e7e9      	b.n	8010760 <_fwalk_sglue+0x10>

0801078c <__sread>:
 801078c:	b510      	push	{r4, lr}
 801078e:	460c      	mov	r4, r1
 8010790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010794:	f000 f86c 	bl	8010870 <_read_r>
 8010798:	2800      	cmp	r0, #0
 801079a:	bfab      	itete	ge
 801079c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801079e:	89a3      	ldrhlt	r3, [r4, #12]
 80107a0:	181b      	addge	r3, r3, r0
 80107a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80107a6:	bfac      	ite	ge
 80107a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80107aa:	81a3      	strhlt	r3, [r4, #12]
 80107ac:	bd10      	pop	{r4, pc}

080107ae <__swrite>:
 80107ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b2:	461f      	mov	r7, r3
 80107b4:	898b      	ldrh	r3, [r1, #12]
 80107b6:	05db      	lsls	r3, r3, #23
 80107b8:	4605      	mov	r5, r0
 80107ba:	460c      	mov	r4, r1
 80107bc:	4616      	mov	r6, r2
 80107be:	d505      	bpl.n	80107cc <__swrite+0x1e>
 80107c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107c4:	2302      	movs	r3, #2
 80107c6:	2200      	movs	r2, #0
 80107c8:	f000 f840 	bl	801084c <_lseek_r>
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80107d6:	81a3      	strh	r3, [r4, #12]
 80107d8:	4632      	mov	r2, r6
 80107da:	463b      	mov	r3, r7
 80107dc:	4628      	mov	r0, r5
 80107de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107e2:	f000 b867 	b.w	80108b4 <_write_r>

080107e6 <__sseek>:
 80107e6:	b510      	push	{r4, lr}
 80107e8:	460c      	mov	r4, r1
 80107ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ee:	f000 f82d 	bl	801084c <_lseek_r>
 80107f2:	1c43      	adds	r3, r0, #1
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	bf15      	itete	ne
 80107f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80107fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80107fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010802:	81a3      	strheq	r3, [r4, #12]
 8010804:	bf18      	it	ne
 8010806:	81a3      	strhne	r3, [r4, #12]
 8010808:	bd10      	pop	{r4, pc}

0801080a <__sclose>:
 801080a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801080e:	f000 b80d 	b.w	801082c <_close_r>

08010812 <memset>:
 8010812:	4402      	add	r2, r0
 8010814:	4603      	mov	r3, r0
 8010816:	4293      	cmp	r3, r2
 8010818:	d100      	bne.n	801081c <memset+0xa>
 801081a:	4770      	bx	lr
 801081c:	f803 1b01 	strb.w	r1, [r3], #1
 8010820:	e7f9      	b.n	8010816 <memset+0x4>
	...

08010824 <_localeconv_r>:
 8010824:	4800      	ldr	r0, [pc, #0]	@ (8010828 <_localeconv_r+0x4>)
 8010826:	4770      	bx	lr
 8010828:	20000258 	.word	0x20000258

0801082c <_close_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d06      	ldr	r5, [pc, #24]	@ (8010848 <_close_r+0x1c>)
 8010830:	2300      	movs	r3, #0
 8010832:	4604      	mov	r4, r0
 8010834:	4608      	mov	r0, r1
 8010836:	602b      	str	r3, [r5, #0]
 8010838:	f7f3 fa4a 	bl	8003cd0 <_close>
 801083c:	1c43      	adds	r3, r0, #1
 801083e:	d102      	bne.n	8010846 <_close_r+0x1a>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	b103      	cbz	r3, 8010846 <_close_r+0x1a>
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	bd38      	pop	{r3, r4, r5, pc}
 8010848:	200023ec 	.word	0x200023ec

0801084c <_lseek_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d07      	ldr	r5, [pc, #28]	@ (801086c <_lseek_r+0x20>)
 8010850:	4604      	mov	r4, r0
 8010852:	4608      	mov	r0, r1
 8010854:	4611      	mov	r1, r2
 8010856:	2200      	movs	r2, #0
 8010858:	602a      	str	r2, [r5, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	f7f3 fa5f 	bl	8003d1e <_lseek>
 8010860:	1c43      	adds	r3, r0, #1
 8010862:	d102      	bne.n	801086a <_lseek_r+0x1e>
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	b103      	cbz	r3, 801086a <_lseek_r+0x1e>
 8010868:	6023      	str	r3, [r4, #0]
 801086a:	bd38      	pop	{r3, r4, r5, pc}
 801086c:	200023ec 	.word	0x200023ec

08010870 <_read_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d07      	ldr	r5, [pc, #28]	@ (8010890 <_read_r+0x20>)
 8010874:	4604      	mov	r4, r0
 8010876:	4608      	mov	r0, r1
 8010878:	4611      	mov	r1, r2
 801087a:	2200      	movs	r2, #0
 801087c:	602a      	str	r2, [r5, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	f7f3 f9ed 	bl	8003c5e <_read>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	d102      	bne.n	801088e <_read_r+0x1e>
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	b103      	cbz	r3, 801088e <_read_r+0x1e>
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	bd38      	pop	{r3, r4, r5, pc}
 8010890:	200023ec 	.word	0x200023ec

08010894 <_sbrk_r>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	4d06      	ldr	r5, [pc, #24]	@ (80108b0 <_sbrk_r+0x1c>)
 8010898:	2300      	movs	r3, #0
 801089a:	4604      	mov	r4, r0
 801089c:	4608      	mov	r0, r1
 801089e:	602b      	str	r3, [r5, #0]
 80108a0:	f7f3 fa4a 	bl	8003d38 <_sbrk>
 80108a4:	1c43      	adds	r3, r0, #1
 80108a6:	d102      	bne.n	80108ae <_sbrk_r+0x1a>
 80108a8:	682b      	ldr	r3, [r5, #0]
 80108aa:	b103      	cbz	r3, 80108ae <_sbrk_r+0x1a>
 80108ac:	6023      	str	r3, [r4, #0]
 80108ae:	bd38      	pop	{r3, r4, r5, pc}
 80108b0:	200023ec 	.word	0x200023ec

080108b4 <_write_r>:
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4d07      	ldr	r5, [pc, #28]	@ (80108d4 <_write_r+0x20>)
 80108b8:	4604      	mov	r4, r0
 80108ba:	4608      	mov	r0, r1
 80108bc:	4611      	mov	r1, r2
 80108be:	2200      	movs	r2, #0
 80108c0:	602a      	str	r2, [r5, #0]
 80108c2:	461a      	mov	r2, r3
 80108c4:	f7f3 f9e8 	bl	8003c98 <_write>
 80108c8:	1c43      	adds	r3, r0, #1
 80108ca:	d102      	bne.n	80108d2 <_write_r+0x1e>
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	b103      	cbz	r3, 80108d2 <_write_r+0x1e>
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	bd38      	pop	{r3, r4, r5, pc}
 80108d4:	200023ec 	.word	0x200023ec

080108d8 <__errno>:
 80108d8:	4b01      	ldr	r3, [pc, #4]	@ (80108e0 <__errno+0x8>)
 80108da:	6818      	ldr	r0, [r3, #0]
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20000118 	.word	0x20000118

080108e4 <__libc_init_array>:
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	4d0d      	ldr	r5, [pc, #52]	@ (801091c <__libc_init_array+0x38>)
 80108e8:	4c0d      	ldr	r4, [pc, #52]	@ (8010920 <__libc_init_array+0x3c>)
 80108ea:	1b64      	subs	r4, r4, r5
 80108ec:	10a4      	asrs	r4, r4, #2
 80108ee:	2600      	movs	r6, #0
 80108f0:	42a6      	cmp	r6, r4
 80108f2:	d109      	bne.n	8010908 <__libc_init_array+0x24>
 80108f4:	4d0b      	ldr	r5, [pc, #44]	@ (8010924 <__libc_init_array+0x40>)
 80108f6:	4c0c      	ldr	r4, [pc, #48]	@ (8010928 <__libc_init_array+0x44>)
 80108f8:	f002 f87a 	bl	80129f0 <_init>
 80108fc:	1b64      	subs	r4, r4, r5
 80108fe:	10a4      	asrs	r4, r4, #2
 8010900:	2600      	movs	r6, #0
 8010902:	42a6      	cmp	r6, r4
 8010904:	d105      	bne.n	8010912 <__libc_init_array+0x2e>
 8010906:	bd70      	pop	{r4, r5, r6, pc}
 8010908:	f855 3b04 	ldr.w	r3, [r5], #4
 801090c:	4798      	blx	r3
 801090e:	3601      	adds	r6, #1
 8010910:	e7ee      	b.n	80108f0 <__libc_init_array+0xc>
 8010912:	f855 3b04 	ldr.w	r3, [r5], #4
 8010916:	4798      	blx	r3
 8010918:	3601      	adds	r6, #1
 801091a:	e7f2      	b.n	8010902 <__libc_init_array+0x1e>
 801091c:	08012e38 	.word	0x08012e38
 8010920:	08012e38 	.word	0x08012e38
 8010924:	08012e38 	.word	0x08012e38
 8010928:	08012e3c 	.word	0x08012e3c

0801092c <__retarget_lock_init_recursive>:
 801092c:	4770      	bx	lr

0801092e <__retarget_lock_acquire_recursive>:
 801092e:	4770      	bx	lr

08010930 <__retarget_lock_release_recursive>:
 8010930:	4770      	bx	lr

08010932 <memcpy>:
 8010932:	440a      	add	r2, r1
 8010934:	4291      	cmp	r1, r2
 8010936:	f100 33ff 	add.w	r3, r0, #4294967295
 801093a:	d100      	bne.n	801093e <memcpy+0xc>
 801093c:	4770      	bx	lr
 801093e:	b510      	push	{r4, lr}
 8010940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010948:	4291      	cmp	r1, r2
 801094a:	d1f9      	bne.n	8010940 <memcpy+0xe>
 801094c:	bd10      	pop	{r4, pc}

0801094e <quorem>:
 801094e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010952:	6903      	ldr	r3, [r0, #16]
 8010954:	690c      	ldr	r4, [r1, #16]
 8010956:	42a3      	cmp	r3, r4
 8010958:	4607      	mov	r7, r0
 801095a:	db7e      	blt.n	8010a5a <quorem+0x10c>
 801095c:	3c01      	subs	r4, #1
 801095e:	f101 0814 	add.w	r8, r1, #20
 8010962:	00a3      	lsls	r3, r4, #2
 8010964:	f100 0514 	add.w	r5, r0, #20
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010978:	3301      	adds	r3, #1
 801097a:	429a      	cmp	r2, r3
 801097c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010980:	fbb2 f6f3 	udiv	r6, r2, r3
 8010984:	d32e      	bcc.n	80109e4 <quorem+0x96>
 8010986:	f04f 0a00 	mov.w	sl, #0
 801098a:	46c4      	mov	ip, r8
 801098c:	46ae      	mov	lr, r5
 801098e:	46d3      	mov	fp, sl
 8010990:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010994:	b298      	uxth	r0, r3
 8010996:	fb06 a000 	mla	r0, r6, r0, sl
 801099a:	0c02      	lsrs	r2, r0, #16
 801099c:	0c1b      	lsrs	r3, r3, #16
 801099e:	fb06 2303 	mla	r3, r6, r3, r2
 80109a2:	f8de 2000 	ldr.w	r2, [lr]
 80109a6:	b280      	uxth	r0, r0
 80109a8:	b292      	uxth	r2, r2
 80109aa:	1a12      	subs	r2, r2, r0
 80109ac:	445a      	add	r2, fp
 80109ae:	f8de 0000 	ldr.w	r0, [lr]
 80109b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80109bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80109c0:	b292      	uxth	r2, r2
 80109c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80109c6:	45e1      	cmp	r9, ip
 80109c8:	f84e 2b04 	str.w	r2, [lr], #4
 80109cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80109d0:	d2de      	bcs.n	8010990 <quorem+0x42>
 80109d2:	9b00      	ldr	r3, [sp, #0]
 80109d4:	58eb      	ldr	r3, [r5, r3]
 80109d6:	b92b      	cbnz	r3, 80109e4 <quorem+0x96>
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	3b04      	subs	r3, #4
 80109dc:	429d      	cmp	r5, r3
 80109de:	461a      	mov	r2, r3
 80109e0:	d32f      	bcc.n	8010a42 <quorem+0xf4>
 80109e2:	613c      	str	r4, [r7, #16]
 80109e4:	4638      	mov	r0, r7
 80109e6:	f001 f8c7 	bl	8011b78 <__mcmp>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	db25      	blt.n	8010a3a <quorem+0xec>
 80109ee:	4629      	mov	r1, r5
 80109f0:	2000      	movs	r0, #0
 80109f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80109f6:	f8d1 c000 	ldr.w	ip, [r1]
 80109fa:	fa1f fe82 	uxth.w	lr, r2
 80109fe:	fa1f f38c 	uxth.w	r3, ip
 8010a02:	eba3 030e 	sub.w	r3, r3, lr
 8010a06:	4403      	add	r3, r0
 8010a08:	0c12      	lsrs	r2, r2, #16
 8010a0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010a0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a18:	45c1      	cmp	r9, r8
 8010a1a:	f841 3b04 	str.w	r3, [r1], #4
 8010a1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010a22:	d2e6      	bcs.n	80109f2 <quorem+0xa4>
 8010a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a2c:	b922      	cbnz	r2, 8010a38 <quorem+0xea>
 8010a2e:	3b04      	subs	r3, #4
 8010a30:	429d      	cmp	r5, r3
 8010a32:	461a      	mov	r2, r3
 8010a34:	d30b      	bcc.n	8010a4e <quorem+0x100>
 8010a36:	613c      	str	r4, [r7, #16]
 8010a38:	3601      	adds	r6, #1
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	b003      	add	sp, #12
 8010a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a42:	6812      	ldr	r2, [r2, #0]
 8010a44:	3b04      	subs	r3, #4
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	d1cb      	bne.n	80109e2 <quorem+0x94>
 8010a4a:	3c01      	subs	r4, #1
 8010a4c:	e7c6      	b.n	80109dc <quorem+0x8e>
 8010a4e:	6812      	ldr	r2, [r2, #0]
 8010a50:	3b04      	subs	r3, #4
 8010a52:	2a00      	cmp	r2, #0
 8010a54:	d1ef      	bne.n	8010a36 <quorem+0xe8>
 8010a56:	3c01      	subs	r4, #1
 8010a58:	e7ea      	b.n	8010a30 <quorem+0xe2>
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	e7ee      	b.n	8010a3c <quorem+0xee>
	...

08010a60 <_dtoa_r>:
 8010a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	69c7      	ldr	r7, [r0, #28]
 8010a66:	b097      	sub	sp, #92	@ 0x5c
 8010a68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010a6c:	ec55 4b10 	vmov	r4, r5, d0
 8010a70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010a72:	9107      	str	r1, [sp, #28]
 8010a74:	4681      	mov	r9, r0
 8010a76:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a78:	9311      	str	r3, [sp, #68]	@ 0x44
 8010a7a:	b97f      	cbnz	r7, 8010a9c <_dtoa_r+0x3c>
 8010a7c:	2010      	movs	r0, #16
 8010a7e:	f7ff f8af 	bl	800fbe0 <malloc>
 8010a82:	4602      	mov	r2, r0
 8010a84:	f8c9 001c 	str.w	r0, [r9, #28]
 8010a88:	b920      	cbnz	r0, 8010a94 <_dtoa_r+0x34>
 8010a8a:	4ba9      	ldr	r3, [pc, #676]	@ (8010d30 <_dtoa_r+0x2d0>)
 8010a8c:	21ef      	movs	r1, #239	@ 0xef
 8010a8e:	48a9      	ldr	r0, [pc, #676]	@ (8010d34 <_dtoa_r+0x2d4>)
 8010a90:	f001 fa26 	bl	8011ee0 <__assert_func>
 8010a94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010a98:	6007      	str	r7, [r0, #0]
 8010a9a:	60c7      	str	r7, [r0, #12]
 8010a9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010aa0:	6819      	ldr	r1, [r3, #0]
 8010aa2:	b159      	cbz	r1, 8010abc <_dtoa_r+0x5c>
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	604a      	str	r2, [r1, #4]
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	4093      	lsls	r3, r2
 8010aac:	608b      	str	r3, [r1, #8]
 8010aae:	4648      	mov	r0, r9
 8010ab0:	f000 fe30 	bl	8011714 <_Bfree>
 8010ab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	1e2b      	subs	r3, r5, #0
 8010abe:	bfb9      	ittee	lt
 8010ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ac4:	9305      	strlt	r3, [sp, #20]
 8010ac6:	2300      	movge	r3, #0
 8010ac8:	6033      	strge	r3, [r6, #0]
 8010aca:	9f05      	ldr	r7, [sp, #20]
 8010acc:	4b9a      	ldr	r3, [pc, #616]	@ (8010d38 <_dtoa_r+0x2d8>)
 8010ace:	bfbc      	itt	lt
 8010ad0:	2201      	movlt	r2, #1
 8010ad2:	6032      	strlt	r2, [r6, #0]
 8010ad4:	43bb      	bics	r3, r7
 8010ad6:	d112      	bne.n	8010afe <_dtoa_r+0x9e>
 8010ad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ada:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ae4:	4323      	orrs	r3, r4
 8010ae6:	f000 855a 	beq.w	801159e <_dtoa_r+0xb3e>
 8010aea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010aec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010d4c <_dtoa_r+0x2ec>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f000 855c 	beq.w	80115ae <_dtoa_r+0xb4e>
 8010af6:	f10a 0303 	add.w	r3, sl, #3
 8010afa:	f000 bd56 	b.w	80115aa <_dtoa_r+0xb4a>
 8010afe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010b02:	2200      	movs	r2, #0
 8010b04:	ec51 0b17 	vmov	r0, r1, d7
 8010b08:	2300      	movs	r3, #0
 8010b0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010b0e:	f7f0 f803 	bl	8000b18 <__aeabi_dcmpeq>
 8010b12:	4680      	mov	r8, r0
 8010b14:	b158      	cbz	r0, 8010b2e <_dtoa_r+0xce>
 8010b16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b18:	2301      	movs	r3, #1
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b1e:	b113      	cbz	r3, 8010b26 <_dtoa_r+0xc6>
 8010b20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010b22:	4b86      	ldr	r3, [pc, #536]	@ (8010d3c <_dtoa_r+0x2dc>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010d50 <_dtoa_r+0x2f0>
 8010b2a:	f000 bd40 	b.w	80115ae <_dtoa_r+0xb4e>
 8010b2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010b32:	aa14      	add	r2, sp, #80	@ 0x50
 8010b34:	a915      	add	r1, sp, #84	@ 0x54
 8010b36:	4648      	mov	r0, r9
 8010b38:	f001 f8ce 	bl	8011cd8 <__d2b>
 8010b3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010b40:	9002      	str	r0, [sp, #8]
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d078      	beq.n	8010c38 <_dtoa_r+0x1d8>
 8010b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010b54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010b58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010b5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010b60:	4619      	mov	r1, r3
 8010b62:	2200      	movs	r2, #0
 8010b64:	4b76      	ldr	r3, [pc, #472]	@ (8010d40 <_dtoa_r+0x2e0>)
 8010b66:	f7ef fbb7 	bl	80002d8 <__aeabi_dsub>
 8010b6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010d18 <_dtoa_r+0x2b8>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef fd6a 	bl	8000648 <__aeabi_dmul>
 8010b74:	a36a      	add	r3, pc, #424	@ (adr r3, 8010d20 <_dtoa_r+0x2c0>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fbaf 	bl	80002dc <__adddf3>
 8010b7e:	4604      	mov	r4, r0
 8010b80:	4630      	mov	r0, r6
 8010b82:	460d      	mov	r5, r1
 8010b84:	f7ef fcf6 	bl	8000574 <__aeabi_i2d>
 8010b88:	a367      	add	r3, pc, #412	@ (adr r3, 8010d28 <_dtoa_r+0x2c8>)
 8010b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8e:	f7ef fd5b 	bl	8000648 <__aeabi_dmul>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4620      	mov	r0, r4
 8010b98:	4629      	mov	r1, r5
 8010b9a:	f7ef fb9f 	bl	80002dc <__adddf3>
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	f7f0 f801 	bl	8000ba8 <__aeabi_d2iz>
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4607      	mov	r7, r0
 8010baa:	2300      	movs	r3, #0
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f7ef ffbc 	bl	8000b2c <__aeabi_dcmplt>
 8010bb4:	b140      	cbz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ef fcdc 	bl	8000574 <__aeabi_i2d>
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	f7ef ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 8010bc4:	b900      	cbnz	r0, 8010bc8 <_dtoa_r+0x168>
 8010bc6:	3f01      	subs	r7, #1
 8010bc8:	2f16      	cmp	r7, #22
 8010bca:	d852      	bhi.n	8010c72 <_dtoa_r+0x212>
 8010bcc:	4b5d      	ldr	r3, [pc, #372]	@ (8010d44 <_dtoa_r+0x2e4>)
 8010bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010bda:	f7ef ffa7 	bl	8000b2c <__aeabi_dcmplt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d049      	beq.n	8010c76 <_dtoa_r+0x216>
 8010be2:	3f01      	subs	r7, #1
 8010be4:	2300      	movs	r3, #0
 8010be6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010be8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010bea:	1b9b      	subs	r3, r3, r6
 8010bec:	1e5a      	subs	r2, r3, #1
 8010bee:	bf45      	ittet	mi
 8010bf0:	f1c3 0301 	rsbmi	r3, r3, #1
 8010bf4:	9300      	strmi	r3, [sp, #0]
 8010bf6:	2300      	movpl	r3, #0
 8010bf8:	2300      	movmi	r3, #0
 8010bfa:	9206      	str	r2, [sp, #24]
 8010bfc:	bf54      	ite	pl
 8010bfe:	9300      	strpl	r3, [sp, #0]
 8010c00:	9306      	strmi	r3, [sp, #24]
 8010c02:	2f00      	cmp	r7, #0
 8010c04:	db39      	blt.n	8010c7a <_dtoa_r+0x21a>
 8010c06:	9b06      	ldr	r3, [sp, #24]
 8010c08:	970d      	str	r7, [sp, #52]	@ 0x34
 8010c0a:	443b      	add	r3, r7
 8010c0c:	9306      	str	r3, [sp, #24]
 8010c0e:	2300      	movs	r3, #0
 8010c10:	9308      	str	r3, [sp, #32]
 8010c12:	9b07      	ldr	r3, [sp, #28]
 8010c14:	2b09      	cmp	r3, #9
 8010c16:	d863      	bhi.n	8010ce0 <_dtoa_r+0x280>
 8010c18:	2b05      	cmp	r3, #5
 8010c1a:	bfc4      	itt	gt
 8010c1c:	3b04      	subgt	r3, #4
 8010c1e:	9307      	strgt	r3, [sp, #28]
 8010c20:	9b07      	ldr	r3, [sp, #28]
 8010c22:	f1a3 0302 	sub.w	r3, r3, #2
 8010c26:	bfcc      	ite	gt
 8010c28:	2400      	movgt	r4, #0
 8010c2a:	2401      	movle	r4, #1
 8010c2c:	2b03      	cmp	r3, #3
 8010c2e:	d863      	bhi.n	8010cf8 <_dtoa_r+0x298>
 8010c30:	e8df f003 	tbb	[pc, r3]
 8010c34:	2b375452 	.word	0x2b375452
 8010c38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010c3c:	441e      	add	r6, r3
 8010c3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010c42:	2b20      	cmp	r3, #32
 8010c44:	bfc1      	itttt	gt
 8010c46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010c4a:	409f      	lslgt	r7, r3
 8010c4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010c50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010c54:	bfd6      	itet	le
 8010c56:	f1c3 0320 	rsble	r3, r3, #32
 8010c5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8010c5e:	fa04 f003 	lslle.w	r0, r4, r3
 8010c62:	f7ef fc77 	bl	8000554 <__aeabi_ui2d>
 8010c66:	2201      	movs	r2, #1
 8010c68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010c6c:	3e01      	subs	r6, #1
 8010c6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010c70:	e776      	b.n	8010b60 <_dtoa_r+0x100>
 8010c72:	2301      	movs	r3, #1
 8010c74:	e7b7      	b.n	8010be6 <_dtoa_r+0x186>
 8010c76:	9010      	str	r0, [sp, #64]	@ 0x40
 8010c78:	e7b6      	b.n	8010be8 <_dtoa_r+0x188>
 8010c7a:	9b00      	ldr	r3, [sp, #0]
 8010c7c:	1bdb      	subs	r3, r3, r7
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	427b      	negs	r3, r7
 8010c82:	9308      	str	r3, [sp, #32]
 8010c84:	2300      	movs	r3, #0
 8010c86:	930d      	str	r3, [sp, #52]	@ 0x34
 8010c88:	e7c3      	b.n	8010c12 <_dtoa_r+0x1b2>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c90:	eb07 0b03 	add.w	fp, r7, r3
 8010c94:	f10b 0301 	add.w	r3, fp, #1
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	9303      	str	r3, [sp, #12]
 8010c9c:	bfb8      	it	lt
 8010c9e:	2301      	movlt	r3, #1
 8010ca0:	e006      	b.n	8010cb0 <_dtoa_r+0x250>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dd28      	ble.n	8010cfe <_dtoa_r+0x29e>
 8010cac:	469b      	mov	fp, r3
 8010cae:	9303      	str	r3, [sp, #12]
 8010cb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	f102 0514 	add.w	r5, r2, #20
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	d926      	bls.n	8010d0e <_dtoa_r+0x2ae>
 8010cc0:	6041      	str	r1, [r0, #4]
 8010cc2:	4648      	mov	r0, r9
 8010cc4:	f000 fce6 	bl	8011694 <_Balloc>
 8010cc8:	4682      	mov	sl, r0
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d142      	bne.n	8010d54 <_dtoa_r+0x2f4>
 8010cce:	4b1e      	ldr	r3, [pc, #120]	@ (8010d48 <_dtoa_r+0x2e8>)
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	f240 11af 	movw	r1, #431	@ 0x1af
 8010cd6:	e6da      	b.n	8010a8e <_dtoa_r+0x2e>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e7e3      	b.n	8010ca4 <_dtoa_r+0x244>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	e7d5      	b.n	8010c8c <_dtoa_r+0x22c>
 8010ce0:	2401      	movs	r4, #1
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	9307      	str	r3, [sp, #28]
 8010ce6:	9409      	str	r4, [sp, #36]	@ 0x24
 8010ce8:	f04f 3bff 	mov.w	fp, #4294967295
 8010cec:	2200      	movs	r2, #0
 8010cee:	f8cd b00c 	str.w	fp, [sp, #12]
 8010cf2:	2312      	movs	r3, #18
 8010cf4:	920c      	str	r2, [sp, #48]	@ 0x30
 8010cf6:	e7db      	b.n	8010cb0 <_dtoa_r+0x250>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cfc:	e7f4      	b.n	8010ce8 <_dtoa_r+0x288>
 8010cfe:	f04f 0b01 	mov.w	fp, #1
 8010d02:	f8cd b00c 	str.w	fp, [sp, #12]
 8010d06:	465b      	mov	r3, fp
 8010d08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010d0c:	e7d0      	b.n	8010cb0 <_dtoa_r+0x250>
 8010d0e:	3101      	adds	r1, #1
 8010d10:	0052      	lsls	r2, r2, #1
 8010d12:	e7d1      	b.n	8010cb8 <_dtoa_r+0x258>
 8010d14:	f3af 8000 	nop.w
 8010d18:	636f4361 	.word	0x636f4361
 8010d1c:	3fd287a7 	.word	0x3fd287a7
 8010d20:	8b60c8b3 	.word	0x8b60c8b3
 8010d24:	3fc68a28 	.word	0x3fc68a28
 8010d28:	509f79fb 	.word	0x509f79fb
 8010d2c:	3fd34413 	.word	0x3fd34413
 8010d30:	08012ab1 	.word	0x08012ab1
 8010d34:	08012ac8 	.word	0x08012ac8
 8010d38:	7ff00000 	.word	0x7ff00000
 8010d3c:	08012a81 	.word	0x08012a81
 8010d40:	3ff80000 	.word	0x3ff80000
 8010d44:	08012c18 	.word	0x08012c18
 8010d48:	08012b20 	.word	0x08012b20
 8010d4c:	08012aad 	.word	0x08012aad
 8010d50:	08012a80 	.word	0x08012a80
 8010d54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010d58:	6018      	str	r0, [r3, #0]
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	2b0e      	cmp	r3, #14
 8010d5e:	f200 80a1 	bhi.w	8010ea4 <_dtoa_r+0x444>
 8010d62:	2c00      	cmp	r4, #0
 8010d64:	f000 809e 	beq.w	8010ea4 <_dtoa_r+0x444>
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	dd33      	ble.n	8010dd4 <_dtoa_r+0x374>
 8010d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8010fe0 <_dtoa_r+0x580>)
 8010d6e:	f007 020f 	and.w	r2, r7, #15
 8010d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d76:	ed93 7b00 	vldr	d7, [r3]
 8010d7a:	05f8      	lsls	r0, r7, #23
 8010d7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010d84:	d516      	bpl.n	8010db4 <_dtoa_r+0x354>
 8010d86:	4b97      	ldr	r3, [pc, #604]	@ (8010fe4 <_dtoa_r+0x584>)
 8010d88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d90:	f7ef fd84 	bl	800089c <__aeabi_ddiv>
 8010d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d98:	f004 040f 	and.w	r4, r4, #15
 8010d9c:	2603      	movs	r6, #3
 8010d9e:	4d91      	ldr	r5, [pc, #580]	@ (8010fe4 <_dtoa_r+0x584>)
 8010da0:	b954      	cbnz	r4, 8010db8 <_dtoa_r+0x358>
 8010da2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010daa:	f7ef fd77 	bl	800089c <__aeabi_ddiv>
 8010dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010db2:	e028      	b.n	8010e06 <_dtoa_r+0x3a6>
 8010db4:	2602      	movs	r6, #2
 8010db6:	e7f2      	b.n	8010d9e <_dtoa_r+0x33e>
 8010db8:	07e1      	lsls	r1, r4, #31
 8010dba:	d508      	bpl.n	8010dce <_dtoa_r+0x36e>
 8010dbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dc4:	f7ef fc40 	bl	8000648 <__aeabi_dmul>
 8010dc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010dcc:	3601      	adds	r6, #1
 8010dce:	1064      	asrs	r4, r4, #1
 8010dd0:	3508      	adds	r5, #8
 8010dd2:	e7e5      	b.n	8010da0 <_dtoa_r+0x340>
 8010dd4:	f000 80af 	beq.w	8010f36 <_dtoa_r+0x4d6>
 8010dd8:	427c      	negs	r4, r7
 8010dda:	4b81      	ldr	r3, [pc, #516]	@ (8010fe0 <_dtoa_r+0x580>)
 8010ddc:	4d81      	ldr	r5, [pc, #516]	@ (8010fe4 <_dtoa_r+0x584>)
 8010dde:	f004 020f 	and.w	r2, r4, #15
 8010de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010dee:	f7ef fc2b 	bl	8000648 <__aeabi_dmul>
 8010df2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010df6:	1124      	asrs	r4, r4, #4
 8010df8:	2300      	movs	r3, #0
 8010dfa:	2602      	movs	r6, #2
 8010dfc:	2c00      	cmp	r4, #0
 8010dfe:	f040 808f 	bne.w	8010f20 <_dtoa_r+0x4c0>
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1d3      	bne.n	8010dae <_dtoa_r+0x34e>
 8010e06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f000 8094 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e12:	4b75      	ldr	r3, [pc, #468]	@ (8010fe8 <_dtoa_r+0x588>)
 8010e14:	2200      	movs	r2, #0
 8010e16:	4620      	mov	r0, r4
 8010e18:	4629      	mov	r1, r5
 8010e1a:	f7ef fe87 	bl	8000b2c <__aeabi_dcmplt>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f000 808b 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f000 8087 	beq.w	8010f3a <_dtoa_r+0x4da>
 8010e2c:	f1bb 0f00 	cmp.w	fp, #0
 8010e30:	dd34      	ble.n	8010e9c <_dtoa_r+0x43c>
 8010e32:	4620      	mov	r0, r4
 8010e34:	4b6d      	ldr	r3, [pc, #436]	@ (8010fec <_dtoa_r+0x58c>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fc05 	bl	8000648 <__aeabi_dmul>
 8010e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e42:	f107 38ff 	add.w	r8, r7, #4294967295
 8010e46:	3601      	adds	r6, #1
 8010e48:	465c      	mov	r4, fp
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7ef fb92 	bl	8000574 <__aeabi_i2d>
 8010e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e54:	f7ef fbf8 	bl	8000648 <__aeabi_dmul>
 8010e58:	4b65      	ldr	r3, [pc, #404]	@ (8010ff0 <_dtoa_r+0x590>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f7ef fa3e 	bl	80002dc <__adddf3>
 8010e60:	4605      	mov	r5, r0
 8010e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010e66:	2c00      	cmp	r4, #0
 8010e68:	d16a      	bne.n	8010f40 <_dtoa_r+0x4e0>
 8010e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e6e:	4b61      	ldr	r3, [pc, #388]	@ (8010ff4 <_dtoa_r+0x594>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	f7ef fa31 	bl	80002d8 <__aeabi_dsub>
 8010e76:	4602      	mov	r2, r0
 8010e78:	460b      	mov	r3, r1
 8010e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4633      	mov	r3, r6
 8010e82:	f7ef fe71 	bl	8000b68 <__aeabi_dcmpgt>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	f040 8298 	bne.w	80113bc <_dtoa_r+0x95c>
 8010e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e90:	462a      	mov	r2, r5
 8010e92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010e96:	f7ef fe49 	bl	8000b2c <__aeabi_dcmplt>
 8010e9a:	bb38      	cbnz	r0, 8010eec <_dtoa_r+0x48c>
 8010e9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010ea0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010ea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f2c0 8157 	blt.w	801115a <_dtoa_r+0x6fa>
 8010eac:	2f0e      	cmp	r7, #14
 8010eae:	f300 8154 	bgt.w	801115a <_dtoa_r+0x6fa>
 8010eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8010fe0 <_dtoa_r+0x580>)
 8010eb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010eb8:	ed93 7b00 	vldr	d7, [r3]
 8010ebc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	ed8d 7b00 	vstr	d7, [sp]
 8010ec4:	f280 80e5 	bge.w	8011092 <_dtoa_r+0x632>
 8010ec8:	9b03      	ldr	r3, [sp, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f300 80e1 	bgt.w	8011092 <_dtoa_r+0x632>
 8010ed0:	d10c      	bne.n	8010eec <_dtoa_r+0x48c>
 8010ed2:	4b48      	ldr	r3, [pc, #288]	@ (8010ff4 <_dtoa_r+0x594>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	ec51 0b17 	vmov	r0, r1, d7
 8010eda:	f7ef fbb5 	bl	8000648 <__aeabi_dmul>
 8010ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ee2:	f7ef fe37 	bl	8000b54 <__aeabi_dcmpge>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f000 8266 	beq.w	80113b8 <_dtoa_r+0x958>
 8010eec:	2400      	movs	r4, #0
 8010eee:	4625      	mov	r5, r4
 8010ef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ef2:	4656      	mov	r6, sl
 8010ef4:	ea6f 0803 	mvn.w	r8, r3
 8010ef8:	2700      	movs	r7, #0
 8010efa:	4621      	mov	r1, r4
 8010efc:	4648      	mov	r0, r9
 8010efe:	f000 fc09 	bl	8011714 <_Bfree>
 8010f02:	2d00      	cmp	r5, #0
 8010f04:	f000 80bd 	beq.w	8011082 <_dtoa_r+0x622>
 8010f08:	b12f      	cbz	r7, 8010f16 <_dtoa_r+0x4b6>
 8010f0a:	42af      	cmp	r7, r5
 8010f0c:	d003      	beq.n	8010f16 <_dtoa_r+0x4b6>
 8010f0e:	4639      	mov	r1, r7
 8010f10:	4648      	mov	r0, r9
 8010f12:	f000 fbff 	bl	8011714 <_Bfree>
 8010f16:	4629      	mov	r1, r5
 8010f18:	4648      	mov	r0, r9
 8010f1a:	f000 fbfb 	bl	8011714 <_Bfree>
 8010f1e:	e0b0      	b.n	8011082 <_dtoa_r+0x622>
 8010f20:	07e2      	lsls	r2, r4, #31
 8010f22:	d505      	bpl.n	8010f30 <_dtoa_r+0x4d0>
 8010f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f28:	f7ef fb8e 	bl	8000648 <__aeabi_dmul>
 8010f2c:	3601      	adds	r6, #1
 8010f2e:	2301      	movs	r3, #1
 8010f30:	1064      	asrs	r4, r4, #1
 8010f32:	3508      	adds	r5, #8
 8010f34:	e762      	b.n	8010dfc <_dtoa_r+0x39c>
 8010f36:	2602      	movs	r6, #2
 8010f38:	e765      	b.n	8010e06 <_dtoa_r+0x3a6>
 8010f3a:	9c03      	ldr	r4, [sp, #12]
 8010f3c:	46b8      	mov	r8, r7
 8010f3e:	e784      	b.n	8010e4a <_dtoa_r+0x3ea>
 8010f40:	4b27      	ldr	r3, [pc, #156]	@ (8010fe0 <_dtoa_r+0x580>)
 8010f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f4c:	4454      	add	r4, sl
 8010f4e:	2900      	cmp	r1, #0
 8010f50:	d054      	beq.n	8010ffc <_dtoa_r+0x59c>
 8010f52:	4929      	ldr	r1, [pc, #164]	@ (8010ff8 <_dtoa_r+0x598>)
 8010f54:	2000      	movs	r0, #0
 8010f56:	f7ef fca1 	bl	800089c <__aeabi_ddiv>
 8010f5a:	4633      	mov	r3, r6
 8010f5c:	462a      	mov	r2, r5
 8010f5e:	f7ef f9bb 	bl	80002d8 <__aeabi_dsub>
 8010f62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010f66:	4656      	mov	r6, sl
 8010f68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f6c:	f7ef fe1c 	bl	8000ba8 <__aeabi_d2iz>
 8010f70:	4605      	mov	r5, r0
 8010f72:	f7ef faff 	bl	8000574 <__aeabi_i2d>
 8010f76:	4602      	mov	r2, r0
 8010f78:	460b      	mov	r3, r1
 8010f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f7e:	f7ef f9ab 	bl	80002d8 <__aeabi_dsub>
 8010f82:	3530      	adds	r5, #48	@ 0x30
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f8c:	f806 5b01 	strb.w	r5, [r6], #1
 8010f90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010f94:	f7ef fdca 	bl	8000b2c <__aeabi_dcmplt>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d172      	bne.n	8011082 <_dtoa_r+0x622>
 8010f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fa0:	4911      	ldr	r1, [pc, #68]	@ (8010fe8 <_dtoa_r+0x588>)
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f7ef f998 	bl	80002d8 <__aeabi_dsub>
 8010fa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010fac:	f7ef fdbe 	bl	8000b2c <__aeabi_dcmplt>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	f040 80b4 	bne.w	801111e <_dtoa_r+0x6be>
 8010fb6:	42a6      	cmp	r6, r4
 8010fb8:	f43f af70 	beq.w	8010e9c <_dtoa_r+0x43c>
 8010fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8010fec <_dtoa_r+0x58c>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f7ef fb40 	bl	8000648 <__aeabi_dmul>
 8010fc8:	4b08      	ldr	r3, [pc, #32]	@ (8010fec <_dtoa_r+0x58c>)
 8010fca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010fce:	2200      	movs	r2, #0
 8010fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fd4:	f7ef fb38 	bl	8000648 <__aeabi_dmul>
 8010fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fdc:	e7c4      	b.n	8010f68 <_dtoa_r+0x508>
 8010fde:	bf00      	nop
 8010fe0:	08012c18 	.word	0x08012c18
 8010fe4:	08012bf0 	.word	0x08012bf0
 8010fe8:	3ff00000 	.word	0x3ff00000
 8010fec:	40240000 	.word	0x40240000
 8010ff0:	401c0000 	.word	0x401c0000
 8010ff4:	40140000 	.word	0x40140000
 8010ff8:	3fe00000 	.word	0x3fe00000
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4628      	mov	r0, r5
 8011000:	f7ef fb22 	bl	8000648 <__aeabi_dmul>
 8011004:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011008:	9413      	str	r4, [sp, #76]	@ 0x4c
 801100a:	4656      	mov	r6, sl
 801100c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011010:	f7ef fdca 	bl	8000ba8 <__aeabi_d2iz>
 8011014:	4605      	mov	r5, r0
 8011016:	f7ef faad 	bl	8000574 <__aeabi_i2d>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011022:	f7ef f959 	bl	80002d8 <__aeabi_dsub>
 8011026:	3530      	adds	r5, #48	@ 0x30
 8011028:	f806 5b01 	strb.w	r5, [r6], #1
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	42a6      	cmp	r6, r4
 8011032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011036:	f04f 0200 	mov.w	r2, #0
 801103a:	d124      	bne.n	8011086 <_dtoa_r+0x626>
 801103c:	4baf      	ldr	r3, [pc, #700]	@ (80112fc <_dtoa_r+0x89c>)
 801103e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011042:	f7ef f94b 	bl	80002dc <__adddf3>
 8011046:	4602      	mov	r2, r0
 8011048:	460b      	mov	r3, r1
 801104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801104e:	f7ef fd8b 	bl	8000b68 <__aeabi_dcmpgt>
 8011052:	2800      	cmp	r0, #0
 8011054:	d163      	bne.n	801111e <_dtoa_r+0x6be>
 8011056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801105a:	49a8      	ldr	r1, [pc, #672]	@ (80112fc <_dtoa_r+0x89c>)
 801105c:	2000      	movs	r0, #0
 801105e:	f7ef f93b 	bl	80002d8 <__aeabi_dsub>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801106a:	f7ef fd5f 	bl	8000b2c <__aeabi_dcmplt>
 801106e:	2800      	cmp	r0, #0
 8011070:	f43f af14 	beq.w	8010e9c <_dtoa_r+0x43c>
 8011074:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011076:	1e73      	subs	r3, r6, #1
 8011078:	9313      	str	r3, [sp, #76]	@ 0x4c
 801107a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801107e:	2b30      	cmp	r3, #48	@ 0x30
 8011080:	d0f8      	beq.n	8011074 <_dtoa_r+0x614>
 8011082:	4647      	mov	r7, r8
 8011084:	e03b      	b.n	80110fe <_dtoa_r+0x69e>
 8011086:	4b9e      	ldr	r3, [pc, #632]	@ (8011300 <_dtoa_r+0x8a0>)
 8011088:	f7ef fade 	bl	8000648 <__aeabi_dmul>
 801108c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011090:	e7bc      	b.n	801100c <_dtoa_r+0x5ac>
 8011092:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011096:	4656      	mov	r6, sl
 8011098:	e9dd 2300 	ldrd	r2, r3, [sp]
 801109c:	4620      	mov	r0, r4
 801109e:	4629      	mov	r1, r5
 80110a0:	f7ef fbfc 	bl	800089c <__aeabi_ddiv>
 80110a4:	f7ef fd80 	bl	8000ba8 <__aeabi_d2iz>
 80110a8:	4680      	mov	r8, r0
 80110aa:	f7ef fa63 	bl	8000574 <__aeabi_i2d>
 80110ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110b2:	f7ef fac9 	bl	8000648 <__aeabi_dmul>
 80110b6:	4602      	mov	r2, r0
 80110b8:	460b      	mov	r3, r1
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80110c2:	f7ef f909 	bl	80002d8 <__aeabi_dsub>
 80110c6:	f806 4b01 	strb.w	r4, [r6], #1
 80110ca:	9d03      	ldr	r5, [sp, #12]
 80110cc:	eba6 040a 	sub.w	r4, r6, sl
 80110d0:	42a5      	cmp	r5, r4
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	d133      	bne.n	8011140 <_dtoa_r+0x6e0>
 80110d8:	f7ef f900 	bl	80002dc <__adddf3>
 80110dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	f7ef fd40 	bl	8000b68 <__aeabi_dcmpgt>
 80110e8:	b9c0      	cbnz	r0, 801111c <_dtoa_r+0x6bc>
 80110ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7ef fd11 	bl	8000b18 <__aeabi_dcmpeq>
 80110f6:	b110      	cbz	r0, 80110fe <_dtoa_r+0x69e>
 80110f8:	f018 0f01 	tst.w	r8, #1
 80110fc:	d10e      	bne.n	801111c <_dtoa_r+0x6bc>
 80110fe:	9902      	ldr	r1, [sp, #8]
 8011100:	4648      	mov	r0, r9
 8011102:	f000 fb07 	bl	8011714 <_Bfree>
 8011106:	2300      	movs	r3, #0
 8011108:	7033      	strb	r3, [r6, #0]
 801110a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801110c:	3701      	adds	r7, #1
 801110e:	601f      	str	r7, [r3, #0]
 8011110:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 824b 	beq.w	80115ae <_dtoa_r+0xb4e>
 8011118:	601e      	str	r6, [r3, #0]
 801111a:	e248      	b.n	80115ae <_dtoa_r+0xb4e>
 801111c:	46b8      	mov	r8, r7
 801111e:	4633      	mov	r3, r6
 8011120:	461e      	mov	r6, r3
 8011122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011126:	2a39      	cmp	r2, #57	@ 0x39
 8011128:	d106      	bne.n	8011138 <_dtoa_r+0x6d8>
 801112a:	459a      	cmp	sl, r3
 801112c:	d1f8      	bne.n	8011120 <_dtoa_r+0x6c0>
 801112e:	2230      	movs	r2, #48	@ 0x30
 8011130:	f108 0801 	add.w	r8, r8, #1
 8011134:	f88a 2000 	strb.w	r2, [sl]
 8011138:	781a      	ldrb	r2, [r3, #0]
 801113a:	3201      	adds	r2, #1
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	e7a0      	b.n	8011082 <_dtoa_r+0x622>
 8011140:	4b6f      	ldr	r3, [pc, #444]	@ (8011300 <_dtoa_r+0x8a0>)
 8011142:	2200      	movs	r2, #0
 8011144:	f7ef fa80 	bl	8000648 <__aeabi_dmul>
 8011148:	2200      	movs	r2, #0
 801114a:	2300      	movs	r3, #0
 801114c:	4604      	mov	r4, r0
 801114e:	460d      	mov	r5, r1
 8011150:	f7ef fce2 	bl	8000b18 <__aeabi_dcmpeq>
 8011154:	2800      	cmp	r0, #0
 8011156:	d09f      	beq.n	8011098 <_dtoa_r+0x638>
 8011158:	e7d1      	b.n	80110fe <_dtoa_r+0x69e>
 801115a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801115c:	2a00      	cmp	r2, #0
 801115e:	f000 80ea 	beq.w	8011336 <_dtoa_r+0x8d6>
 8011162:	9a07      	ldr	r2, [sp, #28]
 8011164:	2a01      	cmp	r2, #1
 8011166:	f300 80cd 	bgt.w	8011304 <_dtoa_r+0x8a4>
 801116a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801116c:	2a00      	cmp	r2, #0
 801116e:	f000 80c1 	beq.w	80112f4 <_dtoa_r+0x894>
 8011172:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011176:	9c08      	ldr	r4, [sp, #32]
 8011178:	9e00      	ldr	r6, [sp, #0]
 801117a:	9a00      	ldr	r2, [sp, #0]
 801117c:	441a      	add	r2, r3
 801117e:	9200      	str	r2, [sp, #0]
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	2101      	movs	r1, #1
 8011184:	441a      	add	r2, r3
 8011186:	4648      	mov	r0, r9
 8011188:	9206      	str	r2, [sp, #24]
 801118a:	f000 fb77 	bl	801187c <__i2b>
 801118e:	4605      	mov	r5, r0
 8011190:	b166      	cbz	r6, 80111ac <_dtoa_r+0x74c>
 8011192:	9b06      	ldr	r3, [sp, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	dd09      	ble.n	80111ac <_dtoa_r+0x74c>
 8011198:	42b3      	cmp	r3, r6
 801119a:	9a00      	ldr	r2, [sp, #0]
 801119c:	bfa8      	it	ge
 801119e:	4633      	movge	r3, r6
 80111a0:	1ad2      	subs	r2, r2, r3
 80111a2:	9200      	str	r2, [sp, #0]
 80111a4:	9a06      	ldr	r2, [sp, #24]
 80111a6:	1af6      	subs	r6, r6, r3
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	9306      	str	r3, [sp, #24]
 80111ac:	9b08      	ldr	r3, [sp, #32]
 80111ae:	b30b      	cbz	r3, 80111f4 <_dtoa_r+0x794>
 80111b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 80c6 	beq.w	8011344 <_dtoa_r+0x8e4>
 80111b8:	2c00      	cmp	r4, #0
 80111ba:	f000 80c0 	beq.w	801133e <_dtoa_r+0x8de>
 80111be:	4629      	mov	r1, r5
 80111c0:	4622      	mov	r2, r4
 80111c2:	4648      	mov	r0, r9
 80111c4:	f000 fc12 	bl	80119ec <__pow5mult>
 80111c8:	9a02      	ldr	r2, [sp, #8]
 80111ca:	4601      	mov	r1, r0
 80111cc:	4605      	mov	r5, r0
 80111ce:	4648      	mov	r0, r9
 80111d0:	f000 fb6a 	bl	80118a8 <__multiply>
 80111d4:	9902      	ldr	r1, [sp, #8]
 80111d6:	4680      	mov	r8, r0
 80111d8:	4648      	mov	r0, r9
 80111da:	f000 fa9b 	bl	8011714 <_Bfree>
 80111de:	9b08      	ldr	r3, [sp, #32]
 80111e0:	1b1b      	subs	r3, r3, r4
 80111e2:	9308      	str	r3, [sp, #32]
 80111e4:	f000 80b1 	beq.w	801134a <_dtoa_r+0x8ea>
 80111e8:	9a08      	ldr	r2, [sp, #32]
 80111ea:	4641      	mov	r1, r8
 80111ec:	4648      	mov	r0, r9
 80111ee:	f000 fbfd 	bl	80119ec <__pow5mult>
 80111f2:	9002      	str	r0, [sp, #8]
 80111f4:	2101      	movs	r1, #1
 80111f6:	4648      	mov	r0, r9
 80111f8:	f000 fb40 	bl	801187c <__i2b>
 80111fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111fe:	4604      	mov	r4, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 81d8 	beq.w	80115b6 <_dtoa_r+0xb56>
 8011206:	461a      	mov	r2, r3
 8011208:	4601      	mov	r1, r0
 801120a:	4648      	mov	r0, r9
 801120c:	f000 fbee 	bl	80119ec <__pow5mult>
 8011210:	9b07      	ldr	r3, [sp, #28]
 8011212:	2b01      	cmp	r3, #1
 8011214:	4604      	mov	r4, r0
 8011216:	f300 809f 	bgt.w	8011358 <_dtoa_r+0x8f8>
 801121a:	9b04      	ldr	r3, [sp, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	f040 8097 	bne.w	8011350 <_dtoa_r+0x8f0>
 8011222:	9b05      	ldr	r3, [sp, #20]
 8011224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011228:	2b00      	cmp	r3, #0
 801122a:	f040 8093 	bne.w	8011354 <_dtoa_r+0x8f4>
 801122e:	9b05      	ldr	r3, [sp, #20]
 8011230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011234:	0d1b      	lsrs	r3, r3, #20
 8011236:	051b      	lsls	r3, r3, #20
 8011238:	b133      	cbz	r3, 8011248 <_dtoa_r+0x7e8>
 801123a:	9b00      	ldr	r3, [sp, #0]
 801123c:	3301      	adds	r3, #1
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	9b06      	ldr	r3, [sp, #24]
 8011242:	3301      	adds	r3, #1
 8011244:	9306      	str	r3, [sp, #24]
 8011246:	2301      	movs	r3, #1
 8011248:	9308      	str	r3, [sp, #32]
 801124a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801124c:	2b00      	cmp	r3, #0
 801124e:	f000 81b8 	beq.w	80115c2 <_dtoa_r+0xb62>
 8011252:	6923      	ldr	r3, [r4, #16]
 8011254:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011258:	6918      	ldr	r0, [r3, #16]
 801125a:	f000 fac3 	bl	80117e4 <__hi0bits>
 801125e:	f1c0 0020 	rsb	r0, r0, #32
 8011262:	9b06      	ldr	r3, [sp, #24]
 8011264:	4418      	add	r0, r3
 8011266:	f010 001f 	ands.w	r0, r0, #31
 801126a:	f000 8082 	beq.w	8011372 <_dtoa_r+0x912>
 801126e:	f1c0 0320 	rsb	r3, r0, #32
 8011272:	2b04      	cmp	r3, #4
 8011274:	dd73      	ble.n	801135e <_dtoa_r+0x8fe>
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	f1c0 001c 	rsb	r0, r0, #28
 801127c:	4403      	add	r3, r0
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	9b06      	ldr	r3, [sp, #24]
 8011282:	4403      	add	r3, r0
 8011284:	4406      	add	r6, r0
 8011286:	9306      	str	r3, [sp, #24]
 8011288:	9b00      	ldr	r3, [sp, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	dd05      	ble.n	801129a <_dtoa_r+0x83a>
 801128e:	9902      	ldr	r1, [sp, #8]
 8011290:	461a      	mov	r2, r3
 8011292:	4648      	mov	r0, r9
 8011294:	f000 fc04 	bl	8011aa0 <__lshift>
 8011298:	9002      	str	r0, [sp, #8]
 801129a:	9b06      	ldr	r3, [sp, #24]
 801129c:	2b00      	cmp	r3, #0
 801129e:	dd05      	ble.n	80112ac <_dtoa_r+0x84c>
 80112a0:	4621      	mov	r1, r4
 80112a2:	461a      	mov	r2, r3
 80112a4:	4648      	mov	r0, r9
 80112a6:	f000 fbfb 	bl	8011aa0 <__lshift>
 80112aa:	4604      	mov	r4, r0
 80112ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d061      	beq.n	8011376 <_dtoa_r+0x916>
 80112b2:	9802      	ldr	r0, [sp, #8]
 80112b4:	4621      	mov	r1, r4
 80112b6:	f000 fc5f 	bl	8011b78 <__mcmp>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	da5b      	bge.n	8011376 <_dtoa_r+0x916>
 80112be:	2300      	movs	r3, #0
 80112c0:	9902      	ldr	r1, [sp, #8]
 80112c2:	220a      	movs	r2, #10
 80112c4:	4648      	mov	r0, r9
 80112c6:	f000 fa47 	bl	8011758 <__multadd>
 80112ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112cc:	9002      	str	r0, [sp, #8]
 80112ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f000 8177 	beq.w	80115c6 <_dtoa_r+0xb66>
 80112d8:	4629      	mov	r1, r5
 80112da:	2300      	movs	r3, #0
 80112dc:	220a      	movs	r2, #10
 80112de:	4648      	mov	r0, r9
 80112e0:	f000 fa3a 	bl	8011758 <__multadd>
 80112e4:	f1bb 0f00 	cmp.w	fp, #0
 80112e8:	4605      	mov	r5, r0
 80112ea:	dc6f      	bgt.n	80113cc <_dtoa_r+0x96c>
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	dc49      	bgt.n	8011386 <_dtoa_r+0x926>
 80112f2:	e06b      	b.n	80113cc <_dtoa_r+0x96c>
 80112f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80112fa:	e73c      	b.n	8011176 <_dtoa_r+0x716>
 80112fc:	3fe00000 	.word	0x3fe00000
 8011300:	40240000 	.word	0x40240000
 8011304:	9b03      	ldr	r3, [sp, #12]
 8011306:	1e5c      	subs	r4, r3, #1
 8011308:	9b08      	ldr	r3, [sp, #32]
 801130a:	42a3      	cmp	r3, r4
 801130c:	db09      	blt.n	8011322 <_dtoa_r+0x8c2>
 801130e:	1b1c      	subs	r4, r3, r4
 8011310:	9b03      	ldr	r3, [sp, #12]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f6bf af30 	bge.w	8011178 <_dtoa_r+0x718>
 8011318:	9b00      	ldr	r3, [sp, #0]
 801131a:	9a03      	ldr	r2, [sp, #12]
 801131c:	1a9e      	subs	r6, r3, r2
 801131e:	2300      	movs	r3, #0
 8011320:	e72b      	b.n	801117a <_dtoa_r+0x71a>
 8011322:	9b08      	ldr	r3, [sp, #32]
 8011324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011326:	9408      	str	r4, [sp, #32]
 8011328:	1ae3      	subs	r3, r4, r3
 801132a:	441a      	add	r2, r3
 801132c:	9e00      	ldr	r6, [sp, #0]
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	920d      	str	r2, [sp, #52]	@ 0x34
 8011332:	2400      	movs	r4, #0
 8011334:	e721      	b.n	801117a <_dtoa_r+0x71a>
 8011336:	9c08      	ldr	r4, [sp, #32]
 8011338:	9e00      	ldr	r6, [sp, #0]
 801133a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801133c:	e728      	b.n	8011190 <_dtoa_r+0x730>
 801133e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011342:	e751      	b.n	80111e8 <_dtoa_r+0x788>
 8011344:	9a08      	ldr	r2, [sp, #32]
 8011346:	9902      	ldr	r1, [sp, #8]
 8011348:	e750      	b.n	80111ec <_dtoa_r+0x78c>
 801134a:	f8cd 8008 	str.w	r8, [sp, #8]
 801134e:	e751      	b.n	80111f4 <_dtoa_r+0x794>
 8011350:	2300      	movs	r3, #0
 8011352:	e779      	b.n	8011248 <_dtoa_r+0x7e8>
 8011354:	9b04      	ldr	r3, [sp, #16]
 8011356:	e777      	b.n	8011248 <_dtoa_r+0x7e8>
 8011358:	2300      	movs	r3, #0
 801135a:	9308      	str	r3, [sp, #32]
 801135c:	e779      	b.n	8011252 <_dtoa_r+0x7f2>
 801135e:	d093      	beq.n	8011288 <_dtoa_r+0x828>
 8011360:	9a00      	ldr	r2, [sp, #0]
 8011362:	331c      	adds	r3, #28
 8011364:	441a      	add	r2, r3
 8011366:	9200      	str	r2, [sp, #0]
 8011368:	9a06      	ldr	r2, [sp, #24]
 801136a:	441a      	add	r2, r3
 801136c:	441e      	add	r6, r3
 801136e:	9206      	str	r2, [sp, #24]
 8011370:	e78a      	b.n	8011288 <_dtoa_r+0x828>
 8011372:	4603      	mov	r3, r0
 8011374:	e7f4      	b.n	8011360 <_dtoa_r+0x900>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	46b8      	mov	r8, r7
 801137c:	dc20      	bgt.n	80113c0 <_dtoa_r+0x960>
 801137e:	469b      	mov	fp, r3
 8011380:	9b07      	ldr	r3, [sp, #28]
 8011382:	2b02      	cmp	r3, #2
 8011384:	dd1e      	ble.n	80113c4 <_dtoa_r+0x964>
 8011386:	f1bb 0f00 	cmp.w	fp, #0
 801138a:	f47f adb1 	bne.w	8010ef0 <_dtoa_r+0x490>
 801138e:	4621      	mov	r1, r4
 8011390:	465b      	mov	r3, fp
 8011392:	2205      	movs	r2, #5
 8011394:	4648      	mov	r0, r9
 8011396:	f000 f9df 	bl	8011758 <__multadd>
 801139a:	4601      	mov	r1, r0
 801139c:	4604      	mov	r4, r0
 801139e:	9802      	ldr	r0, [sp, #8]
 80113a0:	f000 fbea 	bl	8011b78 <__mcmp>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f77f ada3 	ble.w	8010ef0 <_dtoa_r+0x490>
 80113aa:	4656      	mov	r6, sl
 80113ac:	2331      	movs	r3, #49	@ 0x31
 80113ae:	f806 3b01 	strb.w	r3, [r6], #1
 80113b2:	f108 0801 	add.w	r8, r8, #1
 80113b6:	e59f      	b.n	8010ef8 <_dtoa_r+0x498>
 80113b8:	9c03      	ldr	r4, [sp, #12]
 80113ba:	46b8      	mov	r8, r7
 80113bc:	4625      	mov	r5, r4
 80113be:	e7f4      	b.n	80113aa <_dtoa_r+0x94a>
 80113c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80113c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8101 	beq.w	80115ce <_dtoa_r+0xb6e>
 80113cc:	2e00      	cmp	r6, #0
 80113ce:	dd05      	ble.n	80113dc <_dtoa_r+0x97c>
 80113d0:	4629      	mov	r1, r5
 80113d2:	4632      	mov	r2, r6
 80113d4:	4648      	mov	r0, r9
 80113d6:	f000 fb63 	bl	8011aa0 <__lshift>
 80113da:	4605      	mov	r5, r0
 80113dc:	9b08      	ldr	r3, [sp, #32]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d05c      	beq.n	801149c <_dtoa_r+0xa3c>
 80113e2:	6869      	ldr	r1, [r5, #4]
 80113e4:	4648      	mov	r0, r9
 80113e6:	f000 f955 	bl	8011694 <_Balloc>
 80113ea:	4606      	mov	r6, r0
 80113ec:	b928      	cbnz	r0, 80113fa <_dtoa_r+0x99a>
 80113ee:	4b82      	ldr	r3, [pc, #520]	@ (80115f8 <_dtoa_r+0xb98>)
 80113f0:	4602      	mov	r2, r0
 80113f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80113f6:	f7ff bb4a 	b.w	8010a8e <_dtoa_r+0x2e>
 80113fa:	692a      	ldr	r2, [r5, #16]
 80113fc:	3202      	adds	r2, #2
 80113fe:	0092      	lsls	r2, r2, #2
 8011400:	f105 010c 	add.w	r1, r5, #12
 8011404:	300c      	adds	r0, #12
 8011406:	f7ff fa94 	bl	8010932 <memcpy>
 801140a:	2201      	movs	r2, #1
 801140c:	4631      	mov	r1, r6
 801140e:	4648      	mov	r0, r9
 8011410:	f000 fb46 	bl	8011aa0 <__lshift>
 8011414:	f10a 0301 	add.w	r3, sl, #1
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	eb0a 030b 	add.w	r3, sl, fp
 801141e:	9308      	str	r3, [sp, #32]
 8011420:	9b04      	ldr	r3, [sp, #16]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	462f      	mov	r7, r5
 8011428:	9306      	str	r3, [sp, #24]
 801142a:	4605      	mov	r5, r0
 801142c:	9b00      	ldr	r3, [sp, #0]
 801142e:	9802      	ldr	r0, [sp, #8]
 8011430:	4621      	mov	r1, r4
 8011432:	f103 3bff 	add.w	fp, r3, #4294967295
 8011436:	f7ff fa8a 	bl	801094e <quorem>
 801143a:	4603      	mov	r3, r0
 801143c:	3330      	adds	r3, #48	@ 0x30
 801143e:	9003      	str	r0, [sp, #12]
 8011440:	4639      	mov	r1, r7
 8011442:	9802      	ldr	r0, [sp, #8]
 8011444:	9309      	str	r3, [sp, #36]	@ 0x24
 8011446:	f000 fb97 	bl	8011b78 <__mcmp>
 801144a:	462a      	mov	r2, r5
 801144c:	9004      	str	r0, [sp, #16]
 801144e:	4621      	mov	r1, r4
 8011450:	4648      	mov	r0, r9
 8011452:	f000 fbad 	bl	8011bb0 <__mdiff>
 8011456:	68c2      	ldr	r2, [r0, #12]
 8011458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801145a:	4606      	mov	r6, r0
 801145c:	bb02      	cbnz	r2, 80114a0 <_dtoa_r+0xa40>
 801145e:	4601      	mov	r1, r0
 8011460:	9802      	ldr	r0, [sp, #8]
 8011462:	f000 fb89 	bl	8011b78 <__mcmp>
 8011466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011468:	4602      	mov	r2, r0
 801146a:	4631      	mov	r1, r6
 801146c:	4648      	mov	r0, r9
 801146e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011470:	9309      	str	r3, [sp, #36]	@ 0x24
 8011472:	f000 f94f 	bl	8011714 <_Bfree>
 8011476:	9b07      	ldr	r3, [sp, #28]
 8011478:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801147a:	9e00      	ldr	r6, [sp, #0]
 801147c:	ea42 0103 	orr.w	r1, r2, r3
 8011480:	9b06      	ldr	r3, [sp, #24]
 8011482:	4319      	orrs	r1, r3
 8011484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011486:	d10d      	bne.n	80114a4 <_dtoa_r+0xa44>
 8011488:	2b39      	cmp	r3, #57	@ 0x39
 801148a:	d027      	beq.n	80114dc <_dtoa_r+0xa7c>
 801148c:	9a04      	ldr	r2, [sp, #16]
 801148e:	2a00      	cmp	r2, #0
 8011490:	dd01      	ble.n	8011496 <_dtoa_r+0xa36>
 8011492:	9b03      	ldr	r3, [sp, #12]
 8011494:	3331      	adds	r3, #49	@ 0x31
 8011496:	f88b 3000 	strb.w	r3, [fp]
 801149a:	e52e      	b.n	8010efa <_dtoa_r+0x49a>
 801149c:	4628      	mov	r0, r5
 801149e:	e7b9      	b.n	8011414 <_dtoa_r+0x9b4>
 80114a0:	2201      	movs	r2, #1
 80114a2:	e7e2      	b.n	801146a <_dtoa_r+0xa0a>
 80114a4:	9904      	ldr	r1, [sp, #16]
 80114a6:	2900      	cmp	r1, #0
 80114a8:	db04      	blt.n	80114b4 <_dtoa_r+0xa54>
 80114aa:	9807      	ldr	r0, [sp, #28]
 80114ac:	4301      	orrs	r1, r0
 80114ae:	9806      	ldr	r0, [sp, #24]
 80114b0:	4301      	orrs	r1, r0
 80114b2:	d120      	bne.n	80114f6 <_dtoa_r+0xa96>
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	ddee      	ble.n	8011496 <_dtoa_r+0xa36>
 80114b8:	9902      	ldr	r1, [sp, #8]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2201      	movs	r2, #1
 80114be:	4648      	mov	r0, r9
 80114c0:	f000 faee 	bl	8011aa0 <__lshift>
 80114c4:	4621      	mov	r1, r4
 80114c6:	9002      	str	r0, [sp, #8]
 80114c8:	f000 fb56 	bl	8011b78 <__mcmp>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	9b00      	ldr	r3, [sp, #0]
 80114d0:	dc02      	bgt.n	80114d8 <_dtoa_r+0xa78>
 80114d2:	d1e0      	bne.n	8011496 <_dtoa_r+0xa36>
 80114d4:	07da      	lsls	r2, r3, #31
 80114d6:	d5de      	bpl.n	8011496 <_dtoa_r+0xa36>
 80114d8:	2b39      	cmp	r3, #57	@ 0x39
 80114da:	d1da      	bne.n	8011492 <_dtoa_r+0xa32>
 80114dc:	2339      	movs	r3, #57	@ 0x39
 80114de:	f88b 3000 	strb.w	r3, [fp]
 80114e2:	4633      	mov	r3, r6
 80114e4:	461e      	mov	r6, r3
 80114e6:	3b01      	subs	r3, #1
 80114e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80114ec:	2a39      	cmp	r2, #57	@ 0x39
 80114ee:	d04e      	beq.n	801158e <_dtoa_r+0xb2e>
 80114f0:	3201      	adds	r2, #1
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	e501      	b.n	8010efa <_dtoa_r+0x49a>
 80114f6:	2a00      	cmp	r2, #0
 80114f8:	dd03      	ble.n	8011502 <_dtoa_r+0xaa2>
 80114fa:	2b39      	cmp	r3, #57	@ 0x39
 80114fc:	d0ee      	beq.n	80114dc <_dtoa_r+0xa7c>
 80114fe:	3301      	adds	r3, #1
 8011500:	e7c9      	b.n	8011496 <_dtoa_r+0xa36>
 8011502:	9a00      	ldr	r2, [sp, #0]
 8011504:	9908      	ldr	r1, [sp, #32]
 8011506:	f802 3c01 	strb.w	r3, [r2, #-1]
 801150a:	428a      	cmp	r2, r1
 801150c:	d028      	beq.n	8011560 <_dtoa_r+0xb00>
 801150e:	9902      	ldr	r1, [sp, #8]
 8011510:	2300      	movs	r3, #0
 8011512:	220a      	movs	r2, #10
 8011514:	4648      	mov	r0, r9
 8011516:	f000 f91f 	bl	8011758 <__multadd>
 801151a:	42af      	cmp	r7, r5
 801151c:	9002      	str	r0, [sp, #8]
 801151e:	f04f 0300 	mov.w	r3, #0
 8011522:	f04f 020a 	mov.w	r2, #10
 8011526:	4639      	mov	r1, r7
 8011528:	4648      	mov	r0, r9
 801152a:	d107      	bne.n	801153c <_dtoa_r+0xadc>
 801152c:	f000 f914 	bl	8011758 <__multadd>
 8011530:	4607      	mov	r7, r0
 8011532:	4605      	mov	r5, r0
 8011534:	9b00      	ldr	r3, [sp, #0]
 8011536:	3301      	adds	r3, #1
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	e777      	b.n	801142c <_dtoa_r+0x9cc>
 801153c:	f000 f90c 	bl	8011758 <__multadd>
 8011540:	4629      	mov	r1, r5
 8011542:	4607      	mov	r7, r0
 8011544:	2300      	movs	r3, #0
 8011546:	220a      	movs	r2, #10
 8011548:	4648      	mov	r0, r9
 801154a:	f000 f905 	bl	8011758 <__multadd>
 801154e:	4605      	mov	r5, r0
 8011550:	e7f0      	b.n	8011534 <_dtoa_r+0xad4>
 8011552:	f1bb 0f00 	cmp.w	fp, #0
 8011556:	bfcc      	ite	gt
 8011558:	465e      	movgt	r6, fp
 801155a:	2601      	movle	r6, #1
 801155c:	4456      	add	r6, sl
 801155e:	2700      	movs	r7, #0
 8011560:	9902      	ldr	r1, [sp, #8]
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	2201      	movs	r2, #1
 8011566:	4648      	mov	r0, r9
 8011568:	f000 fa9a 	bl	8011aa0 <__lshift>
 801156c:	4621      	mov	r1, r4
 801156e:	9002      	str	r0, [sp, #8]
 8011570:	f000 fb02 	bl	8011b78 <__mcmp>
 8011574:	2800      	cmp	r0, #0
 8011576:	dcb4      	bgt.n	80114e2 <_dtoa_r+0xa82>
 8011578:	d102      	bne.n	8011580 <_dtoa_r+0xb20>
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	07db      	lsls	r3, r3, #31
 801157e:	d4b0      	bmi.n	80114e2 <_dtoa_r+0xa82>
 8011580:	4633      	mov	r3, r6
 8011582:	461e      	mov	r6, r3
 8011584:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011588:	2a30      	cmp	r2, #48	@ 0x30
 801158a:	d0fa      	beq.n	8011582 <_dtoa_r+0xb22>
 801158c:	e4b5      	b.n	8010efa <_dtoa_r+0x49a>
 801158e:	459a      	cmp	sl, r3
 8011590:	d1a8      	bne.n	80114e4 <_dtoa_r+0xa84>
 8011592:	2331      	movs	r3, #49	@ 0x31
 8011594:	f108 0801 	add.w	r8, r8, #1
 8011598:	f88a 3000 	strb.w	r3, [sl]
 801159c:	e4ad      	b.n	8010efa <_dtoa_r+0x49a>
 801159e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80115a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80115fc <_dtoa_r+0xb9c>
 80115a4:	b11b      	cbz	r3, 80115ae <_dtoa_r+0xb4e>
 80115a6:	f10a 0308 	add.w	r3, sl, #8
 80115aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	4650      	mov	r0, sl
 80115b0:	b017      	add	sp, #92	@ 0x5c
 80115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b6:	9b07      	ldr	r3, [sp, #28]
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	f77f ae2e 	ble.w	801121a <_dtoa_r+0x7ba>
 80115be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115c0:	9308      	str	r3, [sp, #32]
 80115c2:	2001      	movs	r0, #1
 80115c4:	e64d      	b.n	8011262 <_dtoa_r+0x802>
 80115c6:	f1bb 0f00 	cmp.w	fp, #0
 80115ca:	f77f aed9 	ble.w	8011380 <_dtoa_r+0x920>
 80115ce:	4656      	mov	r6, sl
 80115d0:	9802      	ldr	r0, [sp, #8]
 80115d2:	4621      	mov	r1, r4
 80115d4:	f7ff f9bb 	bl	801094e <quorem>
 80115d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80115dc:	f806 3b01 	strb.w	r3, [r6], #1
 80115e0:	eba6 020a 	sub.w	r2, r6, sl
 80115e4:	4593      	cmp	fp, r2
 80115e6:	ddb4      	ble.n	8011552 <_dtoa_r+0xaf2>
 80115e8:	9902      	ldr	r1, [sp, #8]
 80115ea:	2300      	movs	r3, #0
 80115ec:	220a      	movs	r2, #10
 80115ee:	4648      	mov	r0, r9
 80115f0:	f000 f8b2 	bl	8011758 <__multadd>
 80115f4:	9002      	str	r0, [sp, #8]
 80115f6:	e7eb      	b.n	80115d0 <_dtoa_r+0xb70>
 80115f8:	08012b20 	.word	0x08012b20
 80115fc:	08012aa4 	.word	0x08012aa4

08011600 <_free_r>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4605      	mov	r5, r0
 8011604:	2900      	cmp	r1, #0
 8011606:	d041      	beq.n	801168c <_free_r+0x8c>
 8011608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801160c:	1f0c      	subs	r4, r1, #4
 801160e:	2b00      	cmp	r3, #0
 8011610:	bfb8      	it	lt
 8011612:	18e4      	addlt	r4, r4, r3
 8011614:	f7fe fb96 	bl	800fd44 <__malloc_lock>
 8011618:	4a1d      	ldr	r2, [pc, #116]	@ (8011690 <_free_r+0x90>)
 801161a:	6813      	ldr	r3, [r2, #0]
 801161c:	b933      	cbnz	r3, 801162c <_free_r+0x2c>
 801161e:	6063      	str	r3, [r4, #4]
 8011620:	6014      	str	r4, [r2, #0]
 8011622:	4628      	mov	r0, r5
 8011624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011628:	f7fe bb92 	b.w	800fd50 <__malloc_unlock>
 801162c:	42a3      	cmp	r3, r4
 801162e:	d908      	bls.n	8011642 <_free_r+0x42>
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	1821      	adds	r1, r4, r0
 8011634:	428b      	cmp	r3, r1
 8011636:	bf01      	itttt	eq
 8011638:	6819      	ldreq	r1, [r3, #0]
 801163a:	685b      	ldreq	r3, [r3, #4]
 801163c:	1809      	addeq	r1, r1, r0
 801163e:	6021      	streq	r1, [r4, #0]
 8011640:	e7ed      	b.n	801161e <_free_r+0x1e>
 8011642:	461a      	mov	r2, r3
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	b10b      	cbz	r3, 801164c <_free_r+0x4c>
 8011648:	42a3      	cmp	r3, r4
 801164a:	d9fa      	bls.n	8011642 <_free_r+0x42>
 801164c:	6811      	ldr	r1, [r2, #0]
 801164e:	1850      	adds	r0, r2, r1
 8011650:	42a0      	cmp	r0, r4
 8011652:	d10b      	bne.n	801166c <_free_r+0x6c>
 8011654:	6820      	ldr	r0, [r4, #0]
 8011656:	4401      	add	r1, r0
 8011658:	1850      	adds	r0, r2, r1
 801165a:	4283      	cmp	r3, r0
 801165c:	6011      	str	r1, [r2, #0]
 801165e:	d1e0      	bne.n	8011622 <_free_r+0x22>
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	6053      	str	r3, [r2, #4]
 8011666:	4408      	add	r0, r1
 8011668:	6010      	str	r0, [r2, #0]
 801166a:	e7da      	b.n	8011622 <_free_r+0x22>
 801166c:	d902      	bls.n	8011674 <_free_r+0x74>
 801166e:	230c      	movs	r3, #12
 8011670:	602b      	str	r3, [r5, #0]
 8011672:	e7d6      	b.n	8011622 <_free_r+0x22>
 8011674:	6820      	ldr	r0, [r4, #0]
 8011676:	1821      	adds	r1, r4, r0
 8011678:	428b      	cmp	r3, r1
 801167a:	bf04      	itt	eq
 801167c:	6819      	ldreq	r1, [r3, #0]
 801167e:	685b      	ldreq	r3, [r3, #4]
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	bf04      	itt	eq
 8011684:	1809      	addeq	r1, r1, r0
 8011686:	6021      	streq	r1, [r4, #0]
 8011688:	6054      	str	r4, [r2, #4]
 801168a:	e7ca      	b.n	8011622 <_free_r+0x22>
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	bf00      	nop
 8011690:	200022ac 	.word	0x200022ac

08011694 <_Balloc>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	69c6      	ldr	r6, [r0, #28]
 8011698:	4604      	mov	r4, r0
 801169a:	460d      	mov	r5, r1
 801169c:	b976      	cbnz	r6, 80116bc <_Balloc+0x28>
 801169e:	2010      	movs	r0, #16
 80116a0:	f7fe fa9e 	bl	800fbe0 <malloc>
 80116a4:	4602      	mov	r2, r0
 80116a6:	61e0      	str	r0, [r4, #28]
 80116a8:	b920      	cbnz	r0, 80116b4 <_Balloc+0x20>
 80116aa:	4b18      	ldr	r3, [pc, #96]	@ (801170c <_Balloc+0x78>)
 80116ac:	4818      	ldr	r0, [pc, #96]	@ (8011710 <_Balloc+0x7c>)
 80116ae:	216b      	movs	r1, #107	@ 0x6b
 80116b0:	f000 fc16 	bl	8011ee0 <__assert_func>
 80116b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116b8:	6006      	str	r6, [r0, #0]
 80116ba:	60c6      	str	r6, [r0, #12]
 80116bc:	69e6      	ldr	r6, [r4, #28]
 80116be:	68f3      	ldr	r3, [r6, #12]
 80116c0:	b183      	cbz	r3, 80116e4 <_Balloc+0x50>
 80116c2:	69e3      	ldr	r3, [r4, #28]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116ca:	b9b8      	cbnz	r0, 80116fc <_Balloc+0x68>
 80116cc:	2101      	movs	r1, #1
 80116ce:	fa01 f605 	lsl.w	r6, r1, r5
 80116d2:	1d72      	adds	r2, r6, #5
 80116d4:	0092      	lsls	r2, r2, #2
 80116d6:	4620      	mov	r0, r4
 80116d8:	f000 fc20 	bl	8011f1c <_calloc_r>
 80116dc:	b160      	cbz	r0, 80116f8 <_Balloc+0x64>
 80116de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116e2:	e00e      	b.n	8011702 <_Balloc+0x6e>
 80116e4:	2221      	movs	r2, #33	@ 0x21
 80116e6:	2104      	movs	r1, #4
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 fc17 	bl	8011f1c <_calloc_r>
 80116ee:	69e3      	ldr	r3, [r4, #28]
 80116f0:	60f0      	str	r0, [r6, #12]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1e4      	bne.n	80116c2 <_Balloc+0x2e>
 80116f8:	2000      	movs	r0, #0
 80116fa:	bd70      	pop	{r4, r5, r6, pc}
 80116fc:	6802      	ldr	r2, [r0, #0]
 80116fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011702:	2300      	movs	r3, #0
 8011704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011708:	e7f7      	b.n	80116fa <_Balloc+0x66>
 801170a:	bf00      	nop
 801170c:	08012ab1 	.word	0x08012ab1
 8011710:	08012b31 	.word	0x08012b31

08011714 <_Bfree>:
 8011714:	b570      	push	{r4, r5, r6, lr}
 8011716:	69c6      	ldr	r6, [r0, #28]
 8011718:	4605      	mov	r5, r0
 801171a:	460c      	mov	r4, r1
 801171c:	b976      	cbnz	r6, 801173c <_Bfree+0x28>
 801171e:	2010      	movs	r0, #16
 8011720:	f7fe fa5e 	bl	800fbe0 <malloc>
 8011724:	4602      	mov	r2, r0
 8011726:	61e8      	str	r0, [r5, #28]
 8011728:	b920      	cbnz	r0, 8011734 <_Bfree+0x20>
 801172a:	4b09      	ldr	r3, [pc, #36]	@ (8011750 <_Bfree+0x3c>)
 801172c:	4809      	ldr	r0, [pc, #36]	@ (8011754 <_Bfree+0x40>)
 801172e:	218f      	movs	r1, #143	@ 0x8f
 8011730:	f000 fbd6 	bl	8011ee0 <__assert_func>
 8011734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011738:	6006      	str	r6, [r0, #0]
 801173a:	60c6      	str	r6, [r0, #12]
 801173c:	b13c      	cbz	r4, 801174e <_Bfree+0x3a>
 801173e:	69eb      	ldr	r3, [r5, #28]
 8011740:	6862      	ldr	r2, [r4, #4]
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011748:	6021      	str	r1, [r4, #0]
 801174a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801174e:	bd70      	pop	{r4, r5, r6, pc}
 8011750:	08012ab1 	.word	0x08012ab1
 8011754:	08012b31 	.word	0x08012b31

08011758 <__multadd>:
 8011758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175c:	690d      	ldr	r5, [r1, #16]
 801175e:	4607      	mov	r7, r0
 8011760:	460c      	mov	r4, r1
 8011762:	461e      	mov	r6, r3
 8011764:	f101 0c14 	add.w	ip, r1, #20
 8011768:	2000      	movs	r0, #0
 801176a:	f8dc 3000 	ldr.w	r3, [ip]
 801176e:	b299      	uxth	r1, r3
 8011770:	fb02 6101 	mla	r1, r2, r1, r6
 8011774:	0c1e      	lsrs	r6, r3, #16
 8011776:	0c0b      	lsrs	r3, r1, #16
 8011778:	fb02 3306 	mla	r3, r2, r6, r3
 801177c:	b289      	uxth	r1, r1
 801177e:	3001      	adds	r0, #1
 8011780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011784:	4285      	cmp	r5, r0
 8011786:	f84c 1b04 	str.w	r1, [ip], #4
 801178a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801178e:	dcec      	bgt.n	801176a <__multadd+0x12>
 8011790:	b30e      	cbz	r6, 80117d6 <__multadd+0x7e>
 8011792:	68a3      	ldr	r3, [r4, #8]
 8011794:	42ab      	cmp	r3, r5
 8011796:	dc19      	bgt.n	80117cc <__multadd+0x74>
 8011798:	6861      	ldr	r1, [r4, #4]
 801179a:	4638      	mov	r0, r7
 801179c:	3101      	adds	r1, #1
 801179e:	f7ff ff79 	bl	8011694 <_Balloc>
 80117a2:	4680      	mov	r8, r0
 80117a4:	b928      	cbnz	r0, 80117b2 <__multadd+0x5a>
 80117a6:	4602      	mov	r2, r0
 80117a8:	4b0c      	ldr	r3, [pc, #48]	@ (80117dc <__multadd+0x84>)
 80117aa:	480d      	ldr	r0, [pc, #52]	@ (80117e0 <__multadd+0x88>)
 80117ac:	21ba      	movs	r1, #186	@ 0xba
 80117ae:	f000 fb97 	bl	8011ee0 <__assert_func>
 80117b2:	6922      	ldr	r2, [r4, #16]
 80117b4:	3202      	adds	r2, #2
 80117b6:	f104 010c 	add.w	r1, r4, #12
 80117ba:	0092      	lsls	r2, r2, #2
 80117bc:	300c      	adds	r0, #12
 80117be:	f7ff f8b8 	bl	8010932 <memcpy>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7ff ffa5 	bl	8011714 <_Bfree>
 80117ca:	4644      	mov	r4, r8
 80117cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117d0:	3501      	adds	r5, #1
 80117d2:	615e      	str	r6, [r3, #20]
 80117d4:	6125      	str	r5, [r4, #16]
 80117d6:	4620      	mov	r0, r4
 80117d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117dc:	08012b20 	.word	0x08012b20
 80117e0:	08012b31 	.word	0x08012b31

080117e4 <__hi0bits>:
 80117e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80117e8:	4603      	mov	r3, r0
 80117ea:	bf36      	itet	cc
 80117ec:	0403      	lslcc	r3, r0, #16
 80117ee:	2000      	movcs	r0, #0
 80117f0:	2010      	movcc	r0, #16
 80117f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80117f6:	bf3c      	itt	cc
 80117f8:	021b      	lslcc	r3, r3, #8
 80117fa:	3008      	addcc	r0, #8
 80117fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011800:	bf3c      	itt	cc
 8011802:	011b      	lslcc	r3, r3, #4
 8011804:	3004      	addcc	r0, #4
 8011806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801180a:	bf3c      	itt	cc
 801180c:	009b      	lslcc	r3, r3, #2
 801180e:	3002      	addcc	r0, #2
 8011810:	2b00      	cmp	r3, #0
 8011812:	db05      	blt.n	8011820 <__hi0bits+0x3c>
 8011814:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011818:	f100 0001 	add.w	r0, r0, #1
 801181c:	bf08      	it	eq
 801181e:	2020      	moveq	r0, #32
 8011820:	4770      	bx	lr

08011822 <__lo0bits>:
 8011822:	6803      	ldr	r3, [r0, #0]
 8011824:	4602      	mov	r2, r0
 8011826:	f013 0007 	ands.w	r0, r3, #7
 801182a:	d00b      	beq.n	8011844 <__lo0bits+0x22>
 801182c:	07d9      	lsls	r1, r3, #31
 801182e:	d421      	bmi.n	8011874 <__lo0bits+0x52>
 8011830:	0798      	lsls	r0, r3, #30
 8011832:	bf49      	itett	mi
 8011834:	085b      	lsrmi	r3, r3, #1
 8011836:	089b      	lsrpl	r3, r3, #2
 8011838:	2001      	movmi	r0, #1
 801183a:	6013      	strmi	r3, [r2, #0]
 801183c:	bf5c      	itt	pl
 801183e:	6013      	strpl	r3, [r2, #0]
 8011840:	2002      	movpl	r0, #2
 8011842:	4770      	bx	lr
 8011844:	b299      	uxth	r1, r3
 8011846:	b909      	cbnz	r1, 801184c <__lo0bits+0x2a>
 8011848:	0c1b      	lsrs	r3, r3, #16
 801184a:	2010      	movs	r0, #16
 801184c:	b2d9      	uxtb	r1, r3
 801184e:	b909      	cbnz	r1, 8011854 <__lo0bits+0x32>
 8011850:	3008      	adds	r0, #8
 8011852:	0a1b      	lsrs	r3, r3, #8
 8011854:	0719      	lsls	r1, r3, #28
 8011856:	bf04      	itt	eq
 8011858:	091b      	lsreq	r3, r3, #4
 801185a:	3004      	addeq	r0, #4
 801185c:	0799      	lsls	r1, r3, #30
 801185e:	bf04      	itt	eq
 8011860:	089b      	lsreq	r3, r3, #2
 8011862:	3002      	addeq	r0, #2
 8011864:	07d9      	lsls	r1, r3, #31
 8011866:	d403      	bmi.n	8011870 <__lo0bits+0x4e>
 8011868:	085b      	lsrs	r3, r3, #1
 801186a:	f100 0001 	add.w	r0, r0, #1
 801186e:	d003      	beq.n	8011878 <__lo0bits+0x56>
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	4770      	bx	lr
 8011874:	2000      	movs	r0, #0
 8011876:	4770      	bx	lr
 8011878:	2020      	movs	r0, #32
 801187a:	4770      	bx	lr

0801187c <__i2b>:
 801187c:	b510      	push	{r4, lr}
 801187e:	460c      	mov	r4, r1
 8011880:	2101      	movs	r1, #1
 8011882:	f7ff ff07 	bl	8011694 <_Balloc>
 8011886:	4602      	mov	r2, r0
 8011888:	b928      	cbnz	r0, 8011896 <__i2b+0x1a>
 801188a:	4b05      	ldr	r3, [pc, #20]	@ (80118a0 <__i2b+0x24>)
 801188c:	4805      	ldr	r0, [pc, #20]	@ (80118a4 <__i2b+0x28>)
 801188e:	f240 1145 	movw	r1, #325	@ 0x145
 8011892:	f000 fb25 	bl	8011ee0 <__assert_func>
 8011896:	2301      	movs	r3, #1
 8011898:	6144      	str	r4, [r0, #20]
 801189a:	6103      	str	r3, [r0, #16]
 801189c:	bd10      	pop	{r4, pc}
 801189e:	bf00      	nop
 80118a0:	08012b20 	.word	0x08012b20
 80118a4:	08012b31 	.word	0x08012b31

080118a8 <__multiply>:
 80118a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ac:	4617      	mov	r7, r2
 80118ae:	690a      	ldr	r2, [r1, #16]
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	bfa8      	it	ge
 80118b6:	463b      	movge	r3, r7
 80118b8:	4689      	mov	r9, r1
 80118ba:	bfa4      	itt	ge
 80118bc:	460f      	movge	r7, r1
 80118be:	4699      	movge	r9, r3
 80118c0:	693d      	ldr	r5, [r7, #16]
 80118c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	6879      	ldr	r1, [r7, #4]
 80118ca:	eb05 060a 	add.w	r6, r5, sl
 80118ce:	42b3      	cmp	r3, r6
 80118d0:	b085      	sub	sp, #20
 80118d2:	bfb8      	it	lt
 80118d4:	3101      	addlt	r1, #1
 80118d6:	f7ff fedd 	bl	8011694 <_Balloc>
 80118da:	b930      	cbnz	r0, 80118ea <__multiply+0x42>
 80118dc:	4602      	mov	r2, r0
 80118de:	4b41      	ldr	r3, [pc, #260]	@ (80119e4 <__multiply+0x13c>)
 80118e0:	4841      	ldr	r0, [pc, #260]	@ (80119e8 <__multiply+0x140>)
 80118e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80118e6:	f000 fafb 	bl	8011ee0 <__assert_func>
 80118ea:	f100 0414 	add.w	r4, r0, #20
 80118ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80118f2:	4623      	mov	r3, r4
 80118f4:	2200      	movs	r2, #0
 80118f6:	4573      	cmp	r3, lr
 80118f8:	d320      	bcc.n	801193c <__multiply+0x94>
 80118fa:	f107 0814 	add.w	r8, r7, #20
 80118fe:	f109 0114 	add.w	r1, r9, #20
 8011902:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011906:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801190a:	9302      	str	r3, [sp, #8]
 801190c:	1beb      	subs	r3, r5, r7
 801190e:	3b15      	subs	r3, #21
 8011910:	f023 0303 	bic.w	r3, r3, #3
 8011914:	3304      	adds	r3, #4
 8011916:	3715      	adds	r7, #21
 8011918:	42bd      	cmp	r5, r7
 801191a:	bf38      	it	cc
 801191c:	2304      	movcc	r3, #4
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	9b02      	ldr	r3, [sp, #8]
 8011922:	9103      	str	r1, [sp, #12]
 8011924:	428b      	cmp	r3, r1
 8011926:	d80c      	bhi.n	8011942 <__multiply+0x9a>
 8011928:	2e00      	cmp	r6, #0
 801192a:	dd03      	ble.n	8011934 <__multiply+0x8c>
 801192c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011930:	2b00      	cmp	r3, #0
 8011932:	d055      	beq.n	80119e0 <__multiply+0x138>
 8011934:	6106      	str	r6, [r0, #16]
 8011936:	b005      	add	sp, #20
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	f843 2b04 	str.w	r2, [r3], #4
 8011940:	e7d9      	b.n	80118f6 <__multiply+0x4e>
 8011942:	f8b1 a000 	ldrh.w	sl, [r1]
 8011946:	f1ba 0f00 	cmp.w	sl, #0
 801194a:	d01f      	beq.n	801198c <__multiply+0xe4>
 801194c:	46c4      	mov	ip, r8
 801194e:	46a1      	mov	r9, r4
 8011950:	2700      	movs	r7, #0
 8011952:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011956:	f8d9 3000 	ldr.w	r3, [r9]
 801195a:	fa1f fb82 	uxth.w	fp, r2
 801195e:	b29b      	uxth	r3, r3
 8011960:	fb0a 330b 	mla	r3, sl, fp, r3
 8011964:	443b      	add	r3, r7
 8011966:	f8d9 7000 	ldr.w	r7, [r9]
 801196a:	0c12      	lsrs	r2, r2, #16
 801196c:	0c3f      	lsrs	r7, r7, #16
 801196e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011972:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011976:	b29b      	uxth	r3, r3
 8011978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801197c:	4565      	cmp	r5, ip
 801197e:	f849 3b04 	str.w	r3, [r9], #4
 8011982:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011986:	d8e4      	bhi.n	8011952 <__multiply+0xaa>
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	50e7      	str	r7, [r4, r3]
 801198c:	9b03      	ldr	r3, [sp, #12]
 801198e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011992:	3104      	adds	r1, #4
 8011994:	f1b9 0f00 	cmp.w	r9, #0
 8011998:	d020      	beq.n	80119dc <__multiply+0x134>
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	4647      	mov	r7, r8
 801199e:	46a4      	mov	ip, r4
 80119a0:	f04f 0a00 	mov.w	sl, #0
 80119a4:	f8b7 b000 	ldrh.w	fp, [r7]
 80119a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80119ac:	fb09 220b 	mla	r2, r9, fp, r2
 80119b0:	4452      	add	r2, sl
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119b8:	f84c 3b04 	str.w	r3, [ip], #4
 80119bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80119c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119c4:	f8bc 3000 	ldrh.w	r3, [ip]
 80119c8:	fb09 330a 	mla	r3, r9, sl, r3
 80119cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80119d0:	42bd      	cmp	r5, r7
 80119d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119d6:	d8e5      	bhi.n	80119a4 <__multiply+0xfc>
 80119d8:	9a01      	ldr	r2, [sp, #4]
 80119da:	50a3      	str	r3, [r4, r2]
 80119dc:	3404      	adds	r4, #4
 80119de:	e79f      	b.n	8011920 <__multiply+0x78>
 80119e0:	3e01      	subs	r6, #1
 80119e2:	e7a1      	b.n	8011928 <__multiply+0x80>
 80119e4:	08012b20 	.word	0x08012b20
 80119e8:	08012b31 	.word	0x08012b31

080119ec <__pow5mult>:
 80119ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	4615      	mov	r5, r2
 80119f2:	f012 0203 	ands.w	r2, r2, #3
 80119f6:	4607      	mov	r7, r0
 80119f8:	460e      	mov	r6, r1
 80119fa:	d007      	beq.n	8011a0c <__pow5mult+0x20>
 80119fc:	4c25      	ldr	r4, [pc, #148]	@ (8011a94 <__pow5mult+0xa8>)
 80119fe:	3a01      	subs	r2, #1
 8011a00:	2300      	movs	r3, #0
 8011a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a06:	f7ff fea7 	bl	8011758 <__multadd>
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	10ad      	asrs	r5, r5, #2
 8011a0e:	d03d      	beq.n	8011a8c <__pow5mult+0xa0>
 8011a10:	69fc      	ldr	r4, [r7, #28]
 8011a12:	b97c      	cbnz	r4, 8011a34 <__pow5mult+0x48>
 8011a14:	2010      	movs	r0, #16
 8011a16:	f7fe f8e3 	bl	800fbe0 <malloc>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	61f8      	str	r0, [r7, #28]
 8011a1e:	b928      	cbnz	r0, 8011a2c <__pow5mult+0x40>
 8011a20:	4b1d      	ldr	r3, [pc, #116]	@ (8011a98 <__pow5mult+0xac>)
 8011a22:	481e      	ldr	r0, [pc, #120]	@ (8011a9c <__pow5mult+0xb0>)
 8011a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011a28:	f000 fa5a 	bl	8011ee0 <__assert_func>
 8011a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a30:	6004      	str	r4, [r0, #0]
 8011a32:	60c4      	str	r4, [r0, #12]
 8011a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a3c:	b94c      	cbnz	r4, 8011a52 <__pow5mult+0x66>
 8011a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8011a42:	4638      	mov	r0, r7
 8011a44:	f7ff ff1a 	bl	801187c <__i2b>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a4e:	4604      	mov	r4, r0
 8011a50:	6003      	str	r3, [r0, #0]
 8011a52:	f04f 0900 	mov.w	r9, #0
 8011a56:	07eb      	lsls	r3, r5, #31
 8011a58:	d50a      	bpl.n	8011a70 <__pow5mult+0x84>
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	4622      	mov	r2, r4
 8011a5e:	4638      	mov	r0, r7
 8011a60:	f7ff ff22 	bl	80118a8 <__multiply>
 8011a64:	4631      	mov	r1, r6
 8011a66:	4680      	mov	r8, r0
 8011a68:	4638      	mov	r0, r7
 8011a6a:	f7ff fe53 	bl	8011714 <_Bfree>
 8011a6e:	4646      	mov	r6, r8
 8011a70:	106d      	asrs	r5, r5, #1
 8011a72:	d00b      	beq.n	8011a8c <__pow5mult+0xa0>
 8011a74:	6820      	ldr	r0, [r4, #0]
 8011a76:	b938      	cbnz	r0, 8011a88 <__pow5mult+0x9c>
 8011a78:	4622      	mov	r2, r4
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7ff ff13 	bl	80118a8 <__multiply>
 8011a82:	6020      	str	r0, [r4, #0]
 8011a84:	f8c0 9000 	str.w	r9, [r0]
 8011a88:	4604      	mov	r4, r0
 8011a8a:	e7e4      	b.n	8011a56 <__pow5mult+0x6a>
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a92:	bf00      	nop
 8011a94:	08012be4 	.word	0x08012be4
 8011a98:	08012ab1 	.word	0x08012ab1
 8011a9c:	08012b31 	.word	0x08012b31

08011aa0 <__lshift>:
 8011aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	6849      	ldr	r1, [r1, #4]
 8011aa8:	6923      	ldr	r3, [r4, #16]
 8011aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011aae:	68a3      	ldr	r3, [r4, #8]
 8011ab0:	4607      	mov	r7, r0
 8011ab2:	4691      	mov	r9, r2
 8011ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ab8:	f108 0601 	add.w	r6, r8, #1
 8011abc:	42b3      	cmp	r3, r6
 8011abe:	db0b      	blt.n	8011ad8 <__lshift+0x38>
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f7ff fde7 	bl	8011694 <_Balloc>
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	b948      	cbnz	r0, 8011ade <__lshift+0x3e>
 8011aca:	4602      	mov	r2, r0
 8011acc:	4b28      	ldr	r3, [pc, #160]	@ (8011b70 <__lshift+0xd0>)
 8011ace:	4829      	ldr	r0, [pc, #164]	@ (8011b74 <__lshift+0xd4>)
 8011ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011ad4:	f000 fa04 	bl	8011ee0 <__assert_func>
 8011ad8:	3101      	adds	r1, #1
 8011ada:	005b      	lsls	r3, r3, #1
 8011adc:	e7ee      	b.n	8011abc <__lshift+0x1c>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	f100 0114 	add.w	r1, r0, #20
 8011ae4:	f100 0210 	add.w	r2, r0, #16
 8011ae8:	4618      	mov	r0, r3
 8011aea:	4553      	cmp	r3, sl
 8011aec:	db33      	blt.n	8011b56 <__lshift+0xb6>
 8011aee:	6920      	ldr	r0, [r4, #16]
 8011af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011af4:	f104 0314 	add.w	r3, r4, #20
 8011af8:	f019 091f 	ands.w	r9, r9, #31
 8011afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b04:	d02b      	beq.n	8011b5e <__lshift+0xbe>
 8011b06:	f1c9 0e20 	rsb	lr, r9, #32
 8011b0a:	468a      	mov	sl, r1
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	6818      	ldr	r0, [r3, #0]
 8011b10:	fa00 f009 	lsl.w	r0, r0, r9
 8011b14:	4310      	orrs	r0, r2
 8011b16:	f84a 0b04 	str.w	r0, [sl], #4
 8011b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b1e:	459c      	cmp	ip, r3
 8011b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b24:	d8f3      	bhi.n	8011b0e <__lshift+0x6e>
 8011b26:	ebac 0304 	sub.w	r3, ip, r4
 8011b2a:	3b15      	subs	r3, #21
 8011b2c:	f023 0303 	bic.w	r3, r3, #3
 8011b30:	3304      	adds	r3, #4
 8011b32:	f104 0015 	add.w	r0, r4, #21
 8011b36:	4560      	cmp	r0, ip
 8011b38:	bf88      	it	hi
 8011b3a:	2304      	movhi	r3, #4
 8011b3c:	50ca      	str	r2, [r1, r3]
 8011b3e:	b10a      	cbz	r2, 8011b44 <__lshift+0xa4>
 8011b40:	f108 0602 	add.w	r6, r8, #2
 8011b44:	3e01      	subs	r6, #1
 8011b46:	4638      	mov	r0, r7
 8011b48:	612e      	str	r6, [r5, #16]
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	f7ff fde2 	bl	8011714 <_Bfree>
 8011b50:	4628      	mov	r0, r5
 8011b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	e7c5      	b.n	8011aea <__lshift+0x4a>
 8011b5e:	3904      	subs	r1, #4
 8011b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b68:	459c      	cmp	ip, r3
 8011b6a:	d8f9      	bhi.n	8011b60 <__lshift+0xc0>
 8011b6c:	e7ea      	b.n	8011b44 <__lshift+0xa4>
 8011b6e:	bf00      	nop
 8011b70:	08012b20 	.word	0x08012b20
 8011b74:	08012b31 	.word	0x08012b31

08011b78 <__mcmp>:
 8011b78:	690a      	ldr	r2, [r1, #16]
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	6900      	ldr	r0, [r0, #16]
 8011b7e:	1a80      	subs	r0, r0, r2
 8011b80:	b530      	push	{r4, r5, lr}
 8011b82:	d10e      	bne.n	8011ba2 <__mcmp+0x2a>
 8011b84:	3314      	adds	r3, #20
 8011b86:	3114      	adds	r1, #20
 8011b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b98:	4295      	cmp	r5, r2
 8011b9a:	d003      	beq.n	8011ba4 <__mcmp+0x2c>
 8011b9c:	d205      	bcs.n	8011baa <__mcmp+0x32>
 8011b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba2:	bd30      	pop	{r4, r5, pc}
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	d3f3      	bcc.n	8011b90 <__mcmp+0x18>
 8011ba8:	e7fb      	b.n	8011ba2 <__mcmp+0x2a>
 8011baa:	2001      	movs	r0, #1
 8011bac:	e7f9      	b.n	8011ba2 <__mcmp+0x2a>
	...

08011bb0 <__mdiff>:
 8011bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4689      	mov	r9, r1
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	4611      	mov	r1, r2
 8011bba:	4648      	mov	r0, r9
 8011bbc:	4614      	mov	r4, r2
 8011bbe:	f7ff ffdb 	bl	8011b78 <__mcmp>
 8011bc2:	1e05      	subs	r5, r0, #0
 8011bc4:	d112      	bne.n	8011bec <__mdiff+0x3c>
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f7ff fd63 	bl	8011694 <_Balloc>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	b928      	cbnz	r0, 8011bde <__mdiff+0x2e>
 8011bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8011cd0 <__mdiff+0x120>)
 8011bd4:	f240 2137 	movw	r1, #567	@ 0x237
 8011bd8:	483e      	ldr	r0, [pc, #248]	@ (8011cd4 <__mdiff+0x124>)
 8011bda:	f000 f981 	bl	8011ee0 <__assert_func>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011be4:	4610      	mov	r0, r2
 8011be6:	b003      	add	sp, #12
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	bfbc      	itt	lt
 8011bee:	464b      	movlt	r3, r9
 8011bf0:	46a1      	movlt	r9, r4
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011bf8:	bfba      	itte	lt
 8011bfa:	461c      	movlt	r4, r3
 8011bfc:	2501      	movlt	r5, #1
 8011bfe:	2500      	movge	r5, #0
 8011c00:	f7ff fd48 	bl	8011694 <_Balloc>
 8011c04:	4602      	mov	r2, r0
 8011c06:	b918      	cbnz	r0, 8011c10 <__mdiff+0x60>
 8011c08:	4b31      	ldr	r3, [pc, #196]	@ (8011cd0 <__mdiff+0x120>)
 8011c0a:	f240 2145 	movw	r1, #581	@ 0x245
 8011c0e:	e7e3      	b.n	8011bd8 <__mdiff+0x28>
 8011c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c14:	6926      	ldr	r6, [r4, #16]
 8011c16:	60c5      	str	r5, [r0, #12]
 8011c18:	f109 0310 	add.w	r3, r9, #16
 8011c1c:	f109 0514 	add.w	r5, r9, #20
 8011c20:	f104 0e14 	add.w	lr, r4, #20
 8011c24:	f100 0b14 	add.w	fp, r0, #20
 8011c28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011c2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c30:	9301      	str	r3, [sp, #4]
 8011c32:	46d9      	mov	r9, fp
 8011c34:	f04f 0c00 	mov.w	ip, #0
 8011c38:	9b01      	ldr	r3, [sp, #4]
 8011c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c42:	9301      	str	r3, [sp, #4]
 8011c44:	fa1f f38a 	uxth.w	r3, sl
 8011c48:	4619      	mov	r1, r3
 8011c4a:	b283      	uxth	r3, r0
 8011c4c:	1acb      	subs	r3, r1, r3
 8011c4e:	0c00      	lsrs	r0, r0, #16
 8011c50:	4463      	add	r3, ip
 8011c52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c60:	4576      	cmp	r6, lr
 8011c62:	f849 3b04 	str.w	r3, [r9], #4
 8011c66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c6a:	d8e5      	bhi.n	8011c38 <__mdiff+0x88>
 8011c6c:	1b33      	subs	r3, r6, r4
 8011c6e:	3b15      	subs	r3, #21
 8011c70:	f023 0303 	bic.w	r3, r3, #3
 8011c74:	3415      	adds	r4, #21
 8011c76:	3304      	adds	r3, #4
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	bf38      	it	cc
 8011c7c:	2304      	movcc	r3, #4
 8011c7e:	441d      	add	r5, r3
 8011c80:	445b      	add	r3, fp
 8011c82:	461e      	mov	r6, r3
 8011c84:	462c      	mov	r4, r5
 8011c86:	4544      	cmp	r4, r8
 8011c88:	d30e      	bcc.n	8011ca8 <__mdiff+0xf8>
 8011c8a:	f108 0103 	add.w	r1, r8, #3
 8011c8e:	1b49      	subs	r1, r1, r5
 8011c90:	f021 0103 	bic.w	r1, r1, #3
 8011c94:	3d03      	subs	r5, #3
 8011c96:	45a8      	cmp	r8, r5
 8011c98:	bf38      	it	cc
 8011c9a:	2100      	movcc	r1, #0
 8011c9c:	440b      	add	r3, r1
 8011c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ca2:	b191      	cbz	r1, 8011cca <__mdiff+0x11a>
 8011ca4:	6117      	str	r7, [r2, #16]
 8011ca6:	e79d      	b.n	8011be4 <__mdiff+0x34>
 8011ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011cac:	46e6      	mov	lr, ip
 8011cae:	0c08      	lsrs	r0, r1, #16
 8011cb0:	fa1c fc81 	uxtah	ip, ip, r1
 8011cb4:	4471      	add	r1, lr
 8011cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011cba:	b289      	uxth	r1, r1
 8011cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011cc0:	f846 1b04 	str.w	r1, [r6], #4
 8011cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011cc8:	e7dd      	b.n	8011c86 <__mdiff+0xd6>
 8011cca:	3f01      	subs	r7, #1
 8011ccc:	e7e7      	b.n	8011c9e <__mdiff+0xee>
 8011cce:	bf00      	nop
 8011cd0:	08012b20 	.word	0x08012b20
 8011cd4:	08012b31 	.word	0x08012b31

08011cd8 <__d2b>:
 8011cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cdc:	460f      	mov	r7, r1
 8011cde:	2101      	movs	r1, #1
 8011ce0:	ec59 8b10 	vmov	r8, r9, d0
 8011ce4:	4616      	mov	r6, r2
 8011ce6:	f7ff fcd5 	bl	8011694 <_Balloc>
 8011cea:	4604      	mov	r4, r0
 8011cec:	b930      	cbnz	r0, 8011cfc <__d2b+0x24>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	4b23      	ldr	r3, [pc, #140]	@ (8011d80 <__d2b+0xa8>)
 8011cf2:	4824      	ldr	r0, [pc, #144]	@ (8011d84 <__d2b+0xac>)
 8011cf4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cf8:	f000 f8f2 	bl	8011ee0 <__assert_func>
 8011cfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d04:	b10d      	cbz	r5, 8011d0a <__d2b+0x32>
 8011d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d0a:	9301      	str	r3, [sp, #4]
 8011d0c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d10:	d023      	beq.n	8011d5a <__d2b+0x82>
 8011d12:	4668      	mov	r0, sp
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	f7ff fd84 	bl	8011822 <__lo0bits>
 8011d1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d1e:	b1d0      	cbz	r0, 8011d56 <__d2b+0x7e>
 8011d20:	f1c0 0320 	rsb	r3, r0, #32
 8011d24:	fa02 f303 	lsl.w	r3, r2, r3
 8011d28:	430b      	orrs	r3, r1
 8011d2a:	40c2      	lsrs	r2, r0
 8011d2c:	6163      	str	r3, [r4, #20]
 8011d2e:	9201      	str	r2, [sp, #4]
 8011d30:	9b01      	ldr	r3, [sp, #4]
 8011d32:	61a3      	str	r3, [r4, #24]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bf0c      	ite	eq
 8011d38:	2201      	moveq	r2, #1
 8011d3a:	2202      	movne	r2, #2
 8011d3c:	6122      	str	r2, [r4, #16]
 8011d3e:	b1a5      	cbz	r5, 8011d6a <__d2b+0x92>
 8011d40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d44:	4405      	add	r5, r0
 8011d46:	603d      	str	r5, [r7, #0]
 8011d48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d4c:	6030      	str	r0, [r6, #0]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	b003      	add	sp, #12
 8011d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d56:	6161      	str	r1, [r4, #20]
 8011d58:	e7ea      	b.n	8011d30 <__d2b+0x58>
 8011d5a:	a801      	add	r0, sp, #4
 8011d5c:	f7ff fd61 	bl	8011822 <__lo0bits>
 8011d60:	9b01      	ldr	r3, [sp, #4]
 8011d62:	6163      	str	r3, [r4, #20]
 8011d64:	3020      	adds	r0, #32
 8011d66:	2201      	movs	r2, #1
 8011d68:	e7e8      	b.n	8011d3c <__d2b+0x64>
 8011d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d72:	6038      	str	r0, [r7, #0]
 8011d74:	6918      	ldr	r0, [r3, #16]
 8011d76:	f7ff fd35 	bl	80117e4 <__hi0bits>
 8011d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d7e:	e7e5      	b.n	8011d4c <__d2b+0x74>
 8011d80:	08012b20 	.word	0x08012b20
 8011d84:	08012b31 	.word	0x08012b31

08011d88 <__sflush_r>:
 8011d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d90:	0716      	lsls	r6, r2, #28
 8011d92:	4605      	mov	r5, r0
 8011d94:	460c      	mov	r4, r1
 8011d96:	d454      	bmi.n	8011e42 <__sflush_r+0xba>
 8011d98:	684b      	ldr	r3, [r1, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	dc02      	bgt.n	8011da4 <__sflush_r+0x1c>
 8011d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	dd48      	ble.n	8011e36 <__sflush_r+0xae>
 8011da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011da6:	2e00      	cmp	r6, #0
 8011da8:	d045      	beq.n	8011e36 <__sflush_r+0xae>
 8011daa:	2300      	movs	r3, #0
 8011dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011db0:	682f      	ldr	r7, [r5, #0]
 8011db2:	6a21      	ldr	r1, [r4, #32]
 8011db4:	602b      	str	r3, [r5, #0]
 8011db6:	d030      	beq.n	8011e1a <__sflush_r+0x92>
 8011db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011dba:	89a3      	ldrh	r3, [r4, #12]
 8011dbc:	0759      	lsls	r1, r3, #29
 8011dbe:	d505      	bpl.n	8011dcc <__sflush_r+0x44>
 8011dc0:	6863      	ldr	r3, [r4, #4]
 8011dc2:	1ad2      	subs	r2, r2, r3
 8011dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011dc6:	b10b      	cbz	r3, 8011dcc <__sflush_r+0x44>
 8011dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011dca:	1ad2      	subs	r2, r2, r3
 8011dcc:	2300      	movs	r3, #0
 8011dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011dd0:	6a21      	ldr	r1, [r4, #32]
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	47b0      	blx	r6
 8011dd6:	1c43      	adds	r3, r0, #1
 8011dd8:	89a3      	ldrh	r3, [r4, #12]
 8011dda:	d106      	bne.n	8011dea <__sflush_r+0x62>
 8011ddc:	6829      	ldr	r1, [r5, #0]
 8011dde:	291d      	cmp	r1, #29
 8011de0:	d82b      	bhi.n	8011e3a <__sflush_r+0xb2>
 8011de2:	4a2a      	ldr	r2, [pc, #168]	@ (8011e8c <__sflush_r+0x104>)
 8011de4:	40ca      	lsrs	r2, r1
 8011de6:	07d6      	lsls	r6, r2, #31
 8011de8:	d527      	bpl.n	8011e3a <__sflush_r+0xb2>
 8011dea:	2200      	movs	r2, #0
 8011dec:	6062      	str	r2, [r4, #4]
 8011dee:	04d9      	lsls	r1, r3, #19
 8011df0:	6922      	ldr	r2, [r4, #16]
 8011df2:	6022      	str	r2, [r4, #0]
 8011df4:	d504      	bpl.n	8011e00 <__sflush_r+0x78>
 8011df6:	1c42      	adds	r2, r0, #1
 8011df8:	d101      	bne.n	8011dfe <__sflush_r+0x76>
 8011dfa:	682b      	ldr	r3, [r5, #0]
 8011dfc:	b903      	cbnz	r3, 8011e00 <__sflush_r+0x78>
 8011dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e02:	602f      	str	r7, [r5, #0]
 8011e04:	b1b9      	cbz	r1, 8011e36 <__sflush_r+0xae>
 8011e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e0a:	4299      	cmp	r1, r3
 8011e0c:	d002      	beq.n	8011e14 <__sflush_r+0x8c>
 8011e0e:	4628      	mov	r0, r5
 8011e10:	f7ff fbf6 	bl	8011600 <_free_r>
 8011e14:	2300      	movs	r3, #0
 8011e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e18:	e00d      	b.n	8011e36 <__sflush_r+0xae>
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	47b0      	blx	r6
 8011e20:	4602      	mov	r2, r0
 8011e22:	1c50      	adds	r0, r2, #1
 8011e24:	d1c9      	bne.n	8011dba <__sflush_r+0x32>
 8011e26:	682b      	ldr	r3, [r5, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d0c6      	beq.n	8011dba <__sflush_r+0x32>
 8011e2c:	2b1d      	cmp	r3, #29
 8011e2e:	d001      	beq.n	8011e34 <__sflush_r+0xac>
 8011e30:	2b16      	cmp	r3, #22
 8011e32:	d11e      	bne.n	8011e72 <__sflush_r+0xea>
 8011e34:	602f      	str	r7, [r5, #0]
 8011e36:	2000      	movs	r0, #0
 8011e38:	e022      	b.n	8011e80 <__sflush_r+0xf8>
 8011e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e3e:	b21b      	sxth	r3, r3
 8011e40:	e01b      	b.n	8011e7a <__sflush_r+0xf2>
 8011e42:	690f      	ldr	r7, [r1, #16]
 8011e44:	2f00      	cmp	r7, #0
 8011e46:	d0f6      	beq.n	8011e36 <__sflush_r+0xae>
 8011e48:	0793      	lsls	r3, r2, #30
 8011e4a:	680e      	ldr	r6, [r1, #0]
 8011e4c:	bf08      	it	eq
 8011e4e:	694b      	ldreq	r3, [r1, #20]
 8011e50:	600f      	str	r7, [r1, #0]
 8011e52:	bf18      	it	ne
 8011e54:	2300      	movne	r3, #0
 8011e56:	eba6 0807 	sub.w	r8, r6, r7
 8011e5a:	608b      	str	r3, [r1, #8]
 8011e5c:	f1b8 0f00 	cmp.w	r8, #0
 8011e60:	dde9      	ble.n	8011e36 <__sflush_r+0xae>
 8011e62:	6a21      	ldr	r1, [r4, #32]
 8011e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011e66:	4643      	mov	r3, r8
 8011e68:	463a      	mov	r2, r7
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	47b0      	blx	r6
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	dc08      	bgt.n	8011e84 <__sflush_r+0xfc>
 8011e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e7a:	81a3      	strh	r3, [r4, #12]
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e84:	4407      	add	r7, r0
 8011e86:	eba8 0800 	sub.w	r8, r8, r0
 8011e8a:	e7e7      	b.n	8011e5c <__sflush_r+0xd4>
 8011e8c:	20400001 	.word	0x20400001

08011e90 <_fflush_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	690b      	ldr	r3, [r1, #16]
 8011e94:	4605      	mov	r5, r0
 8011e96:	460c      	mov	r4, r1
 8011e98:	b913      	cbnz	r3, 8011ea0 <_fflush_r+0x10>
 8011e9a:	2500      	movs	r5, #0
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ea0:	b118      	cbz	r0, 8011eaa <_fflush_r+0x1a>
 8011ea2:	6a03      	ldr	r3, [r0, #32]
 8011ea4:	b90b      	cbnz	r3, 8011eaa <_fflush_r+0x1a>
 8011ea6:	f7fe fc3b 	bl	8010720 <__sinit>
 8011eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d0f3      	beq.n	8011e9a <_fflush_r+0xa>
 8011eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011eb4:	07d0      	lsls	r0, r2, #31
 8011eb6:	d404      	bmi.n	8011ec2 <_fflush_r+0x32>
 8011eb8:	0599      	lsls	r1, r3, #22
 8011eba:	d402      	bmi.n	8011ec2 <_fflush_r+0x32>
 8011ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ebe:	f7fe fd36 	bl	801092e <__retarget_lock_acquire_recursive>
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	f7ff ff5f 	bl	8011d88 <__sflush_r>
 8011eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ecc:	07da      	lsls	r2, r3, #31
 8011ece:	4605      	mov	r5, r0
 8011ed0:	d4e4      	bmi.n	8011e9c <_fflush_r+0xc>
 8011ed2:	89a3      	ldrh	r3, [r4, #12]
 8011ed4:	059b      	lsls	r3, r3, #22
 8011ed6:	d4e1      	bmi.n	8011e9c <_fflush_r+0xc>
 8011ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eda:	f7fe fd29 	bl	8010930 <__retarget_lock_release_recursive>
 8011ede:	e7dd      	b.n	8011e9c <_fflush_r+0xc>

08011ee0 <__assert_func>:
 8011ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ee2:	4614      	mov	r4, r2
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4b09      	ldr	r3, [pc, #36]	@ (8011f0c <__assert_func+0x2c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4605      	mov	r5, r0
 8011eec:	68d8      	ldr	r0, [r3, #12]
 8011eee:	b14c      	cbz	r4, 8011f04 <__assert_func+0x24>
 8011ef0:	4b07      	ldr	r3, [pc, #28]	@ (8011f10 <__assert_func+0x30>)
 8011ef2:	9100      	str	r1, [sp, #0]
 8011ef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ef8:	4906      	ldr	r1, [pc, #24]	@ (8011f14 <__assert_func+0x34>)
 8011efa:	462b      	mov	r3, r5
 8011efc:	f000 f842 	bl	8011f84 <fiprintf>
 8011f00:	f000 f852 	bl	8011fa8 <abort>
 8011f04:	4b04      	ldr	r3, [pc, #16]	@ (8011f18 <__assert_func+0x38>)
 8011f06:	461c      	mov	r4, r3
 8011f08:	e7f3      	b.n	8011ef2 <__assert_func+0x12>
 8011f0a:	bf00      	nop
 8011f0c:	20000118 	.word	0x20000118
 8011f10:	08012b94 	.word	0x08012b94
 8011f14:	08012ba1 	.word	0x08012ba1
 8011f18:	08012bcf 	.word	0x08012bcf

08011f1c <_calloc_r>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	fba1 5402 	umull	r5, r4, r1, r2
 8011f22:	b934      	cbnz	r4, 8011f32 <_calloc_r+0x16>
 8011f24:	4629      	mov	r1, r5
 8011f26:	f7fd fe8d 	bl	800fc44 <_malloc_r>
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	b928      	cbnz	r0, 8011f3a <_calloc_r+0x1e>
 8011f2e:	4630      	mov	r0, r6
 8011f30:	bd70      	pop	{r4, r5, r6, pc}
 8011f32:	220c      	movs	r2, #12
 8011f34:	6002      	str	r2, [r0, #0]
 8011f36:	2600      	movs	r6, #0
 8011f38:	e7f9      	b.n	8011f2e <_calloc_r+0x12>
 8011f3a:	462a      	mov	r2, r5
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	f7fe fc68 	bl	8010812 <memset>
 8011f42:	e7f4      	b.n	8011f2e <_calloc_r+0x12>

08011f44 <__ascii_mbtowc>:
 8011f44:	b082      	sub	sp, #8
 8011f46:	b901      	cbnz	r1, 8011f4a <__ascii_mbtowc+0x6>
 8011f48:	a901      	add	r1, sp, #4
 8011f4a:	b142      	cbz	r2, 8011f5e <__ascii_mbtowc+0x1a>
 8011f4c:	b14b      	cbz	r3, 8011f62 <__ascii_mbtowc+0x1e>
 8011f4e:	7813      	ldrb	r3, [r2, #0]
 8011f50:	600b      	str	r3, [r1, #0]
 8011f52:	7812      	ldrb	r2, [r2, #0]
 8011f54:	1e10      	subs	r0, r2, #0
 8011f56:	bf18      	it	ne
 8011f58:	2001      	movne	r0, #1
 8011f5a:	b002      	add	sp, #8
 8011f5c:	4770      	bx	lr
 8011f5e:	4610      	mov	r0, r2
 8011f60:	e7fb      	b.n	8011f5a <__ascii_mbtowc+0x16>
 8011f62:	f06f 0001 	mvn.w	r0, #1
 8011f66:	e7f8      	b.n	8011f5a <__ascii_mbtowc+0x16>

08011f68 <__ascii_wctomb>:
 8011f68:	4603      	mov	r3, r0
 8011f6a:	4608      	mov	r0, r1
 8011f6c:	b141      	cbz	r1, 8011f80 <__ascii_wctomb+0x18>
 8011f6e:	2aff      	cmp	r2, #255	@ 0xff
 8011f70:	d904      	bls.n	8011f7c <__ascii_wctomb+0x14>
 8011f72:	228a      	movs	r2, #138	@ 0x8a
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	f04f 30ff 	mov.w	r0, #4294967295
 8011f7a:	4770      	bx	lr
 8011f7c:	700a      	strb	r2, [r1, #0]
 8011f7e:	2001      	movs	r0, #1
 8011f80:	4770      	bx	lr
	...

08011f84 <fiprintf>:
 8011f84:	b40e      	push	{r1, r2, r3}
 8011f86:	b503      	push	{r0, r1, lr}
 8011f88:	4601      	mov	r1, r0
 8011f8a:	ab03      	add	r3, sp, #12
 8011f8c:	4805      	ldr	r0, [pc, #20]	@ (8011fa4 <fiprintf+0x20>)
 8011f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f92:	6800      	ldr	r0, [r0, #0]
 8011f94:	9301      	str	r3, [sp, #4]
 8011f96:	f000 f837 	bl	8012008 <_vfiprintf_r>
 8011f9a:	b002      	add	sp, #8
 8011f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fa0:	b003      	add	sp, #12
 8011fa2:	4770      	bx	lr
 8011fa4:	20000118 	.word	0x20000118

08011fa8 <abort>:
 8011fa8:	b508      	push	{r3, lr}
 8011faa:	2006      	movs	r0, #6
 8011fac:	f000 fa00 	bl	80123b0 <raise>
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	f7f1 fe49 	bl	8003c48 <_exit>

08011fb6 <__sfputc_r>:
 8011fb6:	6893      	ldr	r3, [r2, #8]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	b410      	push	{r4}
 8011fbe:	6093      	str	r3, [r2, #8]
 8011fc0:	da08      	bge.n	8011fd4 <__sfputc_r+0x1e>
 8011fc2:	6994      	ldr	r4, [r2, #24]
 8011fc4:	42a3      	cmp	r3, r4
 8011fc6:	db01      	blt.n	8011fcc <__sfputc_r+0x16>
 8011fc8:	290a      	cmp	r1, #10
 8011fca:	d103      	bne.n	8011fd4 <__sfputc_r+0x1e>
 8011fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd0:	f000 b932 	b.w	8012238 <__swbuf_r>
 8011fd4:	6813      	ldr	r3, [r2, #0]
 8011fd6:	1c58      	adds	r0, r3, #1
 8011fd8:	6010      	str	r0, [r2, #0]
 8011fda:	7019      	strb	r1, [r3, #0]
 8011fdc:	4608      	mov	r0, r1
 8011fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <__sfputs_r>:
 8011fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	460f      	mov	r7, r1
 8011fea:	4614      	mov	r4, r2
 8011fec:	18d5      	adds	r5, r2, r3
 8011fee:	42ac      	cmp	r4, r5
 8011ff0:	d101      	bne.n	8011ff6 <__sfputs_r+0x12>
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	e007      	b.n	8012006 <__sfputs_r+0x22>
 8011ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffa:	463a      	mov	r2, r7
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7ff ffda 	bl	8011fb6 <__sfputc_r>
 8012002:	1c43      	adds	r3, r0, #1
 8012004:	d1f3      	bne.n	8011fee <__sfputs_r+0xa>
 8012006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012008 <_vfiprintf_r>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	460d      	mov	r5, r1
 801200e:	b09d      	sub	sp, #116	@ 0x74
 8012010:	4614      	mov	r4, r2
 8012012:	4698      	mov	r8, r3
 8012014:	4606      	mov	r6, r0
 8012016:	b118      	cbz	r0, 8012020 <_vfiprintf_r+0x18>
 8012018:	6a03      	ldr	r3, [r0, #32]
 801201a:	b90b      	cbnz	r3, 8012020 <_vfiprintf_r+0x18>
 801201c:	f7fe fb80 	bl	8010720 <__sinit>
 8012020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012022:	07d9      	lsls	r1, r3, #31
 8012024:	d405      	bmi.n	8012032 <_vfiprintf_r+0x2a>
 8012026:	89ab      	ldrh	r3, [r5, #12]
 8012028:	059a      	lsls	r2, r3, #22
 801202a:	d402      	bmi.n	8012032 <_vfiprintf_r+0x2a>
 801202c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801202e:	f7fe fc7e 	bl	801092e <__retarget_lock_acquire_recursive>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	071b      	lsls	r3, r3, #28
 8012036:	d501      	bpl.n	801203c <_vfiprintf_r+0x34>
 8012038:	692b      	ldr	r3, [r5, #16]
 801203a:	b99b      	cbnz	r3, 8012064 <_vfiprintf_r+0x5c>
 801203c:	4629      	mov	r1, r5
 801203e:	4630      	mov	r0, r6
 8012040:	f000 f938 	bl	80122b4 <__swsetup_r>
 8012044:	b170      	cbz	r0, 8012064 <_vfiprintf_r+0x5c>
 8012046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012048:	07dc      	lsls	r4, r3, #31
 801204a:	d504      	bpl.n	8012056 <_vfiprintf_r+0x4e>
 801204c:	f04f 30ff 	mov.w	r0, #4294967295
 8012050:	b01d      	add	sp, #116	@ 0x74
 8012052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012056:	89ab      	ldrh	r3, [r5, #12]
 8012058:	0598      	lsls	r0, r3, #22
 801205a:	d4f7      	bmi.n	801204c <_vfiprintf_r+0x44>
 801205c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801205e:	f7fe fc67 	bl	8010930 <__retarget_lock_release_recursive>
 8012062:	e7f3      	b.n	801204c <_vfiprintf_r+0x44>
 8012064:	2300      	movs	r3, #0
 8012066:	9309      	str	r3, [sp, #36]	@ 0x24
 8012068:	2320      	movs	r3, #32
 801206a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801206e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012072:	2330      	movs	r3, #48	@ 0x30
 8012074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012224 <_vfiprintf_r+0x21c>
 8012078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801207c:	f04f 0901 	mov.w	r9, #1
 8012080:	4623      	mov	r3, r4
 8012082:	469a      	mov	sl, r3
 8012084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012088:	b10a      	cbz	r2, 801208e <_vfiprintf_r+0x86>
 801208a:	2a25      	cmp	r2, #37	@ 0x25
 801208c:	d1f9      	bne.n	8012082 <_vfiprintf_r+0x7a>
 801208e:	ebba 0b04 	subs.w	fp, sl, r4
 8012092:	d00b      	beq.n	80120ac <_vfiprintf_r+0xa4>
 8012094:	465b      	mov	r3, fp
 8012096:	4622      	mov	r2, r4
 8012098:	4629      	mov	r1, r5
 801209a:	4630      	mov	r0, r6
 801209c:	f7ff ffa2 	bl	8011fe4 <__sfputs_r>
 80120a0:	3001      	adds	r0, #1
 80120a2:	f000 80a7 	beq.w	80121f4 <_vfiprintf_r+0x1ec>
 80120a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120a8:	445a      	add	r2, fp
 80120aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80120ac:	f89a 3000 	ldrb.w	r3, [sl]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f000 809f 	beq.w	80121f4 <_vfiprintf_r+0x1ec>
 80120b6:	2300      	movs	r3, #0
 80120b8:	f04f 32ff 	mov.w	r2, #4294967295
 80120bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120c0:	f10a 0a01 	add.w	sl, sl, #1
 80120c4:	9304      	str	r3, [sp, #16]
 80120c6:	9307      	str	r3, [sp, #28]
 80120c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80120ce:	4654      	mov	r4, sl
 80120d0:	2205      	movs	r2, #5
 80120d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d6:	4853      	ldr	r0, [pc, #332]	@ (8012224 <_vfiprintf_r+0x21c>)
 80120d8:	f7ee f8a2 	bl	8000220 <memchr>
 80120dc:	9a04      	ldr	r2, [sp, #16]
 80120de:	b9d8      	cbnz	r0, 8012118 <_vfiprintf_r+0x110>
 80120e0:	06d1      	lsls	r1, r2, #27
 80120e2:	bf44      	itt	mi
 80120e4:	2320      	movmi	r3, #32
 80120e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120ea:	0713      	lsls	r3, r2, #28
 80120ec:	bf44      	itt	mi
 80120ee:	232b      	movmi	r3, #43	@ 0x2b
 80120f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120f4:	f89a 3000 	ldrb.w	r3, [sl]
 80120f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80120fa:	d015      	beq.n	8012128 <_vfiprintf_r+0x120>
 80120fc:	9a07      	ldr	r2, [sp, #28]
 80120fe:	4654      	mov	r4, sl
 8012100:	2000      	movs	r0, #0
 8012102:	f04f 0c0a 	mov.w	ip, #10
 8012106:	4621      	mov	r1, r4
 8012108:	f811 3b01 	ldrb.w	r3, [r1], #1
 801210c:	3b30      	subs	r3, #48	@ 0x30
 801210e:	2b09      	cmp	r3, #9
 8012110:	d94b      	bls.n	80121aa <_vfiprintf_r+0x1a2>
 8012112:	b1b0      	cbz	r0, 8012142 <_vfiprintf_r+0x13a>
 8012114:	9207      	str	r2, [sp, #28]
 8012116:	e014      	b.n	8012142 <_vfiprintf_r+0x13a>
 8012118:	eba0 0308 	sub.w	r3, r0, r8
 801211c:	fa09 f303 	lsl.w	r3, r9, r3
 8012120:	4313      	orrs	r3, r2
 8012122:	9304      	str	r3, [sp, #16]
 8012124:	46a2      	mov	sl, r4
 8012126:	e7d2      	b.n	80120ce <_vfiprintf_r+0xc6>
 8012128:	9b03      	ldr	r3, [sp, #12]
 801212a:	1d19      	adds	r1, r3, #4
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	9103      	str	r1, [sp, #12]
 8012130:	2b00      	cmp	r3, #0
 8012132:	bfbb      	ittet	lt
 8012134:	425b      	neglt	r3, r3
 8012136:	f042 0202 	orrlt.w	r2, r2, #2
 801213a:	9307      	strge	r3, [sp, #28]
 801213c:	9307      	strlt	r3, [sp, #28]
 801213e:	bfb8      	it	lt
 8012140:	9204      	strlt	r2, [sp, #16]
 8012142:	7823      	ldrb	r3, [r4, #0]
 8012144:	2b2e      	cmp	r3, #46	@ 0x2e
 8012146:	d10a      	bne.n	801215e <_vfiprintf_r+0x156>
 8012148:	7863      	ldrb	r3, [r4, #1]
 801214a:	2b2a      	cmp	r3, #42	@ 0x2a
 801214c:	d132      	bne.n	80121b4 <_vfiprintf_r+0x1ac>
 801214e:	9b03      	ldr	r3, [sp, #12]
 8012150:	1d1a      	adds	r2, r3, #4
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	9203      	str	r2, [sp, #12]
 8012156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801215a:	3402      	adds	r4, #2
 801215c:	9305      	str	r3, [sp, #20]
 801215e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012234 <_vfiprintf_r+0x22c>
 8012162:	7821      	ldrb	r1, [r4, #0]
 8012164:	2203      	movs	r2, #3
 8012166:	4650      	mov	r0, sl
 8012168:	f7ee f85a 	bl	8000220 <memchr>
 801216c:	b138      	cbz	r0, 801217e <_vfiprintf_r+0x176>
 801216e:	9b04      	ldr	r3, [sp, #16]
 8012170:	eba0 000a 	sub.w	r0, r0, sl
 8012174:	2240      	movs	r2, #64	@ 0x40
 8012176:	4082      	lsls	r2, r0
 8012178:	4313      	orrs	r3, r2
 801217a:	3401      	adds	r4, #1
 801217c:	9304      	str	r3, [sp, #16]
 801217e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012182:	4829      	ldr	r0, [pc, #164]	@ (8012228 <_vfiprintf_r+0x220>)
 8012184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012188:	2206      	movs	r2, #6
 801218a:	f7ee f849 	bl	8000220 <memchr>
 801218e:	2800      	cmp	r0, #0
 8012190:	d03f      	beq.n	8012212 <_vfiprintf_r+0x20a>
 8012192:	4b26      	ldr	r3, [pc, #152]	@ (801222c <_vfiprintf_r+0x224>)
 8012194:	bb1b      	cbnz	r3, 80121de <_vfiprintf_r+0x1d6>
 8012196:	9b03      	ldr	r3, [sp, #12]
 8012198:	3307      	adds	r3, #7
 801219a:	f023 0307 	bic.w	r3, r3, #7
 801219e:	3308      	adds	r3, #8
 80121a0:	9303      	str	r3, [sp, #12]
 80121a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121a4:	443b      	add	r3, r7
 80121a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80121a8:	e76a      	b.n	8012080 <_vfiprintf_r+0x78>
 80121aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80121ae:	460c      	mov	r4, r1
 80121b0:	2001      	movs	r0, #1
 80121b2:	e7a8      	b.n	8012106 <_vfiprintf_r+0xfe>
 80121b4:	2300      	movs	r3, #0
 80121b6:	3401      	adds	r4, #1
 80121b8:	9305      	str	r3, [sp, #20]
 80121ba:	4619      	mov	r1, r3
 80121bc:	f04f 0c0a 	mov.w	ip, #10
 80121c0:	4620      	mov	r0, r4
 80121c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121c6:	3a30      	subs	r2, #48	@ 0x30
 80121c8:	2a09      	cmp	r2, #9
 80121ca:	d903      	bls.n	80121d4 <_vfiprintf_r+0x1cc>
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d0c6      	beq.n	801215e <_vfiprintf_r+0x156>
 80121d0:	9105      	str	r1, [sp, #20]
 80121d2:	e7c4      	b.n	801215e <_vfiprintf_r+0x156>
 80121d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80121d8:	4604      	mov	r4, r0
 80121da:	2301      	movs	r3, #1
 80121dc:	e7f0      	b.n	80121c0 <_vfiprintf_r+0x1b8>
 80121de:	ab03      	add	r3, sp, #12
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	462a      	mov	r2, r5
 80121e4:	4b12      	ldr	r3, [pc, #72]	@ (8012230 <_vfiprintf_r+0x228>)
 80121e6:	a904      	add	r1, sp, #16
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7fd fe57 	bl	800fe9c <_printf_float>
 80121ee:	4607      	mov	r7, r0
 80121f0:	1c78      	adds	r0, r7, #1
 80121f2:	d1d6      	bne.n	80121a2 <_vfiprintf_r+0x19a>
 80121f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121f6:	07d9      	lsls	r1, r3, #31
 80121f8:	d405      	bmi.n	8012206 <_vfiprintf_r+0x1fe>
 80121fa:	89ab      	ldrh	r3, [r5, #12]
 80121fc:	059a      	lsls	r2, r3, #22
 80121fe:	d402      	bmi.n	8012206 <_vfiprintf_r+0x1fe>
 8012200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012202:	f7fe fb95 	bl	8010930 <__retarget_lock_release_recursive>
 8012206:	89ab      	ldrh	r3, [r5, #12]
 8012208:	065b      	lsls	r3, r3, #25
 801220a:	f53f af1f 	bmi.w	801204c <_vfiprintf_r+0x44>
 801220e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012210:	e71e      	b.n	8012050 <_vfiprintf_r+0x48>
 8012212:	ab03      	add	r3, sp, #12
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	462a      	mov	r2, r5
 8012218:	4b05      	ldr	r3, [pc, #20]	@ (8012230 <_vfiprintf_r+0x228>)
 801221a:	a904      	add	r1, sp, #16
 801221c:	4630      	mov	r0, r6
 801221e:	f7fe f8d5 	bl	80103cc <_printf_i>
 8012222:	e7e4      	b.n	80121ee <_vfiprintf_r+0x1e6>
 8012224:	08012bd0 	.word	0x08012bd0
 8012228:	08012bda 	.word	0x08012bda
 801222c:	0800fe9d 	.word	0x0800fe9d
 8012230:	08011fe5 	.word	0x08011fe5
 8012234:	08012bd6 	.word	0x08012bd6

08012238 <__swbuf_r>:
 8012238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223a:	460e      	mov	r6, r1
 801223c:	4614      	mov	r4, r2
 801223e:	4605      	mov	r5, r0
 8012240:	b118      	cbz	r0, 801224a <__swbuf_r+0x12>
 8012242:	6a03      	ldr	r3, [r0, #32]
 8012244:	b90b      	cbnz	r3, 801224a <__swbuf_r+0x12>
 8012246:	f7fe fa6b 	bl	8010720 <__sinit>
 801224a:	69a3      	ldr	r3, [r4, #24]
 801224c:	60a3      	str	r3, [r4, #8]
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	071a      	lsls	r2, r3, #28
 8012252:	d501      	bpl.n	8012258 <__swbuf_r+0x20>
 8012254:	6923      	ldr	r3, [r4, #16]
 8012256:	b943      	cbnz	r3, 801226a <__swbuf_r+0x32>
 8012258:	4621      	mov	r1, r4
 801225a:	4628      	mov	r0, r5
 801225c:	f000 f82a 	bl	80122b4 <__swsetup_r>
 8012260:	b118      	cbz	r0, 801226a <__swbuf_r+0x32>
 8012262:	f04f 37ff 	mov.w	r7, #4294967295
 8012266:	4638      	mov	r0, r7
 8012268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801226a:	6823      	ldr	r3, [r4, #0]
 801226c:	6922      	ldr	r2, [r4, #16]
 801226e:	1a98      	subs	r0, r3, r2
 8012270:	6963      	ldr	r3, [r4, #20]
 8012272:	b2f6      	uxtb	r6, r6
 8012274:	4283      	cmp	r3, r0
 8012276:	4637      	mov	r7, r6
 8012278:	dc05      	bgt.n	8012286 <__swbuf_r+0x4e>
 801227a:	4621      	mov	r1, r4
 801227c:	4628      	mov	r0, r5
 801227e:	f7ff fe07 	bl	8011e90 <_fflush_r>
 8012282:	2800      	cmp	r0, #0
 8012284:	d1ed      	bne.n	8012262 <__swbuf_r+0x2a>
 8012286:	68a3      	ldr	r3, [r4, #8]
 8012288:	3b01      	subs	r3, #1
 801228a:	60a3      	str	r3, [r4, #8]
 801228c:	6823      	ldr	r3, [r4, #0]
 801228e:	1c5a      	adds	r2, r3, #1
 8012290:	6022      	str	r2, [r4, #0]
 8012292:	701e      	strb	r6, [r3, #0]
 8012294:	6962      	ldr	r2, [r4, #20]
 8012296:	1c43      	adds	r3, r0, #1
 8012298:	429a      	cmp	r2, r3
 801229a:	d004      	beq.n	80122a6 <__swbuf_r+0x6e>
 801229c:	89a3      	ldrh	r3, [r4, #12]
 801229e:	07db      	lsls	r3, r3, #31
 80122a0:	d5e1      	bpl.n	8012266 <__swbuf_r+0x2e>
 80122a2:	2e0a      	cmp	r6, #10
 80122a4:	d1df      	bne.n	8012266 <__swbuf_r+0x2e>
 80122a6:	4621      	mov	r1, r4
 80122a8:	4628      	mov	r0, r5
 80122aa:	f7ff fdf1 	bl	8011e90 <_fflush_r>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d0d9      	beq.n	8012266 <__swbuf_r+0x2e>
 80122b2:	e7d6      	b.n	8012262 <__swbuf_r+0x2a>

080122b4 <__swsetup_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4b29      	ldr	r3, [pc, #164]	@ (801235c <__swsetup_r+0xa8>)
 80122b8:	4605      	mov	r5, r0
 80122ba:	6818      	ldr	r0, [r3, #0]
 80122bc:	460c      	mov	r4, r1
 80122be:	b118      	cbz	r0, 80122c8 <__swsetup_r+0x14>
 80122c0:	6a03      	ldr	r3, [r0, #32]
 80122c2:	b90b      	cbnz	r3, 80122c8 <__swsetup_r+0x14>
 80122c4:	f7fe fa2c 	bl	8010720 <__sinit>
 80122c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122cc:	0719      	lsls	r1, r3, #28
 80122ce:	d422      	bmi.n	8012316 <__swsetup_r+0x62>
 80122d0:	06da      	lsls	r2, r3, #27
 80122d2:	d407      	bmi.n	80122e4 <__swsetup_r+0x30>
 80122d4:	2209      	movs	r2, #9
 80122d6:	602a      	str	r2, [r5, #0]
 80122d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122dc:	81a3      	strh	r3, [r4, #12]
 80122de:	f04f 30ff 	mov.w	r0, #4294967295
 80122e2:	e033      	b.n	801234c <__swsetup_r+0x98>
 80122e4:	0758      	lsls	r0, r3, #29
 80122e6:	d512      	bpl.n	801230e <__swsetup_r+0x5a>
 80122e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122ea:	b141      	cbz	r1, 80122fe <__swsetup_r+0x4a>
 80122ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122f0:	4299      	cmp	r1, r3
 80122f2:	d002      	beq.n	80122fa <__swsetup_r+0x46>
 80122f4:	4628      	mov	r0, r5
 80122f6:	f7ff f983 	bl	8011600 <_free_r>
 80122fa:	2300      	movs	r3, #0
 80122fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80122fe:	89a3      	ldrh	r3, [r4, #12]
 8012300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012304:	81a3      	strh	r3, [r4, #12]
 8012306:	2300      	movs	r3, #0
 8012308:	6063      	str	r3, [r4, #4]
 801230a:	6923      	ldr	r3, [r4, #16]
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	f043 0308 	orr.w	r3, r3, #8
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	6923      	ldr	r3, [r4, #16]
 8012318:	b94b      	cbnz	r3, 801232e <__swsetup_r+0x7a>
 801231a:	89a3      	ldrh	r3, [r4, #12]
 801231c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012324:	d003      	beq.n	801232e <__swsetup_r+0x7a>
 8012326:	4621      	mov	r1, r4
 8012328:	4628      	mov	r0, r5
 801232a:	f000 f883 	bl	8012434 <__smakebuf_r>
 801232e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012332:	f013 0201 	ands.w	r2, r3, #1
 8012336:	d00a      	beq.n	801234e <__swsetup_r+0x9a>
 8012338:	2200      	movs	r2, #0
 801233a:	60a2      	str	r2, [r4, #8]
 801233c:	6962      	ldr	r2, [r4, #20]
 801233e:	4252      	negs	r2, r2
 8012340:	61a2      	str	r2, [r4, #24]
 8012342:	6922      	ldr	r2, [r4, #16]
 8012344:	b942      	cbnz	r2, 8012358 <__swsetup_r+0xa4>
 8012346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801234a:	d1c5      	bne.n	80122d8 <__swsetup_r+0x24>
 801234c:	bd38      	pop	{r3, r4, r5, pc}
 801234e:	0799      	lsls	r1, r3, #30
 8012350:	bf58      	it	pl
 8012352:	6962      	ldrpl	r2, [r4, #20]
 8012354:	60a2      	str	r2, [r4, #8]
 8012356:	e7f4      	b.n	8012342 <__swsetup_r+0x8e>
 8012358:	2000      	movs	r0, #0
 801235a:	e7f7      	b.n	801234c <__swsetup_r+0x98>
 801235c:	20000118 	.word	0x20000118

08012360 <_raise_r>:
 8012360:	291f      	cmp	r1, #31
 8012362:	b538      	push	{r3, r4, r5, lr}
 8012364:	4605      	mov	r5, r0
 8012366:	460c      	mov	r4, r1
 8012368:	d904      	bls.n	8012374 <_raise_r+0x14>
 801236a:	2316      	movs	r3, #22
 801236c:	6003      	str	r3, [r0, #0]
 801236e:	f04f 30ff 	mov.w	r0, #4294967295
 8012372:	bd38      	pop	{r3, r4, r5, pc}
 8012374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012376:	b112      	cbz	r2, 801237e <_raise_r+0x1e>
 8012378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801237c:	b94b      	cbnz	r3, 8012392 <_raise_r+0x32>
 801237e:	4628      	mov	r0, r5
 8012380:	f000 f830 	bl	80123e4 <_getpid_r>
 8012384:	4622      	mov	r2, r4
 8012386:	4601      	mov	r1, r0
 8012388:	4628      	mov	r0, r5
 801238a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801238e:	f000 b817 	b.w	80123c0 <_kill_r>
 8012392:	2b01      	cmp	r3, #1
 8012394:	d00a      	beq.n	80123ac <_raise_r+0x4c>
 8012396:	1c59      	adds	r1, r3, #1
 8012398:	d103      	bne.n	80123a2 <_raise_r+0x42>
 801239a:	2316      	movs	r3, #22
 801239c:	6003      	str	r3, [r0, #0]
 801239e:	2001      	movs	r0, #1
 80123a0:	e7e7      	b.n	8012372 <_raise_r+0x12>
 80123a2:	2100      	movs	r1, #0
 80123a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80123a8:	4620      	mov	r0, r4
 80123aa:	4798      	blx	r3
 80123ac:	2000      	movs	r0, #0
 80123ae:	e7e0      	b.n	8012372 <_raise_r+0x12>

080123b0 <raise>:
 80123b0:	4b02      	ldr	r3, [pc, #8]	@ (80123bc <raise+0xc>)
 80123b2:	4601      	mov	r1, r0
 80123b4:	6818      	ldr	r0, [r3, #0]
 80123b6:	f7ff bfd3 	b.w	8012360 <_raise_r>
 80123ba:	bf00      	nop
 80123bc:	20000118 	.word	0x20000118

080123c0 <_kill_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4d07      	ldr	r5, [pc, #28]	@ (80123e0 <_kill_r+0x20>)
 80123c4:	2300      	movs	r3, #0
 80123c6:	4604      	mov	r4, r0
 80123c8:	4608      	mov	r0, r1
 80123ca:	4611      	mov	r1, r2
 80123cc:	602b      	str	r3, [r5, #0]
 80123ce:	f7f1 fc2b 	bl	8003c28 <_kill>
 80123d2:	1c43      	adds	r3, r0, #1
 80123d4:	d102      	bne.n	80123dc <_kill_r+0x1c>
 80123d6:	682b      	ldr	r3, [r5, #0]
 80123d8:	b103      	cbz	r3, 80123dc <_kill_r+0x1c>
 80123da:	6023      	str	r3, [r4, #0]
 80123dc:	bd38      	pop	{r3, r4, r5, pc}
 80123de:	bf00      	nop
 80123e0:	200023ec 	.word	0x200023ec

080123e4 <_getpid_r>:
 80123e4:	f7f1 bc18 	b.w	8003c18 <_getpid>

080123e8 <__swhatbuf_r>:
 80123e8:	b570      	push	{r4, r5, r6, lr}
 80123ea:	460c      	mov	r4, r1
 80123ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123f0:	2900      	cmp	r1, #0
 80123f2:	b096      	sub	sp, #88	@ 0x58
 80123f4:	4615      	mov	r5, r2
 80123f6:	461e      	mov	r6, r3
 80123f8:	da0d      	bge.n	8012416 <__swhatbuf_r+0x2e>
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012400:	f04f 0100 	mov.w	r1, #0
 8012404:	bf14      	ite	ne
 8012406:	2340      	movne	r3, #64	@ 0x40
 8012408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801240c:	2000      	movs	r0, #0
 801240e:	6031      	str	r1, [r6, #0]
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	b016      	add	sp, #88	@ 0x58
 8012414:	bd70      	pop	{r4, r5, r6, pc}
 8012416:	466a      	mov	r2, sp
 8012418:	f000 f848 	bl	80124ac <_fstat_r>
 801241c:	2800      	cmp	r0, #0
 801241e:	dbec      	blt.n	80123fa <__swhatbuf_r+0x12>
 8012420:	9901      	ldr	r1, [sp, #4]
 8012422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801242a:	4259      	negs	r1, r3
 801242c:	4159      	adcs	r1, r3
 801242e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012432:	e7eb      	b.n	801240c <__swhatbuf_r+0x24>

08012434 <__smakebuf_r>:
 8012434:	898b      	ldrh	r3, [r1, #12]
 8012436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012438:	079d      	lsls	r5, r3, #30
 801243a:	4606      	mov	r6, r0
 801243c:	460c      	mov	r4, r1
 801243e:	d507      	bpl.n	8012450 <__smakebuf_r+0x1c>
 8012440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012444:	6023      	str	r3, [r4, #0]
 8012446:	6123      	str	r3, [r4, #16]
 8012448:	2301      	movs	r3, #1
 801244a:	6163      	str	r3, [r4, #20]
 801244c:	b003      	add	sp, #12
 801244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012450:	ab01      	add	r3, sp, #4
 8012452:	466a      	mov	r2, sp
 8012454:	f7ff ffc8 	bl	80123e8 <__swhatbuf_r>
 8012458:	9f00      	ldr	r7, [sp, #0]
 801245a:	4605      	mov	r5, r0
 801245c:	4639      	mov	r1, r7
 801245e:	4630      	mov	r0, r6
 8012460:	f7fd fbf0 	bl	800fc44 <_malloc_r>
 8012464:	b948      	cbnz	r0, 801247a <__smakebuf_r+0x46>
 8012466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801246a:	059a      	lsls	r2, r3, #22
 801246c:	d4ee      	bmi.n	801244c <__smakebuf_r+0x18>
 801246e:	f023 0303 	bic.w	r3, r3, #3
 8012472:	f043 0302 	orr.w	r3, r3, #2
 8012476:	81a3      	strh	r3, [r4, #12]
 8012478:	e7e2      	b.n	8012440 <__smakebuf_r+0xc>
 801247a:	89a3      	ldrh	r3, [r4, #12]
 801247c:	6020      	str	r0, [r4, #0]
 801247e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012482:	81a3      	strh	r3, [r4, #12]
 8012484:	9b01      	ldr	r3, [sp, #4]
 8012486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801248a:	b15b      	cbz	r3, 80124a4 <__smakebuf_r+0x70>
 801248c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012490:	4630      	mov	r0, r6
 8012492:	f000 f81d 	bl	80124d0 <_isatty_r>
 8012496:	b128      	cbz	r0, 80124a4 <__smakebuf_r+0x70>
 8012498:	89a3      	ldrh	r3, [r4, #12]
 801249a:	f023 0303 	bic.w	r3, r3, #3
 801249e:	f043 0301 	orr.w	r3, r3, #1
 80124a2:	81a3      	strh	r3, [r4, #12]
 80124a4:	89a3      	ldrh	r3, [r4, #12]
 80124a6:	431d      	orrs	r5, r3
 80124a8:	81a5      	strh	r5, [r4, #12]
 80124aa:	e7cf      	b.n	801244c <__smakebuf_r+0x18>

080124ac <_fstat_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d07      	ldr	r5, [pc, #28]	@ (80124cc <_fstat_r+0x20>)
 80124b0:	2300      	movs	r3, #0
 80124b2:	4604      	mov	r4, r0
 80124b4:	4608      	mov	r0, r1
 80124b6:	4611      	mov	r1, r2
 80124b8:	602b      	str	r3, [r5, #0]
 80124ba:	f7f1 fc15 	bl	8003ce8 <_fstat>
 80124be:	1c43      	adds	r3, r0, #1
 80124c0:	d102      	bne.n	80124c8 <_fstat_r+0x1c>
 80124c2:	682b      	ldr	r3, [r5, #0]
 80124c4:	b103      	cbz	r3, 80124c8 <_fstat_r+0x1c>
 80124c6:	6023      	str	r3, [r4, #0]
 80124c8:	bd38      	pop	{r3, r4, r5, pc}
 80124ca:	bf00      	nop
 80124cc:	200023ec 	.word	0x200023ec

080124d0 <_isatty_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4d06      	ldr	r5, [pc, #24]	@ (80124ec <_isatty_r+0x1c>)
 80124d4:	2300      	movs	r3, #0
 80124d6:	4604      	mov	r4, r0
 80124d8:	4608      	mov	r0, r1
 80124da:	602b      	str	r3, [r5, #0]
 80124dc:	f7f1 fc14 	bl	8003d08 <_isatty>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d102      	bne.n	80124ea <_isatty_r+0x1a>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	b103      	cbz	r3, 80124ea <_isatty_r+0x1a>
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	200023ec 	.word	0x200023ec

080124f0 <sqrt>:
 80124f0:	b538      	push	{r3, r4, r5, lr}
 80124f2:	ed2d 8b02 	vpush	{d8}
 80124f6:	ec55 4b10 	vmov	r4, r5, d0
 80124fa:	f000 f82f 	bl	801255c <__ieee754_sqrt>
 80124fe:	4622      	mov	r2, r4
 8012500:	462b      	mov	r3, r5
 8012502:	4620      	mov	r0, r4
 8012504:	4629      	mov	r1, r5
 8012506:	eeb0 8a40 	vmov.f32	s16, s0
 801250a:	eef0 8a60 	vmov.f32	s17, s1
 801250e:	f7ee fb35 	bl	8000b7c <__aeabi_dcmpun>
 8012512:	b990      	cbnz	r0, 801253a <sqrt+0x4a>
 8012514:	2200      	movs	r2, #0
 8012516:	2300      	movs	r3, #0
 8012518:	4620      	mov	r0, r4
 801251a:	4629      	mov	r1, r5
 801251c:	f7ee fb06 	bl	8000b2c <__aeabi_dcmplt>
 8012520:	b158      	cbz	r0, 801253a <sqrt+0x4a>
 8012522:	f7fe f9d9 	bl	80108d8 <__errno>
 8012526:	2321      	movs	r3, #33	@ 0x21
 8012528:	6003      	str	r3, [r0, #0]
 801252a:	2200      	movs	r2, #0
 801252c:	2300      	movs	r3, #0
 801252e:	4610      	mov	r0, r2
 8012530:	4619      	mov	r1, r3
 8012532:	f7ee f9b3 	bl	800089c <__aeabi_ddiv>
 8012536:	ec41 0b18 	vmov	d8, r0, r1
 801253a:	eeb0 0a48 	vmov.f32	s0, s16
 801253e:	eef0 0a68 	vmov.f32	s1, s17
 8012542:	ecbd 8b02 	vpop	{d8}
 8012546:	bd38      	pop	{r3, r4, r5, pc}

08012548 <atan2f>:
 8012548:	f000 b8de 	b.w	8012708 <__ieee754_atan2f>

0801254c <fabsf>:
 801254c:	ee10 3a10 	vmov	r3, s0
 8012550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012554:	ee00 3a10 	vmov	s0, r3
 8012558:	4770      	bx	lr
	...

0801255c <__ieee754_sqrt>:
 801255c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012560:	4a66      	ldr	r2, [pc, #408]	@ (80126fc <__ieee754_sqrt+0x1a0>)
 8012562:	ec55 4b10 	vmov	r4, r5, d0
 8012566:	43aa      	bics	r2, r5
 8012568:	462b      	mov	r3, r5
 801256a:	4621      	mov	r1, r4
 801256c:	d110      	bne.n	8012590 <__ieee754_sqrt+0x34>
 801256e:	4622      	mov	r2, r4
 8012570:	4620      	mov	r0, r4
 8012572:	4629      	mov	r1, r5
 8012574:	f7ee f868 	bl	8000648 <__aeabi_dmul>
 8012578:	4602      	mov	r2, r0
 801257a:	460b      	mov	r3, r1
 801257c:	4620      	mov	r0, r4
 801257e:	4629      	mov	r1, r5
 8012580:	f7ed feac 	bl	80002dc <__adddf3>
 8012584:	4604      	mov	r4, r0
 8012586:	460d      	mov	r5, r1
 8012588:	ec45 4b10 	vmov	d0, r4, r5
 801258c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012590:	2d00      	cmp	r5, #0
 8012592:	dc0e      	bgt.n	80125b2 <__ieee754_sqrt+0x56>
 8012594:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012598:	4322      	orrs	r2, r4
 801259a:	d0f5      	beq.n	8012588 <__ieee754_sqrt+0x2c>
 801259c:	b19d      	cbz	r5, 80125c6 <__ieee754_sqrt+0x6a>
 801259e:	4622      	mov	r2, r4
 80125a0:	4620      	mov	r0, r4
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ed fe98 	bl	80002d8 <__aeabi_dsub>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	f7ee f976 	bl	800089c <__aeabi_ddiv>
 80125b0:	e7e8      	b.n	8012584 <__ieee754_sqrt+0x28>
 80125b2:	152a      	asrs	r2, r5, #20
 80125b4:	d115      	bne.n	80125e2 <__ieee754_sqrt+0x86>
 80125b6:	2000      	movs	r0, #0
 80125b8:	e009      	b.n	80125ce <__ieee754_sqrt+0x72>
 80125ba:	0acb      	lsrs	r3, r1, #11
 80125bc:	3a15      	subs	r2, #21
 80125be:	0549      	lsls	r1, r1, #21
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d0fa      	beq.n	80125ba <__ieee754_sqrt+0x5e>
 80125c4:	e7f7      	b.n	80125b6 <__ieee754_sqrt+0x5a>
 80125c6:	462a      	mov	r2, r5
 80125c8:	e7fa      	b.n	80125c0 <__ieee754_sqrt+0x64>
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	3001      	adds	r0, #1
 80125ce:	02dc      	lsls	r4, r3, #11
 80125d0:	d5fb      	bpl.n	80125ca <__ieee754_sqrt+0x6e>
 80125d2:	1e44      	subs	r4, r0, #1
 80125d4:	1b12      	subs	r2, r2, r4
 80125d6:	f1c0 0420 	rsb	r4, r0, #32
 80125da:	fa21 f404 	lsr.w	r4, r1, r4
 80125de:	4323      	orrs	r3, r4
 80125e0:	4081      	lsls	r1, r0
 80125e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125e6:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80125ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125ee:	07d2      	lsls	r2, r2, #31
 80125f0:	bf5c      	itt	pl
 80125f2:	005b      	lslpl	r3, r3, #1
 80125f4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80125f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80125fc:	bf58      	it	pl
 80125fe:	0049      	lslpl	r1, r1, #1
 8012600:	2600      	movs	r6, #0
 8012602:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012606:	107f      	asrs	r7, r7, #1
 8012608:	0049      	lsls	r1, r1, #1
 801260a:	2016      	movs	r0, #22
 801260c:	4632      	mov	r2, r6
 801260e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012612:	1915      	adds	r5, r2, r4
 8012614:	429d      	cmp	r5, r3
 8012616:	bfde      	ittt	le
 8012618:	192a      	addle	r2, r5, r4
 801261a:	1b5b      	suble	r3, r3, r5
 801261c:	1936      	addle	r6, r6, r4
 801261e:	0fcd      	lsrs	r5, r1, #31
 8012620:	3801      	subs	r0, #1
 8012622:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012626:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801262a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801262e:	d1f0      	bne.n	8012612 <__ieee754_sqrt+0xb6>
 8012630:	4605      	mov	r5, r0
 8012632:	2420      	movs	r4, #32
 8012634:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012638:	4293      	cmp	r3, r2
 801263a:	eb0c 0e00 	add.w	lr, ip, r0
 801263e:	dc02      	bgt.n	8012646 <__ieee754_sqrt+0xea>
 8012640:	d113      	bne.n	801266a <__ieee754_sqrt+0x10e>
 8012642:	458e      	cmp	lr, r1
 8012644:	d811      	bhi.n	801266a <__ieee754_sqrt+0x10e>
 8012646:	f1be 0f00 	cmp.w	lr, #0
 801264a:	eb0e 000c 	add.w	r0, lr, ip
 801264e:	da3f      	bge.n	80126d0 <__ieee754_sqrt+0x174>
 8012650:	2800      	cmp	r0, #0
 8012652:	db3d      	blt.n	80126d0 <__ieee754_sqrt+0x174>
 8012654:	f102 0801 	add.w	r8, r2, #1
 8012658:	1a9b      	subs	r3, r3, r2
 801265a:	458e      	cmp	lr, r1
 801265c:	bf88      	it	hi
 801265e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012662:	eba1 010e 	sub.w	r1, r1, lr
 8012666:	4465      	add	r5, ip
 8012668:	4642      	mov	r2, r8
 801266a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801266e:	3c01      	subs	r4, #1
 8012670:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012674:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012678:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801267c:	d1dc      	bne.n	8012638 <__ieee754_sqrt+0xdc>
 801267e:	4319      	orrs	r1, r3
 8012680:	d01b      	beq.n	80126ba <__ieee754_sqrt+0x15e>
 8012682:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012700 <__ieee754_sqrt+0x1a4>
 8012686:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012704 <__ieee754_sqrt+0x1a8>
 801268a:	e9da 0100 	ldrd	r0, r1, [sl]
 801268e:	e9db 2300 	ldrd	r2, r3, [fp]
 8012692:	f7ed fe21 	bl	80002d8 <__aeabi_dsub>
 8012696:	e9da 8900 	ldrd	r8, r9, [sl]
 801269a:	4602      	mov	r2, r0
 801269c:	460b      	mov	r3, r1
 801269e:	4640      	mov	r0, r8
 80126a0:	4649      	mov	r1, r9
 80126a2:	f7ee fa4d 	bl	8000b40 <__aeabi_dcmple>
 80126a6:	b140      	cbz	r0, 80126ba <__ieee754_sqrt+0x15e>
 80126a8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80126ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80126b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80126b4:	d10e      	bne.n	80126d4 <__ieee754_sqrt+0x178>
 80126b6:	3601      	adds	r6, #1
 80126b8:	4625      	mov	r5, r4
 80126ba:	1073      	asrs	r3, r6, #1
 80126bc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80126c0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80126c4:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80126c8:	086b      	lsrs	r3, r5, #1
 80126ca:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80126ce:	e759      	b.n	8012584 <__ieee754_sqrt+0x28>
 80126d0:	4690      	mov	r8, r2
 80126d2:	e7c1      	b.n	8012658 <__ieee754_sqrt+0xfc>
 80126d4:	f7ed fe02 	bl	80002dc <__adddf3>
 80126d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80126dc:	4602      	mov	r2, r0
 80126de:	460b      	mov	r3, r1
 80126e0:	4640      	mov	r0, r8
 80126e2:	4649      	mov	r1, r9
 80126e4:	f7ee fa22 	bl	8000b2c <__aeabi_dcmplt>
 80126e8:	b120      	cbz	r0, 80126f4 <__ieee754_sqrt+0x198>
 80126ea:	1cab      	adds	r3, r5, #2
 80126ec:	bf08      	it	eq
 80126ee:	3601      	addeq	r6, #1
 80126f0:	3502      	adds	r5, #2
 80126f2:	e7e2      	b.n	80126ba <__ieee754_sqrt+0x15e>
 80126f4:	1c6b      	adds	r3, r5, #1
 80126f6:	f023 0501 	bic.w	r5, r3, #1
 80126fa:	e7de      	b.n	80126ba <__ieee754_sqrt+0x15e>
 80126fc:	7ff00000 	.word	0x7ff00000
 8012700:	08012df0 	.word	0x08012df0
 8012704:	08012de8 	.word	0x08012de8

08012708 <__ieee754_atan2f>:
 8012708:	ee10 2a90 	vmov	r2, s1
 801270c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012710:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012714:	b510      	push	{r4, lr}
 8012716:	eef0 7a40 	vmov.f32	s15, s0
 801271a:	d806      	bhi.n	801272a <__ieee754_atan2f+0x22>
 801271c:	ee10 0a10 	vmov	r0, s0
 8012720:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012724:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012728:	d904      	bls.n	8012734 <__ieee754_atan2f+0x2c>
 801272a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801272e:	eeb0 0a67 	vmov.f32	s0, s15
 8012732:	bd10      	pop	{r4, pc}
 8012734:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012738:	d103      	bne.n	8012742 <__ieee754_atan2f+0x3a>
 801273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801273e:	f000 b883 	b.w	8012848 <atanf>
 8012742:	1794      	asrs	r4, r2, #30
 8012744:	f004 0402 	and.w	r4, r4, #2
 8012748:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801274c:	b943      	cbnz	r3, 8012760 <__ieee754_atan2f+0x58>
 801274e:	2c02      	cmp	r4, #2
 8012750:	d05e      	beq.n	8012810 <__ieee754_atan2f+0x108>
 8012752:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012824 <__ieee754_atan2f+0x11c>
 8012756:	2c03      	cmp	r4, #3
 8012758:	bf08      	it	eq
 801275a:	eef0 7a47 	vmoveq.f32	s15, s14
 801275e:	e7e6      	b.n	801272e <__ieee754_atan2f+0x26>
 8012760:	b941      	cbnz	r1, 8012774 <__ieee754_atan2f+0x6c>
 8012762:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012828 <__ieee754_atan2f+0x120>
 8012766:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801282c <__ieee754_atan2f+0x124>
 801276a:	2800      	cmp	r0, #0
 801276c:	bfa8      	it	ge
 801276e:	eef0 7a47 	vmovge.f32	s15, s14
 8012772:	e7dc      	b.n	801272e <__ieee754_atan2f+0x26>
 8012774:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012778:	d110      	bne.n	801279c <__ieee754_atan2f+0x94>
 801277a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801277e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012782:	d107      	bne.n	8012794 <__ieee754_atan2f+0x8c>
 8012784:	2c02      	cmp	r4, #2
 8012786:	d846      	bhi.n	8012816 <__ieee754_atan2f+0x10e>
 8012788:	4b29      	ldr	r3, [pc, #164]	@ (8012830 <__ieee754_atan2f+0x128>)
 801278a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801278e:	edd3 7a00 	vldr	s15, [r3]
 8012792:	e7cc      	b.n	801272e <__ieee754_atan2f+0x26>
 8012794:	2c02      	cmp	r4, #2
 8012796:	d841      	bhi.n	801281c <__ieee754_atan2f+0x114>
 8012798:	4b26      	ldr	r3, [pc, #152]	@ (8012834 <__ieee754_atan2f+0x12c>)
 801279a:	e7f6      	b.n	801278a <__ieee754_atan2f+0x82>
 801279c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80127a0:	d0df      	beq.n	8012762 <__ieee754_atan2f+0x5a>
 80127a2:	1a5b      	subs	r3, r3, r1
 80127a4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80127a8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80127ac:	da1a      	bge.n	80127e4 <__ieee754_atan2f+0xdc>
 80127ae:	2a00      	cmp	r2, #0
 80127b0:	da01      	bge.n	80127b6 <__ieee754_atan2f+0xae>
 80127b2:	313c      	adds	r1, #60	@ 0x3c
 80127b4:	db19      	blt.n	80127ea <__ieee754_atan2f+0xe2>
 80127b6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80127ba:	f7ff fec7 	bl	801254c <fabsf>
 80127be:	f000 f843 	bl	8012848 <atanf>
 80127c2:	eef0 7a40 	vmov.f32	s15, s0
 80127c6:	2c01      	cmp	r4, #1
 80127c8:	d012      	beq.n	80127f0 <__ieee754_atan2f+0xe8>
 80127ca:	2c02      	cmp	r4, #2
 80127cc:	d017      	beq.n	80127fe <__ieee754_atan2f+0xf6>
 80127ce:	2c00      	cmp	r4, #0
 80127d0:	d0ad      	beq.n	801272e <__ieee754_atan2f+0x26>
 80127d2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012838 <__ieee754_atan2f+0x130>
 80127d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801283c <__ieee754_atan2f+0x134>
 80127de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127e2:	e7a4      	b.n	801272e <__ieee754_atan2f+0x26>
 80127e4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801282c <__ieee754_atan2f+0x124>
 80127e8:	e7ed      	b.n	80127c6 <__ieee754_atan2f+0xbe>
 80127ea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012840 <__ieee754_atan2f+0x138>
 80127ee:	e7ea      	b.n	80127c6 <__ieee754_atan2f+0xbe>
 80127f0:	ee17 3a90 	vmov	r3, s15
 80127f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80127f8:	ee07 3a90 	vmov	s15, r3
 80127fc:	e797      	b.n	801272e <__ieee754_atan2f+0x26>
 80127fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012838 <__ieee754_atan2f+0x130>
 8012802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012806:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801283c <__ieee754_atan2f+0x134>
 801280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801280e:	e78e      	b.n	801272e <__ieee754_atan2f+0x26>
 8012810:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801283c <__ieee754_atan2f+0x134>
 8012814:	e78b      	b.n	801272e <__ieee754_atan2f+0x26>
 8012816:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012844 <__ieee754_atan2f+0x13c>
 801281a:	e788      	b.n	801272e <__ieee754_atan2f+0x26>
 801281c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012840 <__ieee754_atan2f+0x138>
 8012820:	e785      	b.n	801272e <__ieee754_atan2f+0x26>
 8012822:	bf00      	nop
 8012824:	c0490fdb 	.word	0xc0490fdb
 8012828:	bfc90fdb 	.word	0xbfc90fdb
 801282c:	3fc90fdb 	.word	0x3fc90fdb
 8012830:	08012e04 	.word	0x08012e04
 8012834:	08012df8 	.word	0x08012df8
 8012838:	33bbbd2e 	.word	0x33bbbd2e
 801283c:	40490fdb 	.word	0x40490fdb
 8012840:	00000000 	.word	0x00000000
 8012844:	3f490fdb 	.word	0x3f490fdb

08012848 <atanf>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	ee10 5a10 	vmov	r5, s0
 801284e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012852:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012856:	eef0 7a40 	vmov.f32	s15, s0
 801285a:	d310      	bcc.n	801287e <atanf+0x36>
 801285c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012860:	d904      	bls.n	801286c <atanf+0x24>
 8012862:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012866:	eeb0 0a67 	vmov.f32	s0, s15
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80129a4 <atanf+0x15c>
 8012870:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80129a8 <atanf+0x160>
 8012874:	2d00      	cmp	r5, #0
 8012876:	bfc8      	it	gt
 8012878:	eef0 7a47 	vmovgt.f32	s15, s14
 801287c:	e7f3      	b.n	8012866 <atanf+0x1e>
 801287e:	4b4b      	ldr	r3, [pc, #300]	@ (80129ac <atanf+0x164>)
 8012880:	429c      	cmp	r4, r3
 8012882:	d810      	bhi.n	80128a6 <atanf+0x5e>
 8012884:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012888:	d20a      	bcs.n	80128a0 <atanf+0x58>
 801288a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80129b0 <atanf+0x168>
 801288e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012896:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289e:	dce2      	bgt.n	8012866 <atanf+0x1e>
 80128a0:	f04f 33ff 	mov.w	r3, #4294967295
 80128a4:	e013      	b.n	80128ce <atanf+0x86>
 80128a6:	f7ff fe51 	bl	801254c <fabsf>
 80128aa:	4b42      	ldr	r3, [pc, #264]	@ (80129b4 <atanf+0x16c>)
 80128ac:	429c      	cmp	r4, r3
 80128ae:	d84f      	bhi.n	8012950 <atanf+0x108>
 80128b0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80128b4:	429c      	cmp	r4, r3
 80128b6:	d841      	bhi.n	801293c <atanf+0xf4>
 80128b8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80128bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80128c0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80128c4:	2300      	movs	r3, #0
 80128c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80128ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80128ce:	1c5a      	adds	r2, r3, #1
 80128d0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80128d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80129b8 <atanf+0x170>
 80128d8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80129bc <atanf+0x174>
 80128dc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80129c0 <atanf+0x178>
 80128e0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80128e4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80128e8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80129c4 <atanf+0x17c>
 80128ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80128f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80129c8 <atanf+0x180>
 80128f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80128f8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80129cc <atanf+0x184>
 80128fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012900:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80129d0 <atanf+0x188>
 8012904:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012908:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80129d4 <atanf+0x18c>
 801290c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012910:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80129d8 <atanf+0x190>
 8012914:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012918:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80129dc <atanf+0x194>
 801291c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012920:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80129e0 <atanf+0x198>
 8012924:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012928:	ee27 7a26 	vmul.f32	s14, s14, s13
 801292c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012934:	d121      	bne.n	801297a <atanf+0x132>
 8012936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801293a:	e794      	b.n	8012866 <atanf+0x1e>
 801293c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012940:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012944:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012948:	2301      	movs	r3, #1
 801294a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801294e:	e7be      	b.n	80128ce <atanf+0x86>
 8012950:	4b24      	ldr	r3, [pc, #144]	@ (80129e4 <atanf+0x19c>)
 8012952:	429c      	cmp	r4, r3
 8012954:	d80b      	bhi.n	801296e <atanf+0x126>
 8012956:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801295a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801295e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012962:	2302      	movs	r3, #2
 8012964:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801296c:	e7af      	b.n	80128ce <atanf+0x86>
 801296e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012972:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012976:	2303      	movs	r3, #3
 8012978:	e7a9      	b.n	80128ce <atanf+0x86>
 801297a:	4a1b      	ldr	r2, [pc, #108]	@ (80129e8 <atanf+0x1a0>)
 801297c:	491b      	ldr	r1, [pc, #108]	@ (80129ec <atanf+0x1a4>)
 801297e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012982:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012986:	edd3 6a00 	vldr	s13, [r3]
 801298a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801298e:	2d00      	cmp	r5, #0
 8012990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012994:	edd2 7a00 	vldr	s15, [r2]
 8012998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801299c:	bfb8      	it	lt
 801299e:	eef1 7a67 	vneglt.f32	s15, s15
 80129a2:	e760      	b.n	8012866 <atanf+0x1e>
 80129a4:	bfc90fdb 	.word	0xbfc90fdb
 80129a8:	3fc90fdb 	.word	0x3fc90fdb
 80129ac:	3edfffff 	.word	0x3edfffff
 80129b0:	7149f2ca 	.word	0x7149f2ca
 80129b4:	3f97ffff 	.word	0x3f97ffff
 80129b8:	3c8569d7 	.word	0x3c8569d7
 80129bc:	3d4bda59 	.word	0x3d4bda59
 80129c0:	bd6ef16b 	.word	0xbd6ef16b
 80129c4:	3d886b35 	.word	0x3d886b35
 80129c8:	3dba2e6e 	.word	0x3dba2e6e
 80129cc:	3e124925 	.word	0x3e124925
 80129d0:	3eaaaaab 	.word	0x3eaaaaab
 80129d4:	bd15a221 	.word	0xbd15a221
 80129d8:	bd9d8795 	.word	0xbd9d8795
 80129dc:	bde38e38 	.word	0xbde38e38
 80129e0:	be4ccccd 	.word	0xbe4ccccd
 80129e4:	401bffff 	.word	0x401bffff
 80129e8:	08012e20 	.word	0x08012e20
 80129ec:	08012e10 	.word	0x08012e10

080129f0 <_init>:
 80129f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f2:	bf00      	nop
 80129f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129f6:	bc08      	pop	{r3}
 80129f8:	469e      	mov	lr, r3
 80129fa:	4770      	bx	lr

080129fc <_fini>:
 80129fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129fe:	bf00      	nop
 8012a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a02:	bc08      	pop	{r3}
 8012a04:	469e      	mov	lr, r3
 8012a06:	4770      	bx	lr
